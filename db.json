{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/res/img/favicon.ico","path":"res/img/favicon.ico","modified":0,"renderable":0},{"_id":"source/res/img/icon.jpg","path":"res/img/icon.jpg","modified":0,"renderable":0},{"_id":"source/res/img/license.png","path":"res/img/license.png","modified":0,"renderable":0},{"_id":"source/res/img/top.png","path":"res/img/top.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/icon/1.ico","path":"icon/1.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/icon/2.ico","path":"icon/2.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/icon/3.ico","path":"icon/3.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/icon/5.ico","path":"icon/5.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/icon/4.ico","path":"icon/4.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/icon.jpg","path":"images/icon.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/res/img/404/404.png","path":"res/img/404/404.png","modified":0,"renderable":0},{"_id":"source/res/img/404/404_cloud.png","path":"res/img/404/404_cloud.png","modified":0,"renderable":0},{"_id":"source/res/img/404/404_error.jpg","path":"res/img/404/404_error.jpg","modified":0,"renderable":0},{"_id":"source/res/img/bg/01.jpg","path":"res/img/bg/01.jpg","modified":0,"renderable":0},{"_id":"source/res/img/bg/02.jpg","path":"res/img/bg/02.jpg","modified":0,"renderable":0},{"_id":"source/res/img/bg/03.jpg","path":"res/img/bg/03.jpg","modified":0,"renderable":0},{"_id":"source/res/img/fancybox/blank.gif","path":"res/img/fancybox/blank.gif","modified":0,"renderable":0},{"_id":"source/res/img/fancybox/fancybox_loading.gif","path":"res/img/fancybox/fancybox_loading.gif","modified":0,"renderable":0},{"_id":"source/res/img/fancybox/fancybox_loading@2x.gif","path":"res/img/fancybox/fancybox_loading@2x.gif","modified":0,"renderable":0},{"_id":"source/res/img/fancybox/fancybox_overlay.png","path":"res/img/fancybox/fancybox_overlay.png","modified":0,"renderable":0},{"_id":"source/res/img/fancybox/fancybox_sprite.png","path":"res/img/fancybox/fancybox_sprite.png","modified":0,"renderable":0},{"_id":"source/res/img/fancybox/fancybox_sprite@2x.png","path":"res/img/fancybox/fancybox_sprite@2x.png","modified":0,"renderable":0},{"_id":"source/res/img/icon/1.ico","path":"res/img/icon/1.ico","modified":0,"renderable":0},{"_id":"source/res/img/icon/2.ico","path":"res/img/icon/2.ico","modified":0,"renderable":0},{"_id":"source/res/img/icon/3.ico","path":"res/img/icon/3.ico","modified":0,"renderable":0},{"_id":"source/res/img/icon/4.ico","path":"res/img/icon/4.ico","modified":0,"renderable":0},{"_id":"source/res/img/icon/5.ico","path":"res/img/icon/5.ico","modified":0,"renderable":0},{"_id":"source/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.jpg","path":"res/video/2014-10-18-hello world/anim_page_transformer_zoomout.jpg","modified":0,"renderable":0},{"_id":"source/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.mp4","path":"res/video/2014-10-18-hello world/anim_page_transformer_zoomout.mp4","modified":0,"renderable":0},{"_id":"source/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.webm","path":"res/video/2014-10-18-hello world/anim_page_transformer_zoomout.webm","modified":0,"renderable":0},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"source/res/img/bg/04.jpg","path":"res/img/bg/04.jpg","modified":0,"renderable":0},{"_id":"source/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.ogv","path":"res/video/2014-10-18-hello world/anim_page_transformer_zoomout.ogv","modified":0,"renderable":0},{"_id":"themes/hexo-theme-next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/res/game/plane/gameArts.png","path":"res/game/plane/gameArts.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/18/pygments-autumn.png","path":"res/img/blog/2014/10/18/pygments-autumn.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/18/pygments-bw.png","path":"res/img/blog/2014/10/18/pygments-bw.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/18/pygments-colorful.png","path":"res/img/blog/2014/10/18/pygments-colorful.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/18/pygments-borland.png","path":"res/img/blog/2014/10/18/pygments-borland.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/18/pygments-emacs.png","path":"res/img/blog/2014/10/18/pygments-emacs.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/18/pygments-monokai.png","path":"res/img/blog/2014/10/18/pygments-monokai.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/18/pygments-murphy.png","path":"res/img/blog/2014/10/18/pygments-murphy.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/18/pygments-native.png","path":"res/img/blog/2014/10/18/pygments-native.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/18/pygments-pastie.png","path":"res/img/blog/2014/10/18/pygments-pastie.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/18/pygments-rrt.png","path":"res/img/blog/2014/10/18/pygments-rrt.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/18/pygments-trac.png","path":"res/img/blog/2014/10/18/pygments-trac.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/18/pygments-vim.png","path":"res/img/blog/2014/10/18/pygments-vim.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/18/pygments-vs.png","path":"res/img/blog/2014/10/18/pygments-vs.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/res/file/blog/2014/10/23/java8_new_feature/Java8NewFeature.rar","path":"res/file/blog/2014/10/23/java8_new_feature/Java8NewFeature.rar","modified":0,"renderable":0},{"_id":"source/res/file/blog/2014/12/14/Java_Thread/MyThreadAndRunnable.rar","path":"res/file/blog/2014/12/14/Java_Thread/MyThreadAndRunnable.rar","modified":0,"renderable":0},{"_id":"source/res/file/blog/2014/12/15/Java_Throad_Visibility/ThreadTheVisibility.rar","path":"res/file/blog/2014/12/15/Java_Throad_Visibility/ThreadTheVisibility.rar","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/18/pygments-default.png","path":"res/img/blog/2014/10/18/pygments-default.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/18/pygments-friendly.png","path":"res/img/blog/2014/10/18/pygments-friendly.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/18/pygments-fruity.png","path":"res/img/blog/2014/10/18/pygments-fruity.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/18/pygments-manni.png","path":"res/img/blog/2014/10/18/pygments-manni.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/18/pygments-perldoc.png","path":"res/img/blog/2014/10/18/pygments-perldoc.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/18/pygments-tango.png","path":"res/img/blog/2014/10/18/pygments-tango.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/001.png","path":"res/img/blog/2014/10/27/android_safe_mode_mechanism_three/001.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/23/java8_new_feature/ECLIPSE-JAVA-COMPILER.png","path":"res/img/blog/2014/10/23/java8_new_feature/ECLIPSE-JAVA-COMPILER.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/002.png","path":"res/img/blog/2014/10/27/android_safe_mode_mechanism_three/002.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/004.png","path":"res/img/blog/2014/10/27/android_safe_mode_mechanism_three/004.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/003.png","path":"res/img/blog/2014/10/27/android_safe_mode_mechanism_three/003.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/005.png","path":"res/img/blog/2014/10/27/android_safe_mode_mechanism_three/005.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_run.png","path":"res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_run.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/Properties_C-C++.png","path":"res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/Properties_C-C++.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_javap.png","path":"res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_javap.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/12/14/Java_Thread/Thread_lifecycle.png","path":"res/img/blog/2014/12/14/Java_Thread/Thread_lifecycle.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_javah.png","path":"res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_javah.png","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/12/16/Java_Thread_Pool/01.gif","path":"res/img/blog/2014/12/16/Java_Thread_Pool/01.gif","modified":0,"renderable":0},{"_id":"source/res/file/blog/2014/11/01/Java_JNI/HelloJNI.apk","path":"res/file/blog/2014/11/01/Java_JNI/HelloJNI.apk","modified":0,"renderable":0},{"_id":"source/res/file/blog/2014/11/01/Java_JNI/HelloJNI.rar","path":"res/file/blog/2014/11/01/Java_JNI/HelloJNI.rar","modified":0,"renderable":0},{"_id":"source/res/file/blog/2015/09/10/PHP_codeigniter/CodeIgniter-3.0.0_Demo.rar","path":"res/file/blog/2015/09/10/PHP_codeigniter/CodeIgniter-3.0.0_Demo.rar","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/11/01/Java_JNI/demo.gif","path":"res/img/blog/2014/11/01/Java_JNI/demo.gif","modified":0,"renderable":0},{"_id":"source/res/img/blog/2014/12/16/Java_Thread_Pool/02.gif","path":"res/img/blog/2014/12/16/Java_Thread_Pool/02.gif","modified":0,"renderable":0},{"_id":"source/res/file/blog/2015/01/01/Java_Android_Studio_IDE/MyApplication.rar","path":"res/file/blog/2015/01/01/Java_Android_Studio_IDE/MyApplication.rar","modified":0,"renderable":0},{"_id":"source/res/file/blog/2014/10/27/android_safe_mode_mechanism_three/Permission.rar","path":"res/file/blog/2014/10/27/android_safe_mode_mechanism_three/Permission.rar","modified":0,"renderable":0},{"_id":"source/res/file/blog/2014/10/29/Android_NDK_Hello_World_two/AndroidNDKHelloWorld.rar","path":"res/file/blog/2014/10/29/Android_NDK_Hello_World_two/AndroidNDKHelloWorld.rar","modified":0,"renderable":0},{"_id":"source/res/file/blog/2015/10/10/PHP_Laravel/laravel-v5.0.22_Demo.rar","path":"res/file/blog/2015/10/10/PHP_Laravel/laravel-v5.0.22_Demo.rar","modified":0,"renderable":0},{"_id":"source/res/file/blog/2015/09/10/PHP_codeigniter/mycishop.rar","path":"res/file/blog/2015/09/10/PHP_codeigniter/mycishop.rar","modified":0,"renderable":0},{"_id":"source/res/file/blog/2014/12/16/Java_Thread_Pool/MyThread.rar","path":"res/file/blog/2014/12/16/Java_Thread_Pool/MyThread.rar","modified":0,"renderable":0},{"_id":"source/res/file/blog/2015/10/10/PHP_Laravel/myLaravelShop_Demo.rar","path":"res/file/blog/2015/10/10/PHP_Laravel/myLaravelShop_Demo.rar","modified":0,"renderable":0},{"_id":"source/res/file/blog/2014/12/01/Java_security/Security.rar","path":"res/file/blog/2014/12/01/Java_security/Security.rar","modified":0,"renderable":0}],"Cache":[{"_id":"themes/hexo-theme-next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1461661092667},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1461661092667},{"_id":"themes/hexo-theme-next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1461661092668},{"_id":"themes/hexo-theme-next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1461661092668},{"_id":"themes/hexo-theme-next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1461661092668},{"_id":"themes/hexo-theme-next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1461661092669},{"_id":"themes/hexo-theme-next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1461661092669},{"_id":"themes/hexo-theme-next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1461661092669},{"_id":"themes/hexo-theme-next/_config.yml","hash":"e9814e056dd39a5f65363fe753f1e11e7d2497af","modified":1461810397978},{"_id":"themes/hexo-theme-next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1461661092670},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1461661092670},{"_id":"themes/hexo-theme-next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1461661092700},{"_id":"source/_posts/2014-10-18-hello world.md","hash":"9668219c5a1e29848af95a9479d10aeb59198497","modified":1462440239673},{"_id":"source/_posts/2014-10-18-support-pygments-in-Jekyll.md","hash":"c527709a870657be463332d52bf9ef370edb66c5","modified":1461746099199},{"_id":"source/_posts/2014-10-18-windows_configuration_Jekyll.md","hash":"cfb1fd00da008bdaff8d0776ff9c7ef8e6661950","modified":1461745615359},{"_id":"source/_posts/2014-10-19-Jekyll_Variables.md","hash":"6306f989746f5c534ba517fa96fedd111a303cea","modified":1461745423432},{"_id":"source/_posts/2014-10-19-git_common_command.md","hash":"c26b52818501c1bb898246401ad54fb1f448e982","modified":1461811146609},{"_id":"source/_posts/2014-10-20-Design_pattern_Singleton.md","hash":"81f15f7d3347fc13fabcabd4042db87ce1122681","modified":1461745349655},{"_id":"source/_posts/2014-10-20-Design_pattern_Template.md","hash":"4e033c4e9fcc77a1681efba6a3e64210109ef958","modified":1461745311767},{"_id":"source/_posts/2014-10-21-android_Interactive-animation.md","hash":"00d44c4af4dff6c6356b93aa61a283d614556070","modified":1461811316574},{"_id":"source/_posts/2014-10-21-android_excellent_project_library.md","hash":"ea7ee2e134e2c7323720ed096e0c344076389796","modified":1424857180070},{"_id":"source/_posts/2014-10-22-plane_game_demo.md","hash":"4614e57d54a3683da4a4283ffbd04aca53f8154d","modified":1461744980438},{"_id":"source/_posts/2014-10-23-java8_new_feature.md","hash":"273611b418133f2e764dc71d3a35a4b94df48abc","modified":1462333796284},{"_id":"source/_posts/2014-10-24-android_automatic_packaging.md","hash":"7bad4af11415f4f2cc498c132d81e611450e8ebe","modified":1461743729535},{"_id":"source/_posts/2014-10-25-android_safe_mode_mechanism_one.md","hash":"818466a770a6e76b777f8811c8eaf51dbef3b08c","modified":1461743608879},{"_id":"source/_posts/2014-10-26-android_safe_mode_mechanism_two.md","hash":"5a067a4f96b9abc2cc9c70017726f017ddf7410b","modified":1461743663084},{"_id":"source/_posts/2014-10-27-android_safe_mode_mechanism_three.md","hash":"89013c906324f340aacd18f4160f9385589d4075","modified":1461743736279},{"_id":"source/_posts/2014-10-28-Android_NDK_IDE_environment_one.md","hash":"3412540be35ed21b957e7cb4a806d72fe04cee0b","modified":1461728440364},{"_id":"source/_posts/2014-10-29-Android_NDK_Hello_World_two.md","hash":"21438e81d6db962f9236f838640e079c65f1d99c","modified":1461728613257},{"_id":"source/_posts/2014-11-01-Java_JNI.md","hash":"d183aa20164b43308a370ce0ab128d0f95412d76","modified":1461728070622},{"_id":"source/_posts/2014-12-01-Java_security.md","hash":"ea4cd969a9b2ef02afeb4dfb5d47336e0492fddb","modified":1461727469057},{"_id":"source/_posts/2014-12-14-Java_Thread.md","hash":"9df2510f6765c4b377c51339cc86f6ed817cb6e6","modified":1461727180938},{"_id":"source/_posts/2014-12-15-Java_Throad_Visibility.md","hash":"dbed8fa1bcd62812486d75666aea7be6cd2bda42","modified":1461726942141},{"_id":"source/_posts/2014-12-16-Java_Throad_Pool.md","hash":"f40f668bd8bf0db9116e9da80f08ed2ff1110978","modified":1461726780814},{"_id":"source/_posts/2015-01-01-Java_Android_Studio_IDE.md","hash":"7b55aa45e3b956c1585c0076b8baa6574ae561df","modified":1461726073340},{"_id":"source/_posts/2015-09-10-PHP_codeigniter.md","hash":"bdee5cf78871dda72094560016333d461aaecbef","modified":1461725941212},{"_id":"source/about/index.md","hash":"0dcb72a1510f84bdb908fef0028c120c6a11f8ef","modified":1461723626801},{"_id":"source/_posts/2015-10-10-PHP_Laravel.md","hash":"faa2ea13848810b812fcbd786e650a164277fadf","modified":1462430759208},{"_id":"source/categories/index.md","hash":"aa5a144fb3249968cfdaccb5d659375d18b181f9","modified":1461723088353},{"_id":"source/tags/index.md","hash":"be01bb5051877e0b781a2f9df6f6fc9d94512133","modified":1461723047756},{"_id":"themes/hexo-theme-next/.git/config","hash":"2e8d4ea34f7ac5fbf3a7e3cb6d3bd3691e2e3009","modified":1461661092657},{"_id":"themes/hexo-theme-next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1461661092650},{"_id":"themes/hexo-theme-next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1461661050348},{"_id":"themes/hexo-theme-next/.git/index","hash":"a35dbad14c2458ec38185e025724cfa013c02242","modified":1462440395267},{"_id":"themes/hexo-theme-next/.git/packed-refs","hash":"ba9cdcf5944e85d2ceb8c3aef723c8565e95da90","modified":1461661092638},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1461661092668},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1461661092668},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1461661092671},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1461661092671},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1461661092671},{"_id":"themes/hexo-theme-next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1461661092672},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1461661092672},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1461661092673},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1461661092673},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1461661092673},{"_id":"themes/hexo-theme-next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1461661092674},{"_id":"themes/hexo-theme-next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1461661092674},{"_id":"themes/hexo-theme-next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1461661092674},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1461661092675},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1461661092698},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1461661092698},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1461661092699},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1461661092699},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1461661092699},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1461661092699},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1461661092700},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1461661092807},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1461661092808},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1461661092808},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1461661092766},{"_id":"source/_posts/2014-10-21-android_open_project.md","hash":"ff3f1033a559655d790864e2663eee7238dbe13f","modified":1431056124375},{"_id":"source/res/img/favicon.ico","hash":"14bca3963467538a6f632a56c0adef0ef9ea1053","modified":1424857180144},{"_id":"source/res/img/icon.jpg","hash":"62b91900b62a7fba22223279c1710f9a6d42b8cc","modified":1424857180144},{"_id":"source/res/img/license.png","hash":"c90f8c9321f039662c011d306348d9fb8d942283","modified":1424857180149},{"_id":"source/res/img/top.png","hash":"9eda4757d2b7f51eae8e5ad08da84d01dc7b36cb","modified":1424857180150},{"_id":"themes/hexo-theme-next/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1461661050348},{"_id":"themes/hexo-theme-next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1461661050349},{"_id":"themes/hexo-theme-next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1461661050350},{"_id":"themes/hexo-theme-next/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1461661050350},{"_id":"themes/hexo-theme-next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1461661050351},{"_id":"themes/hexo-theme-next/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1461661050351},{"_id":"themes/hexo-theme-next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1461661050351},{"_id":"themes/hexo-theme-next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1461661050352},{"_id":"themes/hexo-theme-next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1461661050352},{"_id":"themes/hexo-theme-next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1461661050354},{"_id":"themes/hexo-theme-next/.git/logs/HEAD","hash":"5079fbb3974a7c1792ee9070c42c65ea8938bfeb","modified":1461661092654},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1461661092675},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"ae280b8bc49b87e3b86ce1a131191c37d6aa37b4","modified":1461661092675},{"_id":"themes/hexo-theme-next/layout/_macro/reward.swig","hash":"70bd1f11a558a7fc4b8fd7860377f31e0357ceb6","modified":1461661092675},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"cd98e1141df1a41ed14f31cd4cf5f5c5f0a9898e","modified":1461661092676},{"_id":"themes/hexo-theme-next/layout/_macro/wechat-subscriber.swig","hash":"85327c2174d09c6d69c9033592e6c8f7eb7ac3ba","modified":1461661092676},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1461661092677},{"_id":"themes/hexo-theme-next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1461661092677},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"0ce71d8322ea7dea82d9371fa2fe13949aa870e3","modified":1461661092678},{"_id":"themes/hexo-theme-next/layout/_partials/head.swig","hash":"53bf077755e217a2b5ae107da62b6a824a0baa52","modified":1461661092678},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"7739068b69f87ae641dea19c3445169ae80d5df4","modified":1461661092688},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1461661092688},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1461661092688},{"_id":"themes/hexo-theme-next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1461661092691},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1461661092691},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1461661092691},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1461661092697},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1461661092701},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1461661092701},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1461661092702},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1461661092766},{"_id":"themes/hexo-theme-next/source/icon/1.ico","hash":"14bca3963467538a6f632a56c0adef0ef9ea1053","modified":1424857180145},{"_id":"themes/hexo-theme-next/source/icon/2.ico","hash":"875f5c5302eddd5bbf962147ffb6dbf344a1e8eb","modified":1424857180146},{"_id":"themes/hexo-theme-next/source/icon/3.ico","hash":"ed128913fedff79b9afd4edce19e4ddb9b0ef15e","modified":1424857180147},{"_id":"themes/hexo-theme-next/source/icon/5.ico","hash":"e790ce46cc93d06713f22a32995fcddd67154b28","modified":1424857180148},{"_id":"themes/hexo-theme-next/source/icon/4.ico","hash":"bc901413e1fb8bcea731f6d125016efd69ce9853","modified":1424857180148},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1461661092767},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1461661092767},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1461661092767},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1461661092768},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1461661092768},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1461661092769},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1461661092769},{"_id":"themes/hexo-theme-next/source/images/icon.jpg","hash":"62b91900b62a7fba22223279c1710f9a6d42b8cc","modified":1424857180144},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1461661092769},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1461661092769},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1461661092770},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1461661092770},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1461661092770},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1461661092692},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1461661092692},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1461661092735},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1461661092735},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1461661092736},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1461661092764},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1461661092765},{"_id":"source/res/game/plane/Enemy.js","hash":"7887512a4f603307cb718e400d069884d0ff6d25","modified":1435128310881},{"_id":"source/res/game/plane/Bullet.js","hash":"504b09dea7cb5efbcd98895b3cd1a702551df47d","modified":1435128310880},{"_id":"source/res/game/plane/Sprite.js","hash":"40cc808b6a9db1cd235da915c2227ceb80b1c8c1","modified":1435128310883},{"_id":"source/res/game/plane/bgSprite.js","hash":"9c01634714d11629b2a138ae0140944fa12880ba","modified":1435128310884},{"_id":"source/res/game/plane/countFps.js","hash":"aad568eb50d27ce5004db902b627620df272006b","modified":1435128310885},{"_id":"source/res/game/plane/plane.html","hash":"755149ef683304cb75fce22ae1a3438c5673a13d","modified":1435128310898},{"_id":"source/res/game/plane/plane.js","hash":"b353c3fec1f97f5906c1029cec5b3c39ef7df618","modified":1435128310899},{"_id":"source/res/game/plane/requestNextAnimationFrame.js","hash":"d2641697b724b06b3f045dad58ce3f5c75ab5e71","modified":1435128310903},{"_id":"source/res/game/plane/windowTocanvas.js","hash":"4bf31ad39be78aac1c2b58070731da8a892809fa","modified":1435128310925},{"_id":"source/res/img/404/404.png","hash":"cd61b6b0dcda2241c9b80b51cd3360800110f148","modified":1424857180102},{"_id":"source/res/img/404/404_cloud.png","hash":"8d58e68a106a9df40ae743ccfd0af7b555c4703b","modified":1424857180103},{"_id":"source/res/img/404/404_error.jpg","hash":"4559edc6bb6fb887f96e57903ad76570273e183b","modified":1424857180104},{"_id":"source/res/img/bg/01.jpg","hash":"a0fa2f25911e5fa49f46030c06c74e3fabe682ab","modified":1424857180106},{"_id":"source/res/img/bg/02.jpg","hash":"fe2418a730f0c31d906b1f40fff855459453fb70","modified":1424857180107},{"_id":"source/res/img/bg/03.jpg","hash":"6ce6038876ef7d7f56a24bf3bb613566fbf638ae","modified":1424857180108},{"_id":"source/res/img/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1424857180138},{"_id":"source/res/img/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1424857180139},{"_id":"source/res/img/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1424857180140},{"_id":"source/res/img/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1424857180141},{"_id":"source/res/img/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1424857180142},{"_id":"source/res/img/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1424857180143},{"_id":"source/res/img/icon/1.ico","hash":"14bca3963467538a6f632a56c0adef0ef9ea1053","modified":1424857180145},{"_id":"source/res/img/icon/2.ico","hash":"875f5c5302eddd5bbf962147ffb6dbf344a1e8eb","modified":1424857180146},{"_id":"source/res/img/icon/3.ico","hash":"ed128913fedff79b9afd4edce19e4ddb9b0ef15e","modified":1424857180147},{"_id":"source/res/img/icon/4.ico","hash":"bc901413e1fb8bcea731f6d125016efd69ce9853","modified":1424857180148},{"_id":"source/res/img/icon/5.ico","hash":"e790ce46cc93d06713f22a32995fcddd67154b28","modified":1424857180148},{"_id":"source/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.jpg","hash":"99eca14576ae8ade9ad9f66029748a4859d863ba","modified":1424857180166},{"_id":"source/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.mp4","hash":"a5ea5d8c60d5c522ca0f9c4ad338c3660bdc300a","modified":1424857180167},{"_id":"source/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.webm","hash":"87d7f643e789eb883b063c3eaa5c736a03608dee","modified":1424857180170},{"_id":"themes/hexo-theme-next/.git/refs/heads/master","hash":"e3d1b06d5dd3ad7232847edd24ffddae9eac89d7","modified":1461661092653},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"36db00417ab0f7639c4cc95ab6e20a7a69be9560","modified":1461661092678},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1461661092689},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1461661092689},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1461661092689},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1461661092689},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1461661092690},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1462432065271},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1461661092690},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1461661092692},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1461661092693},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1461661092693},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1461661092695},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/lean-analytics.swig","hash":"2fc4a0d2c825a512f39c0eadd78452e90615465a","modified":1461661092696},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1461661092697},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1461661092697},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1461661092697},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1461661092735},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1461661092735},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"4e49707c99c8bbcfa0a607dfdaff0fbb7dffd2a3","modified":1461661092736},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1461661092763},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"11d443fc97648d2965d7f8bad9f4a493996fe62f","modified":1461661092764},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"2676996e819af2079c552f755ab7933939e151cd","modified":1461661092765},{"_id":"themes/hexo-theme-next/source/css/_variables/default.styl","hash":"8ec3307fe42d738b1bbda4b6419d0995f5560222","modified":1461661092765},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1461661092771},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1461661092771},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1461661092772},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1461661092772},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1461661092773},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1461661092774},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"a3a3375de818964f4cbed4d0e2c2f97ccee7199e","modified":1461661092774},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1461661092782},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1461661092783},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1461661092783},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1461661092785},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1461661092775},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1461661092775},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1461661092786},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1461661092787},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1461661092787},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1461661092787},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1461661092788},{"_id":"themes/hexo-theme-next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1461661092797},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1461661092799},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1461661092800},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1461661092800},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1461661092801},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1461661092801},{"_id":"themes/hexo-theme-next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1461661092802},{"_id":"themes/hexo-theme-next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1461661092803},{"_id":"themes/hexo-theme-next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1461661092804},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1461661092806},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1461661092806},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1461661092807},{"_id":"source/res/img/bg/04.jpg","hash":"dff104b9dc6cb9ec54a71714acc9095f2da7c177","modified":1424857180109},{"_id":"source/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.ogv","hash":"ae3e0b362918315b11c96e78362b2e0012170253","modified":1424857180169},{"_id":"themes/hexo-theme-next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1461661092798},{"_id":"themes/hexo-theme-next/.git/logs/refs/heads/master","hash":"5079fbb3974a7c1792ee9070c42c65ea8938bfeb","modified":1461661092653},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-bb3d6db899c058e0269babbce12a88890c777be6.idx","hash":"6983eb0ddae7aa98a2f9d7b1c7056d7daa59e5a4","modified":1461661092491},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1461661092648},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1461661092693},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1461661092694},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1461661092694},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1461661092694},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1461661092695},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1461661092695},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1461661092696},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"8c7af79407d223486fba72b8150fe045a553bf70","modified":1461661092696},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1461661092703},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1461661092703},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1461661092702},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1461661092704},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1461661092708},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1461661092713},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1461661092733},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1461661092733},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"4c84903d6a15a903235eec04a560fdeda80c12f3","modified":1461661092733},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1461661092734},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1461661092734},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1461661092734},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1461661092736},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1461661092737},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1461661092737},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1461661092748},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1461661092748},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1461661092749},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"6cc10d943d92eac953e6978e46d27ae55584482c","modified":1461661092749},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1461661092749},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1461661092750},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1461661092750},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1461661092750},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"8aca5d9f1df157ab27e699c1b3ba9438b9e039ad","modified":1461661092751},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1461661092751},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1461661092752},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1461661092751},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1461661092763},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ff30fdbdf22841d0fb55f486a1f55bee4dc19401","modified":1461661092763},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1461661092762},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1461661092763},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1461661092774},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1461661092785},{"_id":"themes/hexo-theme-next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1461661092786},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1461661092776},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1461661092776},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1461661092776},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1461661092777},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1461661092777},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1461661092778},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1461661092780},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1461661092781},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1461661092782},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1461661092788},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1461661092788},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1461661092789},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1461661092797},{"_id":"themes/hexo-theme-next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1461661092802},{"_id":"themes/hexo-theme-next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1461661092803},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1461661092790},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1461661092791},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1461661092796},{"_id":"themes/hexo-theme-next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1461661092805},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/HEAD","hash":"5079fbb3974a7c1792ee9070c42c65ea8938bfeb","modified":1461661092650},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1461661092704},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1461661092704},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1461661092704},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1461661092705},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1461661092705},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1461661092705},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1461661092707},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1461661092707},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1461661092708},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"e340071ee392f55b32c540d690198f157e588433","modified":1461661092706},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1461661092706},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1461661092708},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1461661092709},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1461661092709},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1461661092709},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1461661092709},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1461661092710},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1461661092710},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"99d994bd19895a4aaa2fa8d12801ec72dd3cf118","modified":1461661092710},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1461661092711},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1461661092710},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"7a2941bbce9b433f0ce6fc04055cad10eec0f953","modified":1461661092711},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1461661092711},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"89fef1caf94caf76ca09c643b83b0b4d4e417e08","modified":1461661092711},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1461661092712},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1461661092712},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1461661092712},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1461661092713},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1461661092713},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1461661092713},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"58fb7604b44e3f56d880bbbd95d0baface38c4ee","modified":1461661092713},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1461661092714},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1461661092729},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1461661092706},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1461661092730},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1461661092730},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1461661092731},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1461661092732},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1461661092731},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1461661092732},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1461661092732},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1461661092732},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1461661092749},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1461661092778},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1461661092779},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1461661092778},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1461661092779},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1461661092780},{"_id":"themes/hexo-theme-next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1461661092780},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1461661092796},{"_id":"source/res/game/plane/gameArts.png","hash":"89e75e925c4a1f036b90397fa3eb3aeb3da6c120","modified":1435128310895},{"_id":"source/res/img/blog/2014/10/18/pygments-autumn.png","hash":"9f8d339557d8d354c6d6d0ccd65ebf6c0e95bc1f","modified":1424857180111},{"_id":"source/res/img/blog/2014/10/18/pygments-bw.png","hash":"bcc2a9d840322043b42fce8f0b24ecca06dbe740","modified":1424857180114},{"_id":"source/res/img/blog/2014/10/18/pygments-colorful.png","hash":"8d5071636ee91de5d999c2242f4314541912e4e7","modified":1424857180116},{"_id":"source/res/img/blog/2014/10/18/pygments-borland.png","hash":"b69688cb87b827777fa8d4b6c24600a181bf5f26","modified":1424857180112},{"_id":"source/res/img/blog/2014/10/18/pygments-emacs.png","hash":"b828bb9c434c88c36f1fc4d94cd7e8c857c0f56e","modified":1424857180118},{"_id":"source/res/img/blog/2014/10/18/pygments-monokai.png","hash":"9c186f3419fcc426cac8531cad804d0d0b8cc1a2","modified":1424857180124},{"_id":"source/res/img/blog/2014/10/18/pygments-murphy.png","hash":"9566f8f45d7460ecf653525712700cf61028ca19","modified":1424857180126},{"_id":"source/res/img/blog/2014/10/18/pygments-native.png","hash":"747b204418d4ef20659e4de784c97496e3b2e48a","modified":1424857180127},{"_id":"source/res/img/blog/2014/10/18/pygments-pastie.png","hash":"8bb237b62dc8afc69c3ab021217db3f086604102","modified":1424857180128},{"_id":"source/res/img/blog/2014/10/18/pygments-rrt.png","hash":"7bfe9ce42694a4608f3d013d2d9b23ac30a0e89d","modified":1424857180131},{"_id":"source/res/img/blog/2014/10/18/pygments-trac.png","hash":"0dd0537eeea3f7bba1338d825943d64db0d25327","modified":1424857180134},{"_id":"source/res/img/blog/2014/10/18/pygments-vim.png","hash":"0fdc0300d4eb24d4b062bbbb0b38cecc838c295b","modified":1424857180136},{"_id":"source/res/img/blog/2014/10/18/pygments-vs.png","hash":"cf48731432738de6512b72eb5f809280ec7242f4","modified":1424857180137},{"_id":"themes/hexo-theme-next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1461661092794},{"_id":"source/res/file/blog/2014/10/23/java8_new_feature/Java8NewFeature.rar","hash":"45e6e841ae53eaa240c25da5bf022cc00d1c7952","modified":1435220298013},{"_id":"source/res/file/blog/2014/12/14/Java_Thread/MyThreadAndRunnable.rar","hash":"bfdf834bc294db85e1e0005cfbff558e00fc3f80","modified":1438593638930},{"_id":"source/res/file/blog/2014/12/15/Java_Throad_Visibility/ThreadTheVisibility.rar","hash":"9e40a74237b1733d36a66aa0082a89ffabcbf1f3","modified":1438569418326},{"_id":"source/res/img/blog/2014/10/18/pygments-default.png","hash":"255f88d02ea84fd24e48eb474b89d24f644e5830","modified":1424857180117},{"_id":"source/res/img/blog/2014/10/18/pygments-friendly.png","hash":"e2eb6c50d42b4eccc5d75a01094a8630290096f1","modified":1424857180120},{"_id":"source/res/img/blog/2014/10/18/pygments-fruity.png","hash":"c9b25328d9554627a6d081b56eb2e7d423c217df","modified":1424857180122},{"_id":"source/res/img/blog/2014/10/18/pygments-manni.png","hash":"e7b9a854d71dca784eb8830ca5f11605d25b6ba2","modified":1424857180123},{"_id":"source/res/img/blog/2014/10/18/pygments-perldoc.png","hash":"b12044099bf3803277b9596f0fdaa068a4b80c5c","modified":1424857180130},{"_id":"source/res/img/blog/2014/10/18/pygments-tango.png","hash":"c31456f0bb2aace1dc173cf8884058f7ff9e288f","modified":1424857180133},{"_id":"source/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/001.png","hash":"cd18b8bcfb8020840c85993ff7ef969877934c68","modified":1436153773457},{"_id":"source/res/img/blog/2014/10/23/java8_new_feature/ECLIPSE-JAVA-COMPILER.png","hash":"18730c354d7933f21469c0d000955c7a456bc550","modified":1435193044701},{"_id":"source/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/002.png","hash":"8245db53f700d4a92e31fbd9ad9e90bec6c51ebd","modified":1436153789284},{"_id":"source/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/004.png","hash":"9b12ea640f68d0319a8f6c45b27627dc83a708f3","modified":1436165929935},{"_id":"source/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/003.png","hash":"e6b6a4a1bd4bcb1a2a88d444afa2f5e4148507f5","modified":1436165900450},{"_id":"source/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/005.png","hash":"eb697e9dd290567ad1c98078cfc89041b0594d33","modified":1436166419094},{"_id":"source/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_run.png","hash":"f879a5d7a0b3fcfd66539b72e4b24c4fa16d370f","modified":1437714716826},{"_id":"source/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/Properties_C-C++.png","hash":"4f5d8d527a157294b2f74fdc7041a81f35927af3","modified":1437719847785},{"_id":"source/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_javap.png","hash":"9742f9da516bfd9bb338064a222e54e487f2b101","modified":1437714860663},{"_id":"source/res/img/blog/2014/12/14/Java_Thread/Thread_lifecycle.png","hash":"35ed7f95fce0e8c968fec32ed64ac1dc5d80366d","modified":1438592145891},{"_id":"source/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_javah.png","hash":"cb3112457ce027d1519e6484ebbb5b4f55180d67","modified":1437713983903},{"_id":"source/res/img/blog/2014/12/16/Java_Thread_Pool/01.gif","hash":"2bae8941fe5d115070cef15731103f8962e9dd08","modified":1439372918618},{"_id":"source/res/file/blog/2014/11/01/Java_JNI/HelloJNI.apk","hash":"0450441f6940a065f07782ec2a56164492a5ea23","modified":1437983907496},{"_id":"source/res/file/blog/2014/11/01/Java_JNI/HelloJNI.rar","hash":"a61f1f72bd3962b683d8fb915f1e987feb6576a1","modified":1437984087335},{"_id":"source/res/file/blog/2015/09/10/PHP_codeigniter/CodeIgniter-3.0.0_Demo.rar","hash":"2085997a14c469c42e3cb9c1dc61d95c20784c3f","modified":1441879418056},{"_id":"source/res/img/blog/2014/11/01/Java_JNI/demo.gif","hash":"e4ec3864a538bdae1cad8dff7097b081e77ed2c0","modified":1437983125487},{"_id":"source/res/img/blog/2014/12/16/Java_Thread_Pool/02.gif","hash":"cd64b3807276e5649ef9770759c8158cc6becfd5","modified":1439373189671},{"_id":"source/res/file/blog/2015/01/01/Java_Android_Studio_IDE/MyApplication.rar","hash":"621149f189efb89e15a1d0232a9357040cd50a1d","modified":1439978233841},{"_id":"source/res/file/blog/2014/10/27/android_safe_mode_mechanism_three/Permission.rar","hash":"88a170ccbca0a55f8b8847c3b4620bd2126e818d","modified":1436775236470},{"_id":"source/res/file/blog/2014/10/29/Android_NDK_Hello_World_two/AndroidNDKHelloWorld.rar","hash":"20acf895c4872270294a8afd80291ad175232e3d","modified":1437121895376},{"_id":"source/res/file/blog/2015/10/10/PHP_Laravel/laravel-v5.0.22_Demo.rar","hash":"53c8b0609448477b8909e1ae35f3c4e9db548771","modified":1447056787055},{"_id":"source/res/file/blog/2015/09/10/PHP_codeigniter/mycishop.rar","hash":"3aeb53f1175f89afea2818cdd35b67ecde5baa18","modified":1443173500924},{"_id":"source/res/file/blog/2014/12/16/Java_Thread_Pool/MyThread.rar","hash":"a0ae3936cb29f05fe529fd170d5c052a941a774c","modified":1439373643877},{"_id":"source/res/file/blog/2015/10/10/PHP_Laravel/myLaravelShop_Demo.rar","hash":"d03ab5b59c3c9898d3800673fbdd9749ece6b48a","modified":1447056840210},{"_id":"source/res/file/blog/2014/12/01/Java_security/Security.rar","hash":"c41bcf85b572009cfc761177999e00b9fe9a7753","modified":1438337074299},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-bb3d6db899c058e0269babbce12a88890c777be6.pack","hash":"bb77bbf71496a762e46972b6e859cdb93ca5f1f0","modified":1461661092553},{"_id":"public/res/game/plane/Sprite.js","hash":"9acf96cd13b6dbc19781cc851e03090f31df643a","modified":1462440670384},{"_id":"public/res/game/plane/Bullet.js","hash":"6d27ac406f4b25fd5babced110b83ccea402feaa","modified":1462440670384},{"_id":"public/res/game/plane/Enemy.js","hash":"26e693f1dd3cfefb21ff5a68b2f9d3bb075b1325","modified":1462440670384},{"_id":"public/res/game/plane/countFps.js","hash":"ea97c0ab7db9ec4e723cdf73c8f362fa1b56365b","modified":1462440670384},{"_id":"public/res/game/plane/bgSprite.js","hash":"efff6a35ed932b7595b856e055d9939b4c02575c","modified":1462440670384},{"_id":"public/res/game/plane/plane.js","hash":"b318741407e3606d293f3a770e4e1917ec3b5f55","modified":1462440670385},{"_id":"public/res/game/plane/requestNextAnimationFrame.js","hash":"0d78eadb861658173d1379a98acbb71c9882a7c8","modified":1462440670385},{"_id":"public/res/game/plane/windowTocanvas.js","hash":"2207060ba3d4f6377a052902c241153a264a3e7e","modified":1462440670385},{"_id":"public/about/index.html","hash":"940209b4d2b43ced66303011abb948c0296979b5","modified":1462440670405},{"_id":"public/categories/index.html","hash":"a3f9f7dc27b777db0dbd257ec4b5d8c4d3749cf0","modified":1462440670405},{"_id":"public/res/game/plane/plane.html","hash":"01a31d934a21e82c33261799fb59eba95f54447b","modified":1462440670406},{"_id":"public/2014/10/22/plane_game_demo.html","hash":"7f8335a7c9fb9fea42f037b877a829a1edb99c3f","modified":1462440670406},{"_id":"public/archives/2014/page/2/index.html","hash":"2fb4d310f8c49437be59ac659e2ef0a0551ea5ff","modified":1462440670406},{"_id":"public/archives/2014/10/page/2/index.html","hash":"4364c5c2653c422e8f5b226b926297a18047bb3a","modified":1462440670406},{"_id":"public/archives/2014/11/index.html","hash":"cc2e928a50f7c818038d02dfaa7f7724a6144f14","modified":1462440670406},{"_id":"public/archives/2014/12/index.html","hash":"937fc7aa745eb7171cbd5248d48167c19d291846","modified":1462440670406},{"_id":"public/archives/2015/index.html","hash":"60d71519458e45f0ab51e6173df05d88dc39edb8","modified":1462440670406},{"_id":"public/archives/2015/01/index.html","hash":"7d792feea5cbac4c4c7c4921df58b59ac98a9398","modified":1462440670406},{"_id":"public/archives/2015/09/index.html","hash":"92656c4099404013a9eeb7505de22dbcf6ae3156","modified":1462440670406},{"_id":"public/archives/2015/10/index.html","hash":"cf56a8308dc3a4fffd19840299e2a8ba24bb8901","modified":1462440670406},{"_id":"public/categories/Jekyll/index.html","hash":"2660caf2088a0b7cea38a20d75ea47d3d9fad64c","modified":1462440670406},{"_id":"public/categories/Git/index.html","hash":"e7971a25e2a2f469c4969f793e48ec528b412605","modified":1462440670406},{"_id":"public/categories/设计模式/index.html","hash":"7529523c8bab41398a88afdb418f79a5121fb591","modified":1462440670406},{"_id":"public/categories/Android/index.html","hash":"8a2f4e2136e0928e4d2ec0f4e8806a8d62aaa349","modified":1462440670406},{"_id":"public/categories/Java/index.html","hash":"48a9e10a58c060b5ee6af49480d7480e23c5a133","modified":1462440670406},{"_id":"public/categories/HTML/index.html","hash":"31a87df2b61539e242e0ba636d96fc8e08d34b38","modified":1462440670406},{"_id":"public/categories/PHP/index.html","hash":"d4aa06fafac26815e6fb7767b9486eda9a9ca2ec","modified":1462440670406},{"_id":"public/tags/Jekyll/index.html","hash":"c5038a4da5ae67ac8b0e9321ce22272185fa4cce","modified":1462440670406},{"_id":"public/tags/Demo/index.html","hash":"4e5dd2411e143de1574aa048d12d97eaf5e8d1d2","modified":1462440670406},{"_id":"public/tags/Test/index.html","hash":"acccf5bf9729a818726995683e634dbb0bf859f8","modified":1462440670407},{"_id":"public/tags/SyntaxHihglighter/index.html","hash":"99607ed1895f2fb9fbb28349fee334d25c7288b9","modified":1462440670407},{"_id":"public/tags/pygments/index.html","hash":"27634a43b93cd9f05d67cd8e02eef6e61ec7abb8","modified":1462440670407},{"_id":"public/tags/Markdown/index.html","hash":"a555aae66aa265aafaecd7a6753e51b6cc9ee132","modified":1462440670407},{"_id":"public/tags/Pygments/index.html","hash":"de80246d840a39e55e1beb4145378caf49e1b1b5","modified":1462440670407},{"_id":"public/tags/语法高亮/index.html","hash":"fd1d3fc379bd7d006072329619fa03a79490ff25","modified":1462440670407},{"_id":"public/tags/GitHub/index.html","hash":"59925af1376b1552725f18b6ff4aee9d716ae84f","modified":1462440670407},{"_id":"public/tags/设计模式/index.html","hash":"0d6702919ef3097c6d365cd0bdd7573d169ae6b9","modified":1462440670407},{"_id":"public/tags/单例设计模式/index.html","hash":"efc55945bbba9697124431f64f8060d4e9bd2b31","modified":1462440670407},{"_id":"public/tags/Singleton/index.html","hash":"812b8fbf101d9785002877510dec86dae8407018","modified":1462440670407},{"_id":"public/tags/饿汉式/index.html","hash":"a63dec6d7f8298ae70c2d13721f71a50d76472d8","modified":1462440670407},{"_id":"public/tags/懒汉式/index.html","hash":"a293fcdfbaa6c578d3f374acfe607460686a2c1d","modified":1462440670407},{"_id":"public/tags/Double-checked-locking/index.html","hash":"0340ffe3b6b1e4d579b88f1d6c405f90b4cdd8c3","modified":1462440670407},{"_id":"public/tags/双重检查锁定/index.html","hash":"217a454c4b1327fa0c35500a51a93d86143469d3","modified":1462440670407},{"_id":"public/tags/Git/index.html","hash":"627a077d2e34c98328b1fc96dce1ac75de2ce5d6","modified":1462440670407},{"_id":"public/tags/版本控制/index.html","hash":"e5030cd2252f5ec1698c578e88aff2c193b4d040","modified":1462440670407},{"_id":"public/tags/模板模式/index.html","hash":"90f13231fe5c7e79f08bfd2d2c6ee87d605f152e","modified":1462440670407},{"_id":"public/tags/模板方法模式/index.html","hash":"ad50d810bf8f4aaf315a08ca519df9a8b8957511","modified":1462440670407},{"_id":"public/tags/Template/index.html","hash":"26a7878c100f0be3f6219a1a2d467eda56870c7e","modified":1462440670408},{"_id":"public/tags/Android/index.html","hash":"9972fa2a7779c5261e60fe8c6ed82fbb9d0130fa","modified":1462440670408},{"_id":"public/tags/java/index.html","hash":"f978dc7130b14c2cca1fb2ec710d10b0688d477b","modified":1462440670408},{"_id":"public/tags/lambda/index.html","hash":"b2f7396cece00644e083a337cf53e8bd96a2a404","modified":1462440670408},{"_id":"public/tags/stream/index.html","hash":"48b472804bbb3fbeab0297c97e51f5220431075c","modified":1462440670408},{"_id":"public/tags/java8/index.html","hash":"f8fb34d8d3a50f5a5899b38a4791460437041361","modified":1462440670408},{"_id":"public/tags/接口的默认方法和静态方法/index.html","hash":"fa9862d77378dce62405e8e7d3bfcdce98f6e1d8","modified":1462440670408},{"_id":"public/tags/HTML5/index.html","hash":"2355c651705aa1976901032f40a16c9c68463094","modified":1462440670408},{"_id":"public/tags/HTML/index.html","hash":"7613df1c1feb8bfaeac178034daffd30469a6d28","modified":1462440670408},{"_id":"public/tags/windows环境下搭建Android开发环境/index.html","hash":"cd21be4f2489331ca75ecc07b1eae6a3c1a6bd47","modified":1462440670408},{"_id":"public/tags/Android程序自动化打包/index.html","hash":"aef59f06d09be4a28d3f0bfd53314ce4b5c49293","modified":1462440670408},{"_id":"public/tags/Android安全模式机制/index.html","hash":"af2cfc6e4f1487a2c4a26a31daef5d636b07f19c","modified":1462440670408},{"_id":"public/tags/进程和进程边界/index.html","hash":"4c9d6405b1194df8ebad5f32bcb844abb1f3c4c2","modified":1462440670408},{"_id":"public/tags/多用户和多用户边界/index.html","hash":"d8cb206c197e113fb118850084666dce93e5bdea","modified":1462440670408},{"_id":"public/tags/进程和文件的UID-GID/index.html","hash":"27e4ca998c2d2d5855bcffab2efaa381b96d9e62","modified":1462440670408},{"_id":"public/tags/Chmod和chown命令介绍/index.html","hash":"5fcde75cf5e3ede8c6e1375813f3ce383495c200","modified":1462440670408},{"_id":"public/tags/linux/index.html","hash":"f7548aaf12a26343cd63ad56f4c0e01ad216fe8f","modified":1462440670408},{"_id":"public/tags/UID-GID的衔接/index.html","hash":"2386c742d33d3649ef8f424c51510b9e267c38e5","modified":1462440670408},{"_id":"public/tags/进程的RealUID和EffectiveUID/index.html","hash":"297917d2d88fd9cfc93abe69931259055e5f4116","modified":1462440670409},{"_id":"public/tags/setUID/index.html","hash":"5f182a79cc19584921f49b0434633e457e2c10dd","modified":1462440670409},{"_id":"public/tags/Capability/index.html","hash":"49456f542fd7e8a9a4235a51ca51f314c09d5410","modified":1462440670409},{"_id":"public/tags/对称加密/index.html","hash":"44f1b9424ed6b47d59e2c0a7b71769ab5d2928a7","modified":1462440670409},{"_id":"public/tags/非对称加密/index.html","hash":"de49fb800e3240083cdda418e977737ed673d017","modified":1462440670409},{"_id":"public/tags/密钥交换/index.html","hash":"5039013bca44300cd9d4a4ba31933e53e9d5a775","modified":1462440670409},{"_id":"public/tags/消息摘要/index.html","hash":"f2114cb3167693221ce603d81d7b97d2b67d30f0","modified":1462440670409},{"_id":"public/tags/电子签名/index.html","hash":"dc8bf659c6cb669399dc1853d5da1c827577ceec","modified":1462440670409},{"_id":"public/tags/证书与PKI/index.html","hash":"476c5a9fbe123e91d81d8a866f217b18d19c3307","modified":1462440670409},{"_id":"public/tags/AndroidNDK/index.html","hash":"b709716bb9719f82a81699a4320ed9146b6baa11","modified":1462440670409},{"_id":"public/tags/NDK/index.html","hash":"95d6a2a42fd6eef7263920575984dd00417de6f3","modified":1462440670409},{"_id":"public/tags/JNI/index.html","hash":"5b4d3e1115042007ddb53b4b995bf2b441418f2b","modified":1462440670409},{"_id":"public/tags/Java/index.html","hash":"e323d8b569a8eb9e7bec7e27495f9c3075e1e100","modified":1462440670409},{"_id":"public/tags/Base64/index.html","hash":"fb552c4f3202b5101c59ff62f0c8bf8c413d4d7c","modified":1462440670409},{"_id":"public/tags/AES/index.html","hash":"e2606192962433c7f511abb2b2c2c1932dc11192","modified":1462440670409},{"_id":"public/tags/CRC/index.html","hash":"bb3b9c869eed3ad6536f4310389651c83ad44c9e","modified":1462440670409},{"_id":"public/tags/DES/index.html","hash":"dc158778e51b26ea8a0dc654999000500ad7ba51","modified":1462440670409},{"_id":"public/tags/DH/index.html","hash":"8117e648c09c2af8eb41f5bbdf364727219c4947","modified":1462440670409},{"_id":"public/tags/ECDSA/index.html","hash":"6c3ca566750c4f5aba923de7d421a0568d6b5c86","modified":1462440670410},{"_id":"public/tags/DSA/index.html","hash":"3774faed29e94471e07c03cd016f68e834c1841c","modified":1462440670410},{"_id":"public/tags/ElGamal/index.html","hash":"8764078931aab45e028b1726dd1b2c89f0e01ee6","modified":1462440670410},{"_id":"public/tags/HMAC/index.html","hash":"a5357f49d087be9d9a2a3ed7dbf672f171373ca8","modified":1462440670410},{"_id":"public/tags/IDEA/index.html","hash":"0b60023a83a1d1f1d4f166429a7f700ee9642112","modified":1462440670410},{"_id":"public/tags/MD/index.html","hash":"8b88a078df91d719d30e35c9e3cc8ad4602225bb","modified":1462440670410},{"_id":"public/tags/PBE/index.html","hash":"337e38b19812e8f1ea95e305ce6db45100c95ac3","modified":1462440670410},{"_id":"public/tags/RSA/index.html","hash":"5252ad8dde3fecbe2af9dbd99fe13f71041a6242","modified":1462440670410},{"_id":"public/tags/SHA/index.html","hash":"58bdeb578eda11022b5ba4ca220646b6ed30a880","modified":1462440670410},{"_id":"public/tags/加密/index.html","hash":"79093170482c3cf87e59cee2998412196bec0d0e","modified":1462440670410},{"_id":"public/tags/解密/index.html","hash":"98c4e1776823b7ea6e935f9c28d811b45dce77b7","modified":1462440670410},{"_id":"public/tags/Thread/index.html","hash":"3c041a9b963d013603da6bc4a37b611e7b276827","modified":1462440670410},{"_id":"public/tags/Runnable/index.html","hash":"5f9e20faccd546545deab6e752f9628b592ce9d1","modified":1462440670410},{"_id":"public/tags/多线程/index.html","hash":"5488b99b536766a0c2f19b8ceeb81114ddeba592","modified":1462440670410},{"_id":"public/tags/死锁/index.html","hash":"e588660b483ccbe450e814588004a3d00ae0320a","modified":1462440670410},{"_id":"public/tags/synchronized/index.html","hash":"eeb77a36f1035aa77a00b89f08e47f8738db2812","modified":1462440670410},{"_id":"public/tags/ThreadPoolExecutor/index.html","hash":"d814fc1074bcd6a9f1ac106232237be1f4915069","modified":1462440670410},{"_id":"public/tags/ScheduledThreadPoolExecutor/index.html","hash":"3e25d836fc9c226ae9d08a8d704bbd2124b50b1b","modified":1462440670410},{"_id":"public/tags/newCachedThreadPool/index.html","hash":"ef57c2f99398b05a57e1e66d050f0d422d5c815e","modified":1462440670410},{"_id":"public/tags/newSingleThreadExecutor/index.html","hash":"ec7d36901855958f53c3f709714f26cfabcbf757","modified":1462440670411},{"_id":"public/tags/newFixedThreadPool/index.html","hash":"1bad322955980f24362836bd29862b299bd0bdef","modified":1462440670411},{"_id":"public/tags/ExecutorService/index.html","hash":"17ff29fe2631b38cee46361d13ca55071c599580","modified":1462440670411},{"_id":"public/tags/volatile/index.html","hash":"509cf1dd34ea58fba9f308343388ff606e97ce86","modified":1462440670411},{"_id":"public/tags/ReentrantLock/index.html","hash":"8a07bef6a290990d809d445abfb020752b7e4d9d","modified":1462440670411},{"_id":"public/tags/原子性/index.html","hash":"4463ddda122eaab6c351e383e9bb4237f2a4b028","modified":1462440670411},{"_id":"public/tags/可见性/index.html","hash":"7be3cd7a06adc0ed978fc5c74a2a8f79e3122f74","modified":1462440670411},{"_id":"public/tags/重排序/index.html","hash":"d70ac6ccc9d55020c0f417511bd42dbfccfb6fb3","modified":1462440670411},{"_id":"public/tags/Android-studio/index.html","hash":"93dbc399955e1eba3da68e8902ce76fc9c51b6c3","modified":1462440670411},{"_id":"public/tags/IDE/index.html","hash":"71f5e551f15e42163a9833dfec1ba85ea10b5b85","modified":1462440670411},{"_id":"public/tags/PHP/index.html","hash":"96bfccc433090cf2d1629eef58068100bb6fa887","modified":1462440670411},{"_id":"public/tags/CI/index.html","hash":"9b085acf3b250219a5d5741a999132eb2dd64fa6","modified":1462440670411},{"_id":"public/tags/CodeIgniter/index.html","hash":"17efcd76add4d8861f7aa58a30d207cf234999fe","modified":1462440670411},{"_id":"public/tags/Laravel/index.html","hash":"18667e0c31a61dd78920f0f37113dda05931f66e","modified":1462440670411},{"_id":"public/tags/artisan/index.html","hash":"1bb93cbbea99dd056cfd204f743709c3646d444c","modified":1462440670411},{"_id":"public/tags/Integration-Image/index.html","hash":"b066e6b7425602132ca11a56e246d6ebb2c0a7b6","modified":1462440670411},{"_id":"public/tags/index.html","hash":"3fc5d85f27e9290004e7ecb108d4275d324ea9e3","modified":1462440670412},{"_id":"public/2015/10/10/PHP_Laravel.html","hash":"7748adc7e78ab1cbc4659928e6046c4970d274cd","modified":1462440670412},{"_id":"public/2015/09/10/PHP_codeigniter.html","hash":"5c0754869963f270debc0ee425d5c3b567d85716","modified":1462440670412},{"_id":"public/2015/01/01/Java_Android_Studio_IDE.html","hash":"222cb9acebec2dca22db911d7e3f6f6a44d2a40f","modified":1462440670412},{"_id":"public/2014/12/16/Java_Throad_Pool.html","hash":"2508f987efd04275ff9adf9a3720ab1969cd8f39","modified":1462440670412},{"_id":"public/2014/12/15/Java_Throad_Visibility.html","hash":"8e92ca0764a8d54198a63fa894990e6a467f368e","modified":1462440670412},{"_id":"public/2014/12/14/Java_Thread.html","hash":"2c993bb4ab9d8dc221aebe0a291389cb6e3419c3","modified":1462440670412},{"_id":"public/2014/12/01/Java_security.html","hash":"9d4af5cf6c4227fa244deadcf8a950befda6d6eb","modified":1462440670412},{"_id":"public/2014/11/01/Java_JNI.html","hash":"4b54c413eee6745d516b1e7bfb0d02c02e1c3007","modified":1462440670412},{"_id":"public/2014/10/29/Android_NDK_Hello_World_two.html","hash":"cc0910d7fe43446d6870f7d1c6e3862f298b86f2","modified":1462440670412},{"_id":"public/2014/10/28/Android_NDK_IDE_environment_one.html","hash":"621c7da6367cb28d8c62d78935829611ba141095","modified":1462440670413},{"_id":"public/2014/10/27/android_safe_mode_mechanism_three.html","hash":"d41be6c3225bd646b81cf81f8d84136856327d70","modified":1462440670413},{"_id":"public/2014/10/26/android_safe_mode_mechanism_two.html","hash":"9c1b80a852d9bfb9295ee9764cebcd2c28c42566","modified":1462440670413},{"_id":"public/2014/10/25/android_safe_mode_mechanism_one.html","hash":"4998f527e870fdaa3445790679d870128b96fdbd","modified":1462440670413},{"_id":"public/2014/10/24/android_automatic_packaging.html","hash":"32b977bfc8499146a88be6640374d82c014ee82f","modified":1462440670413},{"_id":"public/2014/10/23/java8_new_feature.html","hash":"09d733a335982df72e8ad2dd598cb4f763e13fca","modified":1462440670415},{"_id":"public/2014/10/21/android_Interactive-animation.html","hash":"719f9a3fa3dd2fc6b3c397aa059befee21ed7930","modified":1462440670415},{"_id":"public/2014/10/21/android_excellent_project_library.html","hash":"10e2dba3eec41f8e3c5d2d708f27bc262f18f9af","modified":1462440670416},{"_id":"public/2014/10/21/android_open_project.html","hash":"7420888c692648027425aa133318aceb85967b18","modified":1462440670416},{"_id":"public/2014/10/20/Design_pattern_Template.html","hash":"4d21ee6f1e764d29905f41efaa89f2421cb28acd","modified":1462440670416},{"_id":"public/2014/10/20/Design_pattern_Singleton.html","hash":"380a2d3f1532ae0ae8b9ccdb8a6cd4e62289d986","modified":1462440670416},{"_id":"public/2014/10/19/git_common_command.html","hash":"f7426e28715de278bf0fda1e99b5190f3d5615f2","modified":1462440670416},{"_id":"public/2014/10/19/Jekyll_Variables.html","hash":"160aba73387126accc64b3f2ad8acd6fac72eba0","modified":1462440670416},{"_id":"public/2014/10/18/windows_configuration_Jekyll.html","hash":"35d4ba3fd50b0487a3ba1d46ac4d9ac6bb0b4321","modified":1462440670417},{"_id":"public/2014/10/18/support-pygments-in-Jekyll.html","hash":"8d29e02890557666e6e2848ac3688c90ef9a6edb","modified":1462440670417},{"_id":"public/2014/10/18/hello world.html","hash":"a2c6c43c2267b0b3bae8d7f8ab6457e8e618d3e6","modified":1462440670417},{"_id":"public/archives/index.html","hash":"284b11c4781bde81d9d890e0ca49dfa372b282f1","modified":1462440670417},{"_id":"public/archives/page/2/index.html","hash":"512418e30e76d6f07d10b45d76e74a9f9dc82a20","modified":1462440670417},{"_id":"public/archives/2014/index.html","hash":"450ff5c6ebe1279f8a6147c1a06aab9b84e5f28c","modified":1462440670417},{"_id":"public/archives/2014/10/index.html","hash":"75ddcb73f90a9ef94b65a0854bd306d54fa1e2ac","modified":1462440670417},{"_id":"public/index.html","hash":"396857f8de7e6b21a0cd972d2bd053e68f1d5e28","modified":1462440670417},{"_id":"public/page/2/index.html","hash":"13337deae3b05a641e9b4ab21cab385b132c56f0","modified":1462440670418},{"_id":"public/res/img/favicon.ico","hash":"14bca3963467538a6f632a56c0adef0ef9ea1053","modified":1462440670483},{"_id":"public/res/img/icon.jpg","hash":"62b91900b62a7fba22223279c1710f9a6d42b8cc","modified":1462440670483},{"_id":"public/res/img/license.png","hash":"c90f8c9321f039662c011d306348d9fb8d942283","modified":1462440670483},{"_id":"public/res/img/top.png","hash":"9eda4757d2b7f51eae8e5ad08da84d01dc7b36cb","modified":1462440670483},{"_id":"public/icon/1.ico","hash":"14bca3963467538a6f632a56c0adef0ef9ea1053","modified":1462440670483},{"_id":"public/icon/2.ico","hash":"875f5c5302eddd5bbf962147ffb6dbf344a1e8eb","modified":1462440670483},{"_id":"public/icon/3.ico","hash":"ed128913fedff79b9afd4edce19e4ddb9b0ef15e","modified":1462440670483},{"_id":"public/icon/5.ico","hash":"e790ce46cc93d06713f22a32995fcddd67154b28","modified":1462440670483},{"_id":"public/icon/4.ico","hash":"bc901413e1fb8bcea731f6d125016efd69ce9853","modified":1462440670484},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1462440670484},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1462440670484},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1462440670484},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1462440670484},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1462440670484},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1462440670484},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1462440670484},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1462440670484},{"_id":"public/images/icon.jpg","hash":"62b91900b62a7fba22223279c1710f9a6d42b8cc","modified":1462440670484},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1462440670484},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1462440670484},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1462440670484},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1462440670484},{"_id":"public/res/img/404/404.png","hash":"cd61b6b0dcda2241c9b80b51cd3360800110f148","modified":1462440670484},{"_id":"public/res/img/404/404_cloud.png","hash":"8d58e68a106a9df40ae743ccfd0af7b555c4703b","modified":1462440670484},{"_id":"public/res/img/404/404_error.jpg","hash":"4559edc6bb6fb887f96e57903ad76570273e183b","modified":1462440670484},{"_id":"public/res/img/bg/01.jpg","hash":"a0fa2f25911e5fa49f46030c06c74e3fabe682ab","modified":1462440670484},{"_id":"public/res/img/bg/02.jpg","hash":"fe2418a730f0c31d906b1f40fff855459453fb70","modified":1462440670484},{"_id":"public/res/img/bg/03.jpg","hash":"6ce6038876ef7d7f56a24bf3bb613566fbf638ae","modified":1462440670485},{"_id":"public/res/img/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1462440670485},{"_id":"public/res/img/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1462440670485},{"_id":"public/res/img/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1462440670485},{"_id":"public/res/img/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1462440670485},{"_id":"public/res/img/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1462440670485},{"_id":"public/res/img/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1462440670485},{"_id":"public/res/img/icon/1.ico","hash":"14bca3963467538a6f632a56c0adef0ef9ea1053","modified":1462440670485},{"_id":"public/res/img/icon/2.ico","hash":"875f5c5302eddd5bbf962147ffb6dbf344a1e8eb","modified":1462440670485},{"_id":"public/res/img/icon/3.ico","hash":"ed128913fedff79b9afd4edce19e4ddb9b0ef15e","modified":1462440670485},{"_id":"public/res/img/icon/4.ico","hash":"bc901413e1fb8bcea731f6d125016efd69ce9853","modified":1462440670485},{"_id":"public/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.jpg","hash":"99eca14576ae8ade9ad9f66029748a4859d863ba","modified":1462440670485},{"_id":"public/res/img/icon/5.ico","hash":"e790ce46cc93d06713f22a32995fcddd67154b28","modified":1462440670485},{"_id":"public/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.webm","hash":"87d7f643e789eb883b063c3eaa5c736a03608dee","modified":1462440670485},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1462440670485},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1462440670485},{"_id":"public/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.mp4","hash":"a5ea5d8c60d5c522ca0f9c4ad338c3660bdc300a","modified":1462440670485},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1462440670486},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1462440670486},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1462440670486},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1462440670486},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1462440670486},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1462440670486},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1462440670486},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1462440670486},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1462440670486},{"_id":"public/res/file/blog/2014/10/23/java8_new_feature/Java8NewFeature.rar","hash":"45e6e841ae53eaa240c25da5bf022cc00d1c7952","modified":1462440670486},{"_id":"public/res/file/blog/2014/12/14/Java_Thread/MyThreadAndRunnable.rar","hash":"bfdf834bc294db85e1e0005cfbff558e00fc3f80","modified":1462440670486},{"_id":"public/res/file/blog/2014/12/15/Java_Throad_Visibility/ThreadTheVisibility.rar","hash":"9e40a74237b1733d36a66aa0082a89ffabcbf1f3","modified":1462440670486},{"_id":"public/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/001.png","hash":"cd18b8bcfb8020840c85993ff7ef969877934c68","modified":1462440670486},{"_id":"public/res/img/blog/2014/10/23/java8_new_feature/ECLIPSE-JAVA-COMPILER.png","hash":"18730c354d7933f21469c0d000955c7a456bc550","modified":1462440670486},{"_id":"public/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/003.png","hash":"e6b6a4a1bd4bcb1a2a88d444afa2f5e4148507f5","modified":1462440670486},{"_id":"public/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/002.png","hash":"8245db53f700d4a92e31fbd9ad9e90bec6c51ebd","modified":1462440670486},{"_id":"public/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/004.png","hash":"9b12ea640f68d0319a8f6c45b27627dc83a708f3","modified":1462440670487},{"_id":"public/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_run.png","hash":"f879a5d7a0b3fcfd66539b72e4b24c4fa16d370f","modified":1462440670487},{"_id":"public/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/005.png","hash":"eb697e9dd290567ad1c98078cfc89041b0594d33","modified":1462440670487},{"_id":"public/res/img/bg/04.jpg","hash":"dff104b9dc6cb9ec54a71714acc9095f2da7c177","modified":1462440671272},{"_id":"public/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.ogv","hash":"ae3e0b362918315b11c96e78362b2e0012170253","modified":1462440671275},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1462440671278},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1462440671278},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1462440671278},{"_id":"public/res/img/blog/2014/10/18/pygments-autumn.png","hash":"9f8d339557d8d354c6d6d0ccd65ebf6c0e95bc1f","modified":1462440671278},{"_id":"public/res/img/blog/2014/10/18/pygments-bw.png","hash":"bcc2a9d840322043b42fce8f0b24ecca06dbe740","modified":1462440671278},{"_id":"public/res/img/blog/2014/10/18/pygments-colorful.png","hash":"8d5071636ee91de5d999c2242f4314541912e4e7","modified":1462440671278},{"_id":"public/res/img/blog/2014/10/18/pygments-borland.png","hash":"b69688cb87b827777fa8d4b6c24600a181bf5f26","modified":1462440671278},{"_id":"public/res/img/blog/2014/10/18/pygments-emacs.png","hash":"b828bb9c434c88c36f1fc4d94cd7e8c857c0f56e","modified":1462440671278},{"_id":"public/res/img/blog/2014/10/18/pygments-monokai.png","hash":"9c186f3419fcc426cac8531cad804d0d0b8cc1a2","modified":1462440671278},{"_id":"public/res/img/blog/2014/10/18/pygments-murphy.png","hash":"9566f8f45d7460ecf653525712700cf61028ca19","modified":1462440671279},{"_id":"public/res/img/blog/2014/10/18/pygments-native.png","hash":"747b204418d4ef20659e4de784c97496e3b2e48a","modified":1462440671279},{"_id":"public/res/img/blog/2014/10/18/pygments-pastie.png","hash":"8bb237b62dc8afc69c3ab021217db3f086604102","modified":1462440671279},{"_id":"public/res/img/blog/2014/10/18/pygments-rrt.png","hash":"7bfe9ce42694a4608f3d013d2d9b23ac30a0e89d","modified":1462440671279},{"_id":"public/res/img/blog/2014/10/18/pygments-trac.png","hash":"0dd0537eeea3f7bba1338d825943d64db0d25327","modified":1462440671279},{"_id":"public/res/img/blog/2014/10/18/pygments-vim.png","hash":"0fdc0300d4eb24d4b062bbbb0b38cecc838c295b","modified":1462440671279},{"_id":"public/res/img/blog/2014/10/18/pygments-vs.png","hash":"cf48731432738de6512b72eb5f809280ec7242f4","modified":1462440671279},{"_id":"public/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/Properties_C-C++.png","hash":"4f5d8d527a157294b2f74fdc7041a81f35927af3","modified":1462440671279},{"_id":"public/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_javap.png","hash":"9742f9da516bfd9bb338064a222e54e487f2b101","modified":1462440671279},{"_id":"public/res/img/blog/2014/12/14/Java_Thread/Thread_lifecycle.png","hash":"35ed7f95fce0e8c968fec32ed64ac1dc5d80366d","modified":1462440671279},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1462440671300},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1462440671300},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1462440671300},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1462440671300},{"_id":"public/js/src/utils.js","hash":"a3a3375de818964f4cbed4d0e2c2f97ccee7199e","modified":1462440671300},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1462440671301},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1462440671301},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1462440671301},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1462440671301},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1462440671301},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1462440671301},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1462440671301},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1462440671301},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1462440671301},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1462440671301},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1462440671301},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1462440671301},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1462440671301},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1462440671301},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1462440671301},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1462440671301},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1462440671302},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1462440671302},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1462440671302},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1462440671302},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1462440671302},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1462440671302},{"_id":"public/css/main.css","hash":"22394a912fe7d7658bb609f04aee43a2e031524a","modified":1462440671302},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1462440671302},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1462440671302},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1462440671302},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1462440671302},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1462440671302},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1462440671302},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1462440671302},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1462440671302},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1462440671302},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1462440671302},{"_id":"public/res/img/blog/2014/10/18/pygments-friendly.png","hash":"e2eb6c50d42b4eccc5d75a01094a8630290096f1","modified":1462440671303},{"_id":"public/res/img/blog/2014/10/18/pygments-default.png","hash":"255f88d02ea84fd24e48eb474b89d24f644e5830","modified":1462440671303},{"_id":"public/res/img/blog/2014/10/18/pygments-fruity.png","hash":"c9b25328d9554627a6d081b56eb2e7d423c217df","modified":1462440671303},{"_id":"public/res/img/blog/2014/10/18/pygments-manni.png","hash":"e7b9a854d71dca784eb8830ca5f11605d25b6ba2","modified":1462440671303},{"_id":"public/res/img/blog/2014/10/18/pygments-tango.png","hash":"c31456f0bb2aace1dc173cf8884058f7ff9e288f","modified":1462440671303},{"_id":"public/res/img/blog/2014/10/18/pygments-perldoc.png","hash":"b12044099bf3803277b9596f0fdaa068a4b80c5c","modified":1462440671303},{"_id":"public/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_javah.png","hash":"cb3112457ce027d1519e6484ebbb5b4f55180d67","modified":1462440671303},{"_id":"public/res/img/blog/2014/12/16/Java_Thread_Pool/01.gif","hash":"2bae8941fe5d115070cef15731103f8962e9dd08","modified":1462440671323},{"_id":"public/res/game/plane/gameArts.png","hash":"89e75e925c4a1f036b90397fa3eb3aeb3da6c120","modified":1462440671340},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1462440671340},{"_id":"public/res/file/blog/2014/11/01/Java_JNI/HelloJNI.apk","hash":"0450441f6940a065f07782ec2a56164492a5ea23","modified":1462440671364},{"_id":"public/res/file/blog/2014/11/01/Java_JNI/HelloJNI.rar","hash":"a61f1f72bd3962b683d8fb915f1e987feb6576a1","modified":1462440671433},{"_id":"public/res/file/blog/2015/09/10/PHP_codeigniter/CodeIgniter-3.0.0_Demo.rar","hash":"2085997a14c469c42e3cb9c1dc61d95c20784c3f","modified":1462440671447},{"_id":"public/res/img/blog/2014/12/16/Java_Thread_Pool/02.gif","hash":"cd64b3807276e5649ef9770759c8158cc6becfd5","modified":1462440671479},{"_id":"public/res/img/blog/2014/11/01/Java_JNI/demo.gif","hash":"e4ec3864a538bdae1cad8dff7097b081e77ed2c0","modified":1462440671479},{"_id":"public/res/file/blog/2015/01/01/Java_Android_Studio_IDE/MyApplication.rar","hash":"621149f189efb89e15a1d0232a9357040cd50a1d","modified":1462440671507},{"_id":"public/res/file/blog/2014/10/27/android_safe_mode_mechanism_three/Permission.rar","hash":"88a170ccbca0a55f8b8847c3b4620bd2126e818d","modified":1462440671513},{"_id":"public/res/file/blog/2014/10/29/Android_NDK_Hello_World_two/AndroidNDKHelloWorld.rar","hash":"20acf895c4872270294a8afd80291ad175232e3d","modified":1462440671521},{"_id":"public/res/file/blog/2015/10/10/PHP_Laravel/laravel-v5.0.22_Demo.rar","hash":"53c8b0609448477b8909e1ae35f3c4e9db548771","modified":1462440671572},{"_id":"public/res/file/blog/2015/09/10/PHP_codeigniter/mycishop.rar","hash":"3aeb53f1175f89afea2818cdd35b67ecde5baa18","modified":1462440671591},{"_id":"public/res/file/blog/2014/12/16/Java_Thread_Pool/MyThread.rar","hash":"a0ae3936cb29f05fe529fd170d5c052a941a774c","modified":1462440671595},{"_id":"public/res/file/blog/2015/10/10/PHP_Laravel/myLaravelShop_Demo.rar","hash":"d03ab5b59c3c9898d3800673fbdd9749ece6b48a","modified":1462440671607},{"_id":"public/res/file/blog/2014/12/01/Java_security/Security.rar","hash":"c41bcf85b572009cfc761177999e00b9fe9a7753","modified":1462440671619}],"Category":[{"name":"Jekyll","_id":"cinu3etwr0005xoj0lmgavs7j"},{"name":"设计模式","_id":"cinu3etxi000mxoj0ky88pz8r"},{"name":"Git","_id":"cinu3etxn000rxoj0248vqe5q"},{"name":"Android","_id":"cinu3ety30011xoj0nm1bth4h"},{"name":"Java","_id":"cinu3etyf001fxoj0mhesr752"},{"name":"HTML","_id":"cinu3etyp001pxoj00nbymt68"},{"name":"PHP","_id":"cinu3etzd002oxoj0ggjxs4pd"}],"Data":[],"Page":[{"title":"about","date":"2016-04-27T02:17:44.000Z","_content":"\n\n<style>\np {\n    color: #6D6D6D;\n    font-size: 18px;\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nhr {\n\tmargin-top: 0;\n\tmargin-bottom: 25px;\n}\nblockquote p {\n    line-height: 1.8;\n    letter-spacing: 0px;\n}\n</style>\n\n\n# 关于作者\n\n<hr id=\"line\"/>\n\n\n\n> 网名: comtu   \n> Email: <a href=\"mailto:comtu@vip.qq.com\">comtu@vip.qq.com</a>\n> 微&nbsp;&nbsp;博: <a href=\"http://weibo.com/comtu\">@Comtu</a>  \n> 博&nbsp;&nbsp;客: <a href=\"http://comtu.github.io/\">comtu</a>  \n> GitHub：[comtu](https://github.com/comtu)  \n> CSDN: [comtu](http://my.csdn.net/comtu)  \n> ....\n\n---\n\n> **关于困难**: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;15岁觉得游泳难,放弃游泳,到18岁遇到一个你喜欢的人约你去游泳,你只好说\"我不会耶\".18岁觉得英文难,放弃英文,28岁出现一个很棒但要会英文的工作,你只好说\"我不会耶\".打磨自己的过程是疼,但最终能塑造一个更好的自己.有些事情,当我们年轻的时候无法懂得,当我们懂得的时候已经不再年轻.\n\n> **关于努力**: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在我们的生活中最让人感动的日子总是那些一心一意为了一个目标而努力奋斗的日子.哪怕是为了一个卑微的目标而奋斗也是值得我们骄傲的,因为无数卑微的目标累积起来可能就是一个伟大的成就.金字塔也是由每一块石头累积而成的.每一块石头都是简单的,而金字塔却是宏伟而永恒的.\n\n> **关于修养**: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看别人不顺眼,是自己修养不够.人愤怒的那一瞬间,智商是零,过一分钟后恢复正常.人的优雅关键在于控制自己的情绪,用嘴上害人,是最愚蠢的一种行为.\n\n> **关于现实**: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不要抱怨你的伴侣丑,不要抱怨你没有一个好爸爸,不要抱怨你的工作差,不要抱怨没人赏识你.现实有太多的不如意,就算生活给你的是垃圾,你同样能把垃圾踩在脚底下登上世界之巅.这个世界只在乎你是否在到达了一定的高度,而不在乎你是踩在巨人肩膀上上去的,还是踩在垃圾上上去的.\n\n> **关于梦想**: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;世界上唯一可以不劳而获的就是贫穷,唯一可以无中生有的是梦想.没有哪件事,不动手就可以实现.世界虽然残酷,但只要你愿意走,总会有路;看不到美好,是因为你没有坚持走下去.人生贵在行动,迟疑不决时,不妨选迈出小小一步.前进不必遗憾,若是美好,叫做精彩;若是糟糕,叫做经历.\n\n> **关于幸福**: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;常有人说,我现在不幸福,等我结婚或买了房子....就会幸福了.事实的真相是,幸福的人在哪儿都幸福.所以要培养自己的幸福力,不论发生什么,别人都动不了你我的自在开心.这,才是真正强大的气场及自信.\n\n> **关于压力**: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;鸡蛋,从外打破是食物,从内打破是生命.人生亦是,从外打破是压力,从内打破是成长.如果你等待别人打破你,那么你注定成为别人的食物;如果能让自己从内打破,那么你会发现自己的成长相当于一种重生.\n\n> **关于目标**: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每做一事,最好只追求一个最在乎的目标,其余都可让步,这样达成目标的机会才高.比方:做这事,最在乎是学经验,那就别计较钱;做那事,最要紧是钱,那就别计较面子.经此类推.若做一事,又想学经验,又要赚得多,又要面子....如此美事,有得等啊.\n\n> **关于失败**: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们失败的次数一定比成功的次数多,所以我们最好为失败找到一些乐趣,到目前为止,我觉得失败最大的乐趣,无非是投入的乐趣吧,就像我们每次玩游戏,虽然老是过不了关,但很投入,就还是挺有乐趣的.\n\n---\n\n> [一个人的改变，源自于自我的一种积极进取，而不是等待什么天赐良机。](/)\n\n---\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-04-27 10:17:44\n---\n\n\n<style>\np {\n    color: #6D6D6D;\n    font-size: 18px;\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nhr {\n\tmargin-top: 0;\n\tmargin-bottom: 25px;\n}\nblockquote p {\n    line-height: 1.8;\n    letter-spacing: 0px;\n}\n</style>\n\n\n# 关于作者\n\n<hr id=\"line\"/>\n\n\n\n> 网名: comtu   \n> Email: <a href=\"mailto:comtu@vip.qq.com\">comtu@vip.qq.com</a>\n> 微&nbsp;&nbsp;博: <a href=\"http://weibo.com/comtu\">@Comtu</a>  \n> 博&nbsp;&nbsp;客: <a href=\"http://comtu.github.io/\">comtu</a>  \n> GitHub：[comtu](https://github.com/comtu)  \n> CSDN: [comtu](http://my.csdn.net/comtu)  \n> ....\n\n---\n\n> **关于困难**: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;15岁觉得游泳难,放弃游泳,到18岁遇到一个你喜欢的人约你去游泳,你只好说\"我不会耶\".18岁觉得英文难,放弃英文,28岁出现一个很棒但要会英文的工作,你只好说\"我不会耶\".打磨自己的过程是疼,但最终能塑造一个更好的自己.有些事情,当我们年轻的时候无法懂得,当我们懂得的时候已经不再年轻.\n\n> **关于努力**: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在我们的生活中最让人感动的日子总是那些一心一意为了一个目标而努力奋斗的日子.哪怕是为了一个卑微的目标而奋斗也是值得我们骄傲的,因为无数卑微的目标累积起来可能就是一个伟大的成就.金字塔也是由每一块石头累积而成的.每一块石头都是简单的,而金字塔却是宏伟而永恒的.\n\n> **关于修养**: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看别人不顺眼,是自己修养不够.人愤怒的那一瞬间,智商是零,过一分钟后恢复正常.人的优雅关键在于控制自己的情绪,用嘴上害人,是最愚蠢的一种行为.\n\n> **关于现实**: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不要抱怨你的伴侣丑,不要抱怨你没有一个好爸爸,不要抱怨你的工作差,不要抱怨没人赏识你.现实有太多的不如意,就算生活给你的是垃圾,你同样能把垃圾踩在脚底下登上世界之巅.这个世界只在乎你是否在到达了一定的高度,而不在乎你是踩在巨人肩膀上上去的,还是踩在垃圾上上去的.\n\n> **关于梦想**: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;世界上唯一可以不劳而获的就是贫穷,唯一可以无中生有的是梦想.没有哪件事,不动手就可以实现.世界虽然残酷,但只要你愿意走,总会有路;看不到美好,是因为你没有坚持走下去.人生贵在行动,迟疑不决时,不妨选迈出小小一步.前进不必遗憾,若是美好,叫做精彩;若是糟糕,叫做经历.\n\n> **关于幸福**: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;常有人说,我现在不幸福,等我结婚或买了房子....就会幸福了.事实的真相是,幸福的人在哪儿都幸福.所以要培养自己的幸福力,不论发生什么,别人都动不了你我的自在开心.这,才是真正强大的气场及自信.\n\n> **关于压力**: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;鸡蛋,从外打破是食物,从内打破是生命.人生亦是,从外打破是压力,从内打破是成长.如果你等待别人打破你,那么你注定成为别人的食物;如果能让自己从内打破,那么你会发现自己的成长相当于一种重生.\n\n> **关于目标**: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每做一事,最好只追求一个最在乎的目标,其余都可让步,这样达成目标的机会才高.比方:做这事,最在乎是学经验,那就别计较钱;做那事,最要紧是钱,那就别计较面子.经此类推.若做一事,又想学经验,又要赚得多,又要面子....如此美事,有得等啊.\n\n> **关于失败**: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们失败的次数一定比成功的次数多,所以我们最好为失败找到一些乐趣,到目前为止,我觉得失败最大的乐趣,无非是投入的乐趣吧,就像我们每次玩游戏,虽然老是过不了关,但很投入,就还是挺有乐趣的.\n\n---\n\n> [一个人的改变，源自于自我的一种积极进取，而不是等待什么天赐良机。](/)\n\n---\n\n","updated":"2016-04-27T02:20:26.801Z","path":"about/index.html","comments":1,"layout":"page","_id":"cinu3etwh0001xoj0xj8i6ri3","content":"<style>\np {\n    color: #6D6D6D;\n    font-size: 18px;\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nhr {\n    margin-top: 0;\n    margin-bottom: 25px;\n}\nblockquote p {\n    line-height: 1.8;\n    letter-spacing: 0px;\n}\n</style>\n\n\n<h1 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h1><hr id=\"line\">\n\n\n\n<blockquote>\n<p>网名: comtu<br>Email: <a href=\"mailto:comtu@vip.qq.com\" target=\"_blank\" rel=\"external\">comtu@vip.qq.com</a><br>微&nbsp;&nbsp;博: <a href=\"http://weibo.com/comtu\" target=\"_blank\" rel=\"external\">@Comtu</a><br>博&nbsp;&nbsp;客: <a href=\"http://comtu.github.io/\" target=\"_blank\" rel=\"external\">comtu</a><br>GitHub：<a href=\"https://github.com/comtu\" target=\"_blank\" rel=\"external\">comtu</a><br>CSDN: <a href=\"http://my.csdn.net/comtu\" target=\"_blank\" rel=\"external\">comtu</a><br>….</p>\n</blockquote>\n<hr>\n<blockquote>\n<p><strong>关于困难</strong>: <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;15岁觉得游泳难,放弃游泳,到18岁遇到一个你喜欢的人约你去游泳,你只好说”我不会耶”.18岁觉得英文难,放弃英文,28岁出现一个很棒但要会英文的工作,你只好说”我不会耶”.打磨自己的过程是疼,但最终能塑造一个更好的自己.有些事情,当我们年轻的时候无法懂得,当我们懂得的时候已经不再年轻.</p>\n<p><strong>关于努力</strong>: <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在我们的生活中最让人感动的日子总是那些一心一意为了一个目标而努力奋斗的日子.哪怕是为了一个卑微的目标而奋斗也是值得我们骄傲的,因为无数卑微的目标累积起来可能就是一个伟大的成就.金字塔也是由每一块石头累积而成的.每一块石头都是简单的,而金字塔却是宏伟而永恒的.</p>\n<p><strong>关于修养</strong>: <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看别人不顺眼,是自己修养不够.人愤怒的那一瞬间,智商是零,过一分钟后恢复正常.人的优雅关键在于控制自己的情绪,用嘴上害人,是最愚蠢的一种行为.</p>\n<p><strong>关于现实</strong>: <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不要抱怨你的伴侣丑,不要抱怨你没有一个好爸爸,不要抱怨你的工作差,不要抱怨没人赏识你.现实有太多的不如意,就算生活给你的是垃圾,你同样能把垃圾踩在脚底下登上世界之巅.这个世界只在乎你是否在到达了一定的高度,而不在乎你是踩在巨人肩膀上上去的,还是踩在垃圾上上去的.</p>\n<p><strong>关于梦想</strong>: <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;世界上唯一可以不劳而获的就是贫穷,唯一可以无中生有的是梦想.没有哪件事,不动手就可以实现.世界虽然残酷,但只要你愿意走,总会有路;看不到美好,是因为你没有坚持走下去.人生贵在行动,迟疑不决时,不妨选迈出小小一步.前进不必遗憾,若是美好,叫做精彩;若是糟糕,叫做经历.</p>\n<p><strong>关于幸福</strong>: <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;常有人说,我现在不幸福,等我结婚或买了房子….就会幸福了.事实的真相是,幸福的人在哪儿都幸福.所以要培养自己的幸福力,不论发生什么,别人都动不了你我的自在开心.这,才是真正强大的气场及自信.</p>\n<p><strong>关于压力</strong>: <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;鸡蛋,从外打破是食物,从内打破是生命.人生亦是,从外打破是压力,从内打破是成长.如果你等待别人打破你,那么你注定成为别人的食物;如果能让自己从内打破,那么你会发现自己的成长相当于一种重生.</p>\n<p><strong>关于目标</strong>: <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每做一事,最好只追求一个最在乎的目标,其余都可让步,这样达成目标的机会才高.比方:做这事,最在乎是学经验,那就别计较钱;做那事,最要紧是钱,那就别计较面子.经此类推.若做一事,又想学经验,又要赚得多,又要面子….如此美事,有得等啊.</p>\n<p><strong>关于失败</strong>: <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们失败的次数一定比成功的次数多,所以我们最好为失败找到一些乐趣,到目前为止,我觉得失败最大的乐趣,无非是投入的乐趣吧,就像我们每次玩游戏,虽然老是过不了关,但很投入,就还是挺有乐趣的.</p>\n</blockquote>\n<hr>\n<blockquote>\n<p><a href=\"/\">一个人的改变，源自于自我的一种积极进取，而不是等待什么天赐良机。</a></p>\n</blockquote>\n<hr>\n","excerpt":"","more":"<style>\np {\n    color: #6D6D6D;\n    font-size: 18px;\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nhr {\n    margin-top: 0;\n    margin-bottom: 25px;\n}\nblockquote p {\n    line-height: 1.8;\n    letter-spacing: 0px;\n}\n</style>\n\n\n<h1 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h1><hr id=\"line\"/>\n\n\n\n<blockquote>\n<p>网名: comtu<br>Email: <a href=\"mailto:comtu@vip.qq.com\">comtu@vip.qq.com</a><br>微&nbsp;&nbsp;博: <a href=\"http://weibo.com/comtu\">@Comtu</a><br>博&nbsp;&nbsp;客: <a href=\"http://comtu.github.io/\">comtu</a><br>GitHub：<a href=\"https://github.com/comtu\">comtu</a><br>CSDN: <a href=\"http://my.csdn.net/comtu\">comtu</a><br>….</p>\n</blockquote>\n<hr>\n<blockquote>\n<p><strong>关于困难</strong>: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;15岁觉得游泳难,放弃游泳,到18岁遇到一个你喜欢的人约你去游泳,你只好说”我不会耶”.18岁觉得英文难,放弃英文,28岁出现一个很棒但要会英文的工作,你只好说”我不会耶”.打磨自己的过程是疼,但最终能塑造一个更好的自己.有些事情,当我们年轻的时候无法懂得,当我们懂得的时候已经不再年轻.</p>\n<p><strong>关于努力</strong>: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在我们的生活中最让人感动的日子总是那些一心一意为了一个目标而努力奋斗的日子.哪怕是为了一个卑微的目标而奋斗也是值得我们骄傲的,因为无数卑微的目标累积起来可能就是一个伟大的成就.金字塔也是由每一块石头累积而成的.每一块石头都是简单的,而金字塔却是宏伟而永恒的.</p>\n<p><strong>关于修养</strong>: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看别人不顺眼,是自己修养不够.人愤怒的那一瞬间,智商是零,过一分钟后恢复正常.人的优雅关键在于控制自己的情绪,用嘴上害人,是最愚蠢的一种行为.</p>\n<p><strong>关于现实</strong>: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不要抱怨你的伴侣丑,不要抱怨你没有一个好爸爸,不要抱怨你的工作差,不要抱怨没人赏识你.现实有太多的不如意,就算生活给你的是垃圾,你同样能把垃圾踩在脚底下登上世界之巅.这个世界只在乎你是否在到达了一定的高度,而不在乎你是踩在巨人肩膀上上去的,还是踩在垃圾上上去的.</p>\n<p><strong>关于梦想</strong>: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;世界上唯一可以不劳而获的就是贫穷,唯一可以无中生有的是梦想.没有哪件事,不动手就可以实现.世界虽然残酷,但只要你愿意走,总会有路;看不到美好,是因为你没有坚持走下去.人生贵在行动,迟疑不决时,不妨选迈出小小一步.前进不必遗憾,若是美好,叫做精彩;若是糟糕,叫做经历.</p>\n<p><strong>关于幸福</strong>: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;常有人说,我现在不幸福,等我结婚或买了房子….就会幸福了.事实的真相是,幸福的人在哪儿都幸福.所以要培养自己的幸福力,不论发生什么,别人都动不了你我的自在开心.这,才是真正强大的气场及自信.</p>\n<p><strong>关于压力</strong>: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;鸡蛋,从外打破是食物,从内打破是生命.人生亦是,从外打破是压力,从内打破是成长.如果你等待别人打破你,那么你注定成为别人的食物;如果能让自己从内打破,那么你会发现自己的成长相当于一种重生.</p>\n<p><strong>关于目标</strong>: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每做一事,最好只追求一个最在乎的目标,其余都可让步,这样达成目标的机会才高.比方:做这事,最在乎是学经验,那就别计较钱;做那事,最要紧是钱,那就别计较面子.经此类推.若做一事,又想学经验,又要赚得多,又要面子….如此美事,有得等啊.</p>\n<p><strong>关于失败</strong>: <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们失败的次数一定比成功的次数多,所以我们最好为失败找到一些乐趣,到目前为止,我觉得失败最大的乐趣,无非是投入的乐趣吧,就像我们每次玩游戏,虽然老是过不了关,但很投入,就还是挺有乐趣的.</p>\n</blockquote>\n<hr>\n<blockquote>\n<p><a href=\"/\">一个人的改变，源自于自我的一种积极进取，而不是等待什么天赐良机。</a></p>\n</blockquote>\n<hr>\n"},{"title":"categories","date":"2016-04-27T01:40:19.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-04-27 09:40:19\ntype: \"categories\"\n---\n","updated":"2016-04-27T02:11:28.353Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cinu3etwm0003xoj0w9mqu0cx","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-04-27T01:40:15.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-04-27 09:40:15\ntype: \"tags\"\n---\n","updated":"2016-04-27T02:10:47.756Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cinu3etwu0007xoj0lq7i6bxr","content":"","excerpt":"","more":""},{"_content":"/**\n\t精灵对象的构建(构造方法&对象原型)\n\t对象原型（类）-->对象实例（对象）\n*/\n/*****\n@param name ：当前对象的名称\n@param painter ：用于绘制当前对象的绘制器（对象类型）\n@param behaviors ：当前对象的行为数组\n*/\n\nvar Sprite=function(name,painter,behaviors){\n\tif(name!==undefined){\n\t\tthis.name=name;//当前对象的名称 (可以不设置)\n\t}\n\t\n\tif(painter!==undefined){\n\t\tthis.painter=painter;//外部传入的绘制器对象(该对象提供了对象的绘制功能)\n\t}\n\t\n\t\n\n\tthis.left=0;//当前对象的横坐标\n\tthis.top=0;//当前对象的纵坐标\n\tthis.width=10;//当前对象的纵坐标\n\tthis.height=10;//当前对象的纵坐标\n\tthis.moveX=0;//当前对象的横向移动速度 正数 向右  负数 向左\n\tthis.moveY=0;//当前对象的纵向移动速度 正数 向下  负数 向上\n\tthis.visible=true;//当前对象的可见状态\n\tthis.animating=false;//当前对象是否处于动画状态\n\tthis.behaviors=behaviors || [];//当前对象的行为数组 （对象数组） [飞,爆炸,起落...]\n}\n\n//由于成员方法是多个对象公用的,将方法写入对象的原型中(类似PHP中的静态方法)\nSprite.prototype={\n\t//对象的绘制方法\n\t//@param context :绘图环境\n\tpaint:function(context){\n\t\t//判断是否存在绘制器   判断当前元素是否可以显示\n\t\tif(this.painter!==undefined && this.visible){\n\t\t\t//调用绘制器对象中的paint绘图方法  传入  this->当前对象(飞机)  context(绘图环境)\n\t\t\tthis.painter.paint(this,context);\n\t\t}\n\t},\n\t//更新动画行为的方法 需要使用behaviors 成员\n\tupdate:function(context,time){\n\t\tfor(var i=0;i<this.behaviors.length;i++){\n\t\t\tthis.behaviors[i].execute(this,context,time);\n\t\t}\n\t}\n\n}\n\n\n//创建一个精灵绘制器   (描边和填充绘制器 (简单动画) 图像绘制器（背景）)\n\t\t\t//构造方法（该对象的成员属性）\n\t\t\t/**\n\t\t\t\turl 当前精灵使用的图片\n\t\t\t\tcells  \n\t\t\t*/\n\t\t\t/*cells=[\n\t\t\t\t{x:11,y:1,w:1,h:1},\n\t\t\t\t{x:12,y:1,w:1,h:1},\n\t\t\t\t{x:21,y:1,w:1,h:1},\n\t\t\t\t{x:12,y:1,w:1,h:1}\n\t\t\t\t]\n\t\t\t\n\t\t\t*/\n\t\t\tvar SpritePainter=function(url,cells){\n\t\t\t\t//加载图片\n\t\t\t\tthis.img=new Image();//图片属性对象\n\t\t\t\tthis.img.src=url;//为当前图片的路径\n\t\t\t\t\n\t\t\t\tthis.cells=cells || [] ;//传入的图像坐标数组(所有图片信息)\n\t\t\t\tthis.cellIndex=0;//当前绘图对象使用的图片信息\n\t\t\t}\n\t\t\t//讲当前对象的方法打入原型当中\n\t\t\tSpritePainter.prototype={\n\t\t\t\t//更新使用的图片（下标）\n\t\t\t\tadvance:function(){\n\t\t\t\t\tif(this.cellIndex==this.cells.length-1){\n\t\t\t\t\t\t//还原图片设置 从第一张图开始使用\n\t\t\t\t\t\tthis.cellIndex=0;\n\t\t\t\t\t}else{\n\t\t\t\t\t\t//更新图片索引，没有到达最后一张图 索引+1\n\t\t\t\t\t\tthis.cellIndex++;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t//图像绘制方法\n\t\t\t\tpaint:function(sprite,context){\n\t\t\t\t\t//保证在图片加载完毕的情况下绘制图片\n\t\t\t\t\tif(this.img.complete){\n\t\t\t\t\t\t//获取当前绘制使用的图片信息\n\t\t\t\t\t\tvar cell=this.cells[this.cellIndex];\n\t\t\t\t\t\t//使用图像信息数组中的某个图片绘制到canvas中\n\t\t\t\t\t\tcontext.drawImage(this.img,cell.x,cell.y,cell.w,cell.h,sprite.left,sprite.top,cell.w,cell.h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\n\n\n","source":"res/game/plane/Sprite.js","raw":"/**\n\t精灵对象的构建(构造方法&对象原型)\n\t对象原型（类）-->对象实例（对象）\n*/\n/*****\n@param name ：当前对象的名称\n@param painter ：用于绘制当前对象的绘制器（对象类型）\n@param behaviors ：当前对象的行为数组\n*/\n\nvar Sprite=function(name,painter,behaviors){\n\tif(name!==undefined){\n\t\tthis.name=name;//当前对象的名称 (可以不设置)\n\t}\n\t\n\tif(painter!==undefined){\n\t\tthis.painter=painter;//外部传入的绘制器对象(该对象提供了对象的绘制功能)\n\t}\n\t\n\t\n\n\tthis.left=0;//当前对象的横坐标\n\tthis.top=0;//当前对象的纵坐标\n\tthis.width=10;//当前对象的纵坐标\n\tthis.height=10;//当前对象的纵坐标\n\tthis.moveX=0;//当前对象的横向移动速度 正数 向右  负数 向左\n\tthis.moveY=0;//当前对象的纵向移动速度 正数 向下  负数 向上\n\tthis.visible=true;//当前对象的可见状态\n\tthis.animating=false;//当前对象是否处于动画状态\n\tthis.behaviors=behaviors || [];//当前对象的行为数组 （对象数组） [飞,爆炸,起落...]\n}\n\n//由于成员方法是多个对象公用的,将方法写入对象的原型中(类似PHP中的静态方法)\nSprite.prototype={\n\t//对象的绘制方法\n\t//@param context :绘图环境\n\tpaint:function(context){\n\t\t//判断是否存在绘制器   判断当前元素是否可以显示\n\t\tif(this.painter!==undefined && this.visible){\n\t\t\t//调用绘制器对象中的paint绘图方法  传入  this->当前对象(飞机)  context(绘图环境)\n\t\t\tthis.painter.paint(this,context);\n\t\t}\n\t},\n\t//更新动画行为的方法 需要使用behaviors 成员\n\tupdate:function(context,time){\n\t\tfor(var i=0;i<this.behaviors.length;i++){\n\t\t\tthis.behaviors[i].execute(this,context,time);\n\t\t}\n\t}\n\n}\n\n\n//创建一个精灵绘制器   (描边和填充绘制器 (简单动画) 图像绘制器（背景）)\n\t\t\t//构造方法（该对象的成员属性）\n\t\t\t/**\n\t\t\t\turl 当前精灵使用的图片\n\t\t\t\tcells  \n\t\t\t*/\n\t\t\t/*cells=[\n\t\t\t\t{x:11,y:1,w:1,h:1},\n\t\t\t\t{x:12,y:1,w:1,h:1},\n\t\t\t\t{x:21,y:1,w:1,h:1},\n\t\t\t\t{x:12,y:1,w:1,h:1}\n\t\t\t\t]\n\t\t\t\n\t\t\t*/\n\t\t\tvar SpritePainter=function(url,cells){\n\t\t\t\t//加载图片\n\t\t\t\tthis.img=new Image();//图片属性对象\n\t\t\t\tthis.img.src=url;//为当前图片的路径\n\t\t\t\t\n\t\t\t\tthis.cells=cells || [] ;//传入的图像坐标数组(所有图片信息)\n\t\t\t\tthis.cellIndex=0;//当前绘图对象使用的图片信息\n\t\t\t}\n\t\t\t//讲当前对象的方法打入原型当中\n\t\t\tSpritePainter.prototype={\n\t\t\t\t//更新使用的图片（下标）\n\t\t\t\tadvance:function(){\n\t\t\t\t\tif(this.cellIndex==this.cells.length-1){\n\t\t\t\t\t\t//还原图片设置 从第一张图开始使用\n\t\t\t\t\t\tthis.cellIndex=0;\n\t\t\t\t\t}else{\n\t\t\t\t\t\t//更新图片索引，没有到达最后一张图 索引+1\n\t\t\t\t\t\tthis.cellIndex++;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t//图像绘制方法\n\t\t\t\tpaint:function(sprite,context){\n\t\t\t\t\t//保证在图片加载完毕的情况下绘制图片\n\t\t\t\t\tif(this.img.complete){\n\t\t\t\t\t\t//获取当前绘制使用的图片信息\n\t\t\t\t\t\tvar cell=this.cells[this.cellIndex];\n\t\t\t\t\t\t//使用图像信息数组中的某个图片绘制到canvas中\n\t\t\t\t\t\tcontext.drawImage(this.img,cell.x,cell.y,cell.w,cell.h,sprite.left,sprite.top,cell.w,cell.h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\n\n\n","date":"2016-04-27T09:12:50.713Z","updated":"2015-06-24T06:45:10.883Z","path":"res/game/plane/Sprite.js","layout":"false","title":"","comments":1,"_id":"cinu3eu5y0087xoj0jxla9rxi","content":"/**\n\t精灵对象的构建(构造方法&对象原型)\n\t对象原型（类）-->对象实例（对象）\n*/\n/*****\n@param name ：当前对象的名称\n@param painter ：用于绘制当前对象的绘制器（对象类型）\n@param behaviors ：当前对象的行为数组\n*/\n\nvar Sprite=function(name,painter,behaviors){\n\tif(name!==undefined){\n\t\tthis.name=name;//当前对象的名称 (可以不设置)\n\t}\n\t\n\tif(painter!==undefined){\n\t\tthis.painter=painter;//外部传入的绘制器对象(该对象提供了对象的绘制功能)\n\t}\n\t\n\t\n\n\tthis.left=0;//当前对象的横坐标\n\tthis.top=0;//当前对象的纵坐标\n\tthis.width=10;//当前对象的纵坐标\n\tthis.height=10;//当前对象的纵坐标\n\tthis.moveX=0;//当前对象的横向移动速度 正数 向右  负数 向左\n\tthis.moveY=0;//当前对象的纵向移动速度 正数 向下  负数 向上\n\tthis.visible=true;//当前对象的可见状态\n\tthis.animating=false;//当前对象是否处于动画状态\n\tthis.behaviors=behaviors || [];//当前对象的行为数组 （对象数组） [飞,爆炸,起落...]\n}\n\n//由于成员方法是多个对象公用的,将方法写入对象的原型中(类似PHP中的静态方法)\nSprite.prototype={\n\t//对象的绘制方法\n\t//@param context :绘图环境\n\tpaint:function(context){\n\t\t//判断是否存在绘制器   判断当前元素是否可以显示\n\t\tif(this.painter!==undefined && this.visible){\n\t\t\t//调用绘制器对象中的paint绘图方法  传入  this->当前对象(飞机)  context(绘图环境)\n\t\t\tthis.painter.paint(this,context);\n\t\t}\n\t},\n\t//更新动画行为的方法 需要使用behaviors 成员\n\tupdate:function(context,time){\n\t\tfor(var i=0;i","excerpt":"","more":"/**\n\t精灵对象的构建(构造方法&对象原型)\n\t对象原型（类）-->对象实例（对象）\n*/\n/*****\n@param name ：当前对象的名称\n@param painter ：用于绘制当前对象的绘制器（对象类型）\n@param behaviors ：当前对象的行为数组\n*/\n\nvar Sprite=function(name,painter,behaviors){\n\tif(name!==undefined){\n\t\tthis.name=name;//当前对象的名称 (可以不设置)\n\t}\n\t\n\tif(painter!==undefined){\n\t\tthis.painter=painter;//外部传入的绘制器对象(该对象提供了对象的绘制功能)\n\t}\n\t\n\t\n\n\tthis.left=0;//当前对象的横坐标\n\tthis.top=0;//当前对象的纵坐标\n\tthis.width=10;//当前对象的纵坐标\n\tthis.height=10;//当前对象的纵坐标\n\tthis.moveX=0;//当前对象的横向移动速度 正数 向右  负数 向左\n\tthis.moveY=0;//当前对象的纵向移动速度 正数 向下  负数 向上\n\tthis.visible=true;//当前对象的可见状态\n\tthis.animating=false;//当前对象是否处于动画状态\n\tthis.behaviors=behaviors || [];//当前对象的行为数组 （对象数组） [飞,爆炸,起落...]\n}\n\n//由于成员方法是多个对象公用的,将方法写入对象的原型中(类似PHP中的静态方法)\nSprite.prototype={\n\t//对象的绘制方法\n\t//@param context :绘图环境\n\tpaint:function(context){\n\t\t//判断是否存在绘制器   判断当前元素是否可以显示\n\t\tif(this.painter!==undefined && this.visible){\n\t\t\t//调用绘制器对象中的paint绘图方法  传入  this->当前对象(飞机)  context(绘图环境)\n\t\t\tthis.painter.paint(this,context);\n\t\t}\n\t},\n\t//更新动画行为的方法 需要使用behaviors 成员\n\tupdate:function(context,time){\n\t\tfor(var i=0;i<this.behaviors.length;i++){\n\t\t\tthis.behaviors[i].execute(this,context,time);\n\t\t}\n\t}\n\n}\n\n\n//创建一个精灵绘制器   (描边和填充绘制器 (简单动画) 图像绘制器（背景）)\n\t\t\t//构造方法（该对象的成员属性）\n\t\t\t/**\n\t\t\t\turl 当前精灵使用的图片\n\t\t\t\tcells  \n\t\t\t*/\n\t\t\t/*cells=[\n\t\t\t\t{x:11,y:1,w:1,h:1},\n\t\t\t\t{x:12,y:1,w:1,h:1},\n\t\t\t\t{x:21,y:1,w:1,h:1},\n\t\t\t\t{x:12,y:1,w:1,h:1}\n\t\t\t\t]\n\t\t\t\n\t\t\t*/\n\t\t\tvar SpritePainter=function(url,cells){\n\t\t\t\t//加载图片\n\t\t\t\tthis.img=new Image();//图片属性对象\n\t\t\t\tthis.img.src=url;//为当前图片的路径\n\t\t\t\t\n\t\t\t\tthis.cells=cells || [] ;//传入的图像坐标数组(所有图片信息)\n\t\t\t\tthis.cellIndex=0;//当前绘图对象使用的图片信息\n\t\t\t}\n\t\t\t//讲当前对象的方法打入原型当中\n\t\t\tSpritePainter.prototype={\n\t\t\t\t//更新使用的图片（下标）\n\t\t\t\tadvance:function(){\n\t\t\t\t\tif(this.cellIndex==this.cells.length-1){\n\t\t\t\t\t\t//还原图片设置 从第一张图开始使用\n\t\t\t\t\t\tthis.cellIndex=0;\n\t\t\t\t\t}else{\n\t\t\t\t\t\t//更新图片索引，没有到达最后一张图 索引+1\n\t\t\t\t\t\tthis.cellIndex++;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t//图像绘制方法\n\t\t\t\tpaint:function(sprite,context){\n\t\t\t\t\t//保证在图片加载完毕的情况下绘制图片\n\t\t\t\t\tif(this.img.complete){\n\t\t\t\t\t\t//获取当前绘制使用的图片信息\n\t\t\t\t\t\tvar cell=this.cells[this.cellIndex];\n\t\t\t\t\t\t//使用图像信息数组中的某个图片绘制到canvas中\n\t\t\t\t\t\tcontext.drawImage(this.img,cell.x,cell.y,cell.w,cell.h,sprite.left,sprite.top,cell.w,cell.h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\n\n\n"},{"_content":"/**\n子弹的文件\n*/\n\n\t\t//写一个构造方法  子弹飞行构造方法\n\t\t\tvar BulletFly=function(){\n\t\t\t\t//用于记录时间的成员属性\n\t\t\t\tthis.lastBulletFlyTime=0;\n\t\t\t}\n\t\t\t//在圆形中写入方法\n\t\t\tBulletFly.prototype={\n\t\t\t\texecute:function(sprite,context,time){\n\t\t\t\t\t//检测动画是否开始运行(时间)\n\t\t\t\t\tif(this.lastBulletFlyTime!==0){\n\t\t\t\t\t\t//更新飞机的位置 top坐标\n\t\t\t\t\t\tsprite.top=sprite.top+sprite.moveY/1000*(time-this.lastBulletFlyTime);\n\t\t\t\t\t\t//判断当前子弹的位置 如果出了页面顶部 自动标注为不显示\n\t\t\t\t\t\tif(sprite.top<0){\n\t\t\t\t\t\t\tsprite.visible=false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//记录每次动画的最后一次时间\n\t\t\t\t\tthis.lastBulletFlyTime=time;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t//创建子弹对象函数\n\t\t\t/**\n\t\t\t\tplaneX  当前飞机的横坐标\n\t\t\t\tplaneY  当前飞机的纵坐标\n\t\t\t*/\n\t\t\tfunction createBullet(planeX,planeY){\n\t\t\t\t//当前子弹的初始化属性\n\t\t\t\tvar option={w:5,h:15,hp:1,moveY:-400,x:planeX,y:planeY};\n\t\t\t\t//当前子弹的图片资源\n\t\t\t\tvar cells=[\n\t\t\t\t\t\t{x:499,y:0,w:5,h:15}\n\t\t\t\t\t\t];\n\t\t\t\t\n\t\t\t\t//创建一个子弹对象\n\t\t\t\tvar bullet=new Sprite('bullet',new SpritePainter('gameArts.png',cells),[new BulletFly()]);\n\t\t\t\t\n\t\t\t\t//初始化子弹的属性\n\t\t\t\tbullet.left=option.x;\n\t\t\t\tbullet.top=option.y;\n\t\t\t\tbullet.width=option.w;\n\t\t\t\tbullet.height=option.h;\n\t\t\t\tbullet.moveY=option.moveY;\n\t\t\t\tbullet.hp=option.hp;\n\t\t\t\t\n\t\t\t\treturn bullet;\n\t\t\t\t\n\t\t\t\t\n\t\t\t}","source":"res/game/plane/Bullet.js","raw":"/**\n子弹的文件\n*/\n\n\t\t//写一个构造方法  子弹飞行构造方法\n\t\t\tvar BulletFly=function(){\n\t\t\t\t//用于记录时间的成员属性\n\t\t\t\tthis.lastBulletFlyTime=0;\n\t\t\t}\n\t\t\t//在圆形中写入方法\n\t\t\tBulletFly.prototype={\n\t\t\t\texecute:function(sprite,context,time){\n\t\t\t\t\t//检测动画是否开始运行(时间)\n\t\t\t\t\tif(this.lastBulletFlyTime!==0){\n\t\t\t\t\t\t//更新飞机的位置 top坐标\n\t\t\t\t\t\tsprite.top=sprite.top+sprite.moveY/1000*(time-this.lastBulletFlyTime);\n\t\t\t\t\t\t//判断当前子弹的位置 如果出了页面顶部 自动标注为不显示\n\t\t\t\t\t\tif(sprite.top<0){\n\t\t\t\t\t\t\tsprite.visible=false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//记录每次动画的最后一次时间\n\t\t\t\t\tthis.lastBulletFlyTime=time;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t//创建子弹对象函数\n\t\t\t/**\n\t\t\t\tplaneX  当前飞机的横坐标\n\t\t\t\tplaneY  当前飞机的纵坐标\n\t\t\t*/\n\t\t\tfunction createBullet(planeX,planeY){\n\t\t\t\t//当前子弹的初始化属性\n\t\t\t\tvar option={w:5,h:15,hp:1,moveY:-400,x:planeX,y:planeY};\n\t\t\t\t//当前子弹的图片资源\n\t\t\t\tvar cells=[\n\t\t\t\t\t\t{x:499,y:0,w:5,h:15}\n\t\t\t\t\t\t];\n\t\t\t\t\n\t\t\t\t//创建一个子弹对象\n\t\t\t\tvar bullet=new Sprite('bullet',new SpritePainter('gameArts.png',cells),[new BulletFly()]);\n\t\t\t\t\n\t\t\t\t//初始化子弹的属性\n\t\t\t\tbullet.left=option.x;\n\t\t\t\tbullet.top=option.y;\n\t\t\t\tbullet.width=option.w;\n\t\t\t\tbullet.height=option.h;\n\t\t\t\tbullet.moveY=option.moveY;\n\t\t\t\tbullet.hp=option.hp;\n\t\t\t\t\n\t\t\t\treturn bullet;\n\t\t\t\t\n\t\t\t\t\n\t\t\t}","date":"2016-04-27T09:12:50.705Z","updated":"2015-06-24T06:45:10.880Z","path":"res/game/plane/Bullet.js","layout":"false","title":"","comments":1,"_id":"cinu3eu5z0088xoj046g1vqwx","content":"/**\n子弹的文件\n*/\n\n\t\t//写一个构造方法  子弹飞行构造方法\n\t\t\tvar BulletFly=function(){\n\t\t\t\t//用于记录时间的成员属性\n\t\t\t\tthis.lastBulletFlyTime=0;\n\t\t\t}\n\t\t\t//在圆形中写入方法\n\t\t\tBulletFly.prototype={\n\t\t\t\texecute:function(sprite,context,time){\n\t\t\t\t\t//检测动画是否开始运行(时间)\n\t\t\t\t\tif(this.lastBulletFlyTime!==0){\n\t\t\t\t\t\t//更新飞机的位置 top坐标\n\t\t\t\t\t\tsprite.top=sprite.top+sprite.moveY/1000*(time-this.lastBulletFlyTime);\n\t\t\t\t\t\t//判断当前子弹的位置 如果出了页面顶部 自动标注为不显示\n\t\t\t\t\t\tif(sprite.top","excerpt":"","more":"/**\n子弹的文件\n*/\n\n\t\t//写一个构造方法  子弹飞行构造方法\n\t\t\tvar BulletFly=function(){\n\t\t\t\t//用于记录时间的成员属性\n\t\t\t\tthis.lastBulletFlyTime=0;\n\t\t\t}\n\t\t\t//在圆形中写入方法\n\t\t\tBulletFly.prototype={\n\t\t\t\texecute:function(sprite,context,time){\n\t\t\t\t\t//检测动画是否开始运行(时间)\n\t\t\t\t\tif(this.lastBulletFlyTime!==0){\n\t\t\t\t\t\t//更新飞机的位置 top坐标\n\t\t\t\t\t\tsprite.top=sprite.top+sprite.moveY/1000*(time-this.lastBulletFlyTime);\n\t\t\t\t\t\t//判断当前子弹的位置 如果出了页面顶部 自动标注为不显示\n\t\t\t\t\t\tif(sprite.top<0){\n\t\t\t\t\t\t\tsprite.visible=false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//记录每次动画的最后一次时间\n\t\t\t\t\tthis.lastBulletFlyTime=time;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t//创建子弹对象函数\n\t\t\t/**\n\t\t\t\tplaneX  当前飞机的横坐标\n\t\t\t\tplaneY  当前飞机的纵坐标\n\t\t\t*/\n\t\t\tfunction createBullet(planeX,planeY){\n\t\t\t\t//当前子弹的初始化属性\n\t\t\t\tvar option={w:5,h:15,hp:1,moveY:-400,x:planeX,y:planeY};\n\t\t\t\t//当前子弹的图片资源\n\t\t\t\tvar cells=[\n\t\t\t\t\t\t{x:499,y:0,w:5,h:15}\n\t\t\t\t\t\t];\n\t\t\t\t\n\t\t\t\t//创建一个子弹对象\n\t\t\t\tvar bullet=new Sprite('bullet',new SpritePainter('gameArts.png',cells),[new BulletFly()]);\n\t\t\t\t\n\t\t\t\t//初始化子弹的属性\n\t\t\t\tbullet.left=option.x;\n\t\t\t\tbullet.top=option.y;\n\t\t\t\tbullet.width=option.w;\n\t\t\t\tbullet.height=option.h;\n\t\t\t\tbullet.moveY=option.moveY;\n\t\t\t\tbullet.hp=option.hp;\n\t\t\t\t\n\t\t\t\treturn bullet;\n\t\t\t\t\n\t\t\t\t\n\t\t\t}"},{"_content":"\t\t\t//新建飞机行为对象\n\t\t\t\n\t\t\t\n\t\t\t//-----------用于飞行的对象-------------------\n\t\t\t//写一个构造方法\n\t\t\tvar EnemyFly=function(){\n\t\t\t\t//用于记录时间的成员属性\n\t\t\t\tthis.lastEnemyFlyTime=0;\n\t\t\t}\n\t\t\t//在圆形中写入方法\n\t\t\tEnemyFly.prototype={\n\t\t\t\texecute:function(sprite,context,time){\n\t\t\t\t\t//检测动画是否开始运行(时间)\n\t\t\t\t\tif(this.lastEnemyFlyTime!==0){\n\t\t\t\t\t\t//更新飞机的位置 top坐标\n\t\t\t\t\t\tsprite.top=sprite.top+sprite.moveY/1000*(time-this.lastEnemyFlyTime);\n\t\t\t\t\t\t\n\t\t\t\t\t\t//判断当前飞机的位置是否飞出屏幕，如果已经离开屏幕  隐藏\n\t\t\t\t\t\tif(sprite.top>context.canvas.height){\n\t\t\t\t\t\t\tsprite.visible=false;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t//记录每次动画的最后一次时间\n\t\t\t\t\tthis.lastEnemyFlyTime=time;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t//---------------用于爆炸的行为对象------------------------\n\t\t\n\t\t\t//构造方法\n\t\t\tvar EnemyBomb=function(){\n\t\t\t\t//记录最后一次时间\n\t\t\t\tthis.lastEnemyBombTime=0;\n\t\t\t\t//每一个画面的时间\n\t\t\t\tthis.cycle=300;\n\t\t\t}\n\t\t\n\t\t\t//对象圆形\n\t\t\tEnemyBomb.prototype={\n\t\t\t\texecute:function(sprite,context,time){\n\t\t\t\t\t//轮播每一个图片\n\t\t\t\t\tif(time-this.lastEnemyBombTime>this.cycle && sprite.hp==0){\n\t\t\t\t\t\t//更新当前绘图使用的图片\n\t\t\t\t\t\t\n\t\t\t\t\t\tsprite.painter.advance();\n\t\t\t\t\t\t//判断 如果当前飞机死亡hp=0 且爆炸效果播放完毕 删除该飞机\n\t\t\t\t\t\tif(sprite.painter.cellIndex==sprite.painter.cells.length-1){\n\t\t\t\t\t\t\tsprite.visible=false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//重新记录最后一次执行时间\n\t\t\t\t\t\tthis.lastEnemyBombTime=time;\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t//使用工厂模式来创建敌机(可以创建三种飞机的函数)\n\t\t\t/**\n\t\t\t参数:name  smallEnemy小飞机  middleEnemy中飞机  bigEnemy大飞机\n\t\t\t*/\n\t\t\tfunction createEnemy(name){\n\t\t\t\t//小飞机的信息\n\t\t\t\tvar smallCells=[\n\t\t\t\t\t\t{x:80,y:655,w:35,h:30},//正常飞行\n\t\t\t\t\t\t{x:45,y:655,w:35,h:30},\t\t\t\t\t\n\t\t\t\t\t\t{x:418,y:731,w:40,h:30},\t\t\t\t\t\n\t\t\t\t\t\t{x:473,y:723,w:40,h:50}\n\t\t\t\t\t];\n\t\t\t\t//小飞机的配置\n\t\t\t\tvar smallOption={w:40,h:50,moveY:100+Math.floor(Math.random()*100),hp:1,score:500}\n\t\t\t\t\t\n\t\t\t\t//中飞机的信息\n\t\t\t\tvar middleCells=[\n\t\t\t\t\t\t{x:0,y:569,w:46,h:60},//正常飞行\n\t\t\t\t\t\t{x:432,y:413,w:46,h:61},\n\t\t\t\t\t\t{x:432,y:538,w:46,h:63},\n\t\t\t\t\t\t{x:432,y:599,w:46,h:58},\n\t\t\t\t\t\t{x:432,y:478,w:46,h:59}\n\t\t\t\t\t];\n\t\t\t\t//中飞机的配置\n\t\t\t\tvar middleOption={w:46,h:63,moveY:80+Math.floor(Math.random()*100),hp:2,score:1000}\n\t\t\t\t\n\t\t\t\t//大飞机的信息\n\t\t\t\tvar bigCells=[\n\t\t\t\t\t\t{x:110,y:736,w:110,h:170},//正常飞行\n\t\t\t\t\t\t{x:221,y:857,w:110,h:170},\n\t\t\t\t\t\t{x:310,y:680,w:110,h:170},\n\t\t\t\t\t\t{x:0,y:754,w:110,h:170},\n\t\t\t\t\t\t{x:322,y:340,w:110,h:170},\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t{x:322,y:170,w:110,h:170},\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t{x:322,y:340,w:110,h:170},\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t{x:322,y:510,w:110,h:170},\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t{x:322,y:0,w:110,h:170}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t];\n\t\t\t\t\t\n\t\t\t\t//大飞机的配置\n\t\t\t\tvar bigOption={w:110,h:170,moveY:70+Math.floor(Math.random()*70),hp:3,score:2000}\n\t\t\t\t\t\n\t\t\t\t//判断飞机使用的图片对象集合\n\t\t\t\tif(name=='smallEnemy'){\n\t\t\t\t\tvar cells=smallCells;\n\t\t\t\t\tvar option=smallOption;\n\t\t\t\t}else if(name=='middleEnemy'){\n\t\t\t\t\tvar cells=middleCells;\n\t\t\t\t\tvar option=middleOption;\n\t\t\t\t}else{\n\t\t\t\t\tvar cells=bigCells;\n\t\t\t\t\tvar option=bigOption;\n\t\t\t\t}\n\t\t\t\t//实例化精灵对象\n\t\t\t\tvar Enemy=new Sprite(name,new SpritePainter('gameArts.png',cells),[new EnemyFly(),new EnemyBomb()]);\n\t\t\t\t//属性初始化\n\t\t\t\tEnemy.left=Math.floor(Math.random()*320)-Enemy.width;\n\t\t\t\tEnemy.top=-option.h;\n\t\t\t\tEnemy.width=option.w;\n\t\t\t\tEnemy.hight=option.h;\n\t\t\t\tEnemy.moveY=option.moveY;\n\t\t\t\tEnemy.hp=option.hp;//气血属性\n\t\t\t\tEnemy.score=option.score;//积分属性\n\t\t\t\t\n\t\t\t\t//返回精灵对象\n\t\t\t\treturn Enemy;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t","source":"res/game/plane/Enemy.js","raw":"\t\t\t//新建飞机行为对象\n\t\t\t\n\t\t\t\n\t\t\t//-----------用于飞行的对象-------------------\n\t\t\t//写一个构造方法\n\t\t\tvar EnemyFly=function(){\n\t\t\t\t//用于记录时间的成员属性\n\t\t\t\tthis.lastEnemyFlyTime=0;\n\t\t\t}\n\t\t\t//在圆形中写入方法\n\t\t\tEnemyFly.prototype={\n\t\t\t\texecute:function(sprite,context,time){\n\t\t\t\t\t//检测动画是否开始运行(时间)\n\t\t\t\t\tif(this.lastEnemyFlyTime!==0){\n\t\t\t\t\t\t//更新飞机的位置 top坐标\n\t\t\t\t\t\tsprite.top=sprite.top+sprite.moveY/1000*(time-this.lastEnemyFlyTime);\n\t\t\t\t\t\t\n\t\t\t\t\t\t//判断当前飞机的位置是否飞出屏幕，如果已经离开屏幕  隐藏\n\t\t\t\t\t\tif(sprite.top>context.canvas.height){\n\t\t\t\t\t\t\tsprite.visible=false;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t//记录每次动画的最后一次时间\n\t\t\t\t\tthis.lastEnemyFlyTime=time;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t//---------------用于爆炸的行为对象------------------------\n\t\t\n\t\t\t//构造方法\n\t\t\tvar EnemyBomb=function(){\n\t\t\t\t//记录最后一次时间\n\t\t\t\tthis.lastEnemyBombTime=0;\n\t\t\t\t//每一个画面的时间\n\t\t\t\tthis.cycle=300;\n\t\t\t}\n\t\t\n\t\t\t//对象圆形\n\t\t\tEnemyBomb.prototype={\n\t\t\t\texecute:function(sprite,context,time){\n\t\t\t\t\t//轮播每一个图片\n\t\t\t\t\tif(time-this.lastEnemyBombTime>this.cycle && sprite.hp==0){\n\t\t\t\t\t\t//更新当前绘图使用的图片\n\t\t\t\t\t\t\n\t\t\t\t\t\tsprite.painter.advance();\n\t\t\t\t\t\t//判断 如果当前飞机死亡hp=0 且爆炸效果播放完毕 删除该飞机\n\t\t\t\t\t\tif(sprite.painter.cellIndex==sprite.painter.cells.length-1){\n\t\t\t\t\t\t\tsprite.visible=false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//重新记录最后一次执行时间\n\t\t\t\t\t\tthis.lastEnemyBombTime=time;\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t//使用工厂模式来创建敌机(可以创建三种飞机的函数)\n\t\t\t/**\n\t\t\t参数:name  smallEnemy小飞机  middleEnemy中飞机  bigEnemy大飞机\n\t\t\t*/\n\t\t\tfunction createEnemy(name){\n\t\t\t\t//小飞机的信息\n\t\t\t\tvar smallCells=[\n\t\t\t\t\t\t{x:80,y:655,w:35,h:30},//正常飞行\n\t\t\t\t\t\t{x:45,y:655,w:35,h:30},\t\t\t\t\t\n\t\t\t\t\t\t{x:418,y:731,w:40,h:30},\t\t\t\t\t\n\t\t\t\t\t\t{x:473,y:723,w:40,h:50}\n\t\t\t\t\t];\n\t\t\t\t//小飞机的配置\n\t\t\t\tvar smallOption={w:40,h:50,moveY:100+Math.floor(Math.random()*100),hp:1,score:500}\n\t\t\t\t\t\n\t\t\t\t//中飞机的信息\n\t\t\t\tvar middleCells=[\n\t\t\t\t\t\t{x:0,y:569,w:46,h:60},//正常飞行\n\t\t\t\t\t\t{x:432,y:413,w:46,h:61},\n\t\t\t\t\t\t{x:432,y:538,w:46,h:63},\n\t\t\t\t\t\t{x:432,y:599,w:46,h:58},\n\t\t\t\t\t\t{x:432,y:478,w:46,h:59}\n\t\t\t\t\t];\n\t\t\t\t//中飞机的配置\n\t\t\t\tvar middleOption={w:46,h:63,moveY:80+Math.floor(Math.random()*100),hp:2,score:1000}\n\t\t\t\t\n\t\t\t\t//大飞机的信息\n\t\t\t\tvar bigCells=[\n\t\t\t\t\t\t{x:110,y:736,w:110,h:170},//正常飞行\n\t\t\t\t\t\t{x:221,y:857,w:110,h:170},\n\t\t\t\t\t\t{x:310,y:680,w:110,h:170},\n\t\t\t\t\t\t{x:0,y:754,w:110,h:170},\n\t\t\t\t\t\t{x:322,y:340,w:110,h:170},\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t{x:322,y:170,w:110,h:170},\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t{x:322,y:340,w:110,h:170},\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t{x:322,y:510,w:110,h:170},\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t{x:322,y:0,w:110,h:170}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t];\n\t\t\t\t\t\n\t\t\t\t//大飞机的配置\n\t\t\t\tvar bigOption={w:110,h:170,moveY:70+Math.floor(Math.random()*70),hp:3,score:2000}\n\t\t\t\t\t\n\t\t\t\t//判断飞机使用的图片对象集合\n\t\t\t\tif(name=='smallEnemy'){\n\t\t\t\t\tvar cells=smallCells;\n\t\t\t\t\tvar option=smallOption;\n\t\t\t\t}else if(name=='middleEnemy'){\n\t\t\t\t\tvar cells=middleCells;\n\t\t\t\t\tvar option=middleOption;\n\t\t\t\t}else{\n\t\t\t\t\tvar cells=bigCells;\n\t\t\t\t\tvar option=bigOption;\n\t\t\t\t}\n\t\t\t\t//实例化精灵对象\n\t\t\t\tvar Enemy=new Sprite(name,new SpritePainter('gameArts.png',cells),[new EnemyFly(),new EnemyBomb()]);\n\t\t\t\t//属性初始化\n\t\t\t\tEnemy.left=Math.floor(Math.random()*320)-Enemy.width;\n\t\t\t\tEnemy.top=-option.h;\n\t\t\t\tEnemy.width=option.w;\n\t\t\t\tEnemy.hight=option.h;\n\t\t\t\tEnemy.moveY=option.moveY;\n\t\t\t\tEnemy.hp=option.hp;//气血属性\n\t\t\t\tEnemy.score=option.score;//积分属性\n\t\t\t\t\n\t\t\t\t//返回精灵对象\n\t\t\t\treturn Enemy;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t","date":"2016-04-27T09:12:50.707Z","updated":"2015-06-24T06:45:10.881Z","path":"res/game/plane/Enemy.js","layout":"false","title":"","comments":1,"_id":"cinu3eu630089xoj03109ojne","content":"\t\t\t//新建飞机行为对象\n\t\t\t\n\t\t\t\n\t\t\t//-----------用于飞行的对象-------------------\n\t\t\t//写一个构造方法\n\t\t\tvar EnemyFly=function(){\n\t\t\t\t//用于记录时间的成员属性\n\t\t\t\tthis.lastEnemyFlyTime=0;\n\t\t\t}\n\t\t\t//在圆形中写入方法\n\t\t\tEnemyFly.prototype={\n\t\t\t\texecute:function(sprite,context,time){\n\t\t\t\t\t//检测动画是否开始运行(时间)\n\t\t\t\t\tif(this.lastEnemyFlyTime!==0){\n\t\t\t\t\t\t//更新飞机的位置 top坐标\n\t\t\t\t\t\tsprite.top=sprite.top+sprite.moveY/1000*(time-this.lastEnemyFlyTime);\n\t\t\t\t\t\t\n\t\t\t\t\t\t//判断当前飞机的位置是否飞出屏幕，如果已经离开屏幕  隐藏\n\t\t\t\t\t\tif(sprite.top>context.canvas.height){\n\t\t\t\t\t\t\tsprite.visible=false;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t//记录每次动画的最后一次时间\n\t\t\t\t\tthis.lastEnemyFlyTime=time;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t//---------------用于爆炸的行为对象------------------------\n\t\t\n\t\t\t//构造方法\n\t\t\tvar EnemyBomb=function(){\n\t\t\t\t//记录最后一次时间\n\t\t\t\tthis.lastEnemyBombTime=0;\n\t\t\t\t//每一个画面的时间\n\t\t\t\tthis.cycle=300;\n\t\t\t}\n\t\t\n\t\t\t//对象圆形\n\t\t\tEnemyBomb.prototype={\n\t\t\t\texecute:function(sprite,context,time){\n\t\t\t\t\t//轮播每一个图片\n\t\t\t\t\tif(time-this.lastEnemyBombTime>this.cycle && sprite.hp==0){\n\t\t\t\t\t\t//更新当前绘图使用的图片\n\t\t\t\t\t\t\n\t\t\t\t\t\tsprite.painter.advance();\n\t\t\t\t\t\t//判断 如果当前飞机死亡hp=0 且爆炸效果播放完毕 删除该飞机\n\t\t\t\t\t\tif(sprite.painter.cellIndex==sprite.painter.cells.length-1){\n\t\t\t\t\t\t\tsprite.visible=false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//重新记录最后一次执行时间\n\t\t\t\t\t\tthis.lastEnemyBombTime=time;\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t//使用工厂模式来创建敌机(可以创建三种飞机的函数)\n\t\t\t/**\n\t\t\t参数:name  smallEnemy小飞机  middleEnemy中飞机  bigEnemy大飞机\n\t\t\t*/\n\t\t\tfunction createEnemy(name){\n\t\t\t\t//小飞机的信息\n\t\t\t\tvar smallCells=[\n\t\t\t\t\t\t{x:80,y:655,w:35,h:30},//正常飞行\n\t\t\t\t\t\t{x:45,y:655,w:35,h:30},\t\t\t\t\t\n\t\t\t\t\t\t{x:418,y:731,w:40,h:30},\t\t\t\t\t\n\t\t\t\t\t\t{x:473,y:723,w:40,h:50}\n\t\t\t\t\t];\n\t\t\t\t//小飞机的配置\n\t\t\t\tvar smallOption={w:40,h:50,moveY:100+Math.floor(Math.random()*100),hp:1,score:500}\n\t\t\t\t\t\n\t\t\t\t//中飞机的信息\n\t\t\t\tvar middleCells=[\n\t\t\t\t\t\t{x:0,y:569,w:46,h:60},//正常飞行\n\t\t\t\t\t\t{x:432,y:413,w:46,h:61},\n\t\t\t\t\t\t{x:432,y:538,w:46,h:63},\n\t\t\t\t\t\t{x:432,y:599,w:46,h:58},\n\t\t\t\t\t\t{x:432,y:478,w:46,h:59}\n\t\t\t\t\t];\n\t\t\t\t//中飞机的配置\n\t\t\t\tvar middleOption={w:46,h:63,moveY:80+Math.floor(Math.random()*100),hp:2,score:1000}\n\t\t\t\t\n\t\t\t\t//大飞机的信息\n\t\t\t\tvar bigCells=[\n\t\t\t\t\t\t{x:110,y:736,w:110,h:170},//正常飞行\n\t\t\t\t\t\t{x:221,y:857,w:110,h:170},\n\t\t\t\t\t\t{x:310,y:680,w:110,h:170},\n\t\t\t\t\t\t{x:0,y:754,w:110,h:170},\n\t\t\t\t\t\t{x:322,y:340,w:110,h:170},\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t{x:322,y:170,w:110,h:170},\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t{x:322,y:340,w:110,h:170},\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t{x:322,y:510,w:110,h:170},\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t{x:322,y:0,w:110,h:170}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t];\n\t\t\t\t\t\n\t\t\t\t//大飞机的配置\n\t\t\t\tvar bigOption={w:110,h:170,moveY:70+Math.floor(Math.random()*70),hp:3,score:2000}\n\t\t\t\t\t\n\t\t\t\t//判断飞机使用的图片对象集合\n\t\t\t\tif(name=='smallEnemy'){\n\t\t\t\t\tvar cells=smallCells;\n\t\t\t\t\tvar option=smallOption;\n\t\t\t\t}else if(name=='middleEnemy'){\n\t\t\t\t\tvar cells=middleCells;\n\t\t\t\t\tvar option=middleOption;\n\t\t\t\t}else{\n\t\t\t\t\tvar cells=bigCells;\n\t\t\t\t\tvar option=bigOption;\n\t\t\t\t}\n\t\t\t\t//实例化精灵对象\n\t\t\t\tvar Enemy=new Sprite(name,new SpritePainter('gameArts.png',cells),[new EnemyFly(),new EnemyBomb()]);\n\t\t\t\t//属性初始化\n\t\t\t\tEnemy.left=Math.floor(Math.random()*320)-Enemy.width;\n\t\t\t\tEnemy.top=-option.h;\n\t\t\t\tEnemy.width=option.w;\n\t\t\t\tEnemy.hight=option.h;\n\t\t\t\tEnemy.moveY=option.moveY;\n\t\t\t\tEnemy.hp=option.hp;//气血属性\n\t\t\t\tEnemy.score=option.score;//积分属性\n\t\t\t\t\n\t\t\t\t//返回精灵对象\n\t\t\t\treturn Enemy;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t","excerpt":"","more":"\t\t\t//新建飞机行为对象\n\t\t\t\n\t\t\t\n\t\t\t//-----------用于飞行的对象-------------------\n\t\t\t//写一个构造方法\n\t\t\tvar EnemyFly=function(){\n\t\t\t\t//用于记录时间的成员属性\n\t\t\t\tthis.lastEnemyFlyTime=0;\n\t\t\t}\n\t\t\t//在圆形中写入方法\n\t\t\tEnemyFly.prototype={\n\t\t\t\texecute:function(sprite,context,time){\n\t\t\t\t\t//检测动画是否开始运行(时间)\n\t\t\t\t\tif(this.lastEnemyFlyTime!==0){\n\t\t\t\t\t\t//更新飞机的位置 top坐标\n\t\t\t\t\t\tsprite.top=sprite.top+sprite.moveY/1000*(time-this.lastEnemyFlyTime);\n\t\t\t\t\t\t\n\t\t\t\t\t\t//判断当前飞机的位置是否飞出屏幕，如果已经离开屏幕  隐藏\n\t\t\t\t\t\tif(sprite.top>context.canvas.height){\n\t\t\t\t\t\t\tsprite.visible=false;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t//记录每次动画的最后一次时间\n\t\t\t\t\tthis.lastEnemyFlyTime=time;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t//---------------用于爆炸的行为对象------------------------\n\t\t\n\t\t\t//构造方法\n\t\t\tvar EnemyBomb=function(){\n\t\t\t\t//记录最后一次时间\n\t\t\t\tthis.lastEnemyBombTime=0;\n\t\t\t\t//每一个画面的时间\n\t\t\t\tthis.cycle=300;\n\t\t\t}\n\t\t\n\t\t\t//对象圆形\n\t\t\tEnemyBomb.prototype={\n\t\t\t\texecute:function(sprite,context,time){\n\t\t\t\t\t//轮播每一个图片\n\t\t\t\t\tif(time-this.lastEnemyBombTime>this.cycle && sprite.hp==0){\n\t\t\t\t\t\t//更新当前绘图使用的图片\n\t\t\t\t\t\t\n\t\t\t\t\t\tsprite.painter.advance();\n\t\t\t\t\t\t//判断 如果当前飞机死亡hp=0 且爆炸效果播放完毕 删除该飞机\n\t\t\t\t\t\tif(sprite.painter.cellIndex==sprite.painter.cells.length-1){\n\t\t\t\t\t\t\tsprite.visible=false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//重新记录最后一次执行时间\n\t\t\t\t\t\tthis.lastEnemyBombTime=time;\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t//使用工厂模式来创建敌机(可以创建三种飞机的函数)\n\t\t\t/**\n\t\t\t参数:name  smallEnemy小飞机  middleEnemy中飞机  bigEnemy大飞机\n\t\t\t*/\n\t\t\tfunction createEnemy(name){\n\t\t\t\t//小飞机的信息\n\t\t\t\tvar smallCells=[\n\t\t\t\t\t\t{x:80,y:655,w:35,h:30},//正常飞行\n\t\t\t\t\t\t{x:45,y:655,w:35,h:30},\t\t\t\t\t\n\t\t\t\t\t\t{x:418,y:731,w:40,h:30},\t\t\t\t\t\n\t\t\t\t\t\t{x:473,y:723,w:40,h:50}\n\t\t\t\t\t];\n\t\t\t\t//小飞机的配置\n\t\t\t\tvar smallOption={w:40,h:50,moveY:100+Math.floor(Math.random()*100),hp:1,score:500}\n\t\t\t\t\t\n\t\t\t\t//中飞机的信息\n\t\t\t\tvar middleCells=[\n\t\t\t\t\t\t{x:0,y:569,w:46,h:60},//正常飞行\n\t\t\t\t\t\t{x:432,y:413,w:46,h:61},\n\t\t\t\t\t\t{x:432,y:538,w:46,h:63},\n\t\t\t\t\t\t{x:432,y:599,w:46,h:58},\n\t\t\t\t\t\t{x:432,y:478,w:46,h:59}\n\t\t\t\t\t];\n\t\t\t\t//中飞机的配置\n\t\t\t\tvar middleOption={w:46,h:63,moveY:80+Math.floor(Math.random()*100),hp:2,score:1000}\n\t\t\t\t\n\t\t\t\t//大飞机的信息\n\t\t\t\tvar bigCells=[\n\t\t\t\t\t\t{x:110,y:736,w:110,h:170},//正常飞行\n\t\t\t\t\t\t{x:221,y:857,w:110,h:170},\n\t\t\t\t\t\t{x:310,y:680,w:110,h:170},\n\t\t\t\t\t\t{x:0,y:754,w:110,h:170},\n\t\t\t\t\t\t{x:322,y:340,w:110,h:170},\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t{x:322,y:170,w:110,h:170},\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t{x:322,y:340,w:110,h:170},\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t{x:322,y:510,w:110,h:170},\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t{x:322,y:0,w:110,h:170}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t];\n\t\t\t\t\t\n\t\t\t\t//大飞机的配置\n\t\t\t\tvar bigOption={w:110,h:170,moveY:70+Math.floor(Math.random()*70),hp:3,score:2000}\n\t\t\t\t\t\n\t\t\t\t//判断飞机使用的图片对象集合\n\t\t\t\tif(name=='smallEnemy'){\n\t\t\t\t\tvar cells=smallCells;\n\t\t\t\t\tvar option=smallOption;\n\t\t\t\t}else if(name=='middleEnemy'){\n\t\t\t\t\tvar cells=middleCells;\n\t\t\t\t\tvar option=middleOption;\n\t\t\t\t}else{\n\t\t\t\t\tvar cells=bigCells;\n\t\t\t\t\tvar option=bigOption;\n\t\t\t\t}\n\t\t\t\t//实例化精灵对象\n\t\t\t\tvar Enemy=new Sprite(name,new SpritePainter('gameArts.png',cells),[new EnemyFly(),new EnemyBomb()]);\n\t\t\t\t//属性初始化\n\t\t\t\tEnemy.left=Math.floor(Math.random()*320)-Enemy.width;\n\t\t\t\tEnemy.top=-option.h;\n\t\t\t\tEnemy.width=option.w;\n\t\t\t\tEnemy.hight=option.h;\n\t\t\t\tEnemy.moveY=option.moveY;\n\t\t\t\tEnemy.hp=option.hp;//气血属性\n\t\t\t\tEnemy.score=option.score;//积分属性\n\t\t\t\t\n\t\t\t\t//返回精灵对象\n\t\t\t\treturn Enemy;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t"},{"_content":"\t\tvar lastFpsTime=0;\n\t\t\n\t\tfunction countFps(){\n\t\t\t//获取当前的时间\n\t\t\tvar now=new Date();\n\t\t\tvar frameTime=now-lastFpsTime\n\t\t\tvar fps=Math.floor(1000/frameTime);//计算帧率\n\t\t\t//计算完毕之后将获取的时间保存到lasttime中作为下一帧的开始时间\n\t\t\tlastFpsTime=now;\n\t\t\t\t\t\n\t\t\treturn fps;\n\t\t\t\t\n\t\t}","source":"res/game/plane/countFps.js","raw":"\t\tvar lastFpsTime=0;\n\t\t\n\t\tfunction countFps(){\n\t\t\t//获取当前的时间\n\t\t\tvar now=new Date();\n\t\t\tvar frameTime=now-lastFpsTime\n\t\t\tvar fps=Math.floor(1000/frameTime);//计算帧率\n\t\t\t//计算完毕之后将获取的时间保存到lasttime中作为下一帧的开始时间\n\t\t\tlastFpsTime=now;\n\t\t\t\t\t\n\t\t\treturn fps;\n\t\t\t\t\n\t\t}","date":"2016-04-27T09:12:50.706Z","updated":"2015-06-24T06:45:10.885Z","path":"res/game/plane/countFps.js","layout":"false","title":"","comments":1,"_id":"cinu3eu65008axoj0az9x7ed7","content":"\t\tvar lastFpsTime=0;\n\t\t\n\t\tfunction countFps(){\n\t\t\t//获取当前的时间\n\t\t\tvar now=new Date();\n\t\t\tvar frameTime=now-lastFpsTime\n\t\t\tvar fps=Math.floor(1000/frameTime);//计算帧率\n\t\t\t//计算完毕之后将获取的时间保存到lasttime中作为下一帧的开始时间\n\t\t\tlastFpsTime=now;\n\t\t\t\t\t\n\t\t\treturn fps;\n\t\t\t\t\n\t\t}","excerpt":"","more":"\t\tvar lastFpsTime=0;\n\t\t\n\t\tfunction countFps(){\n\t\t\t//获取当前的时间\n\t\t\tvar now=new Date();\n\t\t\tvar frameTime=now-lastFpsTime\n\t\t\tvar fps=Math.floor(1000/frameTime);//计算帧率\n\t\t\t//计算完毕之后将获取的时间保存到lasttime中作为下一帧的开始时间\n\t\t\tlastFpsTime=now;\n\t\t\t\t\t\n\t\t\treturn fps;\n\t\t\t\t\n\t\t}"},{"_content":"<!doctype html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>我们一起打飞机</title>\n\t\t<style>\n\t\t\tcanvas{border:1px solid red;}\n\t\t\tbody{text-align:center}\n\t\t</style>\n\t\t<!--兼容性的动画播放方法-->\n\t\t<script src=\"requestNextAnimationFrame.js\"></script>\n\t\t<!--计算帧数的函数-->\n\t\t<script src=\"countFps.js\"></script>\n\t\t<!--坐标转换的函数-->\n\t\t<script src=\"windowTocanvas.js\"></script>\n\t\t<!--引入背景滚动对象-->\n\t\t<script src=\"bgSprite.js\"></script>\n\t\t<!--载入通用精灵对象-->\n\t\t<script src=\"Sprite.js\"></script>\n\t\t<!--载入敌机文件-->\n\t\t<script src=\"Enemy.js\"></script>\n\t\t<!--载入我方飞机文件-->\n\t\t<script src=\"plane.js\"></script>\n\t\t<!--载入我方子弹文件-->\n\t\t<script src=\"Bullet.js\"></script>\n\t</head>\n\t<body>\n\t\t<canvas id=\"canvas\" width=\"320\" height=\"568\">\n\t\t\t您的破浏览器不支持，赶快换一个吧~\n\t\t</canvas>\n\t\t<script>\n\t\t\t//获取绘图环境\n\t\t\tvar canvas=document.getElementById('canvas');\n\t\t\tvar context=canvas.getContext('2d');\n\t\t\t\n\t\t\t\n\t\t\t//创建对象集合 （集合所有精灵）\n\t\t\tvar sprites=[];\n\t\t\t\t\t\n\t\t\t//创建我方飞机\n\t\t\tvar plane=createPlane();\n\t\t\t//讲我方飞机添加到精灵对象集合中\n\t\t\tsprites.push(plane);\n\t\t\t\t\t\n\t\t\t//添加飞机计时变量  用于记录飞机出现的时间\n\t\t\tvar smallEnemyTime=0;//记录最后一次小飞机出现的时间\n\t\t\tvar middleEnemyTime=0;//记录最后一次中飞机出现的时间\n\t\t\tvar bigEnemyTime=0;//记录最后一次大飞机出现的时间\n\t\t\tvar bulletTime=0;//记录最后一次子弹出现的时间\n\t\t\t\n\t\t\t//声明积分变量\n\t\t\tvar score=0;\n\t\t\t\n\t\t\t\n\t\t\t//添加鼠标事件 实现我方飞机的移动\n\t\t\t//鼠标按下事件\n\t\t\t//记录鼠标是否按下的变量\n\t\t\tvar mousedown=false;\n\t\t\tcanvas.onmousedown=function(e){\n\t\t\t\tmousedown=true;\n\t\t\t}\n\t\t\t\n\t\t\t//鼠标移动事件\n\t\t\tcanvas.onmousemove=function(e){\n\t\t\t\tif(mousedown==true){\n\t\t\t\t\t//事件统一\n\t\t\t\t\te=e||window.event;\n\t\t\t\t\t//获取当前鼠标相对于canvas的坐标\n\t\t\t\t\tvar ponit=windowToCanvas(this,e.clientX,e.clientY);\n\t\t\t\t\t//重新设置我方飞机的坐标点\n\t\t\t\t\t\n\t\t\t\t\tplane.left=ponit.x-plane.width/2;\n\t\t\t\t\tplane.top=ponit.y-plane.height/2;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t//松开鼠标事件\n\t\t\tcanvas.onmouseup=function(e){\n\t\t\t\tmousedown=false;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tfunction animate(time){\n\t\t\t\n\t\t\t\t//添加飞机操作\n\t\t\t\t//小飞机添加\n\t\t\t\tif(time-smallEnemyTime>1500){\n\t\t\t\t\t//一次性添加三个小飞机\n\t\t\t\t\tfor(var i=0;i<3;i++){\n\t\t\t\t\t\tsprites.push(createEnemy('smallEnemy'));\n\t\t\t\t\t}\n\t\t\t\t\t//更新最后一次记录时间\n\t\t\t\t\tsmallEnemyTime=time;\t\n\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//添加中飞机\n\t\t\t\tif(time-middleEnemyTime>3000){\n\t\t\t\t\t//添加中飞机\n\t\t\t\t\tsprites.push(createEnemy('middleEnemy'));\n\t\t\t\t\tsprites.push(createEnemy('middleEnemy'));\n\t\t\t\t\t//更新最后一次记录时间\n\t\t\t\t\tmiddleEnemyTime=time;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//添加大飞机\n\t\t\t\tif(time-bigEnemyTime>10000){\n\t\t\t\t\t//添加中飞机\n\t\t\t\t\tsprites.push(createEnemy('bigEnemy'));\n\t\t\t\t\t//更新最后一次记录时间\n\t\t\t\t\tbigEnemyTime=time;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//添加子弹\n\t\t\t\tif(time-bulletTime>150){\n\t\t\t\t\tsprites.push(createBullet(plane.left+plane.width/2,plane.top-15));\n\t\t\t\t\tbulletTime=time;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//更新当前背景的位置\n\t\t\t\tbgSprite.update(context,time);\n\t\t\t\t//绘制背景\n\t\t\t\tbgSprite.paint(context);\n\t\t\t\t\n\t\t\t\t//循环遍历所有精灵对象 更新行为\n\t\t\t\tfor(var i=0;i<sprites.length;i++){\n\t\t\t\t\tsprites[i].update(context,time);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t//判断是否有不可见的精灵对象\n\t\t\t\t\tif(sprites[i].visible==false){\n\t\t\t\t\t\t//在飞机对象删除之前把分数累加起来\n\t\t\t\t\t\tif(sprites[i].name!='bullet' && sprites[i].name!='plane' ){//判断是否是飞机\n\t\t\t\t\t\t\tscore=score+sprites[i].score;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t//删除不可见的对象\n\t\t\t\t\t\tsprites.splice(i,1);\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\t//循环遍历所有精灵对象 绘制对象\n\t\t\t\tfor(var i=0;i<sprites.length;i++){\n\t\t\t\t\t//判断子弹是否击中敌机\n\t\t\t\t\tif(sprites[i].name=='bullet'){\n\t\t\t\t\t\tfor(var j=0;j<sprites.length;j++){\n\t\t\t\t\t\t\t//挑选不是子弹和我方飞机的对象(三种敌机)\n\t\t\t\t\t\t\tif(sprites[j].name!='bullet' && sprites[j].name!='plane'){\n\t\t\t\t\t\t\t\t//判断子弹和每个敌机的位置\n\t\t\t\t\t\t\t\t//子弹的横坐标>飞机左侧位置\n\t\t\t\t\t\t\t\tif(sprites[i].left>sprites[j].left &&\n\t\t\t\t\t\t\t\t\t//子弹的横坐标<飞机右侧位置（右侧=左侧+宽度）\n\t\t\t\t\t\t\t\t\tsprites[i].left<sprites[j].left+sprites[j].width &&\n\t\t\t\t\t\t\t\t\t//子弹的纵坐标>顶部位置\n\t\t\t\t\t\t\t\t\tsprites[i].top>sprites[j].top &&\n\t\t\t\t\t\t\t\t\t//子弹纵坐标<底部位置\n\t\t\t\t\t\t\t\t\tsprites[i].top<sprites[j].top+sprites[j].height){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t//只有飞机气血>=1的情况下才减血\n\t\t\t\t\t\t\t\t\tif(sprites[j].hp>=1){\n\t\t\t\t\t\t\t\t\t\t//讲当前飞机的气血-1\n\t\t\t\t\t\t\t\t\t\tsprites[j].hp-=1;\n\t\t\t\t\t\t\t\t\t\t//讲当前子弹变为不可见状态\n\t\t\t\t\t\t\t\t\t\tsprites[i].visible=false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsprites[i].paint(context);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tcontext.font='26px 黑体 ';\n\t\t\t\t//检测当前页面对象个数\n\t\t\t\tcontext.fillText('对象个数:'+sprites.length,150,540);\n\t\t\t\t//分数统计\n\t\t\t\tcontext.fillText('总分:'+score,170,30);\n\t\t\t\t\n\t\t\t\t//帧率计算\n\t\t\t\tcontext.fillText('FPS：'+countFps(),10,30);\n\t\t\t\t//再次调用绘制动画方法\n\t\t\t\twindow.requestNextAnimationFrame(animate);\n\t\t\t}\n\t\t\t\n\t\t\twindow.requestNextAnimationFrame(animate);\n\t\t\t\n\t\t\t\n\t\t</script>\n\t</body>\n</html>","source":"res/game/plane/plane.html","raw":"<!doctype html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>我们一起打飞机</title>\n\t\t<style>\n\t\t\tcanvas{border:1px solid red;}\n\t\t\tbody{text-align:center}\n\t\t</style>\n\t\t<!--兼容性的动画播放方法-->\n\t\t<script src=\"requestNextAnimationFrame.js\"></script>\n\t\t<!--计算帧数的函数-->\n\t\t<script src=\"countFps.js\"></script>\n\t\t<!--坐标转换的函数-->\n\t\t<script src=\"windowTocanvas.js\"></script>\n\t\t<!--引入背景滚动对象-->\n\t\t<script src=\"bgSprite.js\"></script>\n\t\t<!--载入通用精灵对象-->\n\t\t<script src=\"Sprite.js\"></script>\n\t\t<!--载入敌机文件-->\n\t\t<script src=\"Enemy.js\"></script>\n\t\t<!--载入我方飞机文件-->\n\t\t<script src=\"plane.js\"></script>\n\t\t<!--载入我方子弹文件-->\n\t\t<script src=\"Bullet.js\"></script>\n\t</head>\n\t<body>\n\t\t<canvas id=\"canvas\" width=\"320\" height=\"568\">\n\t\t\t您的破浏览器不支持，赶快换一个吧~\n\t\t</canvas>\n\t\t<script>\n\t\t\t//获取绘图环境\n\t\t\tvar canvas=document.getElementById('canvas');\n\t\t\tvar context=canvas.getContext('2d');\n\t\t\t\n\t\t\t\n\t\t\t//创建对象集合 （集合所有精灵）\n\t\t\tvar sprites=[];\n\t\t\t\t\t\n\t\t\t//创建我方飞机\n\t\t\tvar plane=createPlane();\n\t\t\t//讲我方飞机添加到精灵对象集合中\n\t\t\tsprites.push(plane);\n\t\t\t\t\t\n\t\t\t//添加飞机计时变量  用于记录飞机出现的时间\n\t\t\tvar smallEnemyTime=0;//记录最后一次小飞机出现的时间\n\t\t\tvar middleEnemyTime=0;//记录最后一次中飞机出现的时间\n\t\t\tvar bigEnemyTime=0;//记录最后一次大飞机出现的时间\n\t\t\tvar bulletTime=0;//记录最后一次子弹出现的时间\n\t\t\t\n\t\t\t//声明积分变量\n\t\t\tvar score=0;\n\t\t\t\n\t\t\t\n\t\t\t//添加鼠标事件 实现我方飞机的移动\n\t\t\t//鼠标按下事件\n\t\t\t//记录鼠标是否按下的变量\n\t\t\tvar mousedown=false;\n\t\t\tcanvas.onmousedown=function(e){\n\t\t\t\tmousedown=true;\n\t\t\t}\n\t\t\t\n\t\t\t//鼠标移动事件\n\t\t\tcanvas.onmousemove=function(e){\n\t\t\t\tif(mousedown==true){\n\t\t\t\t\t//事件统一\n\t\t\t\t\te=e||window.event;\n\t\t\t\t\t//获取当前鼠标相对于canvas的坐标\n\t\t\t\t\tvar ponit=windowToCanvas(this,e.clientX,e.clientY);\n\t\t\t\t\t//重新设置我方飞机的坐标点\n\t\t\t\t\t\n\t\t\t\t\tplane.left=ponit.x-plane.width/2;\n\t\t\t\t\tplane.top=ponit.y-plane.height/2;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t//松开鼠标事件\n\t\t\tcanvas.onmouseup=function(e){\n\t\t\t\tmousedown=false;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tfunction animate(time){\n\t\t\t\n\t\t\t\t//添加飞机操作\n\t\t\t\t//小飞机添加\n\t\t\t\tif(time-smallEnemyTime>1500){\n\t\t\t\t\t//一次性添加三个小飞机\n\t\t\t\t\tfor(var i=0;i<3;i++){\n\t\t\t\t\t\tsprites.push(createEnemy('smallEnemy'));\n\t\t\t\t\t}\n\t\t\t\t\t//更新最后一次记录时间\n\t\t\t\t\tsmallEnemyTime=time;\t\n\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//添加中飞机\n\t\t\t\tif(time-middleEnemyTime>3000){\n\t\t\t\t\t//添加中飞机\n\t\t\t\t\tsprites.push(createEnemy('middleEnemy'));\n\t\t\t\t\tsprites.push(createEnemy('middleEnemy'));\n\t\t\t\t\t//更新最后一次记录时间\n\t\t\t\t\tmiddleEnemyTime=time;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//添加大飞机\n\t\t\t\tif(time-bigEnemyTime>10000){\n\t\t\t\t\t//添加中飞机\n\t\t\t\t\tsprites.push(createEnemy('bigEnemy'));\n\t\t\t\t\t//更新最后一次记录时间\n\t\t\t\t\tbigEnemyTime=time;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//添加子弹\n\t\t\t\tif(time-bulletTime>150){\n\t\t\t\t\tsprites.push(createBullet(plane.left+plane.width/2,plane.top-15));\n\t\t\t\t\tbulletTime=time;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//更新当前背景的位置\n\t\t\t\tbgSprite.update(context,time);\n\t\t\t\t//绘制背景\n\t\t\t\tbgSprite.paint(context);\n\t\t\t\t\n\t\t\t\t//循环遍历所有精灵对象 更新行为\n\t\t\t\tfor(var i=0;i<sprites.length;i++){\n\t\t\t\t\tsprites[i].update(context,time);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t//判断是否有不可见的精灵对象\n\t\t\t\t\tif(sprites[i].visible==false){\n\t\t\t\t\t\t//在飞机对象删除之前把分数累加起来\n\t\t\t\t\t\tif(sprites[i].name!='bullet' && sprites[i].name!='plane' ){//判断是否是飞机\n\t\t\t\t\t\t\tscore=score+sprites[i].score;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t//删除不可见的对象\n\t\t\t\t\t\tsprites.splice(i,1);\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\t//循环遍历所有精灵对象 绘制对象\n\t\t\t\tfor(var i=0;i<sprites.length;i++){\n\t\t\t\t\t//判断子弹是否击中敌机\n\t\t\t\t\tif(sprites[i].name=='bullet'){\n\t\t\t\t\t\tfor(var j=0;j<sprites.length;j++){\n\t\t\t\t\t\t\t//挑选不是子弹和我方飞机的对象(三种敌机)\n\t\t\t\t\t\t\tif(sprites[j].name!='bullet' && sprites[j].name!='plane'){\n\t\t\t\t\t\t\t\t//判断子弹和每个敌机的位置\n\t\t\t\t\t\t\t\t//子弹的横坐标>飞机左侧位置\n\t\t\t\t\t\t\t\tif(sprites[i].left>sprites[j].left &&\n\t\t\t\t\t\t\t\t\t//子弹的横坐标<飞机右侧位置（右侧=左侧+宽度）\n\t\t\t\t\t\t\t\t\tsprites[i].left<sprites[j].left+sprites[j].width &&\n\t\t\t\t\t\t\t\t\t//子弹的纵坐标>顶部位置\n\t\t\t\t\t\t\t\t\tsprites[i].top>sprites[j].top &&\n\t\t\t\t\t\t\t\t\t//子弹纵坐标<底部位置\n\t\t\t\t\t\t\t\t\tsprites[i].top<sprites[j].top+sprites[j].height){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t//只有飞机气血>=1的情况下才减血\n\t\t\t\t\t\t\t\t\tif(sprites[j].hp>=1){\n\t\t\t\t\t\t\t\t\t\t//讲当前飞机的气血-1\n\t\t\t\t\t\t\t\t\t\tsprites[j].hp-=1;\n\t\t\t\t\t\t\t\t\t\t//讲当前子弹变为不可见状态\n\t\t\t\t\t\t\t\t\t\tsprites[i].visible=false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsprites[i].paint(context);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tcontext.font='26px 黑体 ';\n\t\t\t\t//检测当前页面对象个数\n\t\t\t\tcontext.fillText('对象个数:'+sprites.length,150,540);\n\t\t\t\t//分数统计\n\t\t\t\tcontext.fillText('总分:'+score,170,30);\n\t\t\t\t\n\t\t\t\t//帧率计算\n\t\t\t\tcontext.fillText('FPS：'+countFps(),10,30);\n\t\t\t\t//再次调用绘制动画方法\n\t\t\t\twindow.requestNextAnimationFrame(animate);\n\t\t\t}\n\t\t\t\n\t\t\twindow.requestNextAnimationFrame(animate);\n\t\t\t\n\t\t\t\n\t\t</script>\n\t</body>\n</html>","date":"2016-04-27T09:12:50.710Z","updated":"2015-06-24T06:45:10.898Z","path":"res/game/plane/plane.html","title":"","comments":1,"layout":"page","_id":"cinu3eu66008bxoj0mcna905a","content":"<!doctype html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>我们一起打飞机</title>\n\t\t<style>\n\t\t\tcanvas{border:1px solid red;}\n\t\t\tbody{text-align:center}\n\t\t</style>\n\t\t<!--兼容性的动画播放方法-->\n\t\t<script src=\"requestNextAnimationFrame.js\"></script>\n\t\t<!--计算帧数的函数-->\n\t\t<script src=\"countFps.js\"></script>\n\t\t<!--坐标转换的函数-->\n\t\t<script src=\"windowTocanvas.js\"></script>\n\t\t<!--引入背景滚动对象-->\n\t\t<script src=\"bgSprite.js\"></script>\n\t\t<!--载入通用精灵对象-->\n\t\t<script src=\"Sprite.js\"></script>\n\t\t<!--载入敌机文件-->\n\t\t<script src=\"Enemy.js\"></script>\n\t\t<!--载入我方飞机文件-->\n\t\t<script src=\"plane.js\"></script>\n\t\t<!--载入我方子弹文件-->\n\t\t<script src=\"Bullet.js\"></script>\n\t</head>\n\t<body>\n\t\t<canvas id=\"canvas\" width=\"320\" height=\"568\">\n\t\t\t您的破浏览器不支持，赶快换一个吧~\n\t\t</canvas>\n\t\t<script>\n\t\t\t//获取绘图环境\n\t\t\tvar canvas=document.getElementById('canvas');\n\t\t\tvar context=canvas.getContext('2d');\n\t\t\t\n\t\t\t\n\t\t\t//创建对象集合 （集合所有精灵）\n\t\t\tvar sprites=[];\n\t\t\t\t\t\n\t\t\t//创建我方飞机\n\t\t\tvar plane=createPlane();\n\t\t\t//讲我方飞机添加到精灵对象集合中\n\t\t\tsprites.push(plane);\n\t\t\t\t\t\n\t\t\t//添加飞机计时变量  用于记录飞机出现的时间\n\t\t\tvar smallEnemyTime=0;//记录最后一次小飞机出现的时间\n\t\t\tvar middleEnemyTime=0;//记录最后一次中飞机出现的时间\n\t\t\tvar bigEnemyTime=0;//记录最后一次大飞机出现的时间\n\t\t\tvar bulletTime=0;//记录最后一次子弹出现的时间\n\t\t\t\n\t\t\t//声明积分变量\n\t\t\tvar score=0;\n\t\t\t\n\t\t\t\n\t\t\t//添加鼠标事件 实现我方飞机的移动\n\t\t\t//鼠标按下事件\n\t\t\t//记录鼠标是否按下的变量\n\t\t\tvar mousedown=false;\n\t\t\tcanvas.onmousedown=function(e){\n\t\t\t\tmousedown=true;\n\t\t\t}\n\t\t\t\n\t\t\t//鼠标移动事件\n\t\t\tcanvas.onmousemove=function(e){\n\t\t\t\tif(mousedown==true){\n\t\t\t\t\t//事件统一\n\t\t\t\t\te=e||window.event;\n\t\t\t\t\t//获取当前鼠标相对于canvas的坐标\n\t\t\t\t\tvar ponit=windowToCanvas(this,e.clientX,e.clientY);\n\t\t\t\t\t//重新设置我方飞机的坐标点\n\t\t\t\t\t\n\t\t\t\t\tplane.left=ponit.x-plane.width/2;\n\t\t\t\t\tplane.top=ponit.y-plane.height/2;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t//松开鼠标事件\n\t\t\tcanvas.onmouseup=function(e){\n\t\t\t\tmousedown=false;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tfunction animate(time){\n\t\t\t\n\t\t\t\t//添加飞机操作\n\t\t\t\t//小飞机添加\n\t\t\t\tif(time-smallEnemyTime>1500){\n\t\t\t\t\t//一次性添加三个小飞机\n\t\t\t\t\tfor(var i=0;i<3;i++){\n\t\t\t\t\t\tsprites.push(createEnemy('smallEnemy'));\n\t\t\t\t\t}\n\t\t\t\t\t//更新最后一次记录时间\n\t\t\t\t\tsmallEnemyTime=time;\t\n\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//添加中飞机\n\t\t\t\tif(time-middleEnemyTime>3000){\n\t\t\t\t\t//添加中飞机\n\t\t\t\t\tsprites.push(createEnemy('middleEnemy'));\n\t\t\t\t\tsprites.push(createEnemy('middleEnemy'));\n\t\t\t\t\t//更新最后一次记录时间\n\t\t\t\t\tmiddleEnemyTime=time;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//添加大飞机\n\t\t\t\tif(time-bigEnemyTime>10000){\n\t\t\t\t\t//添加中飞机\n\t\t\t\t\tsprites.push(createEnemy('bigEnemy'));\n\t\t\t\t\t//更新最后一次记录时间\n\t\t\t\t\tbigEnemyTime=time;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//添加子弹\n\t\t\t\tif(time-bulletTime>150){\n\t\t\t\t\tsprites.push(createBullet(plane.left+plane.width/2,plane.top-15));\n\t\t\t\t\tbulletTime=time;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//更新当前背景的位置\n\t\t\t\tbgSprite.update(context,time);\n\t\t\t\t//绘制背景\n\t\t\t\tbgSprite.paint(context);\n\t\t\t\t\n\t\t\t\t//循环遍历所有精灵对象 更新行为\n\t\t\t\tfor(var i=0;i<sprites.length;i++){\n\t\t\t\t\tsprites[i].update(context,time);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t//判断是否有不可见的精灵对象\n\t\t\t\t\tif(sprites[i].visible==false){\n\t\t\t\t\t\t//在飞机对象删除之前把分数累加起来\n\t\t\t\t\t\tif(sprites[i].name!='bullet' && sprites[i].name!='plane' ){//判断是否是飞机\n\t\t\t\t\t\t\tscore=score+sprites[i].score;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t//删除不可见的对象\n\t\t\t\t\t\tsprites.splice(i,1);\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\t//循环遍历所有精灵对象 绘制对象\n\t\t\t\tfor(var i=0;i<sprites.length;i++){\n\t\t\t\t\t//判断子弹是否击中敌机\n\t\t\t\t\tif(sprites[i].name=='bullet'){\n\t\t\t\t\t\tfor(var j=0;j<sprites.length;j++){\n\t\t\t\t\t\t\t//挑选不是子弹和我方飞机的对象(三种敌机)\n\t\t\t\t\t\t\tif(sprites[j].name!='bullet' && sprites[j].name!='plane'){\n\t\t\t\t\t\t\t\t//判断子弹和每个敌机的位置\n\t\t\t\t\t\t\t\t//子弹的横坐标>飞机左侧位置\n\t\t\t\t\t\t\t\tif(sprites[i].left>sprites[j].left &&\n\t\t\t\t\t\t\t\t\t//子弹的横坐标<飞机右侧位置（右侧=左侧+宽度）\n\t\t\t\t\t\t\t\t\tsprites[i].left<sprites[j].left+sprites[j].width &&\n\t\t\t\t\t\t\t\t\t//子弹的纵坐标>顶部位置\n\t\t\t\t\t\t\t\t\tsprites[i].top>sprites[j].top &&\n\t\t\t\t\t\t\t\t\t//子弹纵坐标<底部位置\n\t\t\t\t\t\t\t\t\tsprites[i].top<sprites[j].top+sprites[j].height){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t//只有飞机气血>=1的情况下才减血\n\t\t\t\t\t\t\t\t\tif(sprites[j].hp>=1){\n\t\t\t\t\t\t\t\t\t\t//讲当前飞机的气血-1\n\t\t\t\t\t\t\t\t\t\tsprites[j].hp-=1;\n\t\t\t\t\t\t\t\t\t\t//讲当前子弹变为不可见状态\n\t\t\t\t\t\t\t\t\t\tsprites[i].visible=false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsprites[i].paint(context);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tcontext.font='26px 黑体 ';\n\t\t\t\t//检测当前页面对象个数\n\t\t\t\tcontext.fillText('对象个数:'+sprites.length,150,540);\n\t\t\t\t//分数统计\n\t\t\t\tcontext.fillText('总分:'+score,170,30);\n\t\t\t\t\n\t\t\t\t//帧率计算\n\t\t\t\tcontext.fillText('FPS：'+countFps(),10,30);\n\t\t\t\t//再次调用绘制动画方法\n\t\t\t\twindow.requestNextAnimationFrame(animate);\n\t\t\t}\n\t\t\t\n\t\t\twindow.requestNextAnimationFrame(animate);\n\t\t\t\n\t\t\t\n\t\t</script>\n\t</body>\n</html>","excerpt":"","more":"<!doctype html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>我们一起打飞机</title>\n\t\t<style>\n\t\t\tcanvas{border:1px solid red;}\n\t\t\tbody{text-align:center}\n\t\t</style>\n\t\t<!--兼容性的动画播放方法-->\n\t\t<script src=\"requestNextAnimationFrame.js\"></script>\n\t\t<!--计算帧数的函数-->\n\t\t<script src=\"countFps.js\"></script>\n\t\t<!--坐标转换的函数-->\n\t\t<script src=\"windowTocanvas.js\"></script>\n\t\t<!--引入背景滚动对象-->\n\t\t<script src=\"bgSprite.js\"></script>\n\t\t<!--载入通用精灵对象-->\n\t\t<script src=\"Sprite.js\"></script>\n\t\t<!--载入敌机文件-->\n\t\t<script src=\"Enemy.js\"></script>\n\t\t<!--载入我方飞机文件-->\n\t\t<script src=\"plane.js\"></script>\n\t\t<!--载入我方子弹文件-->\n\t\t<script src=\"Bullet.js\"></script>\n\t</head>\n\t<body>\n\t\t<canvas id=\"canvas\" width=\"320\" height=\"568\">\n\t\t\t您的破浏览器不支持，赶快换一个吧~\n\t\t</canvas>\n\t\t<script>\n\t\t\t//获取绘图环境\n\t\t\tvar canvas=document.getElementById('canvas');\n\t\t\tvar context=canvas.getContext('2d');\n\t\t\t\n\t\t\t\n\t\t\t//创建对象集合 （集合所有精灵）\n\t\t\tvar sprites=[];\n\t\t\t\t\t\n\t\t\t//创建我方飞机\n\t\t\tvar plane=createPlane();\n\t\t\t//讲我方飞机添加到精灵对象集合中\n\t\t\tsprites.push(plane);\n\t\t\t\t\t\n\t\t\t//添加飞机计时变量  用于记录飞机出现的时间\n\t\t\tvar smallEnemyTime=0;//记录最后一次小飞机出现的时间\n\t\t\tvar middleEnemyTime=0;//记录最后一次中飞机出现的时间\n\t\t\tvar bigEnemyTime=0;//记录最后一次大飞机出现的时间\n\t\t\tvar bulletTime=0;//记录最后一次子弹出现的时间\n\t\t\t\n\t\t\t//声明积分变量\n\t\t\tvar score=0;\n\t\t\t\n\t\t\t\n\t\t\t//添加鼠标事件 实现我方飞机的移动\n\t\t\t//鼠标按下事件\n\t\t\t//记录鼠标是否按下的变量\n\t\t\tvar mousedown=false;\n\t\t\tcanvas.onmousedown=function(e){\n\t\t\t\tmousedown=true;\n\t\t\t}\n\t\t\t\n\t\t\t//鼠标移动事件\n\t\t\tcanvas.onmousemove=function(e){\n\t\t\t\tif(mousedown==true){\n\t\t\t\t\t//事件统一\n\t\t\t\t\te=e||window.event;\n\t\t\t\t\t//获取当前鼠标相对于canvas的坐标\n\t\t\t\t\tvar ponit=windowToCanvas(this,e.clientX,e.clientY);\n\t\t\t\t\t//重新设置我方飞机的坐标点\n\t\t\t\t\t\n\t\t\t\t\tplane.left=ponit.x-plane.width/2;\n\t\t\t\t\tplane.top=ponit.y-plane.height/2;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t//松开鼠标事件\n\t\t\tcanvas.onmouseup=function(e){\n\t\t\t\tmousedown=false;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tfunction animate(time){\n\t\t\t\n\t\t\t\t//添加飞机操作\n\t\t\t\t//小飞机添加\n\t\t\t\tif(time-smallEnemyTime>1500){\n\t\t\t\t\t//一次性添加三个小飞机\n\t\t\t\t\tfor(var i=0;i<3;i++){\n\t\t\t\t\t\tsprites.push(createEnemy('smallEnemy'));\n\t\t\t\t\t}\n\t\t\t\t\t//更新最后一次记录时间\n\t\t\t\t\tsmallEnemyTime=time;\t\n\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//添加中飞机\n\t\t\t\tif(time-middleEnemyTime>3000){\n\t\t\t\t\t//添加中飞机\n\t\t\t\t\tsprites.push(createEnemy('middleEnemy'));\n\t\t\t\t\tsprites.push(createEnemy('middleEnemy'));\n\t\t\t\t\t//更新最后一次记录时间\n\t\t\t\t\tmiddleEnemyTime=time;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//添加大飞机\n\t\t\t\tif(time-bigEnemyTime>10000){\n\t\t\t\t\t//添加中飞机\n\t\t\t\t\tsprites.push(createEnemy('bigEnemy'));\n\t\t\t\t\t//更新最后一次记录时间\n\t\t\t\t\tbigEnemyTime=time;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//添加子弹\n\t\t\t\tif(time-bulletTime>150){\n\t\t\t\t\tsprites.push(createBullet(plane.left+plane.width/2,plane.top-15));\n\t\t\t\t\tbulletTime=time;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//更新当前背景的位置\n\t\t\t\tbgSprite.update(context,time);\n\t\t\t\t//绘制背景\n\t\t\t\tbgSprite.paint(context);\n\t\t\t\t\n\t\t\t\t//循环遍历所有精灵对象 更新行为\n\t\t\t\tfor(var i=0;i<sprites.length;i++){\n\t\t\t\t\tsprites[i].update(context,time);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t//判断是否有不可见的精灵对象\n\t\t\t\t\tif(sprites[i].visible==false){\n\t\t\t\t\t\t//在飞机对象删除之前把分数累加起来\n\t\t\t\t\t\tif(sprites[i].name!='bullet' && sprites[i].name!='plane' ){//判断是否是飞机\n\t\t\t\t\t\t\tscore=score+sprites[i].score;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t//删除不可见的对象\n\t\t\t\t\t\tsprites.splice(i,1);\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\t//循环遍历所有精灵对象 绘制对象\n\t\t\t\tfor(var i=0;i<sprites.length;i++){\n\t\t\t\t\t//判断子弹是否击中敌机\n\t\t\t\t\tif(sprites[i].name=='bullet'){\n\t\t\t\t\t\tfor(var j=0;j<sprites.length;j++){\n\t\t\t\t\t\t\t//挑选不是子弹和我方飞机的对象(三种敌机)\n\t\t\t\t\t\t\tif(sprites[j].name!='bullet' && sprites[j].name!='plane'){\n\t\t\t\t\t\t\t\t//判断子弹和每个敌机的位置\n\t\t\t\t\t\t\t\t//子弹的横坐标>飞机左侧位置\n\t\t\t\t\t\t\t\tif(sprites[i].left>sprites[j].left &&\n\t\t\t\t\t\t\t\t\t//子弹的横坐标<飞机右侧位置（右侧=左侧+宽度）\n\t\t\t\t\t\t\t\t\tsprites[i].left<sprites[j].left+sprites[j].width &&\n\t\t\t\t\t\t\t\t\t//子弹的纵坐标>顶部位置\n\t\t\t\t\t\t\t\t\tsprites[i].top>sprites[j].top &&\n\t\t\t\t\t\t\t\t\t//子弹纵坐标<底部位置\n\t\t\t\t\t\t\t\t\tsprites[i].top<sprites[j].top+sprites[j].height){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t//只有飞机气血>=1的情况下才减血\n\t\t\t\t\t\t\t\t\tif(sprites[j].hp>=1){\n\t\t\t\t\t\t\t\t\t\t//讲当前飞机的气血-1\n\t\t\t\t\t\t\t\t\t\tsprites[j].hp-=1;\n\t\t\t\t\t\t\t\t\t\t//讲当前子弹变为不可见状态\n\t\t\t\t\t\t\t\t\t\tsprites[i].visible=false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsprites[i].paint(context);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tcontext.font='26px 黑体 ';\n\t\t\t\t//检测当前页面对象个数\n\t\t\t\tcontext.fillText('对象个数:'+sprites.length,150,540);\n\t\t\t\t//分数统计\n\t\t\t\tcontext.fillText('总分:'+score,170,30);\n\t\t\t\t\n\t\t\t\t//帧率计算\n\t\t\t\tcontext.fillText('FPS：'+countFps(),10,30);\n\t\t\t\t//再次调用绘制动画方法\n\t\t\t\twindow.requestNextAnimationFrame(animate);\n\t\t\t}\n\t\t\t\n\t\t\twindow.requestNextAnimationFrame(animate);\n\t\t\t\n\t\t\t\n\t\t</script>\n\t</body>\n</html>"},{"_content":"/**\n\t声明背景精灵对象\n\n*/\n\n//声明构造方法(只存对象的成员属性)\n//option 传入对象相关成员初始值\n//{x,y,w,h,Mx,My,url} JSON对象\nvar BgSprite=function(option){\n\tthis.left=option.x || 0;//背景的横向坐标\n\tthis.top=option.y || 0;//背景的纵向坐标\n\tthis.width=option.w || 0;//背景图片的宽度\n\tthis.height=option.h || 0;//背景图片的高度\n\tthis.moveX=option.Mx || 0;//背景图片的水平移动速度  像素/秒\n\tthis.moveY=option.My || 0;//背景图片的垂直移动的速度  像素/秒\n\t\n\tthis.img=new Image();//声明image对象\n\tthis.img.src=option.url;//为当前对象制定图片资源\n\t\n\t//记录上一帧的执行结束时间点\n\tthis.lastBgTime=0;\n\n}\nBgSprite.prototype={\n\t//更新对象状态  比如位置移动\n\tupdate:function(context,time){//time由 动画播放方法 requestNextAnimationFrame提供\n\t\t//判断当前时间是否==0\n\t\tif(this.lastBgTime!=0){\n\t\t\t//如果lastBgTime!=0 不是第一帧\n\t\t\tvar frameTime=time-this.lastBgTime;\n\t\t\t\n\t\t\t//更新纵坐标 this.top    当前高度=当前的高度+每秒移动的速度/1000*每一帧的时间(毫秒)\n\t\t\tthis.top=this.top+(this.moveY/1000)*frameTime;\n\t\t\t//判断当前第一张背景图片是否已经到达canvas最下端不显示\n\t\t\tif(this.top>=context.canvas.height){\n\t\t\t\tthis.top=0;\n\t\t\t}\n\t\t}\n\t\t//将时间记录到最后执行时间属性中\n\t\tthis.lastBgTime=time;\t\n\t\t\n\t},\n\t//将图片绘制到canvas中\n\tpaint:function(context){\n\t\t//绘制第一张背景图\n\t\t//context.drawImage(图片对象,来源图x,来源图y,宽度,高度,画布x,画布,y,宽度,高度);\n\t\tcontext.drawImage(this.img,0,0,this.width,this.height,this.left,this.top,this.width,this.height);\n\t\t//绘制第二张背景图\n\t\tcontext.drawImage(this.img,0,0,this.width,this.height,this.left,this.top-this.height,this.width,this.height);\n\t}\n\n}\n\n\n//实例化一个对象\n\nvar bgSprite=new BgSprite({w:320,h:568,My:30,url:'gameArts.png'});\n\n\n\n","source":"res/game/plane/bgSprite.js","raw":"/**\n\t声明背景精灵对象\n\n*/\n\n//声明构造方法(只存对象的成员属性)\n//option 传入对象相关成员初始值\n//{x,y,w,h,Mx,My,url} JSON对象\nvar BgSprite=function(option){\n\tthis.left=option.x || 0;//背景的横向坐标\n\tthis.top=option.y || 0;//背景的纵向坐标\n\tthis.width=option.w || 0;//背景图片的宽度\n\tthis.height=option.h || 0;//背景图片的高度\n\tthis.moveX=option.Mx || 0;//背景图片的水平移动速度  像素/秒\n\tthis.moveY=option.My || 0;//背景图片的垂直移动的速度  像素/秒\n\t\n\tthis.img=new Image();//声明image对象\n\tthis.img.src=option.url;//为当前对象制定图片资源\n\t\n\t//记录上一帧的执行结束时间点\n\tthis.lastBgTime=0;\n\n}\nBgSprite.prototype={\n\t//更新对象状态  比如位置移动\n\tupdate:function(context,time){//time由 动画播放方法 requestNextAnimationFrame提供\n\t\t//判断当前时间是否==0\n\t\tif(this.lastBgTime!=0){\n\t\t\t//如果lastBgTime!=0 不是第一帧\n\t\t\tvar frameTime=time-this.lastBgTime;\n\t\t\t\n\t\t\t//更新纵坐标 this.top    当前高度=当前的高度+每秒移动的速度/1000*每一帧的时间(毫秒)\n\t\t\tthis.top=this.top+(this.moveY/1000)*frameTime;\n\t\t\t//判断当前第一张背景图片是否已经到达canvas最下端不显示\n\t\t\tif(this.top>=context.canvas.height){\n\t\t\t\tthis.top=0;\n\t\t\t}\n\t\t}\n\t\t//将时间记录到最后执行时间属性中\n\t\tthis.lastBgTime=time;\t\n\t\t\n\t},\n\t//将图片绘制到canvas中\n\tpaint:function(context){\n\t\t//绘制第一张背景图\n\t\t//context.drawImage(图片对象,来源图x,来源图y,宽度,高度,画布x,画布,y,宽度,高度);\n\t\tcontext.drawImage(this.img,0,0,this.width,this.height,this.left,this.top,this.width,this.height);\n\t\t//绘制第二张背景图\n\t\tcontext.drawImage(this.img,0,0,this.width,this.height,this.left,this.top-this.height,this.width,this.height);\n\t}\n\n}\n\n\n//实例化一个对象\n\nvar bgSprite=new BgSprite({w:320,h:568,My:30,url:'gameArts.png'});\n\n\n\n","date":"2016-04-27T09:12:50.704Z","updated":"2015-06-24T06:45:10.884Z","path":"res/game/plane/bgSprite.js","layout":"false","title":"","comments":1,"_id":"cinu3eu67008cxoj0lh883pn2","content":"/**\n\t声明背景精灵对象\n\n*/\n\n//声明构造方法(只存对象的成员属性)\n//option 传入对象相关成员初始值\n//{x,y,w,h,Mx,My,url} JSON对象\nvar BgSprite=function(option){\n\tthis.left=option.x || 0;//背景的横向坐标\n\tthis.top=option.y || 0;//背景的纵向坐标\n\tthis.width=option.w || 0;//背景图片的宽度\n\tthis.height=option.h || 0;//背景图片的高度\n\tthis.moveX=option.Mx || 0;//背景图片的水平移动速度  像素/秒\n\tthis.moveY=option.My || 0;//背景图片的垂直移动的速度  像素/秒\n\t\n\tthis.img=new Image();//声明image对象\n\tthis.img.src=option.url;//为当前对象制定图片资源\n\t\n\t//记录上一帧的执行结束时间点\n\tthis.lastBgTime=0;\n\n}\nBgSprite.prototype={\n\t//更新对象状态  比如位置移动\n\tupdate:function(context,time){//time由 动画播放方法 requestNextAnimationFrame提供\n\t\t//判断当前时间是否==0\n\t\tif(this.lastBgTime!=0){\n\t\t\t//如果lastBgTime!=0 不是第一帧\n\t\t\tvar frameTime=time-this.lastBgTime;\n\t\t\t\n\t\t\t//更新纵坐标 this.top    当前高度=当前的高度+每秒移动的速度/1000*每一帧的时间(毫秒)\n\t\t\tthis.top=this.top+(this.moveY/1000)*frameTime;\n\t\t\t//判断当前第一张背景图片是否已经到达canvas最下端不显示\n\t\t\tif(this.top>=context.canvas.height){\n\t\t\t\tthis.top=0;\n\t\t\t}\n\t\t}\n\t\t//将时间记录到最后执行时间属性中\n\t\tthis.lastBgTime=time;\t\n\t\t\n\t},\n\t//将图片绘制到canvas中\n\tpaint:function(context){\n\t\t//绘制第一张背景图\n\t\t//context.drawImage(图片对象,来源图x,来源图y,宽度,高度,画布x,画布,y,宽度,高度);\n\t\tcontext.drawImage(this.img,0,0,this.width,this.height,this.left,this.top,this.width,this.height);\n\t\t//绘制第二张背景图\n\t\tcontext.drawImage(this.img,0,0,this.width,this.height,this.left,this.top-this.height,this.width,this.height);\n\t}\n\n}\n\n\n//实例化一个对象\n\nvar bgSprite=new BgSprite({w:320,h:568,My:30,url:'gameArts.png'});\n\n\n\n","excerpt":"","more":"/**\n\t声明背景精灵对象\n\n*/\n\n//声明构造方法(只存对象的成员属性)\n//option 传入对象相关成员初始值\n//{x,y,w,h,Mx,My,url} JSON对象\nvar BgSprite=function(option){\n\tthis.left=option.x || 0;//背景的横向坐标\n\tthis.top=option.y || 0;//背景的纵向坐标\n\tthis.width=option.w || 0;//背景图片的宽度\n\tthis.height=option.h || 0;//背景图片的高度\n\tthis.moveX=option.Mx || 0;//背景图片的水平移动速度  像素/秒\n\tthis.moveY=option.My || 0;//背景图片的垂直移动的速度  像素/秒\n\t\n\tthis.img=new Image();//声明image对象\n\tthis.img.src=option.url;//为当前对象制定图片资源\n\t\n\t//记录上一帧的执行结束时间点\n\tthis.lastBgTime=0;\n\n}\nBgSprite.prototype={\n\t//更新对象状态  比如位置移动\n\tupdate:function(context,time){//time由 动画播放方法 requestNextAnimationFrame提供\n\t\t//判断当前时间是否==0\n\t\tif(this.lastBgTime!=0){\n\t\t\t//如果lastBgTime!=0 不是第一帧\n\t\t\tvar frameTime=time-this.lastBgTime;\n\t\t\t\n\t\t\t//更新纵坐标 this.top    当前高度=当前的高度+每秒移动的速度/1000*每一帧的时间(毫秒)\n\t\t\tthis.top=this.top+(this.moveY/1000)*frameTime;\n\t\t\t//判断当前第一张背景图片是否已经到达canvas最下端不显示\n\t\t\tif(this.top>=context.canvas.height){\n\t\t\t\tthis.top=0;\n\t\t\t}\n\t\t}\n\t\t//将时间记录到最后执行时间属性中\n\t\tthis.lastBgTime=time;\t\n\t\t\n\t},\n\t//将图片绘制到canvas中\n\tpaint:function(context){\n\t\t//绘制第一张背景图\n\t\t//context.drawImage(图片对象,来源图x,来源图y,宽度,高度,画布x,画布,y,宽度,高度);\n\t\tcontext.drawImage(this.img,0,0,this.width,this.height,this.left,this.top,this.width,this.height);\n\t\t//绘制第二张背景图\n\t\tcontext.drawImage(this.img,0,0,this.width,this.height,this.left,this.top-this.height,this.width,this.height);\n\t}\n\n}\n\n\n//实例化一个对象\n\nvar bgSprite=new BgSprite({w:320,h:568,My:30,url:'gameArts.png'});\n\n\n\n"},{"_content":"/**\n\t我方飞机\n*/\n\n\t\t\t//构造方法\n\t\t\tvar PlaneBomb=function(){\n\t\t\t\t//记录最后一次时间\n\t\t\t\tthis.lastPlaneBombTime=0;\n\t\t\t\t//每一个画面的时间\n\t\t\t\tthis.cycle=300;\n\t\t\t}\n\t\t\n\t\t\t//对象圆形\n\t\t\tPlaneBomb.prototype={\n\t\t\t\texecute:function(sprite,context,time){\n\t\t\t\t\t//轮播每一个图片\n\t\t\t\t\tif(time-this.lastPlaneBombTime>this.cycle && sprite.hp==0){\n\t\t\t\t\t\t//更新当前绘图使用的图片\n\t\t\t\t\t\t\n\t\t\t\t\t\tsprite.painter.advance();\n\t\t\t\t\t\t//重新记录最后一次执行时间\n\t\t\t\t\t\tthis.lastPlaneBombTime=time;\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\t\n\t\t\t\t//创建我方飞机\n\t\t\t\tfunction createPlane(){\n\t\t\t\t\t//我方飞机的图像信息\n\t\t\t\t\tvar cells=[\n\t\t\t\t\t\t{x:432,y:0,w:66,h:82},\n\t\t\t\t\t\t{x:432,y:82,w:66,h:84},\n\t\t\t\t\t\t{x:432,y:164,w:66,h:84},\n\t\t\t\t\t\t{x:432,y:246,w:66,h:84},\n\t\t\t\t\t\t{x:432,y:328,w:66,h:84}\n\t\t\t\t\t];\n\t\t\t\t\t//我方飞机的配置\n\t\t\t\t\tvar option={hp:1,w:66,h:84};\n\t\t\t\t\t//创建我方飞机\n\t\t\t\t\tvar plane=new Sprite('plane',new SpritePainter('gameArts.png',cells),[new PlaneBomb()]);\n\t\t\t\t\t//初始化设置\n\t\t\t\t\tplane.hp=option.hp;\n\t\t\t\t\tplane.left=127;\n\t\t\t\t\tplane.top=450;\n\t\t\t\t\tplane.width=option.w;\n\t\t\t\t\tplane.height=option.h;\n\t\t\t\t\t\n\t\t\t\t\treturn plane;\n\t\t\t\t}\n\t\t","source":"res/game/plane/plane.js","raw":"/**\n\t我方飞机\n*/\n\n\t\t\t//构造方法\n\t\t\tvar PlaneBomb=function(){\n\t\t\t\t//记录最后一次时间\n\t\t\t\tthis.lastPlaneBombTime=0;\n\t\t\t\t//每一个画面的时间\n\t\t\t\tthis.cycle=300;\n\t\t\t}\n\t\t\n\t\t\t//对象圆形\n\t\t\tPlaneBomb.prototype={\n\t\t\t\texecute:function(sprite,context,time){\n\t\t\t\t\t//轮播每一个图片\n\t\t\t\t\tif(time-this.lastPlaneBombTime>this.cycle && sprite.hp==0){\n\t\t\t\t\t\t//更新当前绘图使用的图片\n\t\t\t\t\t\t\n\t\t\t\t\t\tsprite.painter.advance();\n\t\t\t\t\t\t//重新记录最后一次执行时间\n\t\t\t\t\t\tthis.lastPlaneBombTime=time;\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\t\n\t\t\t\t//创建我方飞机\n\t\t\t\tfunction createPlane(){\n\t\t\t\t\t//我方飞机的图像信息\n\t\t\t\t\tvar cells=[\n\t\t\t\t\t\t{x:432,y:0,w:66,h:82},\n\t\t\t\t\t\t{x:432,y:82,w:66,h:84},\n\t\t\t\t\t\t{x:432,y:164,w:66,h:84},\n\t\t\t\t\t\t{x:432,y:246,w:66,h:84},\n\t\t\t\t\t\t{x:432,y:328,w:66,h:84}\n\t\t\t\t\t];\n\t\t\t\t\t//我方飞机的配置\n\t\t\t\t\tvar option={hp:1,w:66,h:84};\n\t\t\t\t\t//创建我方飞机\n\t\t\t\t\tvar plane=new Sprite('plane',new SpritePainter('gameArts.png',cells),[new PlaneBomb()]);\n\t\t\t\t\t//初始化设置\n\t\t\t\t\tplane.hp=option.hp;\n\t\t\t\t\tplane.left=127;\n\t\t\t\t\tplane.top=450;\n\t\t\t\t\tplane.width=option.w;\n\t\t\t\t\tplane.height=option.h;\n\t\t\t\t\t\n\t\t\t\t\treturn plane;\n\t\t\t\t}\n\t\t","date":"2016-04-27T09:12:50.711Z","updated":"2015-06-24T06:45:10.899Z","path":"res/game/plane/plane.js","layout":"false","title":"","comments":1,"_id":"cinu3eu67008dxoj04f21sas6","content":"/**\n\t我方飞机\n*/\n\n\t\t\t//构造方法\n\t\t\tvar PlaneBomb=function(){\n\t\t\t\t//记录最后一次时间\n\t\t\t\tthis.lastPlaneBombTime=0;\n\t\t\t\t//每一个画面的时间\n\t\t\t\tthis.cycle=300;\n\t\t\t}\n\t\t\n\t\t\t//对象圆形\n\t\t\tPlaneBomb.prototype={\n\t\t\t\texecute:function(sprite,context,time){\n\t\t\t\t\t//轮播每一个图片\n\t\t\t\t\tif(time-this.lastPlaneBombTime>this.cycle && sprite.hp==0){\n\t\t\t\t\t\t//更新当前绘图使用的图片\n\t\t\t\t\t\t\n\t\t\t\t\t\tsprite.painter.advance();\n\t\t\t\t\t\t//重新记录最后一次执行时间\n\t\t\t\t\t\tthis.lastPlaneBombTime=time;\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\t\n\t\t\t\t//创建我方飞机\n\t\t\t\tfunction createPlane(){\n\t\t\t\t\t//我方飞机的图像信息\n\t\t\t\t\tvar cells=[\n\t\t\t\t\t\t{x:432,y:0,w:66,h:82},\n\t\t\t\t\t\t{x:432,y:82,w:66,h:84},\n\t\t\t\t\t\t{x:432,y:164,w:66,h:84},\n\t\t\t\t\t\t{x:432,y:246,w:66,h:84},\n\t\t\t\t\t\t{x:432,y:328,w:66,h:84}\n\t\t\t\t\t];\n\t\t\t\t\t//我方飞机的配置\n\t\t\t\t\tvar option={hp:1,w:66,h:84};\n\t\t\t\t\t//创建我方飞机\n\t\t\t\t\tvar plane=new Sprite('plane',new SpritePainter('gameArts.png',cells),[new PlaneBomb()]);\n\t\t\t\t\t//初始化设置\n\t\t\t\t\tplane.hp=option.hp;\n\t\t\t\t\tplane.left=127;\n\t\t\t\t\tplane.top=450;\n\t\t\t\t\tplane.width=option.w;\n\t\t\t\t\tplane.height=option.h;\n\t\t\t\t\t\n\t\t\t\t\treturn plane;\n\t\t\t\t}\n\t\t","excerpt":"","more":"/**\n\t我方飞机\n*/\n\n\t\t\t//构造方法\n\t\t\tvar PlaneBomb=function(){\n\t\t\t\t//记录最后一次时间\n\t\t\t\tthis.lastPlaneBombTime=0;\n\t\t\t\t//每一个画面的时间\n\t\t\t\tthis.cycle=300;\n\t\t\t}\n\t\t\n\t\t\t//对象圆形\n\t\t\tPlaneBomb.prototype={\n\t\t\t\texecute:function(sprite,context,time){\n\t\t\t\t\t//轮播每一个图片\n\t\t\t\t\tif(time-this.lastPlaneBombTime>this.cycle && sprite.hp==0){\n\t\t\t\t\t\t//更新当前绘图使用的图片\n\t\t\t\t\t\t\n\t\t\t\t\t\tsprite.painter.advance();\n\t\t\t\t\t\t//重新记录最后一次执行时间\n\t\t\t\t\t\tthis.lastPlaneBombTime=time;\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\t\n\t\t\t\t//创建我方飞机\n\t\t\t\tfunction createPlane(){\n\t\t\t\t\t//我方飞机的图像信息\n\t\t\t\t\tvar cells=[\n\t\t\t\t\t\t{x:432,y:0,w:66,h:82},\n\t\t\t\t\t\t{x:432,y:82,w:66,h:84},\n\t\t\t\t\t\t{x:432,y:164,w:66,h:84},\n\t\t\t\t\t\t{x:432,y:246,w:66,h:84},\n\t\t\t\t\t\t{x:432,y:328,w:66,h:84}\n\t\t\t\t\t];\n\t\t\t\t\t//我方飞机的配置\n\t\t\t\t\tvar option={hp:1,w:66,h:84};\n\t\t\t\t\t//创建我方飞机\n\t\t\t\t\tvar plane=new Sprite('plane',new SpritePainter('gameArts.png',cells),[new PlaneBomb()]);\n\t\t\t\t\t//初始化设置\n\t\t\t\t\tplane.hp=option.hp;\n\t\t\t\t\tplane.left=127;\n\t\t\t\t\tplane.top=450;\n\t\t\t\t\tplane.width=option.w;\n\t\t\t\t\tplane.height=option.h;\n\t\t\t\t\t\n\t\t\t\t\treturn plane;\n\t\t\t\t}\n\t\t"},{"_content":"// Reprinted from Core HTML5 Canvas\n\nwindow.requestNextAnimationFrame =\n   (function () {\n      var originalWebkitRequestAnimationFrame = undefined,\n          wrapper = undefined,\n          callback = undefined,\n          geckoVersion = 0,\n          userAgent = navigator.userAgent,\n          index = 0,\n          self = this;\n\n      // Workaround for Chrome 10 bug where Chrome\n      // does not pass the time to the animation function\n      \n      if (window.webkitRequestAnimationFrame) {\n         // Define the wrapper\n\n         wrapper = function (time) {\n           if (time === undefined) {\n              time = +new Date();\n           }\n           self.callback(time);\n         };\n\n         // Make the switch\n          \n         originalWebkitRequestAnimationFrame = window.webkitRequestAnimationFrame;    \n\n         window.webkitRequestAnimationFrame = function (callback, element) {\n            self.callback = callback;\n\n            // Browser calls the wrapper and wrapper calls the callback\n            \n            originalWebkitRequestAnimationFrame(wrapper, element);\n         }\n      }\n\n      // Workaround for Gecko 2.0, which has a bug in\n      // mozRequestAnimationFrame() that restricts animations\n      // to 30-40 fps.\n\n      if (window.mozRequestAnimationFrame) {\n         // Check the Gecko version. Gecko is used by browsers\n         // other than Firefox. Gecko 2.0 corresponds to\n         // Firefox 4.0.\n         \n         index = userAgent.indexOf('rv:');\n\n         if (userAgent.indexOf('Gecko') != -1) {\n            geckoVersion = userAgent.substr(index + 3, 3);\n\n            if (geckoVersion === '2.0') {\n               // Forces the return statement to fall through\n               // to the setTimeout() function.\n\n               window.mozRequestAnimationFrame = undefined;\n            }\n         }\n      }\n      \n      return window.requestAnimationFrame   ||\n         window.webkitRequestAnimationFrame ||\n         window.mozRequestAnimationFrame    ||\n         window.oRequestAnimationFrame      ||\n         window.msRequestAnimationFrame     ||\n\n         function (callback, element) {\n            var start,\n                finish;\n\n\n            window.setTimeout( function () {\n               start = +new Date();\n               callback(start);\n               finish = +new Date();\n\n               self.timeout = 1000 / 60 - (finish - start);\n\n            }, self.timeout);\n         };\n      }\n   )\n();\n","source":"res/game/plane/requestNextAnimationFrame.js","raw":"// Reprinted from Core HTML5 Canvas\n\nwindow.requestNextAnimationFrame =\n   (function () {\n      var originalWebkitRequestAnimationFrame = undefined,\n          wrapper = undefined,\n          callback = undefined,\n          geckoVersion = 0,\n          userAgent = navigator.userAgent,\n          index = 0,\n          self = this;\n\n      // Workaround for Chrome 10 bug where Chrome\n      // does not pass the time to the animation function\n      \n      if (window.webkitRequestAnimationFrame) {\n         // Define the wrapper\n\n         wrapper = function (time) {\n           if (time === undefined) {\n              time = +new Date();\n           }\n           self.callback(time);\n         };\n\n         // Make the switch\n          \n         originalWebkitRequestAnimationFrame = window.webkitRequestAnimationFrame;    \n\n         window.webkitRequestAnimationFrame = function (callback, element) {\n            self.callback = callback;\n\n            // Browser calls the wrapper and wrapper calls the callback\n            \n            originalWebkitRequestAnimationFrame(wrapper, element);\n         }\n      }\n\n      // Workaround for Gecko 2.0, which has a bug in\n      // mozRequestAnimationFrame() that restricts animations\n      // to 30-40 fps.\n\n      if (window.mozRequestAnimationFrame) {\n         // Check the Gecko version. Gecko is used by browsers\n         // other than Firefox. Gecko 2.0 corresponds to\n         // Firefox 4.0.\n         \n         index = userAgent.indexOf('rv:');\n\n         if (userAgent.indexOf('Gecko') != -1) {\n            geckoVersion = userAgent.substr(index + 3, 3);\n\n            if (geckoVersion === '2.0') {\n               // Forces the return statement to fall through\n               // to the setTimeout() function.\n\n               window.mozRequestAnimationFrame = undefined;\n            }\n         }\n      }\n      \n      return window.requestAnimationFrame   ||\n         window.webkitRequestAnimationFrame ||\n         window.mozRequestAnimationFrame    ||\n         window.oRequestAnimationFrame      ||\n         window.msRequestAnimationFrame     ||\n\n         function (callback, element) {\n            var start,\n                finish;\n\n\n            window.setTimeout( function () {\n               start = +new Date();\n               callback(start);\n               finish = +new Date();\n\n               self.timeout = 1000 / 60 - (finish - start);\n\n            }, self.timeout);\n         };\n      }\n   )\n();\n","date":"2016-04-27T09:12:50.712Z","updated":"2015-06-24T06:45:10.903Z","path":"res/game/plane/requestNextAnimationFrame.js","layout":"false","title":"","comments":1,"_id":"cinu3eu68008exoj06l6uygi5","content":"// Reprinted from Core HTML5 Canvas\n\nwindow.requestNextAnimationFrame =\n   (function () {\n      var originalWebkitRequestAnimationFrame = undefined,\n          wrapper = undefined,\n          callback = undefined,\n          geckoVersion = 0,\n          userAgent = navigator.userAgent,\n          index = 0,\n          self = this;\n\n      // Workaround for Chrome 10 bug where Chrome\n      // does not pass the time to the animation function\n      \n      if (window.webkitRequestAnimationFrame) {\n         // Define the wrapper\n\n         wrapper = function (time) {\n           if (time === undefined) {\n              time = +new Date();\n           }\n           self.callback(time);\n         };\n\n         // Make the switch\n          \n         originalWebkitRequestAnimationFrame = window.webkitRequestAnimationFrame;    \n\n         window.webkitRequestAnimationFrame = function (callback, element) {\n            self.callback = callback;\n\n            // Browser calls the wrapper and wrapper calls the callback\n            \n            originalWebkitRequestAnimationFrame(wrapper, element);\n         }\n      }\n\n      // Workaround for Gecko 2.0, which has a bug in\n      // mozRequestAnimationFrame() that restricts animations\n      // to 30-40 fps.\n\n      if (window.mozRequestAnimationFrame) {\n         // Check the Gecko version. Gecko is used by browsers\n         // other than Firefox. Gecko 2.0 corresponds to\n         // Firefox 4.0.\n         \n         index = userAgent.indexOf('rv:');\n\n         if (userAgent.indexOf('Gecko') != -1) {\n            geckoVersion = userAgent.substr(index + 3, 3);\n\n            if (geckoVersion === '2.0') {\n               // Forces the return statement to fall through\n               // to the setTimeout() function.\n\n               window.mozRequestAnimationFrame = undefined;\n            }\n         }\n      }\n      \n      return window.requestAnimationFrame   ||\n         window.webkitRequestAnimationFrame ||\n         window.mozRequestAnimationFrame    ||\n         window.oRequestAnimationFrame      ||\n         window.msRequestAnimationFrame     ||\n\n         function (callback, element) {\n            var start,\n                finish;\n\n\n            window.setTimeout( function () {\n               start = +new Date();\n               callback(start);\n               finish = +new Date();\n\n               self.timeout = 1000 / 60 - (finish - start);\n\n            }, self.timeout);\n         };\n      }\n   )\n();\n","excerpt":"","more":"// Reprinted from Core HTML5 Canvas\n\nwindow.requestNextAnimationFrame =\n   (function () {\n      var originalWebkitRequestAnimationFrame = undefined,\n          wrapper = undefined,\n          callback = undefined,\n          geckoVersion = 0,\n          userAgent = navigator.userAgent,\n          index = 0,\n          self = this;\n\n      // Workaround for Chrome 10 bug where Chrome\n      // does not pass the time to the animation function\n      \n      if (window.webkitRequestAnimationFrame) {\n         // Define the wrapper\n\n         wrapper = function (time) {\n           if (time === undefined) {\n              time = +new Date();\n           }\n           self.callback(time);\n         };\n\n         // Make the switch\n          \n         originalWebkitRequestAnimationFrame = window.webkitRequestAnimationFrame;    \n\n         window.webkitRequestAnimationFrame = function (callback, element) {\n            self.callback = callback;\n\n            // Browser calls the wrapper and wrapper calls the callback\n            \n            originalWebkitRequestAnimationFrame(wrapper, element);\n         }\n      }\n\n      // Workaround for Gecko 2.0, which has a bug in\n      // mozRequestAnimationFrame() that restricts animations\n      // to 30-40 fps.\n\n      if (window.mozRequestAnimationFrame) {\n         // Check the Gecko version. Gecko is used by browsers\n         // other than Firefox. Gecko 2.0 corresponds to\n         // Firefox 4.0.\n         \n         index = userAgent.indexOf('rv:');\n\n         if (userAgent.indexOf('Gecko') != -1) {\n            geckoVersion = userAgent.substr(index + 3, 3);\n\n            if (geckoVersion === '2.0') {\n               // Forces the return statement to fall through\n               // to the setTimeout() function.\n\n               window.mozRequestAnimationFrame = undefined;\n            }\n         }\n      }\n      \n      return window.requestAnimationFrame   ||\n         window.webkitRequestAnimationFrame ||\n         window.mozRequestAnimationFrame    ||\n         window.oRequestAnimationFrame      ||\n         window.msRequestAnimationFrame     ||\n\n         function (callback, element) {\n            var start,\n                finish;\n\n\n            window.setTimeout( function () {\n               start = +new Date();\n               callback(start);\n               finish = +new Date();\n\n               self.timeout = 1000 / 60 - (finish - start);\n\n            }, self.timeout);\n         };\n      }\n   )\n();\n"},{"_content":"\t//坐标转换方法\n\t\t\tfunction windowToCanvas(element,x,y){\n\t\t\t\t//元素独有的获取坐标的方法\n\t\t\t\tvar box=element.getBoundingClientRect();\n\t\t\t\tvar cx=x-box.left;\n\t\t\t\tvar cy=y-box.top;\n\t\t\t\treturn {x:cx,y:cy}\n\t\t\t\n\t\t\t}","source":"res/game/plane/windowTocanvas.js","raw":"\t//坐标转换方法\n\t\t\tfunction windowToCanvas(element,x,y){\n\t\t\t\t//元素独有的获取坐标的方法\n\t\t\t\tvar box=element.getBoundingClientRect();\n\t\t\t\tvar cx=x-box.left;\n\t\t\t\tvar cy=y-box.top;\n\t\t\t\treturn {x:cx,y:cy}\n\t\t\t\n\t\t\t}","date":"2016-04-27T09:12:50.715Z","updated":"2015-06-24T06:45:10.925Z","path":"res/game/plane/windowTocanvas.js","layout":"false","title":"","comments":1,"_id":"cinu3eu68008fxoj0sskr0lz4","content":"\t//坐标转换方法\n\t\t\tfunction windowToCanvas(element,x,y){\n\t\t\t\t//元素独有的获取坐标的方法\n\t\t\t\tvar box=element.getBoundingClientRect();\n\t\t\t\tvar cx=x-box.left;\n\t\t\t\tvar cy=y-box.top;\n\t\t\t\treturn {x:cx,y:cy}\n\t\t\t\n\t\t\t}","excerpt":"","more":"\t//坐标转换方法\n\t\t\tfunction windowToCanvas(element,x,y){\n\t\t\t\t//元素独有的获取坐标的方法\n\t\t\t\tvar box=element.getBoundingClientRect();\n\t\t\t\tvar cx=x-box.left;\n\t\t\t\tvar cy=y-box.top;\n\t\t\t\treturn {x:cx,y:cy}\n\t\t\t\n\t\t\t}"}],"Post":[{"layout":"post","title":"hello world","duoshuo":true,"date":"2014-10-17T16:00:00.000Z","SyntaxHihglighter":true,"shTheme":"shThemeEclipse","_content":"\n# H1  \n\n## H2  \n\n### H3\n\n#### H4\n\n##### H5\n\n###### H6\n\n默认字号字体\n\n**加粗**\n\n<!-- more -->\n\n*斜体*\n_斜体_\n\n***加粗斜体***\n\n内容`颜色`背景\n\n> 内容加边  \n\n> 再加边  \n> 再再加边  \n> 再再再加边  \n> 注意事项**`\"内容后面有两个空格\"`**  \n\n\n\n\n---\n\n\t缩进\n\n---\n\n[我是链接,下面的是图片链接](http://comtu.github.com)\n\n![图片链接](/res/img/icon.jpg)\n\n---\n\n* # 1.H1内容\n\n\t* ## 1.1H2内容\n\t* ### 1.2H3内容\n\t\t* #### 1.2.1H4内容\n\t\t* ##### 1.2.2H5内容\n\t\t\t* ###### 1.2.2.1H6内容\n\t\t\t* 01.2.2.2默认什么字号内容\n\n\t\t* **1.2.3加粗内容**\n\t\t* *1.2.4斜体内容*\n\n* ***2.加粗斜体内容***\n* 3.内容`颜色`背景\n* 4.[我是链接](http://comtu.github.com)\n\n1. 内容1\n2. 内容2\n4. 内容(注意这里的Markdown源代码)\n23. 内容x\n\n---\n\n下面是表格\n\n|head1|head2|head3|head4\n|---|:---|---:|:---:|\n|row1text1|row1text2|row1text3|row1text4\n|row2text1|row2text2|row2text3|row2text4\n|row3text1|row3text2|row3text3|row3text4\n\n---\n\n**[使用 pygments 高亮](http://pygments.org/)**\n\n<pre>\n{% raw %}\n\t{% highlight c %} \n\t/* hello world demo 禁止解析*/\n\t#include <stdio.h>\n\tint main(int argc, char **argv)\n\t{\n\t    printf(\"Hello, World!\\n\");\n\t    return 0;\n\t}\n\t{% endhighlight %}\n{% endraw %}\n</pre>\n\n```c\n\t/* hello world demo 禁止解析*/\n\t#include <stdio.h>\n\tint main(int argc, char **argv)\n\t{\n\t    printf(\"Hello, World!\\n\");\n\t    return 0;\n\t}\n```\n\n<hr id=\"line\"/><br/>\n\n**[用 SyntaxHihglighter 高亮](http://alexgorbatchev.com/SyntaxHighlighter/)**\n\n<pre class=\"brush: js; \">\nfunction helloSyntaxHighlighter()\n{\n\treturn \"hi!\";\n}\n</pre>\n\n{% raw %}\n\t<pre class=\"brush: js; \"><!--禁止解析-->\n\tfunction helloSyntaxHighlighter()\n\t{\n\t\treturn \"hi!\";\n\t}\n\t</pre>\n{% endraw %}\n\n<pre class=\"brush: java; ruler: true; first-line: 0; highlight: [2, 4, 6] ; auto-links: false ; collapse: true ; gutter: false; \">\n/*http://comtu.githut.io*/\nclass SingletonTest {\n\tprivate static class SingletonHolder {\n\t\tprivate static final SingletonTest INSTANCE = new SingletonTest();\n\t}\n\n\tprivate SingletonTest() {\n\t}\n\n\tpublic static final SingletonTest getInstance() {\n\t\treturn SingletonHolder.INSTANCE;\n\t}\n}\n\n</pre>\n\n\n\n\n<pre class=\"brush: java;  collapse: true ; first-line: 10; highlight: [11, 13, 15] \" >\n/**\n * 枚举_单例\n */\nenum SingletonEnum {  \n    INSTANCE;  \n    public void whateverMethod() {  \n    }  \n}  \n</pre>\n\n---\n\n**[使用 script 方式高亮](http://alexgorbatchev.com/SyntaxHighlighter/manual/installation.html)**\n\n<script type=\"syntaxhighlighter\" class=\"brush: php ; html-script: true ; collapse: true \"><![CDATA[\n  <html>\n  <body>\n      <div style=\"font-weight: bold\"><?= str_replace(\"\\n\", \"<br/>\", $var) ?></div>\n       \n      <?\n      /***********************************\n       ** Multiline block comments\n       **********************************/\n       \n      $stringWithUrl = \"http://alexgorbatchev.com\";\n      $stringWithUrl = 'http://alexgorbatchev.com';\n           \n      ob_start(\"parseOutputBuffer\");      // Start Code Buffering\n      session_start();\n      ?>\n  </body>\n  </html>\n]]></script>\n\n---\n\n**[使用 pre 方式高亮 . 不支持 < 符号,需要进行转义为 &lt ; (但能很好的支持RSS订阅)](http://alexgorbatchev.com/SyntaxHighlighter/manual/installation.html)**\n\n<pre class=\"brush: html;  collapse: true\">\n  &lt;html>\n  &lt;body>\n      &lt;div style=\"font-weight: bold\">&lt;?= str_replace(\"\\n\", \"&lt;br/>\", $var) ?>&lt;/div>\n       \n      &lt;?\n      /***********************************\n       ** Multiline block comments\n       **********************************/\n       \n      $stringWithUrl = \"http://alexgorbatchev.com\";\n      $stringWithUrl = 'http://alexgorbatchev.com';\n           \n      ob_start(\"parseOutputBuffer\");      // Start Code Buffering\n      session_start();\n      ?>\n  &lt;/body>\n  &lt;/html>\n</pre>\n\t\n[SyntaxHihglighter使用方法](http://alexgorbatchev.com/SyntaxHighlighter/manual/installation.html)\n\n[SyntaxHihglighter参数](http://alexgorbatchev.com/SyntaxHighlighter/manual/configuration/)\n\n---\n\n**视频**\n\n<video controls=\"controls\" poster=\"/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.jpg\" width=\"320\" height=\"auto\">\n    <source src=\"/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.mp4\" type=\"video/mp4\">\n    <source src=\"/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.webm\" type=\"video/webm\">\n    <source src=\"/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.ogv\" type=\"video/ogv\">\n</video>\n\n---\n\n\n**Markdown 免费编辑器**\n\nWindows 平台\n\n- [MarkdownPad](http://markdownpad.com/)\n- [MarkPad](http://code52.org/DownmarkerWPF/)\n\n\nLinux 平台\n\n- [ReText](http://sourceforge.net/p/retext/home/ReText/)\n\nMac 平台\n\n- [Mou](http://mouapp.com/)\n\n在线编辑器\n\n- [Markable.in](http://markable.in/)\n- [Dillinger.io](http://dillinger.io/)\n\n浏览器插件\n\n- [MaDe](https://chrome.google.com/webstore/detail/oknndfeeopgpibecfjljjfanledpbkog) (Chrome)\n\n高级应用\n\n- [Sublime Text 2](http://www.sublimetext.com/2) + [MarkdownEditing](http://ttscoff.github.com/MarkdownEditing/) / [教程](http://lucifr.com/2012/07/12/markdownediting-for-sublime-text-2/)\n\n\n---\n\n<section>\n<h3><b>最新评论</b></h3>\n<ul class=\"ds-recent-comments\" data-num-items=\"10\" data-show-avatars=\"0\" data-show-time=\"0\" data-show-title=\"0\" data-show-admin=\"0\" data-excerpt-length=\"18\"></ul>\n</section>\n\n<section style=\"width:250px;\">\n<h3><b>最近访客</b></h3>\n<ul class=\"ds-recent-visitors\" data-num-items=\"4\" data-avatar-size=\"45\" style=\"margin-top:10px;\"></ul>\n</section>\n\n---\n\n\n注: 更换主题后~~不再支持使用 SyntaxHihglighter 高亮\n","source":"_posts/2014-10-18-hello world.md","raw":"---\nlayout : post\ntitle : \"hello world\"\ncategory : Jekyll\nduoshuo: true\ndate : 2014-10-18\ntags : [Jekyll , Demo , Test , SyntaxHihglighter , pygments , Markdown]\nSyntaxHihglighter: true\nshTheme: shThemeEclipse # shThemeDefault  shThemeDjango  shThemeEclipse  shThemeEmacs  shThemeFadeToGrey  shThemeMidnight  shThemeRDark\n\n---\n\n# H1  \n\n## H2  \n\n### H3\n\n#### H4\n\n##### H5\n\n###### H6\n\n默认字号字体\n\n**加粗**\n\n<!-- more -->\n\n*斜体*\n_斜体_\n\n***加粗斜体***\n\n内容`颜色`背景\n\n> 内容加边  \n\n> 再加边  \n> 再再加边  \n> 再再再加边  \n> 注意事项**`\"内容后面有两个空格\"`**  \n\n\n\n\n---\n\n\t缩进\n\n---\n\n[我是链接,下面的是图片链接](http://comtu.github.com)\n\n![图片链接](/res/img/icon.jpg)\n\n---\n\n* # 1.H1内容\n\n\t* ## 1.1H2内容\n\t* ### 1.2H3内容\n\t\t* #### 1.2.1H4内容\n\t\t* ##### 1.2.2H5内容\n\t\t\t* ###### 1.2.2.1H6内容\n\t\t\t* 01.2.2.2默认什么字号内容\n\n\t\t* **1.2.3加粗内容**\n\t\t* *1.2.4斜体内容*\n\n* ***2.加粗斜体内容***\n* 3.内容`颜色`背景\n* 4.[我是链接](http://comtu.github.com)\n\n1. 内容1\n2. 内容2\n4. 内容(注意这里的Markdown源代码)\n23. 内容x\n\n---\n\n下面是表格\n\n|head1|head2|head3|head4\n|---|:---|---:|:---:|\n|row1text1|row1text2|row1text3|row1text4\n|row2text1|row2text2|row2text3|row2text4\n|row3text1|row3text2|row3text3|row3text4\n\n---\n\n**[使用 pygments 高亮](http://pygments.org/)**\n\n<pre>\n{% raw %}\n\t{% highlight c %} \n\t/* hello world demo 禁止解析*/\n\t#include <stdio.h>\n\tint main(int argc, char **argv)\n\t{\n\t    printf(\"Hello, World!\\n\");\n\t    return 0;\n\t}\n\t{% endhighlight %}\n{% endraw %}\n</pre>\n\n```c\n\t/* hello world demo 禁止解析*/\n\t#include <stdio.h>\n\tint main(int argc, char **argv)\n\t{\n\t    printf(\"Hello, World!\\n\");\n\t    return 0;\n\t}\n```\n\n<hr id=\"line\"/><br/>\n\n**[用 SyntaxHihglighter 高亮](http://alexgorbatchev.com/SyntaxHighlighter/)**\n\n<pre class=\"brush: js; \">\nfunction helloSyntaxHighlighter()\n{\n\treturn \"hi!\";\n}\n</pre>\n\n{% raw %}\n\t<pre class=\"brush: js; \"><!--禁止解析-->\n\tfunction helloSyntaxHighlighter()\n\t{\n\t\treturn \"hi!\";\n\t}\n\t</pre>\n{% endraw %}\n\n<pre class=\"brush: java; ruler: true; first-line: 0; highlight: [2, 4, 6] ; auto-links: false ; collapse: true ; gutter: false; \">\n/*http://comtu.githut.io*/\nclass SingletonTest {\n\tprivate static class SingletonHolder {\n\t\tprivate static final SingletonTest INSTANCE = new SingletonTest();\n\t}\n\n\tprivate SingletonTest() {\n\t}\n\n\tpublic static final SingletonTest getInstance() {\n\t\treturn SingletonHolder.INSTANCE;\n\t}\n}\n\n</pre>\n\n\n\n\n<pre class=\"brush: java;  collapse: true ; first-line: 10; highlight: [11, 13, 15] \" >\n/**\n * 枚举_单例\n */\nenum SingletonEnum {  \n    INSTANCE;  \n    public void whateverMethod() {  \n    }  \n}  \n</pre>\n\n---\n\n**[使用 script 方式高亮](http://alexgorbatchev.com/SyntaxHighlighter/manual/installation.html)**\n\n<script type=\"syntaxhighlighter\" class=\"brush: php ; html-script: true ; collapse: true \"><![CDATA[\n  <html>\n  <body>\n      <div style=\"font-weight: bold\"><?= str_replace(\"\\n\", \"<br/>\", $var) ?></div>\n       \n      <?\n      /***********************************\n       ** Multiline block comments\n       **********************************/\n       \n      $stringWithUrl = \"http://alexgorbatchev.com\";\n      $stringWithUrl = 'http://alexgorbatchev.com';\n           \n      ob_start(\"parseOutputBuffer\");      // Start Code Buffering\n      session_start();\n      ?>\n  </body>\n  </html>\n]]></script>\n\n---\n\n**[使用 pre 方式高亮 . 不支持 < 符号,需要进行转义为 &lt ; (但能很好的支持RSS订阅)](http://alexgorbatchev.com/SyntaxHighlighter/manual/installation.html)**\n\n<pre class=\"brush: html;  collapse: true\">\n  &lt;html>\n  &lt;body>\n      &lt;div style=\"font-weight: bold\">&lt;?= str_replace(\"\\n\", \"&lt;br/>\", $var) ?>&lt;/div>\n       \n      &lt;?\n      /***********************************\n       ** Multiline block comments\n       **********************************/\n       \n      $stringWithUrl = \"http://alexgorbatchev.com\";\n      $stringWithUrl = 'http://alexgorbatchev.com';\n           \n      ob_start(\"parseOutputBuffer\");      // Start Code Buffering\n      session_start();\n      ?>\n  &lt;/body>\n  &lt;/html>\n</pre>\n\t\n[SyntaxHihglighter使用方法](http://alexgorbatchev.com/SyntaxHighlighter/manual/installation.html)\n\n[SyntaxHihglighter参数](http://alexgorbatchev.com/SyntaxHighlighter/manual/configuration/)\n\n---\n\n**视频**\n\n<video controls=\"controls\" poster=\"/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.jpg\" width=\"320\" height=\"auto\">\n    <source src=\"/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.mp4\" type=\"video/mp4\">\n    <source src=\"/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.webm\" type=\"video/webm\">\n    <source src=\"/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.ogv\" type=\"video/ogv\">\n</video>\n\n---\n\n\n**Markdown 免费编辑器**\n\nWindows 平台\n\n- [MarkdownPad](http://markdownpad.com/)\n- [MarkPad](http://code52.org/DownmarkerWPF/)\n\n\nLinux 平台\n\n- [ReText](http://sourceforge.net/p/retext/home/ReText/)\n\nMac 平台\n\n- [Mou](http://mouapp.com/)\n\n在线编辑器\n\n- [Markable.in](http://markable.in/)\n- [Dillinger.io](http://dillinger.io/)\n\n浏览器插件\n\n- [MaDe](https://chrome.google.com/webstore/detail/oknndfeeopgpibecfjljjfanledpbkog) (Chrome)\n\n高级应用\n\n- [Sublime Text 2](http://www.sublimetext.com/2) + [MarkdownEditing](http://ttscoff.github.com/MarkdownEditing/) / [教程](http://lucifr.com/2012/07/12/markdownediting-for-sublime-text-2/)\n\n\n---\n\n<section>\n<h3><b>最新评论</b></h3>\n<ul class=\"ds-recent-comments\" data-num-items=\"10\" data-show-avatars=\"0\" data-show-time=\"0\" data-show-title=\"0\" data-show-admin=\"0\" data-excerpt-length=\"18\"></ul>\n</section>\n\n<section style=\"width:250px;\">\n<h3><b>最近访客</b></h3>\n<ul class=\"ds-recent-visitors\" data-num-items=\"4\" data-avatar-size=\"45\" style=\"margin-top:10px;\"></ul>\n</section>\n\n---\n\n\n注: 更换主题后~~不再支持使用 SyntaxHihglighter 高亮\n","slug":"hello world","published":1,"updated":"2016-05-05T09:23:59.673Z","comments":1,"photos":[],"link":"","_id":"cinu3etwa0000xoj0ygc1o09t","content":"<h1 id=\"H1\"><a href=\"#H1\" class=\"headerlink\" title=\"H1\"></a>H1</h1><h2 id=\"H2\"><a href=\"#H2\" class=\"headerlink\" title=\"H2\"></a>H2</h2><h3 id=\"H3\"><a href=\"#H3\" class=\"headerlink\" title=\"H3\"></a>H3</h3><h4 id=\"H4\"><a href=\"#H4\" class=\"headerlink\" title=\"H4\"></a>H4</h4><h5 id=\"H5\"><a href=\"#H5\" class=\"headerlink\" title=\"H5\"></a>H5</h5><h6 id=\"H6\"><a href=\"#H6\" class=\"headerlink\" title=\"H6\"></a>H6</h6><p>默认字号字体</p>\n<p><strong>加粗</strong></p>\n<a id=\"more\"></a>\n<p><em>斜体</em><br><em>斜体</em></p>\n<p><strong><em>加粗斜体</em></strong></p>\n<p>内容<code>颜色</code>背景</p>\n<blockquote>\n<p>内容加边  </p>\n<p>再加边<br>再再加边<br>再再再加边<br>注意事项<strong><code>&quot;内容后面有两个空格&quot;</code></strong>  </p>\n</blockquote>\n<hr>\n<pre><code>缩进\n</code></pre><hr>\n<p><a href=\"http://comtu.github.com\">我是链接,下面的是图片链接</a></p>\n<p><img src=\"/res/img/icon.jpg\" alt=\"图片链接\"></p>\n<hr>\n<ul>\n<li><h1 id=\"1-H1内容\"><a href=\"#1-H1内容\" class=\"headerlink\" title=\"1.H1内容\"></a>1.H1内容</h1><ul>\n<li><h2 id=\"1-1H2内容\"><a href=\"#1-1H2内容\" class=\"headerlink\" title=\"1.1H2内容\"></a>1.1H2内容</h2></li>\n<li><h3 id=\"1-2H3内容\"><a href=\"#1-2H3内容\" class=\"headerlink\" title=\"1.2H3内容\"></a>1.2H3内容</h3><ul>\n<li><h4 id=\"1-2-1H4内容\"><a href=\"#1-2-1H4内容\" class=\"headerlink\" title=\"1.2.1H4内容\"></a>1.2.1H4内容</h4></li>\n<li><h5 id=\"1-2-2H5内容\"><a href=\"#1-2-2H5内容\" class=\"headerlink\" title=\"1.2.2H5内容\"></a>1.2.2H5内容</h5><ul>\n<li><h6 id=\"1-2-2-1H6内容\"><a href=\"#1-2-2-1H6内容\" class=\"headerlink\" title=\"1.2.2.1H6内容\"></a>1.2.2.1H6内容</h6></li>\n<li>01.2.2.2默认什么字号内容</li>\n</ul>\n</li>\n<li><p><strong>1.2.3加粗内容</strong></p>\n</li>\n<li><em>1.2.4斜体内容</em></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong><em>2.加粗斜体内容</em></strong></p>\n</li>\n<li>3.内容<code>颜色</code>背景</li>\n<li>4.<a href=\"http://comtu.github.com\">我是链接</a></li>\n</ul>\n<ol>\n<li>内容1</li>\n<li>内容2</li>\n<li>内容(注意这里的Markdown源代码)</li>\n<li>内容x</li>\n</ol>\n<hr>\n<p>下面是表格</p>\n<table>\n<thead>\n<tr>\n<th>head1</th>\n<th style=\"text-align:left\">head2</th>\n<th style=\"text-align:right\">head3</th>\n<th style=\"text-align:center\">head4</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>row1text1</td>\n<td style=\"text-align:left\">row1text2</td>\n<td style=\"text-align:right\">row1text3</td>\n<td style=\"text-align:center\">row1text4</td>\n</tr>\n<tr>\n<td>row2text1</td>\n<td style=\"text-align:left\">row2text2</td>\n<td style=\"text-align:right\">row2text3</td>\n<td style=\"text-align:center\">row2text4</td>\n</tr>\n<tr>\n<td>row3text1</td>\n<td style=\"text-align:left\">row3text2</td>\n<td style=\"text-align:right\">row3text3</td>\n<td style=\"text-align:center\">row3text4</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p><strong><a href=\"http://pygments.org/\" target=\"_blank\" rel=\"external\">使用 pygments 高亮</a></strong></p>\n<pre>\n\n\t{% highlight c %} \n\t/* hello world demo 禁止解析*/\n\t#include <stdio.h>\n\tint main(int argc, char **argv)\n\t{\n\t    printf(\"Hello, World!\\n\");\n\t    return 0;\n\t}\n\t{% endhighlight %}\n\n</stdio.h></pre>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* hello world demo 禁止解析*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, World!\\n\"</span>);</span><br><span class=\"line\">    return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><hr id=\"line\"><br></p>\n<p><strong><a href=\"http://alexgorbatchev.com/SyntaxHighlighter/\" target=\"_blank\" rel=\"external\">用 SyntaxHihglighter 高亮</a></strong></p>\n<pre class=\"brush: js; \">\nfunction helloSyntaxHighlighter()\n{\n    return \"hi!\";\n}\n</pre>\n\n\n\t<pre class=\"brush: js; \"><!--禁止解析-->\n\tfunction helloSyntaxHighlighter()\n\t{\n\t\treturn \"hi!\";\n\t}\n\t</pre>\n\n<pre class=\"brush: java; ruler: true; first-line: 0; highlight: [2, 4, 6] ; auto-links: false ; collapse: true ; gutter: false; \">\n/*http://comtu.githut.io*/\nclass SingletonTest {\n    private static class SingletonHolder {\n        private static final SingletonTest INSTANCE = new SingletonTest();\n    }\n\n    private SingletonTest() {\n    }\n\n    public static final SingletonTest getInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n}\n\n</pre>\n\n\n\n\n<pre class=\"brush: java;  collapse: true ; first-line: 10; highlight: [11, 13, 15] \">\n/**\n * 枚举_单例\n */\nenum SingletonEnum {  \n    INSTANCE;  \n    public void whateverMethod() {  \n    }  \n}  \n</pre>\n\n<hr>\n<p><strong><a href=\"http://alexgorbatchev.com/SyntaxHighlighter/manual/installation.html\" target=\"_blank\" rel=\"external\">使用 script 方式高亮</a></strong></p>\n<script type=\"syntaxhighlighter\" class=\"brush: php ; html-script: true ; collapse: true \"><![CDATA[\n  <html>\n  <body>\n      <div style=\"font-weight: bold\"><?= str_replace(\"\\n\", \"<br/>\", $var) ?></div>\n\n      <?\n      /***********************************\n       ** Multiline block comments\n       **********************************/\n\n      $stringWithUrl = \"http://alexgorbatchev.com\";\n      $stringWithUrl = 'http://alexgorbatchev.com';\n\n      ob_start(\"parseOutputBuffer\");      // Start Code Buffering\n      session_start();\n      ?>\n  </body>\n  </html>\n]]></script>\n\n<hr>\n<p><strong><a href=\"http://alexgorbatchev.com/SyntaxHighlighter/manual/installation.html\" target=\"_blank\" rel=\"external\">使用 pre 方式高亮 . 不支持 &lt; 符号,需要进行转义为 &amp;lt ; (但能很好的支持RSS订阅)</a></strong></p>\n<pre class=\"brush: html;  collapse: true\">\n  &lt;html>\n  &lt;body>\n      &lt;div style=\"font-weight: bold\">&lt;?= str_replace(\"\\n\", \"&lt;br/>\", $var) ?>&lt;/div>\n\n      &lt;?\n      /***********************************\n       ** Multiline block comments\n       **********************************/\n\n      $stringWithUrl = \"http://alexgorbatchev.com\";\n      $stringWithUrl = 'http://alexgorbatchev.com';\n\n      ob_start(\"parseOutputBuffer\");      // Start Code Buffering\n      session_start();\n      ?>\n  &lt;/body>\n  &lt;/html>\n</pre>\n\n<p><a href=\"http://alexgorbatchev.com/SyntaxHighlighter/manual/installation.html\" target=\"_blank\" rel=\"external\">SyntaxHihglighter使用方法</a></p>\n<p><a href=\"http://alexgorbatchev.com/SyntaxHighlighter/manual/configuration/\" target=\"_blank\" rel=\"external\">SyntaxHihglighter参数</a></p>\n<hr>\n<p><strong>视频</strong></p>\n<video controls=\"controls\" poster=\"/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.jpg\" width=\"320\" height=\"auto\"><br>    <source src=\"/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.mp4\" type=\"video/mp4\"><br>    <source src=\"/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.webm\" type=\"video/webm\"><br>    <source src=\"/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.ogv\" type=\"video/ogv\"><br></video>\n\n<hr>\n<p><strong>Markdown 免费编辑器</strong></p>\n<p>Windows 平台</p>\n<ul>\n<li><a href=\"http://markdownpad.com/\" target=\"_blank\" rel=\"external\">MarkdownPad</a></li>\n<li><a href=\"http://code52.org/DownmarkerWPF/\" target=\"_blank\" rel=\"external\">MarkPad</a></li>\n</ul>\n<p>Linux 平台</p>\n<ul>\n<li><a href=\"http://sourceforge.net/p/retext/home/ReText/\" target=\"_blank\" rel=\"external\">ReText</a></li>\n</ul>\n<p>Mac 平台</p>\n<ul>\n<li><a href=\"http://mouapp.com/\" target=\"_blank\" rel=\"external\">Mou</a></li>\n</ul>\n<p>在线编辑器</p>\n<ul>\n<li><a href=\"http://markable.in/\" target=\"_blank\" rel=\"external\">Markable.in</a></li>\n<li><a href=\"http://dillinger.io/\" target=\"_blank\" rel=\"external\">Dillinger.io</a></li>\n</ul>\n<p>浏览器插件</p>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/oknndfeeopgpibecfjljjfanledpbkog\" target=\"_blank\" rel=\"external\">MaDe</a> (Chrome)</li>\n</ul>\n<p>高级应用</p>\n<ul>\n<li><a href=\"http://www.sublimetext.com/2\" target=\"_blank\" rel=\"external\">Sublime Text 2</a> + <a href=\"http://ttscoff.github.com/MarkdownEditing/\" target=\"_blank\" rel=\"external\">MarkdownEditing</a> / <a href=\"http://lucifr.com/2012/07/12/markdownediting-for-sublime-text-2/\" target=\"_blank\" rel=\"external\">教程</a></li>\n</ul>\n<hr>\n<section><br><h3><b>最新评论</b></h3><br><ul class=\"ds-recent-comments\" data-num-items=\"10\" data-show-avatars=\"0\" data-show-time=\"0\" data-show-title=\"0\" data-show-admin=\"0\" data-excerpt-length=\"18\"></ul><br></section>\n\n<section style=\"width:250px;\"><br><h3><b>最近访客</b></h3><br><ul class=\"ds-recent-visitors\" data-num-items=\"4\" data-avatar-size=\"45\" style=\"margin-top:10px;\"></ul><br></section>\n\n<hr>\n<p>注: 更换主题后~~不再支持使用 SyntaxHihglighter 高亮</p>\n","excerpt":"<h1 id=\"H1\"><a href=\"#H1\" class=\"headerlink\" title=\"H1\"></a>H1</h1><h2 id=\"H2\"><a href=\"#H2\" class=\"headerlink\" title=\"H2\"></a>H2</h2><h3 id=\"H3\"><a href=\"#H3\" class=\"headerlink\" title=\"H3\"></a>H3</h3><h4 id=\"H4\"><a href=\"#H4\" class=\"headerlink\" title=\"H4\"></a>H4</h4><h5 id=\"H5\"><a href=\"#H5\" class=\"headerlink\" title=\"H5\"></a>H5</h5><h6 id=\"H6\"><a href=\"#H6\" class=\"headerlink\" title=\"H6\"></a>H6</h6><p>默认字号字体</p>\n<p><strong>加粗</strong></p>","more":"<p><em>斜体</em><br><em>斜体</em></p>\n<p><strong><em>加粗斜体</em></strong></p>\n<p>内容<code>颜色</code>背景</p>\n<blockquote>\n<p>内容加边  </p>\n<p>再加边<br>再再加边<br>再再再加边<br>注意事项<strong><code>&quot;内容后面有两个空格&quot;</code></strong>  </p>\n</blockquote>\n<hr>\n<pre><code>缩进\n</code></pre><hr>\n<p><a href=\"http://comtu.github.com\">我是链接,下面的是图片链接</a></p>\n<p><img src=\"/res/img/icon.jpg\" alt=\"图片链接\"></p>\n<hr>\n<ul>\n<li><h1 id=\"1-H1内容\"><a href=\"#1-H1内容\" class=\"headerlink\" title=\"1.H1内容\"></a>1.H1内容</h1><ul>\n<li><h2 id=\"1-1H2内容\"><a href=\"#1-1H2内容\" class=\"headerlink\" title=\"1.1H2内容\"></a>1.1H2内容</h2></li>\n<li><h3 id=\"1-2H3内容\"><a href=\"#1-2H3内容\" class=\"headerlink\" title=\"1.2H3内容\"></a>1.2H3内容</h3><ul>\n<li><h4 id=\"1-2-1H4内容\"><a href=\"#1-2-1H4内容\" class=\"headerlink\" title=\"1.2.1H4内容\"></a>1.2.1H4内容</h4></li>\n<li><h5 id=\"1-2-2H5内容\"><a href=\"#1-2-2H5内容\" class=\"headerlink\" title=\"1.2.2H5内容\"></a>1.2.2H5内容</h5><ul>\n<li><h6 id=\"1-2-2-1H6内容\"><a href=\"#1-2-2-1H6内容\" class=\"headerlink\" title=\"1.2.2.1H6内容\"></a>1.2.2.1H6内容</h6></li>\n<li>01.2.2.2默认什么字号内容</li>\n</ul>\n</li>\n<li><p><strong>1.2.3加粗内容</strong></p>\n</li>\n<li><em>1.2.4斜体内容</em></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong><em>2.加粗斜体内容</em></strong></p>\n</li>\n<li>3.内容<code>颜色</code>背景</li>\n<li>4.<a href=\"http://comtu.github.com\">我是链接</a></li>\n</ul>\n<ol>\n<li>内容1</li>\n<li>内容2</li>\n<li>内容(注意这里的Markdown源代码)</li>\n<li>内容x</li>\n</ol>\n<hr>\n<p>下面是表格</p>\n<table>\n<thead>\n<tr>\n<th>head1</th>\n<th style=\"text-align:left\">head2</th>\n<th style=\"text-align:right\">head3</th>\n<th style=\"text-align:center\">head4</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>row1text1</td>\n<td style=\"text-align:left\">row1text2</td>\n<td style=\"text-align:right\">row1text3</td>\n<td style=\"text-align:center\">row1text4</td>\n</tr>\n<tr>\n<td>row2text1</td>\n<td style=\"text-align:left\">row2text2</td>\n<td style=\"text-align:right\">row2text3</td>\n<td style=\"text-align:center\">row2text4</td>\n</tr>\n<tr>\n<td>row3text1</td>\n<td style=\"text-align:left\">row3text2</td>\n<td style=\"text-align:right\">row3text3</td>\n<td style=\"text-align:center\">row3text4</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p><strong><a href=\"http://pygments.org/\">使用 pygments 高亮</a></strong></p>\n<pre>\n\n\t{% highlight c %} \n\t/* hello world demo 禁止解析*/\n\t#include <stdio.h>\n\tint main(int argc, char **argv)\n\t{\n\t    printf(\"Hello, World!\\n\");\n\t    return 0;\n\t}\n\t{% endhighlight %}\n\n</pre>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* hello world demo 禁止解析*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, World!\\n\"</span>);</span><br><span class=\"line\">    return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><hr id=\"line\"/><br/></p>\n<p><strong><a href=\"http://alexgorbatchev.com/SyntaxHighlighter/\">用 SyntaxHihglighter 高亮</a></strong></p>\n<pre class=\"brush: js; \">\nfunction helloSyntaxHighlighter()\n{\n    return \"hi!\";\n}\n</pre>\n\n\n\t<pre class=\"brush: js; \"><!--禁止解析-->\n\tfunction helloSyntaxHighlighter()\n\t{\n\t\treturn \"hi!\";\n\t}\n\t</pre>\n\n<pre class=\"brush: java; ruler: true; first-line: 0; highlight: [2, 4, 6] ; auto-links: false ; collapse: true ; gutter: false; \">\n/*http://comtu.githut.io*/\nclass SingletonTest {\n    private static class SingletonHolder {\n        private static final SingletonTest INSTANCE = new SingletonTest();\n    }\n\n    private SingletonTest() {\n    }\n\n    public static final SingletonTest getInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n}\n\n</pre>\n\n\n\n\n<pre class=\"brush: java;  collapse: true ; first-line: 10; highlight: [11, 13, 15] \" >\n/**\n * 枚举_单例\n */\nenum SingletonEnum {  \n    INSTANCE;  \n    public void whateverMethod() {  \n    }  \n}  \n</pre>\n\n<hr>\n<p><strong><a href=\"http://alexgorbatchev.com/SyntaxHighlighter/manual/installation.html\">使用 script 方式高亮</a></strong></p>\n<script type=\"syntaxhighlighter\" class=\"brush: php ; html-script: true ; collapse: true \"><![CDATA[\n  <html>\n  <body>\n      <div style=\"font-weight: bold\"><?= str_replace(\"\\n\", \"<br/>\", $var) ?></div>\n\n      <?\n      /***********************************\n       ** Multiline block comments\n       **********************************/\n\n      $stringWithUrl = \"http://alexgorbatchev.com\";\n      $stringWithUrl = 'http://alexgorbatchev.com';\n\n      ob_start(\"parseOutputBuffer\");      // Start Code Buffering\n      session_start();\n      ?>\n  </body>\n  </html>\n]]></script>\n\n<hr>\n<p><strong><a href=\"http://alexgorbatchev.com/SyntaxHighlighter/manual/installation.html\">使用 pre 方式高亮 . 不支持 &lt; 符号,需要进行转义为 &amp;lt ; (但能很好的支持RSS订阅)</a></strong></p>\n<pre class=\"brush: html;  collapse: true\">\n  &lt;html>\n  &lt;body>\n      &lt;div style=\"font-weight: bold\">&lt;?= str_replace(\"\\n\", \"&lt;br/>\", $var) ?>&lt;/div>\n\n      &lt;?\n      /***********************************\n       ** Multiline block comments\n       **********************************/\n\n      $stringWithUrl = \"http://alexgorbatchev.com\";\n      $stringWithUrl = 'http://alexgorbatchev.com';\n\n      ob_start(\"parseOutputBuffer\");      // Start Code Buffering\n      session_start();\n      ?>\n  &lt;/body>\n  &lt;/html>\n</pre>\n\n<p><a href=\"http://alexgorbatchev.com/SyntaxHighlighter/manual/installation.html\">SyntaxHihglighter使用方法</a></p>\n<p><a href=\"http://alexgorbatchev.com/SyntaxHighlighter/manual/configuration/\">SyntaxHihglighter参数</a></p>\n<hr>\n<p><strong>视频</strong></p>\n<video controls=\"controls\" poster=\"/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.jpg\" width=\"320\" height=\"auto\"><br>    <source src=\"/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.mp4\" type=\"video/mp4\"><br>    <source src=\"/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.webm\" type=\"video/webm\"><br>    <source src=\"/res/video/2014-10-18-hello world/anim_page_transformer_zoomout.ogv\" type=\"video/ogv\"><br></video>\n\n<hr>\n<p><strong>Markdown 免费编辑器</strong></p>\n<p>Windows 平台</p>\n<ul>\n<li><a href=\"http://markdownpad.com/\">MarkdownPad</a></li>\n<li><a href=\"http://code52.org/DownmarkerWPF/\">MarkPad</a></li>\n</ul>\n<p>Linux 平台</p>\n<ul>\n<li><a href=\"http://sourceforge.net/p/retext/home/ReText/\">ReText</a></li>\n</ul>\n<p>Mac 平台</p>\n<ul>\n<li><a href=\"http://mouapp.com/\">Mou</a></li>\n</ul>\n<p>在线编辑器</p>\n<ul>\n<li><a href=\"http://markable.in/\">Markable.in</a></li>\n<li><a href=\"http://dillinger.io/\">Dillinger.io</a></li>\n</ul>\n<p>浏览器插件</p>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/oknndfeeopgpibecfjljjfanledpbkog\">MaDe</a> (Chrome)</li>\n</ul>\n<p>高级应用</p>\n<ul>\n<li><a href=\"http://www.sublimetext.com/2\">Sublime Text 2</a> + <a href=\"http://ttscoff.github.com/MarkdownEditing/\">MarkdownEditing</a> / <a href=\"http://lucifr.com/2012/07/12/markdownediting-for-sublime-text-2/\">教程</a></li>\n</ul>\n<hr>\n<section><br><h3><b>最新评论</b></h3><br><ul class=\"ds-recent-comments\" data-num-items=\"10\" data-show-avatars=\"0\" data-show-time=\"0\" data-show-title=\"0\" data-show-admin=\"0\" data-excerpt-length=\"18\"></ul><br></section>\n\n<section style=\"width:250px;\"><br><h3><b>最近访客</b></h3><br><ul class=\"ds-recent-visitors\" data-num-items=\"4\" data-avatar-size=\"45\" style=\"margin-top:10px;\"></ul><br></section>\n\n<hr>\n<p>注: 更换主题后~~不再支持使用 SyntaxHihglighter 高亮</p>"},{"layout":"post","title":"Jekyll中的语法高亮:Pygments","duoshuo":true,"date":"2014-10-17T16:00:00.000Z","_content":"\n******\n\n\n在安装成功Jekyll环境的情况下.\n\n# 一.安装Pygments\n\nJekyll 里默认的语法高亮插件是 [Pygments](http://pygments.org/)。Pygments [支持多种语言高亮](http://pygments.org/docs/lexers/)。\n\n## **一.1)如果你是linux**\n\n\n### * **1.安装 pygments**\n\narchlinux:\n\n\t$ sudo pacman -S python2-pygments\n\n<!-- more -->\n\n或直接通过 pip 来安装\n\n\t$ pip install pygments --user\n\n\n### * **2.安装 pygments.rb**\n\n命令使用: \n\n\t$ gem install pygments.rb\n\n\n\n---\n\n## **一.2)如果你是Windows**\n\n它需要安装 Python 并在网站的配置文件`_config.yml` 里将 `highlighter` 的值设置为`pygments`。\n\n不久之前，Jekyll 还添加另一个高亮引擎名为 [Rouge](https://github.com/jayferd/rouge)， \n\n尽管暂时不如 Pygments 支持那么多的语言，但它是原生 [Ruby](https://www.ruby-lang.org/zh_cn/) 程序，而不需要使用 [Python](https://www.python.org/download/) 。 \n\n---\n\n### * **一.2)1.安装 Python**\n\n前往 [http://www.python.org/download/](http://www.python.org/download/)\n下载合适的 Python windows 安装包，如 Python 2.7.8 Windows Installer。\n\n请注意，Python 2 可能会更合适，因为暂时 Python 3 可能不会正常工作。\n\n安装\n\n\t添加安装路径 (如： C:\\Python27) 至 PATH。\n\n检验 Python 安装是否成功\n\n\tpython –V\n\n输出示例：\n\n\tPython 2.7.8\n\n---\n\n### * **一.2)2.安装 ‘Easy Install’**\n\n浏览 [https://pypi.python.org/pypi/setuptools#installation-instructions](https://pypi.python.org/pypi/setuptools#installation-instructions) 来查看详细的安装指南。\n\n对于 Windows 7 的机器，下载 [ez_setup.py](https://bootstrap.pypa.io/ez_setup.py) 并保存，例如，至C:\\。 然后从命令行使用 Python 运行此文件：\n\n\tpython C:\\ez_setup.py\n\n添加 ‘Python Scripts’ 路径 (如： C:\\Python27\\Scripts) 至 PATH\n\n\n---\n\n### * **一.2)3.安装 Pygments**\n\n\n确保 easy_install 已经正确安装\n\n\teasy_install --version\n\n输出示例：\n\n\tsetuptools 7.0\n\n使用 “easy_install” 来安装 Pygments\n\n\teasy_install Pygments\n\n---\n\n# 二.配置\n\n---\n## * **1.配置_config.yml文件**\n\n在 Jekyll 的配置文件 _config.yml 中设置打开 Pygments\n\n\tpygments: true\n\tmardown: redcarpet\n\n> 注意：新版本 Jekyll 中，`pygments: true` 替换为 `highlighter: pygments`。  \n\n---\n## * **2.生成css文件**\n\n进到我们的网站目录，运行下面代码生成 Pygments 样式\n\n\t$ pygmentize -S default -f html > your/path/pygments.css\n\n---\n## * **3.导入css文件**\n\n生成的样式文件加到我们的网页中\n\n\t<link rel=\"stylesheet\" href=\"/your/path/pygments.css\">\n\n---\n\n# 三. 使用\n\n<pre>\n{% raw %}\n语法高亮的代码片段要放在标签对 `{% highlight language %}` 和 `{% endhighlight %}` 之间，\n其中的 language 为[多种语言高亮](http://pygments.org/docs/lexers/)页面中的 Short names。\n{% endraw %}\n</pre>\n\n<pre>\n{% raw %}\n\t{% highlight c %}\n\t/* hello world demo */\n\t#include <stdio.h>\n\tint main(int argc, char **argv)\n\t{\n\t    printf(\"Hello, World!\\n\");\n\t    return 0;\n\t}\n\t{% endhighlight %}\n{% endraw %}\n</pre>\n\n也可以采用这样的写法\n\n```c\n/* hello world demo */\n#include <stdio.h>\nint main(int argc, char **argv)\n{\n    printf(\"Hello, World!\\n\");\n    return 0;\n}\n```\n\n\t三个\"`\"符号需要markdownx解释引擎，\n\n\tmarkdown: redcarpet\n\tredcarpet:\n\t\textensions: [\"fenced_code_blocks\", \"tables\", \"highlight\", \"strikethrough\"]\n\n\n---\n\n生成的 html 高亮结果  以下结束是使用Pygments 样式的 default 与 vs 的并集样式\n\nC\n```c\n/* hello world demo */\n#include <stdio.h>\nint main(int argc, char **argv)\n{\n    printf(\"Hello, World!\\n\");\n    return 0;\n}\n```\n\n\n\nJava \n```java\npackage com.pexcn.activity.demo;\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.util.Log;\n\npublic class MainActivity extends Activity {\n\tprivate static final String TAG = \"ActivityDemo\";\n\t\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n        Log.e(TAG, \"onCreate() start...\");\n    }\n}\n```\n\n---\n\n# 四. Pygments 样式\n\nPygments 样式 默认提供了 monokai、manni、rrt、perldoc、borland、colorful、default 等等，多种的样式。\n\n可以通过 Python Shell 中用以下命令列出当前 Pygments 支持的样式：\n\n```python\n>>> from pygments.styles import STYLE_MAP\n>>> STYLE_MAP.keys()\n['manni', 'igor', 'xcode', 'vim', 'autumn', 'vs', 'rrt', 'native', 'perldoc', 'borland', 'tango', 'emacs', 'friendly', 'monokai', 'paraiso-dark', 'colorful', 'murphy', 'bw', 'pastie', 'paraiso-light', 'trac', 'default', 'fruity']\n>>> \n````\n\n通过 -S 来选择，需要生成 monokai 的样式：\n\n\t$ pygmentize -S monokai -f html > your/path/pygments.css\n\n下面是 pygments 个各样式 show：\n\n* **monokai**\n\n\n![pygments-monokai](/res/img/blog/2014/10/18/pygments-monokai.png)  \n\n\n* **autumn**\n\n\n![pygments-autumn](/res/img/blog/2014/10/18/pygments-autumn.png)  \n\n\n* **borland**\n\n\n![pygments-borland](/res/img/blog/2014/10/18/pygments-borland.png)  \n\n\n* **bw**\n\n\n![pygments-bw](/res/img/blog/2014/10/18/pygments-bw.png)  \n\n\n* **colorful**\n\n\n![pygments-colorful](/res/img/blog/2014/10/18/pygments-colorful.png)  \n\n\n\n* **default**\n\n\n![pygments-default](/res/img/blog/2014/10/18/pygments-default.png)  \n\n\n* **emacs**\n\n\n![pygments-emacs](/res/img/blog/2014/10/18/pygments-emacs.png)  \n\n\n* **friendly**\n\n\n![pygments-friendly](/res/img/blog/2014/10/18/pygments-friendly.png)  \n\n\n* **fruity**\n\n\n![pygments-fruity](/res/img/blog/2014/10/18/pygments-fruity.png)  \n\n\n* **manni**\n\n\n![pygments-manni](/res/img/blog/2014/10/18/pygments-manni.png)  \n\n\n* **monokai**\n\n\n![pygments-monokai](/res/img/blog/2014/10/18/pygments-monokai.png)  \n\n\n* **murphy**\n\n\n![pygments-murphy](/res/img/blog/2014/10/18/pygments-murphy.png)  \n\n\n* **native**\n\n\n![pygments-native](/res/img/blog/2014/10/18/pygments-native.png)  \n\n\n* **pastie**\n\n\n![pygments-pastie](/res/img/blog/2014/10/18/pygments-pastie.png)  \n\n\n* **perldoc**\n\n\n![pygments-perldoc](/res/img/blog/2014/10/18/pygments-perldoc.png)  \n\n\n* **rrt**\n\n\n![pygments-rrt](/res/img/blog/2014/10/18/pygments-rrt.png)  \n\n\n* **tango**\n\n\n![pygments-tango](/res/img/blog/2014/10/18/pygments-tango.png)  \n\n\n* **trac**\n\n\n![pygments-trac](/res/img/blog/2014/10/18/pygments-trac.png)  \n\n\n* **vim**\n\n\n![pygments-vim](/res/img/blog/2014/10/18/pygments-vim.png)  \n\n\n* **vs**\n\n\n![pygments-vs](/res/img/blog/2014/10/18/pygments-vs.png)  \n\n\n\n# 参考:\n\n**[http://pygments.org/docs/cmdline/](http://pygments.org/docs/cmdline/)**\n","source":"_posts/2014-10-18-support-pygments-in-Jekyll.md","raw":"---\nlayout : post\ntitle : \"Jekyll中的语法高亮:Pygments\"\ncategory : Jekyll \nduoshuo: true\ndate : 2014-10-18\ntags : [Jekyll , Pygments , 语法高亮]\n---\n\n******\n\n\n在安装成功Jekyll环境的情况下.\n\n# 一.安装Pygments\n\nJekyll 里默认的语法高亮插件是 [Pygments](http://pygments.org/)。Pygments [支持多种语言高亮](http://pygments.org/docs/lexers/)。\n\n## **一.1)如果你是linux**\n\n\n### * **1.安装 pygments**\n\narchlinux:\n\n\t$ sudo pacman -S python2-pygments\n\n<!-- more -->\n\n或直接通过 pip 来安装\n\n\t$ pip install pygments --user\n\n\n### * **2.安装 pygments.rb**\n\n命令使用: \n\n\t$ gem install pygments.rb\n\n\n\n---\n\n## **一.2)如果你是Windows**\n\n它需要安装 Python 并在网站的配置文件`_config.yml` 里将 `highlighter` 的值设置为`pygments`。\n\n不久之前，Jekyll 还添加另一个高亮引擎名为 [Rouge](https://github.com/jayferd/rouge)， \n\n尽管暂时不如 Pygments 支持那么多的语言，但它是原生 [Ruby](https://www.ruby-lang.org/zh_cn/) 程序，而不需要使用 [Python](https://www.python.org/download/) 。 \n\n---\n\n### * **一.2)1.安装 Python**\n\n前往 [http://www.python.org/download/](http://www.python.org/download/)\n下载合适的 Python windows 安装包，如 Python 2.7.8 Windows Installer。\n\n请注意，Python 2 可能会更合适，因为暂时 Python 3 可能不会正常工作。\n\n安装\n\n\t添加安装路径 (如： C:\\Python27) 至 PATH。\n\n检验 Python 安装是否成功\n\n\tpython –V\n\n输出示例：\n\n\tPython 2.7.8\n\n---\n\n### * **一.2)2.安装 ‘Easy Install’**\n\n浏览 [https://pypi.python.org/pypi/setuptools#installation-instructions](https://pypi.python.org/pypi/setuptools#installation-instructions) 来查看详细的安装指南。\n\n对于 Windows 7 的机器，下载 [ez_setup.py](https://bootstrap.pypa.io/ez_setup.py) 并保存，例如，至C:\\。 然后从命令行使用 Python 运行此文件：\n\n\tpython C:\\ez_setup.py\n\n添加 ‘Python Scripts’ 路径 (如： C:\\Python27\\Scripts) 至 PATH\n\n\n---\n\n### * **一.2)3.安装 Pygments**\n\n\n确保 easy_install 已经正确安装\n\n\teasy_install --version\n\n输出示例：\n\n\tsetuptools 7.0\n\n使用 “easy_install” 来安装 Pygments\n\n\teasy_install Pygments\n\n---\n\n# 二.配置\n\n---\n## * **1.配置_config.yml文件**\n\n在 Jekyll 的配置文件 _config.yml 中设置打开 Pygments\n\n\tpygments: true\n\tmardown: redcarpet\n\n> 注意：新版本 Jekyll 中，`pygments: true` 替换为 `highlighter: pygments`。  \n\n---\n## * **2.生成css文件**\n\n进到我们的网站目录，运行下面代码生成 Pygments 样式\n\n\t$ pygmentize -S default -f html > your/path/pygments.css\n\n---\n## * **3.导入css文件**\n\n生成的样式文件加到我们的网页中\n\n\t<link rel=\"stylesheet\" href=\"/your/path/pygments.css\">\n\n---\n\n# 三. 使用\n\n<pre>\n{% raw %}\n语法高亮的代码片段要放在标签对 `{% highlight language %}` 和 `{% endhighlight %}` 之间，\n其中的 language 为[多种语言高亮](http://pygments.org/docs/lexers/)页面中的 Short names。\n{% endraw %}\n</pre>\n\n<pre>\n{% raw %}\n\t{% highlight c %}\n\t/* hello world demo */\n\t#include <stdio.h>\n\tint main(int argc, char **argv)\n\t{\n\t    printf(\"Hello, World!\\n\");\n\t    return 0;\n\t}\n\t{% endhighlight %}\n{% endraw %}\n</pre>\n\n也可以采用这样的写法\n\n```c\n/* hello world demo */\n#include <stdio.h>\nint main(int argc, char **argv)\n{\n    printf(\"Hello, World!\\n\");\n    return 0;\n}\n```\n\n\t三个\"`\"符号需要markdownx解释引擎，\n\n\tmarkdown: redcarpet\n\tredcarpet:\n\t\textensions: [\"fenced_code_blocks\", \"tables\", \"highlight\", \"strikethrough\"]\n\n\n---\n\n生成的 html 高亮结果  以下结束是使用Pygments 样式的 default 与 vs 的并集样式\n\nC\n```c\n/* hello world demo */\n#include <stdio.h>\nint main(int argc, char **argv)\n{\n    printf(\"Hello, World!\\n\");\n    return 0;\n}\n```\n\n\n\nJava \n```java\npackage com.pexcn.activity.demo;\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.util.Log;\n\npublic class MainActivity extends Activity {\n\tprivate static final String TAG = \"ActivityDemo\";\n\t\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n        Log.e(TAG, \"onCreate() start...\");\n    }\n}\n```\n\n---\n\n# 四. Pygments 样式\n\nPygments 样式 默认提供了 monokai、manni、rrt、perldoc、borland、colorful、default 等等，多种的样式。\n\n可以通过 Python Shell 中用以下命令列出当前 Pygments 支持的样式：\n\n```python\n>>> from pygments.styles import STYLE_MAP\n>>> STYLE_MAP.keys()\n['manni', 'igor', 'xcode', 'vim', 'autumn', 'vs', 'rrt', 'native', 'perldoc', 'borland', 'tango', 'emacs', 'friendly', 'monokai', 'paraiso-dark', 'colorful', 'murphy', 'bw', 'pastie', 'paraiso-light', 'trac', 'default', 'fruity']\n>>> \n````\n\n通过 -S 来选择，需要生成 monokai 的样式：\n\n\t$ pygmentize -S monokai -f html > your/path/pygments.css\n\n下面是 pygments 个各样式 show：\n\n* **monokai**\n\n\n![pygments-monokai](/res/img/blog/2014/10/18/pygments-monokai.png)  \n\n\n* **autumn**\n\n\n![pygments-autumn](/res/img/blog/2014/10/18/pygments-autumn.png)  \n\n\n* **borland**\n\n\n![pygments-borland](/res/img/blog/2014/10/18/pygments-borland.png)  \n\n\n* **bw**\n\n\n![pygments-bw](/res/img/blog/2014/10/18/pygments-bw.png)  \n\n\n* **colorful**\n\n\n![pygments-colorful](/res/img/blog/2014/10/18/pygments-colorful.png)  \n\n\n\n* **default**\n\n\n![pygments-default](/res/img/blog/2014/10/18/pygments-default.png)  \n\n\n* **emacs**\n\n\n![pygments-emacs](/res/img/blog/2014/10/18/pygments-emacs.png)  \n\n\n* **friendly**\n\n\n![pygments-friendly](/res/img/blog/2014/10/18/pygments-friendly.png)  \n\n\n* **fruity**\n\n\n![pygments-fruity](/res/img/blog/2014/10/18/pygments-fruity.png)  \n\n\n* **manni**\n\n\n![pygments-manni](/res/img/blog/2014/10/18/pygments-manni.png)  \n\n\n* **monokai**\n\n\n![pygments-monokai](/res/img/blog/2014/10/18/pygments-monokai.png)  \n\n\n* **murphy**\n\n\n![pygments-murphy](/res/img/blog/2014/10/18/pygments-murphy.png)  \n\n\n* **native**\n\n\n![pygments-native](/res/img/blog/2014/10/18/pygments-native.png)  \n\n\n* **pastie**\n\n\n![pygments-pastie](/res/img/blog/2014/10/18/pygments-pastie.png)  \n\n\n* **perldoc**\n\n\n![pygments-perldoc](/res/img/blog/2014/10/18/pygments-perldoc.png)  \n\n\n* **rrt**\n\n\n![pygments-rrt](/res/img/blog/2014/10/18/pygments-rrt.png)  \n\n\n* **tango**\n\n\n![pygments-tango](/res/img/blog/2014/10/18/pygments-tango.png)  \n\n\n* **trac**\n\n\n![pygments-trac](/res/img/blog/2014/10/18/pygments-trac.png)  \n\n\n* **vim**\n\n\n![pygments-vim](/res/img/blog/2014/10/18/pygments-vim.png)  \n\n\n* **vs**\n\n\n![pygments-vs](/res/img/blog/2014/10/18/pygments-vs.png)  \n\n\n\n# 参考:\n\n**[http://pygments.org/docs/cmdline/](http://pygments.org/docs/cmdline/)**\n","slug":"support-pygments-in-Jekyll","published":1,"updated":"2016-04-27T08:34:59.199Z","comments":1,"photos":[],"link":"","_id":"cinu3etwj0002xoj0rbw5w9po","content":"<hr>\n<p>在安装成功Jekyll环境的情况下.</p>\n<h1 id=\"一-安装Pygments\"><a href=\"#一-安装Pygments\" class=\"headerlink\" title=\"一.安装Pygments\"></a>一.安装Pygments</h1><p>Jekyll 里默认的语法高亮插件是 <a href=\"http://pygments.org/\" target=\"_blank\" rel=\"external\">Pygments</a>。Pygments <a href=\"http://pygments.org/docs/lexers/\" target=\"_blank\" rel=\"external\">支持多种语言高亮</a>。</p>\n<h2 id=\"一-1-如果你是linux\"><a href=\"#一-1-如果你是linux\" class=\"headerlink\" title=\"一.1)如果你是linux\"></a><strong>一.1)如果你是linux</strong></h2><h3 id=\"1-安装-pygments\"><a href=\"#1-安装-pygments\" class=\"headerlink\" title=\" *1.安装 pygments\"></a><em> <em>*1.安装 pygments</em></em></h3><p>archlinux:</p>\n<pre><code>$ sudo pacman -S python2-pygments\n</code></pre><a id=\"more\"></a>\n<p>或直接通过 pip 来安装</p>\n<pre><code>$ pip install pygments --user\n</code></pre><h3 id=\"2-安装-pygments-rb\"><a href=\"#2-安装-pygments-rb\" class=\"headerlink\" title=\" *2.安装 pygments.rb\"></a><em> <em>*2.安装 pygments.rb</em></em></h3><p>命令使用: </p>\n<pre><code>$ gem install pygments.rb\n</code></pre><hr>\n<h2 id=\"一-2-如果你是Windows\"><a href=\"#一-2-如果你是Windows\" class=\"headerlink\" title=\"一.2)如果你是Windows\"></a><strong>一.2)如果你是Windows</strong></h2><p>它需要安装 Python 并在网站的配置文件<code>_config.yml</code> 里将 <code>highlighter</code> 的值设置为<code>pygments</code>。</p>\n<p>不久之前，Jekyll 还添加另一个高亮引擎名为 <a href=\"https://github.com/jayferd/rouge\" target=\"_blank\" rel=\"external\">Rouge</a>， </p>\n<p>尽管暂时不如 Pygments 支持那么多的语言，但它是原生 <a href=\"https://www.ruby-lang.org/zh_cn/\" target=\"_blank\" rel=\"external\">Ruby</a> 程序，而不需要使用 <a href=\"https://www.python.org/download/\" target=\"_blank\" rel=\"external\">Python</a> 。 </p>\n<hr>\n<h3 id=\"一-2-1-安装-Python\"><a href=\"#一-2-1-安装-Python\" class=\"headerlink\" title=\" *一.2)1.安装 Python\"></a><em> <em>*一.2)1.安装 Python</em></em></h3><p>前往 <a href=\"http://www.python.org/download/\" target=\"_blank\" rel=\"external\">http://www.python.org/download/</a><br>下载合适的 Python windows 安装包，如 Python 2.7.8 Windows Installer。</p>\n<p>请注意，Python 2 可能会更合适，因为暂时 Python 3 可能不会正常工作。</p>\n<p>安装</p>\n<pre><code>添加安装路径 (如： C:\\Python27) 至 PATH。\n</code></pre><p>检验 Python 安装是否成功</p>\n<pre><code>python –V\n</code></pre><p>输出示例：</p>\n<pre><code>Python 2.7.8\n</code></pre><hr>\n<h3 id=\"一-2-2-安装-‘Easy-Install’\"><a href=\"#一-2-2-安装-‘Easy-Install’\" class=\"headerlink\" title=\" *一.2)2.安装 ‘Easy Install’\"></a><em> <em>*一.2)2.安装 ‘Easy Install’</em></em></h3><p>浏览 <a href=\"https://pypi.python.org/pypi/setuptools#installation-instructions\" target=\"_blank\" rel=\"external\">https://pypi.python.org/pypi/setuptools#installation-instructions</a> 来查看详细的安装指南。</p>\n<p>对于 Windows 7 的机器，下载 <a href=\"https://bootstrap.pypa.io/ez_setup.py\" target=\"_blank\" rel=\"external\">ez_setup.py</a> 并保存，例如，至C:\\。 然后从命令行使用 Python 运行此文件：</p>\n<pre><code>python C:\\ez_setup.py\n</code></pre><p>添加 ‘Python Scripts’ 路径 (如： C:\\Python27\\Scripts) 至 PATH</p>\n<hr>\n<h3 id=\"一-2-3-安装-Pygments\"><a href=\"#一-2-3-安装-Pygments\" class=\"headerlink\" title=\" *一.2)3.安装 Pygments\"></a><em> <em>*一.2)3.安装 Pygments</em></em></h3><p>确保 easy_install 已经正确安装</p>\n<pre><code>easy_install --version\n</code></pre><p>输出示例：</p>\n<pre><code>setuptools 7.0\n</code></pre><p>使用 “easy_install” 来安装 Pygments</p>\n<pre><code>easy_install Pygments\n</code></pre><hr>\n<h1 id=\"二-配置\"><a href=\"#二-配置\" class=\"headerlink\" title=\"二.配置\"></a>二.配置</h1><hr>\n<h2 id=\"1-配置-config-yml文件\"><a href=\"#1-配置-config-yml文件\" class=\"headerlink\" title=\" *1.配置_config.yml文件\"></a><em> <em>*1.配置_config.yml文件</em></em></h2><p>在 Jekyll 的配置文件 _config.yml 中设置打开 Pygments</p>\n<pre><code>pygments: true\nmardown: redcarpet\n</code></pre><blockquote>\n<p>注意：新版本 Jekyll 中，<code>pygments: true</code> 替换为 <code>highlighter: pygments</code>。  </p>\n</blockquote>\n<hr>\n<h2 id=\"2-生成css文件\"><a href=\"#2-生成css文件\" class=\"headerlink\" title=\" *2.生成css文件\"></a><em> <em>*2.生成css文件</em></em></h2><p>进到我们的网站目录，运行下面代码生成 Pygments 样式</p>\n<pre><code>$ pygmentize -S default -f html &gt; your/path/pygments.css\n</code></pre><hr>\n<h2 id=\"3-导入css文件\"><a href=\"#3-导入css文件\" class=\"headerlink\" title=\" *3.导入css文件\"></a><em> <em>*3.导入css文件</em></em></h2><p>生成的样式文件加到我们的网页中</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;/your/path/pygments.css&quot;&gt;\n</code></pre><hr>\n<h1 id=\"三-使用\"><a href=\"#三-使用\" class=\"headerlink\" title=\"三. 使用\"></a>三. 使用</h1><pre>\n\n语法高亮的代码片段要放在标签对 `{% highlight language %}` 和 `{% endhighlight %}` 之间，\n其中的 language 为[多种语言高亮](http://pygments.org/docs/lexers/)页面中的 Short names。\n\n</pre>\n\n<pre>\n\n\t{% highlight c %}\n\t/* hello world demo */\n\t#include <stdio.h>\n\tint main(int argc, char **argv)\n\t{\n\t    printf(\"Hello, World!\\n\");\n\t    return 0;\n\t}\n\t{% endhighlight %}\n\n</stdio.h></pre>\n\n<p>也可以采用这样的写法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* hello world demo */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, World!\\n\"</span>);</span><br><span class=\"line\">    return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>三个&quot;`&quot;符号需要markdownx解释引擎，\n\nmarkdown: redcarpet\nredcarpet:\n    extensions: [&quot;fenced_code_blocks&quot;, &quot;tables&quot;, &quot;highlight&quot;, &quot;strikethrough&quot;]\n</code></pre><hr>\n<p>生成的 html 高亮结果  以下结束是使用Pygments 样式的 default 与 vs 的并集样式</p>\n<p>C<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* hello world demo */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, World!\\n\"</span>);</span><br><span class=\"line\">    return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.pexcn.activity.demo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"ActivityDemo\"</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.main);</span><br><span class=\"line\">        Log.e(TAG, <span class=\"string\">\"onCreate() start...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"四-Pygments-样式\"><a href=\"#四-Pygments-样式\" class=\"headerlink\" title=\"四. Pygments 样式\"></a>四. Pygments 样式</h1><p>Pygments 样式 默认提供了 monokai、manni、rrt、perldoc、borland、colorful、default 等等，多种的样式。</p>\n<p>可以通过 Python Shell 中用以下命令列出当前 Pygments 支持的样式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> pygments.styles <span class=\"keyword\">import</span> STYLE_MAP</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>STYLE_MAP.keys()</span><br><span class=\"line\">[<span class=\"string\">'manni'</span>, <span class=\"string\">'igor'</span>, <span class=\"string\">'xcode'</span>, <span class=\"string\">'vim'</span>, <span class=\"string\">'autumn'</span>, <span class=\"string\">'vs'</span>, <span class=\"string\">'rrt'</span>, <span class=\"string\">'native'</span>, <span class=\"string\">'perldoc'</span>, <span class=\"string\">'borland'</span>, <span class=\"string\">'tango'</span>, <span class=\"string\">'emacs'</span>, <span class=\"string\">'friendly'</span>, <span class=\"string\">'monokai'</span>, <span class=\"string\">'paraiso-dark'</span>, <span class=\"string\">'colorful'</span>, <span class=\"string\">'murphy'</span>, <span class=\"string\">'bw'</span>, <span class=\"string\">'pastie'</span>, <span class=\"string\">'paraiso-light'</span>, <span class=\"string\">'trac'</span>, <span class=\"string\">'default'</span>, <span class=\"string\">'fruity'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n<p>通过 -S 来选择，需要生成 monokai 的样式：</p>\n<pre><code>$ pygmentize -S monokai -f html &gt; your/path/pygments.css\n</code></pre><p>下面是 pygments 个各样式 show：</p>\n<ul>\n<li><strong>monokai</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-monokai.png\" alt=\"pygments-monokai\">  </p>\n<ul>\n<li><strong>autumn</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-autumn.png\" alt=\"pygments-autumn\">  </p>\n<ul>\n<li><strong>borland</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-borland.png\" alt=\"pygments-borland\">  </p>\n<ul>\n<li><strong>bw</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-bw.png\" alt=\"pygments-bw\">  </p>\n<ul>\n<li><strong>colorful</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-colorful.png\" alt=\"pygments-colorful\">  </p>\n<ul>\n<li><strong>default</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-default.png\" alt=\"pygments-default\">  </p>\n<ul>\n<li><strong>emacs</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-emacs.png\" alt=\"pygments-emacs\">  </p>\n<ul>\n<li><strong>friendly</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-friendly.png\" alt=\"pygments-friendly\">  </p>\n<ul>\n<li><strong>fruity</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-fruity.png\" alt=\"pygments-fruity\">  </p>\n<ul>\n<li><strong>manni</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-manni.png\" alt=\"pygments-manni\">  </p>\n<ul>\n<li><strong>monokai</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-monokai.png\" alt=\"pygments-monokai\">  </p>\n<ul>\n<li><strong>murphy</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-murphy.png\" alt=\"pygments-murphy\">  </p>\n<ul>\n<li><strong>native</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-native.png\" alt=\"pygments-native\">  </p>\n<ul>\n<li><strong>pastie</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-pastie.png\" alt=\"pygments-pastie\">  </p>\n<ul>\n<li><strong>perldoc</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-perldoc.png\" alt=\"pygments-perldoc\">  </p>\n<ul>\n<li><strong>rrt</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-rrt.png\" alt=\"pygments-rrt\">  </p>\n<ul>\n<li><strong>tango</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-tango.png\" alt=\"pygments-tango\">  </p>\n<ul>\n<li><strong>trac</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-trac.png\" alt=\"pygments-trac\">  </p>\n<ul>\n<li><strong>vim</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-vim.png\" alt=\"pygments-vim\">  </p>\n<ul>\n<li><strong>vs</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-vs.png\" alt=\"pygments-vs\">  </p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考:\"></a>参考:</h1><p><strong><a href=\"http://pygments.org/docs/cmdline/\" target=\"_blank\" rel=\"external\">http://pygments.org/docs/cmdline/</a></strong></p>\n","excerpt":"<hr>\n<p>在安装成功Jekyll环境的情况下.</p>\n<h1 id=\"一-安装Pygments\"><a href=\"#一-安装Pygments\" class=\"headerlink\" title=\"一.安装Pygments\"></a>一.安装Pygments</h1><p>Jekyll 里默认的语法高亮插件是 <a href=\"http://pygments.org/\">Pygments</a>。Pygments <a href=\"http://pygments.org/docs/lexers/\">支持多种语言高亮</a>。</p>\n<h2 id=\"一-1-如果你是linux\"><a href=\"#一-1-如果你是linux\" class=\"headerlink\" title=\"一.1)如果你是linux\"></a><strong>一.1)如果你是linux</strong></h2><h3 id=\"1-安装-pygments\"><a href=\"#1-安装-pygments\" class=\"headerlink\" title=\" *1.安装 pygments\"></a><em> <em>*1.安装 pygments</em></em></h3><p>archlinux:</p>\n<pre><code>$ sudo pacman -S python2-pygments\n</code></pre>","more":"<p>或直接通过 pip 来安装</p>\n<pre><code>$ pip install pygments --user\n</code></pre><h3 id=\"2-安装-pygments-rb\"><a href=\"#2-安装-pygments-rb\" class=\"headerlink\" title=\" *2.安装 pygments.rb\"></a><em> <em>*2.安装 pygments.rb</em></em></h3><p>命令使用: </p>\n<pre><code>$ gem install pygments.rb\n</code></pre><hr>\n<h2 id=\"一-2-如果你是Windows\"><a href=\"#一-2-如果你是Windows\" class=\"headerlink\" title=\"一.2)如果你是Windows\"></a><strong>一.2)如果你是Windows</strong></h2><p>它需要安装 Python 并在网站的配置文件<code>_config.yml</code> 里将 <code>highlighter</code> 的值设置为<code>pygments</code>。</p>\n<p>不久之前，Jekyll 还添加另一个高亮引擎名为 <a href=\"https://github.com/jayferd/rouge\">Rouge</a>， </p>\n<p>尽管暂时不如 Pygments 支持那么多的语言，但它是原生 <a href=\"https://www.ruby-lang.org/zh_cn/\">Ruby</a> 程序，而不需要使用 <a href=\"https://www.python.org/download/\">Python</a> 。 </p>\n<hr>\n<h3 id=\"一-2-1-安装-Python\"><a href=\"#一-2-1-安装-Python\" class=\"headerlink\" title=\" *一.2)1.安装 Python\"></a><em> <em>*一.2)1.安装 Python</em></em></h3><p>前往 <a href=\"http://www.python.org/download/\">http://www.python.org/download/</a><br>下载合适的 Python windows 安装包，如 Python 2.7.8 Windows Installer。</p>\n<p>请注意，Python 2 可能会更合适，因为暂时 Python 3 可能不会正常工作。</p>\n<p>安装</p>\n<pre><code>添加安装路径 (如： C:\\Python27) 至 PATH。\n</code></pre><p>检验 Python 安装是否成功</p>\n<pre><code>python –V\n</code></pre><p>输出示例：</p>\n<pre><code>Python 2.7.8\n</code></pre><hr>\n<h3 id=\"一-2-2-安装-‘Easy-Install’\"><a href=\"#一-2-2-安装-‘Easy-Install’\" class=\"headerlink\" title=\" *一.2)2.安装 ‘Easy Install’\"></a><em> <em>*一.2)2.安装 ‘Easy Install’</em></em></h3><p>浏览 <a href=\"https://pypi.python.org/pypi/setuptools#installation-instructions\">https://pypi.python.org/pypi/setuptools#installation-instructions</a> 来查看详细的安装指南。</p>\n<p>对于 Windows 7 的机器，下载 <a href=\"https://bootstrap.pypa.io/ez_setup.py\">ez_setup.py</a> 并保存，例如，至C:\\。 然后从命令行使用 Python 运行此文件：</p>\n<pre><code>python C:\\ez_setup.py\n</code></pre><p>添加 ‘Python Scripts’ 路径 (如： C:\\Python27\\Scripts) 至 PATH</p>\n<hr>\n<h3 id=\"一-2-3-安装-Pygments\"><a href=\"#一-2-3-安装-Pygments\" class=\"headerlink\" title=\" *一.2)3.安装 Pygments\"></a><em> <em>*一.2)3.安装 Pygments</em></em></h3><p>确保 easy_install 已经正确安装</p>\n<pre><code>easy_install --version\n</code></pre><p>输出示例：</p>\n<pre><code>setuptools 7.0\n</code></pre><p>使用 “easy_install” 来安装 Pygments</p>\n<pre><code>easy_install Pygments\n</code></pre><hr>\n<h1 id=\"二-配置\"><a href=\"#二-配置\" class=\"headerlink\" title=\"二.配置\"></a>二.配置</h1><hr>\n<h2 id=\"1-配置-config-yml文件\"><a href=\"#1-配置-config-yml文件\" class=\"headerlink\" title=\" *1.配置_config.yml文件\"></a><em> <em>*1.配置_config.yml文件</em></em></h2><p>在 Jekyll 的配置文件 _config.yml 中设置打开 Pygments</p>\n<pre><code>pygments: true\nmardown: redcarpet\n</code></pre><blockquote>\n<p>注意：新版本 Jekyll 中，<code>pygments: true</code> 替换为 <code>highlighter: pygments</code>。  </p>\n</blockquote>\n<hr>\n<h2 id=\"2-生成css文件\"><a href=\"#2-生成css文件\" class=\"headerlink\" title=\" *2.生成css文件\"></a><em> <em>*2.生成css文件</em></em></h2><p>进到我们的网站目录，运行下面代码生成 Pygments 样式</p>\n<pre><code>$ pygmentize -S default -f html &gt; your/path/pygments.css\n</code></pre><hr>\n<h2 id=\"3-导入css文件\"><a href=\"#3-导入css文件\" class=\"headerlink\" title=\" *3.导入css文件\"></a><em> <em>*3.导入css文件</em></em></h2><p>生成的样式文件加到我们的网页中</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;/your/path/pygments.css&quot;&gt;\n</code></pre><hr>\n<h1 id=\"三-使用\"><a href=\"#三-使用\" class=\"headerlink\" title=\"三. 使用\"></a>三. 使用</h1><pre>\n\n语法高亮的代码片段要放在标签对 `{% highlight language %}` 和 `{% endhighlight %}` 之间，\n其中的 language 为[多种语言高亮](http://pygments.org/docs/lexers/)页面中的 Short names。\n\n</pre>\n\n<pre>\n\n\t{% highlight c %}\n\t/* hello world demo */\n\t#include <stdio.h>\n\tint main(int argc, char **argv)\n\t{\n\t    printf(\"Hello, World!\\n\");\n\t    return 0;\n\t}\n\t{% endhighlight %}\n\n</pre>\n\n<p>也可以采用这样的写法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* hello world demo */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, World!\\n\"</span>);</span><br><span class=\"line\">    return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>三个&quot;`&quot;符号需要markdownx解释引擎，\n\nmarkdown: redcarpet\nredcarpet:\n    extensions: [&quot;fenced_code_blocks&quot;, &quot;tables&quot;, &quot;highlight&quot;, &quot;strikethrough&quot;]\n</code></pre><hr>\n<p>生成的 html 高亮结果  以下结束是使用Pygments 样式的 default 与 vs 的并集样式</p>\n<p>C<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* hello world demo */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, World!\\n\"</span>);</span><br><span class=\"line\">    return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.pexcn.activity.demo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"ActivityDemo\"</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.main);</span><br><span class=\"line\">        Log.e(TAG, <span class=\"string\">\"onCreate() start...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"四-Pygments-样式\"><a href=\"#四-Pygments-样式\" class=\"headerlink\" title=\"四. Pygments 样式\"></a>四. Pygments 样式</h1><p>Pygments 样式 默认提供了 monokai、manni、rrt、perldoc、borland、colorful、default 等等，多种的样式。</p>\n<p>可以通过 Python Shell 中用以下命令列出当前 Pygments 支持的样式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> pygments.styles <span class=\"keyword\">import</span> STYLE_MAP</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>STYLE_MAP.keys()</span><br><span class=\"line\">[<span class=\"string\">'manni'</span>, <span class=\"string\">'igor'</span>, <span class=\"string\">'xcode'</span>, <span class=\"string\">'vim'</span>, <span class=\"string\">'autumn'</span>, <span class=\"string\">'vs'</span>, <span class=\"string\">'rrt'</span>, <span class=\"string\">'native'</span>, <span class=\"string\">'perldoc'</span>, <span class=\"string\">'borland'</span>, <span class=\"string\">'tango'</span>, <span class=\"string\">'emacs'</span>, <span class=\"string\">'friendly'</span>, <span class=\"string\">'monokai'</span>, <span class=\"string\">'paraiso-dark'</span>, <span class=\"string\">'colorful'</span>, <span class=\"string\">'murphy'</span>, <span class=\"string\">'bw'</span>, <span class=\"string\">'pastie'</span>, <span class=\"string\">'paraiso-light'</span>, <span class=\"string\">'trac'</span>, <span class=\"string\">'default'</span>, <span class=\"string\">'fruity'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n<p>通过 -S 来选择，需要生成 monokai 的样式：</p>\n<pre><code>$ pygmentize -S monokai -f html &gt; your/path/pygments.css\n</code></pre><p>下面是 pygments 个各样式 show：</p>\n<ul>\n<li><strong>monokai</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-monokai.png\" alt=\"pygments-monokai\">  </p>\n<ul>\n<li><strong>autumn</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-autumn.png\" alt=\"pygments-autumn\">  </p>\n<ul>\n<li><strong>borland</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-borland.png\" alt=\"pygments-borland\">  </p>\n<ul>\n<li><strong>bw</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-bw.png\" alt=\"pygments-bw\">  </p>\n<ul>\n<li><strong>colorful</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-colorful.png\" alt=\"pygments-colorful\">  </p>\n<ul>\n<li><strong>default</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-default.png\" alt=\"pygments-default\">  </p>\n<ul>\n<li><strong>emacs</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-emacs.png\" alt=\"pygments-emacs\">  </p>\n<ul>\n<li><strong>friendly</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-friendly.png\" alt=\"pygments-friendly\">  </p>\n<ul>\n<li><strong>fruity</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-fruity.png\" alt=\"pygments-fruity\">  </p>\n<ul>\n<li><strong>manni</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-manni.png\" alt=\"pygments-manni\">  </p>\n<ul>\n<li><strong>monokai</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-monokai.png\" alt=\"pygments-monokai\">  </p>\n<ul>\n<li><strong>murphy</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-murphy.png\" alt=\"pygments-murphy\">  </p>\n<ul>\n<li><strong>native</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-native.png\" alt=\"pygments-native\">  </p>\n<ul>\n<li><strong>pastie</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-pastie.png\" alt=\"pygments-pastie\">  </p>\n<ul>\n<li><strong>perldoc</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-perldoc.png\" alt=\"pygments-perldoc\">  </p>\n<ul>\n<li><strong>rrt</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-rrt.png\" alt=\"pygments-rrt\">  </p>\n<ul>\n<li><strong>tango</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-tango.png\" alt=\"pygments-tango\">  </p>\n<ul>\n<li><strong>trac</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-trac.png\" alt=\"pygments-trac\">  </p>\n<ul>\n<li><strong>vim</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-vim.png\" alt=\"pygments-vim\">  </p>\n<ul>\n<li><strong>vs</strong></li>\n</ul>\n<p><img src=\"/res/img/blog/2014/10/18/pygments-vs.png\" alt=\"pygments-vs\">  </p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考:\"></a>参考:</h1><p><strong><a href=\"http://pygments.org/docs/cmdline/\">http://pygments.org/docs/cmdline/</a></strong></p>"},{"layout":"post","title":"Windows平台配置Jekyll环境并与GitHub连接","duoshuo":true,"date":"2014-10-17T16:00:00.000Z","_content":"\n******\n\n# 1.安装所需要的软件<br />\n* **文本编辑器**(不要使用Windows自带的编辑器) \n\n\t使用如:`notepad++` [http://www.notepad-plus-plus.org/](http://www.notepad-plus-plus.org/)<br />\n* **Railsinstaller**    [http://railsinstaller.org/en](http://railsinstaller.org/en)\n* **Python** [https://www.python.org/downloads/](https://www.python.org/downloads/)\n\t\n\t安装并为python配置环境变量,由于有部分的组件还会依赖到python，  \n\t所以这里建议也安装上python（例如:语法着色器pygments是python组件）\n<!-- more -->\n\n******\n\n# 2.安装完后生成SSH并导入到Github网站\n* **生成SSH**<br />\n\tRailsinstaller安装(默认安装)完后软件提示输入name 其实是Github的用户名 , 输入完后提示输入邮箱 github注册使用的邮箱<br />\n\t以上操作完后会在 `C:\\Users\\用户名\\.ssh文件夹\\`下生成密钥与公钥 `id_rsa`(密钥) 与 `id_rsa.pub`(公钥) \n\n* **导入SSH公钥到GigHub网站** <br />\n\t(作用是使用git提交时可以使用 git@github.com:comtu/comtu.github.io.git 的地址,直接 push 数据到github网站,无需要使用Https链接每次push数据输入用户名密码)<br />\n\t公钥使用文本方式打开复制里面的所有内容(ctrl+A ->ctrl+C 包括空格和新行)--> 登录Gighub网站 --> `settings(设置)` --> `SSH keys` --> `Add SSH key` --> `输入Title`(可随便填写,但建议编写有意义的名字) --> 粘贴内容到`Key`中 --> `Add key`\n\n******\n\n# 3.测试Git连接是否正常\n运行Git Bash (`开始菜单--> RailsInstaller --> Git Bash`) 安装Railsinstaller后会默认在C盘根目录创建一个Sites目录 , 运行的GitBash也会自动定位到Sites目录\n\n* 测试Git连接是否正常输入:`ssh -T git@github.com`\n\n运行会提示:\n\tThe authent icity of host 'github.com(204.232.175.90)' can't be established . \n\tRSA key fingerprint is ......\n\tAry you sure you want to continue connecting (yes/no)? \n\n输入 \n\t`yes`\n\n之后会显示\n\tWarning: Permanently added 'github.com.204.232.175.90' (RSA) to the list of known hosts . \n\tPermission denied (publickey).\n\n******\n\n# 4.修改配置避免jekyll在windows下字符集错误\n\n## 4.1.修改bash的字符集\n\tWin7系统中(C:\\Users\\用户名),Xp系统中(C:\\Documents and Settings\\用户名)下,\n\t找到.bash_profile文件,在其内容里增加如下内容\n\t\tset LC_ALL=en_US.UTF-8\n\t\tset LANG=en_US.UTF-8\n\t注意:\n\t\t在Windows系统下没有办法创建.xxx的文件名,所以可以借用git bash命令行来创建:\n\t\t1. 输入 echo 'set LC_ALL=en_US.UTF-8' > .bash_profile 命令创建一个内容为''内容的文件\n\t\t\tcomtu@CN-CS-PC73 /C/Sites\n\t\t\t$ echo 'set LC_ALL=en_US.UTF-8' > .bash_profile\n\t\t2.文件管理器打开文件目录C:\\Sites 将文件.bash_profile使用文本编辑器的方式打开在内容里面\n\t\t增加成如下内容保存\n\t\t\tset LC_ALL=en_US.UTF-8\n\t\t\tset LANG=en_US.UTF-8\n\t\t\t还有一个行空行\n\t\t3.将.bash_profile文件拷贝到Win7系统中(C:\\Users\\用户名),\n\t\tXp系统中(C:\\Documents and Settings\\用户名)下.\n\n## 4.2.所有文档使用UTF-8无BOM格式\n\t在windows下新建的文本文件默认为ANSI格式,而Jekyll只认UTF-8,可以使用第三方文本编辑器进行格式转换如,\n\t\tnotepad++中转换\n\t\t\t格式-->转为UTF-8无BOM格式\n\t\tEditPlus中转换\n\t\t\t文件-->另存为-->编码(UTF-8)-->选择目录-->保存\n## 4.3.使用Unix换行符\n\t在notepad++中，可以开启“显示所有字符”选项，这样就可以看出文档用的是Windows的换行符还是Unix的换行符。\n\t在这种模式下，Windows的换行符显示的是CR LF，Unix的换行符显示的是LF , MAC 的换行符显示的是CR\n\t\tnotepad++中转换\n\t\t\t编辑-->档案格式转换-->转换为Unix格式\n\t使用是使用Notepad++文档编辑器则可以在创建的时候就默认为Unix格式\n\t\t设置-->首选项-->新建-->格式-->Unix\n\t\t\t\t       编码-->UTF-8(无BOM)\n## 4.4.注意YAML头部的格式\n\t模板文件的元数据以YAML的格式展现，YAML头部经常会出现三个问题：\n\t\t1.三短线前面不能有空格；\n\t\t2.“名: 值”对里冒号后面要有空格；\n\t\t3.回车后不要有Tab符；\n\t\t4.示数组成员开始的-号后面要有空格\n\n******\n\n# 5.安装jekyll和相关的包\n\t在国内需要配置gem数据源地址,翻墙或者在国外则无需设置\n\t\t输入以下两条命令:\n\t\t\t命令: gem sources --remove http://rubygems.org/\n\t\t\t命令: gem sources -a http://ruby.taobao.org/\n\t\t然后用 命令: gem sources -l 看看现在源列表\n\t\t\t*** CURRENT SOURCES ***\n\t\t\thttp://ruby.taobao.org\n\t\t如果显示如上信息则可以进行安装Jekyll了 \n\t\t\t命令: gem install jekyll\n\t\tJekyll需要用到directory_watcher、liquid、open4、maruku和classifier这几个包，用上面的命令可以自动安装。\n\t\tJekyll默认用maruku来解析markdown语言，你也可以用别的程序来解析，比如rdiscount或kramdown，都给装上吧：\n\t\t\t命令: gem install rdiscount kramdown\n\n\t\t以上命令涉及到gem install的时候，如果你用的是linux系统，就要用sudo gem install代替。\n\n\n* **参考资料:**\n\n> [Github Pages极简教程](http://yanping.me/cn/blog/2012/03/18/github-pages-step-by-step/)  \n> [【译文】用Jekyll构建静态网站](http://yanping.me/cn/blog/2011/12/15/building-static-sites-with-jekyll/) [原文Building Static Sites with Jekyll](http://code.tutsplus.com/tutorials/building-static-sites-with-jekyll--net-22211)  \n> [为 Jekyll 添加多说评论系统](http://havee.me/internet/2013-07/add-duoshuo-commemt-system-into-jekyll.html)  \n> [在 Windows 上安装 Jekyll](http://cn.yizeng.me/2013/05/10/setup-jekyll-on-windows/#troubleshooting)  \n> [Jekyll 中的语法高亮：Pygments](http://comtu.github.io/blog/2014/10/18/support-pygments-in-Jekyll.html)  \n> [Jekyll 扩展的 Liquid 设计](http://havee.me/internet/2013-11/jekyll-liquid-designers.html)  [原文Liquid for Designers](https://github.com/shopify/liquid/wiki/liquid-for-designers)  \n\n","source":"_posts/2014-10-18-windows_configuration_Jekyll.md","raw":"---\nlayout : post\ntitle : \"Windows平台配置Jekyll环境并与GitHub连接\"\ncategory : Jekyll\nduoshuo: true\ndate : 2014-10-18\ntags : [Jekyll , GitHub]\n---\n\n******\n\n# 1.安装所需要的软件<br />\n* **文本编辑器**(不要使用Windows自带的编辑器) \n\n\t使用如:`notepad++` [http://www.notepad-plus-plus.org/](http://www.notepad-plus-plus.org/)<br />\n* **Railsinstaller**    [http://railsinstaller.org/en](http://railsinstaller.org/en)\n* **Python** [https://www.python.org/downloads/](https://www.python.org/downloads/)\n\t\n\t安装并为python配置环境变量,由于有部分的组件还会依赖到python，  \n\t所以这里建议也安装上python（例如:语法着色器pygments是python组件）\n<!-- more -->\n\n******\n\n# 2.安装完后生成SSH并导入到Github网站\n* **生成SSH**<br />\n\tRailsinstaller安装(默认安装)完后软件提示输入name 其实是Github的用户名 , 输入完后提示输入邮箱 github注册使用的邮箱<br />\n\t以上操作完后会在 `C:\\Users\\用户名\\.ssh文件夹\\`下生成密钥与公钥 `id_rsa`(密钥) 与 `id_rsa.pub`(公钥) \n\n* **导入SSH公钥到GigHub网站** <br />\n\t(作用是使用git提交时可以使用 git@github.com:comtu/comtu.github.io.git 的地址,直接 push 数据到github网站,无需要使用Https链接每次push数据输入用户名密码)<br />\n\t公钥使用文本方式打开复制里面的所有内容(ctrl+A ->ctrl+C 包括空格和新行)--> 登录Gighub网站 --> `settings(设置)` --> `SSH keys` --> `Add SSH key` --> `输入Title`(可随便填写,但建议编写有意义的名字) --> 粘贴内容到`Key`中 --> `Add key`\n\n******\n\n# 3.测试Git连接是否正常\n运行Git Bash (`开始菜单--> RailsInstaller --> Git Bash`) 安装Railsinstaller后会默认在C盘根目录创建一个Sites目录 , 运行的GitBash也会自动定位到Sites目录\n\n* 测试Git连接是否正常输入:`ssh -T git@github.com`\n\n运行会提示:\n\tThe authent icity of host 'github.com(204.232.175.90)' can't be established . \n\tRSA key fingerprint is ......\n\tAry you sure you want to continue connecting (yes/no)? \n\n输入 \n\t`yes`\n\n之后会显示\n\tWarning: Permanently added 'github.com.204.232.175.90' (RSA) to the list of known hosts . \n\tPermission denied (publickey).\n\n******\n\n# 4.修改配置避免jekyll在windows下字符集错误\n\n## 4.1.修改bash的字符集\n\tWin7系统中(C:\\Users\\用户名),Xp系统中(C:\\Documents and Settings\\用户名)下,\n\t找到.bash_profile文件,在其内容里增加如下内容\n\t\tset LC_ALL=en_US.UTF-8\n\t\tset LANG=en_US.UTF-8\n\t注意:\n\t\t在Windows系统下没有办法创建.xxx的文件名,所以可以借用git bash命令行来创建:\n\t\t1. 输入 echo 'set LC_ALL=en_US.UTF-8' > .bash_profile 命令创建一个内容为''内容的文件\n\t\t\tcomtu@CN-CS-PC73 /C/Sites\n\t\t\t$ echo 'set LC_ALL=en_US.UTF-8' > .bash_profile\n\t\t2.文件管理器打开文件目录C:\\Sites 将文件.bash_profile使用文本编辑器的方式打开在内容里面\n\t\t增加成如下内容保存\n\t\t\tset LC_ALL=en_US.UTF-8\n\t\t\tset LANG=en_US.UTF-8\n\t\t\t还有一个行空行\n\t\t3.将.bash_profile文件拷贝到Win7系统中(C:\\Users\\用户名),\n\t\tXp系统中(C:\\Documents and Settings\\用户名)下.\n\n## 4.2.所有文档使用UTF-8无BOM格式\n\t在windows下新建的文本文件默认为ANSI格式,而Jekyll只认UTF-8,可以使用第三方文本编辑器进行格式转换如,\n\t\tnotepad++中转换\n\t\t\t格式-->转为UTF-8无BOM格式\n\t\tEditPlus中转换\n\t\t\t文件-->另存为-->编码(UTF-8)-->选择目录-->保存\n## 4.3.使用Unix换行符\n\t在notepad++中，可以开启“显示所有字符”选项，这样就可以看出文档用的是Windows的换行符还是Unix的换行符。\n\t在这种模式下，Windows的换行符显示的是CR LF，Unix的换行符显示的是LF , MAC 的换行符显示的是CR\n\t\tnotepad++中转换\n\t\t\t编辑-->档案格式转换-->转换为Unix格式\n\t使用是使用Notepad++文档编辑器则可以在创建的时候就默认为Unix格式\n\t\t设置-->首选项-->新建-->格式-->Unix\n\t\t\t\t       编码-->UTF-8(无BOM)\n## 4.4.注意YAML头部的格式\n\t模板文件的元数据以YAML的格式展现，YAML头部经常会出现三个问题：\n\t\t1.三短线前面不能有空格；\n\t\t2.“名: 值”对里冒号后面要有空格；\n\t\t3.回车后不要有Tab符；\n\t\t4.示数组成员开始的-号后面要有空格\n\n******\n\n# 5.安装jekyll和相关的包\n\t在国内需要配置gem数据源地址,翻墙或者在国外则无需设置\n\t\t输入以下两条命令:\n\t\t\t命令: gem sources --remove http://rubygems.org/\n\t\t\t命令: gem sources -a http://ruby.taobao.org/\n\t\t然后用 命令: gem sources -l 看看现在源列表\n\t\t\t*** CURRENT SOURCES ***\n\t\t\thttp://ruby.taobao.org\n\t\t如果显示如上信息则可以进行安装Jekyll了 \n\t\t\t命令: gem install jekyll\n\t\tJekyll需要用到directory_watcher、liquid、open4、maruku和classifier这几个包，用上面的命令可以自动安装。\n\t\tJekyll默认用maruku来解析markdown语言，你也可以用别的程序来解析，比如rdiscount或kramdown，都给装上吧：\n\t\t\t命令: gem install rdiscount kramdown\n\n\t\t以上命令涉及到gem install的时候，如果你用的是linux系统，就要用sudo gem install代替。\n\n\n* **参考资料:**\n\n> [Github Pages极简教程](http://yanping.me/cn/blog/2012/03/18/github-pages-step-by-step/)  \n> [【译文】用Jekyll构建静态网站](http://yanping.me/cn/blog/2011/12/15/building-static-sites-with-jekyll/) [原文Building Static Sites with Jekyll](http://code.tutsplus.com/tutorials/building-static-sites-with-jekyll--net-22211)  \n> [为 Jekyll 添加多说评论系统](http://havee.me/internet/2013-07/add-duoshuo-commemt-system-into-jekyll.html)  \n> [在 Windows 上安装 Jekyll](http://cn.yizeng.me/2013/05/10/setup-jekyll-on-windows/#troubleshooting)  \n> [Jekyll 中的语法高亮：Pygments](http://comtu.github.io/blog/2014/10/18/support-pygments-in-Jekyll.html)  \n> [Jekyll 扩展的 Liquid 设计](http://havee.me/internet/2013-11/jekyll-liquid-designers.html)  [原文Liquid for Designers](https://github.com/shopify/liquid/wiki/liquid-for-designers)  \n\n","slug":"windows_configuration_Jekyll","published":1,"updated":"2016-04-27T08:26:55.359Z","comments":1,"photos":[],"link":"","_id":"cinu3etws0006xoj0di3vv9ju","content":"<hr>\n<h1 id=\"1-安装所需要的软件\"><a href=\"#1-安装所需要的软件\" class=\"headerlink\" title=\"1.安装所需要的软件\"></a>1.安装所需要的软件<br></h1><ul>\n<li><p><strong>文本编辑器</strong>(不要使用Windows自带的编辑器) </p>\n<p>  使用如:<code>notepad++</code> <a href=\"http://www.notepad-plus-plus.org/\" target=\"_blank\" rel=\"external\">http://www.notepad-plus-plus.org/</a><br></p>\n</li>\n<li><strong>Railsinstaller</strong>    <a href=\"http://railsinstaller.org/en\" target=\"_blank\" rel=\"external\">http://railsinstaller.org/en</a></li>\n<li><p><strong>Python</strong> <a href=\"https://www.python.org/downloads/\" target=\"_blank\" rel=\"external\">https://www.python.org/downloads/</a></p>\n<p>  安装并为python配置环境变量,由于有部分的组件还会依赖到python，<br>  所以这里建议也安装上python（例如:语法着色器pygments是python组件）</p>\n<a id=\"more\"></a>\n</li>\n</ul>\n<hr>\n<h1 id=\"2-安装完后生成SSH并导入到Github网站\"><a href=\"#2-安装完后生成SSH并导入到Github网站\" class=\"headerlink\" title=\"2.安装完后生成SSH并导入到Github网站\"></a>2.安装完后生成SSH并导入到Github网站</h1><ul>\n<li><p><strong>生成SSH</strong><br><br>  Railsinstaller安装(默认安装)完后软件提示输入name 其实是Github的用户名 , 输入完后提示输入邮箱 github注册使用的邮箱<br><br>  以上操作完后会在 <code>C:\\Users\\用户名\\.ssh文件夹\\</code>下生成密钥与公钥 <code>id_rsa</code>(密钥) 与 <code>id_rsa.pub</code>(公钥) </p>\n</li>\n<li><p><strong>导入SSH公钥到GigHub网站</strong> <br><br>  (作用是使用git提交时可以使用 git@github.com:comtu/comtu.github.io.git 的地址,直接 push 数据到github网站,无需要使用Https链接每次push数据输入用户名密码)<br><br>  公钥使用文本方式打开复制里面的所有内容(ctrl+A -&gt;ctrl+C 包括空格和新行)–&gt; 登录Gighub网站 –&gt; <code>settings(设置)</code> –&gt; <code>SSH keys</code> –&gt; <code>Add SSH key</code> –&gt; <code>输入Title</code>(可随便填写,但建议编写有意义的名字) –&gt; 粘贴内容到<code>Key</code>中 –&gt; <code>Add key</code></p>\n</li>\n</ul>\n<hr>\n<h1 id=\"3-测试Git连接是否正常\"><a href=\"#3-测试Git连接是否正常\" class=\"headerlink\" title=\"3.测试Git连接是否正常\"></a>3.测试Git连接是否正常</h1><p>运行Git Bash (<code>开始菜单--&gt; RailsInstaller --&gt; Git Bash</code>) 安装Railsinstaller后会默认在C盘根目录创建一个Sites目录 , 运行的GitBash也会自动定位到Sites目录</p>\n<ul>\n<li>测试Git连接是否正常输入:<code>ssh -T git@github.com</code></li>\n</ul>\n<p>运行会提示:<br>    The authent icity of host ‘github.com(204.232.175.90)’ can’t be established .<br>    RSA key fingerprint is ……<br>    Ary you sure you want to continue connecting (yes/no)? </p>\n<p>输入<br>    <code>yes</code></p>\n<p>之后会显示<br>    Warning: Permanently added ‘github.com.204.232.175.90’ (RSA) to the list of known hosts .<br>    Permission denied (publickey).</p>\n<hr>\n<h1 id=\"4-修改配置避免jekyll在windows下字符集错误\"><a href=\"#4-修改配置避免jekyll在windows下字符集错误\" class=\"headerlink\" title=\"4.修改配置避免jekyll在windows下字符集错误\"></a>4.修改配置避免jekyll在windows下字符集错误</h1><h2 id=\"4-1-修改bash的字符集\"><a href=\"#4-1-修改bash的字符集\" class=\"headerlink\" title=\"4.1.修改bash的字符集\"></a>4.1.修改bash的字符集</h2><pre><code>Win7系统中(C:\\Users\\用户名),Xp系统中(C:\\Documents and Settings\\用户名)下,\n找到.bash_profile文件,在其内容里增加如下内容\n    set LC_ALL=en_US.UTF-8\n    set LANG=en_US.UTF-8\n注意:\n    在Windows系统下没有办法创建.xxx的文件名,所以可以借用git bash命令行来创建:\n    1. 输入 echo &apos;set LC_ALL=en_US.UTF-8&apos; &gt; .bash_profile 命令创建一个内容为&apos;&apos;内容的文件\n        comtu@CN-CS-PC73 /C/Sites\n        $ echo &apos;set LC_ALL=en_US.UTF-8&apos; &gt; .bash_profile\n    2.文件管理器打开文件目录C:\\Sites 将文件.bash_profile使用文本编辑器的方式打开在内容里面\n    增加成如下内容保存\n        set LC_ALL=en_US.UTF-8\n        set LANG=en_US.UTF-8\n        还有一个行空行\n    3.将.bash_profile文件拷贝到Win7系统中(C:\\Users\\用户名),\n    Xp系统中(C:\\Documents and Settings\\用户名)下.\n</code></pre><h2 id=\"4-2-所有文档使用UTF-8无BOM格式\"><a href=\"#4-2-所有文档使用UTF-8无BOM格式\" class=\"headerlink\" title=\"4.2.所有文档使用UTF-8无BOM格式\"></a>4.2.所有文档使用UTF-8无BOM格式</h2><pre><code>在windows下新建的文本文件默认为ANSI格式,而Jekyll只认UTF-8,可以使用第三方文本编辑器进行格式转换如,\n    notepad++中转换\n        格式--&gt;转为UTF-8无BOM格式\n    EditPlus中转换\n        文件--&gt;另存为--&gt;编码(UTF-8)--&gt;选择目录--&gt;保存\n</code></pre><h2 id=\"4-3-使用Unix换行符\"><a href=\"#4-3-使用Unix换行符\" class=\"headerlink\" title=\"4.3.使用Unix换行符\"></a>4.3.使用Unix换行符</h2><pre><code>在notepad++中，可以开启“显示所有字符”选项，这样就可以看出文档用的是Windows的换行符还是Unix的换行符。\n在这种模式下，Windows的换行符显示的是CR LF，Unix的换行符显示的是LF , MAC 的换行符显示的是CR\n    notepad++中转换\n        编辑--&gt;档案格式转换--&gt;转换为Unix格式\n使用是使用Notepad++文档编辑器则可以在创建的时候就默认为Unix格式\n    设置--&gt;首选项--&gt;新建--&gt;格式--&gt;Unix\n                   编码--&gt;UTF-8(无BOM)\n</code></pre><h2 id=\"4-4-注意YAML头部的格式\"><a href=\"#4-4-注意YAML头部的格式\" class=\"headerlink\" title=\"4.4.注意YAML头部的格式\"></a>4.4.注意YAML头部的格式</h2><pre><code>模板文件的元数据以YAML的格式展现，YAML头部经常会出现三个问题：\n    1.三短线前面不能有空格；\n    2.“名: 值”对里冒号后面要有空格；\n    3.回车后不要有Tab符；\n    4.示数组成员开始的-号后面要有空格\n</code></pre><hr>\n<h1 id=\"5-安装jekyll和相关的包\"><a href=\"#5-安装jekyll和相关的包\" class=\"headerlink\" title=\"5.安装jekyll和相关的包\"></a>5.安装jekyll和相关的包</h1><pre><code>在国内需要配置gem数据源地址,翻墙或者在国外则无需设置\n    输入以下两条命令:\n        命令: gem sources --remove http://rubygems.org/\n        命令: gem sources -a http://ruby.taobao.org/\n    然后用 命令: gem sources -l 看看现在源列表\n        *** CURRENT SOURCES ***\n        http://ruby.taobao.org\n    如果显示如上信息则可以进行安装Jekyll了 \n        命令: gem install jekyll\n    Jekyll需要用到directory_watcher、liquid、open4、maruku和classifier这几个包，用上面的命令可以自动安装。\n    Jekyll默认用maruku来解析markdown语言，你也可以用别的程序来解析，比如rdiscount或kramdown，都给装上吧：\n        命令: gem install rdiscount kramdown\n\n    以上命令涉及到gem install的时候，如果你用的是linux系统，就要用sudo gem install代替。\n</code></pre><ul>\n<li><strong>参考资料:</strong></li>\n</ul>\n<blockquote>\n<p><a href=\"http://yanping.me/cn/blog/2012/03/18/github-pages-step-by-step/\" target=\"_blank\" rel=\"external\">Github Pages极简教程</a><br><a href=\"http://yanping.me/cn/blog/2011/12/15/building-static-sites-with-jekyll/\" target=\"_blank\" rel=\"external\">【译文】用Jekyll构建静态网站</a> <a href=\"http://code.tutsplus.com/tutorials/building-static-sites-with-jekyll--net-22211\" target=\"_blank\" rel=\"external\">原文Building Static Sites with Jekyll</a><br><a href=\"http://havee.me/internet/2013-07/add-duoshuo-commemt-system-into-jekyll.html\" target=\"_blank\" rel=\"external\">为 Jekyll 添加多说评论系统</a><br><a href=\"http://cn.yizeng.me/2013/05/10/setup-jekyll-on-windows/#troubleshooting\" target=\"_blank\" rel=\"external\">在 Windows 上安装 Jekyll</a><br><a href=\"http://comtu.github.io/blog/2014/10/18/support-pygments-in-Jekyll.html\" target=\"_blank\" rel=\"external\">Jekyll 中的语法高亮：Pygments</a><br><a href=\"http://havee.me/internet/2013-11/jekyll-liquid-designers.html\" target=\"_blank\" rel=\"external\">Jekyll 扩展的 Liquid 设计</a>  <a href=\"https://github.com/shopify/liquid/wiki/liquid-for-designers\" target=\"_blank\" rel=\"external\">原文Liquid for Designers</a>  </p>\n</blockquote>\n","excerpt":"<hr>\n<h1 id=\"1-安装所需要的软件\"><a href=\"#1-安装所需要的软件\" class=\"headerlink\" title=\"1.安装所需要的软件\"></a>1.安装所需要的软件<br /></h1><ul>\n<li><p><strong>文本编辑器</strong>(不要使用Windows自带的编辑器) </p>\n<p>  使用如:<code>notepad++</code> <a href=\"http://www.notepad-plus-plus.org/\">http://www.notepad-plus-plus.org/</a><br /></p>\n</li>\n<li><strong>Railsinstaller</strong>    <a href=\"http://railsinstaller.org/en\">http://railsinstaller.org/en</a></li>\n<li><p><strong>Python</strong> <a href=\"https://www.python.org/downloads/\">https://www.python.org/downloads/</a></p>\n<p>  安装并为python配置环境变量,由于有部分的组件还会依赖到python，<br>  所以这里建议也安装上python（例如:语法着色器pygments是python组件）</p>","more":"</li>\n</ul>\n<hr>\n<h1 id=\"2-安装完后生成SSH并导入到Github网站\"><a href=\"#2-安装完后生成SSH并导入到Github网站\" class=\"headerlink\" title=\"2.安装完后生成SSH并导入到Github网站\"></a>2.安装完后生成SSH并导入到Github网站</h1><ul>\n<li><p><strong>生成SSH</strong><br /><br>  Railsinstaller安装(默认安装)完后软件提示输入name 其实是Github的用户名 , 输入完后提示输入邮箱 github注册使用的邮箱<br /><br>  以上操作完后会在 <code>C:\\Users\\用户名\\.ssh文件夹\\</code>下生成密钥与公钥 <code>id_rsa</code>(密钥) 与 <code>id_rsa.pub</code>(公钥) </p>\n</li>\n<li><p><strong>导入SSH公钥到GigHub网站</strong> <br /><br>  (作用是使用git提交时可以使用 git@github.com:comtu/comtu.github.io.git 的地址,直接 push 数据到github网站,无需要使用Https链接每次push数据输入用户名密码)<br /><br>  公钥使用文本方式打开复制里面的所有内容(ctrl+A -&gt;ctrl+C 包括空格和新行)–&gt; 登录Gighub网站 –&gt; <code>settings(设置)</code> –&gt; <code>SSH keys</code> –&gt; <code>Add SSH key</code> –&gt; <code>输入Title</code>(可随便填写,但建议编写有意义的名字) –&gt; 粘贴内容到<code>Key</code>中 –&gt; <code>Add key</code></p>\n</li>\n</ul>\n<hr>\n<h1 id=\"3-测试Git连接是否正常\"><a href=\"#3-测试Git连接是否正常\" class=\"headerlink\" title=\"3.测试Git连接是否正常\"></a>3.测试Git连接是否正常</h1><p>运行Git Bash (<code>开始菜单--&gt; RailsInstaller --&gt; Git Bash</code>) 安装Railsinstaller后会默认在C盘根目录创建一个Sites目录 , 运行的GitBash也会自动定位到Sites目录</p>\n<ul>\n<li>测试Git连接是否正常输入:<code>ssh -T git@github.com</code></li>\n</ul>\n<p>运行会提示:<br>    The authent icity of host ‘github.com(204.232.175.90)’ can’t be established .<br>    RSA key fingerprint is ……<br>    Ary you sure you want to continue connecting (yes/no)? </p>\n<p>输入<br>    <code>yes</code></p>\n<p>之后会显示<br>    Warning: Permanently added ‘github.com.204.232.175.90’ (RSA) to the list of known hosts .<br>    Permission denied (publickey).</p>\n<hr>\n<h1 id=\"4-修改配置避免jekyll在windows下字符集错误\"><a href=\"#4-修改配置避免jekyll在windows下字符集错误\" class=\"headerlink\" title=\"4.修改配置避免jekyll在windows下字符集错误\"></a>4.修改配置避免jekyll在windows下字符集错误</h1><h2 id=\"4-1-修改bash的字符集\"><a href=\"#4-1-修改bash的字符集\" class=\"headerlink\" title=\"4.1.修改bash的字符集\"></a>4.1.修改bash的字符集</h2><pre><code>Win7系统中(C:\\Users\\用户名),Xp系统中(C:\\Documents and Settings\\用户名)下,\n找到.bash_profile文件,在其内容里增加如下内容\n    set LC_ALL=en_US.UTF-8\n    set LANG=en_US.UTF-8\n注意:\n    在Windows系统下没有办法创建.xxx的文件名,所以可以借用git bash命令行来创建:\n    1. 输入 echo &apos;set LC_ALL=en_US.UTF-8&apos; &gt; .bash_profile 命令创建一个内容为&apos;&apos;内容的文件\n        comtu@CN-CS-PC73 /C/Sites\n        $ echo &apos;set LC_ALL=en_US.UTF-8&apos; &gt; .bash_profile\n    2.文件管理器打开文件目录C:\\Sites 将文件.bash_profile使用文本编辑器的方式打开在内容里面\n    增加成如下内容保存\n        set LC_ALL=en_US.UTF-8\n        set LANG=en_US.UTF-8\n        还有一个行空行\n    3.将.bash_profile文件拷贝到Win7系统中(C:\\Users\\用户名),\n    Xp系统中(C:\\Documents and Settings\\用户名)下.\n</code></pre><h2 id=\"4-2-所有文档使用UTF-8无BOM格式\"><a href=\"#4-2-所有文档使用UTF-8无BOM格式\" class=\"headerlink\" title=\"4.2.所有文档使用UTF-8无BOM格式\"></a>4.2.所有文档使用UTF-8无BOM格式</h2><pre><code>在windows下新建的文本文件默认为ANSI格式,而Jekyll只认UTF-8,可以使用第三方文本编辑器进行格式转换如,\n    notepad++中转换\n        格式--&gt;转为UTF-8无BOM格式\n    EditPlus中转换\n        文件--&gt;另存为--&gt;编码(UTF-8)--&gt;选择目录--&gt;保存\n</code></pre><h2 id=\"4-3-使用Unix换行符\"><a href=\"#4-3-使用Unix换行符\" class=\"headerlink\" title=\"4.3.使用Unix换行符\"></a>4.3.使用Unix换行符</h2><pre><code>在notepad++中，可以开启“显示所有字符”选项，这样就可以看出文档用的是Windows的换行符还是Unix的换行符。\n在这种模式下，Windows的换行符显示的是CR LF，Unix的换行符显示的是LF , MAC 的换行符显示的是CR\n    notepad++中转换\n        编辑--&gt;档案格式转换--&gt;转换为Unix格式\n使用是使用Notepad++文档编辑器则可以在创建的时候就默认为Unix格式\n    设置--&gt;首选项--&gt;新建--&gt;格式--&gt;Unix\n                   编码--&gt;UTF-8(无BOM)\n</code></pre><h2 id=\"4-4-注意YAML头部的格式\"><a href=\"#4-4-注意YAML头部的格式\" class=\"headerlink\" title=\"4.4.注意YAML头部的格式\"></a>4.4.注意YAML头部的格式</h2><pre><code>模板文件的元数据以YAML的格式展现，YAML头部经常会出现三个问题：\n    1.三短线前面不能有空格；\n    2.“名: 值”对里冒号后面要有空格；\n    3.回车后不要有Tab符；\n    4.示数组成员开始的-号后面要有空格\n</code></pre><hr>\n<h1 id=\"5-安装jekyll和相关的包\"><a href=\"#5-安装jekyll和相关的包\" class=\"headerlink\" title=\"5.安装jekyll和相关的包\"></a>5.安装jekyll和相关的包</h1><pre><code>在国内需要配置gem数据源地址,翻墙或者在国外则无需设置\n    输入以下两条命令:\n        命令: gem sources --remove http://rubygems.org/\n        命令: gem sources -a http://ruby.taobao.org/\n    然后用 命令: gem sources -l 看看现在源列表\n        *** CURRENT SOURCES ***\n        http://ruby.taobao.org\n    如果显示如上信息则可以进行安装Jekyll了 \n        命令: gem install jekyll\n    Jekyll需要用到directory_watcher、liquid、open4、maruku和classifier这几个包，用上面的命令可以自动安装。\n    Jekyll默认用maruku来解析markdown语言，你也可以用别的程序来解析，比如rdiscount或kramdown，都给装上吧：\n        命令: gem install rdiscount kramdown\n\n    以上命令涉及到gem install的时候，如果你用的是linux系统，就要用sudo gem install代替。\n</code></pre><ul>\n<li><strong>参考资料:</strong></li>\n</ul>\n<blockquote>\n<p><a href=\"http://yanping.me/cn/blog/2012/03/18/github-pages-step-by-step/\">Github Pages极简教程</a><br><a href=\"http://yanping.me/cn/blog/2011/12/15/building-static-sites-with-jekyll/\">【译文】用Jekyll构建静态网站</a> <a href=\"http://code.tutsplus.com/tutorials/building-static-sites-with-jekyll--net-22211\">原文Building Static Sites with Jekyll</a><br><a href=\"http://havee.me/internet/2013-07/add-duoshuo-commemt-system-into-jekyll.html\">为 Jekyll 添加多说评论系统</a><br><a href=\"http://cn.yizeng.me/2013/05/10/setup-jekyll-on-windows/#troubleshooting\">在 Windows 上安装 Jekyll</a><br><a href=\"http://comtu.github.io/blog/2014/10/18/support-pygments-in-Jekyll.html\">Jekyll 中的语法高亮：Pygments</a><br><a href=\"http://havee.me/internet/2013-11/jekyll-liquid-designers.html\">Jekyll 扩展的 Liquid 设计</a>  <a href=\"https://github.com/shopify/liquid/wiki/liquid-for-designers\">原文Liquid for Designers</a>  </p>\n</blockquote>"},{"layout":"post","title":"Jekyll目录结构与变量","duoshuo":true,"date":"2014-10-18T16:00:00.000Z","_content":"\n# Jekyll 目录及一些说明\n\n## Jekyll 标准目录树\n\n\t_config.yml   Jekyll的配置文件\n\t_includes     include 文件所在的文件夹\n\t_layouts      模版文件夹\n\t_posts        自己要发布的内容\n\t_sites        预览时产生的文件都放在该文件夹中\n\n<!-- more -->\n\n## Jekyll的安装及配置\n\n> * _includes文件夹中所放的文件是最终要放到模版中的一些代码片段。 \n\n> * _layouts中放的一些模版，模版是用包含page或post内容的。Jekyll的模版使用HTML语法来写，并包含YAML Front Matter。所有的模版都可用Liquid来与网站进行交互。所的的模版都可以使用全局变量site和page，site变量包含该网站所有可以接触得到的内容和元数据(meta-data)，page变量包含的是当前渲染的page或post的所有可以接触得到的数据。 \n\n> * _post文件夹中放的是自己要发布的post文章。post文件的命名规则为YEAR-MONTH-DATE-title.MARKUP，使用rake post会自动将post文件命名合适。而对于page，所有放在根目录下或不以下划线开头的文件夹中有格式的文件都会被Jekyll处理成page。这里说的有格式是指文件含有YAML Front Matter。所有的post和page都要用markdown或者texile或者HTML语法来写，并可以包含Liquid模版的语法。还要有 YAML Front Matter (Jekyll只处理具有YAML Front Matter的文件)。YAML Front Matter必须放在文件的开头，一对---之间，用户可在这一对---间设置预先定义的变量或用户自己的数据\n\n---\n\n## Jekyll模板全局变量\n\n|变量|描述|\n|---|:---|---:|:---:|\n|site|全站的信息+_config.yml文件中的配置选项\n|page|这个变量中包含YAML前置数据,另外加上两个额外的变量值:url和content。\n|content|在布局模板文件中，这里变量包含了页面的子视图。这个变量将会把渲染后的内容插入到模板文件中。这个变量不能在文章和页面文件中使用。\n|paginator|一旦paginate配置选项被设置了，这个变量才能被使用。\n\n\n---\n\n## Jekyll模板Site变量\n\n|变量|描述|\n|---|:---|---:|:---:|\n|site.time|当前的时间(当你运行Jekyll时的时间)\n|site.posts|一个按时间逆序的文章列表。\n|site.related_posts|如果当前被处理的页面是一个文章文件，那这个变量是一个包含了最多10篇相关文章的列表。默认来说，这些相关文章是低质量但计算快的。为了得到高质量但计算慢的结果，运行Jekyll命令时可以加上--lsi选项。(潜在语意索引)\n|site.categories.CATEGORY|所有在CATEGORY分类中的文章列表\n|site.tags.TAG|所有拥有TAG标签的文章的列表\n|site.[CONFIGURATION_DATA]|截止0.5.2版本，所有在_config.yml中的数据都能够通过site变量调用。举例来说，如果你有一个这样的选项在你的配置文件中:url: http://higrid.net，那在文章和页面文件中可以这样调用{ { site.url } }。Jekyll并不会自动解析修改过的_config.yml文件，你想要启用新的设置选项，你需要重启Jekyll\n\n---\n\n\n## Jekyll模板Page变量\n\n|变量|描述|\n|---|:---|---:|:---:|\n|page.content|\t页面中未渲染的内容\n|page.title|\t文章的标题\n|page.url|\t除去域名以外的URL，例子:/2013/12/14/higrid-net.html\n|page.date|\t指定每一篇文章的时间，这个选项能够覆盖一篇文章中前置数据设置的时间，它的格式是这样的:YYYY-MM-DD HH:MM:SS\n|page.id|\t每一篇文章的唯一标示符(在RSS中非常有用) 例子：/2008/12/14/higrid-net\n|page.categories|\t这篇文章隶属的分类的一个列表，分类是通过在_post目录中的目录结构推导而来的。举例来说，在路径/work/code/_posts/2008-12-24-closures.textile下的文件，这个变量将会是[work,code]。这个变量也能在YAML前置数据中被指定。\n|page.tags|\t这篇文章的标签的列表。这些数据能够在YAML前置数据中指定\n|page.next|\t按时间序的下一篇文章\n|page.content|按时间序的上一篇文章\n\n> 注意:任何你自己指定的自定义前置数据都能够通过page调用。举例来说，如果你在页面的前置数据中设置了custom_css: true，那这个值可以在模板可以这样调用:page.custom_css\n\n---\n\n## Jekyll模板Paginator变量\n\n|变量|描述|\n|---|:---|---:|:---:|\n|paginator.per_page|\t每一个页面上文章的数量\n|paginator.posts|\t当前页面上可用的文章\n|paginator.total_posts\t|所有文章的数量\n|paginator.total_pages|\t所有页面的数量\n|paginator.page\t|当前页面的数量\n|paginator.previous_page|\t前面的页面的数量\n|paginator.next_page\t|接下来的的页面的数量\n\n\n---\n\n## Post或Page的创建及发布\n\n创建Post文章\n\n\trake post title=\"文章标题\"\n\n会自动创建一个具有合适文件名和YAML Front Matter的文件(使用时将\"文章标题\"替换成你要创建的文章的标题)。\n\n创建Page页面\n\n\trake page name=\"页面名称.md\"   或者\n\trake page name=\"pages/页面名称.md\"\n\n\n发布Post或Page\n\n\tgit add .\n\tgit commit -m '一些说明'\n\tgit push origin master\n\n---\n\n**[[原文地址](http://jekyllrb.com/docs/variables/)]**","source":"_posts/2014-10-19-Jekyll_Variables.md","raw":"---\nlayout : post\ntitle : \"Jekyll目录结构与变量\"\ncategory : Jekyll\nduoshuo: true\ndate : 2014-10-19\ntags : Jekyll\n---\n\n# Jekyll 目录及一些说明\n\n## Jekyll 标准目录树\n\n\t_config.yml   Jekyll的配置文件\n\t_includes     include 文件所在的文件夹\n\t_layouts      模版文件夹\n\t_posts        自己要发布的内容\n\t_sites        预览时产生的文件都放在该文件夹中\n\n<!-- more -->\n\n## Jekyll的安装及配置\n\n> * _includes文件夹中所放的文件是最终要放到模版中的一些代码片段。 \n\n> * _layouts中放的一些模版，模版是用包含page或post内容的。Jekyll的模版使用HTML语法来写，并包含YAML Front Matter。所有的模版都可用Liquid来与网站进行交互。所的的模版都可以使用全局变量site和page，site变量包含该网站所有可以接触得到的内容和元数据(meta-data)，page变量包含的是当前渲染的page或post的所有可以接触得到的数据。 \n\n> * _post文件夹中放的是自己要发布的post文章。post文件的命名规则为YEAR-MONTH-DATE-title.MARKUP，使用rake post会自动将post文件命名合适。而对于page，所有放在根目录下或不以下划线开头的文件夹中有格式的文件都会被Jekyll处理成page。这里说的有格式是指文件含有YAML Front Matter。所有的post和page都要用markdown或者texile或者HTML语法来写，并可以包含Liquid模版的语法。还要有 YAML Front Matter (Jekyll只处理具有YAML Front Matter的文件)。YAML Front Matter必须放在文件的开头，一对---之间，用户可在这一对---间设置预先定义的变量或用户自己的数据\n\n---\n\n## Jekyll模板全局变量\n\n|变量|描述|\n|---|:---|---:|:---:|\n|site|全站的信息+_config.yml文件中的配置选项\n|page|这个变量中包含YAML前置数据,另外加上两个额外的变量值:url和content。\n|content|在布局模板文件中，这里变量包含了页面的子视图。这个变量将会把渲染后的内容插入到模板文件中。这个变量不能在文章和页面文件中使用。\n|paginator|一旦paginate配置选项被设置了，这个变量才能被使用。\n\n\n---\n\n## Jekyll模板Site变量\n\n|变量|描述|\n|---|:---|---:|:---:|\n|site.time|当前的时间(当你运行Jekyll时的时间)\n|site.posts|一个按时间逆序的文章列表。\n|site.related_posts|如果当前被处理的页面是一个文章文件，那这个变量是一个包含了最多10篇相关文章的列表。默认来说，这些相关文章是低质量但计算快的。为了得到高质量但计算慢的结果，运行Jekyll命令时可以加上--lsi选项。(潜在语意索引)\n|site.categories.CATEGORY|所有在CATEGORY分类中的文章列表\n|site.tags.TAG|所有拥有TAG标签的文章的列表\n|site.[CONFIGURATION_DATA]|截止0.5.2版本，所有在_config.yml中的数据都能够通过site变量调用。举例来说，如果你有一个这样的选项在你的配置文件中:url: http://higrid.net，那在文章和页面文件中可以这样调用{ { site.url } }。Jekyll并不会自动解析修改过的_config.yml文件，你想要启用新的设置选项，你需要重启Jekyll\n\n---\n\n\n## Jekyll模板Page变量\n\n|变量|描述|\n|---|:---|---:|:---:|\n|page.content|\t页面中未渲染的内容\n|page.title|\t文章的标题\n|page.url|\t除去域名以外的URL，例子:/2013/12/14/higrid-net.html\n|page.date|\t指定每一篇文章的时间，这个选项能够覆盖一篇文章中前置数据设置的时间，它的格式是这样的:YYYY-MM-DD HH:MM:SS\n|page.id|\t每一篇文章的唯一标示符(在RSS中非常有用) 例子：/2008/12/14/higrid-net\n|page.categories|\t这篇文章隶属的分类的一个列表，分类是通过在_post目录中的目录结构推导而来的。举例来说，在路径/work/code/_posts/2008-12-24-closures.textile下的文件，这个变量将会是[work,code]。这个变量也能在YAML前置数据中被指定。\n|page.tags|\t这篇文章的标签的列表。这些数据能够在YAML前置数据中指定\n|page.next|\t按时间序的下一篇文章\n|page.content|按时间序的上一篇文章\n\n> 注意:任何你自己指定的自定义前置数据都能够通过page调用。举例来说，如果你在页面的前置数据中设置了custom_css: true，那这个值可以在模板可以这样调用:page.custom_css\n\n---\n\n## Jekyll模板Paginator变量\n\n|变量|描述|\n|---|:---|---:|:---:|\n|paginator.per_page|\t每一个页面上文章的数量\n|paginator.posts|\t当前页面上可用的文章\n|paginator.total_posts\t|所有文章的数量\n|paginator.total_pages|\t所有页面的数量\n|paginator.page\t|当前页面的数量\n|paginator.previous_page|\t前面的页面的数量\n|paginator.next_page\t|接下来的的页面的数量\n\n\n---\n\n## Post或Page的创建及发布\n\n创建Post文章\n\n\trake post title=\"文章标题\"\n\n会自动创建一个具有合适文件名和YAML Front Matter的文件(使用时将\"文章标题\"替换成你要创建的文章的标题)。\n\n创建Page页面\n\n\trake page name=\"页面名称.md\"   或者\n\trake page name=\"pages/页面名称.md\"\n\n\n发布Post或Page\n\n\tgit add .\n\tgit commit -m '一些说明'\n\tgit push origin master\n\n---\n\n**[[原文地址](http://jekyllrb.com/docs/variables/)]**","slug":"Jekyll_Variables","published":1,"updated":"2016-04-27T08:23:43.432Z","comments":1,"photos":[],"link":"","_id":"cinu3etww0008xoj05hvkuwy3","content":"<h1 id=\"Jekyll-目录及一些说明\"><a href=\"#Jekyll-目录及一些说明\" class=\"headerlink\" title=\"Jekyll 目录及一些说明\"></a>Jekyll 目录及一些说明</h1><h2 id=\"Jekyll-标准目录树\"><a href=\"#Jekyll-标准目录树\" class=\"headerlink\" title=\"Jekyll 标准目录树\"></a>Jekyll 标准目录树</h2><pre><code>_config.yml   Jekyll的配置文件\n_includes     include 文件所在的文件夹\n_layouts      模版文件夹\n_posts        自己要发布的内容\n_sites        预览时产生的文件都放在该文件夹中\n</code></pre><a id=\"more\"></a>\n<h2 id=\"Jekyll的安装及配置\"><a href=\"#Jekyll的安装及配置\" class=\"headerlink\" title=\"Jekyll的安装及配置\"></a>Jekyll的安装及配置</h2><blockquote>\n<ul>\n<li><p>_includes文件夹中所放的文件是最终要放到模版中的一些代码片段。 </p>\n</li>\n<li><p>_layouts中放的一些模版，模版是用包含page或post内容的。Jekyll的模版使用HTML语法来写，并包含YAML Front Matter。所有的模版都可用Liquid来与网站进行交互。所的的模版都可以使用全局变量site和page，site变量包含该网站所有可以接触得到的内容和元数据(meta-data)，page变量包含的是当前渲染的page或post的所有可以接触得到的数据。 </p>\n</li>\n<li><p>_post文件夹中放的是自己要发布的post文章。post文件的命名规则为YEAR-MONTH-DATE-title.MARKUP，使用rake post会自动将post文件命名合适。而对于page，所有放在根目录下或不以下划线开头的文件夹中有格式的文件都会被Jekyll处理成page。这里说的有格式是指文件含有YAML Front Matter。所有的post和page都要用markdown或者texile或者HTML语法来写，并可以包含Liquid模版的语法。还要有 YAML Front Matter (Jekyll只处理具有YAML Front Matter的文件)。YAML Front Matter必须放在文件的开头，一对—之间，用户可在这一对—间设置预先定义的变量或用户自己的数据</p>\n</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"Jekyll模板全局变量\"><a href=\"#Jekyll模板全局变量\" class=\"headerlink\" title=\"Jekyll模板全局变量\"></a>Jekyll模板全局变量</h2><table>\n<thead>\n<tr>\n<th>变量</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>site</td>\n<td style=\"text-align:left\">全站的信息+_config.yml文件中的配置选项</td>\n</tr>\n<tr>\n<td>page</td>\n<td style=\"text-align:left\">这个变量中包含YAML前置数据,另外加上两个额外的变量值:url和content。</td>\n</tr>\n<tr>\n<td>content</td>\n<td style=\"text-align:left\">在布局模板文件中，这里变量包含了页面的子视图。这个变量将会把渲染后的内容插入到模板文件中。这个变量不能在文章和页面文件中使用。</td>\n</tr>\n<tr>\n<td>paginator</td>\n<td style=\"text-align:left\">一旦paginate配置选项被设置了，这个变量才能被使用。</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Jekyll模板Site变量\"><a href=\"#Jekyll模板Site变量\" class=\"headerlink\" title=\"Jekyll模板Site变量\"></a>Jekyll模板Site变量</h2><table>\n<thead>\n<tr>\n<th>变量</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>site.time</td>\n<td style=\"text-align:left\">当前的时间(当你运行Jekyll时的时间)</td>\n</tr>\n<tr>\n<td>site.posts</td>\n<td style=\"text-align:left\">一个按时间逆序的文章列表。</td>\n</tr>\n<tr>\n<td>site.related_posts</td>\n<td style=\"text-align:left\">如果当前被处理的页面是一个文章文件，那这个变量是一个包含了最多10篇相关文章的列表。默认来说，这些相关文章是低质量但计算快的。为了得到高质量但计算慢的结果，运行Jekyll命令时可以加上–lsi选项。(潜在语意索引)</td>\n</tr>\n<tr>\n<td>site.categories.CATEGORY</td>\n<td style=\"text-align:left\">所有在CATEGORY分类中的文章列表</td>\n</tr>\n<tr>\n<td>site.tags.TAG</td>\n<td style=\"text-align:left\">所有拥有TAG标签的文章的列表</td>\n</tr>\n<tr>\n<td>site.[CONFIGURATION_DATA]</td>\n<td style=\"text-align:left\">截止0.5.2版本，所有在_config.yml中的数据都能够通过site变量调用。举例来说，如果你有一个这样的选项在你的配置文件中:url: <a href=\"http://higrid.net，那在文章和页面文件中可以这样调用{\" target=\"_blank\" rel=\"external\">http://higrid.net，那在文章和页面文件中可以这样调用{</a> { site.url } }。Jekyll并不会自动解析修改过的_config.yml文件，你想要启用新的设置选项，你需要重启Jekyll</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Jekyll模板Page变量\"><a href=\"#Jekyll模板Page变量\" class=\"headerlink\" title=\"Jekyll模板Page变量\"></a>Jekyll模板Page变量</h2><table>\n<thead>\n<tr>\n<th>变量</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>page.content</td>\n<td style=\"text-align:left\">页面中未渲染的内容</td>\n</tr>\n<tr>\n<td>page.title</td>\n<td style=\"text-align:left\">文章的标题</td>\n</tr>\n<tr>\n<td>page.url</td>\n<td style=\"text-align:left\">除去域名以外的URL，例子:/2013/12/14/higrid-net.html</td>\n</tr>\n<tr>\n<td>page.date</td>\n<td style=\"text-align:left\">指定每一篇文章的时间，这个选项能够覆盖一篇文章中前置数据设置的时间，它的格式是这样的:YYYY-MM-DD HH:MM:SS</td>\n</tr>\n<tr>\n<td>page.id</td>\n<td style=\"text-align:left\">每一篇文章的唯一标示符(在RSS中非常有用) 例子：/2008/12/14/higrid-net</td>\n</tr>\n<tr>\n<td>page.categories</td>\n<td style=\"text-align:left\">这篇文章隶属的分类的一个列表，分类是通过在_post目录中的目录结构推导而来的。举例来说，在路径/work/code/_posts/2008-12-24-closures.textile下的文件，这个变量将会是[work,code]。这个变量也能在YAML前置数据中被指定。</td>\n</tr>\n<tr>\n<td>page.tags</td>\n<td style=\"text-align:left\">这篇文章的标签的列表。这些数据能够在YAML前置数据中指定</td>\n</tr>\n<tr>\n<td>page.next</td>\n<td style=\"text-align:left\">按时间序的下一篇文章</td>\n</tr>\n<tr>\n<td>page.content</td>\n<td style=\"text-align:left\">按时间序的上一篇文章</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意:任何你自己指定的自定义前置数据都能够通过page调用。举例来说，如果你在页面的前置数据中设置了custom_css: true，那这个值可以在模板可以这样调用:page.custom_css</p>\n</blockquote>\n<hr>\n<h2 id=\"Jekyll模板Paginator变量\"><a href=\"#Jekyll模板Paginator变量\" class=\"headerlink\" title=\"Jekyll模板Paginator变量\"></a>Jekyll模板Paginator变量</h2><table>\n<thead>\n<tr>\n<th>变量</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>paginator.per_page</td>\n<td style=\"text-align:left\">每一个页面上文章的数量</td>\n</tr>\n<tr>\n<td>paginator.posts</td>\n<td style=\"text-align:left\">当前页面上可用的文章</td>\n</tr>\n<tr>\n<td>paginator.total_posts</td>\n<td style=\"text-align:left\">所有文章的数量</td>\n</tr>\n<tr>\n<td>paginator.total_pages</td>\n<td style=\"text-align:left\">所有页面的数量</td>\n</tr>\n<tr>\n<td>paginator.page</td>\n<td style=\"text-align:left\">当前页面的数量</td>\n</tr>\n<tr>\n<td>paginator.previous_page</td>\n<td style=\"text-align:left\">前面的页面的数量</td>\n</tr>\n<tr>\n<td>paginator.next_page</td>\n<td style=\"text-align:left\">接下来的的页面的数量</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Post或Page的创建及发布\"><a href=\"#Post或Page的创建及发布\" class=\"headerlink\" title=\"Post或Page的创建及发布\"></a>Post或Page的创建及发布</h2><p>创建Post文章</p>\n<pre><code>rake post title=&quot;文章标题&quot;\n</code></pre><p>会自动创建一个具有合适文件名和YAML Front Matter的文件(使用时将”文章标题”替换成你要创建的文章的标题)。</p>\n<p>创建Page页面</p>\n<pre><code>rake page name=&quot;页面名称.md&quot;   或者\nrake page name=&quot;pages/页面名称.md&quot;\n</code></pre><p>发布Post或Page</p>\n<pre><code>git add .\ngit commit -m &apos;一些说明&apos;\ngit push origin master\n</code></pre><hr>\n<p><strong>[<a href=\"http://jekyllrb.com/docs/variables/\" target=\"_blank\" rel=\"external\">原文地址</a>]</strong></p>\n","excerpt":"<h1 id=\"Jekyll-目录及一些说明\"><a href=\"#Jekyll-目录及一些说明\" class=\"headerlink\" title=\"Jekyll 目录及一些说明\"></a>Jekyll 目录及一些说明</h1><h2 id=\"Jekyll-标准目录树\"><a href=\"#Jekyll-标准目录树\" class=\"headerlink\" title=\"Jekyll 标准目录树\"></a>Jekyll 标准目录树</h2><pre><code>_config.yml   Jekyll的配置文件\n_includes     include 文件所在的文件夹\n_layouts      模版文件夹\n_posts        自己要发布的内容\n_sites        预览时产生的文件都放在该文件夹中\n</code></pre>","more":"<h2 id=\"Jekyll的安装及配置\"><a href=\"#Jekyll的安装及配置\" class=\"headerlink\" title=\"Jekyll的安装及配置\"></a>Jekyll的安装及配置</h2><blockquote>\n<ul>\n<li><p>_includes文件夹中所放的文件是最终要放到模版中的一些代码片段。 </p>\n</li>\n<li><p>_layouts中放的一些模版，模版是用包含page或post内容的。Jekyll的模版使用HTML语法来写，并包含YAML Front Matter。所有的模版都可用Liquid来与网站进行交互。所的的模版都可以使用全局变量site和page，site变量包含该网站所有可以接触得到的内容和元数据(meta-data)，page变量包含的是当前渲染的page或post的所有可以接触得到的数据。 </p>\n</li>\n<li><p>_post文件夹中放的是自己要发布的post文章。post文件的命名规则为YEAR-MONTH-DATE-title.MARKUP，使用rake post会自动将post文件命名合适。而对于page，所有放在根目录下或不以下划线开头的文件夹中有格式的文件都会被Jekyll处理成page。这里说的有格式是指文件含有YAML Front Matter。所有的post和page都要用markdown或者texile或者HTML语法来写，并可以包含Liquid模版的语法。还要有 YAML Front Matter (Jekyll只处理具有YAML Front Matter的文件)。YAML Front Matter必须放在文件的开头，一对—之间，用户可在这一对—间设置预先定义的变量或用户自己的数据</p>\n</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"Jekyll模板全局变量\"><a href=\"#Jekyll模板全局变量\" class=\"headerlink\" title=\"Jekyll模板全局变量\"></a>Jekyll模板全局变量</h2><table>\n<thead>\n<tr>\n<th>变量</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>site</td>\n<td style=\"text-align:left\">全站的信息+_config.yml文件中的配置选项</td>\n</tr>\n<tr>\n<td>page</td>\n<td style=\"text-align:left\">这个变量中包含YAML前置数据,另外加上两个额外的变量值:url和content。</td>\n</tr>\n<tr>\n<td>content</td>\n<td style=\"text-align:left\">在布局模板文件中，这里变量包含了页面的子视图。这个变量将会把渲染后的内容插入到模板文件中。这个变量不能在文章和页面文件中使用。</td>\n</tr>\n<tr>\n<td>paginator</td>\n<td style=\"text-align:left\">一旦paginate配置选项被设置了，这个变量才能被使用。</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Jekyll模板Site变量\"><a href=\"#Jekyll模板Site变量\" class=\"headerlink\" title=\"Jekyll模板Site变量\"></a>Jekyll模板Site变量</h2><table>\n<thead>\n<tr>\n<th>变量</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>site.time</td>\n<td style=\"text-align:left\">当前的时间(当你运行Jekyll时的时间)</td>\n</tr>\n<tr>\n<td>site.posts</td>\n<td style=\"text-align:left\">一个按时间逆序的文章列表。</td>\n</tr>\n<tr>\n<td>site.related_posts</td>\n<td style=\"text-align:left\">如果当前被处理的页面是一个文章文件，那这个变量是一个包含了最多10篇相关文章的列表。默认来说，这些相关文章是低质量但计算快的。为了得到高质量但计算慢的结果，运行Jekyll命令时可以加上–lsi选项。(潜在语意索引)</td>\n</tr>\n<tr>\n<td>site.categories.CATEGORY</td>\n<td style=\"text-align:left\">所有在CATEGORY分类中的文章列表</td>\n</tr>\n<tr>\n<td>site.tags.TAG</td>\n<td style=\"text-align:left\">所有拥有TAG标签的文章的列表</td>\n</tr>\n<tr>\n<td>site.[CONFIGURATION_DATA]</td>\n<td style=\"text-align:left\">截止0.5.2版本，所有在_config.yml中的数据都能够通过site变量调用。举例来说，如果你有一个这样的选项在你的配置文件中:url: <a href=\"http://higrid.net，那在文章和页面文件中可以这样调用{\">http://higrid.net，那在文章和页面文件中可以这样调用{</a> { site.url } }。Jekyll并不会自动解析修改过的_config.yml文件，你想要启用新的设置选项，你需要重启Jekyll</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Jekyll模板Page变量\"><a href=\"#Jekyll模板Page变量\" class=\"headerlink\" title=\"Jekyll模板Page变量\"></a>Jekyll模板Page变量</h2><table>\n<thead>\n<tr>\n<th>变量</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>page.content</td>\n<td style=\"text-align:left\">页面中未渲染的内容</td>\n</tr>\n<tr>\n<td>page.title</td>\n<td style=\"text-align:left\">文章的标题</td>\n</tr>\n<tr>\n<td>page.url</td>\n<td style=\"text-align:left\">除去域名以外的URL，例子:/2013/12/14/higrid-net.html</td>\n</tr>\n<tr>\n<td>page.date</td>\n<td style=\"text-align:left\">指定每一篇文章的时间，这个选项能够覆盖一篇文章中前置数据设置的时间，它的格式是这样的:YYYY-MM-DD HH:MM:SS</td>\n</tr>\n<tr>\n<td>page.id</td>\n<td style=\"text-align:left\">每一篇文章的唯一标示符(在RSS中非常有用) 例子：/2008/12/14/higrid-net</td>\n</tr>\n<tr>\n<td>page.categories</td>\n<td style=\"text-align:left\">这篇文章隶属的分类的一个列表，分类是通过在_post目录中的目录结构推导而来的。举例来说，在路径/work/code/_posts/2008-12-24-closures.textile下的文件，这个变量将会是[work,code]。这个变量也能在YAML前置数据中被指定。</td>\n</tr>\n<tr>\n<td>page.tags</td>\n<td style=\"text-align:left\">这篇文章的标签的列表。这些数据能够在YAML前置数据中指定</td>\n</tr>\n<tr>\n<td>page.next</td>\n<td style=\"text-align:left\">按时间序的下一篇文章</td>\n</tr>\n<tr>\n<td>page.content</td>\n<td style=\"text-align:left\">按时间序的上一篇文章</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意:任何你自己指定的自定义前置数据都能够通过page调用。举例来说，如果你在页面的前置数据中设置了custom_css: true，那这个值可以在模板可以这样调用:page.custom_css</p>\n</blockquote>\n<hr>\n<h2 id=\"Jekyll模板Paginator变量\"><a href=\"#Jekyll模板Paginator变量\" class=\"headerlink\" title=\"Jekyll模板Paginator变量\"></a>Jekyll模板Paginator变量</h2><table>\n<thead>\n<tr>\n<th>变量</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>paginator.per_page</td>\n<td style=\"text-align:left\">每一个页面上文章的数量</td>\n</tr>\n<tr>\n<td>paginator.posts</td>\n<td style=\"text-align:left\">当前页面上可用的文章</td>\n</tr>\n<tr>\n<td>paginator.total_posts</td>\n<td style=\"text-align:left\">所有文章的数量</td>\n</tr>\n<tr>\n<td>paginator.total_pages</td>\n<td style=\"text-align:left\">所有页面的数量</td>\n</tr>\n<tr>\n<td>paginator.page</td>\n<td style=\"text-align:left\">当前页面的数量</td>\n</tr>\n<tr>\n<td>paginator.previous_page</td>\n<td style=\"text-align:left\">前面的页面的数量</td>\n</tr>\n<tr>\n<td>paginator.next_page</td>\n<td style=\"text-align:left\">接下来的的页面的数量</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"Post或Page的创建及发布\"><a href=\"#Post或Page的创建及发布\" class=\"headerlink\" title=\"Post或Page的创建及发布\"></a>Post或Page的创建及发布</h2><p>创建Post文章</p>\n<pre><code>rake post title=&quot;文章标题&quot;\n</code></pre><p>会自动创建一个具有合适文件名和YAML Front Matter的文件(使用时将”文章标题”替换成你要创建的文章的标题)。</p>\n<p>创建Page页面</p>\n<pre><code>rake page name=&quot;页面名称.md&quot;   或者\nrake page name=&quot;pages/页面名称.md&quot;\n</code></pre><p>发布Post或Page</p>\n<pre><code>git add .\ngit commit -m &apos;一些说明&apos;\ngit push origin master\n</code></pre><hr>\n<p><strong>[<a href=\"http://jekyllrb.com/docs/variables/\">原文地址</a>]</strong></p>"},{"layout":"post","title":"单例设计模式","duoshuo":true,"date":"2014-10-19T16:00:00.000Z","_content":"\n\n# 单例设计模式\n\n**意图**\n\n\t保证一个类仅有一个实例，并提供一个访问它的全局访问点。\n\n**适用性**\n\n\t当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时。\n\t当这个唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。\n\n<!-- more -->\n\n**单例的设计模式**\n\n\t问题：可以通过new关键字调用构造函数对类的对象进行初始化\t\n\t\t单例中如果解决了无法对创建的对象进行初始化，那么就不会将对象赋值给引用变量。\n\t\t(保持对象的唯一性)\n\n**单例的实现步骤**\n\n\t私有化构造函数 ， 禁止直接通过构造函数创建实例\n\t在类中自定义一个对象\n\t对外提供该对象的公共访问方式\n\n**单例的一般实现有两中模式**\n\n> 1. `饿汉式`  指全局的单例实例在类装载时构建。(存在对象生命周期过长问题)    \n> 2. `懒汉式`  指全局的单例实例在第一次被使用时构建。(存在线程安全问题,使用锁后推荐使用)     \n> 3. `内部类`  \n> 4. `枚举`  \n\n例:\n\n**饿汉式**\n\n```java\npublic class SingletonHungry{\t//饿汉式\n\t// 1. 提供显示的私有的构造函数\n\tprivate SingletonHungry(){}\n\t// 2. 定义一个该类的引用变量并调用构造函数初始化非静态成员属性\n\tprivate static SingletonHungry instance = new SingletonHungry();  //饿汉式单例\n\t// 3. 对单例的对象进行封装\n\tpublic static SingletonHungry getInstance(){\n\t  return instance;\n\t}\n\t// 提供服务\n\tpublic void getService(){\n\t   System.out.println( \"提供服务........\" );\n\t}\n}\n```\n\n---\n\n**懒汉式**\n\n\n```java\npublic class SingletonLazy1{ //懒汉式 _ 双重检查锁定\n\t// 1. 提供显示的私有的构造函数\n\tprivate SingletonLazy1(){}\n\t// 2. 定义一个该类的引用变量并调用构造函数初始化   非静态成员属性\n\tprivate static SingletonLazy1 instance = null;  // 懒汉式单例\n\t// 3. 对单例的对象进行封装\n\tpublic  static SingletonLazy1 getInstance(){\t//需要用到的时候进行调用\n\t\tif(instance == null ){//查看是否有实例,有则直接返回\n\t\t\tsynchronized(SingletonLazy1.class ){//多线程操作,有可能会出现多个线程同时必发范围_加锁.\n\t\t\t\tif(instance == null ){\n\t\t\t\t\tsynchronized(SingletonLazy1.class ){\t//线程同步\n\t\t\t\t\t\tif(instance == null){\n\t\t\t\t\t\t\tinstance = new SingletonLazy1 ();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t  return instance;\n\t}\n\t// 提供服务\n\tpublic void getService(){\n\t   System.out.println( \"提供服务........\" );\n\t}\n}\n```\n\n---\n\n```java\npublic class SingletonLazy2{  // 双重检查锁定 \n\t//注意在JDK1.4以及更早版本的Java中许多JVM对于 volatile 关键字的实现会导致双重检查加锁失效,此种方法只能用在JDK5及以后版本\n\tprivate volatile static SingletonLazy2 UNIQUE_INSTANCE; //注意 volatile 关键字\n\n\tprivate SingletonLazy2(){}\n\n\tpublic static SingletonLazy2 getInstance(){\n\t\tif(UNIQUE_INSTANCE == null){\n\t\t\tsynchronized(SingletonLazy2.class){\n\t\t\t\tif(UNIQUE_INSTANCE == null){\n\t\t\t\t\tUNIQUE_INSTANCE = new SingletonLazy2();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn UNIQUE_INSTANCE;\n\t}\n}\n\n```\n\n---\n\n**内部类**\n\n```java\npublic class SingletonInnerClass {  //内部类\n    private static class SingletonHolder {  \n\tprivate static final SingletonInnerClass INSTANCE = new SingletonInnerClass();  \n    }  \n    private SingletonInnerClass (){}  \n    public static final SingletonInnerClass getInstance() {  \n\t return SingletonHolder.INSTANCE;  \n    }  \n}  \n```\n\n\n---\n\n**枚举**\n\n\n```java\npublic enum SingletonEnum {   //枚举\n    INSTANCE;  \n    public void whateverMethod() {  \n    }  \n} \n```\n\n---\n\n```java\nclass Demo { //调用测试\n\tpublic static void main(String[] args) {\n\t\tSingletonLazy2 s1 =  SingletonLazy2.getInstance();\n\t\tSingletonLazy2 s2 =  SingletonLazy2.getInstance();\n\t\tSystem.out.println( s1 == s2 );\n\t\n\t\t\n\n\t\tSingletonEnum.INSTANCE.whateverMethod();//枚举\n\t}\n}\n```\n\n\n\n\n**参考文档链接**\n\n[“双重检查锁定\"会发生非预期行为声明](http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html)\n\n[深入浅出单实例Singleton设计模式](http://blog.csdn.net/haoel/article/details/4028232)\n\n[单例模式的七种写法](http://cantellow.iteye.com/blog/838473)\n\n[枚举增强单例模式的可靠性](http://blog.csdn.net/java2000_net/article/details/3983958#)\n","source":"_posts/2014-10-20-Design_pattern_Singleton.md","raw":"---\nlayout : post\ntitle : \"单例设计模式\"\ncategory : 设计模式\nduoshuo: true\ndate : 2014-10-20\ntags : [设计模式 , 单例设计模式 , Singleton , 饿汉式 , 懒汉式 , Double-checked locking , 双重检查锁定]\n---\n\n\n# 单例设计模式\n\n**意图**\n\n\t保证一个类仅有一个实例，并提供一个访问它的全局访问点。\n\n**适用性**\n\n\t当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时。\n\t当这个唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。\n\n<!-- more -->\n\n**单例的设计模式**\n\n\t问题：可以通过new关键字调用构造函数对类的对象进行初始化\t\n\t\t单例中如果解决了无法对创建的对象进行初始化，那么就不会将对象赋值给引用变量。\n\t\t(保持对象的唯一性)\n\n**单例的实现步骤**\n\n\t私有化构造函数 ， 禁止直接通过构造函数创建实例\n\t在类中自定义一个对象\n\t对外提供该对象的公共访问方式\n\n**单例的一般实现有两中模式**\n\n> 1. `饿汉式`  指全局的单例实例在类装载时构建。(存在对象生命周期过长问题)    \n> 2. `懒汉式`  指全局的单例实例在第一次被使用时构建。(存在线程安全问题,使用锁后推荐使用)     \n> 3. `内部类`  \n> 4. `枚举`  \n\n例:\n\n**饿汉式**\n\n```java\npublic class SingletonHungry{\t//饿汉式\n\t// 1. 提供显示的私有的构造函数\n\tprivate SingletonHungry(){}\n\t// 2. 定义一个该类的引用变量并调用构造函数初始化非静态成员属性\n\tprivate static SingletonHungry instance = new SingletonHungry();  //饿汉式单例\n\t// 3. 对单例的对象进行封装\n\tpublic static SingletonHungry getInstance(){\n\t  return instance;\n\t}\n\t// 提供服务\n\tpublic void getService(){\n\t   System.out.println( \"提供服务........\" );\n\t}\n}\n```\n\n---\n\n**懒汉式**\n\n\n```java\npublic class SingletonLazy1{ //懒汉式 _ 双重检查锁定\n\t// 1. 提供显示的私有的构造函数\n\tprivate SingletonLazy1(){}\n\t// 2. 定义一个该类的引用变量并调用构造函数初始化   非静态成员属性\n\tprivate static SingletonLazy1 instance = null;  // 懒汉式单例\n\t// 3. 对单例的对象进行封装\n\tpublic  static SingletonLazy1 getInstance(){\t//需要用到的时候进行调用\n\t\tif(instance == null ){//查看是否有实例,有则直接返回\n\t\t\tsynchronized(SingletonLazy1.class ){//多线程操作,有可能会出现多个线程同时必发范围_加锁.\n\t\t\t\tif(instance == null ){\n\t\t\t\t\tsynchronized(SingletonLazy1.class ){\t//线程同步\n\t\t\t\t\t\tif(instance == null){\n\t\t\t\t\t\t\tinstance = new SingletonLazy1 ();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t  return instance;\n\t}\n\t// 提供服务\n\tpublic void getService(){\n\t   System.out.println( \"提供服务........\" );\n\t}\n}\n```\n\n---\n\n```java\npublic class SingletonLazy2{  // 双重检查锁定 \n\t//注意在JDK1.4以及更早版本的Java中许多JVM对于 volatile 关键字的实现会导致双重检查加锁失效,此种方法只能用在JDK5及以后版本\n\tprivate volatile static SingletonLazy2 UNIQUE_INSTANCE; //注意 volatile 关键字\n\n\tprivate SingletonLazy2(){}\n\n\tpublic static SingletonLazy2 getInstance(){\n\t\tif(UNIQUE_INSTANCE == null){\n\t\t\tsynchronized(SingletonLazy2.class){\n\t\t\t\tif(UNIQUE_INSTANCE == null){\n\t\t\t\t\tUNIQUE_INSTANCE = new SingletonLazy2();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn UNIQUE_INSTANCE;\n\t}\n}\n\n```\n\n---\n\n**内部类**\n\n```java\npublic class SingletonInnerClass {  //内部类\n    private static class SingletonHolder {  \n\tprivate static final SingletonInnerClass INSTANCE = new SingletonInnerClass();  \n    }  \n    private SingletonInnerClass (){}  \n    public static final SingletonInnerClass getInstance() {  \n\t return SingletonHolder.INSTANCE;  \n    }  \n}  \n```\n\n\n---\n\n**枚举**\n\n\n```java\npublic enum SingletonEnum {   //枚举\n    INSTANCE;  \n    public void whateverMethod() {  \n    }  \n} \n```\n\n---\n\n```java\nclass Demo { //调用测试\n\tpublic static void main(String[] args) {\n\t\tSingletonLazy2 s1 =  SingletonLazy2.getInstance();\n\t\tSingletonLazy2 s2 =  SingletonLazy2.getInstance();\n\t\tSystem.out.println( s1 == s2 );\n\t\n\t\t\n\n\t\tSingletonEnum.INSTANCE.whateverMethod();//枚举\n\t}\n}\n```\n\n\n\n\n**参考文档链接**\n\n[“双重检查锁定\"会发生非预期行为声明](http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html)\n\n[深入浅出单实例Singleton设计模式](http://blog.csdn.net/haoel/article/details/4028232)\n\n[单例模式的七种写法](http://cantellow.iteye.com/blog/838473)\n\n[枚举增强单例模式的可靠性](http://blog.csdn.net/java2000_net/article/details/3983958#)\n","slug":"Design_pattern_Singleton","published":1,"updated":"2016-04-27T08:22:29.655Z","comments":1,"photos":[],"link":"","_id":"cinu3etwy000axoj07o5x7w2b","content":"<h1 id=\"单例设计模式\"><a href=\"#单例设计模式\" class=\"headerlink\" title=\"单例设计模式\"></a>单例设计模式</h1><p><strong>意图</strong></p>\n<pre><code>保证一个类仅有一个实例，并提供一个访问它的全局访问点。\n</code></pre><p><strong>适用性</strong></p>\n<pre><code>当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时。\n当这个唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。\n</code></pre><a id=\"more\"></a>\n<p><strong>单例的设计模式</strong></p>\n<pre><code>问题：可以通过new关键字调用构造函数对类的对象进行初始化    \n    单例中如果解决了无法对创建的对象进行初始化，那么就不会将对象赋值给引用变量。\n    (保持对象的唯一性)\n</code></pre><p><strong>单例的实现步骤</strong></p>\n<pre><code>私有化构造函数 ， 禁止直接通过构造函数创建实例\n在类中自定义一个对象\n对外提供该对象的公共访问方式\n</code></pre><p><strong>单例的一般实现有两中模式</strong></p>\n<blockquote>\n<ol>\n<li><code>饿汉式</code>  指全局的单例实例在类装载时构建。(存在对象生命周期过长问题)    </li>\n<li><code>懒汉式</code>  指全局的单例实例在第一次被使用时构建。(存在线程安全问题,使用锁后推荐使用)     </li>\n<li><code>内部类</code>  </li>\n<li><code>枚举</code>  </li>\n</ol>\n</blockquote>\n<p>例:</p>\n<p><strong>饿汉式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHungry</span></span>&#123;\t<span class=\"comment\">//饿汉式</span></span><br><span class=\"line\">\t<span class=\"comment\">// 1. 提供显示的私有的构造函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonHungry</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 2. 定义一个该类的引用变量并调用构造函数初始化非静态成员属性</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonHungry instance = <span class=\"keyword\">new</span> SingletonHungry();  <span class=\"comment\">//饿汉式单例</span></span><br><span class=\"line\">\t<span class=\"comment\">// 3. 对单例的对象进行封装</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonHungry <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 提供服务</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getService</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t   System.out.println( <span class=\"string\">\"提供服务........\"</span> );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>懒汉式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonLazy1</span></span>&#123; <span class=\"comment\">//懒汉式 _ 双重检查锁定</span></span><br><span class=\"line\">\t<span class=\"comment\">// 1. 提供显示的私有的构造函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonLazy1</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 2. 定义一个该类的引用变量并调用构造函数初始化   非静态成员属性</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonLazy1 instance = <span class=\"keyword\">null</span>;  <span class=\"comment\">// 懒汉式单例</span></span><br><span class=\"line\">\t<span class=\"comment\">// 3. 对单例的对象进行封装</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> SingletonLazy1 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;\t<span class=\"comment\">//需要用到的时候进行调用</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span> )&#123;<span class=\"comment\">//查看是否有实例,有则直接返回</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span>(SingletonLazy1.class )&#123;<span class=\"comment\">//多线程操作,有可能会出现多个线程同时必发范围_加锁.</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span> )&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">synchronized</span>(SingletonLazy1.class )&#123;\t<span class=\"comment\">//线程同步</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tinstance = <span class=\"keyword\">new</span> SingletonLazy1 ();</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 提供服务</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getService</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t   System.out.println( <span class=\"string\">\"提供服务........\"</span> );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonLazy2</span></span>&#123;  <span class=\"comment\">// 双重检查锁定 </span></span><br><span class=\"line\">\t<span class=\"comment\">//注意在JDK1.4以及更早版本的Java中许多JVM对于 volatile 关键字的实现会导致双重检查加锁失效,此种方法只能用在JDK5及以后版本</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> SingletonLazy2 UNIQUE_INSTANCE; <span class=\"comment\">//注意 volatile 关键字</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonLazy2</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonLazy2 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(UNIQUE_INSTANCE == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span>(SingletonLazy2.class)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(UNIQUE_INSTANCE == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tUNIQUE_INSTANCE = <span class=\"keyword\">new</span> SingletonLazy2();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> UNIQUE_INSTANCE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>内部类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonInnerClass</span> </span>&#123;  <span class=\"comment\">//内部类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;  </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonInnerClass INSTANCE = <span class=\"keyword\">new</span> SingletonInnerClass();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonInnerClass</span> <span class=\"params\">()</span></span>&#123;&#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonInnerClass <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">\t <span class=\"keyword\">return</span> SingletonHolder.INSTANCE;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>枚举</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> SingletonEnum &#123;   <span class=\"comment\">//枚举</span></span><br><span class=\"line\">    INSTANCE;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">whateverMethod</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123; <span class=\"comment\">//调用测试</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSingletonLazy2 s1 =  SingletonLazy2.getInstance();</span><br><span class=\"line\">\t\tSingletonLazy2 s2 =  SingletonLazy2.getInstance();</span><br><span class=\"line\">\t\tSystem.out.println( s1 == s2 );</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSingletonEnum.INSTANCE.whateverMethod();<span class=\"comment\">//枚举</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>参考文档链接</strong></p>\n<p><a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\" target=\"_blank\" rel=\"external\">“双重检查锁定”会发生非预期行为声明</a></p>\n<p><a href=\"http://blog.csdn.net/haoel/article/details/4028232\" target=\"_blank\" rel=\"external\">深入浅出单实例Singleton设计模式</a></p>\n<p><a href=\"http://cantellow.iteye.com/blog/838473\" target=\"_blank\" rel=\"external\">单例模式的七种写法</a></p>\n<p><a href=\"http://blog.csdn.net/java2000_net/article/details/3983958#\" target=\"_blank\" rel=\"external\">枚举增强单例模式的可靠性</a></p>\n","excerpt":"<h1 id=\"单例设计模式\"><a href=\"#单例设计模式\" class=\"headerlink\" title=\"单例设计模式\"></a>单例设计模式</h1><p><strong>意图</strong></p>\n<pre><code>保证一个类仅有一个实例，并提供一个访问它的全局访问点。\n</code></pre><p><strong>适用性</strong></p>\n<pre><code>当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时。\n当这个唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。\n</code></pre>","more":"<p><strong>单例的设计模式</strong></p>\n<pre><code>问题：可以通过new关键字调用构造函数对类的对象进行初始化    \n    单例中如果解决了无法对创建的对象进行初始化，那么就不会将对象赋值给引用变量。\n    (保持对象的唯一性)\n</code></pre><p><strong>单例的实现步骤</strong></p>\n<pre><code>私有化构造函数 ， 禁止直接通过构造函数创建实例\n在类中自定义一个对象\n对外提供该对象的公共访问方式\n</code></pre><p><strong>单例的一般实现有两中模式</strong></p>\n<blockquote>\n<ol>\n<li><code>饿汉式</code>  指全局的单例实例在类装载时构建。(存在对象生命周期过长问题)    </li>\n<li><code>懒汉式</code>  指全局的单例实例在第一次被使用时构建。(存在线程安全问题,使用锁后推荐使用)     </li>\n<li><code>内部类</code>  </li>\n<li><code>枚举</code>  </li>\n</ol>\n</blockquote>\n<p>例:</p>\n<p><strong>饿汉式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHungry</span></span>&#123;\t<span class=\"comment\">//饿汉式</span></span><br><span class=\"line\">\t<span class=\"comment\">// 1. 提供显示的私有的构造函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonHungry</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 2. 定义一个该类的引用变量并调用构造函数初始化非静态成员属性</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonHungry instance = <span class=\"keyword\">new</span> SingletonHungry();  <span class=\"comment\">//饿汉式单例</span></span><br><span class=\"line\">\t<span class=\"comment\">// 3. 对单例的对象进行封装</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonHungry <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 提供服务</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getService</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t   System.out.println( <span class=\"string\">\"提供服务........\"</span> );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>懒汉式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonLazy1</span></span>&#123; <span class=\"comment\">//懒汉式 _ 双重检查锁定</span></span><br><span class=\"line\">\t<span class=\"comment\">// 1. 提供显示的私有的构造函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonLazy1</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 2. 定义一个该类的引用变量并调用构造函数初始化   非静态成员属性</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonLazy1 instance = <span class=\"keyword\">null</span>;  <span class=\"comment\">// 懒汉式单例</span></span><br><span class=\"line\">\t<span class=\"comment\">// 3. 对单例的对象进行封装</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> SingletonLazy1 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;\t<span class=\"comment\">//需要用到的时候进行调用</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span> )&#123;<span class=\"comment\">//查看是否有实例,有则直接返回</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span>(SingletonLazy1.class )&#123;<span class=\"comment\">//多线程操作,有可能会出现多个线程同时必发范围_加锁.</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span> )&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">synchronized</span>(SingletonLazy1.class )&#123;\t<span class=\"comment\">//线程同步</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tinstance = <span class=\"keyword\">new</span> SingletonLazy1 ();</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 提供服务</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getService</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t   System.out.println( <span class=\"string\">\"提供服务........\"</span> );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonLazy2</span></span>&#123;  <span class=\"comment\">// 双重检查锁定 </span></span><br><span class=\"line\">\t<span class=\"comment\">//注意在JDK1.4以及更早版本的Java中许多JVM对于 volatile 关键字的实现会导致双重检查加锁失效,此种方法只能用在JDK5及以后版本</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> SingletonLazy2 UNIQUE_INSTANCE; <span class=\"comment\">//注意 volatile 关键字</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonLazy2</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonLazy2 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(UNIQUE_INSTANCE == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span>(SingletonLazy2.class)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(UNIQUE_INSTANCE == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tUNIQUE_INSTANCE = <span class=\"keyword\">new</span> SingletonLazy2();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> UNIQUE_INSTANCE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>内部类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonInnerClass</span> </span>&#123;  <span class=\"comment\">//内部类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;  </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonInnerClass INSTANCE = <span class=\"keyword\">new</span> SingletonInnerClass();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonInnerClass</span> <span class=\"params\">()</span></span>&#123;&#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonInnerClass <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">\t <span class=\"keyword\">return</span> SingletonHolder.INSTANCE;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>枚举</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> SingletonEnum &#123;   <span class=\"comment\">//枚举</span></span><br><span class=\"line\">    INSTANCE;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">whateverMethod</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123; <span class=\"comment\">//调用测试</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSingletonLazy2 s1 =  SingletonLazy2.getInstance();</span><br><span class=\"line\">\t\tSingletonLazy2 s2 =  SingletonLazy2.getInstance();</span><br><span class=\"line\">\t\tSystem.out.println( s1 == s2 );</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSingletonEnum.INSTANCE.whateverMethod();<span class=\"comment\">//枚举</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>参考文档链接</strong></p>\n<p><a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\">“双重检查锁定”会发生非预期行为声明</a></p>\n<p><a href=\"http://blog.csdn.net/haoel/article/details/4028232\">深入浅出单实例Singleton设计模式</a></p>\n<p><a href=\"http://cantellow.iteye.com/blog/838473\">单例模式的七种写法</a></p>\n<p><a href=\"http://blog.csdn.net/java2000_net/article/details/3983958#\">枚举增强单例模式的可靠性</a></p>"},{"layout":"post","title":"Git 常用命令整理","duoshuo":true,"date":"2014-10-18T16:00:00.000Z","_content":"\n# 初始化配置\n\n```python\n#配置使用git仓库的人员姓名  \ngit config --global user.name \"Your Name Comes Here\"  \n  \n#配置使用git仓库的人员email  \ngit config --global user.email you@yourdomain.example.com  \n  \n#配置到缓存 默认15分钟  \ngit config --global credential.helper cache   \n  \n#修改缓存时间  \ngit config --global credential.helper 'cache --timeout=3600'    \n  \ngit config --global color.ui true  \ngit config --global alias.co checkout  \ngit config --global alias.ci commit  \ngit config --global alias.st status  \ngit config --global alias.br branch  \ngit config --global core.editor \"mate -w\"    # 设置Editor使用textmate  \ngit config -1 #列举所有配置  \n  \n#用户的git配置文件~/.gitconfig  \n```\n\n<!-- more -->\n\n---\n\n# 查看、添加、提交、删除、找回，重置修改文件\n```python\ngit help <command>  # 显示command的help  \ngit show            # 显示某次提交的内容  \ngit show $id  \n   \ngit co  -- <file>   # 抛弃工作区修改  \ngit co  .           # 抛弃工作区修改  \n   \ngit add <file>      # 将工作文件修改提交到本地暂存区  \ngit add .           # 将所有修改过的工作文件提交暂存区  \n   \ngit rm <file>       # 从版本库中删除文件  \ngit rm <file> --cached  # 从版本库中删除文件，但不删除文件  \n   \ngit reset <file>    # 从暂存区恢复到工作文件  \ngit reset -- .      # 从暂存区恢复到工作文件  \ngit reset --hard    # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改  \n   \ngit ci <file>  \ngit ci .  \ngit ci -a           # 将git add, git rm和git ci等操作都合并在一起做  \ngit ci -am \"some comments\"  \ngit ci --amend      # 修改最后一次提交记录  \n   \ngit revert <$id>    # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象  \ngit revert HEAD     # 恢复最后一次提交的状态  \n```\n\n\n---\n\n# 查看文件diff\n\n```python\ngit diff <file>     # 比较当前文件和暂存区文件差异  \ngit diff  \ngit diff <$id1> <$id2>   # 比较两次提交之间的差异  \ngit diff <branch1>..<branch2> # 在两个分支之间比较  \ngit diff --staged   # 比较暂存区和版本库差异  \ngit diff --cached   # 比较暂存区和版本库差异  \ngit diff --stat     # 仅仅比较统计信息  \n\n#退出diff查看状态直接输入Q即可.\n```\n\n---\n\n# 查看提交记录\n\n```python\ngit log  \ngit log <file>      # 查看该文件每次提交记录  \ngit log -p <file>   # 查看每次详细修改内容的diff  \ngit log -p -2       # 查看最近两次详细修改内容的diff  \ngit log --stat      #查看提交统计信息  \n```\n\n tig\nMac上可以使用tig代替diff和log，brew install tig\n\n---\n\n# 取得Git仓库\n\n```python\n#初始化一个版本仓库  \ngit init  \n  \n#Clone远程版本库  \ngit clone git@xbc.me:wordpress.git  \n  \n#添加远程版本库origin，语法为 git remote add [shortname] [url]  \ngit remote add origin git@xbc.me:wordpress.git  \n  \n#查看远程仓库  \ngit remote -v  \n```\n\n\n---\n\n# 提交你的修改\n\n```python\n#添加当前修改的文件到暂存区  \ngit add .  \n  \n#如果你自动追踪文件，包括你已经手动删除的，状态为Deleted的文件  \ngit add -u  \n  \n#提交你的修改  \ngit commit –m \"你的注释\"  \n  \n#推送你的更新到远程服务器,语法为 git push [远程名] [本地分支]:[远程分支]  \ngit push origin master  \n  \n#查看文件状态  \ngit status  \n  \n#跟踪新文件  \ngit add readme.txt  \n  \n#从当前跟踪列表移除文件，并完全删除  \ngit rm readme.txt  \n  \n#仅在暂存区删除，保留文件在当前目录，不再跟踪  \ngit rm –cached readme.txt  \n  \n#重命名文件  \ngit mv reademe.txt readme  \n  \n#查看提交的历史记录  \ngit log  \n  \n#修改最后一次提交注释的，利用–amend参数  \ngit commit --amend  \n  \n#忘记提交某些修改，下面的三条命令只会得到一个提交。  \ngit commit –m &quot;add readme.txt&quot;  \ngit add readme_forgotten  \ngit commit –amend  \n  \n#假设你已经使用git add .，将修改过的文件a、b加到暂存区  \n  \n#现在你只想提交a文件，不想提交b文件，应该这样  \ngit reset HEAD b  \n  \n#取消对文件的修改  \ngit checkout –- readme.txt  \n```\n\n\n---\n\n# 查看、切换、创建和删除分支\n\n```python\ngit br -r           # 查看远程分支  \ngit br <new_branch> # 创建新的分支  \ngit br -v           # 查看各个分支最后提交信息  \ngit br --merged     # 查看已经被合并到当前分支的分支  \ngit br --no-merged  # 查看尚未被合并到当前分支的分支  \n   \ngit co <branch>     # 切换到某个分支  \ngit co -b <new_branch> # 创建新的分支，并且切换过去  \ngit co -b <new_branch> <branch>  # 基于branch创建新的new_branch  \n   \ngit co $id          # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除  \ngit co $id -b <new_branch>  # 把某次历史提交记录checkout出来，创建成一个分支  \n   \ngit br -d <branch>  # 删除某个分支  \ngit br -D <branch>  # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)  \n```\n\n\n---\n\n# 分支合并和rebase\n\n```python\ngit merge <branch>               # 将branch分支合并到当前分支  \ngit merge origin/master --no-ff  # 不要Fast-Foward合并，这样可以生成merge提交  \n   \ngit rebase master <branch>       # 将master rebase到branch，相当于：  \ngit co <branch> && git rebase master && git co master && git merge <branch>  \n```\n\n\n---\n\n# Git补丁管理(方便在多台机器上开发同步时用)\n\n```python\ngit diff > ../sync.patch         # 生成补丁  \ngit apply ../sync.patch          # 打补丁  \ngit apply --check ../sync.patch  #测试补丁能否成功  \n```\n\n\n---\n\n# Git暂存管理\n\n```python\ngit stash                        # 暂存  \ngit stash list                   # 列所有stash  \ngit stash apply                  # 恢复暂存的内容  \ngit stash drop                   # 删除暂存区  \n```\n\n\n---\n\n# Git远程分支管理\n\n```python\ngit pull                         # 抓取远程仓库所有分支更新并合并到本地  \ngit pull --no-ff                 # 抓取远程仓库所有分支更新并合并到本地，不要快进合并  \ngit fetch origin                 # 抓取远程仓库更新  \ngit merge origin/master          # 将远程主分支合并到本地当前分支  \ngit co --track origin/branch     # 跟踪某个远程分支创建相应的本地分支  \ngit co -b <local_branch> origin/<remote_branch>  # 基于远程分支创建本地分支，功能同上  \n   \ngit push                         # push所有分支  \ngit push origin master           # 将本地主分支推到远程主分支  \ngit push -u origin master        # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)  \ngit push origin <local_branch>   # 创建远程分支， origin是远程仓库名  \ngit push origin <local_branch>:<remote_branch>  # 创建远程分支  \ngit push origin :<remote_branch>  #先删除本地分支(git br -d <branch>)，然后再push删除远程分支  \n```\n\n\n---\n\n# 基本的分支管理\n\n```python\n#创建一个分支  \ngit branch iss53  \n  \n#切换工作目录到iss53  \ngit checkout iss53  \n  \n#将上面的命令合在一起，创建iss53分支并切换到iss53  \ngit checkout –b iss53  \n  \n#合并iss53分支，当前工作目录为master  \ngit merge iss53  \n  \n#合并完成后，没有出现冲突，删除iss53分支  \ngit branch –d iss53  \n  \n#拉去远程仓库的数据，语法为 git fetch [remote-name]  \ngit fetch  \n  \n#fetch 会拉去最新的远程仓库数据，但不会自动到当前目录下，要自动合并  \ngit pull  \n  \n#查看远程仓库的信息  \ngit remote show origin  \n  \n#建立本地的dev分支追踪远程仓库的develop分支  \ngit checkout –b dev origin/develop  \n```\n\n\n---\n\n# Git远程仓库管理\n\n```python\ngit remote -v                    # 查看远程服务器地址和仓库名称  \ngit remote show origin           # 查看远程服务器仓库状态  \ngit remote add origin git@ github:robbin/robbin_site.git         # 添加远程仓库地址  \ngit remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址)  \ngit remote rm <repository>       # 删除远程仓库  \n```\n\n\n---\n\n# 创建远程仓库\n\n```python\ngit clone --bare robbin_site robbin_site.git  # 用带版本的项目创建纯版本仓库  \nscp -r my_project.git git@ git.csdn.net:~      # 将纯仓库上传到服务器上  \n   \nmkdir robbin_site.git && cd robbin_site.git && git --bare init # 在服务器创建纯仓库  \ngit remote add origin git@ github.com:robbin/robbin_site.git    # 设置远程仓库地址  \ngit push -u origin master                                      # 客户端首次提交  \ngit push -u origin develop  # 首次将本地develop分支提交到远程develop分支，并且track  \n   \ngit remote set-head origin master   # 设置远程仓库的HEAD指向master分支 \n\ngit push origin -f  #强制推送当前版本到网络 可结合回滚使用.\n```\n\n也可以命令设置跟踪远程库和本地库\n\n\n```python\ngit branch --set-upstream master origin/master  \ngit branch --set-upstream develop origin/develop  \n```\n\n\n---\n\n# Github协同流程：\n\nfork给自己 → clone到本地 → coding → push回自己 → github上提出Pull Request即可\n之后，本地添加fork源为远端源 → 工作前先pull下fork源保持代码较新 → coding → ...\n\n\n---\n\n# GitHub更新fork的版本实践:  \n\n前提   \n你已经在github上fork了别人的分支，并且弄好了跟github的ssh连接。(如果没有ssh连接可使用HTTP,操作的时候会多一个输入用户名密码操作)    \n相关配置详情参考：https://help.github.com    \n\n详细操作:   \n\n1.检出自己在github上fork别人的分支   \n\n\tgit clone git@github.com:comtu/android-training-course-in-chinese.git   \n\n2.然后增加远程分支（也就是你fork那个人的分支）名为atcic（这个名字任意）到你本地。   \n\n\tgit remote add atcic git@github.com:kesenhoo/android-training-course-in-chinese.git   \n\n如果你运行命令：git remote -v你会发现多出来了一个Bob的远程分支。如下：  \n\n\tatcic   git@github.com:kesenhoo/android-training-course-in-chinese.git (fetch)  \n\tatcic   git@github.com:kesenhoo/android-training-course-in-chinese.git (push)  \n\torigin  git@github.com:comtu/android-training-course-in-chinese.git (fetch)  \n\torigin  git@github.com:comtu/android-training-course-in-chinese.git (push)  \n\n3.然后，把对方的代码拉到你本地。  \n\n\tgit fetch atcic   \n\n4.最后，合并对方的代码。    \n\n\tgit merge atcic/master     \n\n5.最最后，把最新的代码推送到你的github上。  \n\n\tgit push origin master   \n\n\n这样就完成了自己的代码更新。   \n\n\n---\n\n\nGit版本控制大全: \n\n[http://git-scm.com/book/zh/v1](http://git-scm.com/book/zh/v1)\n","source":"_posts/2014-10-19-git_common_command.md","raw":"---\nlayout : post\ntitle : \"Git 常用命令整理\"\ncategory : Git\nduoshuo: true\ndate : 2014-10-19\ntags : [Git , 版本控制]\n---\n\n# 初始化配置\n\n```python\n#配置使用git仓库的人员姓名  \ngit config --global user.name \"Your Name Comes Here\"  \n  \n#配置使用git仓库的人员email  \ngit config --global user.email you@yourdomain.example.com  \n  \n#配置到缓存 默认15分钟  \ngit config --global credential.helper cache   \n  \n#修改缓存时间  \ngit config --global credential.helper 'cache --timeout=3600'    \n  \ngit config --global color.ui true  \ngit config --global alias.co checkout  \ngit config --global alias.ci commit  \ngit config --global alias.st status  \ngit config --global alias.br branch  \ngit config --global core.editor \"mate -w\"    # 设置Editor使用textmate  \ngit config -1 #列举所有配置  \n  \n#用户的git配置文件~/.gitconfig  \n```\n\n<!-- more -->\n\n---\n\n# 查看、添加、提交、删除、找回，重置修改文件\n```python\ngit help <command>  # 显示command的help  \ngit show            # 显示某次提交的内容  \ngit show $id  \n   \ngit co  -- <file>   # 抛弃工作区修改  \ngit co  .           # 抛弃工作区修改  \n   \ngit add <file>      # 将工作文件修改提交到本地暂存区  \ngit add .           # 将所有修改过的工作文件提交暂存区  \n   \ngit rm <file>       # 从版本库中删除文件  \ngit rm <file> --cached  # 从版本库中删除文件，但不删除文件  \n   \ngit reset <file>    # 从暂存区恢复到工作文件  \ngit reset -- .      # 从暂存区恢复到工作文件  \ngit reset --hard    # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改  \n   \ngit ci <file>  \ngit ci .  \ngit ci -a           # 将git add, git rm和git ci等操作都合并在一起做  \ngit ci -am \"some comments\"  \ngit ci --amend      # 修改最后一次提交记录  \n   \ngit revert <$id>    # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象  \ngit revert HEAD     # 恢复最后一次提交的状态  \n```\n\n\n---\n\n# 查看文件diff\n\n```python\ngit diff <file>     # 比较当前文件和暂存区文件差异  \ngit diff  \ngit diff <$id1> <$id2>   # 比较两次提交之间的差异  \ngit diff <branch1>..<branch2> # 在两个分支之间比较  \ngit diff --staged   # 比较暂存区和版本库差异  \ngit diff --cached   # 比较暂存区和版本库差异  \ngit diff --stat     # 仅仅比较统计信息  \n\n#退出diff查看状态直接输入Q即可.\n```\n\n---\n\n# 查看提交记录\n\n```python\ngit log  \ngit log <file>      # 查看该文件每次提交记录  \ngit log -p <file>   # 查看每次详细修改内容的diff  \ngit log -p -2       # 查看最近两次详细修改内容的diff  \ngit log --stat      #查看提交统计信息  \n```\n\n tig\nMac上可以使用tig代替diff和log，brew install tig\n\n---\n\n# 取得Git仓库\n\n```python\n#初始化一个版本仓库  \ngit init  \n  \n#Clone远程版本库  \ngit clone git@xbc.me:wordpress.git  \n  \n#添加远程版本库origin，语法为 git remote add [shortname] [url]  \ngit remote add origin git@xbc.me:wordpress.git  \n  \n#查看远程仓库  \ngit remote -v  \n```\n\n\n---\n\n# 提交你的修改\n\n```python\n#添加当前修改的文件到暂存区  \ngit add .  \n  \n#如果你自动追踪文件，包括你已经手动删除的，状态为Deleted的文件  \ngit add -u  \n  \n#提交你的修改  \ngit commit –m \"你的注释\"  \n  \n#推送你的更新到远程服务器,语法为 git push [远程名] [本地分支]:[远程分支]  \ngit push origin master  \n  \n#查看文件状态  \ngit status  \n  \n#跟踪新文件  \ngit add readme.txt  \n  \n#从当前跟踪列表移除文件，并完全删除  \ngit rm readme.txt  \n  \n#仅在暂存区删除，保留文件在当前目录，不再跟踪  \ngit rm –cached readme.txt  \n  \n#重命名文件  \ngit mv reademe.txt readme  \n  \n#查看提交的历史记录  \ngit log  \n  \n#修改最后一次提交注释的，利用–amend参数  \ngit commit --amend  \n  \n#忘记提交某些修改，下面的三条命令只会得到一个提交。  \ngit commit –m &quot;add readme.txt&quot;  \ngit add readme_forgotten  \ngit commit –amend  \n  \n#假设你已经使用git add .，将修改过的文件a、b加到暂存区  \n  \n#现在你只想提交a文件，不想提交b文件，应该这样  \ngit reset HEAD b  \n  \n#取消对文件的修改  \ngit checkout –- readme.txt  \n```\n\n\n---\n\n# 查看、切换、创建和删除分支\n\n```python\ngit br -r           # 查看远程分支  \ngit br <new_branch> # 创建新的分支  \ngit br -v           # 查看各个分支最后提交信息  \ngit br --merged     # 查看已经被合并到当前分支的分支  \ngit br --no-merged  # 查看尚未被合并到当前分支的分支  \n   \ngit co <branch>     # 切换到某个分支  \ngit co -b <new_branch> # 创建新的分支，并且切换过去  \ngit co -b <new_branch> <branch>  # 基于branch创建新的new_branch  \n   \ngit co $id          # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除  \ngit co $id -b <new_branch>  # 把某次历史提交记录checkout出来，创建成一个分支  \n   \ngit br -d <branch>  # 删除某个分支  \ngit br -D <branch>  # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)  \n```\n\n\n---\n\n# 分支合并和rebase\n\n```python\ngit merge <branch>               # 将branch分支合并到当前分支  \ngit merge origin/master --no-ff  # 不要Fast-Foward合并，这样可以生成merge提交  \n   \ngit rebase master <branch>       # 将master rebase到branch，相当于：  \ngit co <branch> && git rebase master && git co master && git merge <branch>  \n```\n\n\n---\n\n# Git补丁管理(方便在多台机器上开发同步时用)\n\n```python\ngit diff > ../sync.patch         # 生成补丁  \ngit apply ../sync.patch          # 打补丁  \ngit apply --check ../sync.patch  #测试补丁能否成功  \n```\n\n\n---\n\n# Git暂存管理\n\n```python\ngit stash                        # 暂存  \ngit stash list                   # 列所有stash  \ngit stash apply                  # 恢复暂存的内容  \ngit stash drop                   # 删除暂存区  \n```\n\n\n---\n\n# Git远程分支管理\n\n```python\ngit pull                         # 抓取远程仓库所有分支更新并合并到本地  \ngit pull --no-ff                 # 抓取远程仓库所有分支更新并合并到本地，不要快进合并  \ngit fetch origin                 # 抓取远程仓库更新  \ngit merge origin/master          # 将远程主分支合并到本地当前分支  \ngit co --track origin/branch     # 跟踪某个远程分支创建相应的本地分支  \ngit co -b <local_branch> origin/<remote_branch>  # 基于远程分支创建本地分支，功能同上  \n   \ngit push                         # push所有分支  \ngit push origin master           # 将本地主分支推到远程主分支  \ngit push -u origin master        # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)  \ngit push origin <local_branch>   # 创建远程分支， origin是远程仓库名  \ngit push origin <local_branch>:<remote_branch>  # 创建远程分支  \ngit push origin :<remote_branch>  #先删除本地分支(git br -d <branch>)，然后再push删除远程分支  \n```\n\n\n---\n\n# 基本的分支管理\n\n```python\n#创建一个分支  \ngit branch iss53  \n  \n#切换工作目录到iss53  \ngit checkout iss53  \n  \n#将上面的命令合在一起，创建iss53分支并切换到iss53  \ngit checkout –b iss53  \n  \n#合并iss53分支，当前工作目录为master  \ngit merge iss53  \n  \n#合并完成后，没有出现冲突，删除iss53分支  \ngit branch –d iss53  \n  \n#拉去远程仓库的数据，语法为 git fetch [remote-name]  \ngit fetch  \n  \n#fetch 会拉去最新的远程仓库数据，但不会自动到当前目录下，要自动合并  \ngit pull  \n  \n#查看远程仓库的信息  \ngit remote show origin  \n  \n#建立本地的dev分支追踪远程仓库的develop分支  \ngit checkout –b dev origin/develop  \n```\n\n\n---\n\n# Git远程仓库管理\n\n```python\ngit remote -v                    # 查看远程服务器地址和仓库名称  \ngit remote show origin           # 查看远程服务器仓库状态  \ngit remote add origin git@ github:robbin/robbin_site.git         # 添加远程仓库地址  \ngit remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址)  \ngit remote rm <repository>       # 删除远程仓库  \n```\n\n\n---\n\n# 创建远程仓库\n\n```python\ngit clone --bare robbin_site robbin_site.git  # 用带版本的项目创建纯版本仓库  \nscp -r my_project.git git@ git.csdn.net:~      # 将纯仓库上传到服务器上  \n   \nmkdir robbin_site.git && cd robbin_site.git && git --bare init # 在服务器创建纯仓库  \ngit remote add origin git@ github.com:robbin/robbin_site.git    # 设置远程仓库地址  \ngit push -u origin master                                      # 客户端首次提交  \ngit push -u origin develop  # 首次将本地develop分支提交到远程develop分支，并且track  \n   \ngit remote set-head origin master   # 设置远程仓库的HEAD指向master分支 \n\ngit push origin -f  #强制推送当前版本到网络 可结合回滚使用.\n```\n\n也可以命令设置跟踪远程库和本地库\n\n\n```python\ngit branch --set-upstream master origin/master  \ngit branch --set-upstream develop origin/develop  \n```\n\n\n---\n\n# Github协同流程：\n\nfork给自己 → clone到本地 → coding → push回自己 → github上提出Pull Request即可\n之后，本地添加fork源为远端源 → 工作前先pull下fork源保持代码较新 → coding → ...\n\n\n---\n\n# GitHub更新fork的版本实践:  \n\n前提   \n你已经在github上fork了别人的分支，并且弄好了跟github的ssh连接。(如果没有ssh连接可使用HTTP,操作的时候会多一个输入用户名密码操作)    \n相关配置详情参考：https://help.github.com    \n\n详细操作:   \n\n1.检出自己在github上fork别人的分支   \n\n\tgit clone git@github.com:comtu/android-training-course-in-chinese.git   \n\n2.然后增加远程分支（也就是你fork那个人的分支）名为atcic（这个名字任意）到你本地。   \n\n\tgit remote add atcic git@github.com:kesenhoo/android-training-course-in-chinese.git   \n\n如果你运行命令：git remote -v你会发现多出来了一个Bob的远程分支。如下：  \n\n\tatcic   git@github.com:kesenhoo/android-training-course-in-chinese.git (fetch)  \n\tatcic   git@github.com:kesenhoo/android-training-course-in-chinese.git (push)  \n\torigin  git@github.com:comtu/android-training-course-in-chinese.git (fetch)  \n\torigin  git@github.com:comtu/android-training-course-in-chinese.git (push)  \n\n3.然后，把对方的代码拉到你本地。  \n\n\tgit fetch atcic   \n\n4.最后，合并对方的代码。    \n\n\tgit merge atcic/master     \n\n5.最最后，把最新的代码推送到你的github上。  \n\n\tgit push origin master   \n\n\n这样就完成了自己的代码更新。   \n\n\n---\n\n\nGit版本控制大全: \n\n[http://git-scm.com/book/zh/v1](http://git-scm.com/book/zh/v1)\n","slug":"git_common_command","published":1,"updated":"2016-04-28T02:39:06.609Z","comments":1,"photos":[],"link":"","_id":"cinu3etx6000dxoj0p8nd1nzr","content":"<h1 id=\"初始化配置\"><a href=\"#初始化配置\" class=\"headerlink\" title=\"初始化配置\"></a>初始化配置</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#配置使用git仓库的人员姓名  </span></span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> user.name <span class=\"string\">\"Your Name Comes Here\"</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#配置使用git仓库的人员email  </span></span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> user.email you@yourdomain.example.com  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#配置到缓存 默认15分钟  </span></span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> credential.helper cache   </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#修改缓存时间  </span></span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> credential.helper <span class=\"string\">'cache --timeout=3600'</span>    </span><br><span class=\"line\">  </span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> color.ui true  </span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> alias.co checkout  </span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> alias.ci commit  </span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> alias.st status  </span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> alias.br branch  </span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> core.editor <span class=\"string\">\"mate -w\"</span>    <span class=\"comment\"># 设置Editor使用textmate  </span></span><br><span class=\"line\">git config <span class=\"number\">-1</span> <span class=\"comment\">#列举所有配置  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#用户的git配置文件~/.gitconfig</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<hr>\n<h1 id=\"查看、添加、提交、删除、找回，重置修改文件\"><a href=\"#查看、添加、提交、删除、找回，重置修改文件\" class=\"headerlink\" title=\"查看、添加、提交、删除、找回，重置修改文件\"></a>查看、添加、提交、删除、找回，重置修改文件</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git help &lt;command&gt;  <span class=\"comment\"># 显示command的help  </span></span><br><span class=\"line\">git show            <span class=\"comment\"># 显示某次提交的内容  </span></span><br><span class=\"line\">git show $id  </span><br><span class=\"line\">   </span><br><span class=\"line\">git co  -- &lt;file&gt;   <span class=\"comment\"># 抛弃工作区修改  </span></span><br><span class=\"line\">git co  .           <span class=\"comment\"># 抛弃工作区修改  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">git add &lt;file&gt;      <span class=\"comment\"># 将工作文件修改提交到本地暂存区  </span></span><br><span class=\"line\">git add .           <span class=\"comment\"># 将所有修改过的工作文件提交暂存区  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">git rm &lt;file&gt;       <span class=\"comment\"># 从版本库中删除文件  </span></span><br><span class=\"line\">git rm &lt;file&gt; --cached  <span class=\"comment\"># 从版本库中删除文件，但不删除文件  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">git reset &lt;file&gt;    <span class=\"comment\"># 从暂存区恢复到工作文件  </span></span><br><span class=\"line\">git reset -- .      <span class=\"comment\"># 从暂存区恢复到工作文件  </span></span><br><span class=\"line\">git reset --hard    <span class=\"comment\"># 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">git ci &lt;file&gt;  </span><br><span class=\"line\">git ci .  </span><br><span class=\"line\">git ci -a           <span class=\"comment\"># 将git add, git rm和git ci等操作都合并在一起做  </span></span><br><span class=\"line\">git ci -am <span class=\"string\">\"some comments\"</span>  </span><br><span class=\"line\">git ci --amend      <span class=\"comment\"># 修改最后一次提交记录  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">git revert &lt;$id&gt;    <span class=\"comment\"># 恢复某次提交的状态，恢复动作本身也创建了一次提交对象  </span></span><br><span class=\"line\">git revert HEAD     <span class=\"comment\"># 恢复最后一次提交的状态</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"查看文件diff\"><a href=\"#查看文件diff\" class=\"headerlink\" title=\"查看文件diff\"></a>查看文件diff</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff &lt;file&gt;     <span class=\"comment\"># 比较当前文件和暂存区文件差异  </span></span><br><span class=\"line\">git diff  </span><br><span class=\"line\">git diff &lt;$id1&gt; &lt;$id2&gt;   <span class=\"comment\"># 比较两次提交之间的差异  </span></span><br><span class=\"line\">git diff &lt;branch1&gt;..&lt;branch2&gt; <span class=\"comment\"># 在两个分支之间比较  </span></span><br><span class=\"line\">git diff --staged   <span class=\"comment\"># 比较暂存区和版本库差异  </span></span><br><span class=\"line\">git diff --cached   <span class=\"comment\"># 比较暂存区和版本库差异  </span></span><br><span class=\"line\">git diff --stat     <span class=\"comment\"># 仅仅比较统计信息  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#退出diff查看状态直接输入Q即可.</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"查看提交记录\"><a href=\"#查看提交记录\" class=\"headerlink\" title=\"查看提交记录\"></a>查看提交记录</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log  </span><br><span class=\"line\">git log &lt;file&gt;      <span class=\"comment\"># 查看该文件每次提交记录  </span></span><br><span class=\"line\">git log -p &lt;file&gt;   <span class=\"comment\"># 查看每次详细修改内容的diff  </span></span><br><span class=\"line\">git log -p <span class=\"number\">-2</span>       <span class=\"comment\"># 查看最近两次详细修改内容的diff  </span></span><br><span class=\"line\">git log --stat      <span class=\"comment\">#查看提交统计信息</span></span><br></pre></td></tr></table></figure>\n<p> tig<br>Mac上可以使用tig代替diff和log，brew install tig</p>\n<hr>\n<h1 id=\"取得Git仓库\"><a href=\"#取得Git仓库\" class=\"headerlink\" title=\"取得Git仓库\"></a>取得Git仓库</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#初始化一个版本仓库  </span></span><br><span class=\"line\">git init  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#Clone远程版本库  </span></span><br><span class=\"line\">git clone git@xbc.me:wordpress.git  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#添加远程版本库origin，语法为 git remote add [shortname] [url]  </span></span><br><span class=\"line\">git remote add origin git@xbc.me:wordpress.git  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#查看远程仓库  </span></span><br><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"提交你的修改\"><a href=\"#提交你的修改\" class=\"headerlink\" title=\"提交你的修改\"></a>提交你的修改</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#添加当前修改的文件到暂存区  </span></span><br><span class=\"line\">git add .  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#如果你自动追踪文件，包括你已经手动删除的，状态为Deleted的文件  </span></span><br><span class=\"line\">git add -u  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#提交你的修改  </span></span><br><span class=\"line\">git commit –m <span class=\"string\">\"你的注释\"</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#推送你的更新到远程服务器,语法为 git push [远程名] [本地分支]:[远程分支]  </span></span><br><span class=\"line\">git push origin master  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#查看文件状态  </span></span><br><span class=\"line\">git status  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#跟踪新文件  </span></span><br><span class=\"line\">git add readme.txt  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#从当前跟踪列表移除文件，并完全删除  </span></span><br><span class=\"line\">git rm readme.txt  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#仅在暂存区删除，保留文件在当前目录，不再跟踪  </span></span><br><span class=\"line\">git rm –cached readme.txt  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#重命名文件  </span></span><br><span class=\"line\">git mv reademe.txt readme  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#查看提交的历史记录  </span></span><br><span class=\"line\">git log  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#修改最后一次提交注释的，利用–amend参数  </span></span><br><span class=\"line\">git commit --amend  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#忘记提交某些修改，下面的三条命令只会得到一个提交。  </span></span><br><span class=\"line\">git commit –m &amp;quot;add readme.txt&amp;quot;  </span><br><span class=\"line\">git add readme_forgotten  </span><br><span class=\"line\">git commit –amend  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#假设你已经使用git add .，将修改过的文件a、b加到暂存区  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#现在你只想提交a文件，不想提交b文件，应该这样  </span></span><br><span class=\"line\">git reset HEAD b  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#取消对文件的修改  </span></span><br><span class=\"line\">git checkout –- readme.txt</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"查看、切换、创建和删除分支\"><a href=\"#查看、切换、创建和删除分支\" class=\"headerlink\" title=\"查看、切换、创建和删除分支\"></a>查看、切换、创建和删除分支</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git br -r           <span class=\"comment\"># 查看远程分支  </span></span><br><span class=\"line\">git br &lt;new_branch&gt; <span class=\"comment\"># 创建新的分支  </span></span><br><span class=\"line\">git br -v           <span class=\"comment\"># 查看各个分支最后提交信息  </span></span><br><span class=\"line\">git br --merged     <span class=\"comment\"># 查看已经被合并到当前分支的分支  </span></span><br><span class=\"line\">git br --no-merged  <span class=\"comment\"># 查看尚未被合并到当前分支的分支  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">git co &lt;branch&gt;     <span class=\"comment\"># 切换到某个分支  </span></span><br><span class=\"line\">git co -b &lt;new_branch&gt; <span class=\"comment\"># 创建新的分支，并且切换过去  </span></span><br><span class=\"line\">git co -b &lt;new_branch&gt; &lt;branch&gt;  <span class=\"comment\"># 基于branch创建新的new_branch  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">git co $id          <span class=\"comment\"># 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除  </span></span><br><span class=\"line\">git co $id -b &lt;new_branch&gt;  <span class=\"comment\"># 把某次历史提交记录checkout出来，创建成一个分支  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">git br -d &lt;branch&gt;  <span class=\"comment\"># 删除某个分支  </span></span><br><span class=\"line\">git br -D &lt;branch&gt;  <span class=\"comment\"># 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"分支合并和rebase\"><a href=\"#分支合并和rebase\" class=\"headerlink\" title=\"分支合并和rebase\"></a>分支合并和rebase</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge &lt;branch&gt;               <span class=\"comment\"># 将branch分支合并到当前分支  </span></span><br><span class=\"line\">git merge origin/master --no-ff  <span class=\"comment\"># 不要Fast-Foward合并，这样可以生成merge提交  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">git rebase master &lt;branch&gt;       <span class=\"comment\"># 将master rebase到branch，相当于：  </span></span><br><span class=\"line\">git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Git补丁管理-方便在多台机器上开发同步时用\"><a href=\"#Git补丁管理-方便在多台机器上开发同步时用\" class=\"headerlink\" title=\"Git补丁管理(方便在多台机器上开发同步时用)\"></a>Git补丁管理(方便在多台机器上开发同步时用)</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff &gt; ../sync.patch         <span class=\"comment\"># 生成补丁  </span></span><br><span class=\"line\">git apply ../sync.patch          <span class=\"comment\"># 打补丁  </span></span><br><span class=\"line\">git apply --check ../sync.patch  <span class=\"comment\">#测试补丁能否成功</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Git暂存管理\"><a href=\"#Git暂存管理\" class=\"headerlink\" title=\"Git暂存管理\"></a>Git暂存管理</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash                        <span class=\"comment\"># 暂存  </span></span><br><span class=\"line\">git stash list                   <span class=\"comment\"># 列所有stash  </span></span><br><span class=\"line\">git stash apply                  <span class=\"comment\"># 恢复暂存的内容  </span></span><br><span class=\"line\">git stash drop                   <span class=\"comment\"># 删除暂存区</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Git远程分支管理\"><a href=\"#Git远程分支管理\" class=\"headerlink\" title=\"Git远程分支管理\"></a>Git远程分支管理</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull                         <span class=\"comment\"># 抓取远程仓库所有分支更新并合并到本地  </span></span><br><span class=\"line\">git pull --no-ff                 <span class=\"comment\"># 抓取远程仓库所有分支更新并合并到本地，不要快进合并  </span></span><br><span class=\"line\">git fetch origin                 <span class=\"comment\"># 抓取远程仓库更新  </span></span><br><span class=\"line\">git merge origin/master          <span class=\"comment\"># 将远程主分支合并到本地当前分支  </span></span><br><span class=\"line\">git co --track origin/branch     <span class=\"comment\"># 跟踪某个远程分支创建相应的本地分支  </span></span><br><span class=\"line\">git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt;  <span class=\"comment\"># 基于远程分支创建本地分支，功能同上  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">git push                         <span class=\"comment\"># push所有分支  </span></span><br><span class=\"line\">git push origin master           <span class=\"comment\"># 将本地主分支推到远程主分支  </span></span><br><span class=\"line\">git push -u origin master        <span class=\"comment\"># 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)  </span></span><br><span class=\"line\">git push origin &lt;local_branch&gt;   <span class=\"comment\"># 创建远程分支， origin是远程仓库名  </span></span><br><span class=\"line\">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt;  <span class=\"comment\"># 创建远程分支  </span></span><br><span class=\"line\">git push origin :&lt;remote_branch&gt;  <span class=\"comment\">#先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"基本的分支管理\"><a href=\"#基本的分支管理\" class=\"headerlink\" title=\"基本的分支管理\"></a>基本的分支管理</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建一个分支  </span></span><br><span class=\"line\">git branch iss53  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#切换工作目录到iss53  </span></span><br><span class=\"line\">git checkout iss53  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#将上面的命令合在一起，创建iss53分支并切换到iss53  </span></span><br><span class=\"line\">git checkout –b iss53  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#合并iss53分支，当前工作目录为master  </span></span><br><span class=\"line\">git merge iss53  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#合并完成后，没有出现冲突，删除iss53分支  </span></span><br><span class=\"line\">git branch –d iss53  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#拉去远程仓库的数据，语法为 git fetch [remote-name]  </span></span><br><span class=\"line\">git fetch  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#fetch 会拉去最新的远程仓库数据，但不会自动到当前目录下，要自动合并  </span></span><br><span class=\"line\">git pull  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#查看远程仓库的信息  </span></span><br><span class=\"line\">git remote show origin  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#建立本地的dev分支追踪远程仓库的develop分支  </span></span><br><span class=\"line\">git checkout –b dev origin/develop</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Git远程仓库管理\"><a href=\"#Git远程仓库管理\" class=\"headerlink\" title=\"Git远程仓库管理\"></a>Git远程仓库管理</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v                    <span class=\"comment\"># 查看远程服务器地址和仓库名称  </span></span><br><span class=\"line\">git remote show origin           <span class=\"comment\"># 查看远程服务器仓库状态  </span></span><br><span class=\"line\">git remote add origin git@ github:robbin/robbin_site.git         <span class=\"comment\"># 添加远程仓库地址  </span></span><br><span class=\"line\">git remote set-url origin git@ github.com:robbin/robbin_site.git <span class=\"comment\"># 设置远程仓库地址(用于修改远程仓库地址)  </span></span><br><span class=\"line\">git remote rm &lt;repository&gt;       <span class=\"comment\"># 删除远程仓库</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"创建远程仓库\"><a href=\"#创建远程仓库\" class=\"headerlink\" title=\"创建远程仓库\"></a>创建远程仓库</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone --bare robbin_site robbin_site.git  <span class=\"comment\"># 用带版本的项目创建纯版本仓库  </span></span><br><span class=\"line\">scp -r my_project.git git@ git.csdn.net:~      <span class=\"comment\"># 将纯仓库上传到服务器上  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init <span class=\"comment\"># 在服务器创建纯仓库  </span></span><br><span class=\"line\">git remote add origin git@ github.com:robbin/robbin_site.git    <span class=\"comment\"># 设置远程仓库地址  </span></span><br><span class=\"line\">git push -u origin master                                      <span class=\"comment\"># 客户端首次提交  </span></span><br><span class=\"line\">git push -u origin develop  <span class=\"comment\"># 首次将本地develop分支提交到远程develop分支，并且track  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">git remote set-head origin master   <span class=\"comment\"># 设置远程仓库的HEAD指向master分支 </span></span><br><span class=\"line\"></span><br><span class=\"line\">git push origin -f  <span class=\"comment\">#强制推送当前版本到网络 可结合回滚使用.</span></span><br></pre></td></tr></table></figure>\n<p>也可以命令设置跟踪远程库和本地库</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --set-upstream master origin/master  </span><br><span class=\"line\">git branch --set-upstream develop origin/develop</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Github协同流程：\"><a href=\"#Github协同流程：\" class=\"headerlink\" title=\"Github协同流程：\"></a>Github协同流程：</h1><p>fork给自己 → clone到本地 → coding → push回自己 → github上提出Pull Request即可<br>之后，本地添加fork源为远端源 → 工作前先pull下fork源保持代码较新 → coding → …</p>\n<hr>\n<h1 id=\"GitHub更新fork的版本实践\"><a href=\"#GitHub更新fork的版本实践\" class=\"headerlink\" title=\"GitHub更新fork的版本实践:\"></a>GitHub更新fork的版本实践:</h1><p>前提<br>你已经在github上fork了别人的分支，并且弄好了跟github的ssh连接。(如果没有ssh连接可使用HTTP,操作的时候会多一个输入用户名密码操作)<br>相关配置详情参考：<a href=\"https://help.github.com\" target=\"_blank\" rel=\"external\">https://help.github.com</a>    </p>\n<p>详细操作:   </p>\n<p>1.检出自己在github上fork别人的分支   </p>\n<pre><code>git clone git@github.com:comtu/android-training-course-in-chinese.git   \n</code></pre><p>2.然后增加远程分支（也就是你fork那个人的分支）名为atcic（这个名字任意）到你本地。   </p>\n<pre><code>git remote add atcic git@github.com:kesenhoo/android-training-course-in-chinese.git   \n</code></pre><p>如果你运行命令：git remote -v你会发现多出来了一个Bob的远程分支。如下：  </p>\n<pre><code>atcic   git@github.com:kesenhoo/android-training-course-in-chinese.git (fetch)  \natcic   git@github.com:kesenhoo/android-training-course-in-chinese.git (push)  \norigin  git@github.com:comtu/android-training-course-in-chinese.git (fetch)  \norigin  git@github.com:comtu/android-training-course-in-chinese.git (push)  \n</code></pre><p>3.然后，把对方的代码拉到你本地。  </p>\n<pre><code>git fetch atcic   \n</code></pre><p>4.最后，合并对方的代码。    </p>\n<pre><code>git merge atcic/master     \n</code></pre><p>5.最最后，把最新的代码推送到你的github上。  </p>\n<pre><code>git push origin master   \n</code></pre><p>这样就完成了自己的代码更新。   </p>\n<hr>\n<p>Git版本控制大全: </p>\n<p><a href=\"http://git-scm.com/book/zh/v1\" target=\"_blank\" rel=\"external\">http://git-scm.com/book/zh/v1</a></p>\n","excerpt":"<h1 id=\"初始化配置\"><a href=\"#初始化配置\" class=\"headerlink\" title=\"初始化配置\"></a>初始化配置</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#配置使用git仓库的人员姓名  </span></span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> user.name <span class=\"string\">\"Your Name Comes Here\"</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#配置使用git仓库的人员email  </span></span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> user.email you@yourdomain.example.com  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#配置到缓存 默认15分钟  </span></span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> credential.helper cache   </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#修改缓存时间  </span></span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> credential.helper <span class=\"string\">'cache --timeout=3600'</span>    </span><br><span class=\"line\">  </span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> color.ui true  </span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> alias.co checkout  </span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> alias.ci commit  </span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> alias.st status  </span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> alias.br branch  </span><br><span class=\"line\">git config --<span class=\"keyword\">global</span> core.editor <span class=\"string\">\"mate -w\"</span>    <span class=\"comment\"># 设置Editor使用textmate  </span></span><br><span class=\"line\">git config <span class=\"number\">-1</span> <span class=\"comment\">#列举所有配置  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#用户的git配置文件~/.gitconfig</span></span><br></pre></td></tr></table></figure>","more":"<hr>\n<h1 id=\"查看、添加、提交、删除、找回，重置修改文件\"><a href=\"#查看、添加、提交、删除、找回，重置修改文件\" class=\"headerlink\" title=\"查看、添加、提交、删除、找回，重置修改文件\"></a>查看、添加、提交、删除、找回，重置修改文件</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git help &lt;command&gt;  <span class=\"comment\"># 显示command的help  </span></span><br><span class=\"line\">git show            <span class=\"comment\"># 显示某次提交的内容  </span></span><br><span class=\"line\">git show $id  </span><br><span class=\"line\">   </span><br><span class=\"line\">git co  -- &lt;file&gt;   <span class=\"comment\"># 抛弃工作区修改  </span></span><br><span class=\"line\">git co  .           <span class=\"comment\"># 抛弃工作区修改  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">git add &lt;file&gt;      <span class=\"comment\"># 将工作文件修改提交到本地暂存区  </span></span><br><span class=\"line\">git add .           <span class=\"comment\"># 将所有修改过的工作文件提交暂存区  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">git rm &lt;file&gt;       <span class=\"comment\"># 从版本库中删除文件  </span></span><br><span class=\"line\">git rm &lt;file&gt; --cached  <span class=\"comment\"># 从版本库中删除文件，但不删除文件  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">git reset &lt;file&gt;    <span class=\"comment\"># 从暂存区恢复到工作文件  </span></span><br><span class=\"line\">git reset -- .      <span class=\"comment\"># 从暂存区恢复到工作文件  </span></span><br><span class=\"line\">git reset --hard    <span class=\"comment\"># 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">git ci &lt;file&gt;  </span><br><span class=\"line\">git ci .  </span><br><span class=\"line\">git ci -a           <span class=\"comment\"># 将git add, git rm和git ci等操作都合并在一起做  </span></span><br><span class=\"line\">git ci -am <span class=\"string\">\"some comments\"</span>  </span><br><span class=\"line\">git ci --amend      <span class=\"comment\"># 修改最后一次提交记录  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">git revert &lt;$id&gt;    <span class=\"comment\"># 恢复某次提交的状态，恢复动作本身也创建了一次提交对象  </span></span><br><span class=\"line\">git revert HEAD     <span class=\"comment\"># 恢复最后一次提交的状态</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"查看文件diff\"><a href=\"#查看文件diff\" class=\"headerlink\" title=\"查看文件diff\"></a>查看文件diff</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff &lt;file&gt;     <span class=\"comment\"># 比较当前文件和暂存区文件差异  </span></span><br><span class=\"line\">git diff  </span><br><span class=\"line\">git diff &lt;$id1&gt; &lt;$id2&gt;   <span class=\"comment\"># 比较两次提交之间的差异  </span></span><br><span class=\"line\">git diff &lt;branch1&gt;..&lt;branch2&gt; <span class=\"comment\"># 在两个分支之间比较  </span></span><br><span class=\"line\">git diff --staged   <span class=\"comment\"># 比较暂存区和版本库差异  </span></span><br><span class=\"line\">git diff --cached   <span class=\"comment\"># 比较暂存区和版本库差异  </span></span><br><span class=\"line\">git diff --stat     <span class=\"comment\"># 仅仅比较统计信息  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#退出diff查看状态直接输入Q即可.</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"查看提交记录\"><a href=\"#查看提交记录\" class=\"headerlink\" title=\"查看提交记录\"></a>查看提交记录</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log  </span><br><span class=\"line\">git log &lt;file&gt;      <span class=\"comment\"># 查看该文件每次提交记录  </span></span><br><span class=\"line\">git log -p &lt;file&gt;   <span class=\"comment\"># 查看每次详细修改内容的diff  </span></span><br><span class=\"line\">git log -p <span class=\"number\">-2</span>       <span class=\"comment\"># 查看最近两次详细修改内容的diff  </span></span><br><span class=\"line\">git log --stat      <span class=\"comment\">#查看提交统计信息</span></span><br></pre></td></tr></table></figure>\n<p> tig<br>Mac上可以使用tig代替diff和log，brew install tig</p>\n<hr>\n<h1 id=\"取得Git仓库\"><a href=\"#取得Git仓库\" class=\"headerlink\" title=\"取得Git仓库\"></a>取得Git仓库</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#初始化一个版本仓库  </span></span><br><span class=\"line\">git init  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#Clone远程版本库  </span></span><br><span class=\"line\">git clone git@xbc.me:wordpress.git  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#添加远程版本库origin，语法为 git remote add [shortname] [url]  </span></span><br><span class=\"line\">git remote add origin git@xbc.me:wordpress.git  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#查看远程仓库  </span></span><br><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"提交你的修改\"><a href=\"#提交你的修改\" class=\"headerlink\" title=\"提交你的修改\"></a>提交你的修改</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#添加当前修改的文件到暂存区  </span></span><br><span class=\"line\">git add .  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#如果你自动追踪文件，包括你已经手动删除的，状态为Deleted的文件  </span></span><br><span class=\"line\">git add -u  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#提交你的修改  </span></span><br><span class=\"line\">git commit –m <span class=\"string\">\"你的注释\"</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#推送你的更新到远程服务器,语法为 git push [远程名] [本地分支]:[远程分支]  </span></span><br><span class=\"line\">git push origin master  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#查看文件状态  </span></span><br><span class=\"line\">git status  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#跟踪新文件  </span></span><br><span class=\"line\">git add readme.txt  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#从当前跟踪列表移除文件，并完全删除  </span></span><br><span class=\"line\">git rm readme.txt  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#仅在暂存区删除，保留文件在当前目录，不再跟踪  </span></span><br><span class=\"line\">git rm –cached readme.txt  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#重命名文件  </span></span><br><span class=\"line\">git mv reademe.txt readme  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#查看提交的历史记录  </span></span><br><span class=\"line\">git log  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#修改最后一次提交注释的，利用–amend参数  </span></span><br><span class=\"line\">git commit --amend  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#忘记提交某些修改，下面的三条命令只会得到一个提交。  </span></span><br><span class=\"line\">git commit –m &amp;quot;add readme.txt&amp;quot;  </span><br><span class=\"line\">git add readme_forgotten  </span><br><span class=\"line\">git commit –amend  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#假设你已经使用git add .，将修改过的文件a、b加到暂存区  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#现在你只想提交a文件，不想提交b文件，应该这样  </span></span><br><span class=\"line\">git reset HEAD b  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#取消对文件的修改  </span></span><br><span class=\"line\">git checkout –- readme.txt</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"查看、切换、创建和删除分支\"><a href=\"#查看、切换、创建和删除分支\" class=\"headerlink\" title=\"查看、切换、创建和删除分支\"></a>查看、切换、创建和删除分支</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git br -r           <span class=\"comment\"># 查看远程分支  </span></span><br><span class=\"line\">git br &lt;new_branch&gt; <span class=\"comment\"># 创建新的分支  </span></span><br><span class=\"line\">git br -v           <span class=\"comment\"># 查看各个分支最后提交信息  </span></span><br><span class=\"line\">git br --merged     <span class=\"comment\"># 查看已经被合并到当前分支的分支  </span></span><br><span class=\"line\">git br --no-merged  <span class=\"comment\"># 查看尚未被合并到当前分支的分支  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">git co &lt;branch&gt;     <span class=\"comment\"># 切换到某个分支  </span></span><br><span class=\"line\">git co -b &lt;new_branch&gt; <span class=\"comment\"># 创建新的分支，并且切换过去  </span></span><br><span class=\"line\">git co -b &lt;new_branch&gt; &lt;branch&gt;  <span class=\"comment\"># 基于branch创建新的new_branch  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">git co $id          <span class=\"comment\"># 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除  </span></span><br><span class=\"line\">git co $id -b &lt;new_branch&gt;  <span class=\"comment\"># 把某次历史提交记录checkout出来，创建成一个分支  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">git br -d &lt;branch&gt;  <span class=\"comment\"># 删除某个分支  </span></span><br><span class=\"line\">git br -D &lt;branch&gt;  <span class=\"comment\"># 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"分支合并和rebase\"><a href=\"#分支合并和rebase\" class=\"headerlink\" title=\"分支合并和rebase\"></a>分支合并和rebase</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge &lt;branch&gt;               <span class=\"comment\"># 将branch分支合并到当前分支  </span></span><br><span class=\"line\">git merge origin/master --no-ff  <span class=\"comment\"># 不要Fast-Foward合并，这样可以生成merge提交  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">git rebase master &lt;branch&gt;       <span class=\"comment\"># 将master rebase到branch，相当于：  </span></span><br><span class=\"line\">git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Git补丁管理-方便在多台机器上开发同步时用\"><a href=\"#Git补丁管理-方便在多台机器上开发同步时用\" class=\"headerlink\" title=\"Git补丁管理(方便在多台机器上开发同步时用)\"></a>Git补丁管理(方便在多台机器上开发同步时用)</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff &gt; ../sync.patch         <span class=\"comment\"># 生成补丁  </span></span><br><span class=\"line\">git apply ../sync.patch          <span class=\"comment\"># 打补丁  </span></span><br><span class=\"line\">git apply --check ../sync.patch  <span class=\"comment\">#测试补丁能否成功</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Git暂存管理\"><a href=\"#Git暂存管理\" class=\"headerlink\" title=\"Git暂存管理\"></a>Git暂存管理</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash                        <span class=\"comment\"># 暂存  </span></span><br><span class=\"line\">git stash list                   <span class=\"comment\"># 列所有stash  </span></span><br><span class=\"line\">git stash apply                  <span class=\"comment\"># 恢复暂存的内容  </span></span><br><span class=\"line\">git stash drop                   <span class=\"comment\"># 删除暂存区</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Git远程分支管理\"><a href=\"#Git远程分支管理\" class=\"headerlink\" title=\"Git远程分支管理\"></a>Git远程分支管理</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull                         <span class=\"comment\"># 抓取远程仓库所有分支更新并合并到本地  </span></span><br><span class=\"line\">git pull --no-ff                 <span class=\"comment\"># 抓取远程仓库所有分支更新并合并到本地，不要快进合并  </span></span><br><span class=\"line\">git fetch origin                 <span class=\"comment\"># 抓取远程仓库更新  </span></span><br><span class=\"line\">git merge origin/master          <span class=\"comment\"># 将远程主分支合并到本地当前分支  </span></span><br><span class=\"line\">git co --track origin/branch     <span class=\"comment\"># 跟踪某个远程分支创建相应的本地分支  </span></span><br><span class=\"line\">git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt;  <span class=\"comment\"># 基于远程分支创建本地分支，功能同上  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">git push                         <span class=\"comment\"># push所有分支  </span></span><br><span class=\"line\">git push origin master           <span class=\"comment\"># 将本地主分支推到远程主分支  </span></span><br><span class=\"line\">git push -u origin master        <span class=\"comment\"># 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)  </span></span><br><span class=\"line\">git push origin &lt;local_branch&gt;   <span class=\"comment\"># 创建远程分支， origin是远程仓库名  </span></span><br><span class=\"line\">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt;  <span class=\"comment\"># 创建远程分支  </span></span><br><span class=\"line\">git push origin :&lt;remote_branch&gt;  <span class=\"comment\">#先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"基本的分支管理\"><a href=\"#基本的分支管理\" class=\"headerlink\" title=\"基本的分支管理\"></a>基本的分支管理</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建一个分支  </span></span><br><span class=\"line\">git branch iss53  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#切换工作目录到iss53  </span></span><br><span class=\"line\">git checkout iss53  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#将上面的命令合在一起，创建iss53分支并切换到iss53  </span></span><br><span class=\"line\">git checkout –b iss53  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#合并iss53分支，当前工作目录为master  </span></span><br><span class=\"line\">git merge iss53  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#合并完成后，没有出现冲突，删除iss53分支  </span></span><br><span class=\"line\">git branch –d iss53  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#拉去远程仓库的数据，语法为 git fetch [remote-name]  </span></span><br><span class=\"line\">git fetch  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#fetch 会拉去最新的远程仓库数据，但不会自动到当前目录下，要自动合并  </span></span><br><span class=\"line\">git pull  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#查看远程仓库的信息  </span></span><br><span class=\"line\">git remote show origin  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#建立本地的dev分支追踪远程仓库的develop分支  </span></span><br><span class=\"line\">git checkout –b dev origin/develop</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Git远程仓库管理\"><a href=\"#Git远程仓库管理\" class=\"headerlink\" title=\"Git远程仓库管理\"></a>Git远程仓库管理</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v                    <span class=\"comment\"># 查看远程服务器地址和仓库名称  </span></span><br><span class=\"line\">git remote show origin           <span class=\"comment\"># 查看远程服务器仓库状态  </span></span><br><span class=\"line\">git remote add origin git@ github:robbin/robbin_site.git         <span class=\"comment\"># 添加远程仓库地址  </span></span><br><span class=\"line\">git remote set-url origin git@ github.com:robbin/robbin_site.git <span class=\"comment\"># 设置远程仓库地址(用于修改远程仓库地址)  </span></span><br><span class=\"line\">git remote rm &lt;repository&gt;       <span class=\"comment\"># 删除远程仓库</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"创建远程仓库\"><a href=\"#创建远程仓库\" class=\"headerlink\" title=\"创建远程仓库\"></a>创建远程仓库</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone --bare robbin_site robbin_site.git  <span class=\"comment\"># 用带版本的项目创建纯版本仓库  </span></span><br><span class=\"line\">scp -r my_project.git git@ git.csdn.net:~      <span class=\"comment\"># 将纯仓库上传到服务器上  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init <span class=\"comment\"># 在服务器创建纯仓库  </span></span><br><span class=\"line\">git remote add origin git@ github.com:robbin/robbin_site.git    <span class=\"comment\"># 设置远程仓库地址  </span></span><br><span class=\"line\">git push -u origin master                                      <span class=\"comment\"># 客户端首次提交  </span></span><br><span class=\"line\">git push -u origin develop  <span class=\"comment\"># 首次将本地develop分支提交到远程develop分支，并且track  </span></span><br><span class=\"line\">   </span><br><span class=\"line\">git remote set-head origin master   <span class=\"comment\"># 设置远程仓库的HEAD指向master分支 </span></span><br><span class=\"line\"></span><br><span class=\"line\">git push origin -f  <span class=\"comment\">#强制推送当前版本到网络 可结合回滚使用.</span></span><br></pre></td></tr></table></figure>\n<p>也可以命令设置跟踪远程库和本地库</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --set-upstream master origin/master  </span><br><span class=\"line\">git branch --set-upstream develop origin/develop</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Github协同流程：\"><a href=\"#Github协同流程：\" class=\"headerlink\" title=\"Github协同流程：\"></a>Github协同流程：</h1><p>fork给自己 → clone到本地 → coding → push回自己 → github上提出Pull Request即可<br>之后，本地添加fork源为远端源 → 工作前先pull下fork源保持代码较新 → coding → …</p>\n<hr>\n<h1 id=\"GitHub更新fork的版本实践\"><a href=\"#GitHub更新fork的版本实践\" class=\"headerlink\" title=\"GitHub更新fork的版本实践:\"></a>GitHub更新fork的版本实践:</h1><p>前提<br>你已经在github上fork了别人的分支，并且弄好了跟github的ssh连接。(如果没有ssh连接可使用HTTP,操作的时候会多一个输入用户名密码操作)<br>相关配置详情参考：<a href=\"https://help.github.com\">https://help.github.com</a>    </p>\n<p>详细操作:   </p>\n<p>1.检出自己在github上fork别人的分支   </p>\n<pre><code>git clone git@github.com:comtu/android-training-course-in-chinese.git   \n</code></pre><p>2.然后增加远程分支（也就是你fork那个人的分支）名为atcic（这个名字任意）到你本地。   </p>\n<pre><code>git remote add atcic git@github.com:kesenhoo/android-training-course-in-chinese.git   \n</code></pre><p>如果你运行命令：git remote -v你会发现多出来了一个Bob的远程分支。如下：  </p>\n<pre><code>atcic   git@github.com:kesenhoo/android-training-course-in-chinese.git (fetch)  \natcic   git@github.com:kesenhoo/android-training-course-in-chinese.git (push)  \norigin  git@github.com:comtu/android-training-course-in-chinese.git (fetch)  \norigin  git@github.com:comtu/android-training-course-in-chinese.git (push)  \n</code></pre><p>3.然后，把对方的代码拉到你本地。  </p>\n<pre><code>git fetch atcic   \n</code></pre><p>4.最后，合并对方的代码。    </p>\n<pre><code>git merge atcic/master     \n</code></pre><p>5.最最后，把最新的代码推送到你的github上。  </p>\n<pre><code>git push origin master   \n</code></pre><p>这样就完成了自己的代码更新。   </p>\n<hr>\n<p>Git版本控制大全: </p>\n<p><a href=\"http://git-scm.com/book/zh/v1\">http://git-scm.com/book/zh/v1</a></p>"},{"layout":"post","title":"模板设计模式","duoshuo":true,"date":"2014-10-19T16:00:00.000Z","_content":"\n\n# 模板设计模式\n\n## 模版模式设计步骤\n\n\t\t1. 写出解决某一类问题的固有的模版代码\n\t\t2. 抽取模版代码中可变的部分，形成独立的函数\n\t\t3. 可变部分抽取的函数定义为抽象函数，类定义为抽象类\n\t\t4. 创建实现类继承并实现父类的未实现的函数\n\t\t5. 为了避免子类重写父类的模版代码，需要将模版代码修饰为final\n\n<!-- more -->\n\n```java\n\tabstract class RunCode //3.有抽象方法code()所以必须定义为抽象类\n\t{\n\t\t// 1.计算一段代码的运行时间\n\t\tpublic final void getRuntime(){\t//5.方法为最终代码final修饰\n\t\t    // 获取运行前系统的当前时间  毫秒  一秒 = 1000毫秒\n\t\tlong start = System.currentTimeMillis(); \n\t\t\t// 测试代码\n\t\t\tcode();\t\t//2.调用需要测试运行时间的方法,\n\t\t\t// 运行结束后获取系统的当前时间\n\t\tlong end = System.currentTimeMillis(); \n\t\t\t//结束时间减开始时间等于运行用时\n\t\t   System.out.println(\"运行时间： \" + ( end - start ) );\n\t\t}\n\t\tpublic abstract void code();//3.不知这方法如何实现,定义成抽象\n\t}\n\n```\n\n```java\n\n\tclass MyRunCode extends RunCode\t//4.实现类 继承抽象类\n\t{\n\t    public void code(){\t\t\t//4.实现抽象方法\n\t\t\t for (int i = 0;i<100 ;i++ )\n\t\t\t {\n\t\t\t\t System.out.println(\"目前打印的是第\"+i+\"次\");\n\t\t\t }\n\t\t}\n\t}\n\n```\n\n```java\n\tclass Demo\t\t//演示类 \n\t{\n\t\tpublic static void main(String[] args) \n\t\t{\n\t\t\tnew MyRunCode().getRuntime();\t\t//调用\n\t\t}\n\t}\n```\n\n---\n\n## 模板设计模式方式二: 接口版\n\t\n接口版比较适合在同一个类中出现重复代码时 将重复代码封装成一个函数.定义接口,与接口实现类进行实现\n\n案例:\n\n```java\n\tpackage com.tu.test;\n\timport org.junit.Test;\n\t/***\n\t * 模板设计模式基于接口版\n\t * @author ComTu\n\t */\n\tpublic class Template_Inter {\n\t\t//接口\n\t\tpublic interface RunCode_inter{  //1.编写接口\n\t\t\tvoid code();  //2.编写抽象方法 (接口中方法默认是abstract)\n\t\t}\n\t\t//模板块  //3.编写一个模板代码方法需要带接口类型的参数.\n\t\tpublic void RunCode(RunCode_inter runcode){\n\t\t\t//运行时的毫秒数\n\t\t\tlong start = System.currentTimeMillis();\n\t\t\truncode.code();  //4.调用接口的code方法 \n\t\t\t//结束运行的毫秒数\n\t\t\tlong end = System.currentTimeMillis();\n\t\t\tSystem.out.println(\"运行时间: \"+(end-start));\n\t\t}\n\t\t//测试函数\n\t\t@Test\n\t\tpublic void startFor(){ \n\t\t\tRunCode(new RunCode_inter(){ //5.模板块 ( 创建接口实现类 )\n\t\t\t\t@Override\n\t\t\t\tpublic void code() { //6.需要在模板中执行的代码\n\n\t\t\t\t\tfor (int i = 0; i < 10000; i++) {\n\t\t\t\t\t\tSystem.out.println(\"i : \"+i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n```\n\n\n\n如果非要在其它类中进行调用的话可以使用如下方法:\n\n```java\n\tpackage com.tu.test;\n\tpublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\t//导入  类名.接口名  类似与java.util.Map.Entry  Map接口.Entry接口\n\t\t\tnew Template_Inter().RunCode(new com.tu.test.Template_Inter.RunCode_inter(){ //5.模板块 (创建接口实现类)\n\t\t\t\t@Override\n\t\t\t\tpublic void code() {//6.模板中执行的代码.\n\t\t\t\t\tSystem.out.println(\"运行的代码...\");\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n```\n\n---\n","source":"_posts/2014-10-20-Design_pattern_Template.md","raw":"---\nlayout : post\ntitle : \"模板设计模式\"\ncategory : 设计模式\nduoshuo: true\ndate : 2014-10-20\ntags : [设计模式 , 模板模式 , 模板方法模式 , Template]\n---\n\n\n# 模板设计模式\n\n## 模版模式设计步骤\n\n\t\t1. 写出解决某一类问题的固有的模版代码\n\t\t2. 抽取模版代码中可变的部分，形成独立的函数\n\t\t3. 可变部分抽取的函数定义为抽象函数，类定义为抽象类\n\t\t4. 创建实现类继承并实现父类的未实现的函数\n\t\t5. 为了避免子类重写父类的模版代码，需要将模版代码修饰为final\n\n<!-- more -->\n\n```java\n\tabstract class RunCode //3.有抽象方法code()所以必须定义为抽象类\n\t{\n\t\t// 1.计算一段代码的运行时间\n\t\tpublic final void getRuntime(){\t//5.方法为最终代码final修饰\n\t\t    // 获取运行前系统的当前时间  毫秒  一秒 = 1000毫秒\n\t\tlong start = System.currentTimeMillis(); \n\t\t\t// 测试代码\n\t\t\tcode();\t\t//2.调用需要测试运行时间的方法,\n\t\t\t// 运行结束后获取系统的当前时间\n\t\tlong end = System.currentTimeMillis(); \n\t\t\t//结束时间减开始时间等于运行用时\n\t\t   System.out.println(\"运行时间： \" + ( end - start ) );\n\t\t}\n\t\tpublic abstract void code();//3.不知这方法如何实现,定义成抽象\n\t}\n\n```\n\n```java\n\n\tclass MyRunCode extends RunCode\t//4.实现类 继承抽象类\n\t{\n\t    public void code(){\t\t\t//4.实现抽象方法\n\t\t\t for (int i = 0;i<100 ;i++ )\n\t\t\t {\n\t\t\t\t System.out.println(\"目前打印的是第\"+i+\"次\");\n\t\t\t }\n\t\t}\n\t}\n\n```\n\n```java\n\tclass Demo\t\t//演示类 \n\t{\n\t\tpublic static void main(String[] args) \n\t\t{\n\t\t\tnew MyRunCode().getRuntime();\t\t//调用\n\t\t}\n\t}\n```\n\n---\n\n## 模板设计模式方式二: 接口版\n\t\n接口版比较适合在同一个类中出现重复代码时 将重复代码封装成一个函数.定义接口,与接口实现类进行实现\n\n案例:\n\n```java\n\tpackage com.tu.test;\n\timport org.junit.Test;\n\t/***\n\t * 模板设计模式基于接口版\n\t * @author ComTu\n\t */\n\tpublic class Template_Inter {\n\t\t//接口\n\t\tpublic interface RunCode_inter{  //1.编写接口\n\t\t\tvoid code();  //2.编写抽象方法 (接口中方法默认是abstract)\n\t\t}\n\t\t//模板块  //3.编写一个模板代码方法需要带接口类型的参数.\n\t\tpublic void RunCode(RunCode_inter runcode){\n\t\t\t//运行时的毫秒数\n\t\t\tlong start = System.currentTimeMillis();\n\t\t\truncode.code();  //4.调用接口的code方法 \n\t\t\t//结束运行的毫秒数\n\t\t\tlong end = System.currentTimeMillis();\n\t\t\tSystem.out.println(\"运行时间: \"+(end-start));\n\t\t}\n\t\t//测试函数\n\t\t@Test\n\t\tpublic void startFor(){ \n\t\t\tRunCode(new RunCode_inter(){ //5.模板块 ( 创建接口实现类 )\n\t\t\t\t@Override\n\t\t\t\tpublic void code() { //6.需要在模板中执行的代码\n\n\t\t\t\t\tfor (int i = 0; i < 10000; i++) {\n\t\t\t\t\t\tSystem.out.println(\"i : \"+i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n```\n\n\n\n如果非要在其它类中进行调用的话可以使用如下方法:\n\n```java\n\tpackage com.tu.test;\n\tpublic class Test {\n\t\tpublic static void main(String[] args) {\n\t\t\t//导入  类名.接口名  类似与java.util.Map.Entry  Map接口.Entry接口\n\t\t\tnew Template_Inter().RunCode(new com.tu.test.Template_Inter.RunCode_inter(){ //5.模板块 (创建接口实现类)\n\t\t\t\t@Override\n\t\t\t\tpublic void code() {//6.模板中执行的代码.\n\t\t\t\t\tSystem.out.println(\"运行的代码...\");\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n```\n\n---\n","slug":"Design_pattern_Template","published":1,"updated":"2016-04-27T08:21:51.767Z","comments":1,"photos":[],"link":"","_id":"cinu3etxb000fxoj0saqpryyl","content":"<h1 id=\"模板设计模式\"><a href=\"#模板设计模式\" class=\"headerlink\" title=\"模板设计模式\"></a>模板设计模式</h1><h2 id=\"模版模式设计步骤\"><a href=\"#模版模式设计步骤\" class=\"headerlink\" title=\"模版模式设计步骤\"></a>模版模式设计步骤</h2><pre><code>1. 写出解决某一类问题的固有的模版代码\n2. 抽取模版代码中可变的部分，形成独立的函数\n3. 可变部分抽取的函数定义为抽象函数，类定义为抽象类\n4. 创建实现类继承并实现父类的未实现的函数\n5. 为了避免子类重写父类的模版代码，需要将模版代码修饰为final\n</code></pre><a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunCode</span> //3.有抽象方法<span class=\"title\">code</span>()所以必须定义为抽象类</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 1.计算一段代码的运行时间</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">getRuntime</span><span class=\"params\">()</span></span>&#123;\t<span class=\"comment\">//5.方法为最终代码final修饰</span></span><br><span class=\"line\">\t    <span class=\"comment\">// 获取运行前系统的当前时间  毫秒  一秒 = 1000毫秒</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> start = System.currentTimeMillis(); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 测试代码</span></span><br><span class=\"line\">\t\tcode();\t\t<span class=\"comment\">//2.调用需要测试运行时间的方法,</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 运行结束后获取系统的当前时间</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> end = System.currentTimeMillis(); </span><br><span class=\"line\">\t\t<span class=\"comment\">//结束时间减开始时间等于运行用时</span></span><br><span class=\"line\">\t   System.out.println(<span class=\"string\">\"运行时间： \"</span> + ( end - start ) );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">code</span><span class=\"params\">()</span></span>;<span class=\"comment\">//3.不知这方法如何实现,定义成抽象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRunCode</span> <span class=\"keyword\">extends</span> <span class=\"title\">RunCode</span>\t//4.实现类 继承抽象类</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">code</span><span class=\"params\">()</span></span>&#123;\t\t\t<span class=\"comment\">//4.实现抽象方法</span></span><br><span class=\"line\">\t\t <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span> ;i++ )</span><br><span class=\"line\">\t\t &#123;</span><br><span class=\"line\">\t\t\t System.out.println(<span class=\"string\">\"目前打印的是第\"</span>+i+<span class=\"string\">\"次\"</span>);</span><br><span class=\"line\">\t\t &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span>\t\t//演示类 </span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span><br><span class=\"line\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> MyRunCode().getRuntime();\t\t<span class=\"comment\">//调用</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"模板设计模式方式二-接口版\"><a href=\"#模板设计模式方式二-接口版\" class=\"headerlink\" title=\"模板设计模式方式二: 接口版\"></a>模板设计模式方式二: 接口版</h2><p>接口版比较适合在同一个类中出现重复代码时 将重复代码封装成一个函数.定义接口,与接口实现类进行实现</p>\n<p>案例:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"comment\">/***</span><br><span class=\"line\"> * 模板设计模式基于接口版</span><br><span class=\"line\"> * <span class=\"doctag\">@author</span> ComTu</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Template_Inter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//接口</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">RunCode_inter</span></span>&#123;  <span class=\"comment\">//1.编写接口</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">code</span><span class=\"params\">()</span></span>;  <span class=\"comment\">//2.编写抽象方法 (接口中方法默认是abstract)</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//模板块  //3.编写一个模板代码方法需要带接口类型的参数.</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">RunCode</span><span class=\"params\">(RunCode_inter runcode)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//运行时的毫秒数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">\t\truncode.code();  <span class=\"comment\">//4.调用接口的code方法 </span></span><br><span class=\"line\">\t\t<span class=\"comment\">//结束运行的毫秒数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> end = System.currentTimeMillis();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"运行时间: \"</span>+(end-start));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//测试函数</span></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startFor</span><span class=\"params\">()</span></span>&#123; </span><br><span class=\"line\">\t\tRunCode(<span class=\"keyword\">new</span> RunCode_inter()&#123; <span class=\"comment\">//5.模板块 ( 创建接口实现类 )</span></span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">code</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">//6.需要在模板中执行的代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"i : \"</span>+i);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果非要在其它类中进行调用的话可以使用如下方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//导入  类名.接口名  类似与java.util.Map.Entry  Map接口.Entry接口</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Template_Inter().RunCode(<span class=\"keyword\">new</span> com.tu.test.Template_Inter.RunCode_inter()&#123; <span class=\"comment\">//5.模板块 (创建接口实现类)</span></span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">code</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//6.模板中执行的代码.</span></span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"运行的代码...\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n","excerpt":"<h1 id=\"模板设计模式\"><a href=\"#模板设计模式\" class=\"headerlink\" title=\"模板设计模式\"></a>模板设计模式</h1><h2 id=\"模版模式设计步骤\"><a href=\"#模版模式设计步骤\" class=\"headerlink\" title=\"模版模式设计步骤\"></a>模版模式设计步骤</h2><pre><code>1. 写出解决某一类问题的固有的模版代码\n2. 抽取模版代码中可变的部分，形成独立的函数\n3. 可变部分抽取的函数定义为抽象函数，类定义为抽象类\n4. 创建实现类继承并实现父类的未实现的函数\n5. 为了避免子类重写父类的模版代码，需要将模版代码修饰为final\n</code></pre>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunCode</span> //3.有抽象方法<span class=\"title\">code</span>()所以必须定义为抽象类</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 1.计算一段代码的运行时间</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">getRuntime</span><span class=\"params\">()</span></span>&#123;\t<span class=\"comment\">//5.方法为最终代码final修饰</span></span><br><span class=\"line\">\t    <span class=\"comment\">// 获取运行前系统的当前时间  毫秒  一秒 = 1000毫秒</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> start = System.currentTimeMillis(); </span><br><span class=\"line\">\t\t<span class=\"comment\">// 测试代码</span></span><br><span class=\"line\">\t\tcode();\t\t<span class=\"comment\">//2.调用需要测试运行时间的方法,</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 运行结束后获取系统的当前时间</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> end = System.currentTimeMillis(); </span><br><span class=\"line\">\t\t<span class=\"comment\">//结束时间减开始时间等于运行用时</span></span><br><span class=\"line\">\t   System.out.println(<span class=\"string\">\"运行时间： \"</span> + ( end - start ) );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">code</span><span class=\"params\">()</span></span>;<span class=\"comment\">//3.不知这方法如何实现,定义成抽象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRunCode</span> <span class=\"keyword\">extends</span> <span class=\"title\">RunCode</span>\t//4.实现类 继承抽象类</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">code</span><span class=\"params\">()</span></span>&#123;\t\t\t<span class=\"comment\">//4.实现抽象方法</span></span><br><span class=\"line\">\t\t <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span> ;i++ )</span><br><span class=\"line\">\t\t &#123;</span><br><span class=\"line\">\t\t\t System.out.println(<span class=\"string\">\"目前打印的是第\"</span>+i+<span class=\"string\">\"次\"</span>);</span><br><span class=\"line\">\t\t &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span>\t\t//演示类 </span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span><br><span class=\"line\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> MyRunCode().getRuntime();\t\t<span class=\"comment\">//调用</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"模板设计模式方式二-接口版\"><a href=\"#模板设计模式方式二-接口版\" class=\"headerlink\" title=\"模板设计模式方式二: 接口版\"></a>模板设计模式方式二: 接口版</h2><p>接口版比较适合在同一个类中出现重复代码时 将重复代码封装成一个函数.定义接口,与接口实现类进行实现</p>\n<p>案例:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"comment\">/***</span><br><span class=\"line\"> * 模板设计模式基于接口版</span><br><span class=\"line\"> * <span class=\"doctag\">@author</span> ComTu</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Template_Inter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//接口</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">RunCode_inter</span></span>&#123;  <span class=\"comment\">//1.编写接口</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">code</span><span class=\"params\">()</span></span>;  <span class=\"comment\">//2.编写抽象方法 (接口中方法默认是abstract)</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//模板块  //3.编写一个模板代码方法需要带接口类型的参数.</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">RunCode</span><span class=\"params\">(RunCode_inter runcode)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//运行时的毫秒数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">\t\truncode.code();  <span class=\"comment\">//4.调用接口的code方法 </span></span><br><span class=\"line\">\t\t<span class=\"comment\">//结束运行的毫秒数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> end = System.currentTimeMillis();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"运行时间: \"</span>+(end-start));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//测试函数</span></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startFor</span><span class=\"params\">()</span></span>&#123; </span><br><span class=\"line\">\t\tRunCode(<span class=\"keyword\">new</span> RunCode_inter()&#123; <span class=\"comment\">//5.模板块 ( 创建接口实现类 )</span></span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">code</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">//6.需要在模板中执行的代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"i : \"</span>+i);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果非要在其它类中进行调用的话可以使用如下方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//导入  类名.接口名  类似与java.util.Map.Entry  Map接口.Entry接口</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Template_Inter().RunCode(<span class=\"keyword\">new</span> com.tu.test.Template_Inter.RunCode_inter()&#123; <span class=\"comment\">//5.模板块 (创建接口实现类)</span></span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">code</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//6.模板中执行的代码.</span></span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"运行的代码...\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>"},{"layout":"post","title":"Android上开源的酷炫的交互动画和视觉效果","duoshuo":true,"date":"2014-10-20T16:00:00.000Z","_content":"\nInteractive-animation\n=====================\n\n描述：收集android上开源的酷炫的交互动画和视觉效果。\n\n1.交互篇\n\n2.视觉篇\n\n------\n\n# 交互篇\n\n\n1.SlidingUpPanelLayout\n\n项目介绍：他的库提供了一种简单的方式来添加一个可拖动滑动面板(由谷歌音乐推广,谷歌地图和Rdio)你的Android应用程序。  \n项目地址：https://github.com/umano/AndroidSlidingUpPanel  \nDEMO演示： \n![github](https://camo.githubusercontent.com/834cfd81ce764457db69dc023e1bd0adf0a8d00d/68747470733a2f2f7261772e6769746875622e636f6d2f756d616e6f2f416e64726f6964536c6964696e67557050616e656c44656d6f2f6d61737465722f736c6964696e67757070616e656c2e706e67 \"github\")   \n\n<!-- more -->\n\n------\n\n2.FoldableLayout\n\n项目介绍：折叠展开点击的ITEM   \n项目地址：https://github.com/alexvasilkov/FoldableLayout   \nDEMO演示：https://play.google.com/store/apps/details?id=com.alexvasilkov.foldablelayout.sample   \n![github](https://camo.githubusercontent.com/8b5b0e5a0d87da7e504a91f7c7ae62c68f812196/687474703a2f2f696d672e796f75747562652e636f6d2f76692f2d5f5163574d682d4f35672f302e6a7067 \"github\")   \n\n------\n\n3.android-flip   \n项目介绍：折叠翻页效果   \n项目地址：https://github.com/openaphid/android-flip   \nDEMO演示： \n![github](https://camo.githubusercontent.com/d20ac6fb1cb14db4b69ab5e48ebd609aab1f6831/687474703a2f2f6f70656e61706869642e6769746875622e636f6d2f696d616765732f666c6970766965772d686f72697a6f6e74616c2d64656d6f2e676966 \"github\")\n![github](https://camo.githubusercontent.com/c260bd35546a4fa2a7a556bec851294a26639345/687474703a2f2f6f70656e61706869642e6769746875622e636f6d2f696d616765732f666c6970766965772d64656d6f2e676966 \"github\")   \n\n\n------\n\n4.SwipeBackLayout\n项目介绍：拖动关闭当前活动窗体  \n项目地址：https://github.com/Issacw0ng/SwipeBackLayout  \nDEMO演示：  \nAPK：https://play.google.com/store/apps/details?id=me.imid.swipebacklayout.demo  \n![github](https://github.com/Issacw0ng/SwipeBackLayout/blob/master/art/screenshot.png?raw=true \"github\")   \n\n\n------\n\n5.AndroidImageSlider   \n项目介绍：一个漂亮的Slider，可以通过自定义达到更好的效果   \n项目地址：https://github.com/daimajia/AndroidImageSlider   \nDEMO演示：   \nAPK：https://jumpshare.com/v/PAKDLjG0UYQjCy9bSSdX   \n![github](https://camo.githubusercontent.com/f64413139bbaa918131384d3597c33e39333aa7f/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a773165677a6f7236366f6a64673230393530666b6e70652e676966 \"github\")   \n\n\n------\n\n6.Android-ParallaxHeaderViewPager   \n项目介绍：栏目展示动画，自动播放，滚动下方列表时候，收缩效果   \n项目地址：https://github.com/kmshack/Android-ParallaxHeaderViewPager   \nDEMO演示：   \nAPK：https://play.google.com/store/apps/details?id=com.kmshack.newsstand   \n![github](https://github.com/kmshack/Android-ParallaxHeaderViewPager/raw/master/screen.png \"github\")    \n\n\n------\n\n7.FragmentTransactionExtended   \n项目介绍：   \n项目地址：https://github.com/DesarrolloAntonio/FragmentTransactionExtended   \nDEMO演示：   \n![github](https://github.com/DesarrolloAntonio/FragmentTransactionExtended/raw/master/FragmentTransactionExample/cap2.gif \"github\")    \n\n\n------\n\n8.FragmentTransactionExtended   \n项目介绍：Android按钮可以化身进度   \n项目地址：https://github.com/dmytrodanylyk/circular-progress-button   \nDEMO演示：  \n![github](https://github.com/dmytrodanylyk/circular-progress-button/raw/master/screenshots/intro.gif \"github\")   \n\n\n------\n\n9.floatlabelededittext   \n项目介绍：简单的实现浮动标签EditText:Android视图使用EditText之上,并提示EditText时填充文本。   \n项目地址：https://github.com/wrapp/floatlabelededittext   \nDEMO演示：   \n![github](https://camo.githubusercontent.com/9b15f9bfcdacc9bf053fff9d06e7a91a0d1b5070/687474703a2f2f692e696d6775722e636f6d2f75635264316a6d2e676966 \"github\")    \n\n------\n\n10.QuickReturn    \n项目介绍：Showcases QuickReturn view as a header, footer, and both header and footer.   \n项目地址：https://github.com/lawloretienne/QuickReturn   \nDEMO演示：   \n![github](https://raw.githubusercontent.com/lawloretienne/QuickReturn/master/images/quick_return_demo.gif \"github\")    \n\n------\n\n11.VNTNumberPickerPreference   \n项目介绍：这是一个易于使用的自定义偏好,打开一个对话框中有许多选择。的值被自动保存,你可以设置默认,min -和maxValue方便地在XML。   \n项目地址：https://github.com/vanniktech/VNTNumberPickerPreference   \nDEMO演示：   \n![github](https://github.com/vanniktech/VNTNumberPickerPreference/raw/master/res/drawable/preview.png \"github\")    \n\n\n------\n\n12.CircularFloatingActionMenu   \n项目介绍：动画,可定制的圆形浮动菜单为Android,   \n项目地址：https://github.com/oguzbilgener/CircularFloatingActionMenu   \nDEMO演示：   \n![github](https://github.com/oguzbilgener/CircularFloatingActionMenu/raw/master/assets/circularfab.gif \"github\")    \n\n\n------\n\n13.NiftyDialogEffects   \n项目介绍：Dialog的各种打开动画，Nifty Modal Dialog Effects look like this(Nifty Modal Window Effects)   \n项目地址：https://github.com/sd6352051/NiftyDialogEffects   \nDEMO演示：   \n![github](https://camo.githubusercontent.com/456687ac516bb07f1076928d635bfddf6b90d5ec/687474703a2f2f696d67302e70682e3132362e6e65742f69433436653162586b55316631724966555a6f3939773d3d2f363539373632303632313938343031393430382e676966 \"github\")    \n\n------\n\n14.material-menu   \n项目介绍：变形安卓菜单,返回和删除按钮   \n项目地址：https://github.com/balysv/material-menu   \nDEMO演示：   \n![github](https://camo.githubusercontent.com/642bd91749dce58abfba00fe1cefdf2cf4213fd3/68747470733a2f2f7261772e6769746875622e636f6d2f62616c7973762f6d6174657269616c2d6d656e752f6d61737465722f6172742f64656d6f2e676966 \"github\")   \n\n------\n\n15.AndroidViewHover   \n项目介绍：我们需要一个悬停视图,显示菜单,显示消息。   \n项目地址：https://github.com/daimajia/AndroidViewHover   \nDEMO演示：   \n![github](https://camo.githubusercontent.com/44affb72f0688c213500917009a1680b41492413/687474703a2f2f7777322e73696e61696d672e636e2f6d773639302f36313064633033346a7731656a356969686a746c35673230387a3066326e70642e676966 \"github\")    \n\n------\n\n16.PagedHeadListView   \n项目介绍：图片轮转切换   \n项目地址：https://github.com/JorgeCastilloPrz/PagedHeadListView    \nDEMO演示：    \n![github](https://raw.githubusercontent.com/JorgeCastilloPrz/PagedHeadListView/master/app/src/main/res/raw/preview1.gif \"github\")\n![github](https://raw.githubusercontent.com/JorgeCastilloPrz/PagedHeadListView/master/app/src/main/res/raw/preview3.gif \"github\")\n\n------\n\n17.android-movies-demo   \n项目介绍：电影列表3级联动，交互   \n项目地址：https://github.com/dlew/android-movies-demo    \nDEMO演示：    \nyoutube:  https://www.youtube.com/watch?feature=player_embedded&v=nchbp6pr2tg    \n![github](https://camo.githubusercontent.com/17d279cc83b7c0831100dd81d18a809dd0ea26c9/687474703a2f2f696d672e796f75747562652e636f6d2f76692f6e636862703670723274672f302e6a7067 \"github\")\n\n------\n\n18.NiftyNotification   \n项目介绍：提示通知栏的各种动画   \n项目地址：https://github.com/sd6352051/NiftyNotification   \nDEMO演示：   \n![github](https://raw.githubusercontent.com/sd6352051/NiftyNotification/master/screenshot/ss.gif \"github\")    \n\n------\n\n19.SwipeBack   \n项目介绍：拖动关闭，模范：kicker app（https://play.google.com/store/apps/details?id=com.netbiscuits.kicker）   \n项目地址：https://github.com/sockeqwe/SwipeBack   \nDEMO演示：   \n![github](https://camo.githubusercontent.com/a8ca00fe3f9e4aa65d902ad873c3f7ef77a2b418/687474703a2f2f696d672e796f75747562652e636f6d2f76692f54366d62675f77716c6b632f302e6a7067 \"github\")\n\n------\n\n20.AndroidSwipeLayout   \n项目介绍：类似微信的测拉菜单   \n项目地址：https://github.com/daimajia/AndroidSwipeLayout   \nDEMO演示：   \n![github](https://camo.githubusercontent.com/183f464b177ffa9d0b35f396796ec64f37ce87db/687474703a2f2f7777312e73696e61696d672e636e2f6d773639302f36313064633033346a7731656a6f7175696476767367323038693036333075342e676966 \"github\")\n![github](https://camo.githubusercontent.com/878e29e5defd2c64db4a5ec93119e133cab00807/687474703a2f2f7777322e73696e61696d672e636e2f6d773639302f36313064633033346a7731656a6f706c6170777471673230386e3065373464782e676966\"github\")\n\n------\n\n21.SnackBar   \n项目介绍：  \n项目地址：https://github.com/MrEngineer13/SnackBar   \nDEMO演示：   \n![github](https://camo.githubusercontent.com/67a39af16f3d46631567c1f7bd7dcddeb3c4c9e9/687474703a2f2f6d6174657269616c2d64657369676e2e73746f726167652e676f6f676c65617069732e636f6d2f696d616765732f636f6d706f6e656e74732d746f617374732d73706563732d737065635f746f6173745f30335f315f6c617267655f6d6470692e706e67 \"github\")\ngoogleplay:https://play.google.com/store/apps/details?id=com.mrengineer13.snackbar.sample\n\n\n------\n\n22.Swipecards   \n项目介绍：A Tinder-like cards effect as of August 2014. You can swipe left or right to like or dislike the content. The library creates a similar effect to Tinder's swipable cards with Fling animation.    \n项目地址：https://github.com/Diolor/Swipecards   \nDEMO演示：   \n![github](https://github.com/Diolor/Swipecards/raw/master/screenshot.gif \"github\")\n\n------\n\n23.LDrawer    \n项目介绍：Android抽屉与材料设计动画图标    \n项目地址：https://github.com/ikimuhendis/LDrawer    \nDEMO演示：  \n![github](https://raw.githubusercontent.com/IkiMuhendis/LDrawer/master/images/animated.gif \"github\")\n\n------\n\n24.Dragger\n项目介绍:Animate your activity!\n项目地址:https://github.com/ppamorim/Dragger\nDemo演示:\n![github](https://camo.githubusercontent.com/bce61066e5add8269dc7aa49bce0a30e03627885/687474703a2f2f692e696d6775722e636f6d2f676f50576771312e676966 \"github\")\n\n------\n\n# 视觉篇\n\n\n------\n\n1.android-stackblur   \n项目介绍：毛玻璃，朦胧美   \n项目地址：https://github.com/kikoso/android-stackblur    \nDEMO演示：  \n![github](https://camo.githubusercontent.com/9c26fa38f23bb218558ad1843f59042ae3d90309/68747470733a2f2f7261772e6769746875622e636f6d2f6b696b6f736f2f616e64726f69642d737461636b626c75722f6d61737465722f6172742f73637265656e73686f74312e706e67 \"github\")\n\n\n------\n\n2.BlurEffectForAndroidDesign   \n项目介绍：实现模糊图形技巧   \n项目地址：https://github.com/PomepuyN/BlurEffectForAndroidDesign   \nDEMO演示：   \n![github](https://camo.githubusercontent.com/3ac158c7124d11c098d6ab094cb1d49880fe17c6/68747470733a2f2f6c68362e67677068742e636f6d2f74447951416c41327565714b496474776e38367234334a363456615338472d4263664a7a7177363137664934764938677a364b59326e345654396b6b61386f69707259 \"github\")\n\n\n------\n\n3.Shimmer-android   \n项目介绍：闪动的文字   \n项目地址：https://github.com/RomainPiel/Shimmer-android   \nDEMO演示：  \nyoutube:http://www.youtube.com/watch?v=7EOsegp4J2o&feature=youtu.be   \n![github](https://github.com/RomainPiel/Shimmer-android/raw/master/shimmer.gif \"github\")\n\n\n\n------\n\n4.WizardPager    \n项目介绍：它提供了一个示例实现的Android手机上安装一个向导界面   \n项目地址：https://github.com/TechFreak/WizardPager   \nDEMO演示：     \nyoutube:http://www.youtube.com/watch?v=7EOsegp4J2o&feature=youtu.be   \n![github](https://camo.githubusercontent.com/d1c9284cfff613dcffbdaa4db504c3a7f6cebba3/68747470733a2f2f6c68332e676f6f676c6575736572636f6e74656e742e636f6d2f2d5f2d5376334a33626463632f5564655555446431546a492f414141414141414145456f2f7970726f4a2d4562434a672f773431322d683731362d6e6f2f77697a61726450616765722e706e67 \"github\")\n\n\n------\n\n5.FloatingActionButton   \n项目介绍：浮动的按钮   \n项目地址：https://github.com/FaizMalkani/FloatingActionButton   \nDEMO演示：\n\n\n------\n\n6.JumpingBeans   \n项目介绍：跳动的文本   \n项目地址：https://github.com/frakbot/JumpingBeans   \nDEMO演示：   \n![github](https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingdots.gif \"github\")   \n![github](https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingword.gif \"github\")   \n\n\n\n------\n\n7.android_maskable_layout   \n项目介绍：可屏蔽的布局   \n项目地址：https://github.com/christophesmet/android_maskable_layout   \nDEMO演示：   \n![github](https://github.com/christophesmet/android_maskable_layout/raw/master/Screencast.gif \"github\")   \n\n\n------\n\n8.activityanimation   \n项目介绍：Activit之间切换动画   \n项目地址：https://github.com/flavienlaurent/activityanimation   \nDEMO演示：   \nyoutube:   https://www.youtube.com/watch?v=-E0sc6w_Jck\n\n\n------\n\n9.android-shape-imageview    \n项目介绍：提供了一组自定义形状的android imageview组件,和一个框架来定义更多的形状。实现着色器和位图基于掩模图像视图。   \n项目地址：https://github.com/siyamed/android-shape-imageview   \nDEMO演示：   \n![github](https://github.com/siyamed/android-shape-imageview/raw/master/images/shader-buble.png \"github\")\n![github](https://github.com/siyamed/android-shape-imageview/raw/master/images/all-samples.png \"github\")\n\n\n------\n\n10.RippleView    \n项目介绍：认为模仿的连锁反应在单击推出了Android L   \n项目地址：https://github.com/siriscac/RippleView   \nDEMO演示：   \n![github](https://camo.githubusercontent.com/eec41193900aad4803dcf18bc9915fafa3f7d1cf/68747470733a2f2f7261772e6769746875622e636f6d2f73697269736361632f526970706c65566965772f6d61737465722f53637265656e732f53637265656e2e676966 \"github\")   \n\n\n------\n\n11.android-ui   \n项目介绍：一个小部件可以定义的行为之间的动态变化   \n项目地址：https://github.com/markushi/android-ui   \nDEMO演示：   \n![github](https://raw.githubusercontent.com/markushi/android-ui/master/example-action.gif \"github\")   \n\n\n------\n\n12.FlatUI   \n项目介绍：      \n项目地址：https://github.com/eluleci/FlatUI   \nDEMO演示：   \n![github](https://camo.githubusercontent.com/590d4a2ac322417b71f83223bd58b83903d58343/68747470733a2f2f7261772e6769746875622e636f6d2f656c756c6563692f466c617455492f6d61737465722f73616d706c652d696d616765732f73686f77636173652e706e67 \"github\")\n![github](https://camo.githubusercontent.com/ae20d6255d273ba92e8957e0b1cd95aab4e67198/68747470733a2f2f7261772e6769746875622e636f6d2f656c756c6563692f466c617455492f6d61737465722f73616d706c652d696d616765732f7468656d65732e706e67 \"github\")\n\n","source":"_posts/2014-10-21-android_Interactive-animation.md","raw":"---\nlayout : post\ntitle : \"Android上开源的酷炫的交互动画和视觉效果\"\ncategory : Android\nduoshuo: true\ndate : 2014-10-21\ntags : [Android ,GitHub ]\n---\n\nInteractive-animation\n=====================\n\n描述：收集android上开源的酷炫的交互动画和视觉效果。\n\n1.交互篇\n\n2.视觉篇\n\n------\n\n# 交互篇\n\n\n1.SlidingUpPanelLayout\n\n项目介绍：他的库提供了一种简单的方式来添加一个可拖动滑动面板(由谷歌音乐推广,谷歌地图和Rdio)你的Android应用程序。  \n项目地址：https://github.com/umano/AndroidSlidingUpPanel  \nDEMO演示： \n![github](https://camo.githubusercontent.com/834cfd81ce764457db69dc023e1bd0adf0a8d00d/68747470733a2f2f7261772e6769746875622e636f6d2f756d616e6f2f416e64726f6964536c6964696e67557050616e656c44656d6f2f6d61737465722f736c6964696e67757070616e656c2e706e67 \"github\")   \n\n<!-- more -->\n\n------\n\n2.FoldableLayout\n\n项目介绍：折叠展开点击的ITEM   \n项目地址：https://github.com/alexvasilkov/FoldableLayout   \nDEMO演示：https://play.google.com/store/apps/details?id=com.alexvasilkov.foldablelayout.sample   \n![github](https://camo.githubusercontent.com/8b5b0e5a0d87da7e504a91f7c7ae62c68f812196/687474703a2f2f696d672e796f75747562652e636f6d2f76692f2d5f5163574d682d4f35672f302e6a7067 \"github\")   \n\n------\n\n3.android-flip   \n项目介绍：折叠翻页效果   \n项目地址：https://github.com/openaphid/android-flip   \nDEMO演示： \n![github](https://camo.githubusercontent.com/d20ac6fb1cb14db4b69ab5e48ebd609aab1f6831/687474703a2f2f6f70656e61706869642e6769746875622e636f6d2f696d616765732f666c6970766965772d686f72697a6f6e74616c2d64656d6f2e676966 \"github\")\n![github](https://camo.githubusercontent.com/c260bd35546a4fa2a7a556bec851294a26639345/687474703a2f2f6f70656e61706869642e6769746875622e636f6d2f696d616765732f666c6970766965772d64656d6f2e676966 \"github\")   \n\n\n------\n\n4.SwipeBackLayout\n项目介绍：拖动关闭当前活动窗体  \n项目地址：https://github.com/Issacw0ng/SwipeBackLayout  \nDEMO演示：  \nAPK：https://play.google.com/store/apps/details?id=me.imid.swipebacklayout.demo  \n![github](https://github.com/Issacw0ng/SwipeBackLayout/blob/master/art/screenshot.png?raw=true \"github\")   \n\n\n------\n\n5.AndroidImageSlider   \n项目介绍：一个漂亮的Slider，可以通过自定义达到更好的效果   \n项目地址：https://github.com/daimajia/AndroidImageSlider   \nDEMO演示：   \nAPK：https://jumpshare.com/v/PAKDLjG0UYQjCy9bSSdX   \n![github](https://camo.githubusercontent.com/f64413139bbaa918131384d3597c33e39333aa7f/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a773165677a6f7236366f6a64673230393530666b6e70652e676966 \"github\")   \n\n\n------\n\n6.Android-ParallaxHeaderViewPager   \n项目介绍：栏目展示动画，自动播放，滚动下方列表时候，收缩效果   \n项目地址：https://github.com/kmshack/Android-ParallaxHeaderViewPager   \nDEMO演示：   \nAPK：https://play.google.com/store/apps/details?id=com.kmshack.newsstand   \n![github](https://github.com/kmshack/Android-ParallaxHeaderViewPager/raw/master/screen.png \"github\")    \n\n\n------\n\n7.FragmentTransactionExtended   \n项目介绍：   \n项目地址：https://github.com/DesarrolloAntonio/FragmentTransactionExtended   \nDEMO演示：   \n![github](https://github.com/DesarrolloAntonio/FragmentTransactionExtended/raw/master/FragmentTransactionExample/cap2.gif \"github\")    \n\n\n------\n\n8.FragmentTransactionExtended   \n项目介绍：Android按钮可以化身进度   \n项目地址：https://github.com/dmytrodanylyk/circular-progress-button   \nDEMO演示：  \n![github](https://github.com/dmytrodanylyk/circular-progress-button/raw/master/screenshots/intro.gif \"github\")   \n\n\n------\n\n9.floatlabelededittext   \n项目介绍：简单的实现浮动标签EditText:Android视图使用EditText之上,并提示EditText时填充文本。   \n项目地址：https://github.com/wrapp/floatlabelededittext   \nDEMO演示：   \n![github](https://camo.githubusercontent.com/9b15f9bfcdacc9bf053fff9d06e7a91a0d1b5070/687474703a2f2f692e696d6775722e636f6d2f75635264316a6d2e676966 \"github\")    \n\n------\n\n10.QuickReturn    \n项目介绍：Showcases QuickReturn view as a header, footer, and both header and footer.   \n项目地址：https://github.com/lawloretienne/QuickReturn   \nDEMO演示：   \n![github](https://raw.githubusercontent.com/lawloretienne/QuickReturn/master/images/quick_return_demo.gif \"github\")    \n\n------\n\n11.VNTNumberPickerPreference   \n项目介绍：这是一个易于使用的自定义偏好,打开一个对话框中有许多选择。的值被自动保存,你可以设置默认,min -和maxValue方便地在XML。   \n项目地址：https://github.com/vanniktech/VNTNumberPickerPreference   \nDEMO演示：   \n![github](https://github.com/vanniktech/VNTNumberPickerPreference/raw/master/res/drawable/preview.png \"github\")    \n\n\n------\n\n12.CircularFloatingActionMenu   \n项目介绍：动画,可定制的圆形浮动菜单为Android,   \n项目地址：https://github.com/oguzbilgener/CircularFloatingActionMenu   \nDEMO演示：   \n![github](https://github.com/oguzbilgener/CircularFloatingActionMenu/raw/master/assets/circularfab.gif \"github\")    \n\n\n------\n\n13.NiftyDialogEffects   \n项目介绍：Dialog的各种打开动画，Nifty Modal Dialog Effects look like this(Nifty Modal Window Effects)   \n项目地址：https://github.com/sd6352051/NiftyDialogEffects   \nDEMO演示：   \n![github](https://camo.githubusercontent.com/456687ac516bb07f1076928d635bfddf6b90d5ec/687474703a2f2f696d67302e70682e3132362e6e65742f69433436653162586b55316631724966555a6f3939773d3d2f363539373632303632313938343031393430382e676966 \"github\")    \n\n------\n\n14.material-menu   \n项目介绍：变形安卓菜单,返回和删除按钮   \n项目地址：https://github.com/balysv/material-menu   \nDEMO演示：   \n![github](https://camo.githubusercontent.com/642bd91749dce58abfba00fe1cefdf2cf4213fd3/68747470733a2f2f7261772e6769746875622e636f6d2f62616c7973762f6d6174657269616c2d6d656e752f6d61737465722f6172742f64656d6f2e676966 \"github\")   \n\n------\n\n15.AndroidViewHover   \n项目介绍：我们需要一个悬停视图,显示菜单,显示消息。   \n项目地址：https://github.com/daimajia/AndroidViewHover   \nDEMO演示：   \n![github](https://camo.githubusercontent.com/44affb72f0688c213500917009a1680b41492413/687474703a2f2f7777322e73696e61696d672e636e2f6d773639302f36313064633033346a7731656a356969686a746c35673230387a3066326e70642e676966 \"github\")    \n\n------\n\n16.PagedHeadListView   \n项目介绍：图片轮转切换   \n项目地址：https://github.com/JorgeCastilloPrz/PagedHeadListView    \nDEMO演示：    \n![github](https://raw.githubusercontent.com/JorgeCastilloPrz/PagedHeadListView/master/app/src/main/res/raw/preview1.gif \"github\")\n![github](https://raw.githubusercontent.com/JorgeCastilloPrz/PagedHeadListView/master/app/src/main/res/raw/preview3.gif \"github\")\n\n------\n\n17.android-movies-demo   \n项目介绍：电影列表3级联动，交互   \n项目地址：https://github.com/dlew/android-movies-demo    \nDEMO演示：    \nyoutube:  https://www.youtube.com/watch?feature=player_embedded&v=nchbp6pr2tg    \n![github](https://camo.githubusercontent.com/17d279cc83b7c0831100dd81d18a809dd0ea26c9/687474703a2f2f696d672e796f75747562652e636f6d2f76692f6e636862703670723274672f302e6a7067 \"github\")\n\n------\n\n18.NiftyNotification   \n项目介绍：提示通知栏的各种动画   \n项目地址：https://github.com/sd6352051/NiftyNotification   \nDEMO演示：   \n![github](https://raw.githubusercontent.com/sd6352051/NiftyNotification/master/screenshot/ss.gif \"github\")    \n\n------\n\n19.SwipeBack   \n项目介绍：拖动关闭，模范：kicker app（https://play.google.com/store/apps/details?id=com.netbiscuits.kicker）   \n项目地址：https://github.com/sockeqwe/SwipeBack   \nDEMO演示：   \n![github](https://camo.githubusercontent.com/a8ca00fe3f9e4aa65d902ad873c3f7ef77a2b418/687474703a2f2f696d672e796f75747562652e636f6d2f76692f54366d62675f77716c6b632f302e6a7067 \"github\")\n\n------\n\n20.AndroidSwipeLayout   \n项目介绍：类似微信的测拉菜单   \n项目地址：https://github.com/daimajia/AndroidSwipeLayout   \nDEMO演示：   \n![github](https://camo.githubusercontent.com/183f464b177ffa9d0b35f396796ec64f37ce87db/687474703a2f2f7777312e73696e61696d672e636e2f6d773639302f36313064633033346a7731656a6f7175696476767367323038693036333075342e676966 \"github\")\n![github](https://camo.githubusercontent.com/878e29e5defd2c64db4a5ec93119e133cab00807/687474703a2f2f7777322e73696e61696d672e636e2f6d773639302f36313064633033346a7731656a6f706c6170777471673230386e3065373464782e676966\"github\")\n\n------\n\n21.SnackBar   \n项目介绍：  \n项目地址：https://github.com/MrEngineer13/SnackBar   \nDEMO演示：   \n![github](https://camo.githubusercontent.com/67a39af16f3d46631567c1f7bd7dcddeb3c4c9e9/687474703a2f2f6d6174657269616c2d64657369676e2e73746f726167652e676f6f676c65617069732e636f6d2f696d616765732f636f6d706f6e656e74732d746f617374732d73706563732d737065635f746f6173745f30335f315f6c617267655f6d6470692e706e67 \"github\")\ngoogleplay:https://play.google.com/store/apps/details?id=com.mrengineer13.snackbar.sample\n\n\n------\n\n22.Swipecards   \n项目介绍：A Tinder-like cards effect as of August 2014. You can swipe left or right to like or dislike the content. The library creates a similar effect to Tinder's swipable cards with Fling animation.    \n项目地址：https://github.com/Diolor/Swipecards   \nDEMO演示：   \n![github](https://github.com/Diolor/Swipecards/raw/master/screenshot.gif \"github\")\n\n------\n\n23.LDrawer    \n项目介绍：Android抽屉与材料设计动画图标    \n项目地址：https://github.com/ikimuhendis/LDrawer    \nDEMO演示：  \n![github](https://raw.githubusercontent.com/IkiMuhendis/LDrawer/master/images/animated.gif \"github\")\n\n------\n\n24.Dragger\n项目介绍:Animate your activity!\n项目地址:https://github.com/ppamorim/Dragger\nDemo演示:\n![github](https://camo.githubusercontent.com/bce61066e5add8269dc7aa49bce0a30e03627885/687474703a2f2f692e696d6775722e636f6d2f676f50576771312e676966 \"github\")\n\n------\n\n# 视觉篇\n\n\n------\n\n1.android-stackblur   \n项目介绍：毛玻璃，朦胧美   \n项目地址：https://github.com/kikoso/android-stackblur    \nDEMO演示：  \n![github](https://camo.githubusercontent.com/9c26fa38f23bb218558ad1843f59042ae3d90309/68747470733a2f2f7261772e6769746875622e636f6d2f6b696b6f736f2f616e64726f69642d737461636b626c75722f6d61737465722f6172742f73637265656e73686f74312e706e67 \"github\")\n\n\n------\n\n2.BlurEffectForAndroidDesign   \n项目介绍：实现模糊图形技巧   \n项目地址：https://github.com/PomepuyN/BlurEffectForAndroidDesign   \nDEMO演示：   \n![github](https://camo.githubusercontent.com/3ac158c7124d11c098d6ab094cb1d49880fe17c6/68747470733a2f2f6c68362e67677068742e636f6d2f74447951416c41327565714b496474776e38367234334a363456615338472d4263664a7a7177363137664934764938677a364b59326e345654396b6b61386f69707259 \"github\")\n\n\n------\n\n3.Shimmer-android   \n项目介绍：闪动的文字   \n项目地址：https://github.com/RomainPiel/Shimmer-android   \nDEMO演示：  \nyoutube:http://www.youtube.com/watch?v=7EOsegp4J2o&feature=youtu.be   \n![github](https://github.com/RomainPiel/Shimmer-android/raw/master/shimmer.gif \"github\")\n\n\n\n------\n\n4.WizardPager    \n项目介绍：它提供了一个示例实现的Android手机上安装一个向导界面   \n项目地址：https://github.com/TechFreak/WizardPager   \nDEMO演示：     \nyoutube:http://www.youtube.com/watch?v=7EOsegp4J2o&feature=youtu.be   \n![github](https://camo.githubusercontent.com/d1c9284cfff613dcffbdaa4db504c3a7f6cebba3/68747470733a2f2f6c68332e676f6f676c6575736572636f6e74656e742e636f6d2f2d5f2d5376334a33626463632f5564655555446431546a492f414141414141414145456f2f7970726f4a2d4562434a672f773431322d683731362d6e6f2f77697a61726450616765722e706e67 \"github\")\n\n\n------\n\n5.FloatingActionButton   \n项目介绍：浮动的按钮   \n项目地址：https://github.com/FaizMalkani/FloatingActionButton   \nDEMO演示：\n\n\n------\n\n6.JumpingBeans   \n项目介绍：跳动的文本   \n项目地址：https://github.com/frakbot/JumpingBeans   \nDEMO演示：   \n![github](https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingdots.gif \"github\")   \n![github](https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingword.gif \"github\")   \n\n\n\n------\n\n7.android_maskable_layout   \n项目介绍：可屏蔽的布局   \n项目地址：https://github.com/christophesmet/android_maskable_layout   \nDEMO演示：   \n![github](https://github.com/christophesmet/android_maskable_layout/raw/master/Screencast.gif \"github\")   \n\n\n------\n\n8.activityanimation   \n项目介绍：Activit之间切换动画   \n项目地址：https://github.com/flavienlaurent/activityanimation   \nDEMO演示：   \nyoutube:   https://www.youtube.com/watch?v=-E0sc6w_Jck\n\n\n------\n\n9.android-shape-imageview    \n项目介绍：提供了一组自定义形状的android imageview组件,和一个框架来定义更多的形状。实现着色器和位图基于掩模图像视图。   \n项目地址：https://github.com/siyamed/android-shape-imageview   \nDEMO演示：   \n![github](https://github.com/siyamed/android-shape-imageview/raw/master/images/shader-buble.png \"github\")\n![github](https://github.com/siyamed/android-shape-imageview/raw/master/images/all-samples.png \"github\")\n\n\n------\n\n10.RippleView    \n项目介绍：认为模仿的连锁反应在单击推出了Android L   \n项目地址：https://github.com/siriscac/RippleView   \nDEMO演示：   \n![github](https://camo.githubusercontent.com/eec41193900aad4803dcf18bc9915fafa3f7d1cf/68747470733a2f2f7261772e6769746875622e636f6d2f73697269736361632f526970706c65566965772f6d61737465722f53637265656e732f53637265656e2e676966 \"github\")   \n\n\n------\n\n11.android-ui   \n项目介绍：一个小部件可以定义的行为之间的动态变化   \n项目地址：https://github.com/markushi/android-ui   \nDEMO演示：   \n![github](https://raw.githubusercontent.com/markushi/android-ui/master/example-action.gif \"github\")   \n\n\n------\n\n12.FlatUI   \n项目介绍：      \n项目地址：https://github.com/eluleci/FlatUI   \nDEMO演示：   \n![github](https://camo.githubusercontent.com/590d4a2ac322417b71f83223bd58b83903d58343/68747470733a2f2f7261772e6769746875622e636f6d2f656c756c6563692f466c617455492f6d61737465722f73616d706c652d696d616765732f73686f77636173652e706e67 \"github\")\n![github](https://camo.githubusercontent.com/ae20d6255d273ba92e8957e0b1cd95aab4e67198/68747470733a2f2f7261772e6769746875622e636f6d2f656c756c6563692f466c617455492f6d61737465722f73616d706c652d696d616765732f7468656d65732e706e67 \"github\")\n\n","slug":"android_Interactive-animation","published":1,"updated":"2016-04-28T02:41:56.574Z","comments":1,"photos":[],"link":"","_id":"cinu3etxe000jxoj0r01p54ba","content":"<h1 id=\"Interactive-animation\"><a href=\"#Interactive-animation\" class=\"headerlink\" title=\"Interactive-animation\"></a>Interactive-animation</h1><p>描述：收集android上开源的酷炫的交互动画和视觉效果。</p>\n<p>1.交互篇</p>\n<p>2.视觉篇</p>\n<hr>\n<h1 id=\"交互篇\"><a href=\"#交互篇\" class=\"headerlink\" title=\"交互篇\"></a>交互篇</h1><p>1.SlidingUpPanelLayout</p>\n<p>项目介绍：他的库提供了一种简单的方式来添加一个可拖动滑动面板(由谷歌音乐推广,谷歌地图和Rdio)你的Android应用程序。<br>项目地址：<a href=\"https://github.com/umano/AndroidSlidingUpPanel\" target=\"_blank\" rel=\"external\">https://github.com/umano/AndroidSlidingUpPanel</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/834cfd81ce764457db69dc023e1bd0adf0a8d00d/68747470733a2f2f7261772e6769746875622e636f6d2f756d616e6f2f416e64726f6964536c6964696e67557050616e656c44656d6f2f6d61737465722f736c6964696e67757070616e656c2e706e67\" alt=\"github\" title=\"github\">   </p>\n<a id=\"more\"></a>\n<hr>\n<p>2.FoldableLayout</p>\n<p>项目介绍：折叠展开点击的ITEM<br>项目地址：<a href=\"https://github.com/alexvasilkov/FoldableLayout\" target=\"_blank\" rel=\"external\">https://github.com/alexvasilkov/FoldableLayout</a><br>DEMO演示：<a href=\"https://play.google.com/store/apps/details?id=com.alexvasilkov.foldablelayout.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.alexvasilkov.foldablelayout.sample</a><br><img src=\"https://camo.githubusercontent.com/8b5b0e5a0d87da7e504a91f7c7ae62c68f812196/687474703a2f2f696d672e796f75747562652e636f6d2f76692f2d5f5163574d682d4f35672f302e6a7067\" alt=\"github\" title=\"github\">   </p>\n<hr>\n<p>3.android-flip<br>项目介绍：折叠翻页效果<br>项目地址：<a href=\"https://github.com/openaphid/android-flip\" target=\"_blank\" rel=\"external\">https://github.com/openaphid/android-flip</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/d20ac6fb1cb14db4b69ab5e48ebd609aab1f6831/687474703a2f2f6f70656e61706869642e6769746875622e636f6d2f696d616765732f666c6970766965772d686f72697a6f6e74616c2d64656d6f2e676966\" alt=\"github\" title=\"github\"><br><img src=\"https://camo.githubusercontent.com/c260bd35546a4fa2a7a556bec851294a26639345/687474703a2f2f6f70656e61706869642e6769746875622e636f6d2f696d616765732f666c6970766965772d64656d6f2e676966\" alt=\"github\" title=\"github\">   </p>\n<hr>\n<p>4.SwipeBackLayout<br>项目介绍：拖动关闭当前活动窗体<br>项目地址：<a href=\"https://github.com/Issacw0ng/SwipeBackLayout\" target=\"_blank\" rel=\"external\">https://github.com/Issacw0ng/SwipeBackLayout</a><br>DEMO演示：<br>APK：<a href=\"https://play.google.com/store/apps/details?id=me.imid.swipebacklayout.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=me.imid.swipebacklayout.demo</a><br><img src=\"https://github.com/Issacw0ng/SwipeBackLayout/blob/master/art/screenshot.png?raw=true\" alt=\"github\" title=\"github\">   </p>\n<hr>\n<p>5.AndroidImageSlider<br>项目介绍：一个漂亮的Slider，可以通过自定义达到更好的效果<br>项目地址：<a href=\"https://github.com/daimajia/AndroidImageSlider\" target=\"_blank\" rel=\"external\">https://github.com/daimajia/AndroidImageSlider</a><br>DEMO演示：<br>APK：<a href=\"https://jumpshare.com/v/PAKDLjG0UYQjCy9bSSdX\" target=\"_blank\" rel=\"external\">https://jumpshare.com/v/PAKDLjG0UYQjCy9bSSdX</a><br><img src=\"https://camo.githubusercontent.com/f64413139bbaa918131384d3597c33e39333aa7f/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a773165677a6f7236366f6a64673230393530666b6e70652e676966\" alt=\"github\" title=\"github\">   </p>\n<hr>\n<p>6.Android-ParallaxHeaderViewPager<br>项目介绍：栏目展示动画，自动播放，滚动下方列表时候，收缩效果<br>项目地址：<a href=\"https://github.com/kmshack/Android-ParallaxHeaderViewPager\" target=\"_blank\" rel=\"external\">https://github.com/kmshack/Android-ParallaxHeaderViewPager</a><br>DEMO演示：<br>APK：<a href=\"https://play.google.com/store/apps/details?id=com.kmshack.newsstand\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.kmshack.newsstand</a><br><img src=\"https://github.com/kmshack/Android-ParallaxHeaderViewPager/raw/master/screen.png\" alt=\"github\" title=\"github\">    </p>\n<hr>\n<p>7.FragmentTransactionExtended<br>项目介绍：<br>项目地址：<a href=\"https://github.com/DesarrolloAntonio/FragmentTransactionExtended\" target=\"_blank\" rel=\"external\">https://github.com/DesarrolloAntonio/FragmentTransactionExtended</a><br>DEMO演示：<br><img src=\"https://github.com/DesarrolloAntonio/FragmentTransactionExtended/raw/master/FragmentTransactionExample/cap2.gif\" alt=\"github\" title=\"github\">    </p>\n<hr>\n<p>8.FragmentTransactionExtended<br>项目介绍：Android按钮可以化身进度<br>项目地址：<a href=\"https://github.com/dmytrodanylyk/circular-progress-button\" target=\"_blank\" rel=\"external\">https://github.com/dmytrodanylyk/circular-progress-button</a><br>DEMO演示：<br><img src=\"https://github.com/dmytrodanylyk/circular-progress-button/raw/master/screenshots/intro.gif\" alt=\"github\" title=\"github\">   </p>\n<hr>\n<p>9.floatlabelededittext<br>项目介绍：简单的实现浮动标签EditText:Android视图使用EditText之上,并提示EditText时填充文本。<br>项目地址：<a href=\"https://github.com/wrapp/floatlabelededittext\" target=\"_blank\" rel=\"external\">https://github.com/wrapp/floatlabelededittext</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/9b15f9bfcdacc9bf053fff9d06e7a91a0d1b5070/687474703a2f2f692e696d6775722e636f6d2f75635264316a6d2e676966\" alt=\"github\" title=\"github\">    </p>\n<hr>\n<p>10.QuickReturn<br>项目介绍：Showcases QuickReturn view as a header, footer, and both header and footer.<br>项目地址：<a href=\"https://github.com/lawloretienne/QuickReturn\" target=\"_blank\" rel=\"external\">https://github.com/lawloretienne/QuickReturn</a><br>DEMO演示：<br><img src=\"https://raw.githubusercontent.com/lawloretienne/QuickReturn/master/images/quick_return_demo.gif\" alt=\"github\" title=\"github\">    </p>\n<hr>\n<p>11.VNTNumberPickerPreference<br>项目介绍：这是一个易于使用的自定义偏好,打开一个对话框中有许多选择。的值被自动保存,你可以设置默认,min -和maxValue方便地在XML。<br>项目地址：<a href=\"https://github.com/vanniktech/VNTNumberPickerPreference\" target=\"_blank\" rel=\"external\">https://github.com/vanniktech/VNTNumberPickerPreference</a><br>DEMO演示：<br><img src=\"https://github.com/vanniktech/VNTNumberPickerPreference/raw/master/res/drawable/preview.png\" alt=\"github\" title=\"github\">    </p>\n<hr>\n<p>12.CircularFloatingActionMenu<br>项目介绍：动画,可定制的圆形浮动菜单为Android,<br>项目地址：<a href=\"https://github.com/oguzbilgener/CircularFloatingActionMenu\" target=\"_blank\" rel=\"external\">https://github.com/oguzbilgener/CircularFloatingActionMenu</a><br>DEMO演示：<br><img src=\"https://github.com/oguzbilgener/CircularFloatingActionMenu/raw/master/assets/circularfab.gif\" alt=\"github\" title=\"github\">    </p>\n<hr>\n<p>13.NiftyDialogEffects<br>项目介绍：Dialog的各种打开动画，Nifty Modal Dialog Effects look like this(Nifty Modal Window Effects)<br>项目地址：<a href=\"https://github.com/sd6352051/NiftyDialogEffects\" target=\"_blank\" rel=\"external\">https://github.com/sd6352051/NiftyDialogEffects</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/456687ac516bb07f1076928d635bfddf6b90d5ec/687474703a2f2f696d67302e70682e3132362e6e65742f69433436653162586b55316631724966555a6f3939773d3d2f363539373632303632313938343031393430382e676966\" alt=\"github\" title=\"github\">    </p>\n<hr>\n<p>14.material-menu<br>项目介绍：变形安卓菜单,返回和删除按钮<br>项目地址：<a href=\"https://github.com/balysv/material-menu\" target=\"_blank\" rel=\"external\">https://github.com/balysv/material-menu</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/642bd91749dce58abfba00fe1cefdf2cf4213fd3/68747470733a2f2f7261772e6769746875622e636f6d2f62616c7973762f6d6174657269616c2d6d656e752f6d61737465722f6172742f64656d6f2e676966\" alt=\"github\" title=\"github\">   </p>\n<hr>\n<p>15.AndroidViewHover<br>项目介绍：我们需要一个悬停视图,显示菜单,显示消息。<br>项目地址：<a href=\"https://github.com/daimajia/AndroidViewHover\" target=\"_blank\" rel=\"external\">https://github.com/daimajia/AndroidViewHover</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/44affb72f0688c213500917009a1680b41492413/687474703a2f2f7777322e73696e61696d672e636e2f6d773639302f36313064633033346a7731656a356969686a746c35673230387a3066326e70642e676966\" alt=\"github\" title=\"github\">    </p>\n<hr>\n<p>16.PagedHeadListView<br>项目介绍：图片轮转切换<br>项目地址：<a href=\"https://github.com/JorgeCastilloPrz/PagedHeadListView\" target=\"_blank\" rel=\"external\">https://github.com/JorgeCastilloPrz/PagedHeadListView</a><br>DEMO演示：<br><img src=\"https://raw.githubusercontent.com/JorgeCastilloPrz/PagedHeadListView/master/app/src/main/res/raw/preview1.gif\" alt=\"github\" title=\"github\"><br><img src=\"https://raw.githubusercontent.com/JorgeCastilloPrz/PagedHeadListView/master/app/src/main/res/raw/preview3.gif\" alt=\"github\" title=\"github\"></p>\n<hr>\n<p>17.android-movies-demo<br>项目介绍：电影列表3级联动，交互<br>项目地址：<a href=\"https://github.com/dlew/android-movies-demo\" target=\"_blank\" rel=\"external\">https://github.com/dlew/android-movies-demo</a><br>DEMO演示：<br>youtube:  <a href=\"https://www.youtube.com/watch?feature=player_embedded&amp;v=nchbp6pr2tg\" target=\"_blank\" rel=\"external\">https://www.youtube.com/watch?feature=player_embedded&amp;v=nchbp6pr2tg</a><br><img src=\"https://camo.githubusercontent.com/17d279cc83b7c0831100dd81d18a809dd0ea26c9/687474703a2f2f696d672e796f75747562652e636f6d2f76692f6e636862703670723274672f302e6a7067\" alt=\"github\" title=\"github\"></p>\n<hr>\n<p>18.NiftyNotification<br>项目介绍：提示通知栏的各种动画<br>项目地址：<a href=\"https://github.com/sd6352051/NiftyNotification\" target=\"_blank\" rel=\"external\">https://github.com/sd6352051/NiftyNotification</a><br>DEMO演示：<br><img src=\"https://raw.githubusercontent.com/sd6352051/NiftyNotification/master/screenshot/ss.gif\" alt=\"github\" title=\"github\">    </p>\n<hr>\n<p>19.SwipeBack<br>项目介绍：拖动关闭，模范：kicker app（<a href=\"https://play.google.com/store/apps/details?id=com.netbiscuits.kicker）\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.netbiscuits.kicker）</a><br>项目地址：<a href=\"https://github.com/sockeqwe/SwipeBack\" target=\"_blank\" rel=\"external\">https://github.com/sockeqwe/SwipeBack</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/a8ca00fe3f9e4aa65d902ad873c3f7ef77a2b418/687474703a2f2f696d672e796f75747562652e636f6d2f76692f54366d62675f77716c6b632f302e6a7067\" alt=\"github\" title=\"github\"></p>\n<hr>\n<p>20.AndroidSwipeLayout<br>项目介绍：类似微信的测拉菜单<br>项目地址：<a href=\"https://github.com/daimajia/AndroidSwipeLayout\" target=\"_blank\" rel=\"external\">https://github.com/daimajia/AndroidSwipeLayout</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/183f464b177ffa9d0b35f396796ec64f37ce87db/687474703a2f2f7777312e73696e61696d672e636e2f6d773639302f36313064633033346a7731656a6f7175696476767367323038693036333075342e676966\" alt=\"github\" title=\"github\"><br><img src=\"https://camo.githubusercontent.com/878e29e5defd2c64db4a5ec93119e133cab00807/687474703a2f2f7777322e73696e61696d672e636e2f6d773639302f36313064633033346a7731656a6f706c6170777471673230386e3065373464782e676966&quot;github&quot;\" alt=\"github\"></p>\n<hr>\n<p>21.SnackBar<br>项目介绍：<br>项目地址：<a href=\"https://github.com/MrEngineer13/SnackBar\" target=\"_blank\" rel=\"external\">https://github.com/MrEngineer13/SnackBar</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/67a39af16f3d46631567c1f7bd7dcddeb3c4c9e9/687474703a2f2f6d6174657269616c2d64657369676e2e73746f726167652e676f6f676c65617069732e636f6d2f696d616765732f636f6d706f6e656e74732d746f617374732d73706563732d737065635f746f6173745f30335f315f6c617267655f6d6470692e706e67\" alt=\"github\" title=\"github\"><br>googleplay:<a href=\"https://play.google.com/store/apps/details?id=com.mrengineer13.snackbar.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.mrengineer13.snackbar.sample</a></p>\n<hr>\n<p>22.Swipecards<br>项目介绍：A Tinder-like cards effect as of August 2014. You can swipe left or right to like or dislike the content. The library creates a similar effect to Tinder’s swipable cards with Fling animation.<br>项目地址：<a href=\"https://github.com/Diolor/Swipecards\" target=\"_blank\" rel=\"external\">https://github.com/Diolor/Swipecards</a><br>DEMO演示：<br><img src=\"https://github.com/Diolor/Swipecards/raw/master/screenshot.gif\" alt=\"github\" title=\"github\"></p>\n<hr>\n<p>23.LDrawer<br>项目介绍：Android抽屉与材料设计动画图标<br>项目地址：<a href=\"https://github.com/ikimuhendis/LDrawer\" target=\"_blank\" rel=\"external\">https://github.com/ikimuhendis/LDrawer</a><br>DEMO演示：<br><img src=\"https://raw.githubusercontent.com/IkiMuhendis/LDrawer/master/images/animated.gif\" alt=\"github\" title=\"github\"></p>\n<hr>\n<p>24.Dragger<br>项目介绍:Animate your activity!<br>项目地址:<a href=\"https://github.com/ppamorim/Dragger\" target=\"_blank\" rel=\"external\">https://github.com/ppamorim/Dragger</a><br>Demo演示:<br><img src=\"https://camo.githubusercontent.com/bce61066e5add8269dc7aa49bce0a30e03627885/687474703a2f2f692e696d6775722e636f6d2f676f50576771312e676966\" alt=\"github\" title=\"github\"></p>\n<hr>\n<h1 id=\"视觉篇\"><a href=\"#视觉篇\" class=\"headerlink\" title=\"视觉篇\"></a>视觉篇</h1><hr>\n<p>1.android-stackblur<br>项目介绍：毛玻璃，朦胧美<br>项目地址：<a href=\"https://github.com/kikoso/android-stackblur\" target=\"_blank\" rel=\"external\">https://github.com/kikoso/android-stackblur</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/9c26fa38f23bb218558ad1843f59042ae3d90309/68747470733a2f2f7261772e6769746875622e636f6d2f6b696b6f736f2f616e64726f69642d737461636b626c75722f6d61737465722f6172742f73637265656e73686f74312e706e67\" alt=\"github\" title=\"github\"></p>\n<hr>\n<p>2.BlurEffectForAndroidDesign<br>项目介绍：实现模糊图形技巧<br>项目地址：<a href=\"https://github.com/PomepuyN/BlurEffectForAndroidDesign\" target=\"_blank\" rel=\"external\">https://github.com/PomepuyN/BlurEffectForAndroidDesign</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/3ac158c7124d11c098d6ab094cb1d49880fe17c6/68747470733a2f2f6c68362e67677068742e636f6d2f74447951416c41327565714b496474776e38367234334a363456615338472d4263664a7a7177363137664934764938677a364b59326e345654396b6b61386f69707259\" alt=\"github\" title=\"github\"></p>\n<hr>\n<p>3.Shimmer-android<br>项目介绍：闪动的文字<br>项目地址：<a href=\"https://github.com/RomainPiel/Shimmer-android\" target=\"_blank\" rel=\"external\">https://github.com/RomainPiel/Shimmer-android</a><br>DEMO演示：<br>youtube:<a href=\"http://www.youtube.com/watch?v=7EOsegp4J2o&amp;feature=youtu.be\" target=\"_blank\" rel=\"external\">http://www.youtube.com/watch?v=7EOsegp4J2o&amp;feature=youtu.be</a><br><img src=\"https://github.com/RomainPiel/Shimmer-android/raw/master/shimmer.gif\" alt=\"github\" title=\"github\"></p>\n<hr>\n<p>4.WizardPager<br>项目介绍：它提供了一个示例实现的Android手机上安装一个向导界面<br>项目地址：<a href=\"https://github.com/TechFreak/WizardPager\" target=\"_blank\" rel=\"external\">https://github.com/TechFreak/WizardPager</a><br>DEMO演示：<br>youtube:<a href=\"http://www.youtube.com/watch?v=7EOsegp4J2o&amp;feature=youtu.be\" target=\"_blank\" rel=\"external\">http://www.youtube.com/watch?v=7EOsegp4J2o&amp;feature=youtu.be</a><br><img src=\"https://camo.githubusercontent.com/d1c9284cfff613dcffbdaa4db504c3a7f6cebba3/68747470733a2f2f6c68332e676f6f676c6575736572636f6e74656e742e636f6d2f2d5f2d5376334a33626463632f5564655555446431546a492f414141414141414145456f2f7970726f4a2d4562434a672f773431322d683731362d6e6f2f77697a61726450616765722e706e67\" alt=\"github\" title=\"github\"></p>\n<hr>\n<p>5.FloatingActionButton<br>项目介绍：浮动的按钮<br>项目地址：<a href=\"https://github.com/FaizMalkani/FloatingActionButton\" target=\"_blank\" rel=\"external\">https://github.com/FaizMalkani/FloatingActionButton</a><br>DEMO演示：</p>\n<hr>\n<p>6.JumpingBeans<br>项目介绍：跳动的文本<br>项目地址：<a href=\"https://github.com/frakbot/JumpingBeans\" target=\"_blank\" rel=\"external\">https://github.com/frakbot/JumpingBeans</a><br>DEMO演示：<br><img src=\"https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingdots.gif\" alt=\"github\" title=\"github\"><br><img src=\"https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingword.gif\" alt=\"github\" title=\"github\">   </p>\n<hr>\n<p>7.android_maskable_layout<br>项目介绍：可屏蔽的布局<br>项目地址：<a href=\"https://github.com/christophesmet/android_maskable_layout\" target=\"_blank\" rel=\"external\">https://github.com/christophesmet/android_maskable_layout</a><br>DEMO演示：<br><img src=\"https://github.com/christophesmet/android_maskable_layout/raw/master/Screencast.gif\" alt=\"github\" title=\"github\">   </p>\n<hr>\n<p>8.activityanimation<br>项目介绍：Activit之间切换动画<br>项目地址：<a href=\"https://github.com/flavienlaurent/activityanimation\" target=\"_blank\" rel=\"external\">https://github.com/flavienlaurent/activityanimation</a><br>DEMO演示：<br>youtube:   <a href=\"https://www.youtube.com/watch?v=-E0sc6w_Jck\" target=\"_blank\" rel=\"external\">https://www.youtube.com/watch?v=-E0sc6w_Jck</a></p>\n<hr>\n<p>9.android-shape-imageview<br>项目介绍：提供了一组自定义形状的android imageview组件,和一个框架来定义更多的形状。实现着色器和位图基于掩模图像视图。<br>项目地址：<a href=\"https://github.com/siyamed/android-shape-imageview\" target=\"_blank\" rel=\"external\">https://github.com/siyamed/android-shape-imageview</a><br>DEMO演示：<br><img src=\"https://github.com/siyamed/android-shape-imageview/raw/master/images/shader-buble.png\" alt=\"github\" title=\"github\"><br><img src=\"https://github.com/siyamed/android-shape-imageview/raw/master/images/all-samples.png\" alt=\"github\" title=\"github\"></p>\n<hr>\n<p>10.RippleView<br>项目介绍：认为模仿的连锁反应在单击推出了Android L<br>项目地址：<a href=\"https://github.com/siriscac/RippleView\" target=\"_blank\" rel=\"external\">https://github.com/siriscac/RippleView</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/eec41193900aad4803dcf18bc9915fafa3f7d1cf/68747470733a2f2f7261772e6769746875622e636f6d2f73697269736361632f526970706c65566965772f6d61737465722f53637265656e732f53637265656e2e676966\" alt=\"github\" title=\"github\">   </p>\n<hr>\n<p>11.android-ui<br>项目介绍：一个小部件可以定义的行为之间的动态变化<br>项目地址：<a href=\"https://github.com/markushi/android-ui\" target=\"_blank\" rel=\"external\">https://github.com/markushi/android-ui</a><br>DEMO演示：<br><img src=\"https://raw.githubusercontent.com/markushi/android-ui/master/example-action.gif\" alt=\"github\" title=\"github\">   </p>\n<hr>\n<p>12.FlatUI<br>项目介绍：<br>项目地址：<a href=\"https://github.com/eluleci/FlatUI\" target=\"_blank\" rel=\"external\">https://github.com/eluleci/FlatUI</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/590d4a2ac322417b71f83223bd58b83903d58343/68747470733a2f2f7261772e6769746875622e636f6d2f656c756c6563692f466c617455492f6d61737465722f73616d706c652d696d616765732f73686f77636173652e706e67\" alt=\"github\" title=\"github\"><br><img src=\"https://camo.githubusercontent.com/ae20d6255d273ba92e8957e0b1cd95aab4e67198/68747470733a2f2f7261772e6769746875622e636f6d2f656c756c6563692f466c617455492f6d61737465722f73616d706c652d696d616765732f7468656d65732e706e67\" alt=\"github\" title=\"github\"></p>\n","excerpt":"<h1 id=\"Interactive-animation\"><a href=\"#Interactive-animation\" class=\"headerlink\" title=\"Interactive-animation\"></a>Interactive-animation</h1><p>描述：收集android上开源的酷炫的交互动画和视觉效果。</p>\n<p>1.交互篇</p>\n<p>2.视觉篇</p>\n<hr>\n<h1 id=\"交互篇\"><a href=\"#交互篇\" class=\"headerlink\" title=\"交互篇\"></a>交互篇</h1><p>1.SlidingUpPanelLayout</p>\n<p>项目介绍：他的库提供了一种简单的方式来添加一个可拖动滑动面板(由谷歌音乐推广,谷歌地图和Rdio)你的Android应用程序。<br>项目地址：<a href=\"https://github.com/umano/AndroidSlidingUpPanel\">https://github.com/umano/AndroidSlidingUpPanel</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/834cfd81ce764457db69dc023e1bd0adf0a8d00d/68747470733a2f2f7261772e6769746875622e636f6d2f756d616e6f2f416e64726f6964536c6964696e67557050616e656c44656d6f2f6d61737465722f736c6964696e67757070616e656c2e706e67\" alt=\"github\" title=\"github\">   </p>","more":"<hr>\n<p>2.FoldableLayout</p>\n<p>项目介绍：折叠展开点击的ITEM<br>项目地址：<a href=\"https://github.com/alexvasilkov/FoldableLayout\">https://github.com/alexvasilkov/FoldableLayout</a><br>DEMO演示：<a href=\"https://play.google.com/store/apps/details?id=com.alexvasilkov.foldablelayout.sample\">https://play.google.com/store/apps/details?id=com.alexvasilkov.foldablelayout.sample</a><br><img src=\"https://camo.githubusercontent.com/8b5b0e5a0d87da7e504a91f7c7ae62c68f812196/687474703a2f2f696d672e796f75747562652e636f6d2f76692f2d5f5163574d682d4f35672f302e6a7067\" alt=\"github\" title=\"github\">   </p>\n<hr>\n<p>3.android-flip<br>项目介绍：折叠翻页效果<br>项目地址：<a href=\"https://github.com/openaphid/android-flip\">https://github.com/openaphid/android-flip</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/d20ac6fb1cb14db4b69ab5e48ebd609aab1f6831/687474703a2f2f6f70656e61706869642e6769746875622e636f6d2f696d616765732f666c6970766965772d686f72697a6f6e74616c2d64656d6f2e676966\" alt=\"github\" title=\"github\"><br><img src=\"https://camo.githubusercontent.com/c260bd35546a4fa2a7a556bec851294a26639345/687474703a2f2f6f70656e61706869642e6769746875622e636f6d2f696d616765732f666c6970766965772d64656d6f2e676966\" alt=\"github\" title=\"github\">   </p>\n<hr>\n<p>4.SwipeBackLayout<br>项目介绍：拖动关闭当前活动窗体<br>项目地址：<a href=\"https://github.com/Issacw0ng/SwipeBackLayout\">https://github.com/Issacw0ng/SwipeBackLayout</a><br>DEMO演示：<br>APK：<a href=\"https://play.google.com/store/apps/details?id=me.imid.swipebacklayout.demo\">https://play.google.com/store/apps/details?id=me.imid.swipebacklayout.demo</a><br><img src=\"https://github.com/Issacw0ng/SwipeBackLayout/blob/master/art/screenshot.png?raw=true\" alt=\"github\" title=\"github\">   </p>\n<hr>\n<p>5.AndroidImageSlider<br>项目介绍：一个漂亮的Slider，可以通过自定义达到更好的效果<br>项目地址：<a href=\"https://github.com/daimajia/AndroidImageSlider\">https://github.com/daimajia/AndroidImageSlider</a><br>DEMO演示：<br>APK：<a href=\"https://jumpshare.com/v/PAKDLjG0UYQjCy9bSSdX\">https://jumpshare.com/v/PAKDLjG0UYQjCy9bSSdX</a><br><img src=\"https://camo.githubusercontent.com/f64413139bbaa918131384d3597c33e39333aa7f/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a773165677a6f7236366f6a64673230393530666b6e70652e676966\" alt=\"github\" title=\"github\">   </p>\n<hr>\n<p>6.Android-ParallaxHeaderViewPager<br>项目介绍：栏目展示动画，自动播放，滚动下方列表时候，收缩效果<br>项目地址：<a href=\"https://github.com/kmshack/Android-ParallaxHeaderViewPager\">https://github.com/kmshack/Android-ParallaxHeaderViewPager</a><br>DEMO演示：<br>APK：<a href=\"https://play.google.com/store/apps/details?id=com.kmshack.newsstand\">https://play.google.com/store/apps/details?id=com.kmshack.newsstand</a><br><img src=\"https://github.com/kmshack/Android-ParallaxHeaderViewPager/raw/master/screen.png\" alt=\"github\" title=\"github\">    </p>\n<hr>\n<p>7.FragmentTransactionExtended<br>项目介绍：<br>项目地址：<a href=\"https://github.com/DesarrolloAntonio/FragmentTransactionExtended\">https://github.com/DesarrolloAntonio/FragmentTransactionExtended</a><br>DEMO演示：<br><img src=\"https://github.com/DesarrolloAntonio/FragmentTransactionExtended/raw/master/FragmentTransactionExample/cap2.gif\" alt=\"github\" title=\"github\">    </p>\n<hr>\n<p>8.FragmentTransactionExtended<br>项目介绍：Android按钮可以化身进度<br>项目地址：<a href=\"https://github.com/dmytrodanylyk/circular-progress-button\">https://github.com/dmytrodanylyk/circular-progress-button</a><br>DEMO演示：<br><img src=\"https://github.com/dmytrodanylyk/circular-progress-button/raw/master/screenshots/intro.gif\" alt=\"github\" title=\"github\">   </p>\n<hr>\n<p>9.floatlabelededittext<br>项目介绍：简单的实现浮动标签EditText:Android视图使用EditText之上,并提示EditText时填充文本。<br>项目地址：<a href=\"https://github.com/wrapp/floatlabelededittext\">https://github.com/wrapp/floatlabelededittext</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/9b15f9bfcdacc9bf053fff9d06e7a91a0d1b5070/687474703a2f2f692e696d6775722e636f6d2f75635264316a6d2e676966\" alt=\"github\" title=\"github\">    </p>\n<hr>\n<p>10.QuickReturn<br>项目介绍：Showcases QuickReturn view as a header, footer, and both header and footer.<br>项目地址：<a href=\"https://github.com/lawloretienne/QuickReturn\">https://github.com/lawloretienne/QuickReturn</a><br>DEMO演示：<br><img src=\"https://raw.githubusercontent.com/lawloretienne/QuickReturn/master/images/quick_return_demo.gif\" alt=\"github\" title=\"github\">    </p>\n<hr>\n<p>11.VNTNumberPickerPreference<br>项目介绍：这是一个易于使用的自定义偏好,打开一个对话框中有许多选择。的值被自动保存,你可以设置默认,min -和maxValue方便地在XML。<br>项目地址：<a href=\"https://github.com/vanniktech/VNTNumberPickerPreference\">https://github.com/vanniktech/VNTNumberPickerPreference</a><br>DEMO演示：<br><img src=\"https://github.com/vanniktech/VNTNumberPickerPreference/raw/master/res/drawable/preview.png\" alt=\"github\" title=\"github\">    </p>\n<hr>\n<p>12.CircularFloatingActionMenu<br>项目介绍：动画,可定制的圆形浮动菜单为Android,<br>项目地址：<a href=\"https://github.com/oguzbilgener/CircularFloatingActionMenu\">https://github.com/oguzbilgener/CircularFloatingActionMenu</a><br>DEMO演示：<br><img src=\"https://github.com/oguzbilgener/CircularFloatingActionMenu/raw/master/assets/circularfab.gif\" alt=\"github\" title=\"github\">    </p>\n<hr>\n<p>13.NiftyDialogEffects<br>项目介绍：Dialog的各种打开动画，Nifty Modal Dialog Effects look like this(Nifty Modal Window Effects)<br>项目地址：<a href=\"https://github.com/sd6352051/NiftyDialogEffects\">https://github.com/sd6352051/NiftyDialogEffects</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/456687ac516bb07f1076928d635bfddf6b90d5ec/687474703a2f2f696d67302e70682e3132362e6e65742f69433436653162586b55316631724966555a6f3939773d3d2f363539373632303632313938343031393430382e676966\" alt=\"github\" title=\"github\">    </p>\n<hr>\n<p>14.material-menu<br>项目介绍：变形安卓菜单,返回和删除按钮<br>项目地址：<a href=\"https://github.com/balysv/material-menu\">https://github.com/balysv/material-menu</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/642bd91749dce58abfba00fe1cefdf2cf4213fd3/68747470733a2f2f7261772e6769746875622e636f6d2f62616c7973762f6d6174657269616c2d6d656e752f6d61737465722f6172742f64656d6f2e676966\" alt=\"github\" title=\"github\">   </p>\n<hr>\n<p>15.AndroidViewHover<br>项目介绍：我们需要一个悬停视图,显示菜单,显示消息。<br>项目地址：<a href=\"https://github.com/daimajia/AndroidViewHover\">https://github.com/daimajia/AndroidViewHover</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/44affb72f0688c213500917009a1680b41492413/687474703a2f2f7777322e73696e61696d672e636e2f6d773639302f36313064633033346a7731656a356969686a746c35673230387a3066326e70642e676966\" alt=\"github\" title=\"github\">    </p>\n<hr>\n<p>16.PagedHeadListView<br>项目介绍：图片轮转切换<br>项目地址：<a href=\"https://github.com/JorgeCastilloPrz/PagedHeadListView\">https://github.com/JorgeCastilloPrz/PagedHeadListView</a><br>DEMO演示：<br><img src=\"https://raw.githubusercontent.com/JorgeCastilloPrz/PagedHeadListView/master/app/src/main/res/raw/preview1.gif\" alt=\"github\" title=\"github\"><br><img src=\"https://raw.githubusercontent.com/JorgeCastilloPrz/PagedHeadListView/master/app/src/main/res/raw/preview3.gif\" alt=\"github\" title=\"github\"></p>\n<hr>\n<p>17.android-movies-demo<br>项目介绍：电影列表3级联动，交互<br>项目地址：<a href=\"https://github.com/dlew/android-movies-demo\">https://github.com/dlew/android-movies-demo</a><br>DEMO演示：<br>youtube:  <a href=\"https://www.youtube.com/watch?feature=player_embedded&amp;v=nchbp6pr2tg\">https://www.youtube.com/watch?feature=player_embedded&amp;v=nchbp6pr2tg</a><br><img src=\"https://camo.githubusercontent.com/17d279cc83b7c0831100dd81d18a809dd0ea26c9/687474703a2f2f696d672e796f75747562652e636f6d2f76692f6e636862703670723274672f302e6a7067\" alt=\"github\" title=\"github\"></p>\n<hr>\n<p>18.NiftyNotification<br>项目介绍：提示通知栏的各种动画<br>项目地址：<a href=\"https://github.com/sd6352051/NiftyNotification\">https://github.com/sd6352051/NiftyNotification</a><br>DEMO演示：<br><img src=\"https://raw.githubusercontent.com/sd6352051/NiftyNotification/master/screenshot/ss.gif\" alt=\"github\" title=\"github\">    </p>\n<hr>\n<p>19.SwipeBack<br>项目介绍：拖动关闭，模范：kicker app（<a href=\"https://play.google.com/store/apps/details?id=com.netbiscuits.kicker）\">https://play.google.com/store/apps/details?id=com.netbiscuits.kicker）</a><br>项目地址：<a href=\"https://github.com/sockeqwe/SwipeBack\">https://github.com/sockeqwe/SwipeBack</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/a8ca00fe3f9e4aa65d902ad873c3f7ef77a2b418/687474703a2f2f696d672e796f75747562652e636f6d2f76692f54366d62675f77716c6b632f302e6a7067\" alt=\"github\" title=\"github\"></p>\n<hr>\n<p>20.AndroidSwipeLayout<br>项目介绍：类似微信的测拉菜单<br>项目地址：<a href=\"https://github.com/daimajia/AndroidSwipeLayout\">https://github.com/daimajia/AndroidSwipeLayout</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/183f464b177ffa9d0b35f396796ec64f37ce87db/687474703a2f2f7777312e73696e61696d672e636e2f6d773639302f36313064633033346a7731656a6f7175696476767367323038693036333075342e676966\" alt=\"github\" title=\"github\"><br><img src=\"https://camo.githubusercontent.com/878e29e5defd2c64db4a5ec93119e133cab00807/687474703a2f2f7777322e73696e61696d672e636e2f6d773639302f36313064633033346a7731656a6f706c6170777471673230386e3065373464782e676966&quot;github&quot;\" alt=\"github\"></p>\n<hr>\n<p>21.SnackBar<br>项目介绍：<br>项目地址：<a href=\"https://github.com/MrEngineer13/SnackBar\">https://github.com/MrEngineer13/SnackBar</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/67a39af16f3d46631567c1f7bd7dcddeb3c4c9e9/687474703a2f2f6d6174657269616c2d64657369676e2e73746f726167652e676f6f676c65617069732e636f6d2f696d616765732f636f6d706f6e656e74732d746f617374732d73706563732d737065635f746f6173745f30335f315f6c617267655f6d6470692e706e67\" alt=\"github\" title=\"github\"><br>googleplay:<a href=\"https://play.google.com/store/apps/details?id=com.mrengineer13.snackbar.sample\">https://play.google.com/store/apps/details?id=com.mrengineer13.snackbar.sample</a></p>\n<hr>\n<p>22.Swipecards<br>项目介绍：A Tinder-like cards effect as of August 2014. You can swipe left or right to like or dislike the content. The library creates a similar effect to Tinder’s swipable cards with Fling animation.<br>项目地址：<a href=\"https://github.com/Diolor/Swipecards\">https://github.com/Diolor/Swipecards</a><br>DEMO演示：<br><img src=\"https://github.com/Diolor/Swipecards/raw/master/screenshot.gif\" alt=\"github\" title=\"github\"></p>\n<hr>\n<p>23.LDrawer<br>项目介绍：Android抽屉与材料设计动画图标<br>项目地址：<a href=\"https://github.com/ikimuhendis/LDrawer\">https://github.com/ikimuhendis/LDrawer</a><br>DEMO演示：<br><img src=\"https://raw.githubusercontent.com/IkiMuhendis/LDrawer/master/images/animated.gif\" alt=\"github\" title=\"github\"></p>\n<hr>\n<p>24.Dragger<br>项目介绍:Animate your activity!<br>项目地址:<a href=\"https://github.com/ppamorim/Dragger\">https://github.com/ppamorim/Dragger</a><br>Demo演示:<br><img src=\"https://camo.githubusercontent.com/bce61066e5add8269dc7aa49bce0a30e03627885/687474703a2f2f692e696d6775722e636f6d2f676f50576771312e676966\" alt=\"github\" title=\"github\"></p>\n<hr>\n<h1 id=\"视觉篇\"><a href=\"#视觉篇\" class=\"headerlink\" title=\"视觉篇\"></a>视觉篇</h1><hr>\n<p>1.android-stackblur<br>项目介绍：毛玻璃，朦胧美<br>项目地址：<a href=\"https://github.com/kikoso/android-stackblur\">https://github.com/kikoso/android-stackblur</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/9c26fa38f23bb218558ad1843f59042ae3d90309/68747470733a2f2f7261772e6769746875622e636f6d2f6b696b6f736f2f616e64726f69642d737461636b626c75722f6d61737465722f6172742f73637265656e73686f74312e706e67\" alt=\"github\" title=\"github\"></p>\n<hr>\n<p>2.BlurEffectForAndroidDesign<br>项目介绍：实现模糊图形技巧<br>项目地址：<a href=\"https://github.com/PomepuyN/BlurEffectForAndroidDesign\">https://github.com/PomepuyN/BlurEffectForAndroidDesign</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/3ac158c7124d11c098d6ab094cb1d49880fe17c6/68747470733a2f2f6c68362e67677068742e636f6d2f74447951416c41327565714b496474776e38367234334a363456615338472d4263664a7a7177363137664934764938677a364b59326e345654396b6b61386f69707259\" alt=\"github\" title=\"github\"></p>\n<hr>\n<p>3.Shimmer-android<br>项目介绍：闪动的文字<br>项目地址：<a href=\"https://github.com/RomainPiel/Shimmer-android\">https://github.com/RomainPiel/Shimmer-android</a><br>DEMO演示：<br>youtube:<a href=\"http://www.youtube.com/watch?v=7EOsegp4J2o&amp;feature=youtu.be\">http://www.youtube.com/watch?v=7EOsegp4J2o&amp;feature=youtu.be</a><br><img src=\"https://github.com/RomainPiel/Shimmer-android/raw/master/shimmer.gif\" alt=\"github\" title=\"github\"></p>\n<hr>\n<p>4.WizardPager<br>项目介绍：它提供了一个示例实现的Android手机上安装一个向导界面<br>项目地址：<a href=\"https://github.com/TechFreak/WizardPager\">https://github.com/TechFreak/WizardPager</a><br>DEMO演示：<br>youtube:<a href=\"http://www.youtube.com/watch?v=7EOsegp4J2o&amp;feature=youtu.be\">http://www.youtube.com/watch?v=7EOsegp4J2o&amp;feature=youtu.be</a><br><img src=\"https://camo.githubusercontent.com/d1c9284cfff613dcffbdaa4db504c3a7f6cebba3/68747470733a2f2f6c68332e676f6f676c6575736572636f6e74656e742e636f6d2f2d5f2d5376334a33626463632f5564655555446431546a492f414141414141414145456f2f7970726f4a2d4562434a672f773431322d683731362d6e6f2f77697a61726450616765722e706e67\" alt=\"github\" title=\"github\"></p>\n<hr>\n<p>5.FloatingActionButton<br>项目介绍：浮动的按钮<br>项目地址：<a href=\"https://github.com/FaizMalkani/FloatingActionButton\">https://github.com/FaizMalkani/FloatingActionButton</a><br>DEMO演示：</p>\n<hr>\n<p>6.JumpingBeans<br>项目介绍：跳动的文本<br>项目地址：<a href=\"https://github.com/frakbot/JumpingBeans\">https://github.com/frakbot/JumpingBeans</a><br>DEMO演示：<br><img src=\"https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingdots.gif\" alt=\"github\" title=\"github\"><br><img src=\"https://github.com/frakbot/JumpingBeans/raw/master/art/jumpingword.gif\" alt=\"github\" title=\"github\">   </p>\n<hr>\n<p>7.android_maskable_layout<br>项目介绍：可屏蔽的布局<br>项目地址：<a href=\"https://github.com/christophesmet/android_maskable_layout\">https://github.com/christophesmet/android_maskable_layout</a><br>DEMO演示：<br><img src=\"https://github.com/christophesmet/android_maskable_layout/raw/master/Screencast.gif\" alt=\"github\" title=\"github\">   </p>\n<hr>\n<p>8.activityanimation<br>项目介绍：Activit之间切换动画<br>项目地址：<a href=\"https://github.com/flavienlaurent/activityanimation\">https://github.com/flavienlaurent/activityanimation</a><br>DEMO演示：<br>youtube:   <a href=\"https://www.youtube.com/watch?v=-E0sc6w_Jck\">https://www.youtube.com/watch?v=-E0sc6w_Jck</a></p>\n<hr>\n<p>9.android-shape-imageview<br>项目介绍：提供了一组自定义形状的android imageview组件,和一个框架来定义更多的形状。实现着色器和位图基于掩模图像视图。<br>项目地址：<a href=\"https://github.com/siyamed/android-shape-imageview\">https://github.com/siyamed/android-shape-imageview</a><br>DEMO演示：<br><img src=\"https://github.com/siyamed/android-shape-imageview/raw/master/images/shader-buble.png\" alt=\"github\" title=\"github\"><br><img src=\"https://github.com/siyamed/android-shape-imageview/raw/master/images/all-samples.png\" alt=\"github\" title=\"github\"></p>\n<hr>\n<p>10.RippleView<br>项目介绍：认为模仿的连锁反应在单击推出了Android L<br>项目地址：<a href=\"https://github.com/siriscac/RippleView\">https://github.com/siriscac/RippleView</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/eec41193900aad4803dcf18bc9915fafa3f7d1cf/68747470733a2f2f7261772e6769746875622e636f6d2f73697269736361632f526970706c65566965772f6d61737465722f53637265656e732f53637265656e2e676966\" alt=\"github\" title=\"github\">   </p>\n<hr>\n<p>11.android-ui<br>项目介绍：一个小部件可以定义的行为之间的动态变化<br>项目地址：<a href=\"https://github.com/markushi/android-ui\">https://github.com/markushi/android-ui</a><br>DEMO演示：<br><img src=\"https://raw.githubusercontent.com/markushi/android-ui/master/example-action.gif\" alt=\"github\" title=\"github\">   </p>\n<hr>\n<p>12.FlatUI<br>项目介绍：<br>项目地址：<a href=\"https://github.com/eluleci/FlatUI\">https://github.com/eluleci/FlatUI</a><br>DEMO演示：<br><img src=\"https://camo.githubusercontent.com/590d4a2ac322417b71f83223bd58b83903d58343/68747470733a2f2f7261772e6769746875622e636f6d2f656c756c6563692f466c617455492f6d61737465722f73616d706c652d696d616765732f73686f77636173652e706e67\" alt=\"github\" title=\"github\"><br><img src=\"https://camo.githubusercontent.com/ae20d6255d273ba92e8957e0b1cd95aab4e67198/68747470733a2f2f7261772e6769746875622e636f6d2f656c756c6563692f466c617455492f6d61737465722f73616d706c652d696d616765732f7468656d65732e706e67\" alt=\"github\" title=\"github\"></p>"},{"layout":"post","title":"Android优秀项目篇","duoshuo":true,"date":"2014-10-20T16:00:00.000Z","_content":"\nAndroid优秀项目篇\n\n----\n\n(1).Linux\n\n项目介绍: 不解释\n\n项目地址：[https://github.com/torvalds/linux](https://github.com/torvalds/linux)\n\n---\n\n(2).Android\n\n项目介绍: 不解释\n\n项目地址：[https://android.googlesource.com/](https://android.googlesource.com/) 或 [https://github.com/android](https://github.com/android)\n\n\n<!-- more -->\n\n----\n\n(3).ZXing 二维码扫描工具\n\n项目介绍: 现在市面上很多应用的二维码扫描功能都是从这个修改而来 本人也使用过此项目,集成起来相当方便,没几行代码.\n\n项目地址: [https://github.com/zxing/zxing](https://github.com/zxing/zxing) 或 [https://code.google.com/p/zxing/](https://code.google.com/p/zxing/)\n\nAPK地址: [https://play.google.com/store/apps/details?id=com.google.zxing.client.android](https://play.google.com/store/apps/details?id=com.google.zxing.client.android)\n\n![GitHub](https://camo.githubusercontent.com/cd92fcc87ebc531c60edc667da4a77b90c004ff0/68747470733a2f2f7261772e6769746875622e636f6d2f77696b692f7a78696e672f7a78696e672f7a78696e672d6c6f676f2e706e67)\n\n----\n\n(4).Github的Android客户端项目\n\n项目介绍: GitHub 客户端,谁用谁知道\n\n项目地址：[https://github.com/github/android](https://github.com/github/android)\n\nAPK地址：[https://play.google.com/store/apps/details?id=com.github.mobile](https://play.google.com/store/apps/details?id=com.github.mobile)\n\n![GitHub](https://cloud.githubusercontent.com/assets/3838734/3855877/4cf2a2dc-1eec-11e4-9634-2a1adf8f1c39.jpg)\n\n----\n\n(5).MIUI便签 (小米便签社区开源版)\n\n项目介绍: 项目分包比较合理，相比较miui的文件管理器 [https://github.com/MiCode/FileExplorer](https://github.com/MiCode/FileExplorer) 代码规范较好得多\n\n项目地址：[https://github.com/MiCode/Notes](https://github.com/MiCode/Notes)\n\nAPK地址：[https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true](https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true)\n\n----\n\n(6).四次元-新浪微博客户端\n\n项目介绍: 四次元（原微次元） weiciyuan\n\n项目地址：[https://github.com/qii/weiciyuan](https://github.com/qii/weiciyuan)\n\nAPK地址：[https://play.google.com/store/apps/details?id=org.qii.weiciyuan](https://play.google.com/store/apps/details?id=org.qii.weiciyuan)\n\n![GitHub](https://camo.githubusercontent.com/7deb51df7b284f7affc350b7d299c46d4476596b/68747470733a2f2f6c68352e67677068742e636f6d2f6c69616f3479726173657563536e636271395a4f417370436237785a5a2d45376948735376334f42476246774c6936705379733847346a617031333270556d7559513d683930302d7277)\n![GitHub](https://camo.githubusercontent.com/48decff5ad9407a92479a72fed9c03a059bc383e/68747470733a2f2f6c68352e67677068742e636f6d2f686c66324879376e7976475a326c365756334c45643249695856705f78596837365f6250555345615166306570527778783358412d376441466a5142695a793754773d683930302d7277)\n\n----\n\n(7).gnucash-一个记账理财软件\n\n项目介绍: 还没研究\n\n项目地址：[https://github.com/codinguser/gnucash-android](https://github.com/codinguser/gnucash-android)\n\nAPK地址：[http://play.google.com/store/apps/details?id=org.gnucash.android](http://play.google.com/store/apps/details?id=org.gnucash.android)\n\n----\n\n\n\n(8).高仿今日头条新闻App\n\n项目介绍: 高仿今日头条新闻App界面很全面值的学习的一个Demo,里面集成了多个开源库 如: slidingmenu(侧拉菜单包) , Android-Universal-Image-Loader  (图片的异步加载包)  等\n\n[今日头条 --新闻阅读器 （一）](http://blog.csdn.net/vipzjyno1/article/details/23591315)\n\n[今日头条 --新闻阅读器 （二）](http://blog.csdn.net/vipzjyno1/article/details/23619269)\n\n[今日头条 --新闻阅读器 （三） 完结 、总结 篇](http://blog.csdn.net/vipzjyno1/article/details/26514543)\n\n项目地址: [https://github.com/Rano1/TopNews](https://github.com/Rano1/TopNews)\n\nDEMO演示：\n\n![GitHub](https://raw.githubusercontent.com/Rano1/TopNews/master/art/1.png)\n\n\n\n----\n\n(9).eoe社区 Android 客户端项目\n\n项目介绍: eoe的Android客户端源码 功能模块有:社区精选,新闻资讯,学习教程,社区博客.每个人都可以fork一份代码修改.修改完后可以pull给管理员审核提交.\n\n项目地址:[https://github.com/eoecn/android-app/](https://github.com/eoecn/android-app/)\n\n\n----\n\n(10).网易新闻头条客户端\n\n项目简介: 这是一个新闻客户端,类似于网易新闻头条 .里面集成了多个开源框架如PhotoView android-FlipView 等\n\n项目地址:[https://github.com/tigerguixh/QuickNews](https://github.com/tigerguixh/QuickNews)\n\n![GitHub](https://raw.githubusercontent.com/tigerguixh/QuickNews/master/jietu.gif)\n\n----\n\n(11).开源中国Android客户端\n\n项目介绍: 谁用谁知道. 代码托管在OSChina [简介](http://www.oschina.net/app)\n\n项目地址:[http://git.oschina.net/oschina/android-app](http://git.oschina.net/oschina/android-app)\n\n----\n\n还会陆续更新....\n\n","source":"_posts/2014-10-21-android_excellent_project_library.md","raw":"---\nlayout : post\ntitle : \"Android优秀项目篇\"\ncategory : Android\nduoshuo: true\ndate : 2014-10-21\ntags : [Android ,GitHub ]\n---\n\nAndroid优秀项目篇\n\n----\n\n(1).Linux\n\n项目介绍: 不解释\n\n项目地址：[https://github.com/torvalds/linux](https://github.com/torvalds/linux)\n\n---\n\n(2).Android\n\n项目介绍: 不解释\n\n项目地址：[https://android.googlesource.com/](https://android.googlesource.com/) 或 [https://github.com/android](https://github.com/android)\n\n\n<!-- more -->\n\n----\n\n(3).ZXing 二维码扫描工具\n\n项目介绍: 现在市面上很多应用的二维码扫描功能都是从这个修改而来 本人也使用过此项目,集成起来相当方便,没几行代码.\n\n项目地址: [https://github.com/zxing/zxing](https://github.com/zxing/zxing) 或 [https://code.google.com/p/zxing/](https://code.google.com/p/zxing/)\n\nAPK地址: [https://play.google.com/store/apps/details?id=com.google.zxing.client.android](https://play.google.com/store/apps/details?id=com.google.zxing.client.android)\n\n![GitHub](https://camo.githubusercontent.com/cd92fcc87ebc531c60edc667da4a77b90c004ff0/68747470733a2f2f7261772e6769746875622e636f6d2f77696b692f7a78696e672f7a78696e672f7a78696e672d6c6f676f2e706e67)\n\n----\n\n(4).Github的Android客户端项目\n\n项目介绍: GitHub 客户端,谁用谁知道\n\n项目地址：[https://github.com/github/android](https://github.com/github/android)\n\nAPK地址：[https://play.google.com/store/apps/details?id=com.github.mobile](https://play.google.com/store/apps/details?id=com.github.mobile)\n\n![GitHub](https://cloud.githubusercontent.com/assets/3838734/3855877/4cf2a2dc-1eec-11e4-9634-2a1adf8f1c39.jpg)\n\n----\n\n(5).MIUI便签 (小米便签社区开源版)\n\n项目介绍: 项目分包比较合理，相比较miui的文件管理器 [https://github.com/MiCode/FileExplorer](https://github.com/MiCode/FileExplorer) 代码规范较好得多\n\n项目地址：[https://github.com/MiCode/Notes](https://github.com/MiCode/Notes)\n\nAPK地址：[https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true](https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true)\n\n----\n\n(6).四次元-新浪微博客户端\n\n项目介绍: 四次元（原微次元） weiciyuan\n\n项目地址：[https://github.com/qii/weiciyuan](https://github.com/qii/weiciyuan)\n\nAPK地址：[https://play.google.com/store/apps/details?id=org.qii.weiciyuan](https://play.google.com/store/apps/details?id=org.qii.weiciyuan)\n\n![GitHub](https://camo.githubusercontent.com/7deb51df7b284f7affc350b7d299c46d4476596b/68747470733a2f2f6c68352e67677068742e636f6d2f6c69616f3479726173657563536e636271395a4f417370436237785a5a2d45376948735376334f42476246774c6936705379733847346a617031333270556d7559513d683930302d7277)\n![GitHub](https://camo.githubusercontent.com/48decff5ad9407a92479a72fed9c03a059bc383e/68747470733a2f2f6c68352e67677068742e636f6d2f686c66324879376e7976475a326c365756334c45643249695856705f78596837365f6250555345615166306570527778783358412d376441466a5142695a793754773d683930302d7277)\n\n----\n\n(7).gnucash-一个记账理财软件\n\n项目介绍: 还没研究\n\n项目地址：[https://github.com/codinguser/gnucash-android](https://github.com/codinguser/gnucash-android)\n\nAPK地址：[http://play.google.com/store/apps/details?id=org.gnucash.android](http://play.google.com/store/apps/details?id=org.gnucash.android)\n\n----\n\n\n\n(8).高仿今日头条新闻App\n\n项目介绍: 高仿今日头条新闻App界面很全面值的学习的一个Demo,里面集成了多个开源库 如: slidingmenu(侧拉菜单包) , Android-Universal-Image-Loader  (图片的异步加载包)  等\n\n[今日头条 --新闻阅读器 （一）](http://blog.csdn.net/vipzjyno1/article/details/23591315)\n\n[今日头条 --新闻阅读器 （二）](http://blog.csdn.net/vipzjyno1/article/details/23619269)\n\n[今日头条 --新闻阅读器 （三） 完结 、总结 篇](http://blog.csdn.net/vipzjyno1/article/details/26514543)\n\n项目地址: [https://github.com/Rano1/TopNews](https://github.com/Rano1/TopNews)\n\nDEMO演示：\n\n![GitHub](https://raw.githubusercontent.com/Rano1/TopNews/master/art/1.png)\n\n\n\n----\n\n(9).eoe社区 Android 客户端项目\n\n项目介绍: eoe的Android客户端源码 功能模块有:社区精选,新闻资讯,学习教程,社区博客.每个人都可以fork一份代码修改.修改完后可以pull给管理员审核提交.\n\n项目地址:[https://github.com/eoecn/android-app/](https://github.com/eoecn/android-app/)\n\n\n----\n\n(10).网易新闻头条客户端\n\n项目简介: 这是一个新闻客户端,类似于网易新闻头条 .里面集成了多个开源框架如PhotoView android-FlipView 等\n\n项目地址:[https://github.com/tigerguixh/QuickNews](https://github.com/tigerguixh/QuickNews)\n\n![GitHub](https://raw.githubusercontent.com/tigerguixh/QuickNews/master/jietu.gif)\n\n----\n\n(11).开源中国Android客户端\n\n项目介绍: 谁用谁知道. 代码托管在OSChina [简介](http://www.oschina.net/app)\n\n项目地址:[http://git.oschina.net/oschina/android-app](http://git.oschina.net/oschina/android-app)\n\n----\n\n还会陆续更新....\n\n","slug":"android_excellent_project_library","published":1,"updated":"2015-02-25T09:39:40.070Z","comments":1,"photos":[],"link":"","_id":"cinu3etxh000lxoj0it1y9nkv","content":"<p>Android优秀项目篇</p>\n<hr>\n<p>(1).Linux</p>\n<p>项目介绍: 不解释</p>\n<p>项目地址：<a href=\"https://github.com/torvalds/linux\" target=\"_blank\" rel=\"external\">https://github.com/torvalds/linux</a></p>\n<hr>\n<p>(2).Android</p>\n<p>项目介绍: 不解释</p>\n<p>项目地址：<a href=\"https://android.googlesource.com/\" target=\"_blank\" rel=\"external\">https://android.googlesource.com/</a> 或 <a href=\"https://github.com/android\" target=\"_blank\" rel=\"external\">https://github.com/android</a></p>\n<a id=\"more\"></a>\n<hr>\n<p>(3).ZXing 二维码扫描工具</p>\n<p>项目介绍: 现在市面上很多应用的二维码扫描功能都是从这个修改而来 本人也使用过此项目,集成起来相当方便,没几行代码.</p>\n<p>项目地址: <a href=\"https://github.com/zxing/zxing\" target=\"_blank\" rel=\"external\">https://github.com/zxing/zxing</a> 或 <a href=\"https://code.google.com/p/zxing/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/zxing/</a></p>\n<p>APK地址: <a href=\"https://play.google.com/store/apps/details?id=com.google.zxing.client.android\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.google.zxing.client.android</a></p>\n<p><img src=\"https://camo.githubusercontent.com/cd92fcc87ebc531c60edc667da4a77b90c004ff0/68747470733a2f2f7261772e6769746875622e636f6d2f77696b692f7a78696e672f7a78696e672f7a78696e672d6c6f676f2e706e67\" alt=\"GitHub\"></p>\n<hr>\n<p>(4).Github的Android客户端项目</p>\n<p>项目介绍: GitHub 客户端,谁用谁知道</p>\n<p>项目地址：<a href=\"https://github.com/github/android\" target=\"_blank\" rel=\"external\">https://github.com/github/android</a></p>\n<p>APK地址：<a href=\"https://play.google.com/store/apps/details?id=com.github.mobile\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.github.mobile</a></p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/3838734/3855877/4cf2a2dc-1eec-11e4-9634-2a1adf8f1c39.jpg\" alt=\"GitHub\"></p>\n<hr>\n<p>(5).MIUI便签 (小米便签社区开源版)</p>\n<p>项目介绍: 项目分包比较合理，相比较miui的文件管理器 <a href=\"https://github.com/MiCode/FileExplorer\" target=\"_blank\" rel=\"external\">https://github.com/MiCode/FileExplorer</a> 代码规范较好得多</p>\n<p>项目地址：<a href=\"https://github.com/MiCode/Notes\" target=\"_blank\" rel=\"external\">https://github.com/MiCode/Notes</a></p>\n<p>APK地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true</a></p>\n<hr>\n<p>(6).四次元-新浪微博客户端</p>\n<p>项目介绍: 四次元（原微次元） weiciyuan</p>\n<p>项目地址：<a href=\"https://github.com/qii/weiciyuan\" target=\"_blank\" rel=\"external\">https://github.com/qii/weiciyuan</a></p>\n<p>APK地址：<a href=\"https://play.google.com/store/apps/details?id=org.qii.weiciyuan\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=org.qii.weiciyuan</a></p>\n<p><img src=\"https://camo.githubusercontent.com/7deb51df7b284f7affc350b7d299c46d4476596b/68747470733a2f2f6c68352e67677068742e636f6d2f6c69616f3479726173657563536e636271395a4f417370436237785a5a2d45376948735376334f42476246774c6936705379733847346a617031333270556d7559513d683930302d7277\" alt=\"GitHub\"><br><img src=\"https://camo.githubusercontent.com/48decff5ad9407a92479a72fed9c03a059bc383e/68747470733a2f2f6c68352e67677068742e636f6d2f686c66324879376e7976475a326c365756334c45643249695856705f78596837365f6250555345615166306570527778783358412d376441466a5142695a793754773d683930302d7277\" alt=\"GitHub\"></p>\n<hr>\n<p>(7).gnucash-一个记账理财软件</p>\n<p>项目介绍: 还没研究</p>\n<p>项目地址：<a href=\"https://github.com/codinguser/gnucash-android\" target=\"_blank\" rel=\"external\">https://github.com/codinguser/gnucash-android</a></p>\n<p>APK地址：<a href=\"http://play.google.com/store/apps/details?id=org.gnucash.android\" target=\"_blank\" rel=\"external\">http://play.google.com/store/apps/details?id=org.gnucash.android</a></p>\n<hr>\n<p>(8).高仿今日头条新闻App</p>\n<p>项目介绍: 高仿今日头条新闻App界面很全面值的学习的一个Demo,里面集成了多个开源库 如: slidingmenu(侧拉菜单包) , Android-Universal-Image-Loader  (图片的异步加载包)  等</p>\n<p><a href=\"http://blog.csdn.net/vipzjyno1/article/details/23591315\" target=\"_blank\" rel=\"external\">今日头条 –新闻阅读器 （一）</a></p>\n<p><a href=\"http://blog.csdn.net/vipzjyno1/article/details/23619269\" target=\"_blank\" rel=\"external\">今日头条 –新闻阅读器 （二）</a></p>\n<p><a href=\"http://blog.csdn.net/vipzjyno1/article/details/26514543\" target=\"_blank\" rel=\"external\">今日头条 –新闻阅读器 （三） 完结 、总结 篇</a></p>\n<p>项目地址: <a href=\"https://github.com/Rano1/TopNews\" target=\"_blank\" rel=\"external\">https://github.com/Rano1/TopNews</a></p>\n<p>DEMO演示：</p>\n<p><img src=\"https://raw.githubusercontent.com/Rano1/TopNews/master/art/1.png\" alt=\"GitHub\"></p>\n<hr>\n<p>(9).eoe社区 Android 客户端项目</p>\n<p>项目介绍: eoe的Android客户端源码 功能模块有:社区精选,新闻资讯,学习教程,社区博客.每个人都可以fork一份代码修改.修改完后可以pull给管理员审核提交.</p>\n<p>项目地址:<a href=\"https://github.com/eoecn/android-app/\" target=\"_blank\" rel=\"external\">https://github.com/eoecn/android-app/</a></p>\n<hr>\n<p>(10).网易新闻头条客户端</p>\n<p>项目简介: 这是一个新闻客户端,类似于网易新闻头条 .里面集成了多个开源框架如PhotoView android-FlipView 等</p>\n<p>项目地址:<a href=\"https://github.com/tigerguixh/QuickNews\" target=\"_blank\" rel=\"external\">https://github.com/tigerguixh/QuickNews</a></p>\n<p><img src=\"https://raw.githubusercontent.com/tigerguixh/QuickNews/master/jietu.gif\" alt=\"GitHub\"></p>\n<hr>\n<p>(11).开源中国Android客户端</p>\n<p>项目介绍: 谁用谁知道. 代码托管在OSChina <a href=\"http://www.oschina.net/app\" target=\"_blank\" rel=\"external\">简介</a></p>\n<p>项目地址:<a href=\"http://git.oschina.net/oschina/android-app\" target=\"_blank\" rel=\"external\">http://git.oschina.net/oschina/android-app</a></p>\n<hr>\n<p>还会陆续更新….</p>\n","excerpt":"<p>Android优秀项目篇</p>\n<hr>\n<p>(1).Linux</p>\n<p>项目介绍: 不解释</p>\n<p>项目地址：<a href=\"https://github.com/torvalds/linux\">https://github.com/torvalds/linux</a></p>\n<hr>\n<p>(2).Android</p>\n<p>项目介绍: 不解释</p>\n<p>项目地址：<a href=\"https://android.googlesource.com/\">https://android.googlesource.com/</a> 或 <a href=\"https://github.com/android\">https://github.com/android</a></p>","more":"<hr>\n<p>(3).ZXing 二维码扫描工具</p>\n<p>项目介绍: 现在市面上很多应用的二维码扫描功能都是从这个修改而来 本人也使用过此项目,集成起来相当方便,没几行代码.</p>\n<p>项目地址: <a href=\"https://github.com/zxing/zxing\">https://github.com/zxing/zxing</a> 或 <a href=\"https://code.google.com/p/zxing/\">https://code.google.com/p/zxing/</a></p>\n<p>APK地址: <a href=\"https://play.google.com/store/apps/details?id=com.google.zxing.client.android\">https://play.google.com/store/apps/details?id=com.google.zxing.client.android</a></p>\n<p><img src=\"https://camo.githubusercontent.com/cd92fcc87ebc531c60edc667da4a77b90c004ff0/68747470733a2f2f7261772e6769746875622e636f6d2f77696b692f7a78696e672f7a78696e672f7a78696e672d6c6f676f2e706e67\" alt=\"GitHub\"></p>\n<hr>\n<p>(4).Github的Android客户端项目</p>\n<p>项目介绍: GitHub 客户端,谁用谁知道</p>\n<p>项目地址：<a href=\"https://github.com/github/android\">https://github.com/github/android</a></p>\n<p>APK地址：<a href=\"https://play.google.com/store/apps/details?id=com.github.mobile\">https://play.google.com/store/apps/details?id=com.github.mobile</a></p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/3838734/3855877/4cf2a2dc-1eec-11e4-9634-2a1adf8f1c39.jpg\" alt=\"GitHub\"></p>\n<hr>\n<p>(5).MIUI便签 (小米便签社区开源版)</p>\n<p>项目介绍: 项目分包比较合理，相比较miui的文件管理器 <a href=\"https://github.com/MiCode/FileExplorer\">https://github.com/MiCode/FileExplorer</a> 代码规范较好得多</p>\n<p>项目地址：<a href=\"https://github.com/MiCode/Notes\">https://github.com/MiCode/Notes</a></p>\n<p>APK地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true\">https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true</a></p>\n<hr>\n<p>(6).四次元-新浪微博客户端</p>\n<p>项目介绍: 四次元（原微次元） weiciyuan</p>\n<p>项目地址：<a href=\"https://github.com/qii/weiciyuan\">https://github.com/qii/weiciyuan</a></p>\n<p>APK地址：<a href=\"https://play.google.com/store/apps/details?id=org.qii.weiciyuan\">https://play.google.com/store/apps/details?id=org.qii.weiciyuan</a></p>\n<p><img src=\"https://camo.githubusercontent.com/7deb51df7b284f7affc350b7d299c46d4476596b/68747470733a2f2f6c68352e67677068742e636f6d2f6c69616f3479726173657563536e636271395a4f417370436237785a5a2d45376948735376334f42476246774c6936705379733847346a617031333270556d7559513d683930302d7277\" alt=\"GitHub\"><br><img src=\"https://camo.githubusercontent.com/48decff5ad9407a92479a72fed9c03a059bc383e/68747470733a2f2f6c68352e67677068742e636f6d2f686c66324879376e7976475a326c365756334c45643249695856705f78596837365f6250555345615166306570527778783358412d376441466a5142695a793754773d683930302d7277\" alt=\"GitHub\"></p>\n<hr>\n<p>(7).gnucash-一个记账理财软件</p>\n<p>项目介绍: 还没研究</p>\n<p>项目地址：<a href=\"https://github.com/codinguser/gnucash-android\">https://github.com/codinguser/gnucash-android</a></p>\n<p>APK地址：<a href=\"http://play.google.com/store/apps/details?id=org.gnucash.android\">http://play.google.com/store/apps/details?id=org.gnucash.android</a></p>\n<hr>\n<p>(8).高仿今日头条新闻App</p>\n<p>项目介绍: 高仿今日头条新闻App界面很全面值的学习的一个Demo,里面集成了多个开源库 如: slidingmenu(侧拉菜单包) , Android-Universal-Image-Loader  (图片的异步加载包)  等</p>\n<p><a href=\"http://blog.csdn.net/vipzjyno1/article/details/23591315\">今日头条 –新闻阅读器 （一）</a></p>\n<p><a href=\"http://blog.csdn.net/vipzjyno1/article/details/23619269\">今日头条 –新闻阅读器 （二）</a></p>\n<p><a href=\"http://blog.csdn.net/vipzjyno1/article/details/26514543\">今日头条 –新闻阅读器 （三） 完结 、总结 篇</a></p>\n<p>项目地址: <a href=\"https://github.com/Rano1/TopNews\">https://github.com/Rano1/TopNews</a></p>\n<p>DEMO演示：</p>\n<p><img src=\"https://raw.githubusercontent.com/Rano1/TopNews/master/art/1.png\" alt=\"GitHub\"></p>\n<hr>\n<p>(9).eoe社区 Android 客户端项目</p>\n<p>项目介绍: eoe的Android客户端源码 功能模块有:社区精选,新闻资讯,学习教程,社区博客.每个人都可以fork一份代码修改.修改完后可以pull给管理员审核提交.</p>\n<p>项目地址:<a href=\"https://github.com/eoecn/android-app/\">https://github.com/eoecn/android-app/</a></p>\n<hr>\n<p>(10).网易新闻头条客户端</p>\n<p>项目简介: 这是一个新闻客户端,类似于网易新闻头条 .里面集成了多个开源框架如PhotoView android-FlipView 等</p>\n<p>项目地址:<a href=\"https://github.com/tigerguixh/QuickNews\">https://github.com/tigerguixh/QuickNews</a></p>\n<p><img src=\"https://raw.githubusercontent.com/tigerguixh/QuickNews/master/jietu.gif\" alt=\"GitHub\"></p>\n<hr>\n<p>(11).开源中国Android客户端</p>\n<p>项目介绍: 谁用谁知道. 代码托管在OSChina <a href=\"http://www.oschina.net/app\">简介</a></p>\n<p>项目地址:<a href=\"http://git.oschina.net/oschina/android-app\">http://git.oschina.net/oschina/android-app</a></p>\n<hr>\n<p>还会陆续更新….</p>"},{"title":"Java8新特性","date":"2014-10-22T16:00:00.000Z","_content":"\n\n<style>\nh3 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nh6 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\n</style>\n\n目录:   \n\n* 1．简介\n* 2．Java的新特性\n\t*  2.1 Lambda表达式和函数式接口\n\t*  2.2 接口的默认方法和静态方法\n\t*  2.3 方法引用\n\t*  2.4 重复注释\n\t*  2.5 更好的类型推断\n\t*  2.6 注解的扩展\n* 3．Java编译器的新特性\n\t*  3.1 参数名字\n* 4．Java 库的新特性\n\t*  4.1 Optional\n\t*  4.2 Stream\n\t*  4.3日期时间API（JSR310)\n\t*  4.4 Nashorn javascript引擎\n\t*  4.5 Base64\n\t*  4.6 并行数组\n\t*  4.7 并发\n* 5. 新的工具\n\t*  5.1 Nashorn引擎：jjs\n\t*  5.2 类依赖分析工具：jdeps\n* 6. JVM的新特性\n* 7. 资源\n\n\n<!-- more -->\n\n# 1．简介\n\n毫无疑问，Java 8是自Java  5（2004年）发布以来Java语言最大的一次版本升级，Java 8带来了很多的新特性，比如编译器、类库、开发工具和JVM（Java虚拟机）。在这篇教程中我们将会学习这些新特性，并通过真实例子演示说明它们适用的场景。\n\n本教程由下面几部分组成，它们分别涉及到Java平台某一特定方面的内容：\n\n语言  \n编译器  \n类库  \n开发工具  \n运行时（Java虚拟机）  \n\n\n# 2．Java的新特性\n\n总体来说，Java 8是一个大的版本升级。有人可能会说，Java 8的新特性非常令人期待，但是也要花费大量的时间去学习。这一节我们会讲到这些新特性。\n\n## 2.1 Lambda表达式和函数式接口\n\nLambda表达式（也叫做闭包）是Java 8中最大的也是期待已久的变化。它允许我们将一个函数当作方法的参数（传递函数），  \n或者说把代码当作数据，这是每个函数式编程者熟悉的概念。很多基于JVM平台的语言一开始就支持Lambda表达式，但是Java程序员没有选择，只能使用匿名内部类来替代Lambda表达式。\n\nLambda表达式的设计被讨论了很久，而且花费了很多的功夫来交流。不过最后取得了一个折中的办法，得到了一个新的简明并且紧凑的Lambda表达式结构。最简单的Lambda表达式可以用逗号分隔的参数列表、->符号和功能语句块来表示。示例如下：\n\n```java\nArrays.asList( \"a\", \"b\", \"d\" ).forEach( e -> System.out.println( e ) );\n```\n\n请注意到编译器会根据上下文来推测参数的类型，或者你也可以显示地指定参数类型，只需要将类型包在括号里。举个例子：   \n\n```java\nArrays.asList( \"a\", \"b\", \"d\" ).forEach( ( String e ) -> System.out.println( e ) );\n```\n\n如果Lambda的功能语句块太复杂，我们可以用大括号包起来，跟普通的Java方法一样，如下：  \n\n```java\nString separator = \",\";\nArrays.asList(\"a\", \"b\", \"d\").forEach((String e) -> {\n\tSystem.out.print(e + separator2);\n\tSystem.out.print(e + separator2);\n});\n```\n\nLambda表达式可能会引用类的成员或者局部变量（会被隐式地转变成final类型），下面两种写法的效果是一样的：   \n\n```java\nString separator = \",\";\nArrays.asList( \"a\", \"b\", \"d\" ).forEach(\n    ( String e ) -> System.out.print( e + separator ) );\n```\n\n和\n\n```java\nfinal String separator = \",\";\nArrays.asList( \"a\", \"b\", \"d\" ).forEach(\n    ( String e ) -> System.out.print( e + separator ) );\n```\n\nLambda表达式可能会有返回值，编译器会根据上下文推断返回值的类型。如果lambda的语句块只有一行，不需要return关键字。下面两个写法是等价的：  \n\n```java\nArrays.asList( \"a\", \"b\", \"d\" ).sort( ( e1, e2 ) -> e1.compareTo( e2 ) );\n```\n和\n\n```java\nArrays.asList( \"a\", \"b\", \"d\" ).sort( ( e1, e2 ) -> {\n    int result = e1.compareTo( e2 );\n    return result;\n} );\n```\n\n语言的设计者们思考了很多如何让现有的功能和lambda表达式友好兼容。于是就有了函数接口这个概念。函数接口是一种只有一个方法的接口，像这样地，函数接口可以隐式地转换成lambda表达式。\n\njava.lang.Runnable 和java.util.concurrent.Callable是函数接口两个最好的例子。   \n但是在实践中，函数接口是非常脆弱的，只要有人在接口里添加多一个方法，那么这个接口就不是函数接口了，  \n就会导致编译失败。Java 8提供了一个特殊的注解 @FunctionalInterface 来克服上面提到的脆弱性并且显示   \n地表明函数接口的目的（java里所有现存的接口都已经加上了 @FunctionalInterface）。让我们看看一个简单的函数接口定义：   \n\n```java\n@FunctionalInterface\npublic interface Functional {\n    void method();\n}\n```\n\n我们要记住默认的方法和静态方法（下一节会具体解释）不会违反函数接口的约定，例子如下：  \n\n```java\n@FunctionalInterface\npublic interface FunctionalDefaultMethods {\n    void method();\n    default void defaultMethod() {\n    }\n}\n```\n\n支持Lambda是Java 8最大的卖点，他有巨大的潜力吸引越来越多的开发人员转到这个开发平台来，并且在纯Java里提供最新的函数式编程的概念。对于更多的细节，请参考[官方文档](http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html)。\n\n\n测试原代码:\n\n```java\n\npackage com.tu.test.java8.newfeature;\n\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.function.Consumer;\n\npublic class TestLambda {\n\n\tpublic static void main(String[] args) {\n\n\t\t// ======无返回值的函数接口=============================\n\t\tSystem.out.println(\"==============1================\");\n\t\t// 匿名内部类实现Runnable------>\n\t\tnew Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tSystem.out.println(\"匿名内部类实现Runnable\");\n\t\t\t}\n\t\t}.run();\n\n\t\t// 使用Lambda实现------>\n\t\tSystem.out.println(\"==============2================\");\n\t\tint i = 0;\n\t\tRunnable r = () -> {// ()表示方法不需要参数.\n\t\t\tSystem.out.println(\"使用Lambda实现Runnable\" + i);\n\t\t\t// 可直接使用外部变量,但不能进行修改\n\t\t};\n\t\tr.run();\n\n\t\t// 另外一种Lambda实现简写------>\n\t\tSystem.out.println(\"==============3================\");\n\t\tRunnable r1 = () -> System.out.println(\"hello lambda!\");\n\t\tr1.run();\n\n\t\t// =======自定义函数接口============================\n\t\t// 匿名内部类自定义接口------>\n\t\tSystem.out.println(\"==============4================\");\n\t\tnew Action() {\n\t\t\t@Override\n\t\t\tpublic void execute(String content) {\n\t\t\t\tSystem.out.println(content);\n\t\t\t}\n\t\t}.execute(\"jdk1.8之前的匿名内部类实现方式\");\n\n\t\t// lambda实现------>\n\t\tSystem.out.println(\"==============5================\");\n\t\tAction a = (String content) -> {\n\t\t\tSystem.out.println(content);\n\t\t};\n\t\ta.execute(\"jdk1.8的lambda实现方式\");\n\n\t\t// 还可以更简洁，这个表达式可以被替换成对一个方法的引用，\n\t\t// 因为它只是单个方法，而且它们的参数是相同的------>\n\t\tSystem.out.println(\"==============6================\");\n\t\tAction a1 = System.out::println;\n\t\ta1.execute(\"jdk1.8的lambda实现方式_更简洁.\");\n\n\t\t// 然而，如果参数上有任何其它形式的变化，我们就不能直接引用方法，\n\t\t// 必须写全lambda表达式------>\n\t\tSystem.out.println(\"==============7================\");\n\t\tAction a3 = ((String s) -> System.out.println(\"*\" + s + \"*\"));\n\t\ta3.execute(\"jdk1.8的lambda实现方式_参数上有其它形式的变化.\");\n\n\t\t// ======有返回值的函数接口=============================\n\n\t\t// 匿名内部类自定义接口------>\n\t\tSystem.out.println(\"==============8================\");\n\t\tSystem.out.println(new Comparator<Integer>() {\n\t\t\t@Override\n\t\t\tpublic int compare(Integer o1, Integer o2) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}.compare(1, 2));\n\n\t\t// lambda实现 ------>\n\t\tSystem.out.println(\"==============9================\");\n\t\tComparator<Integer> cmp = (x, y) -> {\n\t\t\treturn (x < y) ? -1 : ((x > y) ? 1 : 0);\n\t\t};\n\n\t\t// 从中可以看出，单行的lambda表达式似乎是隐含了一个return语句。------>\n\t\tComparator<Integer> cmp1 = (x, y) -> (x < y) ? -1 : ((x > y) ? 1 : 0);\n\n\t\tSystem.out.println(\"TestLambda.main().cmp.compare():\" + cmp.compare(0, 1));\n\t\tSystem.out.println(\"TestLambda.main().cmp1.compare():\" + cmp1.compare(1, 1));\n\n\t\t// =====================================更多简洁写法\n\n\t\t\n\t\tSystem.out.println(\"==============10================\");\n\t\tList<String> list = Arrays.asList(\"a\", \"b\", \"c\");\n\t\tfor (String s : list) {\n\t\t\tnew Consumer<String>() {\n\t\t\t\t@Override\n\t\t\t\tpublic void accept(String t) {\n\t\t\t\t\tSystem.out.println(t);\n\t\t\t\t}\n\t\t\t}.accept(s);\n\t\t}\n\n\t\t// 最简单的Lambda表达式可以用逗号分隔的参数列表、->符号和功能语句块来表示。示例如下：\n\t\tSystem.out.println(\"==============11================\");\n\t\tArrays.asList(\"a\", \"b\", \"d\").forEach(e -> System.out.println(e));\n\n\t\t// 请注意到编译器会根据上下文来推测参数的类型，或者你也可以显示地指定参数类型，\n\t\t// 只需要将类型包在括号里。举个例子：\n\t\tSystem.out.println(\"==============12================\");\n\t\tArrays.asList(\"a\", \"b\", \"d\").forEach((String e) -> System.out.println(e));\n\n\t\t// Lambda表达式可能会引用类的成员或者局部变量（会被隐式地转变成final类型），\n\t\t// 下面两种写法的效果是一样的：\n\t\tSystem.out.println(\"==============13================\");\n\t\tString separator = \",\";\n\t\tArrays.asList(\"a\", \"b\", \"d\").forEach((String e) -> System.out.print(e + separator));\n\t\t\n\t\tSystem.out.println(\"==============14================\");\n\t\tfinal String separator1 = \",\";\n\t\tArrays.asList(\"a\", \"b\", \"d\").forEach((String e) -> System.out.print(e + separator1));\n\n\t\t// 如果Lambda的功能语句块太复杂，我们可以用大括号包起来，跟普通的Java方法一样，如下：\n\t\tSystem.out.println(\"==============15================\");\n\t\tString separator2 = \",\";\n\t\tArrays.asList(\"a\", \"b\", \"d\").forEach((String e) -> {\n\t\t\tSystem.out.print(e + separator2);\n\t\t\tSystem.out.print(e + separator2);\n\t\t});\n\n\t\t// Lambda表达式可能会有返回值，编译器会根据上下文推断返回值的类型。\n\t\t// 如果lambda的语句块只有一行，不需要return关键字。下面两个写法是等价的：\n\t\tSystem.out.println(\"==============16================\");\n\t\tArrays.asList(\"a\", \"b\", \"d\").sort((e1, e2) -> e1.compareTo(e2));\n\t\t\n\t\tArrays.asList(\"a\", \"b\", \"d\").sort((e1, e2) -> {\n\t\t\tint result = e1.compareTo(e2);\n\t\t\treturn result;\n\t\t});\n\n\t}// main end\n\n\t/\n\t * 自定义函数接口\n\t * 注解 @FunctionalInterface 使用这种方式标记的都可以使用Lambda表式,\n\t * 它还被javac使用来验证这个接口是否真是一个函数式接口，是否至少有一个抽象方法在里面。\n\t * \n\t * 在Java里，lambda表达式是“SAM”(Single Abstract Method)——\n\t * 一个含有一个抽象方法的接口(是的，现在接口里可以含有一个非抽象的方法，defender守卫方法)。\n\t */\n\t@FunctionalInterface\n\tstatic interface Action {\n\t\tvoid execute(String content);\n\n\t\tdefault void cancel(String c) {\n\t\t}\n\t}\n}//class end\n\n```\n\n运行结果:\n\n```java\n==============1================\n匿名内部类实现Runnable\n==============2================\n使用Lambda实现Runnable0\n==============3================\nhello lambda!\n==============4================\njdk1.8之前的匿名内部类实现方式\n==============5================\njdk1.8的lambda实现方式\n==============6================\njdk1.8的lambda实现方式_更简洁.\n==============7================\n*jdk1.8的lambda实现方式_参数上有其它形式的变化.*\n==============8================\n0\n==============9================\nTestLambda.main().cmp.compare():-1\nTestLambda.main().cmp1.compare():0\n==============10================\na\nb\nc\n==============11================\na\nb\nd\n==============12================\na\nb\nd\n==============13================\na,b,d,==============14================\na,b,d,==============15================\na,a,b,b,d,d,==============16================\n\n```\n\n//英文原文：[Java 8: The First Taste of Lambdas](http://zeroturnaround.com/rebellabs/java-8-the-first-taste-of-lambdas/)  \n//译文链接：[Java 8: The First Taste of Lambdas (译)](http://www.aqee.net/java-8-the-first-taste-of-lambdas/)   \n//官方文档：[Java 8: Lambda expressions](http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html)    \n\n\n\n## 2.2 接口的默认方法和静态方法\n\nJava 8增加了两个新的概念在接口声明的时候：默认和静态方法。默认方法和 Trait 有些类似，但是目标不一样。   \n默认方法允许我们在接口里添加新的方法，而不会破坏实现这个接口的已有类的兼容性，也就是说不会强迫实现接口的类实现默认方法。   \n\n默认方法和抽象方法的区别是抽象方法必须要被实现，默认方法不是。作为替代方式，接口可以提供一个默认的方法实现，   \n所有这个接口的实现类都会通过继承得倒这个方法（如果有需要也可以重写这个方法），让我们来看看下面的例子：\n\n```java\nprivate interface Defaulable {\n    // Interfaces now allow default methods, the implementer may or\n    // may not implement (override) them.\n    default String notRequired() {\n        return \"Default implementation\";\n    }\n}\n \nprivate static class DefaultableImpl implements Defaulable {\n}\n \nprivate static class OverridableImpl implements Defaulable {\n    @Override\n    public String notRequired() {\n        return \"Overridden implementation\";\n    }\n}\n```\n\n接口 Defaulable 使用 default 关键字声明了一个默认方法 notRequired ()，类 DefaultableImpl 实现了 Defaulable 接口，   \n没有对默认方法做任何修改。另外一个类OverridableImpl重写类默认实现，提供了自己的实现方法。\n\nJava 8 的另外一个有意思的新特性是接口里可以声明静态方法，并且可以实现。例子如下：\n\n```java\nprivate interface DefaulableFactory {\n    // Interfaces now allow static methods\n    static Defaulable create( Supplier< Defaulable > supplier ) {\n        return supplier.get();\n    }\n}\n```\n\n下面是把接口的静态方法和默认方法放在一起的示例（::new 是构造方法引用，后面会有详细描述）：  \n\n```java\npublic static void main( String[] args ) {\n    Defaulable defaulable = DefaulableFactory.create( DefaultableImpl::new );\n    System.out.println( defaulable.notRequired() );\n \n    defaulable = DefaulableFactory.create( OverridableImpl::new );\n    System.out.println( defaulable.notRequired() );\n}\n```\n\n控制台的输出如下：\n\n\tDefault implementation\n\tOverridden implementation\n\nJVM平台的接口的默认方法实现是很高效的，并且方法调用的字节码指令支持默认方法。  \n默认方法使已经存在的接口可以修改而不会影响编译的过程。  \njava.util.Collection中添加的额外方法就是最好的例子：stream(), parallelStream(), forEach(), removeIf()\n\n虽然默认方法很强大，但是使用之前一定要仔细考虑是不是真的需要使用默认方法，因为在层级很复杂的情况下很容易引起模糊不清甚至变异错误。更多的详细信息请参考[官方文档](http://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html)。\n\n测试原代码:  \n\n```java\npackage com.tu.test.java8.newfeature;\nimport java.util.function.Supplier;\n\npublic class TestInterfaceDefaultAndStaticMethod {\n\n\tpublic static void main( String[] args ) {\n\t\t\n\t\t//::new 是构造方法引用\n\t    Defaulable defaulable = DefaulableFactory.create( DefaultableImpl::new );\n\t    System.out.println( defaulable.notRequired() );\n\t \n\t    defaulable = DefaulableFactory.create( OverridableImpl::new );\n\t    System.out.println( defaulable.notRequired() );\n\t}\n\t\n\tprivate interface Defaulable {\n\t\t//现在允许默认方法接口,实现者可能会或可能不会实现(覆盖)。\n\t    default String notRequired() {\n\t        return \"Default implementation\";\n\t    }\n\t}\n\t \n\tprivate static class DefaultableImpl implements Defaulable {\n\t}\n\t \n\tprivate static class OverridableImpl implements Defaulable {\n\t    @Override\n\t    public String notRequired() {\n\t        return \"Overridden implementation\";\n\t    }\n\t}\n\t\n\tprivate interface DefaulableFactory {\n\t\t//现在允许静态方法的接口\n\t    static Defaulable create( Supplier< Defaulable > supplier ) {\n\t        return supplier.get();\n\t    }\n\t}\n}\n```\n\n运行结果:  \n\n```java\nDefault implementation\nOverridden implementation\n```\n\n\n## 2.3   方法引用\n\n方法引用提供了一个很有用的语义来直接访问类或者实例的已经存在的方法或者构造方法。  \n结合Lambda表达式，方法引用使语法结构紧凑简明。不需要复杂的引用。\n\n下面我们用Car 这个类来做示例，Car这个类有不同的方法定义。让我们来看看java 8支持的4种方法引用。  \n\n```java\npublic static class Car {\n    public static Car create( final Supplier< Car > supplier ) {\n        return supplier.get();\n    }             \n \n    public static void collide( final Car car ) {\n        System.out.println( \"Collided \" + car.toString() );\n    }\n \n    public void follow( final Car another ) {\n        System.out.println( \"Following the \" + another.toString() );\n    }\n \n    public void repair() {\n        System.out.println( \"Repaired \" + this.toString() );\n    }\n}\n```\n\n第一种方法引用是构造方法引用，语法是：`Class::new` ，对于泛型来说语法是：`Class<T >::new`，请注意构造方法没有参数:\n\n```java\nfinal Car car = Car.create( Car::new );\nfinal List< Car > cars = Arrays.asList( car );\n```\n\n第二种方法引用是静态方法引用，语法是：`Class::static_method`请注意这个静态方法只支持一个类型为Car的参数。\n\n```java\ncars.forEach( Car::collide );\n```\n\n第三种方法引用是类实例的方法引用，语法是：`Class::method`请注意方法没有参数。  \n\n```java\ncars.forEach( Car::repair );\n```\n最后一种方法引用是引用特殊类的方法，语法是：`instance::method`，请注意只接受Car类型的一个参数。\n\n```java\nfinal Car police = Car.create( Car::new );\ncars.forEach( police::follow );\n```\n\n运行这些例子我们将会在控制台得到如下信息（Car的实例可能会不一样）： \n\n\tCollided com.tu.test.java8.newfeature.TestMethodReferences$Car@a418fc\n\tRepaired com.tu.test.java8.newfeature.TestMethodReferences$Car@a418fc\n\tFollowing the com.tu.test.java8.newfeature.TestMethodReferences$Car@a418fc\n\n\n关于方法引用更多的示例和详细信息，请参考[官方文档](http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html)\n\n测试原代码:   \n\n```java\npackage com.tu.test.java8.newfeature;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.function.Supplier;\n\n/ MethodReferences 方法引用*/\npublic class TestMethodReferences {\n\n\tpublic static void main(String[] args) {\n\t\tfinal Car car = Car.create( Car::new );\n\t\tfinal List< Car > cars = Arrays.asList( car );\n\t\tcars.forEach( Car::collide );\n\t\tcars.forEach( Car::repair );\n\t\tfinal Car police = Car.create( Car::new );\n\t\tcars.forEach( police::follow );\n\t}\n\t\n\tpublic static class Car {\n\t    public static Car create( final Supplier< Car > supplier ) {\n\t        return supplier.get();\n\t    }             \n\t \n\t    public static void collide( final Car car ) {\n\t        System.out.println( \"Collided \" + car.toString() );\n\t    }\n\t \n\t    public void follow( final Car another ) {\n\t        System.out.println( \"Following the \" + another.toString() );\n\t    }\n\t \n\t    public void repair() {\n\t        System.out.println( \"Repaired \" + this.toString() );\n\t    }\n\t}\n}\n\n```\n \n运行结果:   \n\n```java\nCollided com.tu.test.java8.newfeature.TestMethodReferences$Car@a418fc\nRepaired com.tu.test.java8.newfeature.TestMethodReferences$Car@a418fc\nFollowing the com.tu.test.java8.newfeature.TestMethodReferences$Car@a418fc\n```\n\n\n## 2.4   重复注释\n\n自从Java 5支持注释以来，注释变得特别受欢迎因而被广泛使用。但是有一个限制，   \n同一个地方的不能使用同一个注释超过一次。 Java 8打破了这个规则，引入了重复注释，允许相同注释在声明使用的时候重复使用超过一次。 \n\n重复注释本身需要被 @Repeatable 注释。实际上，他不是一个语言上的改变，只是编译器层面的改动，技术层面仍然是一样的。让我们来看看例子：\n\n```java\npackage com.tu.test.java8.newfeature;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Repeatable;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/ RepeatingAnnotations 重复注释 */\npublic class TestRepeatingAnnotations {\n\n\t@Target(ElementType.TYPE)\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface Filters {\n\t\tFilter[] value();\n\t}\n\n\t@Target(ElementType.TYPE)\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Repeatable(Filters.class)\n\tpublic @interface Filter {\n\t\tString value();\n\t};\n\n\t@Filter(\"filter1\")\n\t@Filter(\"filter2\")\n\tpublic interface Filterable {\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tfor (Filter filter : Filterable.class.getAnnotationsByType(Filter.class)) {\n\t\t\tSystem.out.println(filter.value());\n\t\t}\n\t}\n}\n```\n\n我们可以看到，注释Filter被 @Repeatable( Filters.class )注释。Filters 只是一个容器，   \n它持有Filter, 编译器尽力向程序员隐藏它的存在。通过这样的方式，Filterable接口可以被Filter注释两次。\n\n另外，反射的API提供一个新方法getAnnotationsByType() 来返回重复注释的类型   \n(请注意Filterable.class.getAnnotation( Filters.class )将会返回编译器注入的Filters实例）。\n\n程序的输出将会是这样：\n\n```java\n\tfilter1\n\tfilter2\n```\n\n更多详细信息请参考[官方文档](http://docs.oracle.com/javase/tutorial/java/annotations/repeating.html)。\n\n\n## 2.5   更好的类型推断\n\nJava 8在类型推断方面改进了很多，在很多情况下，编译器可以推断参数的类型，从而保持代码的整洁。让我们看看例子：\n\n```java\npackage com.tu.test.java8.newfeature;\npublic class Value<T> {\n    public static<T> T defaultValue() {\n        return null;\n    }\n\n    public T getOrDefault( T value, T defaultValue ) {\n        return ( value != null ) ? value : defaultValue;\n    }\n}\n```\n\n这里是Value< String >的用法  \n\n```java\npackage com.tu.test.java8.newfeature;\npublic class TypeInference {\n    public static void main(String[] args) {\n        final Value<String> value = new Value<>();\n        value.getOrDefault( \"22\", Value.defaultValue() );\n\n    }\n}\n```\n\n参数Value.defaultValue()的类型被编译器推断出来，不需要显式地提供类型。   \n在java 7, 相同的代码不会被编译，需要写成：Value.< String >defaultValue()  \n\n\n## 2.6   注解的扩展\n\nJava 8扩展了注解可以使用的范围，现在我们几乎可以在所有的地方：   \n局部变量、泛型、超类和接口实现、甚至是方法的Exception声明。一些例子如下：\n\n```java\npackage com.tu.test.java8.newfeature;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.util.ArrayList;\nimport java.util.Collection;\n\n/ 注解的扩展 */\npublic class TestAnnotations {\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Target({ ElementType.TYPE_USE, ElementType.TYPE_PARAMETER })\n\tpublic @interface NonEmpty {\n\t}\n\n\tpublic static class Holder<@NonEmpty T> extends @NonEmpty Object {\n\t\tpublic void method() throws @NonEmpty Exception {\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"unused\")\n\tpublic static void main(String[] args) {\n\t\tfinal Holder<String> holder = new @NonEmpty Holder<String>();\n\t\t@NonEmpty\n\t\tCollection<@NonEmpty String> strings = new ArrayList<>();\n\t}\n}\n\n```\n\nJava 8 新增加了两个注解的程序元素类型 `ElementType.TYPE_USE` 和`ElementType.TYPE_PARAMETER` ，   \n这两个新类型描述了可以使用注解的新场合。注解处理API（`Annotation Processing API`）也做了一些细微的改动，来识别这些新添加的注解类型。\n\n\n# 3．Java编译器的新特性\n\n## 3.1 参数名字\n很长时间以来，Java程序员想尽办法把参数名字保存在java字节码里，并且让这些参数名字在运行时可用。   \nJava 8 终于把这个需求加入到了Java语言（使用反射API和Parameter.getName() 方法）和字节码里（使用java编译命令javac的–parameters参数）。\n\n\n```java\npackage com.tu.test.java8.newfeature;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Parameter;\n\npublic class TestParameterNames {\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tMethod method = TestParameterNames.class.getMethod(\"main\", String[].class);\n\t\tfor (final Parameter parameter : method.getParameters()) {\n\t\t\tif (parameter.isNamePresent())//验证参数名是不是可用\n\t\t\t\tSystem.out.println(\"Parameter: \" + parameter.getName());\n\t\t}\n\t}\n}\n```\n\n如果你编译这个class的时候没有添加参数–parameters，运行的时候你会得到这个结果：\n\n\tParameter: arg0\n\n编译的时候添加了–parameters参数的话，运行结果会不一样：\n\n\tParameter: args\n\n对于有经验的Maven使用者，–parameters参数可以添加到maven-compiler-plugin的配置部分：\n\n```xml\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-compiler-plugin</artifactId>\n\t<version>3.1</version>\n\t<configuration>\n\t\t<compilerArgument>-parameters</compilerArgument>\n\t\t<source>1.8</source>\n\t\t<target>1.8</target>\n\t</configuration>\n</plugin>\n```\n\n最新版的Eclipse Kepler SR2 提供了编译设置项，如下图所示：\n\n![ECLIPSE-JAVA-COMPILER](/res/img/blog/2014/10/23/java8_new_feature/ECLIPSE-JAVA-COMPILER.png)  \n\nPicture 1. Configuring Eclipse projects to support new Java 8 compiler –parameters argument.\n\nstore method parameter names(usable via reflection)\n存储通过反射方法参数名称(通过反射可用)\n\n额外的，有一个方便的方法Parameter.isNamePresent() 来验证参数名是不是可用。\n\n# 4．Java  库的新特性\n\nJava 8 新添加了很多类，并且扩展了很多现有的类来更好地支持现代并发、函数式编程、日期\\时间等等。\n\n## 4.1 Optional\n\n著名的[NullPointerException](http://examples.javacodegeeks.com/java-basics/exceptions/java-lang-nullpointerexception-how-to-handle-null-pointer-exception/) 是引起系统失败最常见的原因。   \n很久以前[Google Guava](http://code.google.com/p/guava-libraries/) 项目引入了Optional作为解决空指针异常的一种方式，     \n不赞成代码被null检查的代码污染，期望程序员写整洁的代码。受Google Guava的鼓励，Optional 现在是Java 8库的一部分。\n\nOptional 只是一个容器，它可以保存一些类型的值或者null。它提供很多有用的方法，所以没有理由不显式地检查null。请参照java 8的[文档](http://docs.oracle.com/javase/8/docs/api/java/util/Optional.html)查看详细信息。\n\n让我们看看两个Optional 用法的小例子：一个是允许为空的值，另外一个是不允许为空的值。\n\n```java\n\nOptional< String > fullName = Optional.ofNullable( null );\nSystem.out.println( \"Full Name is set? \" + fullName.isPresent() );        \nSystem.out.println( \"Full Name: \" + fullName.orElseGet( () -> \"[none]\" ) ); \nSystem.out.println( fullName.map( s -> \"Hey \" + s + \"!\" ).orElse( \"Hey Stranger!\" ) );\n\n```\n\n如果Optional实例有非空的值，方法 isPresent() 返回true否则返回false。方法orElseGet提供了回退机制，当Optional的值为空时接受一个方法返回默认值。   \nmap()方法转化Optional当前的值并且返回一个新的Optional实例。orElse方法和orElseGet类似，但是它不接受一个方法，而是接受一个默认值。上面代码运行结果如下：\n\n\tFull Name is set? false\n\tFull Name: [none]\n\tHey Stranger!\n\n让我们大概看看另外一个例子。\n\n```java\n\nOptional< String > firstName = Optional.of( \"Tom\" );\nSystem.out.println( \"First Name is set? \" + firstName.isPresent() );        \nSystem.out.println( \"First Name: \" + firstName.orElseGet( () -> \"[none]\" ) ); \nSystem.out.println( firstName.map( s -> \"Hey \" + s + \"!\" ).orElse( \"Hey Stranger!\" ) );\nSystem.out.println();\n\n```\n\n输出如下：\n\n\tFirst Name is set? true\n\tFirst Name: Tom\n\tHey Tom!\n\n更多详细信息请参考[官方文档](http://docs.oracle.com/javase/8/docs/api/java/util/Optional.html) 。\n\n测试原代码:\n\n```java\npackage com.tu.test.java8.newfeature;\n\nimport java.util.Optional;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\n\npublic class TestOptional {\n\n\tpublic static void main(String[] args) {\n\n\t\tOptional<String> fullName = Optional.ofNullable(null);\n\t\tSystem.out.println(\"Full Name is set? \" + fullName.isPresent());\n\t\tSystem.out.println(\"Full Name: \" + fullName.orElseGet(() -> \"[none]\"));\n\t\tSystem.out.println(fullName.map(s -> \"Hey \" + s + \"!\").orElse(\"Hey Stranger!\"));\n\n\t\tSystem.out.println(\"---------------\");\n\n\t\tOptional<String> firstName = Optional.of(\"Tom\");\n\t\tSystem.out.println(\"First Name is set? \" + firstName.isPresent());\n\t\tSystem.out.println(\"First Name: \" + firstName.orElseGet(() -> \"[none]\"));\n\t\tSystem.out.println(firstName.map(s -> \"Hey \" + s + \"!\").orElse(\"Hey Stranger!\"));\n\t\tSystem.out.println();\n\n\t\t//=====复习lambda=============================firstName.orElseGet(() -> \"[none]\")\n\t\tSupplier<? extends String> other = new Supplier<String>() {\n\t\t\t@Override\n\t\t\tpublic String get() {\n\t\t\t\treturn \"[none]\";\n\t\t\t}\n\t\t};\n\t\tfirstName.orElseGet(other);\n\t\t//=====复习lambda=============================firstName.map(s -> \"Hey \" + s + \"!\").orElse(\"Hey Stranger!\")\n\t\tFunction<String, String> mapper = new Function<String, String>() {\n\t\t\t@Override\n\t\t\tpublic String apply(String t) {\n\t\t\t\treturn \"Hey \" + t + \"!\";\n\t\t\t}\n\t\t};\n\t\tfirstName.map(mapper).orElse(\"Hey Stranger!\");\n\t}\n}\n```\n\n运行结果:\n\n```java\nFull Name is set? false\nFull Name: [none]\nHey Stranger!\n---------------\nFirst Name is set? true\nFirst Name: Tom\nHey Tom!\n```\n\n\n## 4.2 Stream\n\n新增加的Stream API (java.util.stream)引入了在Java里可以工作的函数式编程。\n这是目前为止对java库最大的一次功能添加，希望程序员通过编写有效、整洁和简明的代码，能够大大提高生产率。\n\nStream API让集合处理简化了很多（我们后面会看到不仅限于Java集合类）。让我们从一个简单的类Task开始来看看Stream的用法。\n\n```java\nprivate enum Status {\n\tOPEN, CLOSED\n};\n\nprivate static final class Task {\n\tprivate final Status status;\n\tprivate final Integer points;\n\n\tTask(final Status status, final Integer points) {\n\t\tthis.status = status;\n\t\tthis.points = points;\n\t}\n\n\tpublic Integer getPoints() {\n\t\treturn points;\n\t}\n\n\tpublic Status getStatus() {\n\t\treturn status;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn String.format(\"[%s, %d]\", status, points);\n\t}\n}\n```\n\nTask类有一个分数的概念（或者说是伪复杂度），其次是还有一个值可以为OPEN或CLOSED的状态.让我们引入一个Task的小集合作为演示例子：\n\n```java\n\nfinal Collection< Task > tasks = Arrays.asList(\n    new Task( Status.OPEN, 5 ),\n    new Task( Status.OPEN, 13 ),\n    new Task( Status.CLOSED, 8 ) \n);\n\n```\n\n第一个问题是所有的开放的Task的点数是多少？在java 8 之前，通常的做法是用foreach迭代。但是Java8里头我们会用Stream。Stream是多个元素的序列，支持串行和并行操作。\n\n```java\n\n// Calculate total points of all active tasks using sum()\nfinal long totalPointsOfOpenTasks = tasks\n    .stream()\n    .filter( task -> task.getStatus() == Status.OPEN )\n    .mapToInt( Task::getPoints )\n    .sum();\n         \nSystem.out.println( \"Total points: \" + totalPointsOfOpenTasks );\n```\n\n控制台的输出将会是：\n\n\tTotal points: 18\n\n上面代码执行的流程是这样的，首先Task集合会被转化为Stream表示，然后filter操作会过滤掉所有关闭的Task，接下来使用Task::getPoints 方法取得每个Task实例的点数，mapToInt方法会把Task Stream转换成Integer Stream，最后使用Sum方法将所有的点数加起来得到最终的结果。\n\n在我们看下一个例子之前，我们要记住一些关于Stream的说明。Stream操作被分为中间操作和终点操作。\n\n中间操作返回一个新的Stream。这些中间操作是延迟的，执行一个中间操作比如filter实际上不会真的做过滤操作，而是创建一个新的Stream，当这个新的Stream被遍历的时候，它里头会包含有原来Stream里符合过滤条件的元素。\n\n终点操作比如说forEach或者sum会遍历Stream从而产生最终结果或附带结果。终点操作执行完之后，Stream管道就被消费完了，不再可用。在几乎所有的情况下，终点操作都是即时完成对数据的遍历操作。\n\nStream的另外一个价值是Stream创造性地支持并行处理。让我们看看下面这个例子，这个例子把所有task的点数加起来。\n\n```java\n// Calculate total points of all tasks\nfinal double totalPoints = tasks\n   .stream()\n   .parallel()\n   .map( task -> task.getPoints() ) // or map( Task::getPoints ) \n   .reduce( 0, Integer::sum );\n    \nSystem.out.println( \"Total points (all tasks): \" + totalPoints );\n```\n\n这个例子跟上面那个非常像，除了这个例子里使用了parallel()方法       并且计算最终结果的时候使用了reduce方法。\n\n输出如下：\n\n\tTotal points (all tasks): 26.0\n\n经常会有这个一个需求：我们需要按照某种准则来对集合中的元素进行分组。Stream也可以处理这样的需求，下面是一个例子：\n\n```java\n// Group tasks by their status\nfinal Map< Status, List< Task > > map = tasks\n    .stream()\n    .collect( Collectors.groupingBy( Task::getStatus ) );\nSystem.out.println( map );\n```\n\n控制台的输出如下：\n\n\t{CLOSED=[[CLOSED, 8]], OPEN=[[OPEN, 5], [OPEN, 13]]}\n\n让我们来计算整个集合中每个task分数（或权重）的平均值来结束task的例子。\n\n```java\n\n// Calculate the weight of each tasks (as percent of total points) \nfinal Collection< String > result = tasks\n    .stream()                                        // Stream< String >\n    .mapToInt( Task::getPoints )                     // IntStream\n    .asLongStream()                                  // LongStream\n    .mapToDouble( points -> points / totalPoints )   // DoubleStream\n    .boxed()                                         // Stream< Double >\n    .mapToLong( weigth -> ( long )( weigth * 100 ) ) // LongStream\n    .mapToObj( percentage -> percentage + \"%\" )      // Stream< String> \n    .collect( Collectors.toList() );                 // List< String > \n         \nSystem.out.println( result );\n\n```\n\n控制台输出如下：\n\n\t[19%, 50%, 30%]\n\n最后，就像前面提到的，Stream API不仅仅处理Java集合框架。像从文本文件中逐行读取数据这样典型的I/O操作也很适合用Stream API来处理。下面用一个例子来应证这一点。\n\n```java\nfinal Path path = new File( filename ).toPath();\ntry( Stream< String > lines = Files.lines( path, StandardCharsets.UTF_8 ) ) {\n    lines.onClose( () -> System.out.println(\"Done!\") ).forEach( System.out::println );\n}\n```\n\nStream的方法onClose 返回一个等价的有额外句柄的Stream，当Stream的close（）方法被调用的时候这个句柄会被执行。\n\nStream API、Lambda表达式还有接口默认方法和静态方法支持的方法引用，是Java 8对软件开发的现代范式的响应。\n\n运行原代码:\n\n```java\npackage com.tu.test.java8.newfeature;\n\nimport java.io.File;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class TestStream {\n\tpublic static void main(String[] args) {\n\n\t\tfinal Collection< Task > tasks = Arrays.asList(\n\t\t\t    new Task( Status.OPEN, 5 ),\n\t\t\t    new Task( Status.OPEN, 13 ),\n\t\t\t    new Task( Status.CLOSED, 8 ) \n\t\t\t);\n\n\t\t//所有的开放的Task的点数是多少？在java 8 之前，通常的做法是用foreach迭代。但是Java8里头我们会用Stream。Stream是多个元素的序列，支持串行和并行操作。\n\t\t// Calculate total points of all active tasks using sum()\n\t\tfinal long totalPointsOfOpenTasks = tasks\n\t\t    .stream()\n\t\t    .filter( task -> task.getStatus() == Status.OPEN )\n\t\t    .mapToInt( Task::getPoints )\n\t\t    .sum();\n\t\t         \n\t\tSystem.out.println( \"Total points: \" + totalPointsOfOpenTasks );\n\n\t\tSystem.out.println(\"=========================================\");\n\t\t// Calculate total points of all tasks\n\t\tfinal double totalPoints = tasks\n\t\t   .stream()\n\t\t   .parallel()\n\t\t   .map( task -> task.getPoints() ) // or map( Task::getPoints ) \n\t\t   .reduce( 0, Integer::sum );\n\t\t    \n\t\tSystem.out.println( \"Total points (all tasks): \" + totalPoints );\n\t\t\n\t\tSystem.out.println(\"=========================================\");\n\t\t// Group tasks by their status\n\t\tfinal Map<Status, List<Task>> map = tasks\n\t\t\t\t.stream()\n\t\t\t\t.collect(Collectors.groupingBy(Task::getStatus));\n\t\tSystem.out.println(map);\n\t\t\n\t\tSystem.out.println(\"=========================================\");\n\t\t// Calculate the weight of each tasks (as percent of total points) \n\t\tfinal Collection< String > result = tasks\n\t\t    .stream()                                        // Stream< String >\n\t\t    .mapToInt( Task::getPoints )                     // IntStream\n\t\t    .asLongStream()                                  // LongStream\n\t\t    .mapToDouble( points -> points / totalPoints )   // DoubleStream\n\t\t    .boxed()                                         // Stream< Double >\n\t\t    .mapToLong( weigth -> ( long )( weigth * 100 ) ) // LongStream\n\t\t    .mapToObj( percentage -> percentage + \"%\" )      // Stream< String> \n\t\t    .collect( Collectors.toList() );                 // List< String > \n\t\t         \n\t\tSystem.out.println( result );\n\n\t\tSystem.out.println(\"=========================================\");\n\t\tStream<String> lines;\n\t\ttry {\n\t\t\tfinal Path path = new File(\"./text/Test.txt\").toPath();\n\t\t\tlines = Files.lines(path, StandardCharsets.UTF_8);\n\t\t\tlines.onClose(() -> System.out.println(\"Done!\")).forEach(System.out::println);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tprivate enum Status {\n\t\tOPEN, CLOSED\n\t};\n\n\tprivate static final class Task {\n\t\tprivate final Status status;\n\t\tprivate final Integer points;\n\n\t\tTask(final Status status, final Integer points) {\n\t\t\tthis.status = status;\n\t\t\tthis.points = points;\n\t\t}\n\n\t\tpublic Integer getPoints() {\n\t\t\treturn points;\n\t\t}\n\n\t\tpublic Status getStatus() {\n\t\t\treturn status;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn String.format(\"[%s, %d]\", status, points);\n\t\t}\n\t}\n}\n```\n\n运行结果:\n\n```java\n\nTotal points: 18\n=========================================\nTotal points (all tasks): 26.0\n=========================================\n{OPEN=[[OPEN, 5], [OPEN, 13]], CLOSED=[[CLOSED, 8]]}\n=========================================\n[19%, 50%, 30%]\n=========================================\nhello\nhellohello\nhellohellohello\n\n```\n\n再来点案例:\n\n```java\n\n\tList<String> stringCollection = Arrays.asList(\"ddd2\", \"aaa2\", \"bbb1\", \"aaa1\", \"bbb3\", \"ccc\", \"bbb2\", \"ddd1\");\n\n\t// Filter 过滤\n\tstringCollection.stream().filter((s) -> s.startsWith(\"a\")).forEach(System.out::println);\n\tSystem.out.println(\"=========1==========\");\n\t// Sort 排序\n\tstringCollection.stream().sorted().filter((s) -> s.startsWith(\"a\")).forEach(System.out::println);\n\tSystem.out.println(\"=========2==========\");\n\t// Map 映射\n\tstringCollection.stream().map(String::toUpperCase).sorted((a, b) -> b.compareTo(a))\n\t\t\t.forEach(System.out::println);\n\tSystem.out.println(\"=========3==========\");\n\t// Match 匹配\n\tSystem.out.println(stringCollection.stream().anyMatch((s) -> s.startsWith(\"a\")));\n\tSystem.out.println(stringCollection.stream().allMatch((s) -> s.startsWith(\"a\")));\n\tSystem.out.println(stringCollection.stream().noneMatch((s) -> s.startsWith(\"a\")));\n\tSystem.out.println(\"=========4==========\");\n\t// Count 计数 (最终操作)\n\tSystem.out.println(stringCollection.stream().count());\n\tSystem.out.println(stringCollection.stream().filter((a) -> a.startsWith(\"a\")).count());\n\tSystem.out.println(\"=========5==========\");\n\t// Reduce 规约 (最终操作)\n\tstringCollection.stream().sorted().reduce((s1, s2) -> s1 + \"#\" + s2).ifPresent(System.out::println);\n\tSystem.out.println(\"========6===========\");\n\t\n\t// 并行Streams\n\tint max = 1000000;\n\tList<String> values = new ArrayList<>(max);\n\tfor (int i = 0; i < max; i++) {\n\t\tvalues.add(UUID.randomUUID().toString());\n\t}\n\t\n\tlong t0 = System.nanoTime();\n\t// 串行排序 sequential sort took:1226 ms\n\tlong count = values.stream().sorted().count();\n\tSystem.out.println(count);\n\tlong t1 = System.nanoTime();\n\tlong millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);\n\tSystem.out.println(String.format(\"sequential sort took:%d ms\", millis));\n\n\tlong t2 = System.nanoTime();\n\t// 并行排序 sequential sort took:951 ms\n\tlong count1 = values.parallelStream().sorted().count();\n\tSystem.out.println(count1);\n\tlong t3 = System.nanoTime();\n\tlong millis1 = TimeUnit.NANOSECONDS.toMillis(t3 - t2);\n\tSystem.out.println(String.format(\"parallel sort took:%d ms\", millis1));\n\n```\n\n案例运行结果:\n\n```java\n\n\taaa2\n\taaa1\n\t=========1==========\n\taaa1\n\taaa2\n\t=========2==========\n\tDDD2\n\tDDD1\n\tCCC\n\tBBB3\n\tBBB2\n\tBBB1\n\tAAA2\n\tAAA1\n\t=========3==========\n\ttrue\n\tfalse\n\tfalse\n\t=========4==========\n\t8\n\t2\n\t=========5==========\n\taaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2\n\t========6===========\n\t1000000\n\tsequential sort took:1258 ms\n\t1000000\n\tparallel sort took:1061 ms\n\n```\n\n\n\n## 4.3日期时间API（JSR310)\n\nJava 8引入了新的日期时间API（JSR 310）改进了日期时间的管理。日期和时间管理一直是Java开发人员最痛苦的问题。java.util.Date和后来的java.util.Calendar一点也没有改变这个情况（甚至让人们更加迷茫）。\n\n因为上面这些原因，产生了[Joda-Time](http://www.joda.org/joda-time/) ，可以替换Java的日期时间API。Joda-Time深刻影响了 Java 8新的日期时间API，Java 8吸收了Joda-Time 的精华。新的java.time包包含了所有关于日期、时间、日期时间、时区、Instant（跟日期类似但精确到纳秒）、duration（持续时间）和时钟操作的类。设计这些API的时候很认真地考虑了这些类的不变性（从java.util.Calendar吸取的痛苦教训）。如果需要修改时间对象，会返回一个新的实例。\n\n让我们看看一些关键的类和用法示例。第一个类是Clock，Clock使用时区来访问当前的instant, date和time。Clock类可以替换 System.currentTimeMillis() 和 TimeZone.getDefault().\n\n```java\n\t// Get the system clock as UTC offset\n\tfinal Clock clock = Clock.systemUTC();\n\tSystem.out.println( clock.instant() );\n\tSystem.out.println( clock.millis() );\n```\n\n控制台输出如下：\n\n\t2015-06-25T07:10:58.746Z\n\t1435216258848\n\n\n其他类我们看看LocalTime和LocalDate。LocalDate只保存有ISO-8601日期系统的日期部分，有时区信息，相应地，LocalTime只保存ISO-8601日期系统的时间部分，没有时区信息。LocalDate和LocalTime都可以从Clock对象创建。\n\n```java\n\t// Get the local date and local time\n\tfinal LocalDate date = LocalDate.now();\n\tfinal LocalDate dateFromClock = LocalDate.now( clock );\n\n\tSystem.out.println( date );\n\tSystem.out.println( dateFromClock );\n\n\tSystem.out.println(\"================\");\n\t// Get the local date and local time\n\tfinal LocalTime time = LocalTime.now();\n\tfinal LocalTime timeFromClock = LocalTime.now( clock );\n\n\tSystem.out.println( time );\n\tSystem.out.println( timeFromClock );\n```\n\n控制台输出如下：\n\n\t2015-06-25\n\t2015-06-25\n\t15:12:07.912\n\t07:12:07.912\n\nLocalDateTime类合并了LocalDate和LocalTime，它保存有ISO-8601日期系统的日期和时间，但是没有时区信息。让我们看一个简单的例子。\n\n```java\n// Get the local date/time\nfinal LocalDateTime datetime = LocalDateTime.now();\nfinal LocalDateTime datetimeFromClock = LocalDateTime.now( clock );\n\nSystem.out.println( datetime );\nSystem.out.println( datetimeFromClock );\n```\n\n控制台输出如下：\n\n\t2015-06-25T15:14:12.139\n\t2015-06-25T07:14:12.139\n\n如果您需要一个类持有日期时间和时区信息，可以使用ZonedDateTime，它保存有ISO-8601日期系统的日期和时间，而且有时区信息。让我们看一些例子：\n\n```java\n// Get the zoned date/time\nfinal ZonedDateTime zonedDatetime = ZonedDateTime.now();\nfinal ZonedDateTime zonedDatetimeFromClock = ZonedDateTime.now( clock );\nfinal ZonedDateTime zonedDatetimeFromZone = ZonedDateTime.now( ZoneId.of( \"America/Los_Angeles\" ) );\n\nSystem.out.println( zonedDatetime );\nSystem.out.println( zonedDatetimeFromClock );\nSystem.out.println( zonedDatetimeFromZone );\n```\n\n控制台输出如下：\n\n\t2015-06-25T15:14:51.607+08:00[Asia/Shanghai]\n\t2015-06-25T07:14:51.607Z\n\t2015-06-25T00:14:51.610-07:00[America/Los_Angeles]\n\n最后让我们看看Duration类，Duration持有的时间精确到纳秒。它让我们很容易计算两个日期中间的差异。让我们来看一下：\n\n```java\n\n// Get duration between two dates\nfinal LocalDateTime from = LocalDateTime.of( 2015, Month.JUNE, 25, 0, 0, 0 );\nfinal LocalDateTime to = LocalDateTime.of( 2016, Month.JUNE, 25, 23, 59, 59 );\n\nfinal Duration duration = Duration.between( from, to );\nSystem.out.println( \"Duration in days: \" + duration.toDays() );\nSystem.out.println( \"Duration in hours: \" + duration.toHours() );\n```\n\n上面的例子计算了两个日期（2015年5月25日和2016年5月25日）之间的持续时间（基于天数和小时）输出如下：\n\n\tDuration in days: 366\n\tDuration in hours: 8807\n\n对于Java 8的新日期时间的总体印象还是比较积极的。一部分是因为有经历实战的Joda-Time的基础，\n还有一部分是因为日期时间终于被认真对待而且听取了开发人员的声音。关于更多的详细信息，请参考[官方文档](http://docs.oracle.com/javase/tutorial/datetime/index.html)。\n\n\n## 4.4   Nashorn javascript引擎\n\nJava 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用。Nashorn javascript引擎只是javax.script.ScriptEngine另一个实现，而且规则也一样，允许Java和JavaScript互相操作。这里有个小例子：\n\n```java\n\nScriptEngineManager manager = new ScriptEngineManager();\nScriptEngine engine = manager.getEngineByName( \"JavaScript\" );\n\nSystem.out.println( engine.getClass().getName() );\nSystem.out.println( \"Result:\" + engine.eval( \"function f() { return 1; }; f() + 1;\" ) );\n\n```\n\n输出如下：\n\n\tjdk.nashorn.api.scripting.NashornScriptEngine\n\tResult: 2\n\n## 4.5   Base64\n\n对Base64的支持最终成了Java 8标准库的一部分，非常简单易用：\n\n```java\npackage com.tu.test.java8.newfeature;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.Base64;\n\npublic class TestBase64 {\n\tpublic static void main(String[] args) {\n\t\tfinal String text = \"Base64 finally in Java 8!\";\n\n\t\tfinal String encoded = Base64.getEncoder().encodeToString(text.getBytes(StandardCharsets.UTF_8));\n\t\tSystem.out.println(encoded);\n\n\t\tfinal String decoded = new String(Base64.getDecoder().decode(encoded), StandardCharsets.UTF_8);\n\t\tSystem.out.println(decoded);\n\t}\n}\n\n```\n\n控制台输出的编码和解码的字符串\n\n\tQmFzZTY0IGZpbmFsbHkgaW4gSmF2YSA4IQ==\n\tBase64 finally in Java 8!\n\n新的Base64API也支持URL和MINE的编码解码。\n\n(Base64.getUrlEncoder() / Base64.getUrlDecoder(), Base64.getMimeEncoder() / Base64.getMimeDecoder()).\n\n\n## 4.6   并行数组\n\nJava 8新增加了很多方法支持并行的数组处理。最重要的大概是parallelSort()这个方法显著地使排序在多核计算机上速度加快。下面的小例子演示了这个新的方法（parallelXXX）的行为。\n\n```java\npackage com.tu.test.java8.newfeature;\n\nimport java.util.Arrays;\nimport java.util.concurrent.ThreadLocalRandom;\n\n/ 并行数组 */\npublic class TestParallelArray {\n\n\tpublic static void main(String[] args) {\n\t\tlong[] arrayOfLong = new long[20000];\n\t\tArrays.parallelSetAll(arrayOfLong, index -> ThreadLocalRandom.current().nextInt(1000000));\n\t\tArrays.stream(arrayOfLong).limit(10).forEach(i -> System.out.print(i + \" \"));\n\t\tSystem.out.println();\n\n\t\tArrays.parallelSort(arrayOfLong);\n\t\tArrays.stream(arrayOfLong).limit(10).forEach(i -> System.out.print(i + \" \"));\n\t\tSystem.out.println();\n\t}\n}\n\n```\n\n这一小段代码使用parallelSetAll() t方法填充这个长度是2000的数组，然后使用parallelSort() 排序。   \n这个程序输出了排序前和排序后的10个数字来验证数组真的已经被排序了。示例可能的输出如下（请注意这些数字是随机产生的）\n\n\t650193 416424 740906 224816 806179 81842 605508 85078 206531 792115 \n\t28 57 91 98 184 274 341 342 442 469 \n\n\n## 4.7   并发\n\n在新增Stream机制与lambda的基础之上，在java.util.concurrent.ConcurrentHashMap中加入了一些新方法来支持聚集操作。   \n同时也在java.util.concurrent.ForkJoinPool类中加入了一些新方法来支持共有资源池（common pool）。\n\n新增的java.util.concurrent.locks.StampedLock类提供一直基于容量的锁，   \n这种锁有三个模型来控制读写操作（它被认为是不太有名的java.util.concurrent.locks.ReadWriteLock类的替代者）。\n\n在java.util.concurrent.atomic包中还增加了下面这些类：\n\n\tDoubleAccumulator\n\tDoubleAdder\n\tLongAccumulator\n\tLongAdder\n\n\n# 5.  新的工具\n\nJava 8 提供了一些新的命令行工具，在这节里我们将会介绍它们中最有趣的部分。\n\n## 5.1  Nashorn引擎：jjs\n\njjs是个基于Nashorn引擎的命令行工具。它接受一些JavaScript源代码为参数，并且执行这些源代码。例如，我们创建一个具有如下内容的func.js文件：\n\n```js\nfunction f() {\n\treturn 1;\n};\nprint( f() + 1 );\n```\n\n我们可以把这个文件作为参数传递给jjs使得这个文件可以在命令行中执行\n\n```js\n<span style=\"font-size: 13px;\">jjs func.js</span>\n```\n\n输出结果如下\n\n\t2\n\n更多的详细信息请参考[官方文档](http://docs.oracle.com/javase/8/docs/technotes/tools/unix/jjs.html)。\n\n\n## 5.2 类依赖分析工具：jdeps\n\nJdeps是一个功能强大的命令行工具，它可以帮我们显示出包层级或者类层级java类文件的依赖关系。它接受class文件、目录、jar文件作为输入，默认情况下，jdeps会输出到控制台。\n\n作为例子，让我们看看现在很流行的Spring框架的库的依赖关系报告。为了让报告短一些，我们只分析一个jar: org.springframework.core-3.0.5.RELEASE.jar.\n\njdeps org.springframework.core-3.0.5.RELEASE.jar 这个命令输出内容很多，我们只看其中的一部分，这些依赖关系根绝包来分组，如果依赖关系在classpath里找不到，就会显示not found.\n\n```java\norg.springframework.core-3.0.5.RELEASE.jar -> C:\\Program Files\\Java\\jdk1.8.0\\jre\\lib\\rt.jar\n   org.springframework.core (org.springframework.core-3.0.5.RELEASE.jar)\n      -> java.io\n      -> java.lang\n      -> java.lang.annotation\n      -> java.lang.ref\n      -> java.lang.reflect\n      -> java.util\n      -> java.util.concurrent\n      -> org.apache.commons.logging                         not found\n      -> org.springframework.asm                            not found\n      -> org.springframework.asm.commons                    not found\n   org.springframework.core.annotation (org.springframework.core-3.0.5.RELEASE.jar)\n      -> java.lang\n      -> java.lang.annotation\n      -> java.lang.reflect\n      -> java.util\n```\n\n更多的详细信息请参考[官方文档](http://docs.oracle.com/javase/8/docs/technotes/tools/unix/jdeps.html)。\n\n# 6. JVM的新特性\n\nJVM内存永久区已经被metaspace替换（JEP 122）。JVM参数 -XX:PermSize 和 –XX:MaxPermSize被XX:MetaSpaceSize 和 -XX:MaxMetaspaceSize代替。\n\n\n# 7. 资源\n\n下面一些文章从不同层面上深度讨论了Java 8的特性：\n\n[What’s New in JDK 8]( http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html)   \n[The Java Tutorials](http://docs.oracle.com/javase/tutorial/)   \n[WildFly 8, JDK 8, NetBeans 8, Java EE 7]( http://blog.arungupta.me/2014/03/wildfly8-jdk8-netbeans8-javaee7-excellent-combo-enterprise-java/)   \n[Java 8 Tutorial]( http://winterbe.com/posts/2014/03/16/java-8-tutorial/)   \n[JDK 8 Command-line Static Dependency Checker]( http://marxsoftware.blogspot.ca/2014/03/jdeps.html)   \n[The Illuminating Javadoc of JDK 8]( http://marxsoftware.blogspot.ca/2014/03/illuminating-javadoc-of-jdk-8.html)   \n[The Dark Side of Java 8](http://blog.jooq.org/2014/04/04/java-8-friday-the-dark-side-of-java-8/)   \n[Installing Java™ 8 Support in Eclipse Kepler SR2]( http://www.eclipse.org/downloads/java8/)   \n[Java 8](http://www.baeldung.com/java8)   \n[Oracle Nashorn. A Next-Generation JavaScript Engine for the JVM]( http://www.oracle.com/technetwork/articles/java/jf14-nashorn-2126515.html)  \n[Java 8 特性 – 终极手册](http://ifeve.com/java-8-features-tutorial/)    \n[JAVA8 十大新特性详解](http://www.jb51.net/article/48304.htm)   \n\n\n# Demo下载\n\n本文案例Demo[下载](/res/file/blog/2014/10/23/java8_new_feature/Java8NewFeature.rar)\n\n","source":"_posts/2014-10-23-java8_new_feature.md","raw":"---\ntitle : \"Java8新特性\"\ncategory : Java\ndate : 2014-10-23\ntags : [java,lambda,stream , java8, 接口的默认方法和静态方法 ]\n---\n\n\n<style>\nh3 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nh6 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\n</style>\n\n目录:   \n\n* 1．简介\n* 2．Java的新特性\n\t*  2.1 Lambda表达式和函数式接口\n\t*  2.2 接口的默认方法和静态方法\n\t*  2.3 方法引用\n\t*  2.4 重复注释\n\t*  2.5 更好的类型推断\n\t*  2.6 注解的扩展\n* 3．Java编译器的新特性\n\t*  3.1 参数名字\n* 4．Java 库的新特性\n\t*  4.1 Optional\n\t*  4.2 Stream\n\t*  4.3日期时间API（JSR310)\n\t*  4.4 Nashorn javascript引擎\n\t*  4.5 Base64\n\t*  4.6 并行数组\n\t*  4.7 并发\n* 5. 新的工具\n\t*  5.1 Nashorn引擎：jjs\n\t*  5.2 类依赖分析工具：jdeps\n* 6. JVM的新特性\n* 7. 资源\n\n\n<!-- more -->\n\n# 1．简介\n\n毫无疑问，Java 8是自Java  5（2004年）发布以来Java语言最大的一次版本升级，Java 8带来了很多的新特性，比如编译器、类库、开发工具和JVM（Java虚拟机）。在这篇教程中我们将会学习这些新特性，并通过真实例子演示说明它们适用的场景。\n\n本教程由下面几部分组成，它们分别涉及到Java平台某一特定方面的内容：\n\n语言  \n编译器  \n类库  \n开发工具  \n运行时（Java虚拟机）  \n\n\n# 2．Java的新特性\n\n总体来说，Java 8是一个大的版本升级。有人可能会说，Java 8的新特性非常令人期待，但是也要花费大量的时间去学习。这一节我们会讲到这些新特性。\n\n## 2.1 Lambda表达式和函数式接口\n\nLambda表达式（也叫做闭包）是Java 8中最大的也是期待已久的变化。它允许我们将一个函数当作方法的参数（传递函数），  \n或者说把代码当作数据，这是每个函数式编程者熟悉的概念。很多基于JVM平台的语言一开始就支持Lambda表达式，但是Java程序员没有选择，只能使用匿名内部类来替代Lambda表达式。\n\nLambda表达式的设计被讨论了很久，而且花费了很多的功夫来交流。不过最后取得了一个折中的办法，得到了一个新的简明并且紧凑的Lambda表达式结构。最简单的Lambda表达式可以用逗号分隔的参数列表、->符号和功能语句块来表示。示例如下：\n\n```java\nArrays.asList( \"a\", \"b\", \"d\" ).forEach( e -> System.out.println( e ) );\n```\n\n请注意到编译器会根据上下文来推测参数的类型，或者你也可以显示地指定参数类型，只需要将类型包在括号里。举个例子：   \n\n```java\nArrays.asList( \"a\", \"b\", \"d\" ).forEach( ( String e ) -> System.out.println( e ) );\n```\n\n如果Lambda的功能语句块太复杂，我们可以用大括号包起来，跟普通的Java方法一样，如下：  \n\n```java\nString separator = \",\";\nArrays.asList(\"a\", \"b\", \"d\").forEach((String e) -> {\n\tSystem.out.print(e + separator2);\n\tSystem.out.print(e + separator2);\n});\n```\n\nLambda表达式可能会引用类的成员或者局部变量（会被隐式地转变成final类型），下面两种写法的效果是一样的：   \n\n```java\nString separator = \",\";\nArrays.asList( \"a\", \"b\", \"d\" ).forEach(\n    ( String e ) -> System.out.print( e + separator ) );\n```\n\n和\n\n```java\nfinal String separator = \",\";\nArrays.asList( \"a\", \"b\", \"d\" ).forEach(\n    ( String e ) -> System.out.print( e + separator ) );\n```\n\nLambda表达式可能会有返回值，编译器会根据上下文推断返回值的类型。如果lambda的语句块只有一行，不需要return关键字。下面两个写法是等价的：  \n\n```java\nArrays.asList( \"a\", \"b\", \"d\" ).sort( ( e1, e2 ) -> e1.compareTo( e2 ) );\n```\n和\n\n```java\nArrays.asList( \"a\", \"b\", \"d\" ).sort( ( e1, e2 ) -> {\n    int result = e1.compareTo( e2 );\n    return result;\n} );\n```\n\n语言的设计者们思考了很多如何让现有的功能和lambda表达式友好兼容。于是就有了函数接口这个概念。函数接口是一种只有一个方法的接口，像这样地，函数接口可以隐式地转换成lambda表达式。\n\njava.lang.Runnable 和java.util.concurrent.Callable是函数接口两个最好的例子。   \n但是在实践中，函数接口是非常脆弱的，只要有人在接口里添加多一个方法，那么这个接口就不是函数接口了，  \n就会导致编译失败。Java 8提供了一个特殊的注解 @FunctionalInterface 来克服上面提到的脆弱性并且显示   \n地表明函数接口的目的（java里所有现存的接口都已经加上了 @FunctionalInterface）。让我们看看一个简单的函数接口定义：   \n\n```java\n@FunctionalInterface\npublic interface Functional {\n    void method();\n}\n```\n\n我们要记住默认的方法和静态方法（下一节会具体解释）不会违反函数接口的约定，例子如下：  \n\n```java\n@FunctionalInterface\npublic interface FunctionalDefaultMethods {\n    void method();\n    default void defaultMethod() {\n    }\n}\n```\n\n支持Lambda是Java 8最大的卖点，他有巨大的潜力吸引越来越多的开发人员转到这个开发平台来，并且在纯Java里提供最新的函数式编程的概念。对于更多的细节，请参考[官方文档](http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html)。\n\n\n测试原代码:\n\n```java\n\npackage com.tu.test.java8.newfeature;\n\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.function.Consumer;\n\npublic class TestLambda {\n\n\tpublic static void main(String[] args) {\n\n\t\t// ======无返回值的函数接口=============================\n\t\tSystem.out.println(\"==============1================\");\n\t\t// 匿名内部类实现Runnable------>\n\t\tnew Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tSystem.out.println(\"匿名内部类实现Runnable\");\n\t\t\t}\n\t\t}.run();\n\n\t\t// 使用Lambda实现------>\n\t\tSystem.out.println(\"==============2================\");\n\t\tint i = 0;\n\t\tRunnable r = () -> {// ()表示方法不需要参数.\n\t\t\tSystem.out.println(\"使用Lambda实现Runnable\" + i);\n\t\t\t// 可直接使用外部变量,但不能进行修改\n\t\t};\n\t\tr.run();\n\n\t\t// 另外一种Lambda实现简写------>\n\t\tSystem.out.println(\"==============3================\");\n\t\tRunnable r1 = () -> System.out.println(\"hello lambda!\");\n\t\tr1.run();\n\n\t\t// =======自定义函数接口============================\n\t\t// 匿名内部类自定义接口------>\n\t\tSystem.out.println(\"==============4================\");\n\t\tnew Action() {\n\t\t\t@Override\n\t\t\tpublic void execute(String content) {\n\t\t\t\tSystem.out.println(content);\n\t\t\t}\n\t\t}.execute(\"jdk1.8之前的匿名内部类实现方式\");\n\n\t\t// lambda实现------>\n\t\tSystem.out.println(\"==============5================\");\n\t\tAction a = (String content) -> {\n\t\t\tSystem.out.println(content);\n\t\t};\n\t\ta.execute(\"jdk1.8的lambda实现方式\");\n\n\t\t// 还可以更简洁，这个表达式可以被替换成对一个方法的引用，\n\t\t// 因为它只是单个方法，而且它们的参数是相同的------>\n\t\tSystem.out.println(\"==============6================\");\n\t\tAction a1 = System.out::println;\n\t\ta1.execute(\"jdk1.8的lambda实现方式_更简洁.\");\n\n\t\t// 然而，如果参数上有任何其它形式的变化，我们就不能直接引用方法，\n\t\t// 必须写全lambda表达式------>\n\t\tSystem.out.println(\"==============7================\");\n\t\tAction a3 = ((String s) -> System.out.println(\"*\" + s + \"*\"));\n\t\ta3.execute(\"jdk1.8的lambda实现方式_参数上有其它形式的变化.\");\n\n\t\t// ======有返回值的函数接口=============================\n\n\t\t// 匿名内部类自定义接口------>\n\t\tSystem.out.println(\"==============8================\");\n\t\tSystem.out.println(new Comparator<Integer>() {\n\t\t\t@Override\n\t\t\tpublic int compare(Integer o1, Integer o2) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}.compare(1, 2));\n\n\t\t// lambda实现 ------>\n\t\tSystem.out.println(\"==============9================\");\n\t\tComparator<Integer> cmp = (x, y) -> {\n\t\t\treturn (x < y) ? -1 : ((x > y) ? 1 : 0);\n\t\t};\n\n\t\t// 从中可以看出，单行的lambda表达式似乎是隐含了一个return语句。------>\n\t\tComparator<Integer> cmp1 = (x, y) -> (x < y) ? -1 : ((x > y) ? 1 : 0);\n\n\t\tSystem.out.println(\"TestLambda.main().cmp.compare():\" + cmp.compare(0, 1));\n\t\tSystem.out.println(\"TestLambda.main().cmp1.compare():\" + cmp1.compare(1, 1));\n\n\t\t// =====================================更多简洁写法\n\n\t\t\n\t\tSystem.out.println(\"==============10================\");\n\t\tList<String> list = Arrays.asList(\"a\", \"b\", \"c\");\n\t\tfor (String s : list) {\n\t\t\tnew Consumer<String>() {\n\t\t\t\t@Override\n\t\t\t\tpublic void accept(String t) {\n\t\t\t\t\tSystem.out.println(t);\n\t\t\t\t}\n\t\t\t}.accept(s);\n\t\t}\n\n\t\t// 最简单的Lambda表达式可以用逗号分隔的参数列表、->符号和功能语句块来表示。示例如下：\n\t\tSystem.out.println(\"==============11================\");\n\t\tArrays.asList(\"a\", \"b\", \"d\").forEach(e -> System.out.println(e));\n\n\t\t// 请注意到编译器会根据上下文来推测参数的类型，或者你也可以显示地指定参数类型，\n\t\t// 只需要将类型包在括号里。举个例子：\n\t\tSystem.out.println(\"==============12================\");\n\t\tArrays.asList(\"a\", \"b\", \"d\").forEach((String e) -> System.out.println(e));\n\n\t\t// Lambda表达式可能会引用类的成员或者局部变量（会被隐式地转变成final类型），\n\t\t// 下面两种写法的效果是一样的：\n\t\tSystem.out.println(\"==============13================\");\n\t\tString separator = \",\";\n\t\tArrays.asList(\"a\", \"b\", \"d\").forEach((String e) -> System.out.print(e + separator));\n\t\t\n\t\tSystem.out.println(\"==============14================\");\n\t\tfinal String separator1 = \",\";\n\t\tArrays.asList(\"a\", \"b\", \"d\").forEach((String e) -> System.out.print(e + separator1));\n\n\t\t// 如果Lambda的功能语句块太复杂，我们可以用大括号包起来，跟普通的Java方法一样，如下：\n\t\tSystem.out.println(\"==============15================\");\n\t\tString separator2 = \",\";\n\t\tArrays.asList(\"a\", \"b\", \"d\").forEach((String e) -> {\n\t\t\tSystem.out.print(e + separator2);\n\t\t\tSystem.out.print(e + separator2);\n\t\t});\n\n\t\t// Lambda表达式可能会有返回值，编译器会根据上下文推断返回值的类型。\n\t\t// 如果lambda的语句块只有一行，不需要return关键字。下面两个写法是等价的：\n\t\tSystem.out.println(\"==============16================\");\n\t\tArrays.asList(\"a\", \"b\", \"d\").sort((e1, e2) -> e1.compareTo(e2));\n\t\t\n\t\tArrays.asList(\"a\", \"b\", \"d\").sort((e1, e2) -> {\n\t\t\tint result = e1.compareTo(e2);\n\t\t\treturn result;\n\t\t});\n\n\t}// main end\n\n\t/\n\t * 自定义函数接口\n\t * 注解 @FunctionalInterface 使用这种方式标记的都可以使用Lambda表式,\n\t * 它还被javac使用来验证这个接口是否真是一个函数式接口，是否至少有一个抽象方法在里面。\n\t * \n\t * 在Java里，lambda表达式是“SAM”(Single Abstract Method)——\n\t * 一个含有一个抽象方法的接口(是的，现在接口里可以含有一个非抽象的方法，defender守卫方法)。\n\t */\n\t@FunctionalInterface\n\tstatic interface Action {\n\t\tvoid execute(String content);\n\n\t\tdefault void cancel(String c) {\n\t\t}\n\t}\n}//class end\n\n```\n\n运行结果:\n\n```java\n==============1================\n匿名内部类实现Runnable\n==============2================\n使用Lambda实现Runnable0\n==============3================\nhello lambda!\n==============4================\njdk1.8之前的匿名内部类实现方式\n==============5================\njdk1.8的lambda实现方式\n==============6================\njdk1.8的lambda实现方式_更简洁.\n==============7================\n*jdk1.8的lambda实现方式_参数上有其它形式的变化.*\n==============8================\n0\n==============9================\nTestLambda.main().cmp.compare():-1\nTestLambda.main().cmp1.compare():0\n==============10================\na\nb\nc\n==============11================\na\nb\nd\n==============12================\na\nb\nd\n==============13================\na,b,d,==============14================\na,b,d,==============15================\na,a,b,b,d,d,==============16================\n\n```\n\n//英文原文：[Java 8: The First Taste of Lambdas](http://zeroturnaround.com/rebellabs/java-8-the-first-taste-of-lambdas/)  \n//译文链接：[Java 8: The First Taste of Lambdas (译)](http://www.aqee.net/java-8-the-first-taste-of-lambdas/)   \n//官方文档：[Java 8: Lambda expressions](http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html)    \n\n\n\n## 2.2 接口的默认方法和静态方法\n\nJava 8增加了两个新的概念在接口声明的时候：默认和静态方法。默认方法和 Trait 有些类似，但是目标不一样。   \n默认方法允许我们在接口里添加新的方法，而不会破坏实现这个接口的已有类的兼容性，也就是说不会强迫实现接口的类实现默认方法。   \n\n默认方法和抽象方法的区别是抽象方法必须要被实现，默认方法不是。作为替代方式，接口可以提供一个默认的方法实现，   \n所有这个接口的实现类都会通过继承得倒这个方法（如果有需要也可以重写这个方法），让我们来看看下面的例子：\n\n```java\nprivate interface Defaulable {\n    // Interfaces now allow default methods, the implementer may or\n    // may not implement (override) them.\n    default String notRequired() {\n        return \"Default implementation\";\n    }\n}\n \nprivate static class DefaultableImpl implements Defaulable {\n}\n \nprivate static class OverridableImpl implements Defaulable {\n    @Override\n    public String notRequired() {\n        return \"Overridden implementation\";\n    }\n}\n```\n\n接口 Defaulable 使用 default 关键字声明了一个默认方法 notRequired ()，类 DefaultableImpl 实现了 Defaulable 接口，   \n没有对默认方法做任何修改。另外一个类OverridableImpl重写类默认实现，提供了自己的实现方法。\n\nJava 8 的另外一个有意思的新特性是接口里可以声明静态方法，并且可以实现。例子如下：\n\n```java\nprivate interface DefaulableFactory {\n    // Interfaces now allow static methods\n    static Defaulable create( Supplier< Defaulable > supplier ) {\n        return supplier.get();\n    }\n}\n```\n\n下面是把接口的静态方法和默认方法放在一起的示例（::new 是构造方法引用，后面会有详细描述）：  \n\n```java\npublic static void main( String[] args ) {\n    Defaulable defaulable = DefaulableFactory.create( DefaultableImpl::new );\n    System.out.println( defaulable.notRequired() );\n \n    defaulable = DefaulableFactory.create( OverridableImpl::new );\n    System.out.println( defaulable.notRequired() );\n}\n```\n\n控制台的输出如下：\n\n\tDefault implementation\n\tOverridden implementation\n\nJVM平台的接口的默认方法实现是很高效的，并且方法调用的字节码指令支持默认方法。  \n默认方法使已经存在的接口可以修改而不会影响编译的过程。  \njava.util.Collection中添加的额外方法就是最好的例子：stream(), parallelStream(), forEach(), removeIf()\n\n虽然默认方法很强大，但是使用之前一定要仔细考虑是不是真的需要使用默认方法，因为在层级很复杂的情况下很容易引起模糊不清甚至变异错误。更多的详细信息请参考[官方文档](http://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html)。\n\n测试原代码:  \n\n```java\npackage com.tu.test.java8.newfeature;\nimport java.util.function.Supplier;\n\npublic class TestInterfaceDefaultAndStaticMethod {\n\n\tpublic static void main( String[] args ) {\n\t\t\n\t\t//::new 是构造方法引用\n\t    Defaulable defaulable = DefaulableFactory.create( DefaultableImpl::new );\n\t    System.out.println( defaulable.notRequired() );\n\t \n\t    defaulable = DefaulableFactory.create( OverridableImpl::new );\n\t    System.out.println( defaulable.notRequired() );\n\t}\n\t\n\tprivate interface Defaulable {\n\t\t//现在允许默认方法接口,实现者可能会或可能不会实现(覆盖)。\n\t    default String notRequired() {\n\t        return \"Default implementation\";\n\t    }\n\t}\n\t \n\tprivate static class DefaultableImpl implements Defaulable {\n\t}\n\t \n\tprivate static class OverridableImpl implements Defaulable {\n\t    @Override\n\t    public String notRequired() {\n\t        return \"Overridden implementation\";\n\t    }\n\t}\n\t\n\tprivate interface DefaulableFactory {\n\t\t//现在允许静态方法的接口\n\t    static Defaulable create( Supplier< Defaulable > supplier ) {\n\t        return supplier.get();\n\t    }\n\t}\n}\n```\n\n运行结果:  \n\n```java\nDefault implementation\nOverridden implementation\n```\n\n\n## 2.3   方法引用\n\n方法引用提供了一个很有用的语义来直接访问类或者实例的已经存在的方法或者构造方法。  \n结合Lambda表达式，方法引用使语法结构紧凑简明。不需要复杂的引用。\n\n下面我们用Car 这个类来做示例，Car这个类有不同的方法定义。让我们来看看java 8支持的4种方法引用。  \n\n```java\npublic static class Car {\n    public static Car create( final Supplier< Car > supplier ) {\n        return supplier.get();\n    }             \n \n    public static void collide( final Car car ) {\n        System.out.println( \"Collided \" + car.toString() );\n    }\n \n    public void follow( final Car another ) {\n        System.out.println( \"Following the \" + another.toString() );\n    }\n \n    public void repair() {\n        System.out.println( \"Repaired \" + this.toString() );\n    }\n}\n```\n\n第一种方法引用是构造方法引用，语法是：`Class::new` ，对于泛型来说语法是：`Class<T >::new`，请注意构造方法没有参数:\n\n```java\nfinal Car car = Car.create( Car::new );\nfinal List< Car > cars = Arrays.asList( car );\n```\n\n第二种方法引用是静态方法引用，语法是：`Class::static_method`请注意这个静态方法只支持一个类型为Car的参数。\n\n```java\ncars.forEach( Car::collide );\n```\n\n第三种方法引用是类实例的方法引用，语法是：`Class::method`请注意方法没有参数。  \n\n```java\ncars.forEach( Car::repair );\n```\n最后一种方法引用是引用特殊类的方法，语法是：`instance::method`，请注意只接受Car类型的一个参数。\n\n```java\nfinal Car police = Car.create( Car::new );\ncars.forEach( police::follow );\n```\n\n运行这些例子我们将会在控制台得到如下信息（Car的实例可能会不一样）： \n\n\tCollided com.tu.test.java8.newfeature.TestMethodReferences$Car@a418fc\n\tRepaired com.tu.test.java8.newfeature.TestMethodReferences$Car@a418fc\n\tFollowing the com.tu.test.java8.newfeature.TestMethodReferences$Car@a418fc\n\n\n关于方法引用更多的示例和详细信息，请参考[官方文档](http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html)\n\n测试原代码:   \n\n```java\npackage com.tu.test.java8.newfeature;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.function.Supplier;\n\n/ MethodReferences 方法引用*/\npublic class TestMethodReferences {\n\n\tpublic static void main(String[] args) {\n\t\tfinal Car car = Car.create( Car::new );\n\t\tfinal List< Car > cars = Arrays.asList( car );\n\t\tcars.forEach( Car::collide );\n\t\tcars.forEach( Car::repair );\n\t\tfinal Car police = Car.create( Car::new );\n\t\tcars.forEach( police::follow );\n\t}\n\t\n\tpublic static class Car {\n\t    public static Car create( final Supplier< Car > supplier ) {\n\t        return supplier.get();\n\t    }             \n\t \n\t    public static void collide( final Car car ) {\n\t        System.out.println( \"Collided \" + car.toString() );\n\t    }\n\t \n\t    public void follow( final Car another ) {\n\t        System.out.println( \"Following the \" + another.toString() );\n\t    }\n\t \n\t    public void repair() {\n\t        System.out.println( \"Repaired \" + this.toString() );\n\t    }\n\t}\n}\n\n```\n \n运行结果:   \n\n```java\nCollided com.tu.test.java8.newfeature.TestMethodReferences$Car@a418fc\nRepaired com.tu.test.java8.newfeature.TestMethodReferences$Car@a418fc\nFollowing the com.tu.test.java8.newfeature.TestMethodReferences$Car@a418fc\n```\n\n\n## 2.4   重复注释\n\n自从Java 5支持注释以来，注释变得特别受欢迎因而被广泛使用。但是有一个限制，   \n同一个地方的不能使用同一个注释超过一次。 Java 8打破了这个规则，引入了重复注释，允许相同注释在声明使用的时候重复使用超过一次。 \n\n重复注释本身需要被 @Repeatable 注释。实际上，他不是一个语言上的改变，只是编译器层面的改动，技术层面仍然是一样的。让我们来看看例子：\n\n```java\npackage com.tu.test.java8.newfeature;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Repeatable;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/ RepeatingAnnotations 重复注释 */\npublic class TestRepeatingAnnotations {\n\n\t@Target(ElementType.TYPE)\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface Filters {\n\t\tFilter[] value();\n\t}\n\n\t@Target(ElementType.TYPE)\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Repeatable(Filters.class)\n\tpublic @interface Filter {\n\t\tString value();\n\t};\n\n\t@Filter(\"filter1\")\n\t@Filter(\"filter2\")\n\tpublic interface Filterable {\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tfor (Filter filter : Filterable.class.getAnnotationsByType(Filter.class)) {\n\t\t\tSystem.out.println(filter.value());\n\t\t}\n\t}\n}\n```\n\n我们可以看到，注释Filter被 @Repeatable( Filters.class )注释。Filters 只是一个容器，   \n它持有Filter, 编译器尽力向程序员隐藏它的存在。通过这样的方式，Filterable接口可以被Filter注释两次。\n\n另外，反射的API提供一个新方法getAnnotationsByType() 来返回重复注释的类型   \n(请注意Filterable.class.getAnnotation( Filters.class )将会返回编译器注入的Filters实例）。\n\n程序的输出将会是这样：\n\n```java\n\tfilter1\n\tfilter2\n```\n\n更多详细信息请参考[官方文档](http://docs.oracle.com/javase/tutorial/java/annotations/repeating.html)。\n\n\n## 2.5   更好的类型推断\n\nJava 8在类型推断方面改进了很多，在很多情况下，编译器可以推断参数的类型，从而保持代码的整洁。让我们看看例子：\n\n```java\npackage com.tu.test.java8.newfeature;\npublic class Value<T> {\n    public static<T> T defaultValue() {\n        return null;\n    }\n\n    public T getOrDefault( T value, T defaultValue ) {\n        return ( value != null ) ? value : defaultValue;\n    }\n}\n```\n\n这里是Value< String >的用法  \n\n```java\npackage com.tu.test.java8.newfeature;\npublic class TypeInference {\n    public static void main(String[] args) {\n        final Value<String> value = new Value<>();\n        value.getOrDefault( \"22\", Value.defaultValue() );\n\n    }\n}\n```\n\n参数Value.defaultValue()的类型被编译器推断出来，不需要显式地提供类型。   \n在java 7, 相同的代码不会被编译，需要写成：Value.< String >defaultValue()  \n\n\n## 2.6   注解的扩展\n\nJava 8扩展了注解可以使用的范围，现在我们几乎可以在所有的地方：   \n局部变量、泛型、超类和接口实现、甚至是方法的Exception声明。一些例子如下：\n\n```java\npackage com.tu.test.java8.newfeature;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.util.ArrayList;\nimport java.util.Collection;\n\n/ 注解的扩展 */\npublic class TestAnnotations {\n\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Target({ ElementType.TYPE_USE, ElementType.TYPE_PARAMETER })\n\tpublic @interface NonEmpty {\n\t}\n\n\tpublic static class Holder<@NonEmpty T> extends @NonEmpty Object {\n\t\tpublic void method() throws @NonEmpty Exception {\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"unused\")\n\tpublic static void main(String[] args) {\n\t\tfinal Holder<String> holder = new @NonEmpty Holder<String>();\n\t\t@NonEmpty\n\t\tCollection<@NonEmpty String> strings = new ArrayList<>();\n\t}\n}\n\n```\n\nJava 8 新增加了两个注解的程序元素类型 `ElementType.TYPE_USE` 和`ElementType.TYPE_PARAMETER` ，   \n这两个新类型描述了可以使用注解的新场合。注解处理API（`Annotation Processing API`）也做了一些细微的改动，来识别这些新添加的注解类型。\n\n\n# 3．Java编译器的新特性\n\n## 3.1 参数名字\n很长时间以来，Java程序员想尽办法把参数名字保存在java字节码里，并且让这些参数名字在运行时可用。   \nJava 8 终于把这个需求加入到了Java语言（使用反射API和Parameter.getName() 方法）和字节码里（使用java编译命令javac的–parameters参数）。\n\n\n```java\npackage com.tu.test.java8.newfeature;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Parameter;\n\npublic class TestParameterNames {\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tMethod method = TestParameterNames.class.getMethod(\"main\", String[].class);\n\t\tfor (final Parameter parameter : method.getParameters()) {\n\t\t\tif (parameter.isNamePresent())//验证参数名是不是可用\n\t\t\t\tSystem.out.println(\"Parameter: \" + parameter.getName());\n\t\t}\n\t}\n}\n```\n\n如果你编译这个class的时候没有添加参数–parameters，运行的时候你会得到这个结果：\n\n\tParameter: arg0\n\n编译的时候添加了–parameters参数的话，运行结果会不一样：\n\n\tParameter: args\n\n对于有经验的Maven使用者，–parameters参数可以添加到maven-compiler-plugin的配置部分：\n\n```xml\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-compiler-plugin</artifactId>\n\t<version>3.1</version>\n\t<configuration>\n\t\t<compilerArgument>-parameters</compilerArgument>\n\t\t<source>1.8</source>\n\t\t<target>1.8</target>\n\t</configuration>\n</plugin>\n```\n\n最新版的Eclipse Kepler SR2 提供了编译设置项，如下图所示：\n\n![ECLIPSE-JAVA-COMPILER](/res/img/blog/2014/10/23/java8_new_feature/ECLIPSE-JAVA-COMPILER.png)  \n\nPicture 1. Configuring Eclipse projects to support new Java 8 compiler –parameters argument.\n\nstore method parameter names(usable via reflection)\n存储通过反射方法参数名称(通过反射可用)\n\n额外的，有一个方便的方法Parameter.isNamePresent() 来验证参数名是不是可用。\n\n# 4．Java  库的新特性\n\nJava 8 新添加了很多类，并且扩展了很多现有的类来更好地支持现代并发、函数式编程、日期\\时间等等。\n\n## 4.1 Optional\n\n著名的[NullPointerException](http://examples.javacodegeeks.com/java-basics/exceptions/java-lang-nullpointerexception-how-to-handle-null-pointer-exception/) 是引起系统失败最常见的原因。   \n很久以前[Google Guava](http://code.google.com/p/guava-libraries/) 项目引入了Optional作为解决空指针异常的一种方式，     \n不赞成代码被null检查的代码污染，期望程序员写整洁的代码。受Google Guava的鼓励，Optional 现在是Java 8库的一部分。\n\nOptional 只是一个容器，它可以保存一些类型的值或者null。它提供很多有用的方法，所以没有理由不显式地检查null。请参照java 8的[文档](http://docs.oracle.com/javase/8/docs/api/java/util/Optional.html)查看详细信息。\n\n让我们看看两个Optional 用法的小例子：一个是允许为空的值，另外一个是不允许为空的值。\n\n```java\n\nOptional< String > fullName = Optional.ofNullable( null );\nSystem.out.println( \"Full Name is set? \" + fullName.isPresent() );        \nSystem.out.println( \"Full Name: \" + fullName.orElseGet( () -> \"[none]\" ) ); \nSystem.out.println( fullName.map( s -> \"Hey \" + s + \"!\" ).orElse( \"Hey Stranger!\" ) );\n\n```\n\n如果Optional实例有非空的值，方法 isPresent() 返回true否则返回false。方法orElseGet提供了回退机制，当Optional的值为空时接受一个方法返回默认值。   \nmap()方法转化Optional当前的值并且返回一个新的Optional实例。orElse方法和orElseGet类似，但是它不接受一个方法，而是接受一个默认值。上面代码运行结果如下：\n\n\tFull Name is set? false\n\tFull Name: [none]\n\tHey Stranger!\n\n让我们大概看看另外一个例子。\n\n```java\n\nOptional< String > firstName = Optional.of( \"Tom\" );\nSystem.out.println( \"First Name is set? \" + firstName.isPresent() );        \nSystem.out.println( \"First Name: \" + firstName.orElseGet( () -> \"[none]\" ) ); \nSystem.out.println( firstName.map( s -> \"Hey \" + s + \"!\" ).orElse( \"Hey Stranger!\" ) );\nSystem.out.println();\n\n```\n\n输出如下：\n\n\tFirst Name is set? true\n\tFirst Name: Tom\n\tHey Tom!\n\n更多详细信息请参考[官方文档](http://docs.oracle.com/javase/8/docs/api/java/util/Optional.html) 。\n\n测试原代码:\n\n```java\npackage com.tu.test.java8.newfeature;\n\nimport java.util.Optional;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\n\npublic class TestOptional {\n\n\tpublic static void main(String[] args) {\n\n\t\tOptional<String> fullName = Optional.ofNullable(null);\n\t\tSystem.out.println(\"Full Name is set? \" + fullName.isPresent());\n\t\tSystem.out.println(\"Full Name: \" + fullName.orElseGet(() -> \"[none]\"));\n\t\tSystem.out.println(fullName.map(s -> \"Hey \" + s + \"!\").orElse(\"Hey Stranger!\"));\n\n\t\tSystem.out.println(\"---------------\");\n\n\t\tOptional<String> firstName = Optional.of(\"Tom\");\n\t\tSystem.out.println(\"First Name is set? \" + firstName.isPresent());\n\t\tSystem.out.println(\"First Name: \" + firstName.orElseGet(() -> \"[none]\"));\n\t\tSystem.out.println(firstName.map(s -> \"Hey \" + s + \"!\").orElse(\"Hey Stranger!\"));\n\t\tSystem.out.println();\n\n\t\t//=====复习lambda=============================firstName.orElseGet(() -> \"[none]\")\n\t\tSupplier<? extends String> other = new Supplier<String>() {\n\t\t\t@Override\n\t\t\tpublic String get() {\n\t\t\t\treturn \"[none]\";\n\t\t\t}\n\t\t};\n\t\tfirstName.orElseGet(other);\n\t\t//=====复习lambda=============================firstName.map(s -> \"Hey \" + s + \"!\").orElse(\"Hey Stranger!\")\n\t\tFunction<String, String> mapper = new Function<String, String>() {\n\t\t\t@Override\n\t\t\tpublic String apply(String t) {\n\t\t\t\treturn \"Hey \" + t + \"!\";\n\t\t\t}\n\t\t};\n\t\tfirstName.map(mapper).orElse(\"Hey Stranger!\");\n\t}\n}\n```\n\n运行结果:\n\n```java\nFull Name is set? false\nFull Name: [none]\nHey Stranger!\n---------------\nFirst Name is set? true\nFirst Name: Tom\nHey Tom!\n```\n\n\n## 4.2 Stream\n\n新增加的Stream API (java.util.stream)引入了在Java里可以工作的函数式编程。\n这是目前为止对java库最大的一次功能添加，希望程序员通过编写有效、整洁和简明的代码，能够大大提高生产率。\n\nStream API让集合处理简化了很多（我们后面会看到不仅限于Java集合类）。让我们从一个简单的类Task开始来看看Stream的用法。\n\n```java\nprivate enum Status {\n\tOPEN, CLOSED\n};\n\nprivate static final class Task {\n\tprivate final Status status;\n\tprivate final Integer points;\n\n\tTask(final Status status, final Integer points) {\n\t\tthis.status = status;\n\t\tthis.points = points;\n\t}\n\n\tpublic Integer getPoints() {\n\t\treturn points;\n\t}\n\n\tpublic Status getStatus() {\n\t\treturn status;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn String.format(\"[%s, %d]\", status, points);\n\t}\n}\n```\n\nTask类有一个分数的概念（或者说是伪复杂度），其次是还有一个值可以为OPEN或CLOSED的状态.让我们引入一个Task的小集合作为演示例子：\n\n```java\n\nfinal Collection< Task > tasks = Arrays.asList(\n    new Task( Status.OPEN, 5 ),\n    new Task( Status.OPEN, 13 ),\n    new Task( Status.CLOSED, 8 ) \n);\n\n```\n\n第一个问题是所有的开放的Task的点数是多少？在java 8 之前，通常的做法是用foreach迭代。但是Java8里头我们会用Stream。Stream是多个元素的序列，支持串行和并行操作。\n\n```java\n\n// Calculate total points of all active tasks using sum()\nfinal long totalPointsOfOpenTasks = tasks\n    .stream()\n    .filter( task -> task.getStatus() == Status.OPEN )\n    .mapToInt( Task::getPoints )\n    .sum();\n         \nSystem.out.println( \"Total points: \" + totalPointsOfOpenTasks );\n```\n\n控制台的输出将会是：\n\n\tTotal points: 18\n\n上面代码执行的流程是这样的，首先Task集合会被转化为Stream表示，然后filter操作会过滤掉所有关闭的Task，接下来使用Task::getPoints 方法取得每个Task实例的点数，mapToInt方法会把Task Stream转换成Integer Stream，最后使用Sum方法将所有的点数加起来得到最终的结果。\n\n在我们看下一个例子之前，我们要记住一些关于Stream的说明。Stream操作被分为中间操作和终点操作。\n\n中间操作返回一个新的Stream。这些中间操作是延迟的，执行一个中间操作比如filter实际上不会真的做过滤操作，而是创建一个新的Stream，当这个新的Stream被遍历的时候，它里头会包含有原来Stream里符合过滤条件的元素。\n\n终点操作比如说forEach或者sum会遍历Stream从而产生最终结果或附带结果。终点操作执行完之后，Stream管道就被消费完了，不再可用。在几乎所有的情况下，终点操作都是即时完成对数据的遍历操作。\n\nStream的另外一个价值是Stream创造性地支持并行处理。让我们看看下面这个例子，这个例子把所有task的点数加起来。\n\n```java\n// Calculate total points of all tasks\nfinal double totalPoints = tasks\n   .stream()\n   .parallel()\n   .map( task -> task.getPoints() ) // or map( Task::getPoints ) \n   .reduce( 0, Integer::sum );\n    \nSystem.out.println( \"Total points (all tasks): \" + totalPoints );\n```\n\n这个例子跟上面那个非常像，除了这个例子里使用了parallel()方法       并且计算最终结果的时候使用了reduce方法。\n\n输出如下：\n\n\tTotal points (all tasks): 26.0\n\n经常会有这个一个需求：我们需要按照某种准则来对集合中的元素进行分组。Stream也可以处理这样的需求，下面是一个例子：\n\n```java\n// Group tasks by their status\nfinal Map< Status, List< Task > > map = tasks\n    .stream()\n    .collect( Collectors.groupingBy( Task::getStatus ) );\nSystem.out.println( map );\n```\n\n控制台的输出如下：\n\n\t{CLOSED=[[CLOSED, 8]], OPEN=[[OPEN, 5], [OPEN, 13]]}\n\n让我们来计算整个集合中每个task分数（或权重）的平均值来结束task的例子。\n\n```java\n\n// Calculate the weight of each tasks (as percent of total points) \nfinal Collection< String > result = tasks\n    .stream()                                        // Stream< String >\n    .mapToInt( Task::getPoints )                     // IntStream\n    .asLongStream()                                  // LongStream\n    .mapToDouble( points -> points / totalPoints )   // DoubleStream\n    .boxed()                                         // Stream< Double >\n    .mapToLong( weigth -> ( long )( weigth * 100 ) ) // LongStream\n    .mapToObj( percentage -> percentage + \"%\" )      // Stream< String> \n    .collect( Collectors.toList() );                 // List< String > \n         \nSystem.out.println( result );\n\n```\n\n控制台输出如下：\n\n\t[19%, 50%, 30%]\n\n最后，就像前面提到的，Stream API不仅仅处理Java集合框架。像从文本文件中逐行读取数据这样典型的I/O操作也很适合用Stream API来处理。下面用一个例子来应证这一点。\n\n```java\nfinal Path path = new File( filename ).toPath();\ntry( Stream< String > lines = Files.lines( path, StandardCharsets.UTF_8 ) ) {\n    lines.onClose( () -> System.out.println(\"Done!\") ).forEach( System.out::println );\n}\n```\n\nStream的方法onClose 返回一个等价的有额外句柄的Stream，当Stream的close（）方法被调用的时候这个句柄会被执行。\n\nStream API、Lambda表达式还有接口默认方法和静态方法支持的方法引用，是Java 8对软件开发的现代范式的响应。\n\n运行原代码:\n\n```java\npackage com.tu.test.java8.newfeature;\n\nimport java.io.File;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class TestStream {\n\tpublic static void main(String[] args) {\n\n\t\tfinal Collection< Task > tasks = Arrays.asList(\n\t\t\t    new Task( Status.OPEN, 5 ),\n\t\t\t    new Task( Status.OPEN, 13 ),\n\t\t\t    new Task( Status.CLOSED, 8 ) \n\t\t\t);\n\n\t\t//所有的开放的Task的点数是多少？在java 8 之前，通常的做法是用foreach迭代。但是Java8里头我们会用Stream。Stream是多个元素的序列，支持串行和并行操作。\n\t\t// Calculate total points of all active tasks using sum()\n\t\tfinal long totalPointsOfOpenTasks = tasks\n\t\t    .stream()\n\t\t    .filter( task -> task.getStatus() == Status.OPEN )\n\t\t    .mapToInt( Task::getPoints )\n\t\t    .sum();\n\t\t         \n\t\tSystem.out.println( \"Total points: \" + totalPointsOfOpenTasks );\n\n\t\tSystem.out.println(\"=========================================\");\n\t\t// Calculate total points of all tasks\n\t\tfinal double totalPoints = tasks\n\t\t   .stream()\n\t\t   .parallel()\n\t\t   .map( task -> task.getPoints() ) // or map( Task::getPoints ) \n\t\t   .reduce( 0, Integer::sum );\n\t\t    \n\t\tSystem.out.println( \"Total points (all tasks): \" + totalPoints );\n\t\t\n\t\tSystem.out.println(\"=========================================\");\n\t\t// Group tasks by their status\n\t\tfinal Map<Status, List<Task>> map = tasks\n\t\t\t\t.stream()\n\t\t\t\t.collect(Collectors.groupingBy(Task::getStatus));\n\t\tSystem.out.println(map);\n\t\t\n\t\tSystem.out.println(\"=========================================\");\n\t\t// Calculate the weight of each tasks (as percent of total points) \n\t\tfinal Collection< String > result = tasks\n\t\t    .stream()                                        // Stream< String >\n\t\t    .mapToInt( Task::getPoints )                     // IntStream\n\t\t    .asLongStream()                                  // LongStream\n\t\t    .mapToDouble( points -> points / totalPoints )   // DoubleStream\n\t\t    .boxed()                                         // Stream< Double >\n\t\t    .mapToLong( weigth -> ( long )( weigth * 100 ) ) // LongStream\n\t\t    .mapToObj( percentage -> percentage + \"%\" )      // Stream< String> \n\t\t    .collect( Collectors.toList() );                 // List< String > \n\t\t         \n\t\tSystem.out.println( result );\n\n\t\tSystem.out.println(\"=========================================\");\n\t\tStream<String> lines;\n\t\ttry {\n\t\t\tfinal Path path = new File(\"./text/Test.txt\").toPath();\n\t\t\tlines = Files.lines(path, StandardCharsets.UTF_8);\n\t\t\tlines.onClose(() -> System.out.println(\"Done!\")).forEach(System.out::println);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tprivate enum Status {\n\t\tOPEN, CLOSED\n\t};\n\n\tprivate static final class Task {\n\t\tprivate final Status status;\n\t\tprivate final Integer points;\n\n\t\tTask(final Status status, final Integer points) {\n\t\t\tthis.status = status;\n\t\t\tthis.points = points;\n\t\t}\n\n\t\tpublic Integer getPoints() {\n\t\t\treturn points;\n\t\t}\n\n\t\tpublic Status getStatus() {\n\t\t\treturn status;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn String.format(\"[%s, %d]\", status, points);\n\t\t}\n\t}\n}\n```\n\n运行结果:\n\n```java\n\nTotal points: 18\n=========================================\nTotal points (all tasks): 26.0\n=========================================\n{OPEN=[[OPEN, 5], [OPEN, 13]], CLOSED=[[CLOSED, 8]]}\n=========================================\n[19%, 50%, 30%]\n=========================================\nhello\nhellohello\nhellohellohello\n\n```\n\n再来点案例:\n\n```java\n\n\tList<String> stringCollection = Arrays.asList(\"ddd2\", \"aaa2\", \"bbb1\", \"aaa1\", \"bbb3\", \"ccc\", \"bbb2\", \"ddd1\");\n\n\t// Filter 过滤\n\tstringCollection.stream().filter((s) -> s.startsWith(\"a\")).forEach(System.out::println);\n\tSystem.out.println(\"=========1==========\");\n\t// Sort 排序\n\tstringCollection.stream().sorted().filter((s) -> s.startsWith(\"a\")).forEach(System.out::println);\n\tSystem.out.println(\"=========2==========\");\n\t// Map 映射\n\tstringCollection.stream().map(String::toUpperCase).sorted((a, b) -> b.compareTo(a))\n\t\t\t.forEach(System.out::println);\n\tSystem.out.println(\"=========3==========\");\n\t// Match 匹配\n\tSystem.out.println(stringCollection.stream().anyMatch((s) -> s.startsWith(\"a\")));\n\tSystem.out.println(stringCollection.stream().allMatch((s) -> s.startsWith(\"a\")));\n\tSystem.out.println(stringCollection.stream().noneMatch((s) -> s.startsWith(\"a\")));\n\tSystem.out.println(\"=========4==========\");\n\t// Count 计数 (最终操作)\n\tSystem.out.println(stringCollection.stream().count());\n\tSystem.out.println(stringCollection.stream().filter((a) -> a.startsWith(\"a\")).count());\n\tSystem.out.println(\"=========5==========\");\n\t// Reduce 规约 (最终操作)\n\tstringCollection.stream().sorted().reduce((s1, s2) -> s1 + \"#\" + s2).ifPresent(System.out::println);\n\tSystem.out.println(\"========6===========\");\n\t\n\t// 并行Streams\n\tint max = 1000000;\n\tList<String> values = new ArrayList<>(max);\n\tfor (int i = 0; i < max; i++) {\n\t\tvalues.add(UUID.randomUUID().toString());\n\t}\n\t\n\tlong t0 = System.nanoTime();\n\t// 串行排序 sequential sort took:1226 ms\n\tlong count = values.stream().sorted().count();\n\tSystem.out.println(count);\n\tlong t1 = System.nanoTime();\n\tlong millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);\n\tSystem.out.println(String.format(\"sequential sort took:%d ms\", millis));\n\n\tlong t2 = System.nanoTime();\n\t// 并行排序 sequential sort took:951 ms\n\tlong count1 = values.parallelStream().sorted().count();\n\tSystem.out.println(count1);\n\tlong t3 = System.nanoTime();\n\tlong millis1 = TimeUnit.NANOSECONDS.toMillis(t3 - t2);\n\tSystem.out.println(String.format(\"parallel sort took:%d ms\", millis1));\n\n```\n\n案例运行结果:\n\n```java\n\n\taaa2\n\taaa1\n\t=========1==========\n\taaa1\n\taaa2\n\t=========2==========\n\tDDD2\n\tDDD1\n\tCCC\n\tBBB3\n\tBBB2\n\tBBB1\n\tAAA2\n\tAAA1\n\t=========3==========\n\ttrue\n\tfalse\n\tfalse\n\t=========4==========\n\t8\n\t2\n\t=========5==========\n\taaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2\n\t========6===========\n\t1000000\n\tsequential sort took:1258 ms\n\t1000000\n\tparallel sort took:1061 ms\n\n```\n\n\n\n## 4.3日期时间API（JSR310)\n\nJava 8引入了新的日期时间API（JSR 310）改进了日期时间的管理。日期和时间管理一直是Java开发人员最痛苦的问题。java.util.Date和后来的java.util.Calendar一点也没有改变这个情况（甚至让人们更加迷茫）。\n\n因为上面这些原因，产生了[Joda-Time](http://www.joda.org/joda-time/) ，可以替换Java的日期时间API。Joda-Time深刻影响了 Java 8新的日期时间API，Java 8吸收了Joda-Time 的精华。新的java.time包包含了所有关于日期、时间、日期时间、时区、Instant（跟日期类似但精确到纳秒）、duration（持续时间）和时钟操作的类。设计这些API的时候很认真地考虑了这些类的不变性（从java.util.Calendar吸取的痛苦教训）。如果需要修改时间对象，会返回一个新的实例。\n\n让我们看看一些关键的类和用法示例。第一个类是Clock，Clock使用时区来访问当前的instant, date和time。Clock类可以替换 System.currentTimeMillis() 和 TimeZone.getDefault().\n\n```java\n\t// Get the system clock as UTC offset\n\tfinal Clock clock = Clock.systemUTC();\n\tSystem.out.println( clock.instant() );\n\tSystem.out.println( clock.millis() );\n```\n\n控制台输出如下：\n\n\t2015-06-25T07:10:58.746Z\n\t1435216258848\n\n\n其他类我们看看LocalTime和LocalDate。LocalDate只保存有ISO-8601日期系统的日期部分，有时区信息，相应地，LocalTime只保存ISO-8601日期系统的时间部分，没有时区信息。LocalDate和LocalTime都可以从Clock对象创建。\n\n```java\n\t// Get the local date and local time\n\tfinal LocalDate date = LocalDate.now();\n\tfinal LocalDate dateFromClock = LocalDate.now( clock );\n\n\tSystem.out.println( date );\n\tSystem.out.println( dateFromClock );\n\n\tSystem.out.println(\"================\");\n\t// Get the local date and local time\n\tfinal LocalTime time = LocalTime.now();\n\tfinal LocalTime timeFromClock = LocalTime.now( clock );\n\n\tSystem.out.println( time );\n\tSystem.out.println( timeFromClock );\n```\n\n控制台输出如下：\n\n\t2015-06-25\n\t2015-06-25\n\t15:12:07.912\n\t07:12:07.912\n\nLocalDateTime类合并了LocalDate和LocalTime，它保存有ISO-8601日期系统的日期和时间，但是没有时区信息。让我们看一个简单的例子。\n\n```java\n// Get the local date/time\nfinal LocalDateTime datetime = LocalDateTime.now();\nfinal LocalDateTime datetimeFromClock = LocalDateTime.now( clock );\n\nSystem.out.println( datetime );\nSystem.out.println( datetimeFromClock );\n```\n\n控制台输出如下：\n\n\t2015-06-25T15:14:12.139\n\t2015-06-25T07:14:12.139\n\n如果您需要一个类持有日期时间和时区信息，可以使用ZonedDateTime，它保存有ISO-8601日期系统的日期和时间，而且有时区信息。让我们看一些例子：\n\n```java\n// Get the zoned date/time\nfinal ZonedDateTime zonedDatetime = ZonedDateTime.now();\nfinal ZonedDateTime zonedDatetimeFromClock = ZonedDateTime.now( clock );\nfinal ZonedDateTime zonedDatetimeFromZone = ZonedDateTime.now( ZoneId.of( \"America/Los_Angeles\" ) );\n\nSystem.out.println( zonedDatetime );\nSystem.out.println( zonedDatetimeFromClock );\nSystem.out.println( zonedDatetimeFromZone );\n```\n\n控制台输出如下：\n\n\t2015-06-25T15:14:51.607+08:00[Asia/Shanghai]\n\t2015-06-25T07:14:51.607Z\n\t2015-06-25T00:14:51.610-07:00[America/Los_Angeles]\n\n最后让我们看看Duration类，Duration持有的时间精确到纳秒。它让我们很容易计算两个日期中间的差异。让我们来看一下：\n\n```java\n\n// Get duration between two dates\nfinal LocalDateTime from = LocalDateTime.of( 2015, Month.JUNE, 25, 0, 0, 0 );\nfinal LocalDateTime to = LocalDateTime.of( 2016, Month.JUNE, 25, 23, 59, 59 );\n\nfinal Duration duration = Duration.between( from, to );\nSystem.out.println( \"Duration in days: \" + duration.toDays() );\nSystem.out.println( \"Duration in hours: \" + duration.toHours() );\n```\n\n上面的例子计算了两个日期（2015年5月25日和2016年5月25日）之间的持续时间（基于天数和小时）输出如下：\n\n\tDuration in days: 366\n\tDuration in hours: 8807\n\n对于Java 8的新日期时间的总体印象还是比较积极的。一部分是因为有经历实战的Joda-Time的基础，\n还有一部分是因为日期时间终于被认真对待而且听取了开发人员的声音。关于更多的详细信息，请参考[官方文档](http://docs.oracle.com/javase/tutorial/datetime/index.html)。\n\n\n## 4.4   Nashorn javascript引擎\n\nJava 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用。Nashorn javascript引擎只是javax.script.ScriptEngine另一个实现，而且规则也一样，允许Java和JavaScript互相操作。这里有个小例子：\n\n```java\n\nScriptEngineManager manager = new ScriptEngineManager();\nScriptEngine engine = manager.getEngineByName( \"JavaScript\" );\n\nSystem.out.println( engine.getClass().getName() );\nSystem.out.println( \"Result:\" + engine.eval( \"function f() { return 1; }; f() + 1;\" ) );\n\n```\n\n输出如下：\n\n\tjdk.nashorn.api.scripting.NashornScriptEngine\n\tResult: 2\n\n## 4.5   Base64\n\n对Base64的支持最终成了Java 8标准库的一部分，非常简单易用：\n\n```java\npackage com.tu.test.java8.newfeature;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.Base64;\n\npublic class TestBase64 {\n\tpublic static void main(String[] args) {\n\t\tfinal String text = \"Base64 finally in Java 8!\";\n\n\t\tfinal String encoded = Base64.getEncoder().encodeToString(text.getBytes(StandardCharsets.UTF_8));\n\t\tSystem.out.println(encoded);\n\n\t\tfinal String decoded = new String(Base64.getDecoder().decode(encoded), StandardCharsets.UTF_8);\n\t\tSystem.out.println(decoded);\n\t}\n}\n\n```\n\n控制台输出的编码和解码的字符串\n\n\tQmFzZTY0IGZpbmFsbHkgaW4gSmF2YSA4IQ==\n\tBase64 finally in Java 8!\n\n新的Base64API也支持URL和MINE的编码解码。\n\n(Base64.getUrlEncoder() / Base64.getUrlDecoder(), Base64.getMimeEncoder() / Base64.getMimeDecoder()).\n\n\n## 4.6   并行数组\n\nJava 8新增加了很多方法支持并行的数组处理。最重要的大概是parallelSort()这个方法显著地使排序在多核计算机上速度加快。下面的小例子演示了这个新的方法（parallelXXX）的行为。\n\n```java\npackage com.tu.test.java8.newfeature;\n\nimport java.util.Arrays;\nimport java.util.concurrent.ThreadLocalRandom;\n\n/ 并行数组 */\npublic class TestParallelArray {\n\n\tpublic static void main(String[] args) {\n\t\tlong[] arrayOfLong = new long[20000];\n\t\tArrays.parallelSetAll(arrayOfLong, index -> ThreadLocalRandom.current().nextInt(1000000));\n\t\tArrays.stream(arrayOfLong).limit(10).forEach(i -> System.out.print(i + \" \"));\n\t\tSystem.out.println();\n\n\t\tArrays.parallelSort(arrayOfLong);\n\t\tArrays.stream(arrayOfLong).limit(10).forEach(i -> System.out.print(i + \" \"));\n\t\tSystem.out.println();\n\t}\n}\n\n```\n\n这一小段代码使用parallelSetAll() t方法填充这个长度是2000的数组，然后使用parallelSort() 排序。   \n这个程序输出了排序前和排序后的10个数字来验证数组真的已经被排序了。示例可能的输出如下（请注意这些数字是随机产生的）\n\n\t650193 416424 740906 224816 806179 81842 605508 85078 206531 792115 \n\t28 57 91 98 184 274 341 342 442 469 \n\n\n## 4.7   并发\n\n在新增Stream机制与lambda的基础之上，在java.util.concurrent.ConcurrentHashMap中加入了一些新方法来支持聚集操作。   \n同时也在java.util.concurrent.ForkJoinPool类中加入了一些新方法来支持共有资源池（common pool）。\n\n新增的java.util.concurrent.locks.StampedLock类提供一直基于容量的锁，   \n这种锁有三个模型来控制读写操作（它被认为是不太有名的java.util.concurrent.locks.ReadWriteLock类的替代者）。\n\n在java.util.concurrent.atomic包中还增加了下面这些类：\n\n\tDoubleAccumulator\n\tDoubleAdder\n\tLongAccumulator\n\tLongAdder\n\n\n# 5.  新的工具\n\nJava 8 提供了一些新的命令行工具，在这节里我们将会介绍它们中最有趣的部分。\n\n## 5.1  Nashorn引擎：jjs\n\njjs是个基于Nashorn引擎的命令行工具。它接受一些JavaScript源代码为参数，并且执行这些源代码。例如，我们创建一个具有如下内容的func.js文件：\n\n```js\nfunction f() {\n\treturn 1;\n};\nprint( f() + 1 );\n```\n\n我们可以把这个文件作为参数传递给jjs使得这个文件可以在命令行中执行\n\n```js\n<span style=\"font-size: 13px;\">jjs func.js</span>\n```\n\n输出结果如下\n\n\t2\n\n更多的详细信息请参考[官方文档](http://docs.oracle.com/javase/8/docs/technotes/tools/unix/jjs.html)。\n\n\n## 5.2 类依赖分析工具：jdeps\n\nJdeps是一个功能强大的命令行工具，它可以帮我们显示出包层级或者类层级java类文件的依赖关系。它接受class文件、目录、jar文件作为输入，默认情况下，jdeps会输出到控制台。\n\n作为例子，让我们看看现在很流行的Spring框架的库的依赖关系报告。为了让报告短一些，我们只分析一个jar: org.springframework.core-3.0.5.RELEASE.jar.\n\njdeps org.springframework.core-3.0.5.RELEASE.jar 这个命令输出内容很多，我们只看其中的一部分，这些依赖关系根绝包来分组，如果依赖关系在classpath里找不到，就会显示not found.\n\n```java\norg.springframework.core-3.0.5.RELEASE.jar -> C:\\Program Files\\Java\\jdk1.8.0\\jre\\lib\\rt.jar\n   org.springframework.core (org.springframework.core-3.0.5.RELEASE.jar)\n      -> java.io\n      -> java.lang\n      -> java.lang.annotation\n      -> java.lang.ref\n      -> java.lang.reflect\n      -> java.util\n      -> java.util.concurrent\n      -> org.apache.commons.logging                         not found\n      -> org.springframework.asm                            not found\n      -> org.springframework.asm.commons                    not found\n   org.springframework.core.annotation (org.springframework.core-3.0.5.RELEASE.jar)\n      -> java.lang\n      -> java.lang.annotation\n      -> java.lang.reflect\n      -> java.util\n```\n\n更多的详细信息请参考[官方文档](http://docs.oracle.com/javase/8/docs/technotes/tools/unix/jdeps.html)。\n\n# 6. JVM的新特性\n\nJVM内存永久区已经被metaspace替换（JEP 122）。JVM参数 -XX:PermSize 和 –XX:MaxPermSize被XX:MetaSpaceSize 和 -XX:MaxMetaspaceSize代替。\n\n\n# 7. 资源\n\n下面一些文章从不同层面上深度讨论了Java 8的特性：\n\n[What’s New in JDK 8]( http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html)   \n[The Java Tutorials](http://docs.oracle.com/javase/tutorial/)   \n[WildFly 8, JDK 8, NetBeans 8, Java EE 7]( http://blog.arungupta.me/2014/03/wildfly8-jdk8-netbeans8-javaee7-excellent-combo-enterprise-java/)   \n[Java 8 Tutorial]( http://winterbe.com/posts/2014/03/16/java-8-tutorial/)   \n[JDK 8 Command-line Static Dependency Checker]( http://marxsoftware.blogspot.ca/2014/03/jdeps.html)   \n[The Illuminating Javadoc of JDK 8]( http://marxsoftware.blogspot.ca/2014/03/illuminating-javadoc-of-jdk-8.html)   \n[The Dark Side of Java 8](http://blog.jooq.org/2014/04/04/java-8-friday-the-dark-side-of-java-8/)   \n[Installing Java™ 8 Support in Eclipse Kepler SR2]( http://www.eclipse.org/downloads/java8/)   \n[Java 8](http://www.baeldung.com/java8)   \n[Oracle Nashorn. A Next-Generation JavaScript Engine for the JVM]( http://www.oracle.com/technetwork/articles/java/jf14-nashorn-2126515.html)  \n[Java 8 特性 – 终极手册](http://ifeve.com/java-8-features-tutorial/)    \n[JAVA8 十大新特性详解](http://www.jb51.net/article/48304.htm)   \n\n\n# Demo下载\n\n本文案例Demo[下载](/res/file/blog/2014/10/23/java8_new_feature/Java8NewFeature.rar)\n\n","slug":"java8_new_feature","published":1,"updated":"2016-05-04T03:49:56.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinu3etxj000oxoj0ih94wlv1","content":"<style>\nh3 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nh6 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\n</style>\n\n<p>目录:   </p>\n<ul>\n<li>1．简介</li>\n<li>2．Java的新特性<ul>\n<li>2.1 Lambda表达式和函数式接口</li>\n<li>2.2 接口的默认方法和静态方法</li>\n<li>2.3 方法引用</li>\n<li>2.4 重复注释</li>\n<li>2.5 更好的类型推断</li>\n<li>2.6 注解的扩展</li>\n</ul>\n</li>\n<li>3．Java编译器的新特性<ul>\n<li>3.1 参数名字</li>\n</ul>\n</li>\n<li>4．Java 库的新特性<ul>\n<li>4.1 Optional</li>\n<li>4.2 Stream</li>\n<li>4.3日期时间API（JSR310)</li>\n<li>4.4 Nashorn javascript引擎</li>\n<li>4.5 Base64</li>\n<li>4.6 并行数组</li>\n<li>4.7 并发</li>\n</ul>\n</li>\n<li><ol>\n<li>新的工具<ul>\n<li>5.1 Nashorn引擎：jjs</li>\n<li>5.2 类依赖分析工具：jdeps</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><ol>\n<li>JVM的新特性</li>\n</ol>\n</li>\n<li><ol>\n<li>资源</li>\n</ol>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"1．简介\"><a href=\"#1．简介\" class=\"headerlink\" title=\"1．简介\"></a>1．简介</h1><p>毫无疑问，Java 8是自Java  5（2004年）发布以来Java语言最大的一次版本升级，Java 8带来了很多的新特性，比如编译器、类库、开发工具和JVM（Java虚拟机）。在这篇教程中我们将会学习这些新特性，并通过真实例子演示说明它们适用的场景。</p>\n<p>本教程由下面几部分组成，它们分别涉及到Java平台某一特定方面的内容：</p>\n<p>语言<br>编译器<br>类库<br>开发工具<br>运行时（Java虚拟机）  </p>\n<h1 id=\"2．Java的新特性\"><a href=\"#2．Java的新特性\" class=\"headerlink\" title=\"2．Java的新特性\"></a>2．Java的新特性</h1><p>总体来说，Java 8是一个大的版本升级。有人可能会说，Java 8的新特性非常令人期待，但是也要花费大量的时间去学习。这一节我们会讲到这些新特性。</p>\n<h2 id=\"2-1-Lambda表达式和函数式接口\"><a href=\"#2-1-Lambda表达式和函数式接口\" class=\"headerlink\" title=\"2.1 Lambda表达式和函数式接口\"></a>2.1 Lambda表达式和函数式接口</h2><p>Lambda表达式（也叫做闭包）是Java 8中最大的也是期待已久的变化。它允许我们将一个函数当作方法的参数（传递函数），<br>或者说把代码当作数据，这是每个函数式编程者熟悉的概念。很多基于JVM平台的语言一开始就支持Lambda表达式，但是Java程序员没有选择，只能使用匿名内部类来替代Lambda表达式。</p>\n<p>Lambda表达式的设计被讨论了很久，而且花费了很多的功夫来交流。不过最后取得了一个折中的办法，得到了一个新的简明并且紧凑的Lambda表达式结构。最简单的Lambda表达式可以用逗号分隔的参数列表、-&gt;符号和功能语句块来表示。示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Arrays.asList( <span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span> ).forEach( e -&gt; System.out.println( e ) );</span><br></pre></td></tr></table></figure>\n<p>请注意到编译器会根据上下文来推测参数的类型，或者你也可以显示地指定参数类型，只需要将类型包在括号里。举个例子：   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Arrays.asList( <span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span> ).forEach( ( String e ) -&gt; System.out.println( e ) );</span><br></pre></td></tr></table></figure>\n<p>如果Lambda的功能语句块太复杂，我们可以用大括号包起来，跟普通的Java方法一样，如下：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String separator = <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">Arrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span>).forEach((String e) -&gt; &#123;</span><br><span class=\"line\">\tSystem.out.print(e + separator2);</span><br><span class=\"line\">\tSystem.out.print(e + separator2);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Lambda表达式可能会引用类的成员或者局部变量（会被隐式地转变成final类型），下面两种写法的效果是一样的：   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String separator = <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">Arrays.asList( <span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span> ).forEach(</span><br><span class=\"line\">    ( String e ) -&gt; System.out.print( e + separator ) );</span><br></pre></td></tr></table></figure>\n<p>和</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> String separator = <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">Arrays.asList( <span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span> ).forEach(</span><br><span class=\"line\">    ( String e ) -&gt; System.out.print( e + separator ) );</span><br></pre></td></tr></table></figure>\n<p>Lambda表达式可能会有返回值，编译器会根据上下文推断返回值的类型。如果lambda的语句块只有一行，不需要return关键字。下面两个写法是等价的：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Arrays.asList( <span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span> ).sort( ( e1, e2 ) -&gt; e1.compareTo( e2 ) );</span><br></pre></td></tr></table></figure>\n<p>和</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Arrays.asList( <span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span> ).sort( ( e1, e2 ) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = e1.compareTo( e2 );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125; );</span><br></pre></td></tr></table></figure>\n<p>语言的设计者们思考了很多如何让现有的功能和lambda表达式友好兼容。于是就有了函数接口这个概念。函数接口是一种只有一个方法的接口，像这样地，函数接口可以隐式地转换成lambda表达式。</p>\n<p>java.lang.Runnable 和java.util.concurrent.Callable是函数接口两个最好的例子。<br>但是在实践中，函数接口是非常脆弱的，只要有人在接口里添加多一个方法，那么这个接口就不是函数接口了，<br>就会导致编译失败。Java 8提供了一个特殊的注解 @FunctionalInterface 来克服上面提到的脆弱性并且显示<br>地表明函数接口的目的（java里所有现存的接口都已经加上了 @FunctionalInterface）。让我们看看一个简单的函数接口定义：   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Functional</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们要记住默认的方法和静态方法（下一节会具体解释）不会违反函数接口的约定，例子如下：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FunctionalDefaultMethods</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">defaultMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>支持Lambda是Java 8最大的卖点，他有巨大的潜力吸引越来越多的开发人员转到这个开发平台来，并且在纯Java里提供最新的函数式编程的概念。对于更多的细节，请参考<a href=\"http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html\" target=\"_blank\" rel=\"external\">官方文档</a>。</p>\n<p>测试原代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Consumer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestLambda</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// ======无返回值的函数接口=============================</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============1================\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 匿名内部类实现Runnable------&gt;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"匿名内部类实现Runnable\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;.run();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用Lambda实现------&gt;</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============2================\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tRunnable r = () -&gt; &#123;<span class=\"comment\">// ()表示方法不需要参数.</span></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"使用Lambda实现Runnable\"</span> + i);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 可直接使用外部变量,但不能进行修改</span></span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\tr.run();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 另外一种Lambda实现简写------&gt;</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============3================\"</span>);</span><br><span class=\"line\">\t\tRunnable r1 = () -&gt; System.out.println(<span class=\"string\">\"hello lambda!\"</span>);</span><br><span class=\"line\">\t\tr1.run();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// =======自定义函数接口============================</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 匿名内部类自定义接口------&gt;</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============4================\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Action() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(String content)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(content);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;.execute(<span class=\"string\">\"jdk1.8之前的匿名内部类实现方式\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// lambda实现------&gt;</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============5================\"</span>);</span><br><span class=\"line\">\t\tAction a = (String content) -&gt; &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(content);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\ta.execute(<span class=\"string\">\"jdk1.8的lambda实现方式\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 还可以更简洁，这个表达式可以被替换成对一个方法的引用，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 因为它只是单个方法，而且它们的参数是相同的------&gt;</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============6================\"</span>);</span><br><span class=\"line\">\t\tAction a1 = System.out::println;</span><br><span class=\"line\">\t\ta1.execute(<span class=\"string\">\"jdk1.8的lambda实现方式_更简洁.\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 然而，如果参数上有任何其它形式的变化，我们就不能直接引用方法，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 必须写全lambda表达式------&gt;</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============7================\"</span>);</span><br><span class=\"line\">\t\tAction a3 = ((String s) -&gt; System.out.println(<span class=\"string\">\"*\"</span> + s + <span class=\"string\">\"*\"</span>));</span><br><span class=\"line\">\t\ta3.execute(<span class=\"string\">\"jdk1.8的lambda实现方式_参数上有其它形式的变化.\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// ======有返回值的函数接口=============================</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 匿名内部类自定义接口------&gt;</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============8================\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;.compare(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// lambda实现 ------&gt;</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============9================\"</span>);</span><br><span class=\"line\">\t\tComparator&lt;Integer&gt; cmp = (x, y) -&gt; &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (x &lt; y) ? -<span class=\"number\">1</span> : ((x &gt; y) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 从中可以看出，单行的lambda表达式似乎是隐含了一个return语句。------&gt;</span></span><br><span class=\"line\">\t\tComparator&lt;Integer&gt; cmp1 = (x, y) -&gt; (x &lt; y) ? -<span class=\"number\">1</span> : ((x &gt; y) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"TestLambda.main().cmp.compare():\"</span> + cmp.compare(<span class=\"number\">0</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"TestLambda.main().cmp1.compare():\"</span> + cmp1.compare(<span class=\"number\">1</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// =====================================更多简洁写法</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============10================\"</span>);</span><br><span class=\"line\">\t\tList&lt;String&gt; list = Arrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String s : list) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(String t)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(t);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;.accept(s);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 最简单的Lambda表达式可以用逗号分隔的参数列表、-&gt;符号和功能语句块来表示。示例如下：</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============11================\"</span>);</span><br><span class=\"line\">\t\tArrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span>).forEach(e -&gt; System.out.println(e));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 请注意到编译器会根据上下文来推测参数的类型，或者你也可以显示地指定参数类型，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 只需要将类型包在括号里。举个例子：</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============12================\"</span>);</span><br><span class=\"line\">\t\tArrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span>).forEach((String e) -&gt; System.out.println(e));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Lambda表达式可能会引用类的成员或者局部变量（会被隐式地转变成final类型），</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面两种写法的效果是一样的：</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============13================\"</span>);</span><br><span class=\"line\">\t\tString separator = <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">\t\tArrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span>).forEach((String e) -&gt; System.out.print(e + separator));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============14================\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> String separator1 = <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">\t\tArrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span>).forEach((String e) -&gt; System.out.print(e + separator1));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果Lambda的功能语句块太复杂，我们可以用大括号包起来，跟普通的Java方法一样，如下：</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============15================\"</span>);</span><br><span class=\"line\">\t\tString separator2 = <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">\t\tArrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span>).forEach((String e) -&gt; &#123;</span><br><span class=\"line\">\t\t\tSystem.out.print(e + separator2);</span><br><span class=\"line\">\t\t\tSystem.out.print(e + separator2);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Lambda表达式可能会有返回值，编译器会根据上下文推断返回值的类型。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果lambda的语句块只有一行，不需要return关键字。下面两个写法是等价的：</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============16================\"</span>);</span><br><span class=\"line\">\t\tArrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span>).sort((e1, e2) -&gt; e1.compareTo(e2));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tArrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span>).sort((e1, e2) -&gt; &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> result = e1.compareTo(e2);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;<span class=\"comment\">// main end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t/</span><br><span class=\"line\">\t * 自定义函数接口</span><br><span class=\"line\">\t * 注解 <span class=\"meta\">@FunctionalInterface</span> 使用这种方式标记的都可以使用Lambda表式,</span><br><span class=\"line\">\t * 它还被javac使用来验证这个接口是否真是一个函数式接口，是否至少有一个抽象方法在里面。</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * 在Java里，lambda表达式是“SAM”(Single Abstract Method)——</span><br><span class=\"line\">\t * 一个含有一个抽象方法的接口(是的，现在接口里可以含有一个非抽象的方法，defender守卫方法)。</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t<span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Action</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(String content)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">cancel</span><span class=\"params\">(String c)</span> </span>&#123;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;<span class=\"comment\">//class end</span></span><br></pre></td></tr></table></figure>\n<p>运行结果:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">==============<span class=\"number\">1</span>================</span><br><span class=\"line\">匿名内部类实现Runnable</span><br><span class=\"line\">==============<span class=\"number\">2</span>================</span><br><span class=\"line\">使用Lambda实现Runnable0</span><br><span class=\"line\">==============<span class=\"number\">3</span>================</span><br><span class=\"line\">hello lambda!</span><br><span class=\"line\">==============<span class=\"number\">4</span>================</span><br><span class=\"line\">jdk1.8之前的匿名内部类实现方式</span><br><span class=\"line\">==============<span class=\"number\">5</span>================</span><br><span class=\"line\">jdk1.8的lambda实现方式</span><br><span class=\"line\">==============<span class=\"number\">6</span>================</span><br><span class=\"line\">jdk1.8的lambda实现方式_更简洁.</span><br><span class=\"line\">==============<span class=\"number\">7</span>================</span><br><span class=\"line\">*jdk1.8的lambda实现方式_参数上有其它形式的变化.*</span><br><span class=\"line\">==============<span class=\"number\">8</span>================</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\">==============<span class=\"number\">9</span>================</span><br><span class=\"line\">TestLambda.main().cmp.compare():-<span class=\"number\">1</span></span><br><span class=\"line\">TestLambda.main().cmp1.compare():<span class=\"number\">0</span></span><br><span class=\"line\">==============<span class=\"number\">10</span>================</span><br><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\">c</span><br><span class=\"line\">==============<span class=\"number\">11</span>================</span><br><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\">d</span><br><span class=\"line\">==============<span class=\"number\">12</span>================</span><br><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\">d</span><br><span class=\"line\">==============<span class=\"number\">13</span>================</span><br><span class=\"line\">a,b,d,==============<span class=\"number\">14</span>================</span><br><span class=\"line\">a,b,d,==============<span class=\"number\">15</span>================</span><br><span class=\"line\">a,a,b,b,d,d,==============<span class=\"number\">16</span>================</span><br></pre></td></tr></table></figure>\n<p>//英文原文：<a href=\"http://zeroturnaround.com/rebellabs/java-8-the-first-taste-of-lambdas/\" target=\"_blank\" rel=\"external\">Java 8: The First Taste of Lambdas</a><br>//译文链接：<a href=\"http://www.aqee.net/java-8-the-first-taste-of-lambdas/\" target=\"_blank\" rel=\"external\">Java 8: The First Taste of Lambdas (译)</a><br>//官方文档：<a href=\"http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html\" target=\"_blank\" rel=\"external\">Java 8: Lambda expressions</a>    </p>\n<h2 id=\"2-2-接口的默认方法和静态方法\"><a href=\"#2-2-接口的默认方法和静态方法\" class=\"headerlink\" title=\"2.2 接口的默认方法和静态方法\"></a>2.2 接口的默认方法和静态方法</h2><p>Java 8增加了两个新的概念在接口声明的时候：默认和静态方法。默认方法和 Trait 有些类似，但是目标不一样。<br>默认方法允许我们在接口里添加新的方法，而不会破坏实现这个接口的已有类的兼容性，也就是说不会强迫实现接口的类实现默认方法。   </p>\n<p>默认方法和抽象方法的区别是抽象方法必须要被实现，默认方法不是。作为替代方式，接口可以提供一个默认的方法实现，<br>所有这个接口的实现类都会通过继承得倒这个方法（如果有需要也可以重写这个方法），让我们来看看下面的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Defaulable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Interfaces now allow default methods, the implementer may or</span></span><br><span class=\"line\">    <span class=\"comment\">// may not implement (override) them.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> String <span class=\"title\">notRequired</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Default implementation\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultableImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Defaulable</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OverridableImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Defaulable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">notRequired</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Overridden implementation\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口 Defaulable 使用 default 关键字声明了一个默认方法 notRequired ()，类 DefaultableImpl 实现了 Defaulable 接口，<br>没有对默认方法做任何修改。另外一个类OverridableImpl重写类默认实现，提供了自己的实现方法。</p>\n<p>Java 8 的另外一个有意思的新特性是接口里可以声明静态方法，并且可以实现。例子如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DefaulableFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Interfaces now allow static methods</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Defaulable <span class=\"title\">create</span><span class=\"params\">( Supplier&lt; Defaulable &gt; supplier )</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> supplier.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面是把接口的静态方法和默认方法放在一起的示例（::new 是构造方法引用，后面会有详细描述）：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">( String[] args )</span> </span>&#123;</span><br><span class=\"line\">    Defaulable defaulable = DefaulableFactory.create( DefaultableImpl::<span class=\"keyword\">new</span> );</span><br><span class=\"line\">    System.out.println( defaulable.notRequired() );</span><br><span class=\"line\"> </span><br><span class=\"line\">    defaulable = DefaulableFactory.create( OverridableImpl::<span class=\"keyword\">new</span> );</span><br><span class=\"line\">    System.out.println( defaulable.notRequired() );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制台的输出如下：</p>\n<pre><code>Default implementation\nOverridden implementation\n</code></pre><p>JVM平台的接口的默认方法实现是很高效的，并且方法调用的字节码指令支持默认方法。<br>默认方法使已经存在的接口可以修改而不会影响编译的过程。<br>java.util.Collection中添加的额外方法就是最好的例子：stream(), parallelStream(), forEach(), removeIf()</p>\n<p>虽然默认方法很强大，但是使用之前一定要仔细考虑是不是真的需要使用默认方法，因为在层级很复杂的情况下很容易引起模糊不清甚至变异错误。更多的详细信息请参考<a href=\"http://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html\" target=\"_blank\" rel=\"external\">官方文档</a>。</p>\n<p>测试原代码:  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Supplier;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestInterfaceDefaultAndStaticMethod</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">( String[] args )</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//::new 是构造方法引用</span></span><br><span class=\"line\">\t    Defaulable defaulable = DefaulableFactory.create( DefaultableImpl::<span class=\"keyword\">new</span> );</span><br><span class=\"line\">\t    System.out.println( defaulable.notRequired() );</span><br><span class=\"line\">\t </span><br><span class=\"line\">\t    defaulable = DefaulableFactory.create( OverridableImpl::<span class=\"keyword\">new</span> );</span><br><span class=\"line\">\t    System.out.println( defaulable.notRequired() );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Defaulable</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//现在允许默认方法接口,实现者可能会或可能不会实现(覆盖)。</span></span><br><span class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">default</span> String <span class=\"title\">notRequired</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> <span class=\"string\">\"Default implementation\"</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultableImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Defaulable</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OverridableImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Defaulable</span> </span>&#123;</span><br><span class=\"line\">\t    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">notRequired</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> <span class=\"string\">\"Overridden implementation\"</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DefaulableFactory</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//现在允许静态方法的接口</span></span><br><span class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">static</span> Defaulable <span class=\"title\">create</span><span class=\"params\">( Supplier&lt; Defaulable &gt; supplier )</span> </span>&#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> supplier.get();</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果:  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Default implementation</span><br><span class=\"line\">Overridden implementation</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3-方法引用\"><a href=\"#2-3-方法引用\" class=\"headerlink\" title=\"2.3   方法引用\"></a>2.3   方法引用</h2><p>方法引用提供了一个很有用的语义来直接访问类或者实例的已经存在的方法或者构造方法。<br>结合Lambda表达式，方法引用使语法结构紧凑简明。不需要复杂的引用。</p>\n<p>下面我们用Car 这个类来做示例，Car这个类有不同的方法定义。让我们来看看java 8支持的4种方法引用。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Car <span class=\"title\">create</span><span class=\"params\">( <span class=\"keyword\">final</span> Supplier&lt; Car &gt; supplier )</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> supplier.get();</span><br><span class=\"line\">    &#125;             </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">collide</span><span class=\"params\">( <span class=\"keyword\">final</span> Car car )</span> </span>&#123;</span><br><span class=\"line\">        System.out.println( <span class=\"string\">\"Collided \"</span> + car.toString() );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">follow</span><span class=\"params\">( <span class=\"keyword\">final</span> Car another )</span> </span>&#123;</span><br><span class=\"line\">        System.out.println( <span class=\"string\">\"Following the \"</span> + another.toString() );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">repair</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println( <span class=\"string\">\"Repaired \"</span> + <span class=\"keyword\">this</span>.toString() );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一种方法引用是构造方法引用，语法是：<code>Class::new</code> ，对于泛型来说语法是：<code>Class&lt;T &gt;::new</code>，请注意构造方法没有参数:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Car car = Car.create( Car::<span class=\"keyword\">new</span> );</span><br><span class=\"line\"><span class=\"keyword\">final</span> List&lt; Car &gt; cars = Arrays.asList( car );</span><br></pre></td></tr></table></figure>\n<p>第二种方法引用是静态方法引用，语法是：<code>Class::static_method</code>请注意这个静态方法只支持一个类型为Car的参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cars.forEach( Car::collide );</span><br></pre></td></tr></table></figure>\n<p>第三种方法引用是类实例的方法引用，语法是：<code>Class::method</code>请注意方法没有参数。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cars.forEach( Car::repair );</span><br></pre></td></tr></table></figure>\n<p>最后一种方法引用是引用特殊类的方法，语法是：<code>instance::method</code>，请注意只接受Car类型的一个参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Car police = Car.create( Car::<span class=\"keyword\">new</span> );</span><br><span class=\"line\">cars.forEach( police::follow );</span><br></pre></td></tr></table></figure>\n<p>运行这些例子我们将会在控制台得到如下信息（Car的实例可能会不一样）： </p>\n<pre><code>Collided com.tu.test.java8.newfeature.TestMethodReferences$Car@a418fc\nRepaired com.tu.test.java8.newfeature.TestMethodReferences$Car@a418fc\nFollowing the com.tu.test.java8.newfeature.TestMethodReferences$Car@a418fc\n</code></pre><p>关于方法引用更多的示例和详细信息，请参考<a href=\"http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<p>测试原代码:   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Supplier;</span><br><span class=\"line\"></span><br><span class=\"line\">/ MethodReferences 方法引用*/</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestMethodReferences</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Car car = Car.create( Car::<span class=\"keyword\">new</span> );</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> List&lt; Car &gt; cars = Arrays.asList( car );</span><br><span class=\"line\">\t\tcars.forEach( Car::collide );</span><br><span class=\"line\">\t\tcars.forEach( Car::repair );</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Car police = Car.create( Car::<span class=\"keyword\">new</span> );</span><br><span class=\"line\">\t\tcars.forEach( police::follow );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Car <span class=\"title\">create</span><span class=\"params\">( <span class=\"keyword\">final</span> Supplier&lt; Car &gt; supplier )</span> </span>&#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> supplier.get();</span><br><span class=\"line\">\t    &#125;             </span><br><span class=\"line\">\t </span><br><span class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">collide</span><span class=\"params\">( <span class=\"keyword\">final</span> Car car )</span> </span>&#123;</span><br><span class=\"line\">\t        System.out.println( <span class=\"string\">\"Collided \"</span> + car.toString() );</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t </span><br><span class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">follow</span><span class=\"params\">( <span class=\"keyword\">final</span> Car another )</span> </span>&#123;</span><br><span class=\"line\">\t        System.out.println( <span class=\"string\">\"Following the \"</span> + another.toString() );</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t </span><br><span class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">repair</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t        System.out.println( <span class=\"string\">\"Repaired \"</span> + <span class=\"keyword\">this</span>.toString() );</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果:   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Collided com.tu.test.java8.newfeature.TestMethodReferences$Car<span class=\"meta\">@a</span>418fc</span><br><span class=\"line\">Repaired com.tu.test.java8.newfeature.TestMethodReferences$Car<span class=\"meta\">@a</span>418fc</span><br><span class=\"line\">Following the com.tu.test.java8.newfeature.TestMethodReferences$Car<span class=\"meta\">@a</span>418fc</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-4-重复注释\"><a href=\"#2-4-重复注释\" class=\"headerlink\" title=\"2.4   重复注释\"></a>2.4   重复注释</h2><p>自从Java 5支持注释以来，注释变得特别受欢迎因而被广泛使用。但是有一个限制，<br>同一个地方的不能使用同一个注释超过一次。 Java 8打破了这个规则，引入了重复注释，允许相同注释在声明使用的时候重复使用超过一次。 </p>\n<p>重复注释本身需要被 @Repeatable 注释。实际上，他不是一个语言上的改变，只是编译器层面的改动，技术层面仍然是一样的。让我们来看看例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Repeatable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\">/ RepeatingAnnotations 重复注释 */</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestRepeatingAnnotations</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\">\t<span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Filters &#123;</span><br><span class=\"line\">\t\tFilter[] value();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\">\t<span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">\t<span class=\"meta\">@Repeatable</span>(Filters.class)</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Filter &#123;</span><br><span class=\"line\">\t\t<span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Filter</span>(<span class=\"string\">\"filter1\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@Filter</span>(<span class=\"string\">\"filter2\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Filterable</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Filter filter : Filterable.class.getAnnotationsByType(Filter.class)) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(filter.value());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看到，注释Filter被 @Repeatable( Filters.class )注释。Filters 只是一个容器，<br>它持有Filter, 编译器尽力向程序员隐藏它的存在。通过这样的方式，Filterable接口可以被Filter注释两次。</p>\n<p>另外，反射的API提供一个新方法getAnnotationsByType() 来返回重复注释的类型<br>(请注意Filterable.class.getAnnotation( Filters.class )将会返回编译器注入的Filters实例）。</p>\n<p>程序的输出将会是这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filter1</span><br><span class=\"line\">filter2</span><br></pre></td></tr></table></figure>\n<p>更多详细信息请参考<a href=\"http://docs.oracle.com/javase/tutorial/java/annotations/repeating.html\" target=\"_blank\" rel=\"external\">官方文档</a>。</p>\n<h2 id=\"2-5-更好的类型推断\"><a href=\"#2-5-更好的类型推断\" class=\"headerlink\" title=\"2.5   更好的类型推断\"></a>2.5   更好的类型推断</h2><p>Java 8在类型推断方面改进了很多，在很多情况下，编译器可以推断参数的类型，从而保持代码的整洁。让我们看看例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Value</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span>&lt;T&gt; T <span class=\"title\">defaultValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getOrDefault</span><span class=\"params\">( T value, T defaultValue )</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ( value != <span class=\"keyword\">null</span> ) ? value : defaultValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里是Value&lt; String &gt;的用法  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TypeInference</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Value&lt;String&gt; value = <span class=\"keyword\">new</span> Value&lt;&gt;();</span><br><span class=\"line\">        value.getOrDefault( <span class=\"string\">\"22\"</span>, Value.defaultValue() );</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参数Value.defaultValue()的类型被编译器推断出来，不需要显式地提供类型。<br>在java 7, 相同的代码不会被编译，需要写成：Value.&lt; String &gt;defaultValue()  </p>\n<h2 id=\"2-6-注解的扩展\"><a href=\"#2-6-注解的扩展\" class=\"headerlink\" title=\"2.6   注解的扩展\"></a>2.6   注解的扩展</h2><p>Java 8扩展了注解可以使用的范围，现在我们几乎可以在所有的地方：<br>局部变量、泛型、超类和接口实现、甚至是方法的Exception声明。一些例子如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"></span><br><span class=\"line\">/ 注解的扩展 */</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestAnnotations</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">\t<span class=\"meta\">@Target</span>(&#123; ElementType.TYPE_USE, ElementType.TYPE_PARAMETER &#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> NonEmpty &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Holder</span>&lt;@<span class=\"title\">NonEmpty</span> <span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> @<span class=\"title\">NonEmpty</span> <span class=\"title\">Object</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> @NonEmpty Exception </span>&#123;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Holder&lt;String&gt; holder = <span class=\"keyword\">new</span> <span class=\"meta\">@NonEmpty</span> Holder&lt;String&gt;();</span><br><span class=\"line\">\t\t<span class=\"meta\">@NonEmpty</span></span><br><span class=\"line\">\t\tCollection&lt;<span class=\"meta\">@NonEmpty</span> String&gt; strings = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Java 8 新增加了两个注解的程序元素类型 <code>ElementType.TYPE_USE</code> 和<code>ElementType.TYPE_PARAMETER</code> ，<br>这两个新类型描述了可以使用注解的新场合。注解处理API（<code>Annotation Processing API</code>）也做了一些细微的改动，来识别这些新添加的注解类型。</p>\n<h1 id=\"3．Java编译器的新特性\"><a href=\"#3．Java编译器的新特性\" class=\"headerlink\" title=\"3．Java编译器的新特性\"></a>3．Java编译器的新特性</h1><h2 id=\"3-1-参数名字\"><a href=\"#3-1-参数名字\" class=\"headerlink\" title=\"3.1 参数名字\"></a>3.1 参数名字</h2><p>很长时间以来，Java程序员想尽办法把参数名字保存在java字节码里，并且让这些参数名字在运行时可用。<br>Java 8 终于把这个需求加入到了Java语言（使用反射API和Parameter.getName() 方法）和字节码里（使用java编译命令javac的–parameters参数）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Parameter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestParameterNames</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tMethod method = TestParameterNames.class.getMethod(<span class=\"string\">\"main\"</span>, String[].class);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> Parameter parameter : method.getParameters()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (parameter.isNamePresent())<span class=\"comment\">//验证参数名是不是可用</span></span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"Parameter: \"</span> + parameter.getName());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你编译这个class的时候没有添加参数–parameters，运行的时候你会得到这个结果：</p>\n<pre><code>Parameter: arg0\n</code></pre><p>编译的时候添加了–parameters参数的话，运行结果会不一样：</p>\n<pre><code>Parameter: args\n</code></pre><p>对于有经验的Maven使用者，–parameters参数可以添加到maven-compiler-plugin的配置部分：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">compilerArgument</span>&gt;</span>-parameters<span class=\"tag\">&lt;/<span class=\"name\">compilerArgument</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>最新版的Eclipse Kepler SR2 提供了编译设置项，如下图所示：</p>\n<p><img src=\"/res/img/blog/2014/10/23/java8_new_feature/ECLIPSE-JAVA-COMPILER.png\" alt=\"ECLIPSE-JAVA-COMPILER\">  </p>\n<p>Picture 1. Configuring Eclipse projects to support new Java 8 compiler –parameters argument.</p>\n<p>store method parameter names(usable via reflection)<br>存储通过反射方法参数名称(通过反射可用)</p>\n<p>额外的，有一个方便的方法Parameter.isNamePresent() 来验证参数名是不是可用。</p>\n<h1 id=\"4．Java-库的新特性\"><a href=\"#4．Java-库的新特性\" class=\"headerlink\" title=\"4．Java  库的新特性\"></a>4．Java  库的新特性</h1><p>Java 8 新添加了很多类，并且扩展了很多现有的类来更好地支持现代并发、函数式编程、日期\\时间等等。</p>\n<h2 id=\"4-1-Optional\"><a href=\"#4-1-Optional\" class=\"headerlink\" title=\"4.1 Optional\"></a>4.1 Optional</h2><p>著名的<a href=\"http://examples.javacodegeeks.com/java-basics/exceptions/java-lang-nullpointerexception-how-to-handle-null-pointer-exception/\" target=\"_blank\" rel=\"external\">NullPointerException</a> 是引起系统失败最常见的原因。<br>很久以前<a href=\"http://code.google.com/p/guava-libraries/\" target=\"_blank\" rel=\"external\">Google Guava</a> 项目引入了Optional作为解决空指针异常的一种方式，<br>不赞成代码被null检查的代码污染，期望程序员写整洁的代码。受Google Guava的鼓励，Optional 现在是Java 8库的一部分。</p>\n<p>Optional 只是一个容器，它可以保存一些类型的值或者null。它提供很多有用的方法，所以没有理由不显式地检查null。请参照java 8的<a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Optional.html\" target=\"_blank\" rel=\"external\">文档</a>查看详细信息。</p>\n<p>让我们看看两个Optional 用法的小例子：一个是允许为空的值，另外一个是不允许为空的值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Optional&lt; String &gt; fullName = Optional.ofNullable( <span class=\"keyword\">null</span> );</span><br><span class=\"line\">System.out.println( <span class=\"string\">\"Full Name is set? \"</span> + fullName.isPresent() );        </span><br><span class=\"line\">System.out.println( <span class=\"string\">\"Full Name: \"</span> + fullName.orElseGet( () -&gt; <span class=\"string\">\"[none]\"</span> ) ); </span><br><span class=\"line\">System.out.println( fullName.map( s -&gt; <span class=\"string\">\"Hey \"</span> + s + <span class=\"string\">\"!\"</span> ).orElse( <span class=\"string\">\"Hey Stranger!\"</span> ) );</span><br></pre></td></tr></table></figure>\n<p>如果Optional实例有非空的值，方法 isPresent() 返回true否则返回false。方法orElseGet提供了回退机制，当Optional的值为空时接受一个方法返回默认值。<br>map()方法转化Optional当前的值并且返回一个新的Optional实例。orElse方法和orElseGet类似，但是它不接受一个方法，而是接受一个默认值。上面代码运行结果如下：</p>\n<pre><code>Full Name is set? false\nFull Name: [none]\nHey Stranger!\n</code></pre><p>让我们大概看看另外一个例子。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Optional&lt; String &gt; firstName = Optional.of( <span class=\"string\">\"Tom\"</span> );</span><br><span class=\"line\">System.out.println( <span class=\"string\">\"First Name is set? \"</span> + firstName.isPresent() );        </span><br><span class=\"line\">System.out.println( <span class=\"string\">\"First Name: \"</span> + firstName.orElseGet( () -&gt; <span class=\"string\">\"[none]\"</span> ) ); </span><br><span class=\"line\">System.out.println( firstName.map( s -&gt; <span class=\"string\">\"Hey \"</span> + s + <span class=\"string\">\"!\"</span> ).orElse( <span class=\"string\">\"Hey Stranger!\"</span> ) );</span><br><span class=\"line\">System.out.println();</span><br></pre></td></tr></table></figure>\n<p>输出如下：</p>\n<pre><code>First Name is set? true\nFirst Name: Tom\nHey Tom!\n</code></pre><p>更多详细信息请参考<a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Optional.html\" target=\"_blank\" rel=\"external\">官方文档</a> 。</p>\n<p>测试原代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Optional;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Function;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Supplier;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOptional</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tOptional&lt;String&gt; fullName = Optional.ofNullable(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Full Name is set? \"</span> + fullName.isPresent());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Full Name: \"</span> + fullName.orElseGet(() -&gt; <span class=\"string\">\"[none]\"</span>));</span><br><span class=\"line\">\t\tSystem.out.println(fullName.map(s -&gt; <span class=\"string\">\"Hey \"</span> + s + <span class=\"string\">\"!\"</span>).orElse(<span class=\"string\">\"Hey Stranger!\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"---------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tOptional&lt;String&gt; firstName = Optional.of(<span class=\"string\">\"Tom\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"First Name is set? \"</span> + firstName.isPresent());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"First Name: \"</span> + firstName.orElseGet(() -&gt; <span class=\"string\">\"[none]\"</span>));</span><br><span class=\"line\">\t\tSystem.out.println(firstName.map(s -&gt; <span class=\"string\">\"Hey \"</span> + s + <span class=\"string\">\"!\"</span>).orElse(<span class=\"string\">\"Hey Stranger!\"</span>));</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//=====复习lambda=============================firstName.orElseGet(() -&gt; \"[none]\")</span></span><br><span class=\"line\">\t\tSupplier&lt;? extends String&gt; other = <span class=\"keyword\">new</span> Supplier&lt;String&gt;() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"[none]\"</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\tfirstName.orElseGet(other);</span><br><span class=\"line\">\t\t<span class=\"comment\">//=====复习lambda=============================firstName.map(s -&gt; \"Hey \" + s + \"!\").orElse(\"Hey Stranger!\")</span></span><br><span class=\"line\">\t\tFunction&lt;String, String&gt; mapper = <span class=\"keyword\">new</span> Function&lt;String, String&gt;() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">apply</span><span class=\"params\">(String t)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Hey \"</span> + t + <span class=\"string\">\"!\"</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\tfirstName.map(mapper).orElse(<span class=\"string\">\"Hey Stranger!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Full Name is set? <span class=\"keyword\">false</span></span><br><span class=\"line\">Full Name: [none]</span><br><span class=\"line\">Hey Stranger!</span><br><span class=\"line\">---------------</span><br><span class=\"line\">First Name is set? <span class=\"keyword\">true</span></span><br><span class=\"line\">First Name: Tom</span><br><span class=\"line\">Hey Tom!</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-Stream\"><a href=\"#4-2-Stream\" class=\"headerlink\" title=\"4.2 Stream\"></a>4.2 Stream</h2><p>新增加的Stream API (java.util.stream)引入了在Java里可以工作的函数式编程。<br>这是目前为止对java库最大的一次功能添加，希望程序员通过编写有效、整洁和简明的代码，能够大大提高生产率。</p>\n<p>Stream API让集合处理简化了很多（我们后面会看到不仅限于Java集合类）。让我们从一个简单的类Task开始来看看Stream的用法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">enum</span> Status &#123;</span><br><span class=\"line\">\tOPEN, CLOSED</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Status status;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Integer points;</span><br><span class=\"line\"></span><br><span class=\"line\">\tTask(<span class=\"keyword\">final</span> Status status, <span class=\"keyword\">final</span> Integer points) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.status = status;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.points = points;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getPoints</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> points;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Status <span class=\"title\">getStatus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> status;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> String.format(<span class=\"string\">\"[%s, %d]\"</span>, status, points);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Task类有一个分数的概念（或者说是伪复杂度），其次是还有一个值可以为OPEN或CLOSED的状态.让我们引入一个Task的小集合作为演示例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> Collection&lt; Task &gt; tasks = Arrays.asList(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Task( Status.OPEN, <span class=\"number\">5</span> ),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Task( Status.OPEN, <span class=\"number\">13</span> ),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Task( Status.CLOSED, <span class=\"number\">8</span> ) </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>第一个问题是所有的开放的Task的点数是多少？在java 8 之前，通常的做法是用foreach迭代。但是Java8里头我们会用Stream。Stream是多个元素的序列，支持串行和并行操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Calculate total points of all active tasks using sum()</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">long</span> totalPointsOfOpenTasks = tasks</span><br><span class=\"line\">    .stream()</span><br><span class=\"line\">    .filter( task -&gt; task.getStatus() == Status.OPEN )</span><br><span class=\"line\">    .mapToInt( Task::getPoints )</span><br><span class=\"line\">    .sum();</span><br><span class=\"line\">         </span><br><span class=\"line\">System.out.println( <span class=\"string\">\"Total points: \"</span> + totalPointsOfOpenTasks );</span><br></pre></td></tr></table></figure>\n<p>控制台的输出将会是：</p>\n<pre><code>Total points: 18\n</code></pre><p>上面代码执行的流程是这样的，首先Task集合会被转化为Stream表示，然后filter操作会过滤掉所有关闭的Task，接下来使用Task::getPoints 方法取得每个Task实例的点数，mapToInt方法会把Task Stream转换成Integer Stream，最后使用Sum方法将所有的点数加起来得到最终的结果。</p>\n<p>在我们看下一个例子之前，我们要记住一些关于Stream的说明。Stream操作被分为中间操作和终点操作。</p>\n<p>中间操作返回一个新的Stream。这些中间操作是延迟的，执行一个中间操作比如filter实际上不会真的做过滤操作，而是创建一个新的Stream，当这个新的Stream被遍历的时候，它里头会包含有原来Stream里符合过滤条件的元素。</p>\n<p>终点操作比如说forEach或者sum会遍历Stream从而产生最终结果或附带结果。终点操作执行完之后，Stream管道就被消费完了，不再可用。在几乎所有的情况下，终点操作都是即时完成对数据的遍历操作。</p>\n<p>Stream的另外一个价值是Stream创造性地支持并行处理。让我们看看下面这个例子，这个例子把所有task的点数加起来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Calculate total points of all tasks</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">double</span> totalPoints = tasks</span><br><span class=\"line\">   .stream()</span><br><span class=\"line\">   .parallel()</span><br><span class=\"line\">   .map( task -&gt; task.getPoints() ) <span class=\"comment\">// or map( Task::getPoints ) </span></span><br><span class=\"line\">   .reduce( <span class=\"number\">0</span>, Integer::sum );</span><br><span class=\"line\">    </span><br><span class=\"line\">System.out.println( <span class=\"string\">\"Total points (all tasks): \"</span> + totalPoints );</span><br></pre></td></tr></table></figure>\n<p>这个例子跟上面那个非常像，除了这个例子里使用了parallel()方法       并且计算最终结果的时候使用了reduce方法。</p>\n<p>输出如下：</p>\n<pre><code>Total points (all tasks): 26.0\n</code></pre><p>经常会有这个一个需求：我们需要按照某种准则来对集合中的元素进行分组。Stream也可以处理这样的需求，下面是一个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Group tasks by their status</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> Map&lt; Status, List&lt; Task &gt; &gt; map = tasks</span><br><span class=\"line\">    .stream()</span><br><span class=\"line\">    .collect( Collectors.groupingBy( Task::getStatus ) );</span><br><span class=\"line\">System.out.println( map );</span><br></pre></td></tr></table></figure>\n<p>控制台的输出如下：</p>\n<pre><code>{CLOSED=[[CLOSED, 8]], OPEN=[[OPEN, 5], [OPEN, 13]]}\n</code></pre><p>让我们来计算整个集合中每个task分数（或权重）的平均值来结束task的例子。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Calculate the weight of each tasks (as percent of total points) </span></span><br><span class=\"line\"><span class=\"keyword\">final</span> Collection&lt; String &gt; result = tasks</span><br><span class=\"line\">    .stream()                                        <span class=\"comment\">// Stream&lt; String &gt;</span></span><br><span class=\"line\">    .mapToInt( Task::getPoints )                     <span class=\"comment\">// IntStream</span></span><br><span class=\"line\">    .asLongStream()                                  <span class=\"comment\">// LongStream</span></span><br><span class=\"line\">    .mapToDouble( points -&gt; points / totalPoints )   <span class=\"comment\">// DoubleStream</span></span><br><span class=\"line\">    .boxed()                                         <span class=\"comment\">// Stream&lt; Double &gt;</span></span><br><span class=\"line\">    .mapToLong( weigth -&gt; ( <span class=\"keyword\">long</span> )( weigth * <span class=\"number\">100</span> ) ) <span class=\"comment\">// LongStream</span></span><br><span class=\"line\">    .mapToObj( percentage -&gt; percentage + <span class=\"string\">\"%\"</span> )      <span class=\"comment\">// Stream&lt; String&gt; </span></span><br><span class=\"line\">    .collect( Collectors.toList() );                 <span class=\"comment\">// List&lt; String &gt; </span></span><br><span class=\"line\">         </span><br><span class=\"line\">System.out.println( result );</span><br></pre></td></tr></table></figure>\n<p>控制台输出如下：</p>\n<pre><code>[19%, 50%, 30%]\n</code></pre><p>最后，就像前面提到的，Stream API不仅仅处理Java集合框架。像从文本文件中逐行读取数据这样典型的I/O操作也很适合用Stream API来处理。下面用一个例子来应证这一点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Path path = <span class=\"keyword\">new</span> File( filename ).toPath();</span><br><span class=\"line\"><span class=\"keyword\">try</span>( Stream&lt; String &gt; lines = Files.lines( path, StandardCharsets.UTF_8 ) ) &#123;</span><br><span class=\"line\">    lines.onClose( () -&gt; System.out.println(<span class=\"string\">\"Done!\"</span>) ).forEach( System.out::println );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Stream的方法onClose 返回一个等价的有额外句柄的Stream，当Stream的close（）方法被调用的时候这个句柄会被执行。</p>\n<p>Stream API、Lambda表达式还有接口默认方法和静态方法支持的方法引用，是Java 8对软件开发的现代范式的响应。</p>\n<p>运行原代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Path;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Stream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStream</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Collection&lt; Task &gt; tasks = Arrays.asList(</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">new</span> Task( Status.OPEN, <span class=\"number\">5</span> ),</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">new</span> Task( Status.OPEN, <span class=\"number\">13</span> ),</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">new</span> Task( Status.CLOSED, <span class=\"number\">8</span> ) </span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//所有的开放的Task的点数是多少？在java 8 之前，通常的做法是用foreach迭代。但是Java8里头我们会用Stream。Stream是多个元素的序列，支持串行和并行操作。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// Calculate total points of all active tasks using sum()</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">long</span> totalPointsOfOpenTasks = tasks</span><br><span class=\"line\">\t\t    .stream()</span><br><span class=\"line\">\t\t    .filter( task -&gt; task.getStatus() == Status.OPEN )</span><br><span class=\"line\">\t\t    .mapToInt( Task::getPoints )</span><br><span class=\"line\">\t\t    .sum();</span><br><span class=\"line\">\t\t         </span><br><span class=\"line\">\t\tSystem.out.println( <span class=\"string\">\"Total points: \"</span> + totalPointsOfOpenTasks );</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"=========================================\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// Calculate total points of all tasks</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">double</span> totalPoints = tasks</span><br><span class=\"line\">\t\t   .stream()</span><br><span class=\"line\">\t\t   .parallel()</span><br><span class=\"line\">\t\t   .map( task -&gt; task.getPoints() ) <span class=\"comment\">// or map( Task::getPoints ) </span></span><br><span class=\"line\">\t\t   .reduce( <span class=\"number\">0</span>, Integer::sum );</span><br><span class=\"line\">\t\t    </span><br><span class=\"line\">\t\tSystem.out.println( <span class=\"string\">\"Total points (all tasks): \"</span> + totalPoints );</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"=========================================\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// Group tasks by their status</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Map&lt;Status, List&lt;Task&gt;&gt; map = tasks</span><br><span class=\"line\">\t\t\t\t.stream()</span><br><span class=\"line\">\t\t\t\t.collect(Collectors.groupingBy(Task::getStatus));</span><br><span class=\"line\">\t\tSystem.out.println(map);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"=========================================\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// Calculate the weight of each tasks (as percent of total points) </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Collection&lt; String &gt; result = tasks</span><br><span class=\"line\">\t\t    .stream()                                        <span class=\"comment\">// Stream&lt; String &gt;</span></span><br><span class=\"line\">\t\t    .mapToInt( Task::getPoints )                     <span class=\"comment\">// IntStream</span></span><br><span class=\"line\">\t\t    .asLongStream()                                  <span class=\"comment\">// LongStream</span></span><br><span class=\"line\">\t\t    .mapToDouble( points -&gt; points / totalPoints )   <span class=\"comment\">// DoubleStream</span></span><br><span class=\"line\">\t\t    .boxed()                                         <span class=\"comment\">// Stream&lt; Double &gt;</span></span><br><span class=\"line\">\t\t    .mapToLong( weigth -&gt; ( <span class=\"keyword\">long</span> )( weigth * <span class=\"number\">100</span> ) ) <span class=\"comment\">// LongStream</span></span><br><span class=\"line\">\t\t    .mapToObj( percentage -&gt; percentage + <span class=\"string\">\"%\"</span> )      <span class=\"comment\">// Stream&lt; String&gt; </span></span><br><span class=\"line\">\t\t    .collect( Collectors.toList() );                 <span class=\"comment\">// List&lt; String &gt; </span></span><br><span class=\"line\">\t\t         </span><br><span class=\"line\">\t\tSystem.out.println( result );</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"=========================================\"</span>);</span><br><span class=\"line\">\t\tStream&lt;String&gt; lines;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">final</span> Path path = <span class=\"keyword\">new</span> File(<span class=\"string\">\"./text/Test.txt\"</span>).toPath();</span><br><span class=\"line\">\t\t\tlines = Files.lines(path, StandardCharsets.UTF_8);</span><br><span class=\"line\">\t\t\tlines.onClose(() -&gt; System.out.println(<span class=\"string\">\"Done!\"</span>)).forEach(System.out::println);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">enum</span> Status &#123;</span><br><span class=\"line\">\t\tOPEN, CLOSED</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Status status;</span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Integer points;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tTask(<span class=\"keyword\">final</span> Status status, <span class=\"keyword\">final</span> Integer points) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.status = status;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.points = points;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getPoints</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> points;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> Status <span class=\"title\">getStatus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> status;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> String.format(<span class=\"string\">\"[%s, %d]\"</span>, status, points);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Total points: <span class=\"number\">18</span></span><br><span class=\"line\">=========================================</span><br><span class=\"line\"><span class=\"function\">Total <span class=\"title\">points</span> <span class=\"params\">(all tasks)</span>: 26.0</span><br><span class=\"line\"></span>=========================================</span><br><span class=\"line\">&#123;OPEN=[[OPEN, <span class=\"number\">5</span>], [OPEN, <span class=\"number\">13</span>]], CLOSED=[[CLOSED, <span class=\"number\">8</span>]]&#125;</span><br><span class=\"line\">=========================================</span><br><span class=\"line\">[<span class=\"number\">19</span>%, <span class=\"number\">50</span>%, <span class=\"number\">30</span>%]</span><br><span class=\"line\">=========================================</span><br><span class=\"line\">hello</span><br><span class=\"line\">hellohello</span><br><span class=\"line\">hellohellohello</span><br></pre></td></tr></table></figure>\n<p>再来点案例:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">List&lt;String&gt; stringCollection = Arrays.asList(<span class=\"string\">\"ddd2\"</span>, <span class=\"string\">\"aaa2\"</span>, <span class=\"string\">\"bbb1\"</span>, <span class=\"string\">\"aaa1\"</span>, <span class=\"string\">\"bbb3\"</span>, <span class=\"string\">\"ccc\"</span>, <span class=\"string\">\"bbb2\"</span>, <span class=\"string\">\"ddd1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Filter 过滤</span></span><br><span class=\"line\">stringCollection.stream().filter((s) -&gt; s.startsWith(<span class=\"string\">\"a\"</span>)).forEach(System.out::println);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"=========1==========\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Sort 排序</span></span><br><span class=\"line\">stringCollection.stream().sorted().filter((s) -&gt; s.startsWith(<span class=\"string\">\"a\"</span>)).forEach(System.out::println);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"=========2==========\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Map 映射</span></span><br><span class=\"line\">stringCollection.stream().map(String::toUpperCase).sorted((a, b) -&gt; b.compareTo(a))</span><br><span class=\"line\">\t\t.forEach(System.out::println);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"=========3==========\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Match 匹配</span></span><br><span class=\"line\">System.out.println(stringCollection.stream().anyMatch((s) -&gt; s.startsWith(<span class=\"string\">\"a\"</span>)));</span><br><span class=\"line\">System.out.println(stringCollection.stream().allMatch((s) -&gt; s.startsWith(<span class=\"string\">\"a\"</span>)));</span><br><span class=\"line\">System.out.println(stringCollection.stream().noneMatch((s) -&gt; s.startsWith(<span class=\"string\">\"a\"</span>)));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"=========4==========\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Count 计数 (最终操作)</span></span><br><span class=\"line\">System.out.println(stringCollection.stream().count());</span><br><span class=\"line\">System.out.println(stringCollection.stream().filter((a) -&gt; a.startsWith(<span class=\"string\">\"a\"</span>)).count());</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"=========5==========\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Reduce 规约 (最终操作)</span></span><br><span class=\"line\">stringCollection.stream().sorted().reduce((s1, s2) -&gt; s1 + <span class=\"string\">\"#\"</span> + s2).ifPresent(System.out::println);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"========6===========\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 并行Streams</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> max = <span class=\"number\">1000000</span>;</span><br><span class=\"line\">List&lt;String&gt; values = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(max);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; max; i++) &#123;</span><br><span class=\"line\">\tvalues.add(UUID.randomUUID().toString());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> t0 = System.nanoTime();</span><br><span class=\"line\"><span class=\"comment\">// 串行排序 sequential sort took:1226 ms</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> count = values.stream().sorted().count();</span><br><span class=\"line\">System.out.println(count);</span><br><span class=\"line\"><span class=\"keyword\">long</span> t1 = System.nanoTime();</span><br><span class=\"line\"><span class=\"keyword\">long</span> millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);</span><br><span class=\"line\">System.out.println(String.format(<span class=\"string\">\"sequential sort took:%d ms\"</span>, millis));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> t2 = System.nanoTime();</span><br><span class=\"line\"><span class=\"comment\">// 并行排序 sequential sort took:951 ms</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> count1 = values.parallelStream().sorted().count();</span><br><span class=\"line\">System.out.println(count1);</span><br><span class=\"line\"><span class=\"keyword\">long</span> t3 = System.nanoTime();</span><br><span class=\"line\"><span class=\"keyword\">long</span> millis1 = TimeUnit.NANOSECONDS.toMillis(t3 - t2);</span><br><span class=\"line\">System.out.println(String.format(<span class=\"string\">\"parallel sort took:%d ms\"</span>, millis1));</span><br></pre></td></tr></table></figure>\n<p>案例运行结果:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">aaa2</span><br><span class=\"line\">aaa1</span><br><span class=\"line\">=========1==========</span><br><span class=\"line\">aaa1</span><br><span class=\"line\">aaa2</span><br><span class=\"line\">=========2==========</span><br><span class=\"line\">DDD2</span><br><span class=\"line\">DDD1</span><br><span class=\"line\">CCC</span><br><span class=\"line\">BBB3</span><br><span class=\"line\">BBB2</span><br><span class=\"line\">BBB1</span><br><span class=\"line\">AAA2</span><br><span class=\"line\">AAA1</span><br><span class=\"line\">=========3==========</span><br><span class=\"line\">true</span><br><span class=\"line\">false</span><br><span class=\"line\">false</span><br><span class=\"line\">=========4==========</span><br><span class=\"line\">8</span><br><span class=\"line\">2</span><br><span class=\"line\">=========5==========</span><br><span class=\"line\">aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2</span><br><span class=\"line\">========6===========</span><br><span class=\"line\">1000000</span><br><span class=\"line\">sequential sort took:1258 ms</span><br><span class=\"line\">1000000</span><br><span class=\"line\">parallel sort took:1061 ms</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3日期时间API（JSR310\"><a href=\"#4-3日期时间API（JSR310\" class=\"headerlink\" title=\"4.3日期时间API（JSR310)\"></a>4.3日期时间API（JSR310)</h2><p>Java 8引入了新的日期时间API（JSR 310）改进了日期时间的管理。日期和时间管理一直是Java开发人员最痛苦的问题。java.util.Date和后来的java.util.Calendar一点也没有改变这个情况（甚至让人们更加迷茫）。</p>\n<p>因为上面这些原因，产生了<a href=\"http://www.joda.org/joda-time/\" target=\"_blank\" rel=\"external\">Joda-Time</a> ，可以替换Java的日期时间API。Joda-Time深刻影响了 Java 8新的日期时间API，Java 8吸收了Joda-Time 的精华。新的java.time包包含了所有关于日期、时间、日期时间、时区、Instant（跟日期类似但精确到纳秒）、duration（持续时间）和时钟操作的类。设计这些API的时候很认真地考虑了这些类的不变性（从java.util.Calendar吸取的痛苦教训）。如果需要修改时间对象，会返回一个新的实例。</p>\n<p>让我们看看一些关键的类和用法示例。第一个类是Clock，Clock使用时区来访问当前的instant, date和time。Clock类可以替换 System.currentTimeMillis() 和 TimeZone.getDefault().</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the system clock as UTC offset</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> Clock clock = Clock.systemUTC();</span><br><span class=\"line\">System.out.println( clock.instant() );</span><br><span class=\"line\">System.out.println( clock.millis() );</span><br></pre></td></tr></table></figure>\n<p>控制台输出如下：</p>\n<pre><code>2015-06-25T07:10:58.746Z\n1435216258848\n</code></pre><p>其他类我们看看LocalTime和LocalDate。LocalDate只保存有ISO-8601日期系统的日期部分，有时区信息，相应地，LocalTime只保存ISO-8601日期系统的时间部分，没有时区信息。LocalDate和LocalTime都可以从Clock对象创建。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the local date and local time</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> LocalDate date = LocalDate.now();</span><br><span class=\"line\"><span class=\"keyword\">final</span> LocalDate dateFromClock = LocalDate.now( clock );</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println( date );</span><br><span class=\"line\">System.out.println( dateFromClock );</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"================\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Get the local date and local time</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> LocalTime time = LocalTime.now();</span><br><span class=\"line\"><span class=\"keyword\">final</span> LocalTime timeFromClock = LocalTime.now( clock );</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println( time );</span><br><span class=\"line\">System.out.println( timeFromClock );</span><br></pre></td></tr></table></figure>\n<p>控制台输出如下：</p>\n<pre><code>2015-06-25\n2015-06-25\n15:12:07.912\n07:12:07.912\n</code></pre><p>LocalDateTime类合并了LocalDate和LocalTime，它保存有ISO-8601日期系统的日期和时间，但是没有时区信息。让我们看一个简单的例子。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the local date/time</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> LocalDateTime datetime = LocalDateTime.now();</span><br><span class=\"line\"><span class=\"keyword\">final</span> LocalDateTime datetimeFromClock = LocalDateTime.now( clock );</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println( datetime );</span><br><span class=\"line\">System.out.println( datetimeFromClock );</span><br></pre></td></tr></table></figure>\n<p>控制台输出如下：</p>\n<pre><code>2015-06-25T15:14:12.139\n2015-06-25T07:14:12.139\n</code></pre><p>如果您需要一个类持有日期时间和时区信息，可以使用ZonedDateTime，它保存有ISO-8601日期系统的日期和时间，而且有时区信息。让我们看一些例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the zoned date/time</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> ZonedDateTime zonedDatetime = ZonedDateTime.now();</span><br><span class=\"line\"><span class=\"keyword\">final</span> ZonedDateTime zonedDatetimeFromClock = ZonedDateTime.now( clock );</span><br><span class=\"line\"><span class=\"keyword\">final</span> ZonedDateTime zonedDatetimeFromZone = ZonedDateTime.now( ZoneId.of( <span class=\"string\">\"America/Los_Angeles\"</span> ) );</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println( zonedDatetime );</span><br><span class=\"line\">System.out.println( zonedDatetimeFromClock );</span><br><span class=\"line\">System.out.println( zonedDatetimeFromZone );</span><br></pre></td></tr></table></figure>\n<p>控制台输出如下：</p>\n<pre><code>2015-06-25T15:14:51.607+08:00[Asia/Shanghai]\n2015-06-25T07:14:51.607Z\n2015-06-25T00:14:51.610-07:00[America/Los_Angeles]\n</code></pre><p>最后让我们看看Duration类，Duration持有的时间精确到纳秒。它让我们很容易计算两个日期中间的差异。让我们来看一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Get duration between two dates</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> LocalDateTime from = LocalDateTime.of( <span class=\"number\">2015</span>, Month.JUNE, <span class=\"number\">25</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> );</span><br><span class=\"line\"><span class=\"keyword\">final</span> LocalDateTime to = LocalDateTime.of( <span class=\"number\">2016</span>, Month.JUNE, <span class=\"number\">25</span>, <span class=\"number\">23</span>, <span class=\"number\">59</span>, <span class=\"number\">59</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> Duration duration = Duration.between( from, to );</span><br><span class=\"line\">System.out.println( <span class=\"string\">\"Duration in days: \"</span> + duration.toDays() );</span><br><span class=\"line\">System.out.println( <span class=\"string\">\"Duration in hours: \"</span> + duration.toHours() );</span><br></pre></td></tr></table></figure>\n<p>上面的例子计算了两个日期（2015年5月25日和2016年5月25日）之间的持续时间（基于天数和小时）输出如下：</p>\n<pre><code>Duration in days: 366\nDuration in hours: 8807\n</code></pre><p>对于Java 8的新日期时间的总体印象还是比较积极的。一部分是因为有经历实战的Joda-Time的基础，<br>还有一部分是因为日期时间终于被认真对待而且听取了开发人员的声音。关于更多的详细信息，请参考<a href=\"http://docs.oracle.com/javase/tutorial/datetime/index.html\" target=\"_blank\" rel=\"external\">官方文档</a>。</p>\n<h2 id=\"4-4-Nashorn-javascript引擎\"><a href=\"#4-4-Nashorn-javascript引擎\" class=\"headerlink\" title=\"4.4   Nashorn javascript引擎\"></a>4.4   Nashorn javascript引擎</h2><p>Java 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用。Nashorn javascript引擎只是javax.script.ScriptEngine另一个实现，而且规则也一样，允许Java和JavaScript互相操作。这里有个小例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ScriptEngineManager manager = <span class=\"keyword\">new</span> ScriptEngineManager();</span><br><span class=\"line\">ScriptEngine engine = manager.getEngineByName( <span class=\"string\">\"JavaScript\"</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println( engine.getClass().getName() );</span><br><span class=\"line\">System.out.println( <span class=\"string\">\"Result:\"</span> + engine.eval( <span class=\"string\">\"function f() &#123; return 1; &#125;; f() + 1;\"</span> ) );</span><br></pre></td></tr></table></figure>\n<p>输出如下：</p>\n<pre><code>jdk.nashorn.api.scripting.NashornScriptEngine\nResult: 2\n</code></pre><h2 id=\"4-5-Base64\"><a href=\"#4-5-Base64\" class=\"headerlink\" title=\"4.5   Base64\"></a>4.5   Base64</h2><p>对Base64的支持最终成了Java 8标准库的一部分，非常简单易用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBase64</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> String text = <span class=\"string\">\"Base64 finally in Java 8!\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> String encoded = Base64.getEncoder().encodeToString(text.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">\t\tSystem.out.println(encoded);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> String decoded = <span class=\"keyword\">new</span> String(Base64.getDecoder().decode(encoded), StandardCharsets.UTF_8);</span><br><span class=\"line\">\t\tSystem.out.println(decoded);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制台输出的编码和解码的字符串</p>\n<pre><code>QmFzZTY0IGZpbmFsbHkgaW4gSmF2YSA4IQ==\nBase64 finally in Java 8!\n</code></pre><p>新的Base64API也支持URL和MINE的编码解码。</p>\n<p>(Base64.getUrlEncoder() / Base64.getUrlDecoder(), Base64.getMimeEncoder() / Base64.getMimeDecoder()).</p>\n<h2 id=\"4-6-并行数组\"><a href=\"#4-6-并行数组\" class=\"headerlink\" title=\"4.6   并行数组\"></a>4.6   并行数组</h2><p>Java 8新增加了很多方法支持并行的数组处理。最重要的大概是parallelSort()这个方法显著地使排序在多核计算机上速度加快。下面的小例子演示了这个新的方法（parallelXXX）的行为。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadLocalRandom;</span><br><span class=\"line\"></span><br><span class=\"line\">/ 并行数组 */</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestParallelArray</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span>[] arrayOfLong = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[<span class=\"number\">20000</span>];</span><br><span class=\"line\">\t\tArrays.parallelSetAll(arrayOfLong, index -&gt; ThreadLocalRandom.current().nextInt(<span class=\"number\">1000000</span>));</span><br><span class=\"line\">\t\tArrays.stream(arrayOfLong).limit(<span class=\"number\">10</span>).forEach(i -&gt; System.out.print(i + <span class=\"string\">\" \"</span>));</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tArrays.parallelSort(arrayOfLong);</span><br><span class=\"line\">\t\tArrays.stream(arrayOfLong).limit(<span class=\"number\">10</span>).forEach(i -&gt; System.out.print(i + <span class=\"string\">\" \"</span>));</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一小段代码使用parallelSetAll() t方法填充这个长度是2000的数组，然后使用parallelSort() 排序。<br>这个程序输出了排序前和排序后的10个数字来验证数组真的已经被排序了。示例可能的输出如下（请注意这些数字是随机产生的）</p>\n<pre><code>650193 416424 740906 224816 806179 81842 605508 85078 206531 792115 \n28 57 91 98 184 274 341 342 442 469 \n</code></pre><h2 id=\"4-7-并发\"><a href=\"#4-7-并发\" class=\"headerlink\" title=\"4.7   并发\"></a>4.7   并发</h2><p>在新增Stream机制与lambda的基础之上，在java.util.concurrent.ConcurrentHashMap中加入了一些新方法来支持聚集操作。<br>同时也在java.util.concurrent.ForkJoinPool类中加入了一些新方法来支持共有资源池（common pool）。</p>\n<p>新增的java.util.concurrent.locks.StampedLock类提供一直基于容量的锁，<br>这种锁有三个模型来控制读写操作（它被认为是不太有名的java.util.concurrent.locks.ReadWriteLock类的替代者）。</p>\n<p>在java.util.concurrent.atomic包中还增加了下面这些类：</p>\n<pre><code>DoubleAccumulator\nDoubleAdder\nLongAccumulator\nLongAdder\n</code></pre><h1 id=\"5-新的工具\"><a href=\"#5-新的工具\" class=\"headerlink\" title=\"5.  新的工具\"></a>5.  新的工具</h1><p>Java 8 提供了一些新的命令行工具，在这节里我们将会介绍它们中最有趣的部分。</p>\n<h2 id=\"5-1-Nashorn引擎：jjs\"><a href=\"#5-1-Nashorn引擎：jjs\" class=\"headerlink\" title=\"5.1  Nashorn引擎：jjs\"></a>5.1  Nashorn引擎：jjs</h2><p>jjs是个基于Nashorn引擎的命令行工具。它接受一些JavaScript源代码为参数，并且执行这些源代码。例如，我们创建一个具有如下内容的func.js文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">print( f() + <span class=\"number\">1</span> );</span><br></pre></td></tr></table></figure>\n<p>我们可以把这个文件作为参数传递给jjs使得这个文件可以在命令行中执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span style=<span class=\"string\">\"font-size: 13px;\"</span>&gt;jjs func.js&lt;<span class=\"regexp\">/span&gt;</span></span><br></pre></td></tr></table></figure>\n<p>输出结果如下</p>\n<pre><code>2\n</code></pre><p>更多的详细信息请参考<a href=\"http://docs.oracle.com/javase/8/docs/technotes/tools/unix/jjs.html\" target=\"_blank\" rel=\"external\">官方文档</a>。</p>\n<h2 id=\"5-2-类依赖分析工具：jdeps\"><a href=\"#5-2-类依赖分析工具：jdeps\" class=\"headerlink\" title=\"5.2 类依赖分析工具：jdeps\"></a>5.2 类依赖分析工具：jdeps</h2><p>Jdeps是一个功能强大的命令行工具，它可以帮我们显示出包层级或者类层级java类文件的依赖关系。它接受class文件、目录、jar文件作为输入，默认情况下，jdeps会输出到控制台。</p>\n<p>作为例子，让我们看看现在很流行的Spring框架的库的依赖关系报告。为了让报告短一些，我们只分析一个jar: org.springframework.core-3.0.5.RELEASE.jar.</p>\n<p>jdeps org.springframework.core-3.0.5.RELEASE.jar 这个命令输出内容很多，我们只看其中的一部分，这些依赖关系根绝包来分组，如果依赖关系在classpath里找不到，就会显示not found.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.core-<span class=\"number\">3.0</span>.5.RELEASE.jar -&gt; C:\\Program Files\\Java\\jdk1.8.0\\jre\\lib\\rt.jar</span><br><span class=\"line\">   org.springframework.core (org.springframework.core-<span class=\"number\">3.0</span>.5.RELEASE.jar)</span><br><span class=\"line\">      -&gt; java.io</span><br><span class=\"line\">      -&gt; java.lang</span><br><span class=\"line\">      -&gt; java.lang.annotation</span><br><span class=\"line\">      -&gt; java.lang.ref</span><br><span class=\"line\">      -&gt; java.lang.reflect</span><br><span class=\"line\">      -&gt; java.util</span><br><span class=\"line\">      -&gt; java.util.concurrent</span><br><span class=\"line\">      -&gt; org.apache.commons.logging                         not found</span><br><span class=\"line\">      -&gt; org.springframework.asm                            not found</span><br><span class=\"line\">      -&gt; org.springframework.asm.commons                    not found</span><br><span class=\"line\">   org.springframework.core.annotation (org.springframework.core-<span class=\"number\">3.0</span>.5.RELEASE.jar)</span><br><span class=\"line\">      -&gt; java.lang</span><br><span class=\"line\">      -&gt; java.lang.annotation</span><br><span class=\"line\">      -&gt; java.lang.reflect</span><br><span class=\"line\">      -&gt; java.util</span><br></pre></td></tr></table></figure>\n<p>更多的详细信息请参考<a href=\"http://docs.oracle.com/javase/8/docs/technotes/tools/unix/jdeps.html\" target=\"_blank\" rel=\"external\">官方文档</a>。</p>\n<h1 id=\"6-JVM的新特性\"><a href=\"#6-JVM的新特性\" class=\"headerlink\" title=\"6. JVM的新特性\"></a>6. JVM的新特性</h1><p>JVM内存永久区已经被metaspace替换（JEP 122）。JVM参数 -XX:PermSize 和 –XX:MaxPermSize被XX:MetaSpaceSize 和 -XX:MaxMetaspaceSize代替。</p>\n<h1 id=\"7-资源\"><a href=\"#7-资源\" class=\"headerlink\" title=\"7. 资源\"></a>7. 资源</h1><p>下面一些文章从不同层面上深度讨论了Java 8的特性：</p>\n<p><a href=\"http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html\" target=\"_blank\" rel=\"external\">What’s New in JDK 8</a><br><a href=\"http://docs.oracle.com/javase/tutorial/\" target=\"_blank\" rel=\"external\">The Java Tutorials</a><br><a href=\"http://blog.arungupta.me/2014/03/wildfly8-jdk8-netbeans8-javaee7-excellent-combo-enterprise-java/\" target=\"_blank\" rel=\"external\">WildFly 8, JDK 8, NetBeans 8, Java EE 7</a><br><a href=\"http://winterbe.com/posts/2014/03/16/java-8-tutorial/\" target=\"_blank\" rel=\"external\">Java 8 Tutorial</a><br><a href=\"http://marxsoftware.blogspot.ca/2014/03/jdeps.html\" target=\"_blank\" rel=\"external\">JDK 8 Command-line Static Dependency Checker</a><br><a href=\"http://marxsoftware.blogspot.ca/2014/03/illuminating-javadoc-of-jdk-8.html\" target=\"_blank\" rel=\"external\">The Illuminating Javadoc of JDK 8</a><br><a href=\"http://blog.jooq.org/2014/04/04/java-8-friday-the-dark-side-of-java-8/\" target=\"_blank\" rel=\"external\">The Dark Side of Java 8</a><br><a href=\"http://www.eclipse.org/downloads/java8/\" target=\"_blank\" rel=\"external\">Installing Java™ 8 Support in Eclipse Kepler SR2</a><br><a href=\"http://www.baeldung.com/java8\" target=\"_blank\" rel=\"external\">Java 8</a><br><a href=\"http://www.oracle.com/technetwork/articles/java/jf14-nashorn-2126515.html\" target=\"_blank\" rel=\"external\">Oracle Nashorn. A Next-Generation JavaScript Engine for the JVM</a><br><a href=\"http://ifeve.com/java-8-features-tutorial/\" target=\"_blank\" rel=\"external\">Java 8 特性 – 终极手册</a><br><a href=\"http://www.jb51.net/article/48304.htm\" target=\"_blank\" rel=\"external\">JAVA8 十大新特性详解</a>   </p>\n<h1 id=\"Demo下载\"><a href=\"#Demo下载\" class=\"headerlink\" title=\"Demo下载\"></a>Demo下载</h1><p>本文案例Demo<a href=\"/res/file/blog/2014/10/23/java8_new_feature/Java8NewFeature.rar\">下载</a></p>\n","excerpt":"<style>\nh3 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nh6 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\n</style>\n\n<p>目录:   </p>\n<ul>\n<li>1．简介</li>\n<li>2．Java的新特性<ul>\n<li>2.1 Lambda表达式和函数式接口</li>\n<li>2.2 接口的默认方法和静态方法</li>\n<li>2.3 方法引用</li>\n<li>2.4 重复注释</li>\n<li>2.5 更好的类型推断</li>\n<li>2.6 注解的扩展</li>\n</ul>\n</li>\n<li>3．Java编译器的新特性<ul>\n<li>3.1 参数名字</li>\n</ul>\n</li>\n<li>4．Java 库的新特性<ul>\n<li>4.1 Optional</li>\n<li>4.2 Stream</li>\n<li>4.3日期时间API（JSR310)</li>\n<li>4.4 Nashorn javascript引擎</li>\n<li>4.5 Base64</li>\n<li>4.6 并行数组</li>\n<li>4.7 并发</li>\n</ul>\n</li>\n<li><ol>\n<li>新的工具<ul>\n<li>5.1 Nashorn引擎：jjs</li>\n<li>5.2 类依赖分析工具：jdeps</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><ol>\n<li>JVM的新特性</li>\n</ol>\n</li>\n<li><ol>\n<li>资源</li>\n</ol>\n</li>\n</ul>","more":"<h1 id=\"1．简介\"><a href=\"#1．简介\" class=\"headerlink\" title=\"1．简介\"></a>1．简介</h1><p>毫无疑问，Java 8是自Java  5（2004年）发布以来Java语言最大的一次版本升级，Java 8带来了很多的新特性，比如编译器、类库、开发工具和JVM（Java虚拟机）。在这篇教程中我们将会学习这些新特性，并通过真实例子演示说明它们适用的场景。</p>\n<p>本教程由下面几部分组成，它们分别涉及到Java平台某一特定方面的内容：</p>\n<p>语言<br>编译器<br>类库<br>开发工具<br>运行时（Java虚拟机）  </p>\n<h1 id=\"2．Java的新特性\"><a href=\"#2．Java的新特性\" class=\"headerlink\" title=\"2．Java的新特性\"></a>2．Java的新特性</h1><p>总体来说，Java 8是一个大的版本升级。有人可能会说，Java 8的新特性非常令人期待，但是也要花费大量的时间去学习。这一节我们会讲到这些新特性。</p>\n<h2 id=\"2-1-Lambda表达式和函数式接口\"><a href=\"#2-1-Lambda表达式和函数式接口\" class=\"headerlink\" title=\"2.1 Lambda表达式和函数式接口\"></a>2.1 Lambda表达式和函数式接口</h2><p>Lambda表达式（也叫做闭包）是Java 8中最大的也是期待已久的变化。它允许我们将一个函数当作方法的参数（传递函数），<br>或者说把代码当作数据，这是每个函数式编程者熟悉的概念。很多基于JVM平台的语言一开始就支持Lambda表达式，但是Java程序员没有选择，只能使用匿名内部类来替代Lambda表达式。</p>\n<p>Lambda表达式的设计被讨论了很久，而且花费了很多的功夫来交流。不过最后取得了一个折中的办法，得到了一个新的简明并且紧凑的Lambda表达式结构。最简单的Lambda表达式可以用逗号分隔的参数列表、-&gt;符号和功能语句块来表示。示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Arrays.asList( <span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span> ).forEach( e -&gt; System.out.println( e ) );</span><br></pre></td></tr></table></figure>\n<p>请注意到编译器会根据上下文来推测参数的类型，或者你也可以显示地指定参数类型，只需要将类型包在括号里。举个例子：   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Arrays.asList( <span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span> ).forEach( ( String e ) -&gt; System.out.println( e ) );</span><br></pre></td></tr></table></figure>\n<p>如果Lambda的功能语句块太复杂，我们可以用大括号包起来，跟普通的Java方法一样，如下：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String separator = <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">Arrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span>).forEach((String e) -&gt; &#123;</span><br><span class=\"line\">\tSystem.out.print(e + separator2);</span><br><span class=\"line\">\tSystem.out.print(e + separator2);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Lambda表达式可能会引用类的成员或者局部变量（会被隐式地转变成final类型），下面两种写法的效果是一样的：   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String separator = <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">Arrays.asList( <span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span> ).forEach(</span><br><span class=\"line\">    ( String e ) -&gt; System.out.print( e + separator ) );</span><br></pre></td></tr></table></figure>\n<p>和</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> String separator = <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">Arrays.asList( <span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span> ).forEach(</span><br><span class=\"line\">    ( String e ) -&gt; System.out.print( e + separator ) );</span><br></pre></td></tr></table></figure>\n<p>Lambda表达式可能会有返回值，编译器会根据上下文推断返回值的类型。如果lambda的语句块只有一行，不需要return关键字。下面两个写法是等价的：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Arrays.asList( <span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span> ).sort( ( e1, e2 ) -&gt; e1.compareTo( e2 ) );</span><br></pre></td></tr></table></figure>\n<p>和</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Arrays.asList( <span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span> ).sort( ( e1, e2 ) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = e1.compareTo( e2 );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125; );</span><br></pre></td></tr></table></figure>\n<p>语言的设计者们思考了很多如何让现有的功能和lambda表达式友好兼容。于是就有了函数接口这个概念。函数接口是一种只有一个方法的接口，像这样地，函数接口可以隐式地转换成lambda表达式。</p>\n<p>java.lang.Runnable 和java.util.concurrent.Callable是函数接口两个最好的例子。<br>但是在实践中，函数接口是非常脆弱的，只要有人在接口里添加多一个方法，那么这个接口就不是函数接口了，<br>就会导致编译失败。Java 8提供了一个特殊的注解 @FunctionalInterface 来克服上面提到的脆弱性并且显示<br>地表明函数接口的目的（java里所有现存的接口都已经加上了 @FunctionalInterface）。让我们看看一个简单的函数接口定义：   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Functional</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们要记住默认的方法和静态方法（下一节会具体解释）不会违反函数接口的约定，例子如下：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FunctionalDefaultMethods</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">defaultMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>支持Lambda是Java 8最大的卖点，他有巨大的潜力吸引越来越多的开发人员转到这个开发平台来，并且在纯Java里提供最新的函数式编程的概念。对于更多的细节，请参考<a href=\"http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html\">官方文档</a>。</p>\n<p>测试原代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Consumer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestLambda</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// ======无返回值的函数接口=============================</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============1================\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 匿名内部类实现Runnable------&gt;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"匿名内部类实现Runnable\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;.run();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用Lambda实现------&gt;</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============2================\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tRunnable r = () -&gt; &#123;<span class=\"comment\">// ()表示方法不需要参数.</span></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"使用Lambda实现Runnable\"</span> + i);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 可直接使用外部变量,但不能进行修改</span></span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\tr.run();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 另外一种Lambda实现简写------&gt;</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============3================\"</span>);</span><br><span class=\"line\">\t\tRunnable r1 = () -&gt; System.out.println(<span class=\"string\">\"hello lambda!\"</span>);</span><br><span class=\"line\">\t\tr1.run();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// =======自定义函数接口============================</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 匿名内部类自定义接口------&gt;</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============4================\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Action() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(String content)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(content);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;.execute(<span class=\"string\">\"jdk1.8之前的匿名内部类实现方式\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// lambda实现------&gt;</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============5================\"</span>);</span><br><span class=\"line\">\t\tAction a = (String content) -&gt; &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(content);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\ta.execute(<span class=\"string\">\"jdk1.8的lambda实现方式\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 还可以更简洁，这个表达式可以被替换成对一个方法的引用，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 因为它只是单个方法，而且它们的参数是相同的------&gt;</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============6================\"</span>);</span><br><span class=\"line\">\t\tAction a1 = System.out::println;</span><br><span class=\"line\">\t\ta1.execute(<span class=\"string\">\"jdk1.8的lambda实现方式_更简洁.\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 然而，如果参数上有任何其它形式的变化，我们就不能直接引用方法，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 必须写全lambda表达式------&gt;</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============7================\"</span>);</span><br><span class=\"line\">\t\tAction a3 = ((String s) -&gt; System.out.println(<span class=\"string\">\"*\"</span> + s + <span class=\"string\">\"*\"</span>));</span><br><span class=\"line\">\t\ta3.execute(<span class=\"string\">\"jdk1.8的lambda实现方式_参数上有其它形式的变化.\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// ======有返回值的函数接口=============================</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 匿名内部类自定义接口------&gt;</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============8================\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;.compare(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// lambda实现 ------&gt;</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============9================\"</span>);</span><br><span class=\"line\">\t\tComparator&lt;Integer&gt; cmp = (x, y) -&gt; &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (x &lt; y) ? -<span class=\"number\">1</span> : ((x &gt; y) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 从中可以看出，单行的lambda表达式似乎是隐含了一个return语句。------&gt;</span></span><br><span class=\"line\">\t\tComparator&lt;Integer&gt; cmp1 = (x, y) -&gt; (x &lt; y) ? -<span class=\"number\">1</span> : ((x &gt; y) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"TestLambda.main().cmp.compare():\"</span> + cmp.compare(<span class=\"number\">0</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"TestLambda.main().cmp1.compare():\"</span> + cmp1.compare(<span class=\"number\">1</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// =====================================更多简洁写法</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============10================\"</span>);</span><br><span class=\"line\">\t\tList&lt;String&gt; list = Arrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String s : list) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(String t)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(t);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;.accept(s);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 最简单的Lambda表达式可以用逗号分隔的参数列表、-&gt;符号和功能语句块来表示。示例如下：</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============11================\"</span>);</span><br><span class=\"line\">\t\tArrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span>).forEach(e -&gt; System.out.println(e));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 请注意到编译器会根据上下文来推测参数的类型，或者你也可以显示地指定参数类型，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 只需要将类型包在括号里。举个例子：</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============12================\"</span>);</span><br><span class=\"line\">\t\tArrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span>).forEach((String e) -&gt; System.out.println(e));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Lambda表达式可能会引用类的成员或者局部变量（会被隐式地转变成final类型），</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面两种写法的效果是一样的：</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============13================\"</span>);</span><br><span class=\"line\">\t\tString separator = <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">\t\tArrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span>).forEach((String e) -&gt; System.out.print(e + separator));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============14================\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> String separator1 = <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">\t\tArrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span>).forEach((String e) -&gt; System.out.print(e + separator1));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果Lambda的功能语句块太复杂，我们可以用大括号包起来，跟普通的Java方法一样，如下：</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============15================\"</span>);</span><br><span class=\"line\">\t\tString separator2 = <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">\t\tArrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span>).forEach((String e) -&gt; &#123;</span><br><span class=\"line\">\t\t\tSystem.out.print(e + separator2);</span><br><span class=\"line\">\t\t\tSystem.out.print(e + separator2);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Lambda表达式可能会有返回值，编译器会根据上下文推断返回值的类型。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果lambda的语句块只有一行，不需要return关键字。下面两个写法是等价的：</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"==============16================\"</span>);</span><br><span class=\"line\">\t\tArrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span>).sort((e1, e2) -&gt; e1.compareTo(e2));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tArrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"d\"</span>).sort((e1, e2) -&gt; &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> result = e1.compareTo(e2);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;<span class=\"comment\">// main end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t/</span><br><span class=\"line\">\t * 自定义函数接口</span><br><span class=\"line\">\t * 注解 <span class=\"meta\">@FunctionalInterface</span> 使用这种方式标记的都可以使用Lambda表式,</span><br><span class=\"line\">\t * 它还被javac使用来验证这个接口是否真是一个函数式接口，是否至少有一个抽象方法在里面。</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * 在Java里，lambda表达式是“SAM”(Single Abstract Method)——</span><br><span class=\"line\">\t * 一个含有一个抽象方法的接口(是的，现在接口里可以含有一个非抽象的方法，defender守卫方法)。</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t<span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Action</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(String content)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">cancel</span><span class=\"params\">(String c)</span> </span>&#123;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;<span class=\"comment\">//class end</span></span><br></pre></td></tr></table></figure>\n<p>运行结果:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">==============<span class=\"number\">1</span>================</span><br><span class=\"line\">匿名内部类实现Runnable</span><br><span class=\"line\">==============<span class=\"number\">2</span>================</span><br><span class=\"line\">使用Lambda实现Runnable0</span><br><span class=\"line\">==============<span class=\"number\">3</span>================</span><br><span class=\"line\">hello lambda!</span><br><span class=\"line\">==============<span class=\"number\">4</span>================</span><br><span class=\"line\">jdk1.8之前的匿名内部类实现方式</span><br><span class=\"line\">==============<span class=\"number\">5</span>================</span><br><span class=\"line\">jdk1.8的lambda实现方式</span><br><span class=\"line\">==============<span class=\"number\">6</span>================</span><br><span class=\"line\">jdk1.8的lambda实现方式_更简洁.</span><br><span class=\"line\">==============<span class=\"number\">7</span>================</span><br><span class=\"line\">*jdk1.8的lambda实现方式_参数上有其它形式的变化.*</span><br><span class=\"line\">==============<span class=\"number\">8</span>================</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\">==============<span class=\"number\">9</span>================</span><br><span class=\"line\">TestLambda.main().cmp.compare():-<span class=\"number\">1</span></span><br><span class=\"line\">TestLambda.main().cmp1.compare():<span class=\"number\">0</span></span><br><span class=\"line\">==============<span class=\"number\">10</span>================</span><br><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\">c</span><br><span class=\"line\">==============<span class=\"number\">11</span>================</span><br><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\">d</span><br><span class=\"line\">==============<span class=\"number\">12</span>================</span><br><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\">d</span><br><span class=\"line\">==============<span class=\"number\">13</span>================</span><br><span class=\"line\">a,b,d,==============<span class=\"number\">14</span>================</span><br><span class=\"line\">a,b,d,==============<span class=\"number\">15</span>================</span><br><span class=\"line\">a,a,b,b,d,d,==============<span class=\"number\">16</span>================</span><br></pre></td></tr></table></figure>\n<p>//英文原文：<a href=\"http://zeroturnaround.com/rebellabs/java-8-the-first-taste-of-lambdas/\">Java 8: The First Taste of Lambdas</a><br>//译文链接：<a href=\"http://www.aqee.net/java-8-the-first-taste-of-lambdas/\">Java 8: The First Taste of Lambdas (译)</a><br>//官方文档：<a href=\"http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html\">Java 8: Lambda expressions</a>    </p>\n<h2 id=\"2-2-接口的默认方法和静态方法\"><a href=\"#2-2-接口的默认方法和静态方法\" class=\"headerlink\" title=\"2.2 接口的默认方法和静态方法\"></a>2.2 接口的默认方法和静态方法</h2><p>Java 8增加了两个新的概念在接口声明的时候：默认和静态方法。默认方法和 Trait 有些类似，但是目标不一样。<br>默认方法允许我们在接口里添加新的方法，而不会破坏实现这个接口的已有类的兼容性，也就是说不会强迫实现接口的类实现默认方法。   </p>\n<p>默认方法和抽象方法的区别是抽象方法必须要被实现，默认方法不是。作为替代方式，接口可以提供一个默认的方法实现，<br>所有这个接口的实现类都会通过继承得倒这个方法（如果有需要也可以重写这个方法），让我们来看看下面的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Defaulable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Interfaces now allow default methods, the implementer may or</span></span><br><span class=\"line\">    <span class=\"comment\">// may not implement (override) them.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> String <span class=\"title\">notRequired</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Default implementation\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultableImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Defaulable</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OverridableImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Defaulable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">notRequired</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Overridden implementation\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口 Defaulable 使用 default 关键字声明了一个默认方法 notRequired ()，类 DefaultableImpl 实现了 Defaulable 接口，<br>没有对默认方法做任何修改。另外一个类OverridableImpl重写类默认实现，提供了自己的实现方法。</p>\n<p>Java 8 的另外一个有意思的新特性是接口里可以声明静态方法，并且可以实现。例子如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DefaulableFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Interfaces now allow static methods</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Defaulable <span class=\"title\">create</span><span class=\"params\">( Supplier&lt; Defaulable &gt; supplier )</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> supplier.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面是把接口的静态方法和默认方法放在一起的示例（::new 是构造方法引用，后面会有详细描述）：  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">( String[] args )</span> </span>&#123;</span><br><span class=\"line\">    Defaulable defaulable = DefaulableFactory.create( DefaultableImpl::<span class=\"keyword\">new</span> );</span><br><span class=\"line\">    System.out.println( defaulable.notRequired() );</span><br><span class=\"line\"> </span><br><span class=\"line\">    defaulable = DefaulableFactory.create( OverridableImpl::<span class=\"keyword\">new</span> );</span><br><span class=\"line\">    System.out.println( defaulable.notRequired() );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制台的输出如下：</p>\n<pre><code>Default implementation\nOverridden implementation\n</code></pre><p>JVM平台的接口的默认方法实现是很高效的，并且方法调用的字节码指令支持默认方法。<br>默认方法使已经存在的接口可以修改而不会影响编译的过程。<br>java.util.Collection中添加的额外方法就是最好的例子：stream(), parallelStream(), forEach(), removeIf()</p>\n<p>虽然默认方法很强大，但是使用之前一定要仔细考虑是不是真的需要使用默认方法，因为在层级很复杂的情况下很容易引起模糊不清甚至变异错误。更多的详细信息请参考<a href=\"http://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html\">官方文档</a>。</p>\n<p>测试原代码:  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Supplier;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestInterfaceDefaultAndStaticMethod</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">( String[] args )</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//::new 是构造方法引用</span></span><br><span class=\"line\">\t    Defaulable defaulable = DefaulableFactory.create( DefaultableImpl::<span class=\"keyword\">new</span> );</span><br><span class=\"line\">\t    System.out.println( defaulable.notRequired() );</span><br><span class=\"line\">\t </span><br><span class=\"line\">\t    defaulable = DefaulableFactory.create( OverridableImpl::<span class=\"keyword\">new</span> );</span><br><span class=\"line\">\t    System.out.println( defaulable.notRequired() );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Defaulable</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//现在允许默认方法接口,实现者可能会或可能不会实现(覆盖)。</span></span><br><span class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">default</span> String <span class=\"title\">notRequired</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> <span class=\"string\">\"Default implementation\"</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultableImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Defaulable</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OverridableImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Defaulable</span> </span>&#123;</span><br><span class=\"line\">\t    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">notRequired</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> <span class=\"string\">\"Overridden implementation\"</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DefaulableFactory</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//现在允许静态方法的接口</span></span><br><span class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">static</span> Defaulable <span class=\"title\">create</span><span class=\"params\">( Supplier&lt; Defaulable &gt; supplier )</span> </span>&#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> supplier.get();</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果:  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Default implementation</span><br><span class=\"line\">Overridden implementation</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3-方法引用\"><a href=\"#2-3-方法引用\" class=\"headerlink\" title=\"2.3   方法引用\"></a>2.3   方法引用</h2><p>方法引用提供了一个很有用的语义来直接访问类或者实例的已经存在的方法或者构造方法。<br>结合Lambda表达式，方法引用使语法结构紧凑简明。不需要复杂的引用。</p>\n<p>下面我们用Car 这个类来做示例，Car这个类有不同的方法定义。让我们来看看java 8支持的4种方法引用。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Car <span class=\"title\">create</span><span class=\"params\">( <span class=\"keyword\">final</span> Supplier&lt; Car &gt; supplier )</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> supplier.get();</span><br><span class=\"line\">    &#125;             </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">collide</span><span class=\"params\">( <span class=\"keyword\">final</span> Car car )</span> </span>&#123;</span><br><span class=\"line\">        System.out.println( <span class=\"string\">\"Collided \"</span> + car.toString() );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">follow</span><span class=\"params\">( <span class=\"keyword\">final</span> Car another )</span> </span>&#123;</span><br><span class=\"line\">        System.out.println( <span class=\"string\">\"Following the \"</span> + another.toString() );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">repair</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println( <span class=\"string\">\"Repaired \"</span> + <span class=\"keyword\">this</span>.toString() );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一种方法引用是构造方法引用，语法是：<code>Class::new</code> ，对于泛型来说语法是：<code>Class&lt;T &gt;::new</code>，请注意构造方法没有参数:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Car car = Car.create( Car::<span class=\"keyword\">new</span> );</span><br><span class=\"line\"><span class=\"keyword\">final</span> List&lt; Car &gt; cars = Arrays.asList( car );</span><br></pre></td></tr></table></figure>\n<p>第二种方法引用是静态方法引用，语法是：<code>Class::static_method</code>请注意这个静态方法只支持一个类型为Car的参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cars.forEach( Car::collide );</span><br></pre></td></tr></table></figure>\n<p>第三种方法引用是类实例的方法引用，语法是：<code>Class::method</code>请注意方法没有参数。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cars.forEach( Car::repair );</span><br></pre></td></tr></table></figure>\n<p>最后一种方法引用是引用特殊类的方法，语法是：<code>instance::method</code>，请注意只接受Car类型的一个参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Car police = Car.create( Car::<span class=\"keyword\">new</span> );</span><br><span class=\"line\">cars.forEach( police::follow );</span><br></pre></td></tr></table></figure>\n<p>运行这些例子我们将会在控制台得到如下信息（Car的实例可能会不一样）： </p>\n<pre><code>Collided com.tu.test.java8.newfeature.TestMethodReferences$Car@a418fc\nRepaired com.tu.test.java8.newfeature.TestMethodReferences$Car@a418fc\nFollowing the com.tu.test.java8.newfeature.TestMethodReferences$Car@a418fc\n</code></pre><p>关于方法引用更多的示例和详细信息，请参考<a href=\"http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html\">官方文档</a></p>\n<p>测试原代码:   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Supplier;</span><br><span class=\"line\"></span><br><span class=\"line\">/ MethodReferences 方法引用*/</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestMethodReferences</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Car car = Car.create( Car::<span class=\"keyword\">new</span> );</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> List&lt; Car &gt; cars = Arrays.asList( car );</span><br><span class=\"line\">\t\tcars.forEach( Car::collide );</span><br><span class=\"line\">\t\tcars.forEach( Car::repair );</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Car police = Car.create( Car::<span class=\"keyword\">new</span> );</span><br><span class=\"line\">\t\tcars.forEach( police::follow );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Car <span class=\"title\">create</span><span class=\"params\">( <span class=\"keyword\">final</span> Supplier&lt; Car &gt; supplier )</span> </span>&#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> supplier.get();</span><br><span class=\"line\">\t    &#125;             </span><br><span class=\"line\">\t </span><br><span class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">collide</span><span class=\"params\">( <span class=\"keyword\">final</span> Car car )</span> </span>&#123;</span><br><span class=\"line\">\t        System.out.println( <span class=\"string\">\"Collided \"</span> + car.toString() );</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t </span><br><span class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">follow</span><span class=\"params\">( <span class=\"keyword\">final</span> Car another )</span> </span>&#123;</span><br><span class=\"line\">\t        System.out.println( <span class=\"string\">\"Following the \"</span> + another.toString() );</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t </span><br><span class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">repair</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t        System.out.println( <span class=\"string\">\"Repaired \"</span> + <span class=\"keyword\">this</span>.toString() );</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果:   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Collided com.tu.test.java8.newfeature.TestMethodReferences$Car<span class=\"meta\">@a</span>418fc</span><br><span class=\"line\">Repaired com.tu.test.java8.newfeature.TestMethodReferences$Car<span class=\"meta\">@a</span>418fc</span><br><span class=\"line\">Following the com.tu.test.java8.newfeature.TestMethodReferences$Car<span class=\"meta\">@a</span>418fc</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-4-重复注释\"><a href=\"#2-4-重复注释\" class=\"headerlink\" title=\"2.4   重复注释\"></a>2.4   重复注释</h2><p>自从Java 5支持注释以来，注释变得特别受欢迎因而被广泛使用。但是有一个限制，<br>同一个地方的不能使用同一个注释超过一次。 Java 8打破了这个规则，引入了重复注释，允许相同注释在声明使用的时候重复使用超过一次。 </p>\n<p>重复注释本身需要被 @Repeatable 注释。实际上，他不是一个语言上的改变，只是编译器层面的改动，技术层面仍然是一样的。让我们来看看例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Repeatable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\">/ RepeatingAnnotations 重复注释 */</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestRepeatingAnnotations</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\">\t<span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Filters &#123;</span><br><span class=\"line\">\t\tFilter[] value();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\">\t<span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">\t<span class=\"meta\">@Repeatable</span>(Filters.class)</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Filter &#123;</span><br><span class=\"line\">\t\t<span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Filter</span>(<span class=\"string\">\"filter1\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@Filter</span>(<span class=\"string\">\"filter2\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Filterable</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Filter filter : Filterable.class.getAnnotationsByType(Filter.class)) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(filter.value());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看到，注释Filter被 @Repeatable( Filters.class )注释。Filters 只是一个容器，<br>它持有Filter, 编译器尽力向程序员隐藏它的存在。通过这样的方式，Filterable接口可以被Filter注释两次。</p>\n<p>另外，反射的API提供一个新方法getAnnotationsByType() 来返回重复注释的类型<br>(请注意Filterable.class.getAnnotation( Filters.class )将会返回编译器注入的Filters实例）。</p>\n<p>程序的输出将会是这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filter1</span><br><span class=\"line\">filter2</span><br></pre></td></tr></table></figure>\n<p>更多详细信息请参考<a href=\"http://docs.oracle.com/javase/tutorial/java/annotations/repeating.html\">官方文档</a>。</p>\n<h2 id=\"2-5-更好的类型推断\"><a href=\"#2-5-更好的类型推断\" class=\"headerlink\" title=\"2.5   更好的类型推断\"></a>2.5   更好的类型推断</h2><p>Java 8在类型推断方面改进了很多，在很多情况下，编译器可以推断参数的类型，从而保持代码的整洁。让我们看看例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Value</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span>&lt;T&gt; T <span class=\"title\">defaultValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getOrDefault</span><span class=\"params\">( T value, T defaultValue )</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ( value != <span class=\"keyword\">null</span> ) ? value : defaultValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里是Value&lt; String &gt;的用法  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TypeInference</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Value&lt;String&gt; value = <span class=\"keyword\">new</span> Value&lt;&gt;();</span><br><span class=\"line\">        value.getOrDefault( <span class=\"string\">\"22\"</span>, Value.defaultValue() );</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参数Value.defaultValue()的类型被编译器推断出来，不需要显式地提供类型。<br>在java 7, 相同的代码不会被编译，需要写成：Value.&lt; String &gt;defaultValue()  </p>\n<h2 id=\"2-6-注解的扩展\"><a href=\"#2-6-注解的扩展\" class=\"headerlink\" title=\"2.6   注解的扩展\"></a>2.6   注解的扩展</h2><p>Java 8扩展了注解可以使用的范围，现在我们几乎可以在所有的地方：<br>局部变量、泛型、超类和接口实现、甚至是方法的Exception声明。一些例子如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"></span><br><span class=\"line\">/ 注解的扩展 */</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestAnnotations</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">\t<span class=\"meta\">@Target</span>(&#123; ElementType.TYPE_USE, ElementType.TYPE_PARAMETER &#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> NonEmpty &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Holder</span>&lt;@<span class=\"title\">NonEmpty</span> <span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> @<span class=\"title\">NonEmpty</span> <span class=\"title\">Object</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> @NonEmpty Exception </span>&#123;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unused\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Holder&lt;String&gt; holder = <span class=\"keyword\">new</span> <span class=\"meta\">@NonEmpty</span> Holder&lt;String&gt;();</span><br><span class=\"line\">\t\t<span class=\"meta\">@NonEmpty</span></span><br><span class=\"line\">\t\tCollection&lt;<span class=\"meta\">@NonEmpty</span> String&gt; strings = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Java 8 新增加了两个注解的程序元素类型 <code>ElementType.TYPE_USE</code> 和<code>ElementType.TYPE_PARAMETER</code> ，<br>这两个新类型描述了可以使用注解的新场合。注解处理API（<code>Annotation Processing API</code>）也做了一些细微的改动，来识别这些新添加的注解类型。</p>\n<h1 id=\"3．Java编译器的新特性\"><a href=\"#3．Java编译器的新特性\" class=\"headerlink\" title=\"3．Java编译器的新特性\"></a>3．Java编译器的新特性</h1><h2 id=\"3-1-参数名字\"><a href=\"#3-1-参数名字\" class=\"headerlink\" title=\"3.1 参数名字\"></a>3.1 参数名字</h2><p>很长时间以来，Java程序员想尽办法把参数名字保存在java字节码里，并且让这些参数名字在运行时可用。<br>Java 8 终于把这个需求加入到了Java语言（使用反射API和Parameter.getName() 方法）和字节码里（使用java编译命令javac的–parameters参数）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Parameter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestParameterNames</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tMethod method = TestParameterNames.class.getMethod(<span class=\"string\">\"main\"</span>, String[].class);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> Parameter parameter : method.getParameters()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (parameter.isNamePresent())<span class=\"comment\">//验证参数名是不是可用</span></span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"Parameter: \"</span> + parameter.getName());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你编译这个class的时候没有添加参数–parameters，运行的时候你会得到这个结果：</p>\n<pre><code>Parameter: arg0\n</code></pre><p>编译的时候添加了–parameters参数的话，运行结果会不一样：</p>\n<pre><code>Parameter: args\n</code></pre><p>对于有经验的Maven使用者，–parameters参数可以添加到maven-compiler-plugin的配置部分：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">compilerArgument</span>&gt;</span>-parameters<span class=\"tag\">&lt;/<span class=\"name\">compilerArgument</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>最新版的Eclipse Kepler SR2 提供了编译设置项，如下图所示：</p>\n<p><img src=\"/res/img/blog/2014/10/23/java8_new_feature/ECLIPSE-JAVA-COMPILER.png\" alt=\"ECLIPSE-JAVA-COMPILER\">  </p>\n<p>Picture 1. Configuring Eclipse projects to support new Java 8 compiler –parameters argument.</p>\n<p>store method parameter names(usable via reflection)<br>存储通过反射方法参数名称(通过反射可用)</p>\n<p>额外的，有一个方便的方法Parameter.isNamePresent() 来验证参数名是不是可用。</p>\n<h1 id=\"4．Java-库的新特性\"><a href=\"#4．Java-库的新特性\" class=\"headerlink\" title=\"4．Java  库的新特性\"></a>4．Java  库的新特性</h1><p>Java 8 新添加了很多类，并且扩展了很多现有的类来更好地支持现代并发、函数式编程、日期\\时间等等。</p>\n<h2 id=\"4-1-Optional\"><a href=\"#4-1-Optional\" class=\"headerlink\" title=\"4.1 Optional\"></a>4.1 Optional</h2><p>著名的<a href=\"http://examples.javacodegeeks.com/java-basics/exceptions/java-lang-nullpointerexception-how-to-handle-null-pointer-exception/\">NullPointerException</a> 是引起系统失败最常见的原因。<br>很久以前<a href=\"http://code.google.com/p/guava-libraries/\">Google Guava</a> 项目引入了Optional作为解决空指针异常的一种方式，<br>不赞成代码被null检查的代码污染，期望程序员写整洁的代码。受Google Guava的鼓励，Optional 现在是Java 8库的一部分。</p>\n<p>Optional 只是一个容器，它可以保存一些类型的值或者null。它提供很多有用的方法，所以没有理由不显式地检查null。请参照java 8的<a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Optional.html\">文档</a>查看详细信息。</p>\n<p>让我们看看两个Optional 用法的小例子：一个是允许为空的值，另外一个是不允许为空的值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Optional&lt; String &gt; fullName = Optional.ofNullable( <span class=\"keyword\">null</span> );</span><br><span class=\"line\">System.out.println( <span class=\"string\">\"Full Name is set? \"</span> + fullName.isPresent() );        </span><br><span class=\"line\">System.out.println( <span class=\"string\">\"Full Name: \"</span> + fullName.orElseGet( () -&gt; <span class=\"string\">\"[none]\"</span> ) ); </span><br><span class=\"line\">System.out.println( fullName.map( s -&gt; <span class=\"string\">\"Hey \"</span> + s + <span class=\"string\">\"!\"</span> ).orElse( <span class=\"string\">\"Hey Stranger!\"</span> ) );</span><br></pre></td></tr></table></figure>\n<p>如果Optional实例有非空的值，方法 isPresent() 返回true否则返回false。方法orElseGet提供了回退机制，当Optional的值为空时接受一个方法返回默认值。<br>map()方法转化Optional当前的值并且返回一个新的Optional实例。orElse方法和orElseGet类似，但是它不接受一个方法，而是接受一个默认值。上面代码运行结果如下：</p>\n<pre><code>Full Name is set? false\nFull Name: [none]\nHey Stranger!\n</code></pre><p>让我们大概看看另外一个例子。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Optional&lt; String &gt; firstName = Optional.of( <span class=\"string\">\"Tom\"</span> );</span><br><span class=\"line\">System.out.println( <span class=\"string\">\"First Name is set? \"</span> + firstName.isPresent() );        </span><br><span class=\"line\">System.out.println( <span class=\"string\">\"First Name: \"</span> + firstName.orElseGet( () -&gt; <span class=\"string\">\"[none]\"</span> ) ); </span><br><span class=\"line\">System.out.println( firstName.map( s -&gt; <span class=\"string\">\"Hey \"</span> + s + <span class=\"string\">\"!\"</span> ).orElse( <span class=\"string\">\"Hey Stranger!\"</span> ) );</span><br><span class=\"line\">System.out.println();</span><br></pre></td></tr></table></figure>\n<p>输出如下：</p>\n<pre><code>First Name is set? true\nFirst Name: Tom\nHey Tom!\n</code></pre><p>更多详细信息请参考<a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Optional.html\">官方文档</a> 。</p>\n<p>测试原代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Optional;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Function;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Supplier;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOptional</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tOptional&lt;String&gt; fullName = Optional.ofNullable(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Full Name is set? \"</span> + fullName.isPresent());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Full Name: \"</span> + fullName.orElseGet(() -&gt; <span class=\"string\">\"[none]\"</span>));</span><br><span class=\"line\">\t\tSystem.out.println(fullName.map(s -&gt; <span class=\"string\">\"Hey \"</span> + s + <span class=\"string\">\"!\"</span>).orElse(<span class=\"string\">\"Hey Stranger!\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"---------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tOptional&lt;String&gt; firstName = Optional.of(<span class=\"string\">\"Tom\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"First Name is set? \"</span> + firstName.isPresent());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"First Name: \"</span> + firstName.orElseGet(() -&gt; <span class=\"string\">\"[none]\"</span>));</span><br><span class=\"line\">\t\tSystem.out.println(firstName.map(s -&gt; <span class=\"string\">\"Hey \"</span> + s + <span class=\"string\">\"!\"</span>).orElse(<span class=\"string\">\"Hey Stranger!\"</span>));</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//=====复习lambda=============================firstName.orElseGet(() -&gt; \"[none]\")</span></span><br><span class=\"line\">\t\tSupplier&lt;? extends String&gt; other = <span class=\"keyword\">new</span> Supplier&lt;String&gt;() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"[none]\"</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\tfirstName.orElseGet(other);</span><br><span class=\"line\">\t\t<span class=\"comment\">//=====复习lambda=============================firstName.map(s -&gt; \"Hey \" + s + \"!\").orElse(\"Hey Stranger!\")</span></span><br><span class=\"line\">\t\tFunction&lt;String, String&gt; mapper = <span class=\"keyword\">new</span> Function&lt;String, String&gt;() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">apply</span><span class=\"params\">(String t)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Hey \"</span> + t + <span class=\"string\">\"!\"</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\tfirstName.map(mapper).orElse(<span class=\"string\">\"Hey Stranger!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Full Name is set? <span class=\"keyword\">false</span></span><br><span class=\"line\">Full Name: [none]</span><br><span class=\"line\">Hey Stranger!</span><br><span class=\"line\">---------------</span><br><span class=\"line\">First Name is set? <span class=\"keyword\">true</span></span><br><span class=\"line\">First Name: Tom</span><br><span class=\"line\">Hey Tom!</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-Stream\"><a href=\"#4-2-Stream\" class=\"headerlink\" title=\"4.2 Stream\"></a>4.2 Stream</h2><p>新增加的Stream API (java.util.stream)引入了在Java里可以工作的函数式编程。<br>这是目前为止对java库最大的一次功能添加，希望程序员通过编写有效、整洁和简明的代码，能够大大提高生产率。</p>\n<p>Stream API让集合处理简化了很多（我们后面会看到不仅限于Java集合类）。让我们从一个简单的类Task开始来看看Stream的用法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">enum</span> Status &#123;</span><br><span class=\"line\">\tOPEN, CLOSED</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Status status;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Integer points;</span><br><span class=\"line\"></span><br><span class=\"line\">\tTask(<span class=\"keyword\">final</span> Status status, <span class=\"keyword\">final</span> Integer points) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.status = status;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.points = points;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getPoints</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> points;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Status <span class=\"title\">getStatus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> status;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> String.format(<span class=\"string\">\"[%s, %d]\"</span>, status, points);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Task类有一个分数的概念（或者说是伪复杂度），其次是还有一个值可以为OPEN或CLOSED的状态.让我们引入一个Task的小集合作为演示例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> Collection&lt; Task &gt; tasks = Arrays.asList(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Task( Status.OPEN, <span class=\"number\">5</span> ),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Task( Status.OPEN, <span class=\"number\">13</span> ),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Task( Status.CLOSED, <span class=\"number\">8</span> ) </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>第一个问题是所有的开放的Task的点数是多少？在java 8 之前，通常的做法是用foreach迭代。但是Java8里头我们会用Stream。Stream是多个元素的序列，支持串行和并行操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Calculate total points of all active tasks using sum()</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">long</span> totalPointsOfOpenTasks = tasks</span><br><span class=\"line\">    .stream()</span><br><span class=\"line\">    .filter( task -&gt; task.getStatus() == Status.OPEN )</span><br><span class=\"line\">    .mapToInt( Task::getPoints )</span><br><span class=\"line\">    .sum();</span><br><span class=\"line\">         </span><br><span class=\"line\">System.out.println( <span class=\"string\">\"Total points: \"</span> + totalPointsOfOpenTasks );</span><br></pre></td></tr></table></figure>\n<p>控制台的输出将会是：</p>\n<pre><code>Total points: 18\n</code></pre><p>上面代码执行的流程是这样的，首先Task集合会被转化为Stream表示，然后filter操作会过滤掉所有关闭的Task，接下来使用Task::getPoints 方法取得每个Task实例的点数，mapToInt方法会把Task Stream转换成Integer Stream，最后使用Sum方法将所有的点数加起来得到最终的结果。</p>\n<p>在我们看下一个例子之前，我们要记住一些关于Stream的说明。Stream操作被分为中间操作和终点操作。</p>\n<p>中间操作返回一个新的Stream。这些中间操作是延迟的，执行一个中间操作比如filter实际上不会真的做过滤操作，而是创建一个新的Stream，当这个新的Stream被遍历的时候，它里头会包含有原来Stream里符合过滤条件的元素。</p>\n<p>终点操作比如说forEach或者sum会遍历Stream从而产生最终结果或附带结果。终点操作执行完之后，Stream管道就被消费完了，不再可用。在几乎所有的情况下，终点操作都是即时完成对数据的遍历操作。</p>\n<p>Stream的另外一个价值是Stream创造性地支持并行处理。让我们看看下面这个例子，这个例子把所有task的点数加起来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Calculate total points of all tasks</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">double</span> totalPoints = tasks</span><br><span class=\"line\">   .stream()</span><br><span class=\"line\">   .parallel()</span><br><span class=\"line\">   .map( task -&gt; task.getPoints() ) <span class=\"comment\">// or map( Task::getPoints ) </span></span><br><span class=\"line\">   .reduce( <span class=\"number\">0</span>, Integer::sum );</span><br><span class=\"line\">    </span><br><span class=\"line\">System.out.println( <span class=\"string\">\"Total points (all tasks): \"</span> + totalPoints );</span><br></pre></td></tr></table></figure>\n<p>这个例子跟上面那个非常像，除了这个例子里使用了parallel()方法       并且计算最终结果的时候使用了reduce方法。</p>\n<p>输出如下：</p>\n<pre><code>Total points (all tasks): 26.0\n</code></pre><p>经常会有这个一个需求：我们需要按照某种准则来对集合中的元素进行分组。Stream也可以处理这样的需求，下面是一个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Group tasks by their status</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> Map&lt; Status, List&lt; Task &gt; &gt; map = tasks</span><br><span class=\"line\">    .stream()</span><br><span class=\"line\">    .collect( Collectors.groupingBy( Task::getStatus ) );</span><br><span class=\"line\">System.out.println( map );</span><br></pre></td></tr></table></figure>\n<p>控制台的输出如下：</p>\n<pre><code>{CLOSED=[[CLOSED, 8]], OPEN=[[OPEN, 5], [OPEN, 13]]}\n</code></pre><p>让我们来计算整个集合中每个task分数（或权重）的平均值来结束task的例子。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Calculate the weight of each tasks (as percent of total points) </span></span><br><span class=\"line\"><span class=\"keyword\">final</span> Collection&lt; String &gt; result = tasks</span><br><span class=\"line\">    .stream()                                        <span class=\"comment\">// Stream&lt; String &gt;</span></span><br><span class=\"line\">    .mapToInt( Task::getPoints )                     <span class=\"comment\">// IntStream</span></span><br><span class=\"line\">    .asLongStream()                                  <span class=\"comment\">// LongStream</span></span><br><span class=\"line\">    .mapToDouble( points -&gt; points / totalPoints )   <span class=\"comment\">// DoubleStream</span></span><br><span class=\"line\">    .boxed()                                         <span class=\"comment\">// Stream&lt; Double &gt;</span></span><br><span class=\"line\">    .mapToLong( weigth -&gt; ( <span class=\"keyword\">long</span> )( weigth * <span class=\"number\">100</span> ) ) <span class=\"comment\">// LongStream</span></span><br><span class=\"line\">    .mapToObj( percentage -&gt; percentage + <span class=\"string\">\"%\"</span> )      <span class=\"comment\">// Stream&lt; String&gt; </span></span><br><span class=\"line\">    .collect( Collectors.toList() );                 <span class=\"comment\">// List&lt; String &gt; </span></span><br><span class=\"line\">         </span><br><span class=\"line\">System.out.println( result );</span><br></pre></td></tr></table></figure>\n<p>控制台输出如下：</p>\n<pre><code>[19%, 50%, 30%]\n</code></pre><p>最后，就像前面提到的，Stream API不仅仅处理Java集合框架。像从文本文件中逐行读取数据这样典型的I/O操作也很适合用Stream API来处理。下面用一个例子来应证这一点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Path path = <span class=\"keyword\">new</span> File( filename ).toPath();</span><br><span class=\"line\"><span class=\"keyword\">try</span>( Stream&lt; String &gt; lines = Files.lines( path, StandardCharsets.UTF_8 ) ) &#123;</span><br><span class=\"line\">    lines.onClose( () -&gt; System.out.println(<span class=\"string\">\"Done!\"</span>) ).forEach( System.out::println );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Stream的方法onClose 返回一个等价的有额外句柄的Stream，当Stream的close（）方法被调用的时候这个句柄会被执行。</p>\n<p>Stream API、Lambda表达式还有接口默认方法和静态方法支持的方法引用，是Java 8对软件开发的现代范式的响应。</p>\n<p>运行原代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Path;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Stream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStream</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Collection&lt; Task &gt; tasks = Arrays.asList(</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">new</span> Task( Status.OPEN, <span class=\"number\">5</span> ),</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">new</span> Task( Status.OPEN, <span class=\"number\">13</span> ),</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">new</span> Task( Status.CLOSED, <span class=\"number\">8</span> ) </span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//所有的开放的Task的点数是多少？在java 8 之前，通常的做法是用foreach迭代。但是Java8里头我们会用Stream。Stream是多个元素的序列，支持串行和并行操作。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// Calculate total points of all active tasks using sum()</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">long</span> totalPointsOfOpenTasks = tasks</span><br><span class=\"line\">\t\t    .stream()</span><br><span class=\"line\">\t\t    .filter( task -&gt; task.getStatus() == Status.OPEN )</span><br><span class=\"line\">\t\t    .mapToInt( Task::getPoints )</span><br><span class=\"line\">\t\t    .sum();</span><br><span class=\"line\">\t\t         </span><br><span class=\"line\">\t\tSystem.out.println( <span class=\"string\">\"Total points: \"</span> + totalPointsOfOpenTasks );</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"=========================================\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// Calculate total points of all tasks</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">double</span> totalPoints = tasks</span><br><span class=\"line\">\t\t   .stream()</span><br><span class=\"line\">\t\t   .parallel()</span><br><span class=\"line\">\t\t   .map( task -&gt; task.getPoints() ) <span class=\"comment\">// or map( Task::getPoints ) </span></span><br><span class=\"line\">\t\t   .reduce( <span class=\"number\">0</span>, Integer::sum );</span><br><span class=\"line\">\t\t    </span><br><span class=\"line\">\t\tSystem.out.println( <span class=\"string\">\"Total points (all tasks): \"</span> + totalPoints );</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"=========================================\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// Group tasks by their status</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Map&lt;Status, List&lt;Task&gt;&gt; map = tasks</span><br><span class=\"line\">\t\t\t\t.stream()</span><br><span class=\"line\">\t\t\t\t.collect(Collectors.groupingBy(Task::getStatus));</span><br><span class=\"line\">\t\tSystem.out.println(map);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"=========================================\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// Calculate the weight of each tasks (as percent of total points) </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Collection&lt; String &gt; result = tasks</span><br><span class=\"line\">\t\t    .stream()                                        <span class=\"comment\">// Stream&lt; String &gt;</span></span><br><span class=\"line\">\t\t    .mapToInt( Task::getPoints )                     <span class=\"comment\">// IntStream</span></span><br><span class=\"line\">\t\t    .asLongStream()                                  <span class=\"comment\">// LongStream</span></span><br><span class=\"line\">\t\t    .mapToDouble( points -&gt; points / totalPoints )   <span class=\"comment\">// DoubleStream</span></span><br><span class=\"line\">\t\t    .boxed()                                         <span class=\"comment\">// Stream&lt; Double &gt;</span></span><br><span class=\"line\">\t\t    .mapToLong( weigth -&gt; ( <span class=\"keyword\">long</span> )( weigth * <span class=\"number\">100</span> ) ) <span class=\"comment\">// LongStream</span></span><br><span class=\"line\">\t\t    .mapToObj( percentage -&gt; percentage + <span class=\"string\">\"%\"</span> )      <span class=\"comment\">// Stream&lt; String&gt; </span></span><br><span class=\"line\">\t\t    .collect( Collectors.toList() );                 <span class=\"comment\">// List&lt; String &gt; </span></span><br><span class=\"line\">\t\t         </span><br><span class=\"line\">\t\tSystem.out.println( result );</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"=========================================\"</span>);</span><br><span class=\"line\">\t\tStream&lt;String&gt; lines;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">final</span> Path path = <span class=\"keyword\">new</span> File(<span class=\"string\">\"./text/Test.txt\"</span>).toPath();</span><br><span class=\"line\">\t\t\tlines = Files.lines(path, StandardCharsets.UTF_8);</span><br><span class=\"line\">\t\t\tlines.onClose(() -&gt; System.out.println(<span class=\"string\">\"Done!\"</span>)).forEach(System.out::println);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">enum</span> Status &#123;</span><br><span class=\"line\">\t\tOPEN, CLOSED</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Status status;</span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Integer points;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tTask(<span class=\"keyword\">final</span> Status status, <span class=\"keyword\">final</span> Integer points) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.status = status;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.points = points;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getPoints</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> points;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> Status <span class=\"title\">getStatus</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> status;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> String.format(<span class=\"string\">\"[%s, %d]\"</span>, status, points);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Total points: <span class=\"number\">18</span></span><br><span class=\"line\">=========================================</span><br><span class=\"line\"><span class=\"function\">Total <span class=\"title\">points</span> <span class=\"params\">(all tasks)</span>: 26.0</span><br><span class=\"line\"></span>=========================================</span><br><span class=\"line\">&#123;OPEN=[[OPEN, <span class=\"number\">5</span>], [OPEN, <span class=\"number\">13</span>]], CLOSED=[[CLOSED, <span class=\"number\">8</span>]]&#125;</span><br><span class=\"line\">=========================================</span><br><span class=\"line\">[<span class=\"number\">19</span>%, <span class=\"number\">50</span>%, <span class=\"number\">30</span>%]</span><br><span class=\"line\">=========================================</span><br><span class=\"line\">hello</span><br><span class=\"line\">hellohello</span><br><span class=\"line\">hellohellohello</span><br></pre></td></tr></table></figure>\n<p>再来点案例:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">List&lt;String&gt; stringCollection = Arrays.asList(<span class=\"string\">\"ddd2\"</span>, <span class=\"string\">\"aaa2\"</span>, <span class=\"string\">\"bbb1\"</span>, <span class=\"string\">\"aaa1\"</span>, <span class=\"string\">\"bbb3\"</span>, <span class=\"string\">\"ccc\"</span>, <span class=\"string\">\"bbb2\"</span>, <span class=\"string\">\"ddd1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Filter 过滤</span></span><br><span class=\"line\">stringCollection.stream().filter((s) -&gt; s.startsWith(<span class=\"string\">\"a\"</span>)).forEach(System.out::println);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"=========1==========\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Sort 排序</span></span><br><span class=\"line\">stringCollection.stream().sorted().filter((s) -&gt; s.startsWith(<span class=\"string\">\"a\"</span>)).forEach(System.out::println);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"=========2==========\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Map 映射</span></span><br><span class=\"line\">stringCollection.stream().map(String::toUpperCase).sorted((a, b) -&gt; b.compareTo(a))</span><br><span class=\"line\">\t\t.forEach(System.out::println);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"=========3==========\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Match 匹配</span></span><br><span class=\"line\">System.out.println(stringCollection.stream().anyMatch((s) -&gt; s.startsWith(<span class=\"string\">\"a\"</span>)));</span><br><span class=\"line\">System.out.println(stringCollection.stream().allMatch((s) -&gt; s.startsWith(<span class=\"string\">\"a\"</span>)));</span><br><span class=\"line\">System.out.println(stringCollection.stream().noneMatch((s) -&gt; s.startsWith(<span class=\"string\">\"a\"</span>)));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"=========4==========\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Count 计数 (最终操作)</span></span><br><span class=\"line\">System.out.println(stringCollection.stream().count());</span><br><span class=\"line\">System.out.println(stringCollection.stream().filter((a) -&gt; a.startsWith(<span class=\"string\">\"a\"</span>)).count());</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"=========5==========\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Reduce 规约 (最终操作)</span></span><br><span class=\"line\">stringCollection.stream().sorted().reduce((s1, s2) -&gt; s1 + <span class=\"string\">\"#\"</span> + s2).ifPresent(System.out::println);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"========6===========\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 并行Streams</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> max = <span class=\"number\">1000000</span>;</span><br><span class=\"line\">List&lt;String&gt; values = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(max);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; max; i++) &#123;</span><br><span class=\"line\">\tvalues.add(UUID.randomUUID().toString());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> t0 = System.nanoTime();</span><br><span class=\"line\"><span class=\"comment\">// 串行排序 sequential sort took:1226 ms</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> count = values.stream().sorted().count();</span><br><span class=\"line\">System.out.println(count);</span><br><span class=\"line\"><span class=\"keyword\">long</span> t1 = System.nanoTime();</span><br><span class=\"line\"><span class=\"keyword\">long</span> millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);</span><br><span class=\"line\">System.out.println(String.format(<span class=\"string\">\"sequential sort took:%d ms\"</span>, millis));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> t2 = System.nanoTime();</span><br><span class=\"line\"><span class=\"comment\">// 并行排序 sequential sort took:951 ms</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> count1 = values.parallelStream().sorted().count();</span><br><span class=\"line\">System.out.println(count1);</span><br><span class=\"line\"><span class=\"keyword\">long</span> t3 = System.nanoTime();</span><br><span class=\"line\"><span class=\"keyword\">long</span> millis1 = TimeUnit.NANOSECONDS.toMillis(t3 - t2);</span><br><span class=\"line\">System.out.println(String.format(<span class=\"string\">\"parallel sort took:%d ms\"</span>, millis1));</span><br></pre></td></tr></table></figure>\n<p>案例运行结果:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">aaa2</span><br><span class=\"line\">aaa1</span><br><span class=\"line\">=========1==========</span><br><span class=\"line\">aaa1</span><br><span class=\"line\">aaa2</span><br><span class=\"line\">=========2==========</span><br><span class=\"line\">DDD2</span><br><span class=\"line\">DDD1</span><br><span class=\"line\">CCC</span><br><span class=\"line\">BBB3</span><br><span class=\"line\">BBB2</span><br><span class=\"line\">BBB1</span><br><span class=\"line\">AAA2</span><br><span class=\"line\">AAA1</span><br><span class=\"line\">=========3==========</span><br><span class=\"line\">true</span><br><span class=\"line\">false</span><br><span class=\"line\">false</span><br><span class=\"line\">=========4==========</span><br><span class=\"line\">8</span><br><span class=\"line\">2</span><br><span class=\"line\">=========5==========</span><br><span class=\"line\">aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2</span><br><span class=\"line\">========6===========</span><br><span class=\"line\">1000000</span><br><span class=\"line\">sequential sort took:1258 ms</span><br><span class=\"line\">1000000</span><br><span class=\"line\">parallel sort took:1061 ms</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3日期时间API（JSR310\"><a href=\"#4-3日期时间API（JSR310\" class=\"headerlink\" title=\"4.3日期时间API（JSR310)\"></a>4.3日期时间API（JSR310)</h2><p>Java 8引入了新的日期时间API（JSR 310）改进了日期时间的管理。日期和时间管理一直是Java开发人员最痛苦的问题。java.util.Date和后来的java.util.Calendar一点也没有改变这个情况（甚至让人们更加迷茫）。</p>\n<p>因为上面这些原因，产生了<a href=\"http://www.joda.org/joda-time/\">Joda-Time</a> ，可以替换Java的日期时间API。Joda-Time深刻影响了 Java 8新的日期时间API，Java 8吸收了Joda-Time 的精华。新的java.time包包含了所有关于日期、时间、日期时间、时区、Instant（跟日期类似但精确到纳秒）、duration（持续时间）和时钟操作的类。设计这些API的时候很认真地考虑了这些类的不变性（从java.util.Calendar吸取的痛苦教训）。如果需要修改时间对象，会返回一个新的实例。</p>\n<p>让我们看看一些关键的类和用法示例。第一个类是Clock，Clock使用时区来访问当前的instant, date和time。Clock类可以替换 System.currentTimeMillis() 和 TimeZone.getDefault().</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the system clock as UTC offset</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> Clock clock = Clock.systemUTC();</span><br><span class=\"line\">System.out.println( clock.instant() );</span><br><span class=\"line\">System.out.println( clock.millis() );</span><br></pre></td></tr></table></figure>\n<p>控制台输出如下：</p>\n<pre><code>2015-06-25T07:10:58.746Z\n1435216258848\n</code></pre><p>其他类我们看看LocalTime和LocalDate。LocalDate只保存有ISO-8601日期系统的日期部分，有时区信息，相应地，LocalTime只保存ISO-8601日期系统的时间部分，没有时区信息。LocalDate和LocalTime都可以从Clock对象创建。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the local date and local time</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> LocalDate date = LocalDate.now();</span><br><span class=\"line\"><span class=\"keyword\">final</span> LocalDate dateFromClock = LocalDate.now( clock );</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println( date );</span><br><span class=\"line\">System.out.println( dateFromClock );</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"================\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Get the local date and local time</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> LocalTime time = LocalTime.now();</span><br><span class=\"line\"><span class=\"keyword\">final</span> LocalTime timeFromClock = LocalTime.now( clock );</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println( time );</span><br><span class=\"line\">System.out.println( timeFromClock );</span><br></pre></td></tr></table></figure>\n<p>控制台输出如下：</p>\n<pre><code>2015-06-25\n2015-06-25\n15:12:07.912\n07:12:07.912\n</code></pre><p>LocalDateTime类合并了LocalDate和LocalTime，它保存有ISO-8601日期系统的日期和时间，但是没有时区信息。让我们看一个简单的例子。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the local date/time</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> LocalDateTime datetime = LocalDateTime.now();</span><br><span class=\"line\"><span class=\"keyword\">final</span> LocalDateTime datetimeFromClock = LocalDateTime.now( clock );</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println( datetime );</span><br><span class=\"line\">System.out.println( datetimeFromClock );</span><br></pre></td></tr></table></figure>\n<p>控制台输出如下：</p>\n<pre><code>2015-06-25T15:14:12.139\n2015-06-25T07:14:12.139\n</code></pre><p>如果您需要一个类持有日期时间和时区信息，可以使用ZonedDateTime，它保存有ISO-8601日期系统的日期和时间，而且有时区信息。让我们看一些例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the zoned date/time</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> ZonedDateTime zonedDatetime = ZonedDateTime.now();</span><br><span class=\"line\"><span class=\"keyword\">final</span> ZonedDateTime zonedDatetimeFromClock = ZonedDateTime.now( clock );</span><br><span class=\"line\"><span class=\"keyword\">final</span> ZonedDateTime zonedDatetimeFromZone = ZonedDateTime.now( ZoneId.of( <span class=\"string\">\"America/Los_Angeles\"</span> ) );</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println( zonedDatetime );</span><br><span class=\"line\">System.out.println( zonedDatetimeFromClock );</span><br><span class=\"line\">System.out.println( zonedDatetimeFromZone );</span><br></pre></td></tr></table></figure>\n<p>控制台输出如下：</p>\n<pre><code>2015-06-25T15:14:51.607+08:00[Asia/Shanghai]\n2015-06-25T07:14:51.607Z\n2015-06-25T00:14:51.610-07:00[America/Los_Angeles]\n</code></pre><p>最后让我们看看Duration类，Duration持有的时间精确到纳秒。它让我们很容易计算两个日期中间的差异。让我们来看一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Get duration between two dates</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> LocalDateTime from = LocalDateTime.of( <span class=\"number\">2015</span>, Month.JUNE, <span class=\"number\">25</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> );</span><br><span class=\"line\"><span class=\"keyword\">final</span> LocalDateTime to = LocalDateTime.of( <span class=\"number\">2016</span>, Month.JUNE, <span class=\"number\">25</span>, <span class=\"number\">23</span>, <span class=\"number\">59</span>, <span class=\"number\">59</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> Duration duration = Duration.between( from, to );</span><br><span class=\"line\">System.out.println( <span class=\"string\">\"Duration in days: \"</span> + duration.toDays() );</span><br><span class=\"line\">System.out.println( <span class=\"string\">\"Duration in hours: \"</span> + duration.toHours() );</span><br></pre></td></tr></table></figure>\n<p>上面的例子计算了两个日期（2015年5月25日和2016年5月25日）之间的持续时间（基于天数和小时）输出如下：</p>\n<pre><code>Duration in days: 366\nDuration in hours: 8807\n</code></pre><p>对于Java 8的新日期时间的总体印象还是比较积极的。一部分是因为有经历实战的Joda-Time的基础，<br>还有一部分是因为日期时间终于被认真对待而且听取了开发人员的声音。关于更多的详细信息，请参考<a href=\"http://docs.oracle.com/javase/tutorial/datetime/index.html\">官方文档</a>。</p>\n<h2 id=\"4-4-Nashorn-javascript引擎\"><a href=\"#4-4-Nashorn-javascript引擎\" class=\"headerlink\" title=\"4.4   Nashorn javascript引擎\"></a>4.4   Nashorn javascript引擎</h2><p>Java 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用。Nashorn javascript引擎只是javax.script.ScriptEngine另一个实现，而且规则也一样，允许Java和JavaScript互相操作。这里有个小例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ScriptEngineManager manager = <span class=\"keyword\">new</span> ScriptEngineManager();</span><br><span class=\"line\">ScriptEngine engine = manager.getEngineByName( <span class=\"string\">\"JavaScript\"</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println( engine.getClass().getName() );</span><br><span class=\"line\">System.out.println( <span class=\"string\">\"Result:\"</span> + engine.eval( <span class=\"string\">\"function f() &#123; return 1; &#125;; f() + 1;\"</span> ) );</span><br></pre></td></tr></table></figure>\n<p>输出如下：</p>\n<pre><code>jdk.nashorn.api.scripting.NashornScriptEngine\nResult: 2\n</code></pre><h2 id=\"4-5-Base64\"><a href=\"#4-5-Base64\" class=\"headerlink\" title=\"4.5   Base64\"></a>4.5   Base64</h2><p>对Base64的支持最终成了Java 8标准库的一部分，非常简单易用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBase64</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> String text = <span class=\"string\">\"Base64 finally in Java 8!\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> String encoded = Base64.getEncoder().encodeToString(text.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">\t\tSystem.out.println(encoded);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> String decoded = <span class=\"keyword\">new</span> String(Base64.getDecoder().decode(encoded), StandardCharsets.UTF_8);</span><br><span class=\"line\">\t\tSystem.out.println(decoded);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制台输出的编码和解码的字符串</p>\n<pre><code>QmFzZTY0IGZpbmFsbHkgaW4gSmF2YSA4IQ==\nBase64 finally in Java 8!\n</code></pre><p>新的Base64API也支持URL和MINE的编码解码。</p>\n<p>(Base64.getUrlEncoder() / Base64.getUrlDecoder(), Base64.getMimeEncoder() / Base64.getMimeDecoder()).</p>\n<h2 id=\"4-6-并行数组\"><a href=\"#4-6-并行数组\" class=\"headerlink\" title=\"4.6   并行数组\"></a>4.6   并行数组</h2><p>Java 8新增加了很多方法支持并行的数组处理。最重要的大概是parallelSort()这个方法显著地使排序在多核计算机上速度加快。下面的小例子演示了这个新的方法（parallelXXX）的行为。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.java8.newfeature;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadLocalRandom;</span><br><span class=\"line\"></span><br><span class=\"line\">/ 并行数组 */</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestParallelArray</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span>[] arrayOfLong = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[<span class=\"number\">20000</span>];</span><br><span class=\"line\">\t\tArrays.parallelSetAll(arrayOfLong, index -&gt; ThreadLocalRandom.current().nextInt(<span class=\"number\">1000000</span>));</span><br><span class=\"line\">\t\tArrays.stream(arrayOfLong).limit(<span class=\"number\">10</span>).forEach(i -&gt; System.out.print(i + <span class=\"string\">\" \"</span>));</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tArrays.parallelSort(arrayOfLong);</span><br><span class=\"line\">\t\tArrays.stream(arrayOfLong).limit(<span class=\"number\">10</span>).forEach(i -&gt; System.out.print(i + <span class=\"string\">\" \"</span>));</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一小段代码使用parallelSetAll() t方法填充这个长度是2000的数组，然后使用parallelSort() 排序。<br>这个程序输出了排序前和排序后的10个数字来验证数组真的已经被排序了。示例可能的输出如下（请注意这些数字是随机产生的）</p>\n<pre><code>650193 416424 740906 224816 806179 81842 605508 85078 206531 792115 \n28 57 91 98 184 274 341 342 442 469 \n</code></pre><h2 id=\"4-7-并发\"><a href=\"#4-7-并发\" class=\"headerlink\" title=\"4.7   并发\"></a>4.7   并发</h2><p>在新增Stream机制与lambda的基础之上，在java.util.concurrent.ConcurrentHashMap中加入了一些新方法来支持聚集操作。<br>同时也在java.util.concurrent.ForkJoinPool类中加入了一些新方法来支持共有资源池（common pool）。</p>\n<p>新增的java.util.concurrent.locks.StampedLock类提供一直基于容量的锁，<br>这种锁有三个模型来控制读写操作（它被认为是不太有名的java.util.concurrent.locks.ReadWriteLock类的替代者）。</p>\n<p>在java.util.concurrent.atomic包中还增加了下面这些类：</p>\n<pre><code>DoubleAccumulator\nDoubleAdder\nLongAccumulator\nLongAdder\n</code></pre><h1 id=\"5-新的工具\"><a href=\"#5-新的工具\" class=\"headerlink\" title=\"5.  新的工具\"></a>5.  新的工具</h1><p>Java 8 提供了一些新的命令行工具，在这节里我们将会介绍它们中最有趣的部分。</p>\n<h2 id=\"5-1-Nashorn引擎：jjs\"><a href=\"#5-1-Nashorn引擎：jjs\" class=\"headerlink\" title=\"5.1  Nashorn引擎：jjs\"></a>5.1  Nashorn引擎：jjs</h2><p>jjs是个基于Nashorn引擎的命令行工具。它接受一些JavaScript源代码为参数，并且执行这些源代码。例如，我们创建一个具有如下内容的func.js文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">print( f() + <span class=\"number\">1</span> );</span><br></pre></td></tr></table></figure>\n<p>我们可以把这个文件作为参数传递给jjs使得这个文件可以在命令行中执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span style=<span class=\"string\">\"font-size: 13px;\"</span>&gt;jjs func.js&lt;<span class=\"regexp\">/span&gt;</span></span><br></pre></td></tr></table></figure>\n<p>输出结果如下</p>\n<pre><code>2\n</code></pre><p>更多的详细信息请参考<a href=\"http://docs.oracle.com/javase/8/docs/technotes/tools/unix/jjs.html\">官方文档</a>。</p>\n<h2 id=\"5-2-类依赖分析工具：jdeps\"><a href=\"#5-2-类依赖分析工具：jdeps\" class=\"headerlink\" title=\"5.2 类依赖分析工具：jdeps\"></a>5.2 类依赖分析工具：jdeps</h2><p>Jdeps是一个功能强大的命令行工具，它可以帮我们显示出包层级或者类层级java类文件的依赖关系。它接受class文件、目录、jar文件作为输入，默认情况下，jdeps会输出到控制台。</p>\n<p>作为例子，让我们看看现在很流行的Spring框架的库的依赖关系报告。为了让报告短一些，我们只分析一个jar: org.springframework.core-3.0.5.RELEASE.jar.</p>\n<p>jdeps org.springframework.core-3.0.5.RELEASE.jar 这个命令输出内容很多，我们只看其中的一部分，这些依赖关系根绝包来分组，如果依赖关系在classpath里找不到，就会显示not found.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.core-<span class=\"number\">3.0</span>.5.RELEASE.jar -&gt; C:\\Program Files\\Java\\jdk1.8.0\\jre\\lib\\rt.jar</span><br><span class=\"line\">   org.springframework.core (org.springframework.core-<span class=\"number\">3.0</span>.5.RELEASE.jar)</span><br><span class=\"line\">      -&gt; java.io</span><br><span class=\"line\">      -&gt; java.lang</span><br><span class=\"line\">      -&gt; java.lang.annotation</span><br><span class=\"line\">      -&gt; java.lang.ref</span><br><span class=\"line\">      -&gt; java.lang.reflect</span><br><span class=\"line\">      -&gt; java.util</span><br><span class=\"line\">      -&gt; java.util.concurrent</span><br><span class=\"line\">      -&gt; org.apache.commons.logging                         not found</span><br><span class=\"line\">      -&gt; org.springframework.asm                            not found</span><br><span class=\"line\">      -&gt; org.springframework.asm.commons                    not found</span><br><span class=\"line\">   org.springframework.core.annotation (org.springframework.core-<span class=\"number\">3.0</span>.5.RELEASE.jar)</span><br><span class=\"line\">      -&gt; java.lang</span><br><span class=\"line\">      -&gt; java.lang.annotation</span><br><span class=\"line\">      -&gt; java.lang.reflect</span><br><span class=\"line\">      -&gt; java.util</span><br></pre></td></tr></table></figure>\n<p>更多的详细信息请参考<a href=\"http://docs.oracle.com/javase/8/docs/technotes/tools/unix/jdeps.html\">官方文档</a>。</p>\n<h1 id=\"6-JVM的新特性\"><a href=\"#6-JVM的新特性\" class=\"headerlink\" title=\"6. JVM的新特性\"></a>6. JVM的新特性</h1><p>JVM内存永久区已经被metaspace替换（JEP 122）。JVM参数 -XX:PermSize 和 –XX:MaxPermSize被XX:MetaSpaceSize 和 -XX:MaxMetaspaceSize代替。</p>\n<h1 id=\"7-资源\"><a href=\"#7-资源\" class=\"headerlink\" title=\"7. 资源\"></a>7. 资源</h1><p>下面一些文章从不同层面上深度讨论了Java 8的特性：</p>\n<p><a href=\"http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html\">What’s New in JDK 8</a><br><a href=\"http://docs.oracle.com/javase/tutorial/\">The Java Tutorials</a><br><a href=\"http://blog.arungupta.me/2014/03/wildfly8-jdk8-netbeans8-javaee7-excellent-combo-enterprise-java/\">WildFly 8, JDK 8, NetBeans 8, Java EE 7</a><br><a href=\"http://winterbe.com/posts/2014/03/16/java-8-tutorial/\">Java 8 Tutorial</a><br><a href=\"http://marxsoftware.blogspot.ca/2014/03/jdeps.html\">JDK 8 Command-line Static Dependency Checker</a><br><a href=\"http://marxsoftware.blogspot.ca/2014/03/illuminating-javadoc-of-jdk-8.html\">The Illuminating Javadoc of JDK 8</a><br><a href=\"http://blog.jooq.org/2014/04/04/java-8-friday-the-dark-side-of-java-8/\">The Dark Side of Java 8</a><br><a href=\"http://www.eclipse.org/downloads/java8/\">Installing Java™ 8 Support in Eclipse Kepler SR2</a><br><a href=\"http://www.baeldung.com/java8\">Java 8</a><br><a href=\"http://www.oracle.com/technetwork/articles/java/jf14-nashorn-2126515.html\">Oracle Nashorn. A Next-Generation JavaScript Engine for the JVM</a><br><a href=\"http://ifeve.com/java-8-features-tutorial/\">Java 8 特性 – 终极手册</a><br><a href=\"http://www.jb51.net/article/48304.htm\">JAVA8 十大新特性详解</a>   </p>\n<h1 id=\"Demo下载\"><a href=\"#Demo下载\" class=\"headerlink\" title=\"Demo下载\"></a>Demo下载</h1><p>本文案例Demo<a href=\"/res/file/blog/2014/10/23/java8_new_feature/Java8NewFeature.rar\">下载</a></p>"},{"layout":"post","title":"娱乐一下","date":"2014-10-21T16:00:00.000Z","_content":"\n\n\n<!--more-->\n\n<a href=\"/res/game/plane/plane.html\">娱乐链接</a>","source":"_posts/2014-10-22-plane_game_demo.md","raw":"---\nlayout : post\ntitle : \"娱乐一下\"\ncategory : HTML\ndate : 2014-10-22\ntags : [HTML5 ,HTML  ]\n---\n\n\n\n<!--more-->\n\n<a href=\"/res/game/plane/plane.html\">娱乐链接</a>","slug":"plane_game_demo","published":1,"updated":"2016-04-27T08:16:20.438Z","comments":1,"photos":[],"link":"","_id":"cinu3etxm000qxoj04fenl2uf","content":"<a id=\"more\"></a>\n<p><a href=\"/res/game/plane/plane.html\">娱乐链接</a></p>\n","excerpt":"","more":"<p><a href=\"/res/game/plane/plane.html\">娱乐链接</a></p>"},{"title":"Android程序自动化打包","date":"2014-10-23T16:00:00.000Z","_content":"\n\n<style>\nh3 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nh6 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\n\n</style>\n\n目录:   \n\n* 1.概述\n* 2.准备\n* 3.开始(如果之前有做过前面的步骤可直达第三步)\n\n\n## **1 概述**   \n\n在一般的Android开发中，我们通常使用Eclipse自带的导出工具来进行App的签名和发布，Android自动化打包，就是利用脚本将这样一个手动操作的过程转化为一个命令搞定。\n\n\n<!-- more -->\n\n---\n\n\n## **2 准备**\n\n需要配置好JDK、Android SDK和Ant的环境，\n\n### **2.1 安装配置JDK**   \n\n以jdk-8u45-windows-i586安装包为例  \n\n\n**2.1.1** 双击安装包，假设安装路径默认是C:\\Program Files\\Java\\jdk1.8.0_45，然后点击下一步完成安装。  \n\n\n**2.1.2** windows XP或者Server下右击“我的电脑”弹出菜单，点击“属性“》“高级“》“环境变量“，windows7则右击“计算机“弹出菜单，点击“属性“》“高级系统设置“》“高级“》“环境变量“ ,在“系统变量”下方点击“新建”，“变量名”输入\"**`JAVA_HOME`**\"，“变量值”输入\"**`C:\\Program Files\\Java\\jdk1.8.0_45`**\"，点击“确认”；在“系统变量”选择变量为“Path”的选项，点击下方的“编辑”，在弹出框中修改“变量值”，在原有值的末尾输入“**`;%JAVA_HOME%\\bin`**”，注意开头包含一个英文的分号。   \n\n\n**2.1.3** 点击“开始”》“运行”(或者Win+R)，输入“**`cmd`**”，在弹出的命令窗口中输入“**`javac -version`**”然后回车，如果下方出现：javac version \"1.8.0_45”，说明配置成功。\n\n\n---\n\n\n### **2.2安装配置Android SDK**\n\n**2.2.1** 打开http://developer.android.com/sdk/index.html#ExistingIDE ，找到SDK Tools Only 找到最新版本的包**[android-sdk_r24.3.3-windows.zip](http://dl.google.com/android/android-sdk_r24.3.3-windows.zip)**  ，然后勾选“I have read...”复选框，点击下方的“Download the SDK.....”，将下载完整的SDK工具压缩包。附录[百度云android-sdk_r24.3.2-windows.zip](http://pan.baidu.com/s/1i3eUFDb)   \n\n**2.2.2** 将第一步下载好的压缩包解压，比如直接放到D盘下，完整路径是D:\\android-sdk_r24.3.3-windows。   \n\n\n**2.2.3** 进入上面这个文件夹，双击SDK Manager.exe，在弹出的窗口中有个Packages栏，勾选其中的“`**Tools**`”、\"Android 4.2.2 (API17)\"以及“Extras”下面所有的的选项，点击下方的“**`Install packages`**”开始下载，如果这些选项的Status变为“**`Installed`**”，说明下载完毕。如果下载速度过慢，用记事本打开C:\\WINDOWS\\system32\\drivers\\etc\\hosts这个文件，在最下方新输入一行：**`74.125.237.1    dl-ssl.google.com`**，然后保存，重新打开SDK Manager.exe再试一次。\n\n\n**2.2.4** windows XP或者Server下右击“我的电脑”弹出菜单，点击“属性“》“高级“》“环境变量“，在“系统变量”下方点击“新建”，“变量名”**`输入\"ANDROID_HOME`**\"，“变量值”输入\"**`D:\\android-sdk_r24.3.3-windows`**\"，点击“确认”；在“系统变量”选择变量为“Path”的选项，点击下方的“编辑”，在弹出框中修改“变量值”，在原有值的末尾输入“**`;%ANDROID_HOME%\\platform-tools`**”，注意开头包含一个英文的分号。\n\n\n**2.2.5** 点击“开始”》“运行”，输入“**`cmd`**”，在弹出的命令窗口中输入：**`adb`**回车，如果下方出现：Android Debug Bridge version ...等多行文字，说明配置成功。\n\n\n---\n\n### **2.3 安装配置Ant**\n\n以Ant1.9.3为例\n\n\n**2.3.1** 浏览器打开**[http://ant.apache.org/bindownload.cgi](http://ant.apache.org/bindownload.cgi)** ，找到**.zip archive: [apache-ant-1.9.5-bin.zip](http://ftp.mirror.tw/pub/apache//ant/binaries/apache-ant-1.9.5-bin.zip)** ，点击下载压缩包   \n\n\n**2.3.2** 将压缩包解压的某一个目录，比如直接放到D盘下，完整路径是D:\\apache-ant-1.9.5。\n\n\n**2.3.3** windows XP或者Server下右击“我的电脑”弹出菜单，点击“属性“》“高级“》“环境变量“，在“系统变量”下方点击“新建”，“变量名”输入\"**`ANT_HOME`**\"，“变量值”输入\"**`D:\\apache-ant-1.9.5`**，点击“确认”；在“系统变量”选择变量为“Path”的选项，点击下方的“编辑”，在弹出框中修改“变量值”，在原有值的末尾输入“**`;%ANT_HOME%\\bin`**”，注意开头包含一个英文的分号。   \n\n\n**2.3.4** 点击“开始”》“运行”(Win+R)，输入“**`cmd`**”，在弹出的命令窗口中输入“**`ant -version`**”然后回车，如果下方出现：**`Apache Ant(TM) version 1.9.5 compiled on May 31 2015，`**说明配置成功。\n\n\n---\n\n\n## **3 开始**\n\n**3.1** 准备好项目的源码和依赖库源码，最好放在同一级目录下，确保源码和依赖库可在IDE中编译成功，这样就无需调整project.properties文件中依赖库的相对位置了。   \n\n\n**3.2** 打开CMD命令行，进入到**`依赖库源码目录`**(cd命令)，执行**`android update lib-project -p . -t android-17`**，这个命令的作用是在依赖库下生成自动打包相关的文件，-p .的意思是在当前根目录下执行，-t android-17的意思是此源码使用android-17 api进行编译，各位根据自己的项目情况自行修改，所有的依赖库都要执行这一步操作。  \n\n\n**3.3** 打开CMD命令行，进入到源码根目录，执行**`android update project -p . -t android-17`**，这个命令的作用是在源码下生成自动打包相关的文件。\n\n\n**3.4** 打开CMD命令行，进入到源码根目录，执行**`ant clean`**，然后**`ant debug`**，如果打包成功，可以在源代码的bin目录下看到未签名的apk文件。\n\n\n**3.5** 想要生成签名文件，需要在源码根目录下建立**`ant.properties`**文件，内容如下：\n\n<pre class=\"brush: shell;\">\n\t#包名\n\tapplication.package=you_package_name\n\t#项目名，缺省时源码文件名\n\tant.project.name=\n\t#编码方式\n\tjava.encoding=utf-8\n\t#编译输出绝对路径\n\tout.absolute.dir=d:/out\n\t#生成文件绝对路径\n\tgos.path=d:/out\n\t#签名key文件绝对路径\n\tkey.store=D:/adt-bundle/Nomouse\n\t#签名文件密码\n\tkey.store.password=password\n\t#签名别称，中文的话需要转成utf-8编码，可以使用JDK自带的native2ascii工具\n\tkey.alias=\\u4f01\\u4e1a\n\t#签名别称密码\n\tkey.alias.password=password\n</pre>\n\n**3.6** 打开CMD命令行，进入到源码根目录，执行**`ant release`**，成功的话可以在d:/out目录下看到输出的App签名文件。","source":"_posts/2014-10-24-android_automatic_packaging.md","raw":"---\ntitle : \"Android程序自动化打包\"\ncategory : Android\ndate : 2014-10-24\ntags : [windows环境下搭建Android开发环境 ,Android程序自动化打包 ]\n---\n\n\n<style>\nh3 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nh6 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\n\n</style>\n\n目录:   \n\n* 1.概述\n* 2.准备\n* 3.开始(如果之前有做过前面的步骤可直达第三步)\n\n\n## **1 概述**   \n\n在一般的Android开发中，我们通常使用Eclipse自带的导出工具来进行App的签名和发布，Android自动化打包，就是利用脚本将这样一个手动操作的过程转化为一个命令搞定。\n\n\n<!-- more -->\n\n---\n\n\n## **2 准备**\n\n需要配置好JDK、Android SDK和Ant的环境，\n\n### **2.1 安装配置JDK**   \n\n以jdk-8u45-windows-i586安装包为例  \n\n\n**2.1.1** 双击安装包，假设安装路径默认是C:\\Program Files\\Java\\jdk1.8.0_45，然后点击下一步完成安装。  \n\n\n**2.1.2** windows XP或者Server下右击“我的电脑”弹出菜单，点击“属性“》“高级“》“环境变量“，windows7则右击“计算机“弹出菜单，点击“属性“》“高级系统设置“》“高级“》“环境变量“ ,在“系统变量”下方点击“新建”，“变量名”输入\"**`JAVA_HOME`**\"，“变量值”输入\"**`C:\\Program Files\\Java\\jdk1.8.0_45`**\"，点击“确认”；在“系统变量”选择变量为“Path”的选项，点击下方的“编辑”，在弹出框中修改“变量值”，在原有值的末尾输入“**`;%JAVA_HOME%\\bin`**”，注意开头包含一个英文的分号。   \n\n\n**2.1.3** 点击“开始”》“运行”(或者Win+R)，输入“**`cmd`**”，在弹出的命令窗口中输入“**`javac -version`**”然后回车，如果下方出现：javac version \"1.8.0_45”，说明配置成功。\n\n\n---\n\n\n### **2.2安装配置Android SDK**\n\n**2.2.1** 打开http://developer.android.com/sdk/index.html#ExistingIDE ，找到SDK Tools Only 找到最新版本的包**[android-sdk_r24.3.3-windows.zip](http://dl.google.com/android/android-sdk_r24.3.3-windows.zip)**  ，然后勾选“I have read...”复选框，点击下方的“Download the SDK.....”，将下载完整的SDK工具压缩包。附录[百度云android-sdk_r24.3.2-windows.zip](http://pan.baidu.com/s/1i3eUFDb)   \n\n**2.2.2** 将第一步下载好的压缩包解压，比如直接放到D盘下，完整路径是D:\\android-sdk_r24.3.3-windows。   \n\n\n**2.2.3** 进入上面这个文件夹，双击SDK Manager.exe，在弹出的窗口中有个Packages栏，勾选其中的“`**Tools**`”、\"Android 4.2.2 (API17)\"以及“Extras”下面所有的的选项，点击下方的“**`Install packages`**”开始下载，如果这些选项的Status变为“**`Installed`**”，说明下载完毕。如果下载速度过慢，用记事本打开C:\\WINDOWS\\system32\\drivers\\etc\\hosts这个文件，在最下方新输入一行：**`74.125.237.1    dl-ssl.google.com`**，然后保存，重新打开SDK Manager.exe再试一次。\n\n\n**2.2.4** windows XP或者Server下右击“我的电脑”弹出菜单，点击“属性“》“高级“》“环境变量“，在“系统变量”下方点击“新建”，“变量名”**`输入\"ANDROID_HOME`**\"，“变量值”输入\"**`D:\\android-sdk_r24.3.3-windows`**\"，点击“确认”；在“系统变量”选择变量为“Path”的选项，点击下方的“编辑”，在弹出框中修改“变量值”，在原有值的末尾输入“**`;%ANDROID_HOME%\\platform-tools`**”，注意开头包含一个英文的分号。\n\n\n**2.2.5** 点击“开始”》“运行”，输入“**`cmd`**”，在弹出的命令窗口中输入：**`adb`**回车，如果下方出现：Android Debug Bridge version ...等多行文字，说明配置成功。\n\n\n---\n\n### **2.3 安装配置Ant**\n\n以Ant1.9.3为例\n\n\n**2.3.1** 浏览器打开**[http://ant.apache.org/bindownload.cgi](http://ant.apache.org/bindownload.cgi)** ，找到**.zip archive: [apache-ant-1.9.5-bin.zip](http://ftp.mirror.tw/pub/apache//ant/binaries/apache-ant-1.9.5-bin.zip)** ，点击下载压缩包   \n\n\n**2.3.2** 将压缩包解压的某一个目录，比如直接放到D盘下，完整路径是D:\\apache-ant-1.9.5。\n\n\n**2.3.3** windows XP或者Server下右击“我的电脑”弹出菜单，点击“属性“》“高级“》“环境变量“，在“系统变量”下方点击“新建”，“变量名”输入\"**`ANT_HOME`**\"，“变量值”输入\"**`D:\\apache-ant-1.9.5`**，点击“确认”；在“系统变量”选择变量为“Path”的选项，点击下方的“编辑”，在弹出框中修改“变量值”，在原有值的末尾输入“**`;%ANT_HOME%\\bin`**”，注意开头包含一个英文的分号。   \n\n\n**2.3.4** 点击“开始”》“运行”(Win+R)，输入“**`cmd`**”，在弹出的命令窗口中输入“**`ant -version`**”然后回车，如果下方出现：**`Apache Ant(TM) version 1.9.5 compiled on May 31 2015，`**说明配置成功。\n\n\n---\n\n\n## **3 开始**\n\n**3.1** 准备好项目的源码和依赖库源码，最好放在同一级目录下，确保源码和依赖库可在IDE中编译成功，这样就无需调整project.properties文件中依赖库的相对位置了。   \n\n\n**3.2** 打开CMD命令行，进入到**`依赖库源码目录`**(cd命令)，执行**`android update lib-project -p . -t android-17`**，这个命令的作用是在依赖库下生成自动打包相关的文件，-p .的意思是在当前根目录下执行，-t android-17的意思是此源码使用android-17 api进行编译，各位根据自己的项目情况自行修改，所有的依赖库都要执行这一步操作。  \n\n\n**3.3** 打开CMD命令行，进入到源码根目录，执行**`android update project -p . -t android-17`**，这个命令的作用是在源码下生成自动打包相关的文件。\n\n\n**3.4** 打开CMD命令行，进入到源码根目录，执行**`ant clean`**，然后**`ant debug`**，如果打包成功，可以在源代码的bin目录下看到未签名的apk文件。\n\n\n**3.5** 想要生成签名文件，需要在源码根目录下建立**`ant.properties`**文件，内容如下：\n\n<pre class=\"brush: shell;\">\n\t#包名\n\tapplication.package=you_package_name\n\t#项目名，缺省时源码文件名\n\tant.project.name=\n\t#编码方式\n\tjava.encoding=utf-8\n\t#编译输出绝对路径\n\tout.absolute.dir=d:/out\n\t#生成文件绝对路径\n\tgos.path=d:/out\n\t#签名key文件绝对路径\n\tkey.store=D:/adt-bundle/Nomouse\n\t#签名文件密码\n\tkey.store.password=password\n\t#签名别称，中文的话需要转成utf-8编码，可以使用JDK自带的native2ascii工具\n\tkey.alias=\\u4f01\\u4e1a\n\t#签名别称密码\n\tkey.alias.password=password\n</pre>\n\n**3.6** 打开CMD命令行，进入到源码根目录，执行**`ant release`**，成功的话可以在d:/out目录下看到输出的App签名文件。","slug":"android_automatic_packaging","published":1,"updated":"2016-04-27T07:55:29.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinu3etxp000txoj0qiqf38si","content":"<style>\nh3 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nh6 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\n\n</style>\n\n<p>目录:   </p>\n<ul>\n<li>1.概述</li>\n<li>2.准备</li>\n<li>3.开始(如果之前有做过前面的步骤可直达第三步)</li>\n</ul>\n<h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1 概述\"></a><strong>1 概述</strong></h2><p>在一般的Android开发中，我们通常使用Eclipse自带的导出工具来进行App的签名和发布，Android自动化打包，就是利用脚本将这样一个手动操作的过程转化为一个命令搞定。</p>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"2-准备\"><a href=\"#2-准备\" class=\"headerlink\" title=\"2 准备\"></a><strong>2 准备</strong></h2><p>需要配置好JDK、Android SDK和Ant的环境，</p>\n<h3 id=\"2-1-安装配置JDK\"><a href=\"#2-1-安装配置JDK\" class=\"headerlink\" title=\"2.1 安装配置JDK\"></a><strong>2.1 安装配置JDK</strong></h3><p>以jdk-8u45-windows-i586安装包为例  </p>\n<p><strong>2.1.1</strong> 双击安装包，假设安装路径默认是C:\\Program Files\\Java\\jdk1.8.0_45，然后点击下一步完成安装。  </p>\n<p><strong>2.1.2</strong> windows XP或者Server下右击“我的电脑”弹出菜单，点击“属性“》“高级“》“环境变量“，windows7则右击“计算机“弹出菜单，点击“属性“》“高级系统设置“》“高级“》“环境变量“ ,在“系统变量”下方点击“新建”，“变量名”输入”<strong><code>JAVA_HOME</code></strong>“，“变量值”输入”<strong><code>C:\\Program Files\\Java\\jdk1.8.0_45</code></strong>“，点击“确认”；在“系统变量”选择变量为“Path”的选项，点击下方的“编辑”，在弹出框中修改“变量值”，在原有值的末尾输入“<strong><code>;%JAVA_HOME%\\bin</code></strong>”，注意开头包含一个英文的分号。   </p>\n<p><strong>2.1.3</strong> 点击“开始”》“运行”(或者Win+R)，输入“<strong><code>cmd</code></strong>”，在弹出的命令窗口中输入“<strong><code>javac -version</code></strong>”然后回车，如果下方出现：javac version “1.8.0_45”，说明配置成功。</p>\n<hr>\n<h3 id=\"2-2安装配置Android-SDK\"><a href=\"#2-2安装配置Android-SDK\" class=\"headerlink\" title=\"2.2安装配置Android SDK\"></a><strong>2.2安装配置Android SDK</strong></h3><p><strong>2.2.1</strong> 打开<a href=\"http://developer.android.com/sdk/index.html#ExistingIDE\" target=\"_blank\" rel=\"external\">http://developer.android.com/sdk/index.html#ExistingIDE</a> ，找到SDK Tools Only 找到最新版本的包<strong><a href=\"http://dl.google.com/android/android-sdk_r24.3.3-windows.zip\" target=\"_blank\" rel=\"external\">android-sdk_r24.3.3-windows.zip</a></strong>  ，然后勾选“I have read…”复选框，点击下方的“Download the SDK…..”，将下载完整的SDK工具压缩包。附录<a href=\"http://pan.baidu.com/s/1i3eUFDb\" target=\"_blank\" rel=\"external\">百度云android-sdk_r24.3.2-windows.zip</a>   </p>\n<p><strong>2.2.2</strong> 将第一步下载好的压缩包解压，比如直接放到D盘下，完整路径是D:\\android-sdk_r24.3.3-windows。   </p>\n<p><strong>2.2.3</strong> 进入上面这个文件夹，双击SDK Manager.exe，在弹出的窗口中有个Packages栏，勾选其中的“<code>**Tools**</code>”、”Android 4.2.2 (API17)”以及“Extras”下面所有的的选项，点击下方的“<strong><code>Install packages</code></strong>”开始下载，如果这些选项的Status变为“<strong><code>Installed</code></strong>”，说明下载完毕。如果下载速度过慢，用记事本打开C:\\WINDOWS\\system32\\drivers\\etc\\hosts这个文件，在最下方新输入一行：<strong><code>74.125.237.1    dl-ssl.google.com</code></strong>，然后保存，重新打开SDK Manager.exe再试一次。</p>\n<p><strong>2.2.4</strong> windows XP或者Server下右击“我的电脑”弹出菜单，点击“属性“》“高级“》“环境变量“，在“系统变量”下方点击“新建”，“变量名”<strong><code>输入&quot;ANDROID_HOME</code></strong>“，“变量值”输入”<strong><code>D:\\android-sdk_r24.3.3-windows</code></strong>“，点击“确认”；在“系统变量”选择变量为“Path”的选项，点击下方的“编辑”，在弹出框中修改“变量值”，在原有值的末尾输入“<strong><code>;%ANDROID_HOME%\\platform-tools</code></strong>”，注意开头包含一个英文的分号。</p>\n<p><strong>2.2.5</strong> 点击“开始”》“运行”，输入“<strong><code>cmd</code></strong>”，在弹出的命令窗口中输入：<strong><code>adb</code></strong>回车，如果下方出现：Android Debug Bridge version …等多行文字，说明配置成功。</p>\n<hr>\n<h3 id=\"2-3-安装配置Ant\"><a href=\"#2-3-安装配置Ant\" class=\"headerlink\" title=\"2.3 安装配置Ant\"></a><strong>2.3 安装配置Ant</strong></h3><p>以Ant1.9.3为例</p>\n<p><strong>2.3.1</strong> 浏览器打开<strong><a href=\"http://ant.apache.org/bindownload.cgi\" target=\"_blank\" rel=\"external\">http://ant.apache.org/bindownload.cgi</a></strong> ，找到<strong>.zip archive: <a href=\"http://ftp.mirror.tw/pub/apache//ant/binaries/apache-ant-1.9.5-bin.zip\" target=\"_blank\" rel=\"external\">apache-ant-1.9.5-bin.zip</a></strong> ，点击下载压缩包   </p>\n<p><strong>2.3.2</strong> 将压缩包解压的某一个目录，比如直接放到D盘下，完整路径是D:\\apache-ant-1.9.5。</p>\n<p><strong>2.3.3</strong> windows XP或者Server下右击“我的电脑”弹出菜单，点击“属性“》“高级“》“环境变量“，在“系统变量”下方点击“新建”，“变量名”输入”<strong><code>ANT_HOME</code></strong>“，“变量值”输入”<strong><code>D:\\apache-ant-1.9.5</code></strong>，点击“确认”；在“系统变量”选择变量为“Path”的选项，点击下方的“编辑”，在弹出框中修改“变量值”，在原有值的末尾输入“<strong><code>;%ANT_HOME%\\bin</code></strong>”，注意开头包含一个英文的分号。   </p>\n<p><strong>2.3.4</strong> 点击“开始”》“运行”(Win+R)，输入“<strong><code>cmd</code></strong>”，在弹出的命令窗口中输入“<strong><code>ant -version</code></strong>”然后回车，如果下方出现：<strong><code>Apache Ant(TM) version 1.9.5 compiled on May 31 2015，</code></strong>说明配置成功。</p>\n<hr>\n<h2 id=\"3-开始\"><a href=\"#3-开始\" class=\"headerlink\" title=\"3 开始\"></a><strong>3 开始</strong></h2><p><strong>3.1</strong> 准备好项目的源码和依赖库源码，最好放在同一级目录下，确保源码和依赖库可在IDE中编译成功，这样就无需调整project.properties文件中依赖库的相对位置了。   </p>\n<p><strong>3.2</strong> 打开CMD命令行，进入到<strong><code>依赖库源码目录</code></strong>(cd命令)，执行<strong><code>android update lib-project -p . -t android-17</code></strong>，这个命令的作用是在依赖库下生成自动打包相关的文件，-p .的意思是在当前根目录下执行，-t android-17的意思是此源码使用android-17 api进行编译，各位根据自己的项目情况自行修改，所有的依赖库都要执行这一步操作。  </p>\n<p><strong>3.3</strong> 打开CMD命令行，进入到源码根目录，执行<strong><code>android update project -p . -t android-17</code></strong>，这个命令的作用是在源码下生成自动打包相关的文件。</p>\n<p><strong>3.4</strong> 打开CMD命令行，进入到源码根目录，执行<strong><code>ant clean</code></strong>，然后<strong><code>ant debug</code></strong>，如果打包成功，可以在源代码的bin目录下看到未签名的apk文件。</p>\n<p><strong>3.5</strong> 想要生成签名文件，需要在源码根目录下建立<strong><code>ant.properties</code></strong>文件，内容如下：</p>\n<pre class=\"brush: shell;\">\n    #包名\n    application.package=you_package_name\n    #项目名，缺省时源码文件名\n    ant.project.name=\n    #编码方式\n    java.encoding=utf-8\n    #编译输出绝对路径\n    out.absolute.dir=d:/out\n    #生成文件绝对路径\n    gos.path=d:/out\n    #签名key文件绝对路径\n    key.store=D:/adt-bundle/Nomouse\n    #签名文件密码\n    key.store.password=password\n    #签名别称，中文的话需要转成utf-8编码，可以使用JDK自带的native2ascii工具\n    key.alias=\\u4f01\\u4e1a\n    #签名别称密码\n    key.alias.password=password\n</pre>\n\n<p><strong>3.6</strong> 打开CMD命令行，进入到源码根目录，执行<strong><code>ant release</code></strong>，成功的话可以在d:/out目录下看到输出的App签名文件。</p>\n","excerpt":"<style>\nh3 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nh6 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\n\n</style>\n\n<p>目录:   </p>\n<ul>\n<li>1.概述</li>\n<li>2.准备</li>\n<li>3.开始(如果之前有做过前面的步骤可直达第三步)</li>\n</ul>\n<h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1 概述\"></a><strong>1 概述</strong></h2><p>在一般的Android开发中，我们通常使用Eclipse自带的导出工具来进行App的签名和发布，Android自动化打包，就是利用脚本将这样一个手动操作的过程转化为一个命令搞定。</p>","more":"<hr>\n<h2 id=\"2-准备\"><a href=\"#2-准备\" class=\"headerlink\" title=\"2 准备\"></a><strong>2 准备</strong></h2><p>需要配置好JDK、Android SDK和Ant的环境，</p>\n<h3 id=\"2-1-安装配置JDK\"><a href=\"#2-1-安装配置JDK\" class=\"headerlink\" title=\"2.1 安装配置JDK\"></a><strong>2.1 安装配置JDK</strong></h3><p>以jdk-8u45-windows-i586安装包为例  </p>\n<p><strong>2.1.1</strong> 双击安装包，假设安装路径默认是C:\\Program Files\\Java\\jdk1.8.0_45，然后点击下一步完成安装。  </p>\n<p><strong>2.1.2</strong> windows XP或者Server下右击“我的电脑”弹出菜单，点击“属性“》“高级“》“环境变量“，windows7则右击“计算机“弹出菜单，点击“属性“》“高级系统设置“》“高级“》“环境变量“ ,在“系统变量”下方点击“新建”，“变量名”输入”<strong><code>JAVA_HOME</code></strong>“，“变量值”输入”<strong><code>C:\\Program Files\\Java\\jdk1.8.0_45</code></strong>“，点击“确认”；在“系统变量”选择变量为“Path”的选项，点击下方的“编辑”，在弹出框中修改“变量值”，在原有值的末尾输入“<strong><code>;%JAVA_HOME%\\bin</code></strong>”，注意开头包含一个英文的分号。   </p>\n<p><strong>2.1.3</strong> 点击“开始”》“运行”(或者Win+R)，输入“<strong><code>cmd</code></strong>”，在弹出的命令窗口中输入“<strong><code>javac -version</code></strong>”然后回车，如果下方出现：javac version “1.8.0_45”，说明配置成功。</p>\n<hr>\n<h3 id=\"2-2安装配置Android-SDK\"><a href=\"#2-2安装配置Android-SDK\" class=\"headerlink\" title=\"2.2安装配置Android SDK\"></a><strong>2.2安装配置Android SDK</strong></h3><p><strong>2.2.1</strong> 打开<a href=\"http://developer.android.com/sdk/index.html#ExistingIDE\">http://developer.android.com/sdk/index.html#ExistingIDE</a> ，找到SDK Tools Only 找到最新版本的包<strong><a href=\"http://dl.google.com/android/android-sdk_r24.3.3-windows.zip\">android-sdk_r24.3.3-windows.zip</a></strong>  ，然后勾选“I have read…”复选框，点击下方的“Download the SDK…..”，将下载完整的SDK工具压缩包。附录<a href=\"http://pan.baidu.com/s/1i3eUFDb\">百度云android-sdk_r24.3.2-windows.zip</a>   </p>\n<p><strong>2.2.2</strong> 将第一步下载好的压缩包解压，比如直接放到D盘下，完整路径是D:\\android-sdk_r24.3.3-windows。   </p>\n<p><strong>2.2.3</strong> 进入上面这个文件夹，双击SDK Manager.exe，在弹出的窗口中有个Packages栏，勾选其中的“<code>**Tools**</code>”、”Android 4.2.2 (API17)”以及“Extras”下面所有的的选项，点击下方的“<strong><code>Install packages</code></strong>”开始下载，如果这些选项的Status变为“<strong><code>Installed</code></strong>”，说明下载完毕。如果下载速度过慢，用记事本打开C:\\WINDOWS\\system32\\drivers\\etc\\hosts这个文件，在最下方新输入一行：<strong><code>74.125.237.1    dl-ssl.google.com</code></strong>，然后保存，重新打开SDK Manager.exe再试一次。</p>\n<p><strong>2.2.4</strong> windows XP或者Server下右击“我的电脑”弹出菜单，点击“属性“》“高级“》“环境变量“，在“系统变量”下方点击“新建”，“变量名”<strong><code>输入&quot;ANDROID_HOME</code></strong>“，“变量值”输入”<strong><code>D:\\android-sdk_r24.3.3-windows</code></strong>“，点击“确认”；在“系统变量”选择变量为“Path”的选项，点击下方的“编辑”，在弹出框中修改“变量值”，在原有值的末尾输入“<strong><code>;%ANDROID_HOME%\\platform-tools</code></strong>”，注意开头包含一个英文的分号。</p>\n<p><strong>2.2.5</strong> 点击“开始”》“运行”，输入“<strong><code>cmd</code></strong>”，在弹出的命令窗口中输入：<strong><code>adb</code></strong>回车，如果下方出现：Android Debug Bridge version …等多行文字，说明配置成功。</p>\n<hr>\n<h3 id=\"2-3-安装配置Ant\"><a href=\"#2-3-安装配置Ant\" class=\"headerlink\" title=\"2.3 安装配置Ant\"></a><strong>2.3 安装配置Ant</strong></h3><p>以Ant1.9.3为例</p>\n<p><strong>2.3.1</strong> 浏览器打开<strong><a href=\"http://ant.apache.org/bindownload.cgi\">http://ant.apache.org/bindownload.cgi</a></strong> ，找到<strong>.zip archive: <a href=\"http://ftp.mirror.tw/pub/apache//ant/binaries/apache-ant-1.9.5-bin.zip\">apache-ant-1.9.5-bin.zip</a></strong> ，点击下载压缩包   </p>\n<p><strong>2.3.2</strong> 将压缩包解压的某一个目录，比如直接放到D盘下，完整路径是D:\\apache-ant-1.9.5。</p>\n<p><strong>2.3.3</strong> windows XP或者Server下右击“我的电脑”弹出菜单，点击“属性“》“高级“》“环境变量“，在“系统变量”下方点击“新建”，“变量名”输入”<strong><code>ANT_HOME</code></strong>“，“变量值”输入”<strong><code>D:\\apache-ant-1.9.5</code></strong>，点击“确认”；在“系统变量”选择变量为“Path”的选项，点击下方的“编辑”，在弹出框中修改“变量值”，在原有值的末尾输入“<strong><code>;%ANT_HOME%\\bin</code></strong>”，注意开头包含一个英文的分号。   </p>\n<p><strong>2.3.4</strong> 点击“开始”》“运行”(Win+R)，输入“<strong><code>cmd</code></strong>”，在弹出的命令窗口中输入“<strong><code>ant -version</code></strong>”然后回车，如果下方出现：<strong><code>Apache Ant(TM) version 1.9.5 compiled on May 31 2015，</code></strong>说明配置成功。</p>\n<hr>\n<h2 id=\"3-开始\"><a href=\"#3-开始\" class=\"headerlink\" title=\"3 开始\"></a><strong>3 开始</strong></h2><p><strong>3.1</strong> 准备好项目的源码和依赖库源码，最好放在同一级目录下，确保源码和依赖库可在IDE中编译成功，这样就无需调整project.properties文件中依赖库的相对位置了。   </p>\n<p><strong>3.2</strong> 打开CMD命令行，进入到<strong><code>依赖库源码目录</code></strong>(cd命令)，执行<strong><code>android update lib-project -p . -t android-17</code></strong>，这个命令的作用是在依赖库下生成自动打包相关的文件，-p .的意思是在当前根目录下执行，-t android-17的意思是此源码使用android-17 api进行编译，各位根据自己的项目情况自行修改，所有的依赖库都要执行这一步操作。  </p>\n<p><strong>3.3</strong> 打开CMD命令行，进入到源码根目录，执行<strong><code>android update project -p . -t android-17</code></strong>，这个命令的作用是在源码下生成自动打包相关的文件。</p>\n<p><strong>3.4</strong> 打开CMD命令行，进入到源码根目录，执行<strong><code>ant clean</code></strong>，然后<strong><code>ant debug</code></strong>，如果打包成功，可以在源代码的bin目录下看到未签名的apk文件。</p>\n<p><strong>3.5</strong> 想要生成签名文件，需要在源码根目录下建立<strong><code>ant.properties</code></strong>文件，内容如下：</p>\n<pre class=\"brush: shell;\">\n    #包名\n    application.package=you_package_name\n    #项目名，缺省时源码文件名\n    ant.project.name=\n    #编码方式\n    java.encoding=utf-8\n    #编译输出绝对路径\n    out.absolute.dir=d:/out\n    #生成文件绝对路径\n    gos.path=d:/out\n    #签名key文件绝对路径\n    key.store=D:/adt-bundle/Nomouse\n    #签名文件密码\n    key.store.password=password\n    #签名别称，中文的话需要转成utf-8编码，可以使用JDK自带的native2ascii工具\n    key.alias=\\u4f01\\u4e1a\n    #签名别称密码\n    key.alias.password=password\n</pre>\n\n<p><strong>3.6</strong> 打开CMD命令行，进入到源码根目录，执行<strong><code>ant release</code></strong>，成功的话可以在d:/out目录下看到输出的App签名文件。</p>"},{"layout":"post","title":"Android安全模式机制之二(操作系统现代安全体系基础概念)","date":"2014-10-25T16:00:00.000Z","_content":"<style>\nh3 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nh6 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\n\n</style>\n\n目录:\n\n*  1.进程和进程边界\n*  2.多用户和多用户边界\n*  3.进程和文件的UID/GID (UserID/groupId)\n\t*  3.1文件资源的权限力度:UID/GID\n\t*  3.2文件的可操作权限\n\t*  3.3进程的标识: PID , UID , GID , GIDs\n\t*  3.4Name和ID的映射\n\t*  3.5Chmod和chown命令介绍\n\t\t*  3.5.1Chmod\n\t\t*  3.5.2Chown\n*  4.UID/GID的衔接\n*  5.进程的RealUID和EffectiveUID\n*  6.文件的setUID标识\n*  7.Capability\n\t*  7.1进程的Capability\n\t*  7.2文件的Capability\n\t*  7.3Capability BoundSet\n\t*  7.4Spawn进程的Capability\n\n---\n\n# 进程和进程边界\n\t\n\t进程和线程\n\t\t可执行文件:不活动就是废物\n\t\t进程:可执行文件的活动表现,一次生命的历练\n\t\t线程:CPU(核)的调度单位,并发的执行序列,进程的多管齐下\n\t\t资源和调度.\n\n\t\n\t进程边界的安全围栏: \n\t\tCrash的不可扩延性\n\t\t全局数据和服务的不可访问性\n\n<!-- more -->\n\n# 多用户和多用户边界\n\t\n\t需求背景:\n\t\t资源缺乏\n\t\t中央统一管理\n\n\t多用户的边界:\n\t\t独立的工作目录\n\t\t可操作/访问的资源\n\t\t\t资源分类\n\t\t\t权限管理\n\t\t可执行的操作\n\t\t\t操作分类\n\t\t\t权限管理\n\n\t多用户特性标识(linux): UID 和GID\n\t\tName只是供看的\n\t\tIdentifier才是系统层面的标识\n\t\t用户的行为是一系列进程的行为\n\t\t特性标识其实是进程的UID/GID\n\n\n# 进程和文件的UID/GID (UserID/groupId) \n\n## 文件资源的权限力度:UID/GID\n\t1.文件是一类资源\n\t2.在Linux中,甚至一切皆是文件,Socket,Driver\n\t3.文件资源对不同Target(用户)的不同操作权限的需求应运而生\n\t4.某些场景下,允许多个不同的Target/用户(而不是一个)具有一致的操作权限,怎么办? \n\t\tId===> Gid===> 多个用户可以属于一个GID,一个用户可以属于多个GIDs\n\t5.所以文件权限的管理力度区分3类群体:属于特定UID的用户,属于特定GID的用户(们),其他用户\n\t6.一个上帝用户存在:ROOT, 其UID = 0 , 上帝用户永远满足属于任何UID\n\n## 文件的可操作权限\n\t1.文件/文件夹的可读 r\n\t2.文件/文件夹的可写 w\n\t3.文件/文件夹的可执行 x\n\n```shell\n\t\t$ ls -l\n\t\ttotal 20\n\t\t 权限列表        UID       GID\n\t\t-rw-r--r--    1 comtu    Administ      879 Feb 25 17:39 404.html\n\t\t-rw-r--r--    1 comtu    Administ     2800 Feb 25 17:39 README.md\n\t\t-rw-r--r--    1 comtu    Administ     2909 Feb 25 17:39 Rakefile.rb\n\t\t-rw-r--r--    1 comtu    Administ     1609 Feb 25 17:39 _config.yml\n\t\tdrwxr-xr-x    4 comtu    Administ        0 Feb 25 17:39 _data\n\t\tdrwxr-xr-x    7 comtu    Administ     4096 Feb 25 17:39 _includes\n\t\tdrwxr-xr-x    5 comtu    Administ        0 Feb 25 17:39 _layouts\n\t\tdrwxr-xr-x    3 comtu    Administ        0 Feb 25 17:39 _plugins\n\t\tdrwxr-xr-x   18 comtu    Administ     8192 Jul  1 17:36 _posts\n\t\tdrwxr-xr-x   13 comtu    Administ     4096 Jul  1 13:30 _site\n\t\t-rw-r--r--    1 comtu    Administ       10 Feb 25 17:39 baidu_verify_\n\t\thtml\n\t\t-rw-r--r--    1 comtu    Administ     1672 Feb 25 17:39 index.html\n\t\tdrwxr-xr-x    1 comtu    Administ     4096 Feb 25 17:39 page\n\t\tdrwxr-xr-x    1 comtu    Administ     4096 Jun 25 16:18 res\n\t\t-rw-r--r--    1 comtu    Administ       59 Jun 25 17:45 robots.txt\n\t\t-rw-r--r--    1 comtu    Administ      350 Apr 13 17:53 search.xml\n\t\t-rw-r--r--    1 comtu    Administ      209 Feb 25 17:39 sitemap.txt\n```\n\t\t\n\t\tdrwxr-xr-x\n\t\td|rwx|r-x|r-x\n\t\t0|123|456|789\n\n\t\t文件夹与文件标识\n\t\t\t0 : d文件夹\t-文件\n\t\tUID用户\n\t\t\t1 : 可读\n\t\t\t2 : 可写\n\t\t\t3 : 可执行\n\t\tGID用户\n\t\t\t4 : 可读\n\t\t\t5 : 不可写\n\t\t\t6 : 可执行\n\t\t其他用户\n\t\t\t7 : 可读\n\t\t\t8 : 不可写\n\t\t\t9 : 可执行\n\n## 进程的标识: PID , UID , GID , GIDs\n\n\tPID : 进程的Unique Identifier(唯一标识) . 每次Running的PID可能相同,或者不同,由系统分配\n\tUID : 进程的身份标识.每次运行,即便重启后默认都相同\n\tGID : 进程的(组)身份标识.每次运行,即便重启后默认都相同.不同进程允许有相同的GID(组用户身份标识).\n\t\t同一进程允许属于多个GID.\n\tGIDs: 进程所属的全部GID\n\n## Name和ID的映射\n\t\n\tAndroid原代码之Name和ID映射表\n\t/system/core/include/private/android_filesystem_config.h\n\t\n```c\n\t/*\n\t * Copyright (C) 2007 The Android Open Source Project\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\n\t/* This file is used to define the properties of the filesystem\n\t#  images generated by build tools (mkbootfs and mkyaffs2image) and\n\t#  by the device side of adb.\n\t*/\n\n\t#ifndef _ANDROID_FILESYSTEM_CONFIG_H_\n\t#define _ANDROID_FILESYSTEM_CONFIG_H_\n\n\t#include &lt;string.h>\n\t#include &lt;sys/stat.h>\n\t#include &lt;sys/types.h>\n\n\t/* This is the master Users and Groups config for the platform.\n\t#  DO NOT EVER RENUMBER.\n\t*/\n\n\t#define AID_ROOT             0  /* traditional unix root user */\n\n\t#define AID_SYSTEM        1000  /* system server */\n\n\t#define AID_RADIO         1001  /* telephony subsystem, RIL */\n\t#define AID_BLUETOOTH     1002  /* bluetooth subsystem */\n\t#define AID_GRAPHICS      1003  /* graphics devices */\n\t#define AID_INPUT         1004  /* input devices */\n\t#define AID_AUDIO         1005  /* audio devices */\n\t#define AID_CAMERA        1006  /* camera devices */\n\t#define AID_LOG           1007  /* log devices */\n\t#define AID_COMPASS       1008  /* compass device */\n\t#define AID_MOUNT         1009  /* mountd socket */\n\t#define AID_WIFI          1010  /* wifi subsystem */\n\t#define AID_ADB           1011  /* android debug bridge (adbd) */\n\t#define AID_INSTALL       1012  /* group for installing packages */\n\t#define AID_MEDIA         1013  /* mediaserver process */\n\t#define AID_DHCP          1014  /* dhcp client */\n\t#define AID_SDCARD_RW     1015  /* external storage write access */\n\t#define AID_VPN           1016  /* vpn system */\n\t#define AID_KEYSTORE      1017  /* keystore subsystem */\n\t#define AID_USB           1018  /* USB devices */\n\t#define AID_GPS           1021  /* GPS daemon */\n\t#define AID_UNUSED1       1022  /* deprecated, DO NOT USE */\n\t#define AID_RFU1          1023  /* RFU */\n\t#define AID_RFU2          1024  /* RFU */\n\t#define AID_NFC           1025  /* nfc subsystem */\n\n\t#define AID_SHELL         2000  /* adb and debug shell user */\n\t#define AID_CACHE         2001  /* cache access */\n\t#define AID_DIAG          2002  /* access to diagnostic resources */\n\n\t/* The 3000 series are intended for use as supplemental group id's only.\n\t * They indicate special Android capabilities that the kernel is aware of. */\n\t#define AID_NET_BT_ADMIN  3001  /* bluetooth: create any socket */\n\t#define AID_NET_BT        3002  /* bluetooth: create sco, rfcomm or l2cap sockets */\n\t#define AID_INET          3003  /* can create AF_INET and AF_INET6 sockets */\n\t#define AID_NET_RAW       3004  /* can create raw INET sockets */\n\t#define AID_NET_ADMIN     3005  /* can configure interfaces and routing tables. */\n\t#define AID_QCOM_ONCRPC   3006  /* can read/write /dev/oncrpc files */\n\n\t#if defined(MOTOROLA_UIDS)\n\t#define AID_MOT_ACCY      9000  /* access to accessory */\n\t#define AID_MOT_PWRIC     9001  /* power IC */\n\t#define AID_MOT_USB       9002  /* mot usb */\n\t#define AID_MOT_DRM       9003  /* can access DRM resource. */\n\t#define AID_MOT_TCMD      9004  /* mot_tcmd */\n\t#define AID_MOT_SEC_RTC   9005  /* mot cpcap rtc */\n\t#define AID_MOT_TOMBSTONE 9006\n\t#define AID_MOT_TPAPI     9007  /* mot_tpapi */\n\t#define AID_MOT_SECCLKD   9008  /* mot_secclkd */\n\t#endif // MOTOROLA_UIDS\n\n\t#define AID_MISC          9998  /* access to misc storage */\n\t#define AID_NOBODY        9999\n\n\t#define AID_APP          10000 /* first app user */\n\n\t#if !defined(EXCLUDE_FS_CONFIG_STRUCTURES)\n\tstruct android_id_info {\n\t    const char *name;\n\t    unsigned aid;\n\t};\n\n\tstatic const struct android_id_info android_ids[] = {\n\t    { \"root\",      AID_ROOT, },\n\t    { \"system\",    AID_SYSTEM, },\n\t    { \"radio\",     AID_RADIO, },\n\t    { \"bluetooth\", AID_BLUETOOTH, },\n\t    { \"graphics\",  AID_GRAPHICS, },\n\t    { \"input\",     AID_INPUT, },\n\t    { \"audio\",     AID_AUDIO, },\n\t    { \"camera\",    AID_CAMERA, },\n\t    { \"log\",       AID_LOG, },\n\t    { \"compass\",   AID_COMPASS, },\n\t    { \"mount\",     AID_MOUNT, },\n\t    { \"wifi\",      AID_WIFI, },\n\t    { \"dhcp\",      AID_DHCP, },\n\t    { \"adb\",       AID_ADB, },\n\t    { \"install\",   AID_INSTALL, },\n\t    { \"media\",     AID_MEDIA, },\n\t    { \"nfc\",       AID_NFC, },\n\t    { \"shell\",     AID_SHELL, },\n\t    { \"cache\",     AID_CACHE, },\n\t    { \"diag\",      AID_DIAG, },\n\t    { \"net_bt_admin\", AID_NET_BT_ADMIN, },\n\t    { \"net_bt\",    AID_NET_BT, },\n\t    { \"qcom_oncrpc\", AID_QCOM_ONCRPC, },\n\t    { \"sdcard_rw\", AID_SDCARD_RW, },\n\t    { \"vpn\",       AID_VPN, },\n\t    { \"keystore\",  AID_KEYSTORE, },\n\t    { \"usb\",       AID_USB, },\n\t    { \"gps\",       AID_GPS, },\n\t    { \"inet\",      AID_INET, },\n\t    { \"net_raw\",   AID_NET_RAW, },\n\t    { \"net_admin\", AID_NET_ADMIN, },\n\t#if defined(MOTOROLA_UIDS)\n\t    { \"mot_accy\",  AID_MOT_ACCY, },\n\t    { \"mot_pwric\", AID_MOT_PWRIC, },\n\t    { \"mot_usb\",   AID_MOT_USB, },\n\t    { \"mot_drm\",   AID_MOT_DRM, },\n\t    { \"mot_tcmd\",  AID_MOT_TCMD, },\n\t    { \"mot_sec_rtc\",  AID_MOT_SEC_RTC, },\n\t    { \"mot_tombstone\", AID_MOT_TOMBSTONE, },\n\t    { \"mot_tpapi\",  AID_MOT_TPAPI, },\n\t    { \"mot_secclkd\",  AID_MOT_SECCLKD, },\n\t#endif\n\t    { \"misc\",      AID_MISC, },\n\t    { \"nobody\",    AID_NOBODY, },\n\t};\n\n\t#define android_id_count \\\n\t    (sizeof(android_ids) / sizeof(android_ids[0]))\n\t    \n\tstruct fs_path_config {\n\t    unsigned mode;\n\t    unsigned uid;\n\t    unsigned gid;\n\t    const char *prefix;\n\t};\n\n\t/* Rules for directories.\n\t#  These rules are applied based on \"first match\", so they\n\t#  should start with the most specific path and work their\n\t#  way up to the root.\n\t*/\n\n\tstatic struct fs_path_config android_dirs[] = {\n\t    { 00770, AID_SYSTEM, AID_CACHE,  \"cache\" },\n\t    { 00771, AID_SYSTEM, AID_SYSTEM, \"data/app\" },\n\t    { 00771, AID_SYSTEM, AID_SYSTEM, \"data/app-private\" },\n\t    { 00771, AID_SYSTEM, AID_SYSTEM, \"data/dalvik-cache\" },\n\t    { 00771, AID_SYSTEM, AID_SYSTEM, \"data/data\" },\n\t    { 00771, AID_SHELL,  AID_SHELL,  \"data/local/tmp\" },\n\t    { 00771, AID_SHELL,  AID_SHELL,  \"data/local\" },\n\t    { 01771, AID_SYSTEM, AID_MISC,   \"data/misc\" },\n\t    { 00770, AID_DHCP,   AID_DHCP,   \"data/misc/dhcp\" },\n\t    { 00771, AID_SYSTEM, AID_SYSTEM, \"data\" },\n\t    { 00750, AID_ROOT,   AID_SHELL,  \"sbin\" },\n\t    { 00755, AID_ROOT,   AID_SHELL,  \"system/bin\" },\n\t    { 00755, AID_ROOT,   AID_SHELL,  \"system/vendor\" },\n\t    { 00755, AID_ROOT,   AID_SHELL,  \"system/xbin\" },\n\t    { 00755, AID_ROOT,   AID_ROOT,   \"system/etc/ppp\" },\n\t    { 00777, AID_ROOT,   AID_ROOT,   \"sdcard\" },\n\t    { 00771, AID_SYSTEM, AID_SYSTEM, \"sd-ext\" },\n\t    { 00755, AID_ROOT,   AID_ROOT,   0 },\n\t};\n\n\t/* Rules for files.\n\t#  These rules are applied based on \"first match\", so they\n\t#  should start with the most specific path and work their\n\t#  way up to the root. Prefixes ending in * denotes wildcard\n\t#  and will allow partial matches.\n\t*/\n\tstatic struct fs_path_config android_files[] = {\n\t    { 00440, AID_ROOT,      AID_SHELL,     \"system/etc/init.goldfish.rc\" },\n\t    { 00550, AID_ROOT,      AID_SHELL,     \"system/etc/init.goldfish.sh\" },\n\t    { 00440, AID_ROOT,      AID_SHELL,     \"system/etc/init.trout.rc\" },\n\t    { 00550, AID_ROOT,      AID_SHELL,     \"system/etc/init.ril\" },\n\t    { 00550, AID_ROOT,      AID_SHELL,     \"system/etc/init.testmenu\" },\n\t    { 00550, AID_DHCP,      AID_SHELL,     \"system/etc/dhcpcd/dhcpcd-run-hooks\" },\n\t    { 00440, AID_BLUETOOTH, AID_BLUETOOTH, \"system/etc/dbus.conf\" },\n\t    { 00440, AID_BLUETOOTH, AID_BLUETOOTH, \"system/etc/bluetooth/main.conf\" },\n\t    { 00440, AID_BLUETOOTH, AID_BLUETOOTH, \"system/etc/bluetooth/input.conf\" },\n\t    { 00440, AID_BLUETOOTH, AID_BLUETOOTH, \"system/etc/bluetooth/audio.conf\" },\n\t    { 00444, AID_NET_BT,    AID_NET_BT,    \"system/etc/bluetooth/blacklist.conf\" },\n\t    { 00640, AID_SYSTEM,    AID_SYSTEM,    \"system/etc/bluetooth/auto_pairing.conf\" },\n\t    { 00444, AID_RADIO,     AID_AUDIO,     \"system/etc/AudioPara4.csv\" },\n\t    { 00555, AID_ROOT,      AID_ROOT,      \"system/etc/ppp/*\" },\n\t    { 00555, AID_ROOT,      AID_ROOT,      \"system/etc/rc.*\" },\n\t    { 00644, AID_SYSTEM,    AID_SYSTEM,    \"data/app/*\" },\n\t    { 00644, AID_SYSTEM,    AID_SYSTEM,    \"data/app-private/*\" },\n\t    { 00644, AID_APP,       AID_APP,       \"data/data/*\" },\n\t\t/* the following three files are INTENTIONALLY set-gid and not set-uid.\n\t\t * Do not change. */\n\t    { 02755, AID_ROOT,      AID_NET_RAW,   \"system/bin/ping\" },\n\t    { 02750, AID_ROOT,      AID_INET,      \"system/bin/netcfg\" },\n\t    { 02755, AID_SYSTEM,    AID_GRAPHICS,  \"system/bin/screenshot\" },\n\t\t/* the following five files are INTENTIONALLY set-uid, but they\n\t\t * are NOT included on user builds. */\n\t    { 06755, AID_ROOT,      AID_ROOT,      \"system/xbin/su\" },\n\t    { 06755, AID_ROOT,      AID_ROOT,      \"system/xbin/librank\" },\n\t    { 06755, AID_ROOT,      AID_ROOT,      \"system/xbin/procrank\" },\n\t    { 06755, AID_ROOT,      AID_ROOT,      \"system/xbin/procmem\" },\n\t    { 06755, AID_ROOT,      AID_ROOT,      \"system/xbin/tcpdump\" },\n\t    { 04770, AID_ROOT,      AID_RADIO,     \"system/bin/pppd-ril\" },\n\t\t\t/* the following file is INTENTIONALLY set-uid, and IS included\n\t\t\t * in user builds. */\n\t    { 06750, AID_ROOT,      AID_SHELL,     \"system/bin/run-as\" },\n\t    { 06755, AID_ROOT,      AID_ROOT,      \"system/xbin/hcitool\" },\n\t    { 00755, AID_ROOT,      AID_SHELL,     \"system/bin/*\" },\n\t    { 00755, AID_ROOT,      AID_SHELL,     \"system/xbin/*\" },\n\t    { 00755, AID_ROOT,      AID_SHELL,     \"system/vendor/bin/*\" },\n\t    { 00750, AID_ROOT,      AID_SHELL,     \"sbin/*\" },\n\t    { 00755, AID_ROOT,      AID_ROOT,      \"bin/*\" },\n\t    { 00750, AID_ROOT,      AID_SHELL,     \"init*\" },\n\t    { 00750, AID_ROOT,      AID_SHELL,     \"system/etc/init.d/*\" },\n\t    { 00644, AID_ROOT,      AID_ROOT,       0 },\n\t};\n\n\tstatic inline void fs_config(const char *path, int dir,\n\t\t\t\t     unsigned *uid, unsigned *gid, unsigned *mode)\n\t{\n\t    struct fs_path_config *pc;\n\t    int plen;\n\t    \n\t    pc = dir ? android_dirs : android_files;\n\t    plen = strlen(path);\n\t    for(; pc->prefix; pc++){\n\t\tint len = strlen(pc->prefix);\n\t\tif (dir) {\n\t\t    if(plen &lt; len) continue;\n\t\t    if(!strncmp(pc->prefix, path, len)) break;\n\t\t    continue;\n\t\t}\n\t\t/* If name ends in * then allow partial matches. */\n\t\tif (pc->prefix[len -1] == '*') {\n\t\t    if(!strncmp(pc->prefix, path, len - 1)) break;\n\t\t} else if (plen == len){\n\t\t    if(!strncmp(pc->prefix, path, len)) break;\n\t\t}\n\t    }\n\t    *uid = pc->uid;\n\t    *gid = pc->gid;\n\t    *mode = (*mode & (~07777)) | pc->mode;\n\t    \n\t#if 0\n\t    fprintf(stderr,\"&lt; '%s' '%s' %d %d %o >\\n\", \n\t\t    path, pc->prefix ? pc->prefix : \"\", *uid, *gid, *mode);\n\t#endif\n\t}\n\t#endif\n\t#endif\n```\n\n\n\n\t\tAndroid提供了dumpsys工具来dump出所有的服务信息，通过以下命令可以查看系统注册的所有服务：adb shell dumpsys  \n\t\tdumpsys 用来给出手机中所有应用程序的信息，并且也会给出现在手机的状态。\n\t\t因为内容太多把dumpsys的内容存储到C盘文件中方便查看.如下\n\n```shell\n\tC:\\Users\\comtu>adb shell\n\tshell@android:/ $ su\n\tshell@android:/ # cd data\n\tshell@android:/data # mkdir test\n\tshell@android:/data # cd test\n\tshell@android:/data/test # dumpsys > dumpsys.txt\n\tshell@android:/data/test # ls -l\n\tls -l\n\t-rw-rw-rw- root     root      1706976 2015-07-03 08:57 dumpsys.txt\n\tshell@android:/data/test # exit\n\texit\n\tshell@android:/ $ exit\n\texit\n\tC:\\Users\\comtu>adb pull /data/test/dumpsys.txt c:/\n\t5649 KB/s (1706976 bytes in 0.295s)\n\n```\n\n\t\t\n\t\t其中dumpsys.txt文件一段关于QQ配置的片段可查找到如下内容:\n\t\t\t\tuserId=10081 gids=[3003, 1028, 1015] <---gids可在android_filesystem_config.h查找到对应的映射关系\n\n```shell\n\t  Package [com.tencent.mobileqq] (426f1258):\n\t    userId=10081 gids=[3003, 1028, 1015]\n\t    pkg=Package{42b7e890 com.tencent.mobileqq}\n\t    codePath=/data/app/partner-QQ.apk\n\t    resourcePath=/data/app/partner-QQ.apk\n\t    nativeLibraryPath=/data/app-lib/partner-QQ\n\t    versionCode=122 targetSdk=7\n\t    versionName=4.7.0\n\t    applicationInfo=ApplicationInfo{42b136f8 com.tencent.mobileqq}\n\t    flags=[ HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]\n\t    dataDir=/data/data/com.tencent.mobileqq\n\t    supportsScreens=[small, medium, large, resizeable, anyDensity]\n\t    usesOptionalLibraries:\n\t      com.google.android.media.effects\n\t      com.motorola.hardware.frontcamera\n\t    timeStamp=2015-05-05 17:36:43\n\t    firstInstallTime=2015-05-05 17:36:43\n\t    lastUpdateTime=2015-05-05 17:36:43\n\t    signatures=PackageSignatures{426f1320 [426f1ed0]}\n\t    permissionsFixed=true haveGids=true installStatus=1\n\t    pkgFlags=[ HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]\n\t    User 0:  installed=true blocked=false stopped=true notLaunched=false enabled=0\n\t    grantedPermissions:\n\t      android.permission.READ_EXTERNAL_STORAGE\n\t      android.permission.CHANGE_WIFI_MULTICAST_STATE\n\t      com.tencent.photos.permission.DATA\n\t      android.permission.GET_TASKS\n\t      android.permission.WRITE_EXTERNAL_STORAGE\n\t      android.permission.WRITE_CALL_LOG\n\t      com.tencent.msg.permission.pushnotify\n\t      android.permission.ACCESS_WIFI_STATE\n\t      android.permission.ACCESS_COARSE_LOCATION\n\t      android.permission.READ_CONTACTS\n\t      android.permission.CALL_PHONE\n\t      android.permission.WRITE_CONTACTS\n\t      com.tencent.permission.VIRUS_SCAN\n\t      android.permission.READ_PHONE_STATE\n\t      android.permission.READ_CALENDAR\n\t      android.permission.READ_SMS\n\t      android.permission.CAMERA\n\t      android.permission.ACCESS_FINE_LOCATION\n\t      android.permission.BROADCAST_STICKY\n\t      android.permission.PERSISTENT_ACTIVITY\n\t      android.permission.FLASHLIGHT\n\t      android.permission.RECORD_AUDIO\n\t      android.permission.WAKE_LOCK\n\t      android.permission.ACCESS_NETWORK_STATE\n\t      com.tencent.msf.permission.ACCOUNT_NOTICE\n\t      com.android.launcher.permission.INSTALL_SHORTCUT\n\t      com.tencent.msf.permission.account.sync\n\t      android.permission.SEND_SMS\n\t      com.android.launcher.permission.UNINSTALL_SHORTCUT\n\t      android.permission.KILL_BACKGROUND_PROCESSES\n\t      android.permission.MODIFY_AUDIO_SETTINGS\n\t      android.permission.DISABLE_KEYGUARD\n\t      android.permission.WRITE_CALENDAR\n\t      com.qq.qcloud.permission.ACCESS_ALBUM_BACKUP_LIST\n\t      android.permission.SYSTEM_ALERT_WINDOW\n\t      android.permission.WRITE_SETTINGS\n\t      android.permission.INTERNET\n\t      android.permission.CHANGE_WIFI_STATE\n\t      android.permission.VIBRATE\n\t      android.permission.READ_CALL_LOG\n\t      com.android.launcher.permission.READ_SETTINGS\n\t      android.permission.CHANGE_NETWORK_STATE\n```\n\n## Chmod和chown命令介绍\n\t\n### Chmod\n\n\t1.文件R/W/X的系统内部采用3Bit表示,R为最高位比特,置位为0x04,\n\t\tW为中间比特,置位为0x02,X为最低比特,置位为0x01\n\t\t\n\t\t4(读R) , 2(写W) , 1(执行X)\n\t\t7=4+2+1 所有权限\n\t\t6=4+2   读写\n\t\t5=4+1   读执行\n\t\t4       读\n\t\t3=3+1   写执行\n\t\t2\n\t\t1\n\t\t664表示给予UID,GID读写权限,给予其它只读权限\n\n\t2.Shell中表示时,置位使用相应R/W/X表示,未置位使用-\n\t3.操作文件面向群体的操作权限时,使用Chmod,可以直接使用数字,\n\t\t也可使用助记符( a:all , u:owner user , g:group , +:add one premission , -:remove one permission)\n\t\t\t\n\t\n```shell\n\n\t-rw-rw-r-- system   system         12 2015-07-02 18:02 test.txt\n\tshell@android:/data/test # chmod 777 test.txt\n\tchmod 777 test.txt\n\tshell@android:/data/test # ls -l\n\tls -l\n\t-rwxrwxrwx system   system         12 2015-07-02 18:02 test.txt\n\tshell@android:/data/test #\n\tshell@android:/data/test # chmod 664 test.txt\n\tchmod 664 test.txt\n\tshell@android:/data/test # ls -l\n\tls -l\n\t-rw-rw-r-- system   system         12 2015-07-02 18:02 test.txt\n\tshell@android:/data/test #\n```\n\n### Chown\n\t通过chown改变文件的拥有者和群组。在更改文件的所有者UID或所属群组GID时，可以使用用户名称和用户识别码设置。\n\t\tShell命令中通常采用Name方式修改,而不是ID方式.普通用户不能将自己的文件改变成其他的拥有者。其操作权限一般为管理员。\n\t一般格式: chown newUID:newGID FileName\n\n```shell\n\tshell@android:/data # mkdir test\n\tmkdir test\n\tshell@android:/data # cd test\n\tcd test\n\tshell@android:/data/test # echo \"hello world\" > test.txt\n\techo \"hello world\" > test.txt\n\tshell@android:/data/test # ls\n\tls\n\ttest.txt\n\tshell@android:/data/test # ls -l\n\tls -l\n\t-rw-rw-rw- root     root           12 2015-07-02 18:02 test.txt\n\tshell@android:/data/test # chown system:system test.txt\n\tchown system:system test.txt\n\tshell@android:/data/test # ls -l\n\tls -l\n\t-rw-rw-rw- system   system         12 2015-07-02 18:02 test.txt\n\tshell@android:/data/test #\n\n```\n\n# UID/GID的衔接\n\n\t1.Linux一切皆是文件\n\t2.文件基于UID/GID来划分它的面向群体,对它的面向群体定义不同的操作权限\n\t3.用户的行为映射为进程的运行\n\t4.进程的运行使用进程的UID/GID来标识自己的身份\n\t5.进程的UID/GID<=====>文件的UID/GID 完美衔接~~\n\t6.进程的UID/GID除了被授予可操作文件的范畴外,非文件范畴的需要进行权限控制的操作\n\t\t(如重启系统等特权操作)继续通过进程的UID/GID身份来进行控制和授权.\n\t7.比如,对于Reboot这个API,其入口处可以check calling的Process的UID,如果不是Root,则Reject\n\n# 进程的RealUID和EffectiveUID\n\n\tlinux下real uid被用于描述用户是谁，文件的拥有者，effective uid指程序执行时的用户组别，\n\t用于判断程序是否有权去进行一些操作（例如读写文件），因此real uid是针对用户和文件(拥有者)而言，\n\t而effective是针对运行的程序而言。一般来讲一个用户执行一个程序，\n\t程序的effective uid会被设置为用户的real uid，这个effective uid与该程序的real uid(文件所有者)无关，只与执行者有关。\n\t\t\n\tReal UID 是身份的标识 , 但没有\"实权\"\n\t\t\n\tEffective UID 是权利的标识 \n\t\t文件,资源以及特权API操作时对进程是否有权限的识别的UID,即是指Effectivie UID\n\t\n\t身份与权利的关系\n\t\t一般情况下,身份和权利是一至的,即Real UID = Effective UID.\n\t\t所以,默认ps cmd输出的UID指的是Effective UID , 而没有输出Real UID\n\n\tRoot用户的特权\n\t\tROOT可以调用SetXUID对自己的身份进行升降.\n\t\n\tUID的世袭\n\t\t子进程的Real UID = Effective UID = 父进程的Real UID (子嗣不能继承其特权Effective UID而仅能继承其Real UID)\n\n# 文件的setUID标识\n\t\n\tsetUID可以让普通用户暂时获得文件权限的读写.\n\n\t和基本的RWX设置类似,有助记符和直接数字设置.直接数字设置时,采用4位数字,第一位标志setUID\n\t如下:\n\n```shell\n\tshell@android:/data/test $ ls -l\n\tls -l\n\t-rw-rw-rw- shell    shell           7 2015-07-03 09:22 comtu.txt\n\t-rw-rw-rw- root     root      1706976 2015-07-03 08:57 dumpsys.txt\n\t-rw-rw-r-- system   system         12 2015-07-02 18:02 test.txt\n\tshell@android:/data/test $ chmod 4775 comtu.txt\n\tchmod 4775 comtu.txt\n\tshell@android:/data/test $ ls -l\n\tls -l\n\t-rwsrwxr-x shell    shell           7 2015-07-03 09:22 comtu.txt\n\t-rw-rw-rw- root     root      1706976 2015-07-03 08:57 dumpsys.txt\n\t-rw-rw-r-- system   system         12 2015-07-02 18:02 test.txt\n\tshell@android:/data/test $ chmod 0775 comtu.txt\n\tchmod 0775 comtu.txt\n\tshell@android:/data/test $ ls -l\n\tls -l\n\t-rwxrwxr-x shell    shell           7 2015-07-03 09:22 comtu.txt\n\t-rw-rw-rw- root     root      1706976 2015-07-03 08:57 dumpsys.txt\n\t-rw-rw-r-- system   system         12 2015-07-02 18:02 test.txt\n\tshell@android:/data/test $ chmod u+s comtu.txt\n\tchmod u+s comtu.txt\n\tBad mode\n\t10|shell@android:/data/test $\n```\n\n\t说明\n\t\tchmod 4775 comtu.txt\n\n\t\t4775 第一位4表示开启setUID, 第二位7表示UID获取读写执行权限,\n\t\t\t第三位7表示Gid获取读写执行权限,最后5表示其它用户只有读与执行权限\n\n\t\tchmod 0775 comtu.txt\n\t\t0775 第一位0表示关闭setUID\n\n\t\tchmod u+s comtu.txt\n\t\t使用助记符,因为我使用的是Android的adb shell 是简化般linux对助记符不支持,如果使用ubuntu等则可进行操作.\n\n# Capability\n\t\n\tCapability细粒度的权限控制\n\n\t进程的Capability\n\t\tpermitted Capability Sets \n\t\t\t当前进程的权利的围栏,最大权利的范围,是Effective Capability Sets的超集\n\t\tEffectivte Capability Sets \n\t\t\t当前进程的实际使用(支配)的权利集,该集内的Capability必须从属于Permitted Capability Sets . \n\t\t\t该集合与Effective UID类似,是实际的权利标识.\n\t\tInheritable Capability Sets\n\t\t\t子进程唯一可以直接继承的Capability Sets. 在Capability模式下,\n\t\t\t只有子进程的Inheritable Capability Sets = 父进程的Inheritable Capability Sets . 其他的皆是NO\n\t文件的Capability\n\t\tPermitted Capability Sets\n\t\t\t该可执行文件可以为进程带来的Permitted Capability Sets\n\t\tEffective Capability Set\n\t\t\t仅1bit,Enable or disable , 标识该可执行文件running所在的进程的\n\t\t\tPermitted Capability Sets是否自动全部Assign到其Effective Capability Sets. \n\t\t\t通常用于与传统的Root-setUID可执行文件向下兼容.\n\t\tInheritable Capability Sets\n\t\t\t与进程的Inheritable Capability Sets 一起作用(位与)以决定新的进程的Permitted capability Sets\n\n\tCapability BoundSet\n\t\tCapability BoundSet是进程的属性\n\t\t是进程自己为自己设定的安全围栏(Capability Sets) , \n\t\t\t限制可执行文件的Permitted Capability Sets仅有局部能转化的Permitted Capability Sets\n\t\tCapability BoundSet能被子进程继承\n\t\tInit进程默认Capability BoundSet为全1\n\n\tSpawn进程的Capability\n\t\tP'子进程  P父进程  F子进程运行起来的执行文件\n\n\t\tP'(permitted) = (P(inheritable)&F(inheritable))|(F(permitted)&cap_bset)\n\t\tP'(effective) = F(effective)?P'(permitted):0\n\t\tP'(inheritable) = P(inheritable)","source":"_posts/2014-10-26-android_safe_mode_mechanism_two.md","raw":"---\nlayout : post\ntitle : \"Android安全模式机制之二(操作系统现代安全体系基础概念)\"\ncategory : Android\ndate : 2014-10-26\ntags : [Android安全模式机制 ,进程和进程边界,多用户和多用户边界,进程和文件的UID/GID,Chmod和chown命令介绍,linux,UID/GID的衔接,进程的RealUID和EffectiveUID ,setUID,Capability]\n---\n<style>\nh3 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nh6 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\n\n</style>\n\n目录:\n\n*  1.进程和进程边界\n*  2.多用户和多用户边界\n*  3.进程和文件的UID/GID (UserID/groupId)\n\t*  3.1文件资源的权限力度:UID/GID\n\t*  3.2文件的可操作权限\n\t*  3.3进程的标识: PID , UID , GID , GIDs\n\t*  3.4Name和ID的映射\n\t*  3.5Chmod和chown命令介绍\n\t\t*  3.5.1Chmod\n\t\t*  3.5.2Chown\n*  4.UID/GID的衔接\n*  5.进程的RealUID和EffectiveUID\n*  6.文件的setUID标识\n*  7.Capability\n\t*  7.1进程的Capability\n\t*  7.2文件的Capability\n\t*  7.3Capability BoundSet\n\t*  7.4Spawn进程的Capability\n\n---\n\n# 进程和进程边界\n\t\n\t进程和线程\n\t\t可执行文件:不活动就是废物\n\t\t进程:可执行文件的活动表现,一次生命的历练\n\t\t线程:CPU(核)的调度单位,并发的执行序列,进程的多管齐下\n\t\t资源和调度.\n\n\t\n\t进程边界的安全围栏: \n\t\tCrash的不可扩延性\n\t\t全局数据和服务的不可访问性\n\n<!-- more -->\n\n# 多用户和多用户边界\n\t\n\t需求背景:\n\t\t资源缺乏\n\t\t中央统一管理\n\n\t多用户的边界:\n\t\t独立的工作目录\n\t\t可操作/访问的资源\n\t\t\t资源分类\n\t\t\t权限管理\n\t\t可执行的操作\n\t\t\t操作分类\n\t\t\t权限管理\n\n\t多用户特性标识(linux): UID 和GID\n\t\tName只是供看的\n\t\tIdentifier才是系统层面的标识\n\t\t用户的行为是一系列进程的行为\n\t\t特性标识其实是进程的UID/GID\n\n\n# 进程和文件的UID/GID (UserID/groupId) \n\n## 文件资源的权限力度:UID/GID\n\t1.文件是一类资源\n\t2.在Linux中,甚至一切皆是文件,Socket,Driver\n\t3.文件资源对不同Target(用户)的不同操作权限的需求应运而生\n\t4.某些场景下,允许多个不同的Target/用户(而不是一个)具有一致的操作权限,怎么办? \n\t\tId===> Gid===> 多个用户可以属于一个GID,一个用户可以属于多个GIDs\n\t5.所以文件权限的管理力度区分3类群体:属于特定UID的用户,属于特定GID的用户(们),其他用户\n\t6.一个上帝用户存在:ROOT, 其UID = 0 , 上帝用户永远满足属于任何UID\n\n## 文件的可操作权限\n\t1.文件/文件夹的可读 r\n\t2.文件/文件夹的可写 w\n\t3.文件/文件夹的可执行 x\n\n```shell\n\t\t$ ls -l\n\t\ttotal 20\n\t\t 权限列表        UID       GID\n\t\t-rw-r--r--    1 comtu    Administ      879 Feb 25 17:39 404.html\n\t\t-rw-r--r--    1 comtu    Administ     2800 Feb 25 17:39 README.md\n\t\t-rw-r--r--    1 comtu    Administ     2909 Feb 25 17:39 Rakefile.rb\n\t\t-rw-r--r--    1 comtu    Administ     1609 Feb 25 17:39 _config.yml\n\t\tdrwxr-xr-x    4 comtu    Administ        0 Feb 25 17:39 _data\n\t\tdrwxr-xr-x    7 comtu    Administ     4096 Feb 25 17:39 _includes\n\t\tdrwxr-xr-x    5 comtu    Administ        0 Feb 25 17:39 _layouts\n\t\tdrwxr-xr-x    3 comtu    Administ        0 Feb 25 17:39 _plugins\n\t\tdrwxr-xr-x   18 comtu    Administ     8192 Jul  1 17:36 _posts\n\t\tdrwxr-xr-x   13 comtu    Administ     4096 Jul  1 13:30 _site\n\t\t-rw-r--r--    1 comtu    Administ       10 Feb 25 17:39 baidu_verify_\n\t\thtml\n\t\t-rw-r--r--    1 comtu    Administ     1672 Feb 25 17:39 index.html\n\t\tdrwxr-xr-x    1 comtu    Administ     4096 Feb 25 17:39 page\n\t\tdrwxr-xr-x    1 comtu    Administ     4096 Jun 25 16:18 res\n\t\t-rw-r--r--    1 comtu    Administ       59 Jun 25 17:45 robots.txt\n\t\t-rw-r--r--    1 comtu    Administ      350 Apr 13 17:53 search.xml\n\t\t-rw-r--r--    1 comtu    Administ      209 Feb 25 17:39 sitemap.txt\n```\n\t\t\n\t\tdrwxr-xr-x\n\t\td|rwx|r-x|r-x\n\t\t0|123|456|789\n\n\t\t文件夹与文件标识\n\t\t\t0 : d文件夹\t-文件\n\t\tUID用户\n\t\t\t1 : 可读\n\t\t\t2 : 可写\n\t\t\t3 : 可执行\n\t\tGID用户\n\t\t\t4 : 可读\n\t\t\t5 : 不可写\n\t\t\t6 : 可执行\n\t\t其他用户\n\t\t\t7 : 可读\n\t\t\t8 : 不可写\n\t\t\t9 : 可执行\n\n## 进程的标识: PID , UID , GID , GIDs\n\n\tPID : 进程的Unique Identifier(唯一标识) . 每次Running的PID可能相同,或者不同,由系统分配\n\tUID : 进程的身份标识.每次运行,即便重启后默认都相同\n\tGID : 进程的(组)身份标识.每次运行,即便重启后默认都相同.不同进程允许有相同的GID(组用户身份标识).\n\t\t同一进程允许属于多个GID.\n\tGIDs: 进程所属的全部GID\n\n## Name和ID的映射\n\t\n\tAndroid原代码之Name和ID映射表\n\t/system/core/include/private/android_filesystem_config.h\n\t\n```c\n\t/*\n\t * Copyright (C) 2007 The Android Open Source Project\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *      http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\n\t/* This file is used to define the properties of the filesystem\n\t#  images generated by build tools (mkbootfs and mkyaffs2image) and\n\t#  by the device side of adb.\n\t*/\n\n\t#ifndef _ANDROID_FILESYSTEM_CONFIG_H_\n\t#define _ANDROID_FILESYSTEM_CONFIG_H_\n\n\t#include &lt;string.h>\n\t#include &lt;sys/stat.h>\n\t#include &lt;sys/types.h>\n\n\t/* This is the master Users and Groups config for the platform.\n\t#  DO NOT EVER RENUMBER.\n\t*/\n\n\t#define AID_ROOT             0  /* traditional unix root user */\n\n\t#define AID_SYSTEM        1000  /* system server */\n\n\t#define AID_RADIO         1001  /* telephony subsystem, RIL */\n\t#define AID_BLUETOOTH     1002  /* bluetooth subsystem */\n\t#define AID_GRAPHICS      1003  /* graphics devices */\n\t#define AID_INPUT         1004  /* input devices */\n\t#define AID_AUDIO         1005  /* audio devices */\n\t#define AID_CAMERA        1006  /* camera devices */\n\t#define AID_LOG           1007  /* log devices */\n\t#define AID_COMPASS       1008  /* compass device */\n\t#define AID_MOUNT         1009  /* mountd socket */\n\t#define AID_WIFI          1010  /* wifi subsystem */\n\t#define AID_ADB           1011  /* android debug bridge (adbd) */\n\t#define AID_INSTALL       1012  /* group for installing packages */\n\t#define AID_MEDIA         1013  /* mediaserver process */\n\t#define AID_DHCP          1014  /* dhcp client */\n\t#define AID_SDCARD_RW     1015  /* external storage write access */\n\t#define AID_VPN           1016  /* vpn system */\n\t#define AID_KEYSTORE      1017  /* keystore subsystem */\n\t#define AID_USB           1018  /* USB devices */\n\t#define AID_GPS           1021  /* GPS daemon */\n\t#define AID_UNUSED1       1022  /* deprecated, DO NOT USE */\n\t#define AID_RFU1          1023  /* RFU */\n\t#define AID_RFU2          1024  /* RFU */\n\t#define AID_NFC           1025  /* nfc subsystem */\n\n\t#define AID_SHELL         2000  /* adb and debug shell user */\n\t#define AID_CACHE         2001  /* cache access */\n\t#define AID_DIAG          2002  /* access to diagnostic resources */\n\n\t/* The 3000 series are intended for use as supplemental group id's only.\n\t * They indicate special Android capabilities that the kernel is aware of. */\n\t#define AID_NET_BT_ADMIN  3001  /* bluetooth: create any socket */\n\t#define AID_NET_BT        3002  /* bluetooth: create sco, rfcomm or l2cap sockets */\n\t#define AID_INET          3003  /* can create AF_INET and AF_INET6 sockets */\n\t#define AID_NET_RAW       3004  /* can create raw INET sockets */\n\t#define AID_NET_ADMIN     3005  /* can configure interfaces and routing tables. */\n\t#define AID_QCOM_ONCRPC   3006  /* can read/write /dev/oncrpc files */\n\n\t#if defined(MOTOROLA_UIDS)\n\t#define AID_MOT_ACCY      9000  /* access to accessory */\n\t#define AID_MOT_PWRIC     9001  /* power IC */\n\t#define AID_MOT_USB       9002  /* mot usb */\n\t#define AID_MOT_DRM       9003  /* can access DRM resource. */\n\t#define AID_MOT_TCMD      9004  /* mot_tcmd */\n\t#define AID_MOT_SEC_RTC   9005  /* mot cpcap rtc */\n\t#define AID_MOT_TOMBSTONE 9006\n\t#define AID_MOT_TPAPI     9007  /* mot_tpapi */\n\t#define AID_MOT_SECCLKD   9008  /* mot_secclkd */\n\t#endif // MOTOROLA_UIDS\n\n\t#define AID_MISC          9998  /* access to misc storage */\n\t#define AID_NOBODY        9999\n\n\t#define AID_APP          10000 /* first app user */\n\n\t#if !defined(EXCLUDE_FS_CONFIG_STRUCTURES)\n\tstruct android_id_info {\n\t    const char *name;\n\t    unsigned aid;\n\t};\n\n\tstatic const struct android_id_info android_ids[] = {\n\t    { \"root\",      AID_ROOT, },\n\t    { \"system\",    AID_SYSTEM, },\n\t    { \"radio\",     AID_RADIO, },\n\t    { \"bluetooth\", AID_BLUETOOTH, },\n\t    { \"graphics\",  AID_GRAPHICS, },\n\t    { \"input\",     AID_INPUT, },\n\t    { \"audio\",     AID_AUDIO, },\n\t    { \"camera\",    AID_CAMERA, },\n\t    { \"log\",       AID_LOG, },\n\t    { \"compass\",   AID_COMPASS, },\n\t    { \"mount\",     AID_MOUNT, },\n\t    { \"wifi\",      AID_WIFI, },\n\t    { \"dhcp\",      AID_DHCP, },\n\t    { \"adb\",       AID_ADB, },\n\t    { \"install\",   AID_INSTALL, },\n\t    { \"media\",     AID_MEDIA, },\n\t    { \"nfc\",       AID_NFC, },\n\t    { \"shell\",     AID_SHELL, },\n\t    { \"cache\",     AID_CACHE, },\n\t    { \"diag\",      AID_DIAG, },\n\t    { \"net_bt_admin\", AID_NET_BT_ADMIN, },\n\t    { \"net_bt\",    AID_NET_BT, },\n\t    { \"qcom_oncrpc\", AID_QCOM_ONCRPC, },\n\t    { \"sdcard_rw\", AID_SDCARD_RW, },\n\t    { \"vpn\",       AID_VPN, },\n\t    { \"keystore\",  AID_KEYSTORE, },\n\t    { \"usb\",       AID_USB, },\n\t    { \"gps\",       AID_GPS, },\n\t    { \"inet\",      AID_INET, },\n\t    { \"net_raw\",   AID_NET_RAW, },\n\t    { \"net_admin\", AID_NET_ADMIN, },\n\t#if defined(MOTOROLA_UIDS)\n\t    { \"mot_accy\",  AID_MOT_ACCY, },\n\t    { \"mot_pwric\", AID_MOT_PWRIC, },\n\t    { \"mot_usb\",   AID_MOT_USB, },\n\t    { \"mot_drm\",   AID_MOT_DRM, },\n\t    { \"mot_tcmd\",  AID_MOT_TCMD, },\n\t    { \"mot_sec_rtc\",  AID_MOT_SEC_RTC, },\n\t    { \"mot_tombstone\", AID_MOT_TOMBSTONE, },\n\t    { \"mot_tpapi\",  AID_MOT_TPAPI, },\n\t    { \"mot_secclkd\",  AID_MOT_SECCLKD, },\n\t#endif\n\t    { \"misc\",      AID_MISC, },\n\t    { \"nobody\",    AID_NOBODY, },\n\t};\n\n\t#define android_id_count \\\n\t    (sizeof(android_ids) / sizeof(android_ids[0]))\n\t    \n\tstruct fs_path_config {\n\t    unsigned mode;\n\t    unsigned uid;\n\t    unsigned gid;\n\t    const char *prefix;\n\t};\n\n\t/* Rules for directories.\n\t#  These rules are applied based on \"first match\", so they\n\t#  should start with the most specific path and work their\n\t#  way up to the root.\n\t*/\n\n\tstatic struct fs_path_config android_dirs[] = {\n\t    { 00770, AID_SYSTEM, AID_CACHE,  \"cache\" },\n\t    { 00771, AID_SYSTEM, AID_SYSTEM, \"data/app\" },\n\t    { 00771, AID_SYSTEM, AID_SYSTEM, \"data/app-private\" },\n\t    { 00771, AID_SYSTEM, AID_SYSTEM, \"data/dalvik-cache\" },\n\t    { 00771, AID_SYSTEM, AID_SYSTEM, \"data/data\" },\n\t    { 00771, AID_SHELL,  AID_SHELL,  \"data/local/tmp\" },\n\t    { 00771, AID_SHELL,  AID_SHELL,  \"data/local\" },\n\t    { 01771, AID_SYSTEM, AID_MISC,   \"data/misc\" },\n\t    { 00770, AID_DHCP,   AID_DHCP,   \"data/misc/dhcp\" },\n\t    { 00771, AID_SYSTEM, AID_SYSTEM, \"data\" },\n\t    { 00750, AID_ROOT,   AID_SHELL,  \"sbin\" },\n\t    { 00755, AID_ROOT,   AID_SHELL,  \"system/bin\" },\n\t    { 00755, AID_ROOT,   AID_SHELL,  \"system/vendor\" },\n\t    { 00755, AID_ROOT,   AID_SHELL,  \"system/xbin\" },\n\t    { 00755, AID_ROOT,   AID_ROOT,   \"system/etc/ppp\" },\n\t    { 00777, AID_ROOT,   AID_ROOT,   \"sdcard\" },\n\t    { 00771, AID_SYSTEM, AID_SYSTEM, \"sd-ext\" },\n\t    { 00755, AID_ROOT,   AID_ROOT,   0 },\n\t};\n\n\t/* Rules for files.\n\t#  These rules are applied based on \"first match\", so they\n\t#  should start with the most specific path and work their\n\t#  way up to the root. Prefixes ending in * denotes wildcard\n\t#  and will allow partial matches.\n\t*/\n\tstatic struct fs_path_config android_files[] = {\n\t    { 00440, AID_ROOT,      AID_SHELL,     \"system/etc/init.goldfish.rc\" },\n\t    { 00550, AID_ROOT,      AID_SHELL,     \"system/etc/init.goldfish.sh\" },\n\t    { 00440, AID_ROOT,      AID_SHELL,     \"system/etc/init.trout.rc\" },\n\t    { 00550, AID_ROOT,      AID_SHELL,     \"system/etc/init.ril\" },\n\t    { 00550, AID_ROOT,      AID_SHELL,     \"system/etc/init.testmenu\" },\n\t    { 00550, AID_DHCP,      AID_SHELL,     \"system/etc/dhcpcd/dhcpcd-run-hooks\" },\n\t    { 00440, AID_BLUETOOTH, AID_BLUETOOTH, \"system/etc/dbus.conf\" },\n\t    { 00440, AID_BLUETOOTH, AID_BLUETOOTH, \"system/etc/bluetooth/main.conf\" },\n\t    { 00440, AID_BLUETOOTH, AID_BLUETOOTH, \"system/etc/bluetooth/input.conf\" },\n\t    { 00440, AID_BLUETOOTH, AID_BLUETOOTH, \"system/etc/bluetooth/audio.conf\" },\n\t    { 00444, AID_NET_BT,    AID_NET_BT,    \"system/etc/bluetooth/blacklist.conf\" },\n\t    { 00640, AID_SYSTEM,    AID_SYSTEM,    \"system/etc/bluetooth/auto_pairing.conf\" },\n\t    { 00444, AID_RADIO,     AID_AUDIO,     \"system/etc/AudioPara4.csv\" },\n\t    { 00555, AID_ROOT,      AID_ROOT,      \"system/etc/ppp/*\" },\n\t    { 00555, AID_ROOT,      AID_ROOT,      \"system/etc/rc.*\" },\n\t    { 00644, AID_SYSTEM,    AID_SYSTEM,    \"data/app/*\" },\n\t    { 00644, AID_SYSTEM,    AID_SYSTEM,    \"data/app-private/*\" },\n\t    { 00644, AID_APP,       AID_APP,       \"data/data/*\" },\n\t\t/* the following three files are INTENTIONALLY set-gid and not set-uid.\n\t\t * Do not change. */\n\t    { 02755, AID_ROOT,      AID_NET_RAW,   \"system/bin/ping\" },\n\t    { 02750, AID_ROOT,      AID_INET,      \"system/bin/netcfg\" },\n\t    { 02755, AID_SYSTEM,    AID_GRAPHICS,  \"system/bin/screenshot\" },\n\t\t/* the following five files are INTENTIONALLY set-uid, but they\n\t\t * are NOT included on user builds. */\n\t    { 06755, AID_ROOT,      AID_ROOT,      \"system/xbin/su\" },\n\t    { 06755, AID_ROOT,      AID_ROOT,      \"system/xbin/librank\" },\n\t    { 06755, AID_ROOT,      AID_ROOT,      \"system/xbin/procrank\" },\n\t    { 06755, AID_ROOT,      AID_ROOT,      \"system/xbin/procmem\" },\n\t    { 06755, AID_ROOT,      AID_ROOT,      \"system/xbin/tcpdump\" },\n\t    { 04770, AID_ROOT,      AID_RADIO,     \"system/bin/pppd-ril\" },\n\t\t\t/* the following file is INTENTIONALLY set-uid, and IS included\n\t\t\t * in user builds. */\n\t    { 06750, AID_ROOT,      AID_SHELL,     \"system/bin/run-as\" },\n\t    { 06755, AID_ROOT,      AID_ROOT,      \"system/xbin/hcitool\" },\n\t    { 00755, AID_ROOT,      AID_SHELL,     \"system/bin/*\" },\n\t    { 00755, AID_ROOT,      AID_SHELL,     \"system/xbin/*\" },\n\t    { 00755, AID_ROOT,      AID_SHELL,     \"system/vendor/bin/*\" },\n\t    { 00750, AID_ROOT,      AID_SHELL,     \"sbin/*\" },\n\t    { 00755, AID_ROOT,      AID_ROOT,      \"bin/*\" },\n\t    { 00750, AID_ROOT,      AID_SHELL,     \"init*\" },\n\t    { 00750, AID_ROOT,      AID_SHELL,     \"system/etc/init.d/*\" },\n\t    { 00644, AID_ROOT,      AID_ROOT,       0 },\n\t};\n\n\tstatic inline void fs_config(const char *path, int dir,\n\t\t\t\t     unsigned *uid, unsigned *gid, unsigned *mode)\n\t{\n\t    struct fs_path_config *pc;\n\t    int plen;\n\t    \n\t    pc = dir ? android_dirs : android_files;\n\t    plen = strlen(path);\n\t    for(; pc->prefix; pc++){\n\t\tint len = strlen(pc->prefix);\n\t\tif (dir) {\n\t\t    if(plen &lt; len) continue;\n\t\t    if(!strncmp(pc->prefix, path, len)) break;\n\t\t    continue;\n\t\t}\n\t\t/* If name ends in * then allow partial matches. */\n\t\tif (pc->prefix[len -1] == '*') {\n\t\t    if(!strncmp(pc->prefix, path, len - 1)) break;\n\t\t} else if (plen == len){\n\t\t    if(!strncmp(pc->prefix, path, len)) break;\n\t\t}\n\t    }\n\t    *uid = pc->uid;\n\t    *gid = pc->gid;\n\t    *mode = (*mode & (~07777)) | pc->mode;\n\t    \n\t#if 0\n\t    fprintf(stderr,\"&lt; '%s' '%s' %d %d %o >\\n\", \n\t\t    path, pc->prefix ? pc->prefix : \"\", *uid, *gid, *mode);\n\t#endif\n\t}\n\t#endif\n\t#endif\n```\n\n\n\n\t\tAndroid提供了dumpsys工具来dump出所有的服务信息，通过以下命令可以查看系统注册的所有服务：adb shell dumpsys  \n\t\tdumpsys 用来给出手机中所有应用程序的信息，并且也会给出现在手机的状态。\n\t\t因为内容太多把dumpsys的内容存储到C盘文件中方便查看.如下\n\n```shell\n\tC:\\Users\\comtu>adb shell\n\tshell@android:/ $ su\n\tshell@android:/ # cd data\n\tshell@android:/data # mkdir test\n\tshell@android:/data # cd test\n\tshell@android:/data/test # dumpsys > dumpsys.txt\n\tshell@android:/data/test # ls -l\n\tls -l\n\t-rw-rw-rw- root     root      1706976 2015-07-03 08:57 dumpsys.txt\n\tshell@android:/data/test # exit\n\texit\n\tshell@android:/ $ exit\n\texit\n\tC:\\Users\\comtu>adb pull /data/test/dumpsys.txt c:/\n\t5649 KB/s (1706976 bytes in 0.295s)\n\n```\n\n\t\t\n\t\t其中dumpsys.txt文件一段关于QQ配置的片段可查找到如下内容:\n\t\t\t\tuserId=10081 gids=[3003, 1028, 1015] <---gids可在android_filesystem_config.h查找到对应的映射关系\n\n```shell\n\t  Package [com.tencent.mobileqq] (426f1258):\n\t    userId=10081 gids=[3003, 1028, 1015]\n\t    pkg=Package{42b7e890 com.tencent.mobileqq}\n\t    codePath=/data/app/partner-QQ.apk\n\t    resourcePath=/data/app/partner-QQ.apk\n\t    nativeLibraryPath=/data/app-lib/partner-QQ\n\t    versionCode=122 targetSdk=7\n\t    versionName=4.7.0\n\t    applicationInfo=ApplicationInfo{42b136f8 com.tencent.mobileqq}\n\t    flags=[ HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]\n\t    dataDir=/data/data/com.tencent.mobileqq\n\t    supportsScreens=[small, medium, large, resizeable, anyDensity]\n\t    usesOptionalLibraries:\n\t      com.google.android.media.effects\n\t      com.motorola.hardware.frontcamera\n\t    timeStamp=2015-05-05 17:36:43\n\t    firstInstallTime=2015-05-05 17:36:43\n\t    lastUpdateTime=2015-05-05 17:36:43\n\t    signatures=PackageSignatures{426f1320 [426f1ed0]}\n\t    permissionsFixed=true haveGids=true installStatus=1\n\t    pkgFlags=[ HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]\n\t    User 0:  installed=true blocked=false stopped=true notLaunched=false enabled=0\n\t    grantedPermissions:\n\t      android.permission.READ_EXTERNAL_STORAGE\n\t      android.permission.CHANGE_WIFI_MULTICAST_STATE\n\t      com.tencent.photos.permission.DATA\n\t      android.permission.GET_TASKS\n\t      android.permission.WRITE_EXTERNAL_STORAGE\n\t      android.permission.WRITE_CALL_LOG\n\t      com.tencent.msg.permission.pushnotify\n\t      android.permission.ACCESS_WIFI_STATE\n\t      android.permission.ACCESS_COARSE_LOCATION\n\t      android.permission.READ_CONTACTS\n\t      android.permission.CALL_PHONE\n\t      android.permission.WRITE_CONTACTS\n\t      com.tencent.permission.VIRUS_SCAN\n\t      android.permission.READ_PHONE_STATE\n\t      android.permission.READ_CALENDAR\n\t      android.permission.READ_SMS\n\t      android.permission.CAMERA\n\t      android.permission.ACCESS_FINE_LOCATION\n\t      android.permission.BROADCAST_STICKY\n\t      android.permission.PERSISTENT_ACTIVITY\n\t      android.permission.FLASHLIGHT\n\t      android.permission.RECORD_AUDIO\n\t      android.permission.WAKE_LOCK\n\t      android.permission.ACCESS_NETWORK_STATE\n\t      com.tencent.msf.permission.ACCOUNT_NOTICE\n\t      com.android.launcher.permission.INSTALL_SHORTCUT\n\t      com.tencent.msf.permission.account.sync\n\t      android.permission.SEND_SMS\n\t      com.android.launcher.permission.UNINSTALL_SHORTCUT\n\t      android.permission.KILL_BACKGROUND_PROCESSES\n\t      android.permission.MODIFY_AUDIO_SETTINGS\n\t      android.permission.DISABLE_KEYGUARD\n\t      android.permission.WRITE_CALENDAR\n\t      com.qq.qcloud.permission.ACCESS_ALBUM_BACKUP_LIST\n\t      android.permission.SYSTEM_ALERT_WINDOW\n\t      android.permission.WRITE_SETTINGS\n\t      android.permission.INTERNET\n\t      android.permission.CHANGE_WIFI_STATE\n\t      android.permission.VIBRATE\n\t      android.permission.READ_CALL_LOG\n\t      com.android.launcher.permission.READ_SETTINGS\n\t      android.permission.CHANGE_NETWORK_STATE\n```\n\n## Chmod和chown命令介绍\n\t\n### Chmod\n\n\t1.文件R/W/X的系统内部采用3Bit表示,R为最高位比特,置位为0x04,\n\t\tW为中间比特,置位为0x02,X为最低比特,置位为0x01\n\t\t\n\t\t4(读R) , 2(写W) , 1(执行X)\n\t\t7=4+2+1 所有权限\n\t\t6=4+2   读写\n\t\t5=4+1   读执行\n\t\t4       读\n\t\t3=3+1   写执行\n\t\t2\n\t\t1\n\t\t664表示给予UID,GID读写权限,给予其它只读权限\n\n\t2.Shell中表示时,置位使用相应R/W/X表示,未置位使用-\n\t3.操作文件面向群体的操作权限时,使用Chmod,可以直接使用数字,\n\t\t也可使用助记符( a:all , u:owner user , g:group , +:add one premission , -:remove one permission)\n\t\t\t\n\t\n```shell\n\n\t-rw-rw-r-- system   system         12 2015-07-02 18:02 test.txt\n\tshell@android:/data/test # chmod 777 test.txt\n\tchmod 777 test.txt\n\tshell@android:/data/test # ls -l\n\tls -l\n\t-rwxrwxrwx system   system         12 2015-07-02 18:02 test.txt\n\tshell@android:/data/test #\n\tshell@android:/data/test # chmod 664 test.txt\n\tchmod 664 test.txt\n\tshell@android:/data/test # ls -l\n\tls -l\n\t-rw-rw-r-- system   system         12 2015-07-02 18:02 test.txt\n\tshell@android:/data/test #\n```\n\n### Chown\n\t通过chown改变文件的拥有者和群组。在更改文件的所有者UID或所属群组GID时，可以使用用户名称和用户识别码设置。\n\t\tShell命令中通常采用Name方式修改,而不是ID方式.普通用户不能将自己的文件改变成其他的拥有者。其操作权限一般为管理员。\n\t一般格式: chown newUID:newGID FileName\n\n```shell\n\tshell@android:/data # mkdir test\n\tmkdir test\n\tshell@android:/data # cd test\n\tcd test\n\tshell@android:/data/test # echo \"hello world\" > test.txt\n\techo \"hello world\" > test.txt\n\tshell@android:/data/test # ls\n\tls\n\ttest.txt\n\tshell@android:/data/test # ls -l\n\tls -l\n\t-rw-rw-rw- root     root           12 2015-07-02 18:02 test.txt\n\tshell@android:/data/test # chown system:system test.txt\n\tchown system:system test.txt\n\tshell@android:/data/test # ls -l\n\tls -l\n\t-rw-rw-rw- system   system         12 2015-07-02 18:02 test.txt\n\tshell@android:/data/test #\n\n```\n\n# UID/GID的衔接\n\n\t1.Linux一切皆是文件\n\t2.文件基于UID/GID来划分它的面向群体,对它的面向群体定义不同的操作权限\n\t3.用户的行为映射为进程的运行\n\t4.进程的运行使用进程的UID/GID来标识自己的身份\n\t5.进程的UID/GID<=====>文件的UID/GID 完美衔接~~\n\t6.进程的UID/GID除了被授予可操作文件的范畴外,非文件范畴的需要进行权限控制的操作\n\t\t(如重启系统等特权操作)继续通过进程的UID/GID身份来进行控制和授权.\n\t7.比如,对于Reboot这个API,其入口处可以check calling的Process的UID,如果不是Root,则Reject\n\n# 进程的RealUID和EffectiveUID\n\n\tlinux下real uid被用于描述用户是谁，文件的拥有者，effective uid指程序执行时的用户组别，\n\t用于判断程序是否有权去进行一些操作（例如读写文件），因此real uid是针对用户和文件(拥有者)而言，\n\t而effective是针对运行的程序而言。一般来讲一个用户执行一个程序，\n\t程序的effective uid会被设置为用户的real uid，这个effective uid与该程序的real uid(文件所有者)无关，只与执行者有关。\n\t\t\n\tReal UID 是身份的标识 , 但没有\"实权\"\n\t\t\n\tEffective UID 是权利的标识 \n\t\t文件,资源以及特权API操作时对进程是否有权限的识别的UID,即是指Effectivie UID\n\t\n\t身份与权利的关系\n\t\t一般情况下,身份和权利是一至的,即Real UID = Effective UID.\n\t\t所以,默认ps cmd输出的UID指的是Effective UID , 而没有输出Real UID\n\n\tRoot用户的特权\n\t\tROOT可以调用SetXUID对自己的身份进行升降.\n\t\n\tUID的世袭\n\t\t子进程的Real UID = Effective UID = 父进程的Real UID (子嗣不能继承其特权Effective UID而仅能继承其Real UID)\n\n# 文件的setUID标识\n\t\n\tsetUID可以让普通用户暂时获得文件权限的读写.\n\n\t和基本的RWX设置类似,有助记符和直接数字设置.直接数字设置时,采用4位数字,第一位标志setUID\n\t如下:\n\n```shell\n\tshell@android:/data/test $ ls -l\n\tls -l\n\t-rw-rw-rw- shell    shell           7 2015-07-03 09:22 comtu.txt\n\t-rw-rw-rw- root     root      1706976 2015-07-03 08:57 dumpsys.txt\n\t-rw-rw-r-- system   system         12 2015-07-02 18:02 test.txt\n\tshell@android:/data/test $ chmod 4775 comtu.txt\n\tchmod 4775 comtu.txt\n\tshell@android:/data/test $ ls -l\n\tls -l\n\t-rwsrwxr-x shell    shell           7 2015-07-03 09:22 comtu.txt\n\t-rw-rw-rw- root     root      1706976 2015-07-03 08:57 dumpsys.txt\n\t-rw-rw-r-- system   system         12 2015-07-02 18:02 test.txt\n\tshell@android:/data/test $ chmod 0775 comtu.txt\n\tchmod 0775 comtu.txt\n\tshell@android:/data/test $ ls -l\n\tls -l\n\t-rwxrwxr-x shell    shell           7 2015-07-03 09:22 comtu.txt\n\t-rw-rw-rw- root     root      1706976 2015-07-03 08:57 dumpsys.txt\n\t-rw-rw-r-- system   system         12 2015-07-02 18:02 test.txt\n\tshell@android:/data/test $ chmod u+s comtu.txt\n\tchmod u+s comtu.txt\n\tBad mode\n\t10|shell@android:/data/test $\n```\n\n\t说明\n\t\tchmod 4775 comtu.txt\n\n\t\t4775 第一位4表示开启setUID, 第二位7表示UID获取读写执行权限,\n\t\t\t第三位7表示Gid获取读写执行权限,最后5表示其它用户只有读与执行权限\n\n\t\tchmod 0775 comtu.txt\n\t\t0775 第一位0表示关闭setUID\n\n\t\tchmod u+s comtu.txt\n\t\t使用助记符,因为我使用的是Android的adb shell 是简化般linux对助记符不支持,如果使用ubuntu等则可进行操作.\n\n# Capability\n\t\n\tCapability细粒度的权限控制\n\n\t进程的Capability\n\t\tpermitted Capability Sets \n\t\t\t当前进程的权利的围栏,最大权利的范围,是Effective Capability Sets的超集\n\t\tEffectivte Capability Sets \n\t\t\t当前进程的实际使用(支配)的权利集,该集内的Capability必须从属于Permitted Capability Sets . \n\t\t\t该集合与Effective UID类似,是实际的权利标识.\n\t\tInheritable Capability Sets\n\t\t\t子进程唯一可以直接继承的Capability Sets. 在Capability模式下,\n\t\t\t只有子进程的Inheritable Capability Sets = 父进程的Inheritable Capability Sets . 其他的皆是NO\n\t文件的Capability\n\t\tPermitted Capability Sets\n\t\t\t该可执行文件可以为进程带来的Permitted Capability Sets\n\t\tEffective Capability Set\n\t\t\t仅1bit,Enable or disable , 标识该可执行文件running所在的进程的\n\t\t\tPermitted Capability Sets是否自动全部Assign到其Effective Capability Sets. \n\t\t\t通常用于与传统的Root-setUID可执行文件向下兼容.\n\t\tInheritable Capability Sets\n\t\t\t与进程的Inheritable Capability Sets 一起作用(位与)以决定新的进程的Permitted capability Sets\n\n\tCapability BoundSet\n\t\tCapability BoundSet是进程的属性\n\t\t是进程自己为自己设定的安全围栏(Capability Sets) , \n\t\t\t限制可执行文件的Permitted Capability Sets仅有局部能转化的Permitted Capability Sets\n\t\tCapability BoundSet能被子进程继承\n\t\tInit进程默认Capability BoundSet为全1\n\n\tSpawn进程的Capability\n\t\tP'子进程  P父进程  F子进程运行起来的执行文件\n\n\t\tP'(permitted) = (P(inheritable)&F(inheritable))|(F(permitted)&cap_bset)\n\t\tP'(effective) = F(effective)?P'(permitted):0\n\t\tP'(inheritable) = P(inheritable)","slug":"android_safe_mode_mechanism_two","published":1,"updated":"2016-04-27T07:54:23.084Z","comments":1,"photos":[],"link":"","_id":"cinu3etxr000uxoj0rg5m0p5o","content":"<style>\nh3 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nh6 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\n\n</style>\n\n<p>目录:</p>\n<ul>\n<li>1.进程和进程边界</li>\n<li>2.多用户和多用户边界</li>\n<li>3.进程和文件的UID/GID (UserID/groupId)<ul>\n<li>3.1文件资源的权限力度:UID/GID</li>\n<li>3.2文件的可操作权限</li>\n<li>3.3进程的标识: PID , UID , GID , GIDs</li>\n<li>3.4Name和ID的映射</li>\n<li>3.5Chmod和chown命令介绍<ul>\n<li>3.5.1Chmod</li>\n<li>3.5.2Chown</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>4.UID/GID的衔接</li>\n<li>5.进程的RealUID和EffectiveUID</li>\n<li>6.文件的setUID标识</li>\n<li>7.Capability<ul>\n<li>7.1进程的Capability</li>\n<li>7.2文件的Capability</li>\n<li>7.3Capability BoundSet</li>\n<li>7.4Spawn进程的Capability</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"进程和进程边界\"><a href=\"#进程和进程边界\" class=\"headerlink\" title=\"进程和进程边界\"></a>进程和进程边界</h1><pre><code>进程和线程\n    可执行文件:不活动就是废物\n    进程:可执行文件的活动表现,一次生命的历练\n    线程:CPU(核)的调度单位,并发的执行序列,进程的多管齐下\n    资源和调度.\n\n\n进程边界的安全围栏: \n    Crash的不可扩延性\n    全局数据和服务的不可访问性\n</code></pre><a id=\"more\"></a>\n<h1 id=\"多用户和多用户边界\"><a href=\"#多用户和多用户边界\" class=\"headerlink\" title=\"多用户和多用户边界\"></a>多用户和多用户边界</h1><pre><code>需求背景:\n    资源缺乏\n    中央统一管理\n\n多用户的边界:\n    独立的工作目录\n    可操作/访问的资源\n        资源分类\n        权限管理\n    可执行的操作\n        操作分类\n        权限管理\n\n多用户特性标识(linux): UID 和GID\n    Name只是供看的\n    Identifier才是系统层面的标识\n    用户的行为是一系列进程的行为\n    特性标识其实是进程的UID/GID\n</code></pre><h1 id=\"进程和文件的UID-GID-UserID-groupId\"><a href=\"#进程和文件的UID-GID-UserID-groupId\" class=\"headerlink\" title=\"进程和文件的UID/GID (UserID/groupId)\"></a>进程和文件的UID/GID (UserID/groupId)</h1><h2 id=\"文件资源的权限力度-UID-GID\"><a href=\"#文件资源的权限力度-UID-GID\" class=\"headerlink\" title=\"文件资源的权限力度:UID/GID\"></a>文件资源的权限力度:UID/GID</h2><pre><code>1.文件是一类资源\n2.在Linux中,甚至一切皆是文件,Socket,Driver\n3.文件资源对不同Target(用户)的不同操作权限的需求应运而生\n4.某些场景下,允许多个不同的Target/用户(而不是一个)具有一致的操作权限,怎么办? \n    Id===&gt; Gid===&gt; 多个用户可以属于一个GID,一个用户可以属于多个GIDs\n5.所以文件权限的管理力度区分3类群体:属于特定UID的用户,属于特定GID的用户(们),其他用户\n6.一个上帝用户存在:ROOT, 其UID = 0 , 上帝用户永远满足属于任何UID\n</code></pre><h2 id=\"文件的可操作权限\"><a href=\"#文件的可操作权限\" class=\"headerlink\" title=\"文件的可操作权限\"></a>文件的可操作权限</h2><pre><code>1.文件/文件夹的可读 r\n2.文件/文件夹的可写 w\n3.文件/文件夹的可执行 x\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -l</span><br><span class=\"line\">total 20</span><br><span class=\"line\"> 权限列表        UID       GID</span><br><span class=\"line\">-rw-r--r--    1 comtu    Administ      879 Feb 25 17:39 404.html</span><br><span class=\"line\">-rw-r--r--    1 comtu    Administ     2800 Feb 25 17:39 README.md</span><br><span class=\"line\">-rw-r--r--    1 comtu    Administ     2909 Feb 25 17:39 Rakefile.rb</span><br><span class=\"line\">-rw-r--r--    1 comtu    Administ     1609 Feb 25 17:39 _config.yml</span><br><span class=\"line\">drwxr-xr-x    4 comtu    Administ        0 Feb 25 17:39 _data</span><br><span class=\"line\">drwxr-xr-x    7 comtu    Administ     4096 Feb 25 17:39 _includes</span><br><span class=\"line\">drwxr-xr-x    5 comtu    Administ        0 Feb 25 17:39 _layouts</span><br><span class=\"line\">drwxr-xr-x    3 comtu    Administ        0 Feb 25 17:39 _plugins</span><br><span class=\"line\">drwxr-xr-x   18 comtu    Administ     8192 Jul  1 17:36 _posts</span><br><span class=\"line\">drwxr-xr-x   13 comtu    Administ     4096 Jul  1 13:30 _site</span><br><span class=\"line\">-rw-r--r--    1 comtu    Administ       10 Feb 25 17:39 baidu_verify_</span><br><span class=\"line\">html</span><br><span class=\"line\">-rw-r--r--    1 comtu    Administ     1672 Feb 25 17:39 index.html</span><br><span class=\"line\">drwxr-xr-x    1 comtu    Administ     4096 Feb 25 17:39 page</span><br><span class=\"line\">drwxr-xr-x    1 comtu    Administ     4096 Jun 25 16:18 res</span><br><span class=\"line\">-rw-r--r--    1 comtu    Administ       59 Jun 25 17:45 robots.txt</span><br><span class=\"line\">-rw-r--r--    1 comtu    Administ      350 Apr 13 17:53 search.xml</span><br><span class=\"line\">-rw-r--r--    1 comtu    Administ      209 Feb 25 17:39 sitemap.txt</span><br></pre></td></tr></table></figure>\n<pre><code>drwxr-xr-x\nd|rwx|r-x|r-x\n0|123|456|789\n\n文件夹与文件标识\n    0 : d文件夹    -文件\nUID用户\n    1 : 可读\n    2 : 可写\n    3 : 可执行\nGID用户\n    4 : 可读\n    5 : 不可写\n    6 : 可执行\n其他用户\n    7 : 可读\n    8 : 不可写\n    9 : 可执行\n</code></pre><h2 id=\"进程的标识-PID-UID-GID-GIDs\"><a href=\"#进程的标识-PID-UID-GID-GIDs\" class=\"headerlink\" title=\"进程的标识: PID , UID , GID , GIDs\"></a>进程的标识: PID , UID , GID , GIDs</h2><pre><code>PID : 进程的Unique Identifier(唯一标识) . 每次Running的PID可能相同,或者不同,由系统分配\nUID : 进程的身份标识.每次运行,即便重启后默认都相同\nGID : 进程的(组)身份标识.每次运行,即便重启后默认都相同.不同进程允许有相同的GID(组用户身份标识).\n    同一进程允许属于多个GID.\nGIDs: 进程所属的全部GID\n</code></pre><h2 id=\"Name和ID的映射\"><a href=\"#Name和ID的映射\" class=\"headerlink\" title=\"Name和ID的映射\"></a>Name和ID的映射</h2><pre><code>Android原代码之Name和ID映射表\n/system/core/include/private/android_filesystem_config.h\n</code></pre><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span><br><span class=\"line\"> * Copyright (C) 2007 The Android Open Source Project</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * Licensed under the Apache License, Version 2.0 (the \"License\");</span><br><span class=\"line\"> * you may not use this file except in compliance with the License.</span><br><span class=\"line\"> * You may obtain a copy of the License at</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *      http://www.apache.org/licenses/LICENSE-2.0</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * Unless required by applicable law or agreed to in writing, software</span><br><span class=\"line\"> * distributed under the License is distributed on an \"AS IS\" BASIS,</span><br><span class=\"line\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class=\"line\"> * See the License for the specific language governing permissions and</span><br><span class=\"line\"> * limitations under the License.</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* This file is used to define the properties of the filesystem</span><br><span class=\"line\">#  images generated by build tools (mkbootfs and mkyaffs2image) and</span><br><span class=\"line\">#  by the device side of adb.</span><br><span class=\"line\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _ANDROID_FILESYSTEM_CONFIG_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _ANDROID_FILESYSTEM_CONFIG_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;string.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;sys/stat.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;sys/types.h&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* This is the master Users and Groups config for the platform.</span><br><span class=\"line\">#  DO NOT EVER RENUMBER.</span><br><span class=\"line\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_ROOT             0  <span class=\"comment\">/* traditional unix root user */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_SYSTEM        1000  <span class=\"comment\">/* system server */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_RADIO         1001  <span class=\"comment\">/* telephony subsystem, RIL */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_BLUETOOTH     1002  <span class=\"comment\">/* bluetooth subsystem */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_GRAPHICS      1003  <span class=\"comment\">/* graphics devices */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_INPUT         1004  <span class=\"comment\">/* input devices */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_AUDIO         1005  <span class=\"comment\">/* audio devices */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_CAMERA        1006  <span class=\"comment\">/* camera devices */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_LOG           1007  <span class=\"comment\">/* log devices */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_COMPASS       1008  <span class=\"comment\">/* compass device */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MOUNT         1009  <span class=\"comment\">/* mountd socket */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_WIFI          1010  <span class=\"comment\">/* wifi subsystem */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_ADB           1011  <span class=\"comment\">/* android debug bridge (adbd) */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_INSTALL       1012  <span class=\"comment\">/* group for installing packages */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MEDIA         1013  <span class=\"comment\">/* mediaserver process */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_DHCP          1014  <span class=\"comment\">/* dhcp client */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_SDCARD_RW     1015  <span class=\"comment\">/* external storage write access */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_VPN           1016  <span class=\"comment\">/* vpn system */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_KEYSTORE      1017  <span class=\"comment\">/* keystore subsystem */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_USB           1018  <span class=\"comment\">/* USB devices */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_GPS           1021  <span class=\"comment\">/* GPS daemon */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_UNUSED1       1022  <span class=\"comment\">/* deprecated, DO NOT USE */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_RFU1          1023  <span class=\"comment\">/* RFU */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_RFU2          1024  <span class=\"comment\">/* RFU */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_NFC           1025  <span class=\"comment\">/* nfc subsystem */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_SHELL         2000  <span class=\"comment\">/* adb and debug shell user */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_CACHE         2001  <span class=\"comment\">/* cache access */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_DIAG          2002  <span class=\"comment\">/* access to diagnostic resources */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* The 3000 series are intended for use as supplemental group id's only.</span><br><span class=\"line\"> * They indicate special Android capabilities that the kernel is aware of. */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_NET_BT_ADMIN  3001  <span class=\"comment\">/* bluetooth: create any socket */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_NET_BT        3002  <span class=\"comment\">/* bluetooth: create sco, rfcomm or l2cap sockets */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_INET          3003  <span class=\"comment\">/* can create AF_INET and AF_INET6 sockets */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_NET_RAW       3004  <span class=\"comment\">/* can create raw INET sockets */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_NET_ADMIN     3005  <span class=\"comment\">/* can configure interfaces and routing tables. */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_QCOM_ONCRPC   3006  <span class=\"comment\">/* can read/write /dev/oncrpc files */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(MOTOROLA_UIDS)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MOT_ACCY      9000  <span class=\"comment\">/* access to accessory */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MOT_PWRIC     9001  <span class=\"comment\">/* power IC */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MOT_USB       9002  <span class=\"comment\">/* mot usb */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MOT_DRM       9003  <span class=\"comment\">/* can access DRM resource. */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MOT_TCMD      9004  <span class=\"comment\">/* mot_tcmd */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MOT_SEC_RTC   9005  <span class=\"comment\">/* mot cpcap rtc */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MOT_TOMBSTONE 9006</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MOT_TPAPI     9007  <span class=\"comment\">/* mot_tpapi */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MOT_SECCLKD   9008  <span class=\"comment\">/* mot_secclkd */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// MOTOROLA_UIDS</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MISC          9998  <span class=\"comment\">/* access to misc storage */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_NOBODY        9999</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_APP          10000 <span class=\"comment\">/* first app user */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> !defined(EXCLUDE_FS_CONFIG_STRUCTURES)</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> android_id_info &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> aid;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> android_id_info android_ids[] = &#123;</span><br><span class=\"line\">    &#123; <span class=\"string\">\"root\"</span>,      AID_ROOT, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"system\"</span>,    AID_SYSTEM, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"radio\"</span>,     AID_RADIO, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"bluetooth\"</span>, AID_BLUETOOTH, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"graphics\"</span>,  AID_GRAPHICS, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"input\"</span>,     AID_INPUT, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"audio\"</span>,     AID_AUDIO, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"camera\"</span>,    AID_CAMERA, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"log\"</span>,       AID_LOG, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"compass\"</span>,   AID_COMPASS, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"mount\"</span>,     AID_MOUNT, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"wifi\"</span>,      AID_WIFI, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"dhcp\"</span>,      AID_DHCP, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"adb\"</span>,       AID_ADB, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"install\"</span>,   AID_INSTALL, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"media\"</span>,     AID_MEDIA, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"nfc\"</span>,       AID_NFC, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"shell\"</span>,     AID_SHELL, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"cache\"</span>,     AID_CACHE, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"diag\"</span>,      AID_DIAG, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"net_bt_admin\"</span>, AID_NET_BT_ADMIN, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"net_bt\"</span>,    AID_NET_BT, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"qcom_oncrpc\"</span>, AID_QCOM_ONCRPC, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"sdcard_rw\"</span>, AID_SDCARD_RW, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"vpn\"</span>,       AID_VPN, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"keystore\"</span>,  AID_KEYSTORE, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"usb\"</span>,       AID_USB, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"gps\"</span>,       AID_GPS, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"inet\"</span>,      AID_INET, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"net_raw\"</span>,   AID_NET_RAW, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"net_admin\"</span>, AID_NET_ADMIN, &#125;,</span><br><span class=\"line\">#<span class=\"keyword\">if</span> defined(MOTOROLA_UIDS)</span><br><span class=\"line\">    &#123; <span class=\"string\">\"mot_accy\"</span>,  AID_MOT_ACCY, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"mot_pwric\"</span>, AID_MOT_PWRIC, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"mot_usb\"</span>,   AID_MOT_USB, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"mot_drm\"</span>,   AID_MOT_DRM, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"mot_tcmd\"</span>,  AID_MOT_TCMD, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"mot_sec_rtc\"</span>,  AID_MOT_SEC_RTC, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"mot_tombstone\"</span>, AID_MOT_TOMBSTONE, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"mot_tpapi\"</span>,  AID_MOT_TPAPI, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"mot_secclkd\"</span>,  AID_MOT_SECCLKD, &#125;,</span><br><span class=\"line\">#endif</span><br><span class=\"line\">    &#123; <span class=\"string\">\"misc\"</span>,      AID_MISC, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"nobody\"</span>,    AID_NOBODY, &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> android_id_count \\</span><br><span class=\"line\">    (sizeof(android_ids) / sizeof(android_ids[0]))</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">struct</span> fs_path_config &#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> mode;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> uid;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> gid;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *prefix;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Rules for directories.</span><br><span class=\"line\">#  These rules are applied based on \"first match\", so they</span><br><span class=\"line\">#  should start with the most specific path and work their</span><br><span class=\"line\">#  way up to the root.</span><br><span class=\"line\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">struct</span> fs_path_config android_dirs[] = &#123;</span><br><span class=\"line\">    &#123; <span class=\"number\">00770</span>, AID_SYSTEM, AID_CACHE,  <span class=\"string\">\"cache\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00771</span>, AID_SYSTEM, AID_SYSTEM, <span class=\"string\">\"data/app\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00771</span>, AID_SYSTEM, AID_SYSTEM, <span class=\"string\">\"data/app-private\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00771</span>, AID_SYSTEM, AID_SYSTEM, <span class=\"string\">\"data/dalvik-cache\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00771</span>, AID_SYSTEM, AID_SYSTEM, <span class=\"string\">\"data/data\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00771</span>, AID_SHELL,  AID_SHELL,  <span class=\"string\">\"data/local/tmp\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00771</span>, AID_SHELL,  AID_SHELL,  <span class=\"string\">\"data/local\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">01771</span>, AID_SYSTEM, AID_MISC,   <span class=\"string\">\"data/misc\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00770</span>, AID_DHCP,   AID_DHCP,   <span class=\"string\">\"data/misc/dhcp\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00771</span>, AID_SYSTEM, AID_SYSTEM, <span class=\"string\">\"data\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00750</span>, AID_ROOT,   AID_SHELL,  <span class=\"string\">\"sbin\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00755</span>, AID_ROOT,   AID_SHELL,  <span class=\"string\">\"system/bin\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00755</span>, AID_ROOT,   AID_SHELL,  <span class=\"string\">\"system/vendor\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00755</span>, AID_ROOT,   AID_SHELL,  <span class=\"string\">\"system/xbin\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00755</span>, AID_ROOT,   AID_ROOT,   <span class=\"string\">\"system/etc/ppp\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00777</span>, AID_ROOT,   AID_ROOT,   <span class=\"string\">\"sdcard\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00771</span>, AID_SYSTEM, AID_SYSTEM, <span class=\"string\">\"sd-ext\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00755</span>, AID_ROOT,   AID_ROOT,   <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Rules for files.</span><br><span class=\"line\">#  These rules are applied based on \"first match\", so they</span><br><span class=\"line\">#  should start with the most specific path and work their</span><br><span class=\"line\">#  way up to the root. Prefixes ending in * denotes wildcard</span><br><span class=\"line\">#  and will allow partial matches.</span><br><span class=\"line\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">struct</span> fs_path_config android_files[] = &#123;</span><br><span class=\"line\">    &#123; <span class=\"number\">00440</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"system/etc/init.goldfish.rc\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00550</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"system/etc/init.goldfish.sh\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00440</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"system/etc/init.trout.rc\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00550</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"system/etc/init.ril\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00550</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"system/etc/init.testmenu\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00550</span>, AID_DHCP,      AID_SHELL,     <span class=\"string\">\"system/etc/dhcpcd/dhcpcd-run-hooks\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00440</span>, AID_BLUETOOTH, AID_BLUETOOTH, <span class=\"string\">\"system/etc/dbus.conf\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00440</span>, AID_BLUETOOTH, AID_BLUETOOTH, <span class=\"string\">\"system/etc/bluetooth/main.conf\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00440</span>, AID_BLUETOOTH, AID_BLUETOOTH, <span class=\"string\">\"system/etc/bluetooth/input.conf\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00440</span>, AID_BLUETOOTH, AID_BLUETOOTH, <span class=\"string\">\"system/etc/bluetooth/audio.conf\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00444</span>, AID_NET_BT,    AID_NET_BT,    <span class=\"string\">\"system/etc/bluetooth/blacklist.conf\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00640</span>, AID_SYSTEM,    AID_SYSTEM,    <span class=\"string\">\"system/etc/bluetooth/auto_pairing.conf\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00444</span>, AID_RADIO,     AID_AUDIO,     <span class=\"string\">\"system/etc/AudioPara4.csv\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00555</span>, AID_ROOT,      AID_ROOT,      <span class=\"string\">\"system/etc/ppp/*\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00555</span>, AID_ROOT,      AID_ROOT,      <span class=\"string\">\"system/etc/rc.*\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00644</span>, AID_SYSTEM,    AID_SYSTEM,    <span class=\"string\">\"data/app/*\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00644</span>, AID_SYSTEM,    AID_SYSTEM,    <span class=\"string\">\"data/app-private/*\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00644</span>, AID_APP,       AID_APP,       <span class=\"string\">\"data/data/*\"</span> &#125;,</span><br><span class=\"line\">\t<span class=\"comment\">/* the following three files are INTENTIONALLY set-gid and not set-uid.</span><br><span class=\"line\">\t * Do not change. */</span></span><br><span class=\"line\">    &#123; <span class=\"number\">02755</span>, AID_ROOT,      AID_NET_RAW,   <span class=\"string\">\"system/bin/ping\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">02750</span>, AID_ROOT,      AID_INET,      <span class=\"string\">\"system/bin/netcfg\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">02755</span>, AID_SYSTEM,    AID_GRAPHICS,  <span class=\"string\">\"system/bin/screenshot\"</span> &#125;,</span><br><span class=\"line\">\t<span class=\"comment\">/* the following five files are INTENTIONALLY set-uid, but they</span><br><span class=\"line\">\t * are NOT included on user builds. */</span></span><br><span class=\"line\">    &#123; <span class=\"number\">06755</span>, AID_ROOT,      AID_ROOT,      <span class=\"string\">\"system/xbin/su\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">06755</span>, AID_ROOT,      AID_ROOT,      <span class=\"string\">\"system/xbin/librank\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">06755</span>, AID_ROOT,      AID_ROOT,      <span class=\"string\">\"system/xbin/procrank\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">06755</span>, AID_ROOT,      AID_ROOT,      <span class=\"string\">\"system/xbin/procmem\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">06755</span>, AID_ROOT,      AID_ROOT,      <span class=\"string\">\"system/xbin/tcpdump\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">04770</span>, AID_ROOT,      AID_RADIO,     <span class=\"string\">\"system/bin/pppd-ril\"</span> &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">/* the following file is INTENTIONALLY set-uid, and IS included</span><br><span class=\"line\">\t\t * in user builds. */</span></span><br><span class=\"line\">    &#123; <span class=\"number\">06750</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"system/bin/run-as\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">06755</span>, AID_ROOT,      AID_ROOT,      <span class=\"string\">\"system/xbin/hcitool\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00755</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"system/bin/*\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00755</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"system/xbin/*\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00755</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"system/vendor/bin/*\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00750</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"sbin/*\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00755</span>, AID_ROOT,      AID_ROOT,      <span class=\"string\">\"bin/*\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00750</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"init*\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00750</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"system/etc/init.d/*\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00644</span>, AID_ROOT,      AID_ROOT,       <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">fs_config</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *path, <span class=\"keyword\">int</span> dir,</span><br><span class=\"line\">\t\t\t     <span class=\"keyword\">unsigned</span> *uid, <span class=\"keyword\">unsigned</span> *gid, <span class=\"keyword\">unsigned</span> *mode)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> fs_path_config *pc;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> plen;</span><br><span class=\"line\">    </span><br><span class=\"line\">    pc = dir ? android_dirs : android_files;</span><br><span class=\"line\">    plen = <span class=\"built_in\">strlen</span>(path);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; pc-&gt;prefix; pc++)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(pc-&gt;prefix);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (dir) &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(plen &amp;lt; len) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(!<span class=\"built_in\">strncmp</span>(pc-&gt;prefix, path, len)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/* If name ends in * then allow partial matches. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pc-&gt;prefix[len <span class=\"number\">-1</span>] == <span class=\"string\">'*'</span>) &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(!<span class=\"built_in\">strncmp</span>(pc-&gt;prefix, path, len - <span class=\"number\">1</span>)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (plen == len)&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(!strncmp(pc-&gt;prefix, path, len)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *uid = pc-&gt;uid;</span><br><span class=\"line\">    *gid = pc-&gt;gid;</span><br><span class=\"line\">    *mode = (*mode &amp; (~<span class=\"number\">07777</span>)) | pc-&gt;mode;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> 0</span></span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"&amp;lt; '%s' '%s' %d %d %o &gt;\\n\"</span>, </span><br><span class=\"line\">\t    path, pc-&gt;prefix ? pc-&gt;prefix : <span class=\"string\">\"\"</span>, *uid, *gid, *mode);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<pre><code>Android提供了dumpsys工具来dump出所有的服务信息，通过以下命令可以查看系统注册的所有服务：adb shell dumpsys  \ndumpsys 用来给出手机中所有应用程序的信息，并且也会给出现在手机的状态。\n因为内容太多把dumpsys的内容存储到C盘文件中方便查看.如下\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\comtu&gt;adb shell</span><br><span class=\"line\">shell@android:/ $ su</span><br><span class=\"line\">shell@android:/ # cd data</span><br><span class=\"line\">shell@android:/data # mkdir test</span><br><span class=\"line\">shell@android:/data # cd test</span><br><span class=\"line\">shell@android:/data/test # dumpsys &gt; dumpsys.txt</span><br><span class=\"line\">shell@android:/data/test # ls -l</span><br><span class=\"line\">ls -l</span><br><span class=\"line\">-rw-rw-rw- root     root      1706976 2015-07-03 08:57 dumpsys.txt</span><br><span class=\"line\">shell@android:/data/test # exit</span><br><span class=\"line\">exit</span><br><span class=\"line\">shell@android:/ $ exit</span><br><span class=\"line\">exit</span><br><span class=\"line\">C:\\Users\\comtu&gt;adb pull /data/test/dumpsys.txt c:/</span><br><span class=\"line\">5649 KB/s (1706976 bytes in 0.295s)</span><br></pre></td></tr></table></figure>\n<pre><code>其中dumpsys.txt文件一段关于QQ配置的片段可查找到如下内容:\n        userId=10081 gids=[3003, 1028, 1015] &lt;---gids可在android_filesystem_config.h查找到对应的映射关系\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Package [com.tencent.mobileqq] (426f1258):</span><br><span class=\"line\">  userId=10081 gids=[3003, 1028, 1015]</span><br><span class=\"line\">  pkg=Package&#123;42b7e890 com.tencent.mobileqq&#125;</span><br><span class=\"line\">  codePath=/data/app/partner-QQ.apk</span><br><span class=\"line\">  resourcePath=/data/app/partner-QQ.apk</span><br><span class=\"line\">  nativeLibraryPath=/data/app-lib/partner-QQ</span><br><span class=\"line\">  versionCode=122 targetSdk=7</span><br><span class=\"line\">  versionName=4.7.0</span><br><span class=\"line\">  applicationInfo=ApplicationInfo&#123;42b136f8 com.tencent.mobileqq&#125;</span><br><span class=\"line\">  flags=[ HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]</span><br><span class=\"line\">  dataDir=/data/data/com.tencent.mobileqq</span><br><span class=\"line\">  supportsScreens=[small, medium, large, resizeable, anyDensity]</span><br><span class=\"line\">  usesOptionalLibraries:</span><br><span class=\"line\">    com.google.android.media.effects</span><br><span class=\"line\">    com.motorola.hardware.frontcamera</span><br><span class=\"line\">  timeStamp=2015-05-05 17:36:43</span><br><span class=\"line\">  firstInstallTime=2015-05-05 17:36:43</span><br><span class=\"line\">  lastUpdateTime=2015-05-05 17:36:43</span><br><span class=\"line\">  signatures=PackageSignatures&#123;426f1320 [426f1ed0]&#125;</span><br><span class=\"line\">  permissionsFixed=true haveGids=true installStatus=1</span><br><span class=\"line\">  pkgFlags=[ HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]</span><br><span class=\"line\">  User 0:  installed=true blocked=false stopped=true notLaunched=false enabled=0</span><br><span class=\"line\">  grantedPermissions:</span><br><span class=\"line\">    android.permission.READ_EXTERNAL_STORAGE</span><br><span class=\"line\">    android.permission.CHANGE_WIFI_MULTICAST_STATE</span><br><span class=\"line\">    com.tencent.photos.permission.DATA</span><br><span class=\"line\">    android.permission.GET_TASKS</span><br><span class=\"line\">    android.permission.WRITE_EXTERNAL_STORAGE</span><br><span class=\"line\">    android.permission.WRITE_CALL_LOG</span><br><span class=\"line\">    com.tencent.msg.permission.pushnotify</span><br><span class=\"line\">    android.permission.ACCESS_WIFI_STATE</span><br><span class=\"line\">    android.permission.ACCESS_COARSE_LOCATION</span><br><span class=\"line\">    android.permission.READ_CONTACTS</span><br><span class=\"line\">    android.permission.CALL_PHONE</span><br><span class=\"line\">    android.permission.WRITE_CONTACTS</span><br><span class=\"line\">    com.tencent.permission.VIRUS_SCAN</span><br><span class=\"line\">    android.permission.READ_PHONE_STATE</span><br><span class=\"line\">    android.permission.READ_CALENDAR</span><br><span class=\"line\">    android.permission.READ_SMS</span><br><span class=\"line\">    android.permission.CAMERA</span><br><span class=\"line\">    android.permission.ACCESS_FINE_LOCATION</span><br><span class=\"line\">    android.permission.BROADCAST_STICKY</span><br><span class=\"line\">    android.permission.PERSISTENT_ACTIVITY</span><br><span class=\"line\">    android.permission.FLASHLIGHT</span><br><span class=\"line\">    android.permission.RECORD_AUDIO</span><br><span class=\"line\">    android.permission.WAKE_LOCK</span><br><span class=\"line\">    android.permission.ACCESS_NETWORK_STATE</span><br><span class=\"line\">    com.tencent.msf.permission.ACCOUNT_NOTICE</span><br><span class=\"line\">    com.android.launcher.permission.INSTALL_SHORTCUT</span><br><span class=\"line\">    com.tencent.msf.permission.account.sync</span><br><span class=\"line\">    android.permission.SEND_SMS</span><br><span class=\"line\">    com.android.launcher.permission.UNINSTALL_SHORTCUT</span><br><span class=\"line\">    android.permission.KILL_BACKGROUND_PROCESSES</span><br><span class=\"line\">    android.permission.MODIFY_AUDIO_SETTINGS</span><br><span class=\"line\">    android.permission.DISABLE_KEYGUARD</span><br><span class=\"line\">    android.permission.WRITE_CALENDAR</span><br><span class=\"line\">    com.qq.qcloud.permission.ACCESS_ALBUM_BACKUP_LIST</span><br><span class=\"line\">    android.permission.SYSTEM_ALERT_WINDOW</span><br><span class=\"line\">    android.permission.WRITE_SETTINGS</span><br><span class=\"line\">    android.permission.INTERNET</span><br><span class=\"line\">    android.permission.CHANGE_WIFI_STATE</span><br><span class=\"line\">    android.permission.VIBRATE</span><br><span class=\"line\">    android.permission.READ_CALL_LOG</span><br><span class=\"line\">    com.android.launcher.permission.READ_SETTINGS</span><br><span class=\"line\">    android.permission.CHANGE_NETWORK_STATE</span><br></pre></td></tr></table></figure>\n<h2 id=\"Chmod和chown命令介绍\"><a href=\"#Chmod和chown命令介绍\" class=\"headerlink\" title=\"Chmod和chown命令介绍\"></a>Chmod和chown命令介绍</h2><h3 id=\"Chmod\"><a href=\"#Chmod\" class=\"headerlink\" title=\"Chmod\"></a>Chmod</h3><pre><code>1.文件R/W/X的系统内部采用3Bit表示,R为最高位比特,置位为0x04,\n    W为中间比特,置位为0x02,X为最低比特,置位为0x01\n\n    4(读R) , 2(写W) , 1(执行X)\n    7=4+2+1 所有权限\n    6=4+2   读写\n    5=4+1   读执行\n    4       读\n    3=3+1   写执行\n    2\n    1\n    664表示给予UID,GID读写权限,给予其它只读权限\n\n2.Shell中表示时,置位使用相应R/W/X表示,未置位使用-\n3.操作文件面向群体的操作权限时,使用Chmod,可以直接使用数字,\n    也可使用助记符( a:all , u:owner user , g:group , +:add one premission , -:remove one permission)\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">-rw-rw-r-- system   system         12 2015-07-02 18:02 test.txt</span><br><span class=\"line\">shell@android:/data/test # chmod 777 test.txt</span><br><span class=\"line\">chmod 777 test.txt</span><br><span class=\"line\">shell@android:/data/test # ls -l</span><br><span class=\"line\">ls -l</span><br><span class=\"line\">-rwxrwxrwx system   system         12 2015-07-02 18:02 test.txt</span><br><span class=\"line\">shell@android:/data/test #</span><br><span class=\"line\">shell@android:/data/test # chmod 664 test.txt</span><br><span class=\"line\">chmod 664 test.txt</span><br><span class=\"line\">shell@android:/data/test # ls -l</span><br><span class=\"line\">ls -l</span><br><span class=\"line\">-rw-rw-r-- system   system         12 2015-07-02 18:02 test.txt</span><br><span class=\"line\">shell@android:/data/test #</span><br></pre></td></tr></table></figure>\n<h3 id=\"Chown\"><a href=\"#Chown\" class=\"headerlink\" title=\"Chown\"></a>Chown</h3><pre><code>通过chown改变文件的拥有者和群组。在更改文件的所有者UID或所属群组GID时，可以使用用户名称和用户识别码设置。\n    Shell命令中通常采用Name方式修改,而不是ID方式.普通用户不能将自己的文件改变成其他的拥有者。其操作权限一般为管理员。\n一般格式: chown newUID:newGID FileName\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell@android:/data # mkdir test</span><br><span class=\"line\">mkdir test</span><br><span class=\"line\">shell@android:/data # cd test</span><br><span class=\"line\">cd test</span><br><span class=\"line\">shell@android:/data/test # echo &quot;hello world&quot; &gt; test.txt</span><br><span class=\"line\">echo &quot;hello world&quot; &gt; test.txt</span><br><span class=\"line\">shell@android:/data/test # ls</span><br><span class=\"line\">ls</span><br><span class=\"line\">test.txt</span><br><span class=\"line\">shell@android:/data/test # ls -l</span><br><span class=\"line\">ls -l</span><br><span class=\"line\">-rw-rw-rw- root     root           12 2015-07-02 18:02 test.txt</span><br><span class=\"line\">shell@android:/data/test # chown system:system test.txt</span><br><span class=\"line\">chown system:system test.txt</span><br><span class=\"line\">shell@android:/data/test # ls -l</span><br><span class=\"line\">ls -l</span><br><span class=\"line\">-rw-rw-rw- system   system         12 2015-07-02 18:02 test.txt</span><br><span class=\"line\">shell@android:/data/test #</span><br></pre></td></tr></table></figure>\n<h1 id=\"UID-GID的衔接\"><a href=\"#UID-GID的衔接\" class=\"headerlink\" title=\"UID/GID的衔接\"></a>UID/GID的衔接</h1><pre><code>1.Linux一切皆是文件\n2.文件基于UID/GID来划分它的面向群体,对它的面向群体定义不同的操作权限\n3.用户的行为映射为进程的运行\n4.进程的运行使用进程的UID/GID来标识自己的身份\n5.进程的UID/GID&lt;=====&gt;文件的UID/GID 完美衔接~~\n6.进程的UID/GID除了被授予可操作文件的范畴外,非文件范畴的需要进行权限控制的操作\n    (如重启系统等特权操作)继续通过进程的UID/GID身份来进行控制和授权.\n7.比如,对于Reboot这个API,其入口处可以check calling的Process的UID,如果不是Root,则Reject\n</code></pre><h1 id=\"进程的RealUID和EffectiveUID\"><a href=\"#进程的RealUID和EffectiveUID\" class=\"headerlink\" title=\"进程的RealUID和EffectiveUID\"></a>进程的RealUID和EffectiveUID</h1><pre><code>linux下real uid被用于描述用户是谁，文件的拥有者，effective uid指程序执行时的用户组别，\n用于判断程序是否有权去进行一些操作（例如读写文件），因此real uid是针对用户和文件(拥有者)而言，\n而effective是针对运行的程序而言。一般来讲一个用户执行一个程序，\n程序的effective uid会被设置为用户的real uid，这个effective uid与该程序的real uid(文件所有者)无关，只与执行者有关。\n\nReal UID 是身份的标识 , 但没有&quot;实权&quot;\n\nEffective UID 是权利的标识 \n    文件,资源以及特权API操作时对进程是否有权限的识别的UID,即是指Effectivie UID\n\n身份与权利的关系\n    一般情况下,身份和权利是一至的,即Real UID = Effective UID.\n    所以,默认ps cmd输出的UID指的是Effective UID , 而没有输出Real UID\n\nRoot用户的特权\n    ROOT可以调用SetXUID对自己的身份进行升降.\n\nUID的世袭\n    子进程的Real UID = Effective UID = 父进程的Real UID (子嗣不能继承其特权Effective UID而仅能继承其Real UID)\n</code></pre><h1 id=\"文件的setUID标识\"><a href=\"#文件的setUID标识\" class=\"headerlink\" title=\"文件的setUID标识\"></a>文件的setUID标识</h1><pre><code>setUID可以让普通用户暂时获得文件权限的读写.\n\n和基本的RWX设置类似,有助记符和直接数字设置.直接数字设置时,采用4位数字,第一位标志setUID\n如下:\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell@android:/data/test $ ls -l</span><br><span class=\"line\">ls -l</span><br><span class=\"line\">-rw-rw-rw- shell    shell           7 2015-07-03 09:22 comtu.txt</span><br><span class=\"line\">-rw-rw-rw- root     root      1706976 2015-07-03 08:57 dumpsys.txt</span><br><span class=\"line\">-rw-rw-r-- system   system         12 2015-07-02 18:02 test.txt</span><br><span class=\"line\">shell@android:/data/test $ chmod 4775 comtu.txt</span><br><span class=\"line\">chmod 4775 comtu.txt</span><br><span class=\"line\">shell@android:/data/test $ ls -l</span><br><span class=\"line\">ls -l</span><br><span class=\"line\">-rwsrwxr-x shell    shell           7 2015-07-03 09:22 comtu.txt</span><br><span class=\"line\">-rw-rw-rw- root     root      1706976 2015-07-03 08:57 dumpsys.txt</span><br><span class=\"line\">-rw-rw-r-- system   system         12 2015-07-02 18:02 test.txt</span><br><span class=\"line\">shell@android:/data/test $ chmod 0775 comtu.txt</span><br><span class=\"line\">chmod 0775 comtu.txt</span><br><span class=\"line\">shell@android:/data/test $ ls -l</span><br><span class=\"line\">ls -l</span><br><span class=\"line\">-rwxrwxr-x shell    shell           7 2015-07-03 09:22 comtu.txt</span><br><span class=\"line\">-rw-rw-rw- root     root      1706976 2015-07-03 08:57 dumpsys.txt</span><br><span class=\"line\">-rw-rw-r-- system   system         12 2015-07-02 18:02 test.txt</span><br><span class=\"line\">shell@android:/data/test $ chmod u+s comtu.txt</span><br><span class=\"line\">chmod u+s comtu.txt</span><br><span class=\"line\">Bad mode</span><br><span class=\"line\">10|shell@android:/data/test $</span><br></pre></td></tr></table></figure>\n<pre><code>说明\n    chmod 4775 comtu.txt\n\n    4775 第一位4表示开启setUID, 第二位7表示UID获取读写执行权限,\n        第三位7表示Gid获取读写执行权限,最后5表示其它用户只有读与执行权限\n\n    chmod 0775 comtu.txt\n    0775 第一位0表示关闭setUID\n\n    chmod u+s comtu.txt\n    使用助记符,因为我使用的是Android的adb shell 是简化般linux对助记符不支持,如果使用ubuntu等则可进行操作.\n</code></pre><h1 id=\"Capability\"><a href=\"#Capability\" class=\"headerlink\" title=\"Capability\"></a>Capability</h1><pre><code>Capability细粒度的权限控制\n\n进程的Capability\n    permitted Capability Sets \n        当前进程的权利的围栏,最大权利的范围,是Effective Capability Sets的超集\n    Effectivte Capability Sets \n        当前进程的实际使用(支配)的权利集,该集内的Capability必须从属于Permitted Capability Sets . \n        该集合与Effective UID类似,是实际的权利标识.\n    Inheritable Capability Sets\n        子进程唯一可以直接继承的Capability Sets. 在Capability模式下,\n        只有子进程的Inheritable Capability Sets = 父进程的Inheritable Capability Sets . 其他的皆是NO\n文件的Capability\n    Permitted Capability Sets\n        该可执行文件可以为进程带来的Permitted Capability Sets\n    Effective Capability Set\n        仅1bit,Enable or disable , 标识该可执行文件running所在的进程的\n        Permitted Capability Sets是否自动全部Assign到其Effective Capability Sets. \n        通常用于与传统的Root-setUID可执行文件向下兼容.\n    Inheritable Capability Sets\n        与进程的Inheritable Capability Sets 一起作用(位与)以决定新的进程的Permitted capability Sets\n\nCapability BoundSet\n    Capability BoundSet是进程的属性\n    是进程自己为自己设定的安全围栏(Capability Sets) , \n        限制可执行文件的Permitted Capability Sets仅有局部能转化的Permitted Capability Sets\n    Capability BoundSet能被子进程继承\n    Init进程默认Capability BoundSet为全1\n\nSpawn进程的Capability\n    P&apos;子进程  P父进程  F子进程运行起来的执行文件\n\n    P&apos;(permitted) = (P(inheritable)&amp;F(inheritable))|(F(permitted)&amp;cap_bset)\n    P&apos;(effective) = F(effective)?P&apos;(permitted):0\n    P&apos;(inheritable) = P(inheritable)\n</code></pre>","excerpt":"<style>\nh3 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nh6 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\n\n</style>\n\n<p>目录:</p>\n<ul>\n<li>1.进程和进程边界</li>\n<li>2.多用户和多用户边界</li>\n<li>3.进程和文件的UID/GID (UserID/groupId)<ul>\n<li>3.1文件资源的权限力度:UID/GID</li>\n<li>3.2文件的可操作权限</li>\n<li>3.3进程的标识: PID , UID , GID , GIDs</li>\n<li>3.4Name和ID的映射</li>\n<li>3.5Chmod和chown命令介绍<ul>\n<li>3.5.1Chmod</li>\n<li>3.5.2Chown</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>4.UID/GID的衔接</li>\n<li>5.进程的RealUID和EffectiveUID</li>\n<li>6.文件的setUID标识</li>\n<li>7.Capability<ul>\n<li>7.1进程的Capability</li>\n<li>7.2文件的Capability</li>\n<li>7.3Capability BoundSet</li>\n<li>7.4Spawn进程的Capability</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"进程和进程边界\"><a href=\"#进程和进程边界\" class=\"headerlink\" title=\"进程和进程边界\"></a>进程和进程边界</h1><pre><code>进程和线程\n    可执行文件:不活动就是废物\n    进程:可执行文件的活动表现,一次生命的历练\n    线程:CPU(核)的调度单位,并发的执行序列,进程的多管齐下\n    资源和调度.\n\n\n进程边界的安全围栏: \n    Crash的不可扩延性\n    全局数据和服务的不可访问性\n</code></pre>","more":"<h1 id=\"多用户和多用户边界\"><a href=\"#多用户和多用户边界\" class=\"headerlink\" title=\"多用户和多用户边界\"></a>多用户和多用户边界</h1><pre><code>需求背景:\n    资源缺乏\n    中央统一管理\n\n多用户的边界:\n    独立的工作目录\n    可操作/访问的资源\n        资源分类\n        权限管理\n    可执行的操作\n        操作分类\n        权限管理\n\n多用户特性标识(linux): UID 和GID\n    Name只是供看的\n    Identifier才是系统层面的标识\n    用户的行为是一系列进程的行为\n    特性标识其实是进程的UID/GID\n</code></pre><h1 id=\"进程和文件的UID-GID-UserID-groupId\"><a href=\"#进程和文件的UID-GID-UserID-groupId\" class=\"headerlink\" title=\"进程和文件的UID/GID (UserID/groupId)\"></a>进程和文件的UID/GID (UserID/groupId)</h1><h2 id=\"文件资源的权限力度-UID-GID\"><a href=\"#文件资源的权限力度-UID-GID\" class=\"headerlink\" title=\"文件资源的权限力度:UID/GID\"></a>文件资源的权限力度:UID/GID</h2><pre><code>1.文件是一类资源\n2.在Linux中,甚至一切皆是文件,Socket,Driver\n3.文件资源对不同Target(用户)的不同操作权限的需求应运而生\n4.某些场景下,允许多个不同的Target/用户(而不是一个)具有一致的操作权限,怎么办? \n    Id===&gt; Gid===&gt; 多个用户可以属于一个GID,一个用户可以属于多个GIDs\n5.所以文件权限的管理力度区分3类群体:属于特定UID的用户,属于特定GID的用户(们),其他用户\n6.一个上帝用户存在:ROOT, 其UID = 0 , 上帝用户永远满足属于任何UID\n</code></pre><h2 id=\"文件的可操作权限\"><a href=\"#文件的可操作权限\" class=\"headerlink\" title=\"文件的可操作权限\"></a>文件的可操作权限</h2><pre><code>1.文件/文件夹的可读 r\n2.文件/文件夹的可写 w\n3.文件/文件夹的可执行 x\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -l</span><br><span class=\"line\">total 20</span><br><span class=\"line\"> 权限列表        UID       GID</span><br><span class=\"line\">-rw-r--r--    1 comtu    Administ      879 Feb 25 17:39 404.html</span><br><span class=\"line\">-rw-r--r--    1 comtu    Administ     2800 Feb 25 17:39 README.md</span><br><span class=\"line\">-rw-r--r--    1 comtu    Administ     2909 Feb 25 17:39 Rakefile.rb</span><br><span class=\"line\">-rw-r--r--    1 comtu    Administ     1609 Feb 25 17:39 _config.yml</span><br><span class=\"line\">drwxr-xr-x    4 comtu    Administ        0 Feb 25 17:39 _data</span><br><span class=\"line\">drwxr-xr-x    7 comtu    Administ     4096 Feb 25 17:39 _includes</span><br><span class=\"line\">drwxr-xr-x    5 comtu    Administ        0 Feb 25 17:39 _layouts</span><br><span class=\"line\">drwxr-xr-x    3 comtu    Administ        0 Feb 25 17:39 _plugins</span><br><span class=\"line\">drwxr-xr-x   18 comtu    Administ     8192 Jul  1 17:36 _posts</span><br><span class=\"line\">drwxr-xr-x   13 comtu    Administ     4096 Jul  1 13:30 _site</span><br><span class=\"line\">-rw-r--r--    1 comtu    Administ       10 Feb 25 17:39 baidu_verify_</span><br><span class=\"line\">html</span><br><span class=\"line\">-rw-r--r--    1 comtu    Administ     1672 Feb 25 17:39 index.html</span><br><span class=\"line\">drwxr-xr-x    1 comtu    Administ     4096 Feb 25 17:39 page</span><br><span class=\"line\">drwxr-xr-x    1 comtu    Administ     4096 Jun 25 16:18 res</span><br><span class=\"line\">-rw-r--r--    1 comtu    Administ       59 Jun 25 17:45 robots.txt</span><br><span class=\"line\">-rw-r--r--    1 comtu    Administ      350 Apr 13 17:53 search.xml</span><br><span class=\"line\">-rw-r--r--    1 comtu    Administ      209 Feb 25 17:39 sitemap.txt</span><br></pre></td></tr></table></figure>\n<pre><code>drwxr-xr-x\nd|rwx|r-x|r-x\n0|123|456|789\n\n文件夹与文件标识\n    0 : d文件夹    -文件\nUID用户\n    1 : 可读\n    2 : 可写\n    3 : 可执行\nGID用户\n    4 : 可读\n    5 : 不可写\n    6 : 可执行\n其他用户\n    7 : 可读\n    8 : 不可写\n    9 : 可执行\n</code></pre><h2 id=\"进程的标识-PID-UID-GID-GIDs\"><a href=\"#进程的标识-PID-UID-GID-GIDs\" class=\"headerlink\" title=\"进程的标识: PID , UID , GID , GIDs\"></a>进程的标识: PID , UID , GID , GIDs</h2><pre><code>PID : 进程的Unique Identifier(唯一标识) . 每次Running的PID可能相同,或者不同,由系统分配\nUID : 进程的身份标识.每次运行,即便重启后默认都相同\nGID : 进程的(组)身份标识.每次运行,即便重启后默认都相同.不同进程允许有相同的GID(组用户身份标识).\n    同一进程允许属于多个GID.\nGIDs: 进程所属的全部GID\n</code></pre><h2 id=\"Name和ID的映射\"><a href=\"#Name和ID的映射\" class=\"headerlink\" title=\"Name和ID的映射\"></a>Name和ID的映射</h2><pre><code>Android原代码之Name和ID映射表\n/system/core/include/private/android_filesystem_config.h\n</code></pre><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span><br><span class=\"line\"> * Copyright (C) 2007 The Android Open Source Project</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * Licensed under the Apache License, Version 2.0 (the \"License\");</span><br><span class=\"line\"> * you may not use this file except in compliance with the License.</span><br><span class=\"line\"> * You may obtain a copy of the License at</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *      http://www.apache.org/licenses/LICENSE-2.0</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * Unless required by applicable law or agreed to in writing, software</span><br><span class=\"line\"> * distributed under the License is distributed on an \"AS IS\" BASIS,</span><br><span class=\"line\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class=\"line\"> * See the License for the specific language governing permissions and</span><br><span class=\"line\"> * limitations under the License.</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* This file is used to define the properties of the filesystem</span><br><span class=\"line\">#  images generated by build tools (mkbootfs and mkyaffs2image) and</span><br><span class=\"line\">#  by the device side of adb.</span><br><span class=\"line\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _ANDROID_FILESYSTEM_CONFIG_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _ANDROID_FILESYSTEM_CONFIG_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;string.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;sys/stat.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;sys/types.h&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* This is the master Users and Groups config for the platform.</span><br><span class=\"line\">#  DO NOT EVER RENUMBER.</span><br><span class=\"line\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_ROOT             0  <span class=\"comment\">/* traditional unix root user */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_SYSTEM        1000  <span class=\"comment\">/* system server */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_RADIO         1001  <span class=\"comment\">/* telephony subsystem, RIL */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_BLUETOOTH     1002  <span class=\"comment\">/* bluetooth subsystem */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_GRAPHICS      1003  <span class=\"comment\">/* graphics devices */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_INPUT         1004  <span class=\"comment\">/* input devices */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_AUDIO         1005  <span class=\"comment\">/* audio devices */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_CAMERA        1006  <span class=\"comment\">/* camera devices */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_LOG           1007  <span class=\"comment\">/* log devices */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_COMPASS       1008  <span class=\"comment\">/* compass device */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MOUNT         1009  <span class=\"comment\">/* mountd socket */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_WIFI          1010  <span class=\"comment\">/* wifi subsystem */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_ADB           1011  <span class=\"comment\">/* android debug bridge (adbd) */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_INSTALL       1012  <span class=\"comment\">/* group for installing packages */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MEDIA         1013  <span class=\"comment\">/* mediaserver process */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_DHCP          1014  <span class=\"comment\">/* dhcp client */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_SDCARD_RW     1015  <span class=\"comment\">/* external storage write access */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_VPN           1016  <span class=\"comment\">/* vpn system */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_KEYSTORE      1017  <span class=\"comment\">/* keystore subsystem */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_USB           1018  <span class=\"comment\">/* USB devices */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_GPS           1021  <span class=\"comment\">/* GPS daemon */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_UNUSED1       1022  <span class=\"comment\">/* deprecated, DO NOT USE */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_RFU1          1023  <span class=\"comment\">/* RFU */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_RFU2          1024  <span class=\"comment\">/* RFU */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_NFC           1025  <span class=\"comment\">/* nfc subsystem */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_SHELL         2000  <span class=\"comment\">/* adb and debug shell user */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_CACHE         2001  <span class=\"comment\">/* cache access */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_DIAG          2002  <span class=\"comment\">/* access to diagnostic resources */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* The 3000 series are intended for use as supplemental group id's only.</span><br><span class=\"line\"> * They indicate special Android capabilities that the kernel is aware of. */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_NET_BT_ADMIN  3001  <span class=\"comment\">/* bluetooth: create any socket */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_NET_BT        3002  <span class=\"comment\">/* bluetooth: create sco, rfcomm or l2cap sockets */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_INET          3003  <span class=\"comment\">/* can create AF_INET and AF_INET6 sockets */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_NET_RAW       3004  <span class=\"comment\">/* can create raw INET sockets */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_NET_ADMIN     3005  <span class=\"comment\">/* can configure interfaces and routing tables. */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_QCOM_ONCRPC   3006  <span class=\"comment\">/* can read/write /dev/oncrpc files */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(MOTOROLA_UIDS)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MOT_ACCY      9000  <span class=\"comment\">/* access to accessory */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MOT_PWRIC     9001  <span class=\"comment\">/* power IC */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MOT_USB       9002  <span class=\"comment\">/* mot usb */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MOT_DRM       9003  <span class=\"comment\">/* can access DRM resource. */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MOT_TCMD      9004  <span class=\"comment\">/* mot_tcmd */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MOT_SEC_RTC   9005  <span class=\"comment\">/* mot cpcap rtc */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MOT_TOMBSTONE 9006</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MOT_TPAPI     9007  <span class=\"comment\">/* mot_tpapi */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MOT_SECCLKD   9008  <span class=\"comment\">/* mot_secclkd */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// MOTOROLA_UIDS</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_MISC          9998  <span class=\"comment\">/* access to misc storage */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_NOBODY        9999</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AID_APP          10000 <span class=\"comment\">/* first app user */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> !defined(EXCLUDE_FS_CONFIG_STRUCTURES)</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> android_id_info &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> aid;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">struct</span> android_id_info android_ids[] = &#123;</span><br><span class=\"line\">    &#123; <span class=\"string\">\"root\"</span>,      AID_ROOT, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"system\"</span>,    AID_SYSTEM, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"radio\"</span>,     AID_RADIO, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"bluetooth\"</span>, AID_BLUETOOTH, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"graphics\"</span>,  AID_GRAPHICS, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"input\"</span>,     AID_INPUT, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"audio\"</span>,     AID_AUDIO, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"camera\"</span>,    AID_CAMERA, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"log\"</span>,       AID_LOG, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"compass\"</span>,   AID_COMPASS, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"mount\"</span>,     AID_MOUNT, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"wifi\"</span>,      AID_WIFI, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"dhcp\"</span>,      AID_DHCP, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"adb\"</span>,       AID_ADB, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"install\"</span>,   AID_INSTALL, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"media\"</span>,     AID_MEDIA, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"nfc\"</span>,       AID_NFC, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"shell\"</span>,     AID_SHELL, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"cache\"</span>,     AID_CACHE, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"diag\"</span>,      AID_DIAG, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"net_bt_admin\"</span>, AID_NET_BT_ADMIN, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"net_bt\"</span>,    AID_NET_BT, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"qcom_oncrpc\"</span>, AID_QCOM_ONCRPC, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"sdcard_rw\"</span>, AID_SDCARD_RW, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"vpn\"</span>,       AID_VPN, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"keystore\"</span>,  AID_KEYSTORE, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"usb\"</span>,       AID_USB, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"gps\"</span>,       AID_GPS, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"inet\"</span>,      AID_INET, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"net_raw\"</span>,   AID_NET_RAW, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"net_admin\"</span>, AID_NET_ADMIN, &#125;,</span><br><span class=\"line\">#<span class=\"keyword\">if</span> defined(MOTOROLA_UIDS)</span><br><span class=\"line\">    &#123; <span class=\"string\">\"mot_accy\"</span>,  AID_MOT_ACCY, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"mot_pwric\"</span>, AID_MOT_PWRIC, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"mot_usb\"</span>,   AID_MOT_USB, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"mot_drm\"</span>,   AID_MOT_DRM, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"mot_tcmd\"</span>,  AID_MOT_TCMD, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"mot_sec_rtc\"</span>,  AID_MOT_SEC_RTC, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"mot_tombstone\"</span>, AID_MOT_TOMBSTONE, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"mot_tpapi\"</span>,  AID_MOT_TPAPI, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"mot_secclkd\"</span>,  AID_MOT_SECCLKD, &#125;,</span><br><span class=\"line\">#endif</span><br><span class=\"line\">    &#123; <span class=\"string\">\"misc\"</span>,      AID_MISC, &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">\"nobody\"</span>,    AID_NOBODY, &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> android_id_count \\</span><br><span class=\"line\">    (sizeof(android_ids) / sizeof(android_ids[0]))</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">struct</span> fs_path_config &#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> mode;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> uid;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> gid;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *prefix;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Rules for directories.</span><br><span class=\"line\">#  These rules are applied based on \"first match\", so they</span><br><span class=\"line\">#  should start with the most specific path and work their</span><br><span class=\"line\">#  way up to the root.</span><br><span class=\"line\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">struct</span> fs_path_config android_dirs[] = &#123;</span><br><span class=\"line\">    &#123; <span class=\"number\">00770</span>, AID_SYSTEM, AID_CACHE,  <span class=\"string\">\"cache\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00771</span>, AID_SYSTEM, AID_SYSTEM, <span class=\"string\">\"data/app\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00771</span>, AID_SYSTEM, AID_SYSTEM, <span class=\"string\">\"data/app-private\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00771</span>, AID_SYSTEM, AID_SYSTEM, <span class=\"string\">\"data/dalvik-cache\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00771</span>, AID_SYSTEM, AID_SYSTEM, <span class=\"string\">\"data/data\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00771</span>, AID_SHELL,  AID_SHELL,  <span class=\"string\">\"data/local/tmp\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00771</span>, AID_SHELL,  AID_SHELL,  <span class=\"string\">\"data/local\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">01771</span>, AID_SYSTEM, AID_MISC,   <span class=\"string\">\"data/misc\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00770</span>, AID_DHCP,   AID_DHCP,   <span class=\"string\">\"data/misc/dhcp\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00771</span>, AID_SYSTEM, AID_SYSTEM, <span class=\"string\">\"data\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00750</span>, AID_ROOT,   AID_SHELL,  <span class=\"string\">\"sbin\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00755</span>, AID_ROOT,   AID_SHELL,  <span class=\"string\">\"system/bin\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00755</span>, AID_ROOT,   AID_SHELL,  <span class=\"string\">\"system/vendor\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00755</span>, AID_ROOT,   AID_SHELL,  <span class=\"string\">\"system/xbin\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00755</span>, AID_ROOT,   AID_ROOT,   <span class=\"string\">\"system/etc/ppp\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00777</span>, AID_ROOT,   AID_ROOT,   <span class=\"string\">\"sdcard\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00771</span>, AID_SYSTEM, AID_SYSTEM, <span class=\"string\">\"sd-ext\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00755</span>, AID_ROOT,   AID_ROOT,   <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Rules for files.</span><br><span class=\"line\">#  These rules are applied based on \"first match\", so they</span><br><span class=\"line\">#  should start with the most specific path and work their</span><br><span class=\"line\">#  way up to the root. Prefixes ending in * denotes wildcard</span><br><span class=\"line\">#  and will allow partial matches.</span><br><span class=\"line\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">struct</span> fs_path_config android_files[] = &#123;</span><br><span class=\"line\">    &#123; <span class=\"number\">00440</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"system/etc/init.goldfish.rc\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00550</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"system/etc/init.goldfish.sh\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00440</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"system/etc/init.trout.rc\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00550</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"system/etc/init.ril\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00550</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"system/etc/init.testmenu\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00550</span>, AID_DHCP,      AID_SHELL,     <span class=\"string\">\"system/etc/dhcpcd/dhcpcd-run-hooks\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00440</span>, AID_BLUETOOTH, AID_BLUETOOTH, <span class=\"string\">\"system/etc/dbus.conf\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00440</span>, AID_BLUETOOTH, AID_BLUETOOTH, <span class=\"string\">\"system/etc/bluetooth/main.conf\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00440</span>, AID_BLUETOOTH, AID_BLUETOOTH, <span class=\"string\">\"system/etc/bluetooth/input.conf\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00440</span>, AID_BLUETOOTH, AID_BLUETOOTH, <span class=\"string\">\"system/etc/bluetooth/audio.conf\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00444</span>, AID_NET_BT,    AID_NET_BT,    <span class=\"string\">\"system/etc/bluetooth/blacklist.conf\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00640</span>, AID_SYSTEM,    AID_SYSTEM,    <span class=\"string\">\"system/etc/bluetooth/auto_pairing.conf\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00444</span>, AID_RADIO,     AID_AUDIO,     <span class=\"string\">\"system/etc/AudioPara4.csv\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00555</span>, AID_ROOT,      AID_ROOT,      <span class=\"string\">\"system/etc/ppp/*\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00555</span>, AID_ROOT,      AID_ROOT,      <span class=\"string\">\"system/etc/rc.*\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00644</span>, AID_SYSTEM,    AID_SYSTEM,    <span class=\"string\">\"data/app/*\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00644</span>, AID_SYSTEM,    AID_SYSTEM,    <span class=\"string\">\"data/app-private/*\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00644</span>, AID_APP,       AID_APP,       <span class=\"string\">\"data/data/*\"</span> &#125;,</span><br><span class=\"line\">\t<span class=\"comment\">/* the following three files are INTENTIONALLY set-gid and not set-uid.</span><br><span class=\"line\">\t * Do not change. */</span></span><br><span class=\"line\">    &#123; <span class=\"number\">02755</span>, AID_ROOT,      AID_NET_RAW,   <span class=\"string\">\"system/bin/ping\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">02750</span>, AID_ROOT,      AID_INET,      <span class=\"string\">\"system/bin/netcfg\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">02755</span>, AID_SYSTEM,    AID_GRAPHICS,  <span class=\"string\">\"system/bin/screenshot\"</span> &#125;,</span><br><span class=\"line\">\t<span class=\"comment\">/* the following five files are INTENTIONALLY set-uid, but they</span><br><span class=\"line\">\t * are NOT included on user builds. */</span></span><br><span class=\"line\">    &#123; <span class=\"number\">06755</span>, AID_ROOT,      AID_ROOT,      <span class=\"string\">\"system/xbin/su\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">06755</span>, AID_ROOT,      AID_ROOT,      <span class=\"string\">\"system/xbin/librank\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">06755</span>, AID_ROOT,      AID_ROOT,      <span class=\"string\">\"system/xbin/procrank\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">06755</span>, AID_ROOT,      AID_ROOT,      <span class=\"string\">\"system/xbin/procmem\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">06755</span>, AID_ROOT,      AID_ROOT,      <span class=\"string\">\"system/xbin/tcpdump\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">04770</span>, AID_ROOT,      AID_RADIO,     <span class=\"string\">\"system/bin/pppd-ril\"</span> &#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">/* the following file is INTENTIONALLY set-uid, and IS included</span><br><span class=\"line\">\t\t * in user builds. */</span></span><br><span class=\"line\">    &#123; <span class=\"number\">06750</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"system/bin/run-as\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">06755</span>, AID_ROOT,      AID_ROOT,      <span class=\"string\">\"system/xbin/hcitool\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00755</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"system/bin/*\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00755</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"system/xbin/*\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00755</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"system/vendor/bin/*\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00750</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"sbin/*\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00755</span>, AID_ROOT,      AID_ROOT,      <span class=\"string\">\"bin/*\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00750</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"init*\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00750</span>, AID_ROOT,      AID_SHELL,     <span class=\"string\">\"system/etc/init.d/*\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">00644</span>, AID_ROOT,      AID_ROOT,       <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">fs_config</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *path, <span class=\"keyword\">int</span> dir,</span><br><span class=\"line\">\t\t\t     <span class=\"keyword\">unsigned</span> *uid, <span class=\"keyword\">unsigned</span> *gid, <span class=\"keyword\">unsigned</span> *mode)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> fs_path_config *pc;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> plen;</span><br><span class=\"line\">    </span><br><span class=\"line\">    pc = dir ? android_dirs : android_files;</span><br><span class=\"line\">    plen = <span class=\"built_in\">strlen</span>(path);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; pc-&gt;prefix; pc++)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(pc-&gt;prefix);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (dir) &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(plen &amp;lt; len) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(!<span class=\"built_in\">strncmp</span>(pc-&gt;prefix, path, len)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/* If name ends in * then allow partial matches. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pc-&gt;prefix[len <span class=\"number\">-1</span>] == <span class=\"string\">'*'</span>) &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(!<span class=\"built_in\">strncmp</span>(pc-&gt;prefix, path, len - <span class=\"number\">1</span>)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (plen == len)&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(!strncmp(pc-&gt;prefix, path, len)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *uid = pc-&gt;uid;</span><br><span class=\"line\">    *gid = pc-&gt;gid;</span><br><span class=\"line\">    *mode = (*mode &amp; (~<span class=\"number\">07777</span>)) | pc-&gt;mode;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> 0</span></span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"&amp;lt; '%s' '%s' %d %d %o &gt;\\n\"</span>, </span><br><span class=\"line\">\t    path, pc-&gt;prefix ? pc-&gt;prefix : <span class=\"string\">\"\"</span>, *uid, *gid, *mode);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<pre><code>Android提供了dumpsys工具来dump出所有的服务信息，通过以下命令可以查看系统注册的所有服务：adb shell dumpsys  \ndumpsys 用来给出手机中所有应用程序的信息，并且也会给出现在手机的状态。\n因为内容太多把dumpsys的内容存储到C盘文件中方便查看.如下\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\comtu&gt;adb shell</span><br><span class=\"line\">shell@android:/ $ su</span><br><span class=\"line\">shell@android:/ # cd data</span><br><span class=\"line\">shell@android:/data # mkdir test</span><br><span class=\"line\">shell@android:/data # cd test</span><br><span class=\"line\">shell@android:/data/test # dumpsys &gt; dumpsys.txt</span><br><span class=\"line\">shell@android:/data/test # ls -l</span><br><span class=\"line\">ls -l</span><br><span class=\"line\">-rw-rw-rw- root     root      1706976 2015-07-03 08:57 dumpsys.txt</span><br><span class=\"line\">shell@android:/data/test # exit</span><br><span class=\"line\">exit</span><br><span class=\"line\">shell@android:/ $ exit</span><br><span class=\"line\">exit</span><br><span class=\"line\">C:\\Users\\comtu&gt;adb pull /data/test/dumpsys.txt c:/</span><br><span class=\"line\">5649 KB/s (1706976 bytes in 0.295s)</span><br></pre></td></tr></table></figure>\n<pre><code>其中dumpsys.txt文件一段关于QQ配置的片段可查找到如下内容:\n        userId=10081 gids=[3003, 1028, 1015] &lt;---gids可在android_filesystem_config.h查找到对应的映射关系\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Package [com.tencent.mobileqq] (426f1258):</span><br><span class=\"line\">  userId=10081 gids=[3003, 1028, 1015]</span><br><span class=\"line\">  pkg=Package&#123;42b7e890 com.tencent.mobileqq&#125;</span><br><span class=\"line\">  codePath=/data/app/partner-QQ.apk</span><br><span class=\"line\">  resourcePath=/data/app/partner-QQ.apk</span><br><span class=\"line\">  nativeLibraryPath=/data/app-lib/partner-QQ</span><br><span class=\"line\">  versionCode=122 targetSdk=7</span><br><span class=\"line\">  versionName=4.7.0</span><br><span class=\"line\">  applicationInfo=ApplicationInfo&#123;42b136f8 com.tencent.mobileqq&#125;</span><br><span class=\"line\">  flags=[ HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]</span><br><span class=\"line\">  dataDir=/data/data/com.tencent.mobileqq</span><br><span class=\"line\">  supportsScreens=[small, medium, large, resizeable, anyDensity]</span><br><span class=\"line\">  usesOptionalLibraries:</span><br><span class=\"line\">    com.google.android.media.effects</span><br><span class=\"line\">    com.motorola.hardware.frontcamera</span><br><span class=\"line\">  timeStamp=2015-05-05 17:36:43</span><br><span class=\"line\">  firstInstallTime=2015-05-05 17:36:43</span><br><span class=\"line\">  lastUpdateTime=2015-05-05 17:36:43</span><br><span class=\"line\">  signatures=PackageSignatures&#123;426f1320 [426f1ed0]&#125;</span><br><span class=\"line\">  permissionsFixed=true haveGids=true installStatus=1</span><br><span class=\"line\">  pkgFlags=[ HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]</span><br><span class=\"line\">  User 0:  installed=true blocked=false stopped=true notLaunched=false enabled=0</span><br><span class=\"line\">  grantedPermissions:</span><br><span class=\"line\">    android.permission.READ_EXTERNAL_STORAGE</span><br><span class=\"line\">    android.permission.CHANGE_WIFI_MULTICAST_STATE</span><br><span class=\"line\">    com.tencent.photos.permission.DATA</span><br><span class=\"line\">    android.permission.GET_TASKS</span><br><span class=\"line\">    android.permission.WRITE_EXTERNAL_STORAGE</span><br><span class=\"line\">    android.permission.WRITE_CALL_LOG</span><br><span class=\"line\">    com.tencent.msg.permission.pushnotify</span><br><span class=\"line\">    android.permission.ACCESS_WIFI_STATE</span><br><span class=\"line\">    android.permission.ACCESS_COARSE_LOCATION</span><br><span class=\"line\">    android.permission.READ_CONTACTS</span><br><span class=\"line\">    android.permission.CALL_PHONE</span><br><span class=\"line\">    android.permission.WRITE_CONTACTS</span><br><span class=\"line\">    com.tencent.permission.VIRUS_SCAN</span><br><span class=\"line\">    android.permission.READ_PHONE_STATE</span><br><span class=\"line\">    android.permission.READ_CALENDAR</span><br><span class=\"line\">    android.permission.READ_SMS</span><br><span class=\"line\">    android.permission.CAMERA</span><br><span class=\"line\">    android.permission.ACCESS_FINE_LOCATION</span><br><span class=\"line\">    android.permission.BROADCAST_STICKY</span><br><span class=\"line\">    android.permission.PERSISTENT_ACTIVITY</span><br><span class=\"line\">    android.permission.FLASHLIGHT</span><br><span class=\"line\">    android.permission.RECORD_AUDIO</span><br><span class=\"line\">    android.permission.WAKE_LOCK</span><br><span class=\"line\">    android.permission.ACCESS_NETWORK_STATE</span><br><span class=\"line\">    com.tencent.msf.permission.ACCOUNT_NOTICE</span><br><span class=\"line\">    com.android.launcher.permission.INSTALL_SHORTCUT</span><br><span class=\"line\">    com.tencent.msf.permission.account.sync</span><br><span class=\"line\">    android.permission.SEND_SMS</span><br><span class=\"line\">    com.android.launcher.permission.UNINSTALL_SHORTCUT</span><br><span class=\"line\">    android.permission.KILL_BACKGROUND_PROCESSES</span><br><span class=\"line\">    android.permission.MODIFY_AUDIO_SETTINGS</span><br><span class=\"line\">    android.permission.DISABLE_KEYGUARD</span><br><span class=\"line\">    android.permission.WRITE_CALENDAR</span><br><span class=\"line\">    com.qq.qcloud.permission.ACCESS_ALBUM_BACKUP_LIST</span><br><span class=\"line\">    android.permission.SYSTEM_ALERT_WINDOW</span><br><span class=\"line\">    android.permission.WRITE_SETTINGS</span><br><span class=\"line\">    android.permission.INTERNET</span><br><span class=\"line\">    android.permission.CHANGE_WIFI_STATE</span><br><span class=\"line\">    android.permission.VIBRATE</span><br><span class=\"line\">    android.permission.READ_CALL_LOG</span><br><span class=\"line\">    com.android.launcher.permission.READ_SETTINGS</span><br><span class=\"line\">    android.permission.CHANGE_NETWORK_STATE</span><br></pre></td></tr></table></figure>\n<h2 id=\"Chmod和chown命令介绍\"><a href=\"#Chmod和chown命令介绍\" class=\"headerlink\" title=\"Chmod和chown命令介绍\"></a>Chmod和chown命令介绍</h2><h3 id=\"Chmod\"><a href=\"#Chmod\" class=\"headerlink\" title=\"Chmod\"></a>Chmod</h3><pre><code>1.文件R/W/X的系统内部采用3Bit表示,R为最高位比特,置位为0x04,\n    W为中间比特,置位为0x02,X为最低比特,置位为0x01\n\n    4(读R) , 2(写W) , 1(执行X)\n    7=4+2+1 所有权限\n    6=4+2   读写\n    5=4+1   读执行\n    4       读\n    3=3+1   写执行\n    2\n    1\n    664表示给予UID,GID读写权限,给予其它只读权限\n\n2.Shell中表示时,置位使用相应R/W/X表示,未置位使用-\n3.操作文件面向群体的操作权限时,使用Chmod,可以直接使用数字,\n    也可使用助记符( a:all , u:owner user , g:group , +:add one premission , -:remove one permission)\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">-rw-rw-r-- system   system         12 2015-07-02 18:02 test.txt</span><br><span class=\"line\">shell@android:/data/test # chmod 777 test.txt</span><br><span class=\"line\">chmod 777 test.txt</span><br><span class=\"line\">shell@android:/data/test # ls -l</span><br><span class=\"line\">ls -l</span><br><span class=\"line\">-rwxrwxrwx system   system         12 2015-07-02 18:02 test.txt</span><br><span class=\"line\">shell@android:/data/test #</span><br><span class=\"line\">shell@android:/data/test # chmod 664 test.txt</span><br><span class=\"line\">chmod 664 test.txt</span><br><span class=\"line\">shell@android:/data/test # ls -l</span><br><span class=\"line\">ls -l</span><br><span class=\"line\">-rw-rw-r-- system   system         12 2015-07-02 18:02 test.txt</span><br><span class=\"line\">shell@android:/data/test #</span><br></pre></td></tr></table></figure>\n<h3 id=\"Chown\"><a href=\"#Chown\" class=\"headerlink\" title=\"Chown\"></a>Chown</h3><pre><code>通过chown改变文件的拥有者和群组。在更改文件的所有者UID或所属群组GID时，可以使用用户名称和用户识别码设置。\n    Shell命令中通常采用Name方式修改,而不是ID方式.普通用户不能将自己的文件改变成其他的拥有者。其操作权限一般为管理员。\n一般格式: chown newUID:newGID FileName\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell@android:/data # mkdir test</span><br><span class=\"line\">mkdir test</span><br><span class=\"line\">shell@android:/data # cd test</span><br><span class=\"line\">cd test</span><br><span class=\"line\">shell@android:/data/test # echo &quot;hello world&quot; &gt; test.txt</span><br><span class=\"line\">echo &quot;hello world&quot; &gt; test.txt</span><br><span class=\"line\">shell@android:/data/test # ls</span><br><span class=\"line\">ls</span><br><span class=\"line\">test.txt</span><br><span class=\"line\">shell@android:/data/test # ls -l</span><br><span class=\"line\">ls -l</span><br><span class=\"line\">-rw-rw-rw- root     root           12 2015-07-02 18:02 test.txt</span><br><span class=\"line\">shell@android:/data/test # chown system:system test.txt</span><br><span class=\"line\">chown system:system test.txt</span><br><span class=\"line\">shell@android:/data/test # ls -l</span><br><span class=\"line\">ls -l</span><br><span class=\"line\">-rw-rw-rw- system   system         12 2015-07-02 18:02 test.txt</span><br><span class=\"line\">shell@android:/data/test #</span><br></pre></td></tr></table></figure>\n<h1 id=\"UID-GID的衔接\"><a href=\"#UID-GID的衔接\" class=\"headerlink\" title=\"UID/GID的衔接\"></a>UID/GID的衔接</h1><pre><code>1.Linux一切皆是文件\n2.文件基于UID/GID来划分它的面向群体,对它的面向群体定义不同的操作权限\n3.用户的行为映射为进程的运行\n4.进程的运行使用进程的UID/GID来标识自己的身份\n5.进程的UID/GID&lt;=====&gt;文件的UID/GID 完美衔接~~\n6.进程的UID/GID除了被授予可操作文件的范畴外,非文件范畴的需要进行权限控制的操作\n    (如重启系统等特权操作)继续通过进程的UID/GID身份来进行控制和授权.\n7.比如,对于Reboot这个API,其入口处可以check calling的Process的UID,如果不是Root,则Reject\n</code></pre><h1 id=\"进程的RealUID和EffectiveUID\"><a href=\"#进程的RealUID和EffectiveUID\" class=\"headerlink\" title=\"进程的RealUID和EffectiveUID\"></a>进程的RealUID和EffectiveUID</h1><pre><code>linux下real uid被用于描述用户是谁，文件的拥有者，effective uid指程序执行时的用户组别，\n用于判断程序是否有权去进行一些操作（例如读写文件），因此real uid是针对用户和文件(拥有者)而言，\n而effective是针对运行的程序而言。一般来讲一个用户执行一个程序，\n程序的effective uid会被设置为用户的real uid，这个effective uid与该程序的real uid(文件所有者)无关，只与执行者有关。\n\nReal UID 是身份的标识 , 但没有&quot;实权&quot;\n\nEffective UID 是权利的标识 \n    文件,资源以及特权API操作时对进程是否有权限的识别的UID,即是指Effectivie UID\n\n身份与权利的关系\n    一般情况下,身份和权利是一至的,即Real UID = Effective UID.\n    所以,默认ps cmd输出的UID指的是Effective UID , 而没有输出Real UID\n\nRoot用户的特权\n    ROOT可以调用SetXUID对自己的身份进行升降.\n\nUID的世袭\n    子进程的Real UID = Effective UID = 父进程的Real UID (子嗣不能继承其特权Effective UID而仅能继承其Real UID)\n</code></pre><h1 id=\"文件的setUID标识\"><a href=\"#文件的setUID标识\" class=\"headerlink\" title=\"文件的setUID标识\"></a>文件的setUID标识</h1><pre><code>setUID可以让普通用户暂时获得文件权限的读写.\n\n和基本的RWX设置类似,有助记符和直接数字设置.直接数字设置时,采用4位数字,第一位标志setUID\n如下:\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell@android:/data/test $ ls -l</span><br><span class=\"line\">ls -l</span><br><span class=\"line\">-rw-rw-rw- shell    shell           7 2015-07-03 09:22 comtu.txt</span><br><span class=\"line\">-rw-rw-rw- root     root      1706976 2015-07-03 08:57 dumpsys.txt</span><br><span class=\"line\">-rw-rw-r-- system   system         12 2015-07-02 18:02 test.txt</span><br><span class=\"line\">shell@android:/data/test $ chmod 4775 comtu.txt</span><br><span class=\"line\">chmod 4775 comtu.txt</span><br><span class=\"line\">shell@android:/data/test $ ls -l</span><br><span class=\"line\">ls -l</span><br><span class=\"line\">-rwsrwxr-x shell    shell           7 2015-07-03 09:22 comtu.txt</span><br><span class=\"line\">-rw-rw-rw- root     root      1706976 2015-07-03 08:57 dumpsys.txt</span><br><span class=\"line\">-rw-rw-r-- system   system         12 2015-07-02 18:02 test.txt</span><br><span class=\"line\">shell@android:/data/test $ chmod 0775 comtu.txt</span><br><span class=\"line\">chmod 0775 comtu.txt</span><br><span class=\"line\">shell@android:/data/test $ ls -l</span><br><span class=\"line\">ls -l</span><br><span class=\"line\">-rwxrwxr-x shell    shell           7 2015-07-03 09:22 comtu.txt</span><br><span class=\"line\">-rw-rw-rw- root     root      1706976 2015-07-03 08:57 dumpsys.txt</span><br><span class=\"line\">-rw-rw-r-- system   system         12 2015-07-02 18:02 test.txt</span><br><span class=\"line\">shell@android:/data/test $ chmod u+s comtu.txt</span><br><span class=\"line\">chmod u+s comtu.txt</span><br><span class=\"line\">Bad mode</span><br><span class=\"line\">10|shell@android:/data/test $</span><br></pre></td></tr></table></figure>\n<pre><code>说明\n    chmod 4775 comtu.txt\n\n    4775 第一位4表示开启setUID, 第二位7表示UID获取读写执行权限,\n        第三位7表示Gid获取读写执行权限,最后5表示其它用户只有读与执行权限\n\n    chmod 0775 comtu.txt\n    0775 第一位0表示关闭setUID\n\n    chmod u+s comtu.txt\n    使用助记符,因为我使用的是Android的adb shell 是简化般linux对助记符不支持,如果使用ubuntu等则可进行操作.\n</code></pre><h1 id=\"Capability\"><a href=\"#Capability\" class=\"headerlink\" title=\"Capability\"></a>Capability</h1><pre><code>Capability细粒度的权限控制\n\n进程的Capability\n    permitted Capability Sets \n        当前进程的权利的围栏,最大权利的范围,是Effective Capability Sets的超集\n    Effectivte Capability Sets \n        当前进程的实际使用(支配)的权利集,该集内的Capability必须从属于Permitted Capability Sets . \n        该集合与Effective UID类似,是实际的权利标识.\n    Inheritable Capability Sets\n        子进程唯一可以直接继承的Capability Sets. 在Capability模式下,\n        只有子进程的Inheritable Capability Sets = 父进程的Inheritable Capability Sets . 其他的皆是NO\n文件的Capability\n    Permitted Capability Sets\n        该可执行文件可以为进程带来的Permitted Capability Sets\n    Effective Capability Set\n        仅1bit,Enable or disable , 标识该可执行文件running所在的进程的\n        Permitted Capability Sets是否自动全部Assign到其Effective Capability Sets. \n        通常用于与传统的Root-setUID可执行文件向下兼容.\n    Inheritable Capability Sets\n        与进程的Inheritable Capability Sets 一起作用(位与)以决定新的进程的Permitted capability Sets\n\nCapability BoundSet\n    Capability BoundSet是进程的属性\n    是进程自己为自己设定的安全围栏(Capability Sets) , \n        限制可执行文件的Permitted Capability Sets仅有局部能转化的Permitted Capability Sets\n    Capability BoundSet能被子进程继承\n    Init进程默认Capability BoundSet为全1\n\nSpawn进程的Capability\n    P&apos;子进程  P父进程  F子进程运行起来的执行文件\n\n    P&apos;(permitted) = (P(inheritable)&amp;F(inheritable))|(F(permitted)&amp;cap_bset)\n    P&apos;(effective) = F(effective)?P&apos;(permitted):0\n    P&apos;(inheritable) = P(inheritable)\n</code></pre>"},{"layout":"post","title":"Android安全模式机制之一(现代安全体系基础概念)","date":"2014-10-24T16:00:00.000Z","_content":"\n<style>\nh3 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nh6 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\n</style>\n\n目录:\n\n*  1.典型的加密模型\n*  2.对称秘钥算法 (加密解密密钥相同)\n*  3.非对称密钥算法(公钥密码)(加密与解密密钥不同.)\n*  4.密钥交换\n*  5.消息摘要\n*  6.电子签名\n*  7.证书与PKI\n\n---\n\n# 1.典型的加密模型 \n\n\t密钥:分为加密密钥和解密密钥\n\t明文:没有进行加密,能够直接代表原文含义的信息.\n\t密文:经这加密处理之后,隐藏原温含义的信息\n\t解密:将密文转换成明文的实施过程.\n\n\t明文P-->加密方法E --> 密文 --> 解密方法D --> 明文P\n\t        加密密钥K  密文P=Ek(p)  解密密钥K'\n\t\n\t\tDk'(Ek(P))=P    k=k'则为对称加密\n\n<!-- more -->\n\t\n# 2.对称秘钥算法 (加密解密密钥相同)\n\n\t优缺点:\n\t\t优点: 高效\n\t\t缺点: 密钥交换的问题\n\t\t      不如RSA的加密安全程度高,但是当选择256bit的AES,扔然能胜任大多数的安全领域.\n \n\t置换加密如:\n\n\t\tabcdefghijklmnopqrstuvwxyz\n\t\tistjkqrzlyefuvmnopgwxhabcd\n\n\t\thello --> zkffm\n\n\t\tthe key is the mapping list: istjkqrzlyefuvmnopgwxhabcd\n\n\t转置加密如:\n\n\t\ti am a boy you are a girl\n\n\t\t143526\n\n\t\tiamabo\n\t\tyyouar\n\t\teagirl\n\n\t\t---->\n\t\tiye\n\t\tbar\n\t\tmog\n\t\taya\n\t\taui\n\t\torl\n\n\t\tthe key is the column order: 143526\n\n\t乘积密码如:(重复迭代,置换加密与转置加密.)\n\t\tiamabo\n\t\tyyouar\n\t\teagirl\n\t\t---->\n\t\tliuism\n\t\tccmxip\n\t\tkirlpf\n\t\t---->\n\t\tlck\n\t\tsip\n\t\tumr\n\t\tici\n\t\tixl\n\t\tmpf\n\n\t\tthe key is istjkqrzlyefuvmnopgwxhabcd 143526\n\n\tDES 数据加密标准(data encryption standard)\n\n\tAES 高级加密标准(Advanced Encryption Standard)\n\n# 3.非对称密钥算法(公钥密码)(加密与解密密钥不同.)\n\n\t明文P-->加密方法E --> 密文 --> 解密方法D --> 明文P\n\t        加密密钥K  密文P=Ek(p)  解密密钥K'\n\t\n\t\tDk'(Ek(P))=P    k!=k'则为非对称加密 (K公钥,K'私钥)(publicKey 公钥,privateKey 私钥)\n\n\t公钥算法的理论基石\n\t\t数学的科学之基\n\t\t基础学科研究之物, 虚虚实实,先虚后实\n\t\t公开密钥算法的最重要两大数学基础\n\t\t/建立在分解大数的困难度{如: RSA算法(公钥/私钥长度,至少1024bit)}\n\t\t/建立在以大素数为模来计算离散对数的困难度.\n\t\n\t优缺点:\n\t\t优点:安全性足够高(相比对称加密)\n\t\t     没有密钥交换的问题\n\t\t缺点:效率低,对于大数据加密很慢\n\n# 4.密钥交换\n\n\t实际的保密会话应用场景\n\t\t1.基于高效的对称加密算法对会话进行加密\n\t\t2.会话密钥实时产生且周期性变化\n\t\t3.基于其它足够安全的方式进行会话密钥的传输与交换.\n\n\t利用公钥密码来交换会话密钥.\n\t\t1.实时随机的会话密钥产生\n\t\t2.使用对端的公钥对产生的会话密钥加密并传递给对端\n\t\t3.对端使用私钥解密获取会话密钥\n\t\t4.双方开始基于共享的会话密钥进行对称加密的保密会话通信.\n\t\n\tDiffie-Hellman密钥交换协议\n\t\t1.基于对大素数为模计算离散对数的困难度\n\t\t2.双方各自选定key,然后以一定算法变换(使得key不以明文传输)后传输给对方\n\t\t3.双方利用对方交换来的数据和自己选定的key做变换,获得一个一致的结果,作为会话密钥.\n\n# 5.消息摘要\n\t\n\tHASH与散列函数的定义与特点\n\t\tHASH翻译成散列或者哈希\n\t\tHASH(散列)函数(算法)的定义是:变长的输入变换成定长的输出\n\t\t常见的HASH算法:MD5(128bit),SHA1(160bit)\n\t\tHASH的特点:\n\t\t\t1.易变性:即便原始信息发生1bit的变化,HASH的输出将会有不可预知的巨大变化.\n\t\t\t2.不可逆:通过HASH的结果构造出满足的输入信息是不可能的或者及其困难的.\n\t\t\t与人的指纹相对应\n\t\t\t\t1.双胞胎的指纹不同\n\t\t\t\t2.通过指纹猜不出它的主人\n\t\t\t数字指纹由此而来\n\t\t\t消息摘要: 摘要窥/定全体\n\t\t\tHASH , 哈希 , 散列 , MD , 消息摘要 , 数字指纹 都是一个意思.\n\n\tHASH的应用场景:防篡改. 防损坏 . 认证\n\t\n\tHMAC : Hash-based Mesage Authentication Code (消息认证码)\n\t\t我们遇到了什么问题\n\t\t\t1.直接尾部附带消息摘要的问题(篡改内容的同时篡改摘要)\n\t\t\t2.直接对密码做HASH传输的认证的问题(重放攻击)\n\t\tHMAC怎么解决的\n\t\t\tHMAC就是使用key对原始消息变换后再进行HASH.\n\n# 6.电子签名\n\t\n\t公钥密码术的两面性(非对称密钥算法的两面性)\n\t\t1.应用于保密通信场景\n\t\t\tDprivateKey(EpublicKey(P)) = P  (说明:使用公钥加密P,使用私钥解密出P)\n\n\t\t2.应用于电子签名场景\n\t\t\tDpublicKey(EprivateKey(P)) = P  (说明:使用私钥加密P,使用公钥解密出P  ---- 电子签名)\n\t\t\t并非所有公钥密码术都支持,RSA支持\n\n\tHASH+公钥密码术:成就电子签名\n\t\t1.RSA的低效率特性,导致即便是签名也不适合直接对原始信息进行签名 \n\t\t2.利用HASH先完成消息摘要和完整性鉴别的作用. \n\t\t3.而后对简单的消息摘要进行基于公钥密码术的签名 \n\t\t4.签名一般附着于原始消息尾部或者头部一起发送 \n\n\t\t\t\t\t原始消息P\n\t\t\t\t\tMD = HASH(P)\n\t\t原始消息P + Signature = EprivateKey(MD) ---> Target\n\n\t\t假如原数据P有1G,加密效率低,把原数据1G的数据P获取HASH值,\n\t\t用私钥加密1G数据P的HASH值得到签名signature,发送数据的时候把1G数据P+签名signature\n\n# 7.证书与PKI\n\n\t证书的作用: 公钥的存储和交换\n\t\t公钥作为一个字段存储于数字证书中\n\t\t证书的交换和传输即可传输/交换公钥\n\t\t利用签名来保护数字证书本身\n\n\t\t数字时代的信任关系: 一个受信任者的证书列表\n\t\n\t证书链和PKI\n\t\t数字时代的信任链: 证书链\n\t\t证书签名的不同点: 根证书自签名, 非根证书父签名\n\t\t证书的限制:\n\t\t\t约束\n\t\t\t用途\n\t\t\t有效期\n\t\tPKI 公钥基础设施（Public Key Infrastructure）\t\t\n\n\t基于证书的认证\n\t\t基于可信任证书的认证方式被广泛的应用在现代安娜依斯领域,比如WIFI,HTTPS\n\t\t在HTTPS中,典型的Client对Server的认证和鉴别基于可信任列表\n\n\t\n\n\n\n","source":"_posts/2014-10-25-android_safe_mode_mechanism_one.md","raw":"---\nlayout : post\ntitle : \"Android安全模式机制之一(现代安全体系基础概念)\"\ncategory : Android\ndate : 2014-10-25\ntags : [Android安全模式机制 , 对称加密,非对称加密,密钥交换,消息摘要,电子签名,证书与PKI]\n---\n\n<style>\nh3 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nh6 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\n</style>\n\n目录:\n\n*  1.典型的加密模型\n*  2.对称秘钥算法 (加密解密密钥相同)\n*  3.非对称密钥算法(公钥密码)(加密与解密密钥不同.)\n*  4.密钥交换\n*  5.消息摘要\n*  6.电子签名\n*  7.证书与PKI\n\n---\n\n# 1.典型的加密模型 \n\n\t密钥:分为加密密钥和解密密钥\n\t明文:没有进行加密,能够直接代表原文含义的信息.\n\t密文:经这加密处理之后,隐藏原温含义的信息\n\t解密:将密文转换成明文的实施过程.\n\n\t明文P-->加密方法E --> 密文 --> 解密方法D --> 明文P\n\t        加密密钥K  密文P=Ek(p)  解密密钥K'\n\t\n\t\tDk'(Ek(P))=P    k=k'则为对称加密\n\n<!-- more -->\n\t\n# 2.对称秘钥算法 (加密解密密钥相同)\n\n\t优缺点:\n\t\t优点: 高效\n\t\t缺点: 密钥交换的问题\n\t\t      不如RSA的加密安全程度高,但是当选择256bit的AES,扔然能胜任大多数的安全领域.\n \n\t置换加密如:\n\n\t\tabcdefghijklmnopqrstuvwxyz\n\t\tistjkqrzlyefuvmnopgwxhabcd\n\n\t\thello --> zkffm\n\n\t\tthe key is the mapping list: istjkqrzlyefuvmnopgwxhabcd\n\n\t转置加密如:\n\n\t\ti am a boy you are a girl\n\n\t\t143526\n\n\t\tiamabo\n\t\tyyouar\n\t\teagirl\n\n\t\t---->\n\t\tiye\n\t\tbar\n\t\tmog\n\t\taya\n\t\taui\n\t\torl\n\n\t\tthe key is the column order: 143526\n\n\t乘积密码如:(重复迭代,置换加密与转置加密.)\n\t\tiamabo\n\t\tyyouar\n\t\teagirl\n\t\t---->\n\t\tliuism\n\t\tccmxip\n\t\tkirlpf\n\t\t---->\n\t\tlck\n\t\tsip\n\t\tumr\n\t\tici\n\t\tixl\n\t\tmpf\n\n\t\tthe key is istjkqrzlyefuvmnopgwxhabcd 143526\n\n\tDES 数据加密标准(data encryption standard)\n\n\tAES 高级加密标准(Advanced Encryption Standard)\n\n# 3.非对称密钥算法(公钥密码)(加密与解密密钥不同.)\n\n\t明文P-->加密方法E --> 密文 --> 解密方法D --> 明文P\n\t        加密密钥K  密文P=Ek(p)  解密密钥K'\n\t\n\t\tDk'(Ek(P))=P    k!=k'则为非对称加密 (K公钥,K'私钥)(publicKey 公钥,privateKey 私钥)\n\n\t公钥算法的理论基石\n\t\t数学的科学之基\n\t\t基础学科研究之物, 虚虚实实,先虚后实\n\t\t公开密钥算法的最重要两大数学基础\n\t\t/建立在分解大数的困难度{如: RSA算法(公钥/私钥长度,至少1024bit)}\n\t\t/建立在以大素数为模来计算离散对数的困难度.\n\t\n\t优缺点:\n\t\t优点:安全性足够高(相比对称加密)\n\t\t     没有密钥交换的问题\n\t\t缺点:效率低,对于大数据加密很慢\n\n# 4.密钥交换\n\n\t实际的保密会话应用场景\n\t\t1.基于高效的对称加密算法对会话进行加密\n\t\t2.会话密钥实时产生且周期性变化\n\t\t3.基于其它足够安全的方式进行会话密钥的传输与交换.\n\n\t利用公钥密码来交换会话密钥.\n\t\t1.实时随机的会话密钥产生\n\t\t2.使用对端的公钥对产生的会话密钥加密并传递给对端\n\t\t3.对端使用私钥解密获取会话密钥\n\t\t4.双方开始基于共享的会话密钥进行对称加密的保密会话通信.\n\t\n\tDiffie-Hellman密钥交换协议\n\t\t1.基于对大素数为模计算离散对数的困难度\n\t\t2.双方各自选定key,然后以一定算法变换(使得key不以明文传输)后传输给对方\n\t\t3.双方利用对方交换来的数据和自己选定的key做变换,获得一个一致的结果,作为会话密钥.\n\n# 5.消息摘要\n\t\n\tHASH与散列函数的定义与特点\n\t\tHASH翻译成散列或者哈希\n\t\tHASH(散列)函数(算法)的定义是:变长的输入变换成定长的输出\n\t\t常见的HASH算法:MD5(128bit),SHA1(160bit)\n\t\tHASH的特点:\n\t\t\t1.易变性:即便原始信息发生1bit的变化,HASH的输出将会有不可预知的巨大变化.\n\t\t\t2.不可逆:通过HASH的结果构造出满足的输入信息是不可能的或者及其困难的.\n\t\t\t与人的指纹相对应\n\t\t\t\t1.双胞胎的指纹不同\n\t\t\t\t2.通过指纹猜不出它的主人\n\t\t\t数字指纹由此而来\n\t\t\t消息摘要: 摘要窥/定全体\n\t\t\tHASH , 哈希 , 散列 , MD , 消息摘要 , 数字指纹 都是一个意思.\n\n\tHASH的应用场景:防篡改. 防损坏 . 认证\n\t\n\tHMAC : Hash-based Mesage Authentication Code (消息认证码)\n\t\t我们遇到了什么问题\n\t\t\t1.直接尾部附带消息摘要的问题(篡改内容的同时篡改摘要)\n\t\t\t2.直接对密码做HASH传输的认证的问题(重放攻击)\n\t\tHMAC怎么解决的\n\t\t\tHMAC就是使用key对原始消息变换后再进行HASH.\n\n# 6.电子签名\n\t\n\t公钥密码术的两面性(非对称密钥算法的两面性)\n\t\t1.应用于保密通信场景\n\t\t\tDprivateKey(EpublicKey(P)) = P  (说明:使用公钥加密P,使用私钥解密出P)\n\n\t\t2.应用于电子签名场景\n\t\t\tDpublicKey(EprivateKey(P)) = P  (说明:使用私钥加密P,使用公钥解密出P  ---- 电子签名)\n\t\t\t并非所有公钥密码术都支持,RSA支持\n\n\tHASH+公钥密码术:成就电子签名\n\t\t1.RSA的低效率特性,导致即便是签名也不适合直接对原始信息进行签名 \n\t\t2.利用HASH先完成消息摘要和完整性鉴别的作用. \n\t\t3.而后对简单的消息摘要进行基于公钥密码术的签名 \n\t\t4.签名一般附着于原始消息尾部或者头部一起发送 \n\n\t\t\t\t\t原始消息P\n\t\t\t\t\tMD = HASH(P)\n\t\t原始消息P + Signature = EprivateKey(MD) ---> Target\n\n\t\t假如原数据P有1G,加密效率低,把原数据1G的数据P获取HASH值,\n\t\t用私钥加密1G数据P的HASH值得到签名signature,发送数据的时候把1G数据P+签名signature\n\n# 7.证书与PKI\n\n\t证书的作用: 公钥的存储和交换\n\t\t公钥作为一个字段存储于数字证书中\n\t\t证书的交换和传输即可传输/交换公钥\n\t\t利用签名来保护数字证书本身\n\n\t\t数字时代的信任关系: 一个受信任者的证书列表\n\t\n\t证书链和PKI\n\t\t数字时代的信任链: 证书链\n\t\t证书签名的不同点: 根证书自签名, 非根证书父签名\n\t\t证书的限制:\n\t\t\t约束\n\t\t\t用途\n\t\t\t有效期\n\t\tPKI 公钥基础设施（Public Key Infrastructure）\t\t\n\n\t基于证书的认证\n\t\t基于可信任证书的认证方式被广泛的应用在现代安娜依斯领域,比如WIFI,HTTPS\n\t\t在HTTPS中,典型的Client对Server的认证和鉴别基于可信任列表\n\n\t\n\n\n\n","slug":"android_safe_mode_mechanism_one","published":1,"updated":"2016-04-27T07:53:28.879Z","comments":1,"photos":[],"link":"","_id":"cinu3etxu000yxoj0czmzrwrt","content":"<style>\nh3 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nh6 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\n</style>\n\n<p>目录:</p>\n<ul>\n<li>1.典型的加密模型</li>\n<li>2.对称秘钥算法 (加密解密密钥相同)</li>\n<li>3.非对称密钥算法(公钥密码)(加密与解密密钥不同.)</li>\n<li>4.密钥交换</li>\n<li>5.消息摘要</li>\n<li>6.电子签名</li>\n<li>7.证书与PKI</li>\n</ul>\n<hr>\n<h1 id=\"1-典型的加密模型\"><a href=\"#1-典型的加密模型\" class=\"headerlink\" title=\"1.典型的加密模型\"></a>1.典型的加密模型</h1><pre><code>密钥:分为加密密钥和解密密钥\n明文:没有进行加密,能够直接代表原文含义的信息.\n密文:经这加密处理之后,隐藏原温含义的信息\n解密:将密文转换成明文的实施过程.\n\n明文P--&gt;加密方法E --&gt; 密文 --&gt; 解密方法D --&gt; 明文P\n        加密密钥K  密文P=Ek(p)  解密密钥K&apos;\n\n    Dk&apos;(Ek(P))=P    k=k&apos;则为对称加密\n</code></pre><a id=\"more\"></a>\n<h1 id=\"2-对称秘钥算法-加密解密密钥相同\"><a href=\"#2-对称秘钥算法-加密解密密钥相同\" class=\"headerlink\" title=\"2.对称秘钥算法 (加密解密密钥相同)\"></a>2.对称秘钥算法 (加密解密密钥相同)</h1><pre><code>优缺点:\n    优点: 高效\n    缺点: 密钥交换的问题\n          不如RSA的加密安全程度高,但是当选择256bit的AES,扔然能胜任大多数的安全领域.\n\n置换加密如:\n\n    abcdefghijklmnopqrstuvwxyz\n    istjkqrzlyefuvmnopgwxhabcd\n\n    hello --&gt; zkffm\n\n    the key is the mapping list: istjkqrzlyefuvmnopgwxhabcd\n\n转置加密如:\n\n    i am a boy you are a girl\n\n    143526\n\n    iamabo\n    yyouar\n    eagirl\n\n    ----&gt;\n    iye\n    bar\n    mog\n    aya\n    aui\n    orl\n\n    the key is the column order: 143526\n\n乘积密码如:(重复迭代,置换加密与转置加密.)\n    iamabo\n    yyouar\n    eagirl\n    ----&gt;\n    liuism\n    ccmxip\n    kirlpf\n    ----&gt;\n    lck\n    sip\n    umr\n    ici\n    ixl\n    mpf\n\n    the key is istjkqrzlyefuvmnopgwxhabcd 143526\n\nDES 数据加密标准(data encryption standard)\n\nAES 高级加密标准(Advanced Encryption Standard)\n</code></pre><h1 id=\"3-非对称密钥算法-公钥密码-加密与解密密钥不同\"><a href=\"#3-非对称密钥算法-公钥密码-加密与解密密钥不同\" class=\"headerlink\" title=\"3.非对称密钥算法(公钥密码)(加密与解密密钥不同.)\"></a>3.非对称密钥算法(公钥密码)(加密与解密密钥不同.)</h1><pre><code>明文P--&gt;加密方法E --&gt; 密文 --&gt; 解密方法D --&gt; 明文P\n        加密密钥K  密文P=Ek(p)  解密密钥K&apos;\n\n    Dk&apos;(Ek(P))=P    k!=k&apos;则为非对称加密 (K公钥,K&apos;私钥)(publicKey 公钥,privateKey 私钥)\n\n公钥算法的理论基石\n    数学的科学之基\n    基础学科研究之物, 虚虚实实,先虚后实\n    公开密钥算法的最重要两大数学基础\n    /建立在分解大数的困难度{如: RSA算法(公钥/私钥长度,至少1024bit)}\n    /建立在以大素数为模来计算离散对数的困难度.\n\n优缺点:\n    优点:安全性足够高(相比对称加密)\n         没有密钥交换的问题\n    缺点:效率低,对于大数据加密很慢\n</code></pre><h1 id=\"4-密钥交换\"><a href=\"#4-密钥交换\" class=\"headerlink\" title=\"4.密钥交换\"></a>4.密钥交换</h1><pre><code>实际的保密会话应用场景\n    1.基于高效的对称加密算法对会话进行加密\n    2.会话密钥实时产生且周期性变化\n    3.基于其它足够安全的方式进行会话密钥的传输与交换.\n\n利用公钥密码来交换会话密钥.\n    1.实时随机的会话密钥产生\n    2.使用对端的公钥对产生的会话密钥加密并传递给对端\n    3.对端使用私钥解密获取会话密钥\n    4.双方开始基于共享的会话密钥进行对称加密的保密会话通信.\n\nDiffie-Hellman密钥交换协议\n    1.基于对大素数为模计算离散对数的困难度\n    2.双方各自选定key,然后以一定算法变换(使得key不以明文传输)后传输给对方\n    3.双方利用对方交换来的数据和自己选定的key做变换,获得一个一致的结果,作为会话密钥.\n</code></pre><h1 id=\"5-消息摘要\"><a href=\"#5-消息摘要\" class=\"headerlink\" title=\"5.消息摘要\"></a>5.消息摘要</h1><pre><code>HASH与散列函数的定义与特点\n    HASH翻译成散列或者哈希\n    HASH(散列)函数(算法)的定义是:变长的输入变换成定长的输出\n    常见的HASH算法:MD5(128bit),SHA1(160bit)\n    HASH的特点:\n        1.易变性:即便原始信息发生1bit的变化,HASH的输出将会有不可预知的巨大变化.\n        2.不可逆:通过HASH的结果构造出满足的输入信息是不可能的或者及其困难的.\n        与人的指纹相对应\n            1.双胞胎的指纹不同\n            2.通过指纹猜不出它的主人\n        数字指纹由此而来\n        消息摘要: 摘要窥/定全体\n        HASH , 哈希 , 散列 , MD , 消息摘要 , 数字指纹 都是一个意思.\n\nHASH的应用场景:防篡改. 防损坏 . 认证\n\nHMAC : Hash-based Mesage Authentication Code (消息认证码)\n    我们遇到了什么问题\n        1.直接尾部附带消息摘要的问题(篡改内容的同时篡改摘要)\n        2.直接对密码做HASH传输的认证的问题(重放攻击)\n    HMAC怎么解决的\n        HMAC就是使用key对原始消息变换后再进行HASH.\n</code></pre><h1 id=\"6-电子签名\"><a href=\"#6-电子签名\" class=\"headerlink\" title=\"6.电子签名\"></a>6.电子签名</h1><pre><code>公钥密码术的两面性(非对称密钥算法的两面性)\n    1.应用于保密通信场景\n        DprivateKey(EpublicKey(P)) = P  (说明:使用公钥加密P,使用私钥解密出P)\n\n    2.应用于电子签名场景\n        DpublicKey(EprivateKey(P)) = P  (说明:使用私钥加密P,使用公钥解密出P  ---- 电子签名)\n        并非所有公钥密码术都支持,RSA支持\n\nHASH+公钥密码术:成就电子签名\n    1.RSA的低效率特性,导致即便是签名也不适合直接对原始信息进行签名 \n    2.利用HASH先完成消息摘要和完整性鉴别的作用. \n    3.而后对简单的消息摘要进行基于公钥密码术的签名 \n    4.签名一般附着于原始消息尾部或者头部一起发送 \n\n                原始消息P\n                MD = HASH(P)\n    原始消息P + Signature = EprivateKey(MD) ---&gt; Target\n\n    假如原数据P有1G,加密效率低,把原数据1G的数据P获取HASH值,\n    用私钥加密1G数据P的HASH值得到签名signature,发送数据的时候把1G数据P+签名signature\n</code></pre><h1 id=\"7-证书与PKI\"><a href=\"#7-证书与PKI\" class=\"headerlink\" title=\"7.证书与PKI\"></a>7.证书与PKI</h1><pre><code>证书的作用: 公钥的存储和交换\n    公钥作为一个字段存储于数字证书中\n    证书的交换和传输即可传输/交换公钥\n    利用签名来保护数字证书本身\n\n    数字时代的信任关系: 一个受信任者的证书列表\n\n证书链和PKI\n    数字时代的信任链: 证书链\n    证书签名的不同点: 根证书自签名, 非根证书父签名\n    证书的限制:\n        约束\n        用途\n        有效期\n    PKI 公钥基础设施（Public Key Infrastructure）        \n\n基于证书的认证\n    基于可信任证书的认证方式被广泛的应用在现代安娜依斯领域,比如WIFI,HTTPS\n    在HTTPS中,典型的Client对Server的认证和鉴别基于可信任列表\n</code></pre>","excerpt":"<style>\nh3 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nh6 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\n</style>\n\n<p>目录:</p>\n<ul>\n<li>1.典型的加密模型</li>\n<li>2.对称秘钥算法 (加密解密密钥相同)</li>\n<li>3.非对称密钥算法(公钥密码)(加密与解密密钥不同.)</li>\n<li>4.密钥交换</li>\n<li>5.消息摘要</li>\n<li>6.电子签名</li>\n<li>7.证书与PKI</li>\n</ul>\n<hr>\n<h1 id=\"1-典型的加密模型\"><a href=\"#1-典型的加密模型\" class=\"headerlink\" title=\"1.典型的加密模型\"></a>1.典型的加密模型</h1><pre><code>密钥:分为加密密钥和解密密钥\n明文:没有进行加密,能够直接代表原文含义的信息.\n密文:经这加密处理之后,隐藏原温含义的信息\n解密:将密文转换成明文的实施过程.\n\n明文P--&gt;加密方法E --&gt; 密文 --&gt; 解密方法D --&gt; 明文P\n        加密密钥K  密文P=Ek(p)  解密密钥K&apos;\n\n    Dk&apos;(Ek(P))=P    k=k&apos;则为对称加密\n</code></pre>","more":"<h1 id=\"2-对称秘钥算法-加密解密密钥相同\"><a href=\"#2-对称秘钥算法-加密解密密钥相同\" class=\"headerlink\" title=\"2.对称秘钥算法 (加密解密密钥相同)\"></a>2.对称秘钥算法 (加密解密密钥相同)</h1><pre><code>优缺点:\n    优点: 高效\n    缺点: 密钥交换的问题\n          不如RSA的加密安全程度高,但是当选择256bit的AES,扔然能胜任大多数的安全领域.\n\n置换加密如:\n\n    abcdefghijklmnopqrstuvwxyz\n    istjkqrzlyefuvmnopgwxhabcd\n\n    hello --&gt; zkffm\n\n    the key is the mapping list: istjkqrzlyefuvmnopgwxhabcd\n\n转置加密如:\n\n    i am a boy you are a girl\n\n    143526\n\n    iamabo\n    yyouar\n    eagirl\n\n    ----&gt;\n    iye\n    bar\n    mog\n    aya\n    aui\n    orl\n\n    the key is the column order: 143526\n\n乘积密码如:(重复迭代,置换加密与转置加密.)\n    iamabo\n    yyouar\n    eagirl\n    ----&gt;\n    liuism\n    ccmxip\n    kirlpf\n    ----&gt;\n    lck\n    sip\n    umr\n    ici\n    ixl\n    mpf\n\n    the key is istjkqrzlyefuvmnopgwxhabcd 143526\n\nDES 数据加密标准(data encryption standard)\n\nAES 高级加密标准(Advanced Encryption Standard)\n</code></pre><h1 id=\"3-非对称密钥算法-公钥密码-加密与解密密钥不同\"><a href=\"#3-非对称密钥算法-公钥密码-加密与解密密钥不同\" class=\"headerlink\" title=\"3.非对称密钥算法(公钥密码)(加密与解密密钥不同.)\"></a>3.非对称密钥算法(公钥密码)(加密与解密密钥不同.)</h1><pre><code>明文P--&gt;加密方法E --&gt; 密文 --&gt; 解密方法D --&gt; 明文P\n        加密密钥K  密文P=Ek(p)  解密密钥K&apos;\n\n    Dk&apos;(Ek(P))=P    k!=k&apos;则为非对称加密 (K公钥,K&apos;私钥)(publicKey 公钥,privateKey 私钥)\n\n公钥算法的理论基石\n    数学的科学之基\n    基础学科研究之物, 虚虚实实,先虚后实\n    公开密钥算法的最重要两大数学基础\n    /建立在分解大数的困难度{如: RSA算法(公钥/私钥长度,至少1024bit)}\n    /建立在以大素数为模来计算离散对数的困难度.\n\n优缺点:\n    优点:安全性足够高(相比对称加密)\n         没有密钥交换的问题\n    缺点:效率低,对于大数据加密很慢\n</code></pre><h1 id=\"4-密钥交换\"><a href=\"#4-密钥交换\" class=\"headerlink\" title=\"4.密钥交换\"></a>4.密钥交换</h1><pre><code>实际的保密会话应用场景\n    1.基于高效的对称加密算法对会话进行加密\n    2.会话密钥实时产生且周期性变化\n    3.基于其它足够安全的方式进行会话密钥的传输与交换.\n\n利用公钥密码来交换会话密钥.\n    1.实时随机的会话密钥产生\n    2.使用对端的公钥对产生的会话密钥加密并传递给对端\n    3.对端使用私钥解密获取会话密钥\n    4.双方开始基于共享的会话密钥进行对称加密的保密会话通信.\n\nDiffie-Hellman密钥交换协议\n    1.基于对大素数为模计算离散对数的困难度\n    2.双方各自选定key,然后以一定算法变换(使得key不以明文传输)后传输给对方\n    3.双方利用对方交换来的数据和自己选定的key做变换,获得一个一致的结果,作为会话密钥.\n</code></pre><h1 id=\"5-消息摘要\"><a href=\"#5-消息摘要\" class=\"headerlink\" title=\"5.消息摘要\"></a>5.消息摘要</h1><pre><code>HASH与散列函数的定义与特点\n    HASH翻译成散列或者哈希\n    HASH(散列)函数(算法)的定义是:变长的输入变换成定长的输出\n    常见的HASH算法:MD5(128bit),SHA1(160bit)\n    HASH的特点:\n        1.易变性:即便原始信息发生1bit的变化,HASH的输出将会有不可预知的巨大变化.\n        2.不可逆:通过HASH的结果构造出满足的输入信息是不可能的或者及其困难的.\n        与人的指纹相对应\n            1.双胞胎的指纹不同\n            2.通过指纹猜不出它的主人\n        数字指纹由此而来\n        消息摘要: 摘要窥/定全体\n        HASH , 哈希 , 散列 , MD , 消息摘要 , 数字指纹 都是一个意思.\n\nHASH的应用场景:防篡改. 防损坏 . 认证\n\nHMAC : Hash-based Mesage Authentication Code (消息认证码)\n    我们遇到了什么问题\n        1.直接尾部附带消息摘要的问题(篡改内容的同时篡改摘要)\n        2.直接对密码做HASH传输的认证的问题(重放攻击)\n    HMAC怎么解决的\n        HMAC就是使用key对原始消息变换后再进行HASH.\n</code></pre><h1 id=\"6-电子签名\"><a href=\"#6-电子签名\" class=\"headerlink\" title=\"6.电子签名\"></a>6.电子签名</h1><pre><code>公钥密码术的两面性(非对称密钥算法的两面性)\n    1.应用于保密通信场景\n        DprivateKey(EpublicKey(P)) = P  (说明:使用公钥加密P,使用私钥解密出P)\n\n    2.应用于电子签名场景\n        DpublicKey(EprivateKey(P)) = P  (说明:使用私钥加密P,使用公钥解密出P  ---- 电子签名)\n        并非所有公钥密码术都支持,RSA支持\n\nHASH+公钥密码术:成就电子签名\n    1.RSA的低效率特性,导致即便是签名也不适合直接对原始信息进行签名 \n    2.利用HASH先完成消息摘要和完整性鉴别的作用. \n    3.而后对简单的消息摘要进行基于公钥密码术的签名 \n    4.签名一般附着于原始消息尾部或者头部一起发送 \n\n                原始消息P\n                MD = HASH(P)\n    原始消息P + Signature = EprivateKey(MD) ---&gt; Target\n\n    假如原数据P有1G,加密效率低,把原数据1G的数据P获取HASH值,\n    用私钥加密1G数据P的HASH值得到签名signature,发送数据的时候把1G数据P+签名signature\n</code></pre><h1 id=\"7-证书与PKI\"><a href=\"#7-证书与PKI\" class=\"headerlink\" title=\"7.证书与PKI\"></a>7.证书与PKI</h1><pre><code>证书的作用: 公钥的存储和交换\n    公钥作为一个字段存储于数字证书中\n    证书的交换和传输即可传输/交换公钥\n    利用签名来保护数字证书本身\n\n    数字时代的信任关系: 一个受信任者的证书列表\n\n证书链和PKI\n    数字时代的信任链: 证书链\n    证书签名的不同点: 根证书自签名, 非根证书父签名\n    证书的限制:\n        约束\n        用途\n        有效期\n    PKI 公钥基础设施（Public Key Infrastructure）        \n\n基于证书的认证\n    基于可信任证书的认证方式被广泛的应用在现代安娜依斯领域,比如WIFI,HTTPS\n    在HTTPS中,典型的Client对Server的认证和鉴别基于可信任列表\n</code></pre>"},{"title":"Android安全模式机制之三(实际运用)","date":"2014-10-26T16:00:00.000Z","_content":"\n<style>\nh3 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nh6 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\n\n</style>\n\n目录:\n\t\n* 1.移动平台中的主流签名作用\n\t* 1.1自签名的完整性鉴别\n\t* 1.2信任模式\n\t* 1.3限制安装/运行\n\t* 1.4权限的作用\n\t* 1.5权限的安全性保护\n\t* 1.6Android的签名作用\n\t* 1.7Android APK之METAINF\n\n* 2.Android中的权限\n\t* 2.1Android的权限作用\n\t* 2.2Android的权限类别\n\t* 2.3Android的权限定义方式\n\t* 2.4Android的运行时权限控制方式\n\t* 2.5Android的Permission与UID/GID的mapping\n\n* 3.Android中的组件的安全机制\n\t* 3.1组件的权限分配(Demo)\n\t\t* 3.1.1 Activity\n\t\t* 3.1.2 Service\n\t\t* 3.1.3 ContentProvide\n\t\t* 3.1.4 BroadcastReceiver\n\n* 4.Android应用安装\n\t* 4.1应用安装的安全性考虑和调用方式\n\t* 4.2应用安装流程之UID/GID的分配\n\t* 4.3应用安装流程之工作目录的创建和权限设置\n\t\n* 5.Android中系统Service的安全\n\t* 5.1Binder的安全\n\t* 5.2ServiceManager Add Service的安全限制\n\t* 5.3Zygote的Process Fork\n\t* 5.4Zygote的Socket安全检查\t\n\n* 6.Android中的ContentProvider以及基于URI的安全\n\t* 6.1ContentProvider的作用\n\t* 6.2权限临时继承的需求\n\t* 6.3配置ContentProvider允许临时委派权限\n\t* 6.4基于URI的权限临时委派\n\n* 7.Android的Policy模式和多设备绑定\n\t* 7.1Android的Policy模式\n\t* 7.2MR2开始的AppOps(安卓4.3开始)\n\t* 7.3AppOps对开发者的影响\n\t* 7.4设备绑定\n\t* 7.5跨设备使用\n\n* 8.应用内计费和App2SDCard\n\t* 8.1应用内计费\n\t* 8.2SD卡安装应用的安全策略\n\n* 9.Android中的多用户安全\n\t* 9.1需求场景\n\t* 9.2UserManagerService\n\t* 9.3对开发者的影响\n\n* 10.Android Superuser机制讲解\n\t* 10.1ROOT的作用\n\t* 10.2ROOT的第一步:寻找漏洞并安装特权文件\n\t* 10.3SU的sUID的特性\n\t* 10.4SU的核心代码分析\n\t* 10.5MR2后的方案:SU Deamon Service\n\n* 11.SEAndroid\n\t* 11.1DAC和MAC\n\t* 11.2基于Label的MAC\n\t* 11.3推荐读物\n\n\n\n<!-- more -->\n\n---\n\n# 1.移动平台中的主流签名作用\n\t\n## 1.1 自签名的完整性鉴别\n\t证书的签名者和证书拥有者是同一个实体---自签名\n\t\t作为信任链的根证书.\n\t\t完整性鉴别\n## 1.2 信任模式\n\t签名了?\n\t签名是可信的?\n\t可信任和普通应用的权利差异\n\t\t人为的把一些操作归类\n\t\t某类操作对于可信任应用和普通应用的表现不一样.\n\t\n## 1.3 限制安装/运行\n\t应用安装时\n\t\t是否包含签名?-->没有?禁止安装\n\t\t提取证书进行验证-->证书是有效且可信任的吗?-->不是?禁止安装\n\t\t基于证书的公钥对签名进行验证-->签名正确吗?-->不正确?禁止安装\n\t应用运行时\n\t\t是否包含签名?-->没有?禁止运行\n\t\t提取证书进行验证-->证书是有效且可信任的吗?-->不是?禁止运行\n\t\t基于证书的公钥对签名进行验证-->签名正确吗?-->不正确?禁止运行\n\n\n## 1.4 权限的作用\n\n\t细粒度的特权管理\n\t\t权限是一个ID或者一个字符串\n\t\t权限用来细分权利(类似Capability)\n\t\t通常一个权限与一类操作绑定\n\t\t权限首先需要申请\n\t\t但申请后是否被批准由平台策略决定\n\n## 1.5 权限的安全性保护\n\n\t通过签名\n\t\t权限的完整性保护:防篡改\n\t\t权限的授权安全策略:防Escalate\n\n\n## 1.6 Android的签名作用\n\n### 1.6.1.完整性鉴别\n\t支持自签名用于完整性鉴别\n\t不做信任模式\n\t不做安装和运行时的限制\n\n### 1.6.2.Signature Permision和ShareUID\n\tSignature Protection Level Permision\n\t\t用于特权Permission\n\t\t只有特定签名的Apk才被授权\n\t\t\t\n\t\t\t例如:\n\n```xml\n\t<!--访问硬件辅助设备,用于硬件测试 -->\n\t<--allows access to hardware peripherals . Intended only for hardware testing . <p>Not for use by third-party applications.-->\n\t<permission android:name=\"android.permission.HARDWARE_TEST\"\n\t\tandroid:permissionGroup=\"android.permission-group.HARDWARE_CONTROLS\"\n\t\tandroid:protectionLevel=\"signature\"\n\t\tandroid:lable=\"@string/permlab_hardware_test\"\n\t\tandroid:description=\"@string/permadesc_hardware_test\" />\n```\n\n\t\t\tShare Process UID\n\n```xml\n\t\t\t\tandroid:sharedUserId=\"xxxx\"\n```\n\n\t\tProcess间Share UID的目的是共享资源等 (如:/data/data/A包名/目录下面)\n\t\tAndroid中两个APK Share相同的UID必须其签名所用的Private Key一样.\n\n### 1.6.3.身份ID和升级的匹配\n\tAndroid中的自签名只是代表了身份,但不代表身份是否可信任\n\tAndroid的应用的标识符是Package Name\n\t\tPackage Name不一样,相互不影响,允许同时存在(安装)\n\t\tPackage Name一样,只能存在一个,允许做升级处理.\n\t升级的安全性考虑\n\t\t必须签名的证书一致(防假冒,防侵入隐私)\n\t\t如果不一致,则用户要么放弃新的应用,要么先卸载旧的,再安装新的.但这属于安装,不属于升级\n\t\t正常的升级将不擦除应用的工作目录数据,以保证历史数据的持续性.\n\n\n## 1.7Android APK之METAINF\n\n\t\tAPK结构\n\n![apk结构](/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/001.png)\n\n\t\tMETA INF的组成\n\n![METAINF结构](/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/002.png)\n\n\t\t签名流程\n\n```shell\n\tjava -jar signapk.jar testkey.x509.pem testkey.pk8 update.apk update-signed.apk\n```\n\n\t\t\t\t这条命令的意思是:通过signapk.jar这个可执行jar包，以“testkey.x509.pem”这个公钥文件\n\t\t\t\t\t\t 和“testkey.pk8”这个私钥文件对“update.apk”进行签名，签名后的文件保存为“update_signed.apk”\n\t\t\t\t详情可阅:[Android APK 签名比对](http://www.blogjava.net/zh-weir/archive/2011/07/19/354663.html)\n\t\t\t\n\t\t\tMANIFEST.MF文件 (第一重保护,本文本里面包含apk的资源文件的每个文件的SHA1值)\n\n![METAINF结构](/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/003.png)\n\n\t\t\tCERT.SF文件 (第二重保护,本文本里面包含MANIFEST.MF里的所有内容,并包含有MANIFEST.MF的SHA1-Digest-Manifest)\n\n![METAINF结构](/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/004.png)\n\n\t\t\tCERT.RSA (第三重保护,此文件是一个PKCS#7格式的文件,\n\t\t\t\t里面包含证书信息,以及基于私钥的签名信息,\n\t\t\t\t签名信息是由整个CERT.SF文件的做一个基于sha1(160bit)+rsa(testkey.pk8,publicKey)生成)\n\n![METAINF结构](/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/005.png)\n\n---\n\n# 2.Android中的权限\n\t\n## 2.1 Android的权限作用\n\t细粒度特权管理\n\t\t权限与操作关联\n\t\t应用需要显式申请权限\n\t\t用户对权限可知(不可控) (也可通过LBE,腾讯管家,360等可进行权限控制)\n\t\t对特权权限单独控制\n\n## 2.2 Android的权限类别\n\tNormal 没那么敏感\n\tDangerous 比较敏感的,安装时会被列举出来.\n\tSignature 基于特殊权限的权限(申请权限的apk它的签名的私钥必须要跟定义这个权限的私钥一致)\n\tSignatureOrSystem  申请权限的apk它的签名的私钥必须要跟定义这个权限的私钥一致或者apk是系统应用\n\n## 2.3 Android的权限定义方式\n\n```xml\n   <!-- Allows an application to monitor incoming SMS messages, to record or perform processing on them. -->\n    <permission android:name=\"android.permission.RECEIVE_SMS\"\n\t\t\t\tandroid:permissionGroup=\"android.permission-group.MESSAGES\"\n\t\t\t\tandroid:protectionLevel=\"dangerous\"\n\t\t\t\tandroid:label=\"@string/permlab_receiveSms\"\n\t\t\t\tandroid:description=\"@string/permdesc_receiveSms\" />\n\n\t\t\t\t<!--name 权限名称\n\t\t\t\tpermissionGroup 权限组\n\t\t\t\tprotectionLevel 权限类别\n\t\t\t\tlabel 安装时用户可查看到的信息,提示申请当前权限的作用\n\t\t\t\tdescription 显示给用户的申请权限的详细概述-->\n```\n\n[源代码frameworks/base/core/res/AndroidManifest.xml](http://osdn.jp/projects/gb-231r1-is01/scm/git/Gingerbread_2.3.3_r1_IS01/blobs/master/frameworks/base/core/res/AndroidManifest.xml)\n\n\n## 2.4 Android的运行时权限控制方式\n\n\t通过PM的CheckPermission\n\t\tAndroid独有的Service(底层平台不具有)\n\t\t所以需要在Android本身Framework中控制\n\t\t主流的Service一般都基于Binder IPC或者其他IPC提供服务\n\t\t所以在最底层控制(Service所在的Server中)以避免逃逸控制\n\t\t\t绕开应用函数直接调用远程服务\n\t\t例子:(mContext.checkCallingOrSelfPermission(permission) == PackageManager.PERMISSION_GRANTED)\n\t\t\t\n\t映射为OS的特定属性\n\t\t非Android特有的Service(底层平台已经提供,如File访问,TCPIP数据收发等)\n\t\t多个入口访问ndroidAPI,Java API NDK C API , Shell , et:Ac\n\t\t底层控制准则,会聚口在底层,所以在底层(OS层面)统一控制,这样可以避免逃逸控制\n\t\t所以复用OS的一些安全控制特性,比如GID\n\t\t所以需要把Android空间的Permission Mapping到OS的GID\n\t\t\n```shell\n\t进入到手机SDCard里发现GID都是sdcard_rw\n\tshell@android:/storage/sdcard0 $ ls -l\n\tls -l\n\t\t      UID      GID\n\tdrwxrwxr-x system   sdcard_rw          2014-12-15 18:03 Android\n\tdrwxrwxr-x system   sdcard_rw          2015-03-18 16:09 BaiduMapSdk\n\tdrwxrwxr-x system   sdcard_rw          2014-06-30 10:04 BaoDownload\n\tdrwxrwxr-x system   sdcard_rw          2014-07-07 17:33 Cache\n\tdrwxrwxr-x system   sdcard_rw          2014-12-15 18:03 CloudDrive\n\tdrwxrwxr-x system   sdcard_rw          2015-03-20 11:33 DCIM\n\tdrwxrwxr-x system   sdcard_rw          2014-12-15 18:02 Download\n\tdrwxrwxr-x system   sdcard_rw          2015-03-04 12:05 ExtDataTunnel\n```\n\n```xml\n\t<uses-permission\n\tandroid:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n```xml\n\t<!--当开发者增加上条权限时会程序会自动增加这条信息. 本信息来源:frameworks/base/data/etc/platform.xml-->\n\t<permission name=\"android.permission.WRITE_EXTERNAL_STORAGE\">\n\t\t<group gid=\"sdcard_rw\" />\n\t</permission>\n```\n\n```shell\n\t/*进程所占内存proc pid status*/\n\tshell@android:/proc/5914 # cat status\n\tcat status\n\tName:   n.ledinside.app /*进程的程序名*/\n\tState:  S (sleeping) /*进程的状态信息*/\n\tTgid:   5914 /*线程组号*/\n\tPid:    5914 /*进程pid*/\n\tPPid:   148 /*父进程的pid*/\n\tTracerPid:      0 /*跟踪进程的pid*/\n\tUid:    10075   10075   10075   10075 /*uid euid suid fsuid*/\n\tGid:    10075   10075   10075   10075 /*gid egid sgid fsgid*/\n\tFDSize: 256 /*文件描述符的最大个数，file->fds*/\n\tGroups: 1015 1028 3003/*启动该进程的用户所属的组的id*/\n\tVmPeak:   354256 kB /*进程地址空间的大小*/\n\tVmSize:   301964 kB /*进程虚拟地址空间的大小reserved_vm：进程在预留或特殊的内存间的物理页*/\n\tVmLck:         0 kB /*进程已经锁住的物理内存的大小.锁住的物理内存不能交换到硬盘*/\n\tVmPin:         0 kB\n\tVmHWM:     63052 kB /*文件内存映射和匿名内存映射的大小*/\n\tVmRSS:     33884 kB /*应用程序正在使用的物理内存的大小，就是用ps命令的参数rss的值 (rss)*/\n\tVmData:    30484 kB /*程序数据段的大小（所占虚拟内存的大小），存放初始化了的数据*/\n\tVmStk:       136 kB /*进程在用户态的栈的大小*/\n\tVmExe:         8 kB /*程序所拥有的可执行虚拟内存的大小,代码段,不包括任务使用的库 */\n\tVmLib:     28068 kB /*被映像到任务的虚拟内存空间的库的大小*/\n\tVmPTE:       150 kB /*该进程的所有页表的大小*/\n\tVmSwap:        0 kB\n\tThreads:        15 /*共享使用该信号描述符的任务的个数*/\n\tSigQ:   0/3133 /*待处理信号的个数/目前最大可以处理的信号的个数*/\n\tSigPnd: 0000000000000000 /*屏蔽位，存储了该线程的待处理信号*/\n\tShdPnd: 0000000000000000 /*屏蔽位，存储了该线程组的待处理信号*/\n\tSigBlk: 0000000000001204 /*存放被阻塞的信号*/\n\tSigIgn: 0000000000000000 /*存放被忽略的信号*/\n\tSigCgt: 00000002000094e8 /*存放被俘获到的信号*/\n\tCapInh: 0000000000000000 /*能被当前进程执行的程序的继承的能力*/\n\tCapPrm: 0000000000000000 /*进程能够使用的能力，可以包含CapEff中没有的能力，这些能力是被进程自己临时放弃的*/\n\tCapEff: 0000000000000000 /*是CapPrm的一个子集，进程放弃没有必要的能力有利于提高安全性*/\n\tCapBnd: ffffffffffffffff\n\tCpus_allowed:   3 /*可以执行该进程的CPU掩码集*/\n\tCpus_allowed_list:      0-1\n\tvoluntary_ctxt_switches:        223 /*进程主动切换的次数*/\n\tnonvoluntary_ctxt_switches:     406 /*进程被动切换的次数*/\n```\n\t\n```xml\n\t<!--Groups中1015正好对应的是SDCARD_RW-->\n\t#define AID_MEDIA         1013  /* mediaserver process */\n\t#define AID_DHCP          1014  /* dhcp client */\n\t#define AID_SDCARD_RW     1015  /* external storage write access */\n\t#define AID_VPN           1016  /* vpn system */\n\t#define AID_KEYSTORE      1017  /* keystore subsystem */\n\t#define AID_USB           1018  /* USB devices */\n\n```\n\n## 2.5 Android的Permission与UID/GID的mapping\n\n\t语法:\n\t\tUID assigning permission: \n\t\t\t< assign-permission name=\"permission_name\" uid=\"target_uid\" />\n\t\tGIDs Mapping:\n\t\t\t<permission name=\"permission_nema\" >\n\t\t\t<group gid=\"assigned gid\" />\n\t\t\t<group gid=\"assigned gid\" />\n\t\t\t.....\n\t\t\t</permission>\n\t发生时刻:安装时\n\tetc/permissions\n\t\t任何符合以上语法的在system/etc/permissions下面的xml文件,都会被系统读取来parse并进行UID/GID的mapping.\n\t\t比如Platform.xml(check代码)\n\n[frameworks/base/data/etc/platform.xml](http://osdn.jp/projects/gb-231r1-is01/scm/git/Gingerbread_2.3.3_r1_IS01/blobs/master/frameworks/base/data/etc/platform.xml)\n\n\t\t安全性\n\t\t\t任何应用都可以为自己的permission assign GID? \n\t\t\t\t当然不行! 只有Root用户才允许新增或者改写.\n\t\t\t\t并且对于ROOT用户组的用户也只有r权限\n\t\t\t\t如下为手机system/etc/permissions目录下的文件权限\n\n```shell\n\n\tshell@android:/system/etc # ls -l\t\n\t....\n\tdrwxr-xr-x root     root              2013-07-09 21:54 permissions\n\t....\n\tshell@android:/system/etc # cd permissions\n\tshell@android:/system/etc/permissions # ls -l platform.xml\n\t-rw-r--r-- root     root         9466 2008-08-01 20:00 platform.xml\n\n```\n\n---\n\n# 3.Android中的组件的安全机制\n\t\t\n\tAndroid的4大组件及组件间的通信\n\t组件的public和private\n\t组件的权限分配\n\n## 3.1 组件的权限分配(demo)\n\n### 3.1.1.Activity\n\n\t服务端增加相应的权限:\n\t\t\n```xml\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t    package=\"com.tu.test.diyPermission\"\n\t    android:versionCode=\"1\"\n\t    android:versionName=\"1.0\" >\n\n\t    <uses-sdk\n\t\tandroid:minSdkVersion=\"8\"\n\t\tandroid:targetSdkVersion=\"19\" />\n\n\t    <!-- 自定义Activity权限 start -->\n\t    <permission android:name=\"com.tu.test.diyPermission.DIYPERMISSION\" />\n\t    <!-- 自定义Activity权限 end -->\n\n\t    <application\n\t\tandroid:allowBackup=\"true\"\n\t\tandroid:icon=\"@drawable/ic_launcher\"\n\t\tandroid:label=\"@string/app_name\" >\n\t\t<activity\n\t\t    android:name=\"com.tu.test.diyPermission.MainActivity\"\n\t\t    android:label=\"@string/app_name\" >\n\t\t    <intent-filter>\n\t\t\t<action android:name=\"android.intent.action.MAIN\" />\n\t\t\t<category android:name=\"android.intent.category.LAUNCHER\" />\n\t\t    </intent-filter>\n\t\t</activity>\n\t\t<!-- 自定义Activity权限 start -->\n\t\t<activity\n\t\t    android:name=\".NewPageActivity\"\n\t\t    android:exported=\"true\"\n\t\t    android:permission=\"com.tu.test.diyPermission.DIYPERMISSION\" >\n\t\t    <intent-filter>\n\t\t\t<action android:name=\"com.tu.test.diyPermission.NewPageActivity\" />\n\t\t\t<category android:name=\"android.intent.category.DEFAULT\" />\n\t\t    </intent-filter>\n\t\t</activity>\n\t\t<!-- 自定义Activity权限 end -->\n\t    </application>\n\t</manifest>\n```\n\n\t客户端必须申请许可:\n\t否则会抛出:\n\n\t\tjava.lang.SecurityException: Permission Denial: starting Intent { \n\t\t\tact=com.tu.test.diyPermission.NewPageActivity cmp=com.tu.test.\n\t\t\tdiyPermission/.NewPageActivity (has extras) } from ProcessRecord\n\t\t\t{41efe3e8 8642:com.tu.test.diyPermission.client/u0a204} (pid=8642,\n\t\t\tuid=10204) requires com.tu.test.diyPermission.DIYPERMISSION\n\n```xml\n\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t    package=\"com.tu.test.diyPermission.client\"\n\t    android:versionCode=\"1\"\n\t    android:versionName=\"1.0\" >\n\n\t    <uses-sdk\n\t\tandroid:minSdkVersion=\"8\"\n\t\tandroid:targetSdkVersion=\"19\" />\n\n\t    <!-- 申请应用DiyPermission中的自定义Activity权限 start -->\n\t    <uses-permission android:name=\"com.tu.test.diyPermission.DIYPERMISSION\" />\n\t    <!-- 申请应用DiyPermission中的自定义Activity权限 end -->\n\n\t    <application\n\t\tandroid:allowBackup=\"true\"\n\t\tandroid:icon=\"@drawable/ic_launcher\"\n\t\tandroid:label=\"@string/app_name\" >\n\t\t<activity\n\t\t    android:name=\"com.tu.test.diyPermission.client.MainActivity\"\n\t\t    android:label=\"@string/app_name\" >\n\t\t    <intent-filter>\n\t\t\t<action android:name=\"android.intent.action.MAIN\" />\n\t\t\t<category android:name=\"android.intent.category.LAUNCHER\" />\n\t\t    </intent-filter>\n\t\t</activity>\n\t    </application>\n\n\t</manifest>\n```\n\n### 3.1.2.service\n\t\n\t服务端增加相应的权限:\n\n```xml\n\t<manifest ...>\n\t    <permission\n\t\tandroid:name=\"com.tu.test.diyPermission.DIYPERMISSION_SERVICE\"\n\t\tandroid:label=\"diy Permission service\" \n\t\tandroid:description=\"@string/hello_world\"/>\n\n\t\t <application ...>\n\t\t\t....\n\t\t\t <service\n\t\t\t    android:name=\".service.NewService\"\n\t\t\t    android:enabled=\"true\"\n\t\t\t    android:exported=\"true\"\n\t\t\t    android:permission=\"com.tu.test.diyPermission.DIYPERMISSION_SERVICE\" >\n\t\t\t    <intent-filter>\n\t\t\t\t<action android:name=\"com.tu.test.diyPermission.SERVICE_ACTION\" />\n\t\t\t    </intent-filter>\n\t\t\t</service>\n\t\t </application>\n\t </manifest>\n```\n\t\n\t\t\t客户端必须申请许可:\n\t\t\t否则会抛出:\n\t\t\t\tCaused by: java.lang.SecurityException: \n\t\t\t\t\tNot allowed to bind to service Intent { act=com.tu.test.diyPermission.SERVICE_ACTION }\n\n```xml\n\t<uses-permission android:name=\"com.tu.test.diyPermission.DIYPERMISSION_SERVICE\" />\n```\n\n### 3.1.3.ContentProvide\n\n\t服务端增加相应的权限:\n\t\t读,写,访问权限.\n\n```xml\t\n\n\t<manifest ...>\n\t\t<permission android:name=\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER\" />\n\t\t<permission android:name=\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_WRITE\" />\n\t\t<permission android:name=\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_READ\" />\n\n\t\t <application ...>\n\t\t\t....\n\t\t\t <provider\n\t\t\t    android:name=\".provider.NewContentProvider\"\n\t\t\t    android:exported=\"true\"\n\t\t\t    android:authorities=\"com.tu.test.diyPermission.providers.PersonProvider\"\n\t\t\t    android:readPermission=\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_READ\"\n\t\t\t    android:writePermission=\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_WRITE\"\n\t\t\t    android:permission=\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER\" />\n\t\t </application>\n\t </manifest>\n```\n\n\t\t\t客户端必须申请许可:\n\t\t\t否则会抛出:\n\t\t\t\tCaused by: java.lang.SecurityException: Permission Denial: opening provider \n\t\t\t\tcom.tu.test.diyPermission.provider.NewContentProvider from ProcessRecord{4236abd0\n\t\t\t\t22086:com.tu.test.diyPermission.client/u0a204} (pid=22086, uid=10204) requires \n\t\t\t\tcom.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_READ or com.tu.test.\n\t\t\t\tdiyPermission.DIYPERMISSION_CONTENTPROVIDER_WRITE\n\n```xml\n\n\t<uses-permission android:name=\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER\" />\n\t<uses-permission android:name=\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_WRITE\" />\n\t<uses-permission android:name=\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_READ\" />\n\n```\n\n### 3.1.4.BroadcastReceiver\n\t服务端增加权限:\n\n```xml\t\t\n\n\t<manifest ...>\n\t\t....\n\t\t <permission android:name=\"com.tu.test.diyPermission.BROADCESTRECEIVER\" />\n\t\t<application ...>\n\t\t\t....\n\t\t  <receiver\n\t\t    android:name=\".receiver.NewReceiver\"\n\t\t    android:permission=\"com.tu.test.diyPermission.BROADCESTRECEIVER\" >\n\t\t    <intent-filter>\n\t\t\t<action android:name=\"com.tu.test.diyPermission.BROADCESTRECEIVER_ACTION\" />\n\t\t\t<category android:name=\"android.intent.category.DEFAULT\" />\n\t\t    </intent-filter>\n\t\t</receiver>\n\t\t  </application>\n\t</manifest>\n\n```\n\n\t\t\t客户端必须申请许可:\n\t\t\t\t否则服务端周日接收不到信息\n\n```xml\t\t\n <uses-permission android:name=\"com.tu.test.diyPermission.BROADCESTRECEIVER\" />\n```\n\n\n# 4.应用安装\n\t\n## 4.1.应用安装的安全性考虑和调用方式\n\t应用安装是一个高特权/风险操作,所以必须是可知/可控,主流实现方式:客户只能委派而不能直接操作.\n\t调用安装传统模式: 发送Intent给系统的Package Install app\n\n```java\n\t\t\tIntent intent = new Intent();\n\t\t\tintent.setAction(Intent.ACTION_VIEW);\n\t\t\tintent.setDataAndType(Uri.fromFile(file), \"application/vnd.android.package-archive\");\n\t\t\tintent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n\t\t\tstartActivity(intent);\n```\n\n\t\t特权安装模式:系统的Package Install App内部会调用PackageManagerService的Install Package,\n\t\t\t该操作与android.permission.INSTALL_PACKAGES 绑定,且该peimission的protection level是 signature|system\n\t\t\n\t\t所谓的静默安装方式只存在Root手机上,开发者可以选择:\n\t\t\t基于pm cmd : pm install -r\n\n## 4.2.应用安装流程之UID/GID的分配\n\n\t\t基于Android4.3原代码目录\n\t\tframeworks/base/services/java/com/android/srver/pm/PackageManagerService.java\n\n```java\t\t\n\t//installPackage 将会调用 scanPackageLI\n\n\tprivage PackageParser.Package scanPackageLI(PackageParser.Package pkg,int parseFlags,int scanMode,log currentTime,UserHandle user){\n\t\t....\n\t\tpkgSetting = mSettings.getPackageLPw(pkg,origPackage,realName,suid,destCodeFile,destResourceFile,pkg.applicationInfo.nativeLibraryDir,pkg.applicationInfo.flags,user,false);\n\t\t.....\n\t\tpkg.applicationInfo.uid = pkgSetting.appId;//说明是由Settings里面产生Uid,获取到appId\n\t\t....\n\t\t//invoke installer to do the actual installation \n\t\tint ret = createDataDirsLI(pagName,pkg.applicationInfo.uid,pkg.applicationInfo.seinfo);//创建工作目录和权限设置\n\t}\n```\n\t\t\n\t\tfameworks/base/services/java/com/android/server/pm/Settings.java\n\n\n```java\t\t\n\tprivate PackageSetting getPackageLPw(String name,PackageSetting origPackage,String realName,SharedUserSetting shardUser,File codePath,File resourcePath,String nativeLibraryPathString,int vc,int pkgFlags,UserHandle installUser,Boolean add , boolean allowlnstall){\n\t\tPackageSetting p = mPackages.get(name);\n\t\tif(p!=null){\n\t\t\tif(!p.codePath.equals(codePath)){\n\t\t\t\t//check to see if its a disabled syste\n\t\t\t\t.....\n\t\t\t}else{\n\t\t\t\t//Assign new user id\n\t\t\t\tp.appId = newUserIdLPw(p);//分配Uid\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//分配Uid的方法\n\tprivate int newUserIdLPw(Object obj){\n\t\t//Let's be stupidly inefficient for now...\n\t\tfinal int N = mUserIds.size();\n\t\tfor(int i = 0;i<N;i++){\n\t\t\tif(mUserIds.get(i)==null){\n\t\t\t\tmUserIds.set(i,obj);\n\t\t\t\treturn Process.FIRST_APPLICATION_UID + i;//这就为什么用户安装的uid都是大于10000的原因.\n\t\t\t}\n\t\t}\n\t\t//None left?\n\t\tif(N>(Process.LAST_APPLICATION_UID-Process.FIRST_APPLICATION_UID)){\n\t\t\treturn -1;\n\t\t}\n\t\tmUserIds.add(obj);\n\t\treturn Process.FIRST_APPLICATION_UID+N;\n\t}\n\n\tframeworks/base/core/java/android/os/Process.java\n\tpublic static final int FIRST_APPLICATION_UID=10000;//这就为什么用户安装的uid都是大于10000的原因.\n```\n\n## 4.3.应用安装流程之工作目录的创建和权限设置\n\n\tframeworks/base/services/java/com/android/server/pm/PackageManagerService.java\n\n```java\t\t\n\t\n\tprivate int createDataDirsLI(String packageName,int uid,String seinfo){\n\t\tint [] users = sUserManager.getUserIds();\n\t\tint res = mlnstaller.install(packageName,uid,uid,seinfo);//从这里可以看出uid gid都被设置成uid\n\t\tif(res<0){\n\t\t\treturn res;\n\t\t}\n\t\t//only for multi-user//Android 4.1之后支持多用户\n\t\tfor(int user: users){\n\t\t\tif(user!=0){\n\t\t\t\tres = mlnstaller.createUserData(packageName,UserHandle.getUid(user,uid),user);\n\t\t\t\tif(res<0){\n\t\t\t\t\treturn res;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n\n```\n\t\t\n\tframeworks/base/services/java/com/anddroid/server/pm/Installer.java\n\t\t\n```java\t\t\n\t\n\tprivate boolean connect(){//Installer一起来会进行初始化\n\t\tif(mSocket!=null){\n\t\t\treturn true;\n\t\t}\n\t\ttry{\n\t\t\tmSocket = new LocalSocket();\n\t\t\t//本地Socket\n\t\t\tLocalSocketAddress address = new LocalSocketAddress(\"installd\",LocalSocketAddress.Namespace.RESERVED);\n\t\t\tmSocket.connect(address);\n\t\t\tmIn = mSocket.getInputStream();\n\t\t\tmOut = mSocket.getOutputStream();\n\t\t}catch(IOException ex){\n\t\t\tdisconnect();\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate int install(String name,int uid , int gid , String seinfo){\n\t\t//内部协议\n\t\tStringBuilder builder = new StringBuilder(\"install\");\n\t\tbuilder.append('');\n\t\tbuilder.append(name);\n\t\tbuilder.append('');\n\t\tbuilder.append(uid);\n\t\tbuilder.append('');\n\t\tbuilder.append(gid);\n\t\tbuilder.append('');\n\t\tbuilder.append(seinfo!=null?seinfo:\"!\");\n\t\treturn execute(builder.toString());//会调用mOut mIn发数据\n\t}\n\n```\n\n\tframeworks/native/cmds/installd/installd.c\n\n```c\t\n\t\t\t\n\t\tint main(const int argc, const char *argv[]) {   //here the SOCKET_PATH is installd\n\t\t\t..........\n\t\t\tlsocket = android_get_control_socket(SOCKET_PATH);\n\t\t\tif (listen(lsocket, 5)) {}\n\t\t\t fcntl(lsocket, F_SETFD, FD_CLOEXEC);\n\t\t\t for (;;) {\n\t\t\t\talen = sizeof(addr);\n\t\t\t\ts = accept(lsocket, &addr, &alen);\n\t\t\t\tfcntl(s, F_SETFD, FD_CLOEXEC);\n\n\t\t\t\tif(readx(s,buf,count)){}\n\t\t\t\tif(execute(s,buf))break;\n\t\t\t}\n\t\t}\n\n\t\tstatic int do_install(char **arg, char reply[REPLY_MAX])\n\t\t{\n\t\t    return install(arg[0], atoi(arg[1]), atoi(arg[2]), atoi(arg[3])); /* pkgname, uid, gid */\n\t\t}\n```\n\n\tframework/native/cmds/installd/commands.c\n\n```c\t\n\n\tint install(const char *pkgname, int encrypted_fs_flag, uid_t uid, gid_t gid){\n\t\t.....\n\t\tif(create_pkg_path(pkgdir,pkgname,PKG_DIR_POSTEIX,0)){//创建工作目录结构,/data/data/包名/\n\t\t\tALOGE(\"cannot create package path\\n\");\n\t\t\treturn -1;\n\t\t}....\n\t\tif (mkdir(pkgdir, 0751) < 0) {//创建目录,并设置权限 0751 uid7(4+2+1)读写执行,gid5(4+1)读执行,其它1(1)执行\n\t\t\tALOGE(\"cannot create dir '%s': %s\\n\", pkgdir, strerror(errno));\n\t\t\treturn -1;\n\t\t}\n\t\tif (chmod(pkgdir,0751) < 0) {//再设置一次权限\n\t\t\tALOGE(\"cannot chmod dir '%s': %s\\n\", pkgdir, strerror(errno));\n\t\t\tunlink(pkgdir);\n\t\t\treturn -errno;\n\t\t}.....\n\t\tif(chown(pkgdir,uid,gid)<0){//因设置权限时是使用root用户,些处再进行权限修改.把uid root , gid root 修改成应用的uid,与gid.\n\t\t.....\n\t\t}\n\t}\n```\n\n# 5.Android中系统Service的安全\n\t\n## 5.1 Binder的安全\t\n\tBinder的作用:实现以IPC的RPC,完成远程业务范围.\n\n[Android进程间通信（IPC）机制Binder简要介绍和学习计划](http://blog.csdn.net/luoshengyang/article/details/6618363)\n\n[SEAndroid安全机制对Binder IPC的保护分析](http://blog.csdn.net/luoshengyang/article/details/38326729)\n\n## 5.2 ServiceManager Add Service的安全限制\n\tService Manager Process的作用: Naming Resolver,用于RPC框架中 AddService  GetSetvice\n\t\n\n## 5.3 Zygote的Process Fork\n\n[Android系统进程Zygote启动过程的源代码分析](http://blog.csdn.net/luoshengyang/article/details/6768304)\n\n[Android深入浅出之Zygote](http://www.cnblogs.com/innost/archive/2011/01/26/1945769.html)\n\n## 5.4 Zygote的Socket安全检查\n\n[空]()\n\n\n# 6.Android中的ContentProvider以及基于URI的安全\n\t\n## 6.1.ContentProvider的作用\n\t\n### 6.1.1.软件设计更优美(官方)\n\t屏蔽内部数据存储操作的差异性\n\t对外提供一致的数据操作方式\n\t抽象/共性---->都是数据操作\n\n### 6.1.2.进程间数据共享\n\t\t   Proxy|        Binder              |  Content Provider\n\tclient Process  ------------------------------- > Service Process \n\n## 6.2.权限临时继承的需求\n\t临时委派使得委托者的权限临时提升(类似Root-setUID模式)\n\n\n## 6.3.配置ContentProvider允许临时委派权限\n\n```xml\t\n\t<provider \n\t\tandroid:readPermission=\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_READ\"\n\t\tandroid:grantUriPermissions=\"true\" />\n\t\t<!--允许派遣给uri-->\n\t\t<provider ...>\n\t\t\t....\n\t\t\t<grant-uri-permission android:path=\"/comtu/\"/>\n\t\t\t<!--允许派遣给限制URI的路径-->\n\t\t</provider>\n\t\t<provider ...>\n\t\t\t....\n\t\t\t<grant-uri-permission android:pathPrefix=\"/abc/\"/>\n\t\t\t\t\t<!--允许派遣给限制URI的路径前缀-->\n\t\t</provider>\n\t\t<provider ...>\n\t\t\t....\n\t\t\t<grant-uri-permission android:pathPattern=\".*public.*\"/>\n\t\t\t<!--允许派遣给限制URI的路径通过正则-->\n\t</provider>\n```\n\n## 6.4.基于URI的权限临时委派\n\n### 6.4.1 基于API\n\n```java\t\t\n\t\t//委派uri权限临时委派给com.example.testapps.test2,权限为FLAG_GRANT_READ_URI_PERMISSION\n\t\turi = \"content://com.example.testapps.test1.mailprovider/attachments/42\";\n\t\tContext.grantUriPermission(\"com.example.testapps.test2\",uri,Intent.FLAG_GRANT_READ_URI_PERMISSION);\n\n\t\t//一定时间之后将收回委派的权限.否则可能存在安全隐患.需要思考的时什么时候收回.\n\t\turi = \"content://com.example.testapps.test1.mailprovider/attachments/42\";\n\t\tContext.revokeUriPermission(uri,Intent.FLAG_GRANT_READ_URI_PERMISSION);\n```\n\n### 6.4.2 基于Intent\n\n```java\t\t\n\t\t\tIntent intent = new Intent(Intent.ACTION_VIEW);\n\t\t\tintent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n\t\t\tintent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n\t\t\tintent.setDataAndType(uri,\"image/gif\");\n\t\t\tstartActivity(intent);\n```\n\n\t权限的生命周期: Activity Start --> Destro即Activity的生命周期\n\n# 7.Android的Policy模式和多设备绑定\n\n## 7.1.Android的Policy模式\n\t一个移动平台它解决用户隐私,相当的一系列控制或者说是跟用户的交互模式.\n\t安装时安全提问\n\t\t列出所有权限,提示用户是否安装.\n\n\t\tAll or Nothing \n\t\tNone Runtime Control \n\t\tNone Recallable \n\t\tDisable untrust source by default \n\n## 7.2.MR2开始的AppOps(安卓4.3开始)\n\t如 LBE 等安全卫士控制权限\n\n\t>基于AppOps Service\n\t>定义Ignore , Allow Reject 3种Policy\n\t>Hook and check Permission\n\n\t\n## 7.3AppOps对开发者的影响\n\t开发者已经申请权限时,但被LBE等安全卫士等的权限限制.\n\t\t会导致权限一样获取不到.为了代码健壮性,需加多一些try catch.防止异常\n\n## 7.4设备绑定\n\t应用与设备绑定的需求前景\n\t\t如,计费应用.\n\t\t\n\t>同时基于SIM卡和Device的绑定(如BREW下载,单机内的下载卡可用.基于SIM卡计费,运营商间排斥)\n\t>仅基于Device的绑定(如Google Store下载,当时下载的Device可用)\n\t>实现: 加密 per device per SIM卡\n\t\tDevice Key: ESN/MEID/IMEI or random generate\n\t\tSIM ID : IMSI\n\t\n## 7.5跨设备使用\n\t基于Account ID的云端管理\n\tDevice1 --buy it using xx@x.x account -->AppStore<----Down load freely--(Register as xx@x.x) --Device2\n\n\n# 8.应用内计费和App2SDCard\n\n## 8.1 应用内计费\n\t什么是应用内计费\n\t\tIn App purchase or In app Billing(IAP,IAB)\n\t\t直接在应用内进行Paymen以unLock某些功能,或者买某些道具等\n\t应用内计费的需求\n\t\t可支付途径(信用卡,手机卡等)\n\t\t安全性:\n\t\t\t面向用户\n\t\t\t\t可知\n\t\t\t\t可控\n\t\t\t面向应用\n\t\t\t\t可信(避免免费使用收费内容)\n\n\t解决方案\n\t\t>计费Server接口保密且Transiction加密(SSL)\n\t\t>仅允许配套的安全本地组件与计费Server通信,且安全本地组件负责\n\t\t\t与用户的\"显式\"交互,同时提供API给Client\n\t\t>Clent仅允许调用本地计费安全组件来委派Transiction\n\t\t>Response的signature + Nounce (防止重放攻击)\n\n\n## 8.2 SD卡安装应用的安全策略\t\n\t绑定设备\n\t\t>绑定perDevice使得防Export:应用以及应用数据(SD卡允许Export)\n\t\t>以加密实现之:例子,应用安装至SD卡(.Android_Secure in SDCard)\n\n\tASEC的不可访问性\n\t\t由于.Android_Secure的加密特性,所以需要禁止应用直接Access该Folder(允许Access SDCard上的其他任何内容)\n\n\t\n# 9.Android中的多用户安全\n\n\t4.2开始可以支持\n\n## 9.1需求场景\n\t已有的例子/ Windows/Linux多用户\n\n\tAndroid中的差别\n\t\tUID/GID跟着User走\n\t\tUID/GID和User的区分和绑定\n\t应用的可控共享\n\t\t共享,不存在多份Code\n\t\t可控,控制谁可见.\n\t数据的多用户独立\n\t\t工作目录\n\t\tExternal Storage(外部存储器)\n\n## 9.2UserManagerService\n\t作用:\n\t\t管理User的属性信息: 设置/获取用户的UserId,Name,Icon,RestrictProfile等\n\t\t管理User:创建,删除等\n\t\n\tUserId(UserHandle)是Process的属性,不100%等同于当前设置切换的用户\n\t一切与多用户相关的运行时行为(比如Mount的SDCard等)与进程的UserID所属有关,\n\t\t而与当前设置中的当前用户没有必然联系\n\t典型的例子:\n\t\t通过adb shell的方式,永远只能访问User0的SDCard:/data/media/0,不管切换哪个用户\n\t\t通过文件管理器应用访问的SDCard则与当前用户相关.\n\t\t原因: adb shell只存在User0,不管在哪个当前设置用户下.\n## 9.3对开发者的影响\n\t\n\t永远使用相对路径(基于工作目录)以及基于Environment.getXXXX来获取你感兴趣的路径(Environment内部\n\t\t会处理多用户).否则会出现路径错误而访问被拒绝的问题.\n\n```java\t\n\t\tNew File(\"setting/setting.log\");\n\t\tNew File(Environment.getExternalStorageDirectory+\"SharePic/a.png\");\n```\n\n\n# 10.Android Superuser机制讲解\n\t\n## 10.1 ROOT的作用\n\tCustomization(定制,用户化)\n\t任何需要特权的操作\n\n## 10.2 ROOT的第一步:寻找漏洞并安装特权文件\n\tHack会寻找漏洞,如UID设置设备(ADB)\n\t手机Root后,最重要的是,给手机安装了su程序和superuser apk. su一般被安装在/system/xbin或者/system/bin\n\n## 10.3 SU的sUID的特性\n\tAndroid的App授权获取Root权限,其实不是App自身的权限提升了,而是通过具有Root权限的Sh流来执行shell命令.\n\n```shell\nshell@android:/system/xbin # ls su -l\nls su -l\n-rwsr-sr-x root     root        79500 2008-08-01 20:00 su\n```\n\t这里可以看到,su是Owner和Group分别为Root,Root.Other用户具有Execute权限,另外,su设置了suid和sgid,这个非常重要,\n\t\t使得Su进程可以提升自身的EUID.\n\n\n\n## 10.4 SU的核心代码分析\n\t在JB MR2(4.3)之前,Apk内部可以通过Java的Runtime执行一个\n\t\t具有Root-setUid的可执行文件而提升Effective UID来完成一些特权操作,典型的Root包中的su就是这个原理.\n\tJB MR2中,修补了改漏洞.\n\t\t\n## 10.5 MR2后的方案:SU Deamon Service\n\t怎么办? Native Service依然可以利用Root-setUID的su提升权限\n\t\n\n# 11.SEAndroid\n\t\n## 11.1 DAC和MAC\n\tDAC\n\t\t自主访问控制\n\t\t主体(Process)的Capability觉得了它能访问和操作什么?\n\t\t\tRoot进程可以访问和操作一切!\n\t\t传统(legacy)Linux的安全模式,基于UID/GID/Capability\n\tMAC \n\t\t强制访问控制\n\t\t系统的Policy觉得了主体能操作访问哪些客体\n\t\t即便是ROOT进程,系统Policy配置了你能做什么,你只能做什么,在MAC模式下,ROOT进程和普通进程是无区别对待的.\n\t\t \n## 11.2 基于Label的MAC\n\t每个主体/客体在运行时都绑定一个标签(Label)\n\t该标签又称为Security Context\n\tSecurity Context的构成\n\t\tUser : Role : Type : SecurityLevel\n\t\t比如: u:r:zygote:s0\n\tType Enhancement\n\t\tSecurity Context中的Type主要是用于Policy的设定,即Policy\n\t\t一般的Rule是:\n\t\t\tAllow Type Type : Operation\n\t\t\tAllow appdomain zygote_tmpfs:file read;\n\t\t所以,Type被实际用于\"授权\"的Decision,所以称之为Type Enhancement\n\tls命令的SELinux版本: ls -l -Z\n\n\tPs命令的SELinux版本: ps -Z\n\n\n## 11.3 推荐读物\n\n[Your visual how-to guide for SELinux policy enforcement](http://opensource.com/business/13/11/selinux-policy-guide)\n\n[SELinux实例：使用安全增强的Linux](http://book.51cto.com/art/200810/94193.htm)\n\t\n\t\t\n---\n\n# Demo下载\n\nAndroid中的组件的安全机制之组件的权限分配(Demo)    \nActivity Service ContentProvide BroadcastReceiver四大组件不同App数据通信:   \n[Demo](/res/file/blog/2014/10/27/android_safe_mode_mechanism_three/Permission.rar)\n\n\n","source":"_posts/2014-10-27-android_safe_mode_mechanism_three.md","raw":"---\ntitle : \"Android安全模式机制之三(实际运用)\"\ncategory : Android\ndate : 2014-10-27\ntags : [Android安全模式机制]\n---\n\n<style>\nh3 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nh6 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\n\n</style>\n\n目录:\n\t\n* 1.移动平台中的主流签名作用\n\t* 1.1自签名的完整性鉴别\n\t* 1.2信任模式\n\t* 1.3限制安装/运行\n\t* 1.4权限的作用\n\t* 1.5权限的安全性保护\n\t* 1.6Android的签名作用\n\t* 1.7Android APK之METAINF\n\n* 2.Android中的权限\n\t* 2.1Android的权限作用\n\t* 2.2Android的权限类别\n\t* 2.3Android的权限定义方式\n\t* 2.4Android的运行时权限控制方式\n\t* 2.5Android的Permission与UID/GID的mapping\n\n* 3.Android中的组件的安全机制\n\t* 3.1组件的权限分配(Demo)\n\t\t* 3.1.1 Activity\n\t\t* 3.1.2 Service\n\t\t* 3.1.3 ContentProvide\n\t\t* 3.1.4 BroadcastReceiver\n\n* 4.Android应用安装\n\t* 4.1应用安装的安全性考虑和调用方式\n\t* 4.2应用安装流程之UID/GID的分配\n\t* 4.3应用安装流程之工作目录的创建和权限设置\n\t\n* 5.Android中系统Service的安全\n\t* 5.1Binder的安全\n\t* 5.2ServiceManager Add Service的安全限制\n\t* 5.3Zygote的Process Fork\n\t* 5.4Zygote的Socket安全检查\t\n\n* 6.Android中的ContentProvider以及基于URI的安全\n\t* 6.1ContentProvider的作用\n\t* 6.2权限临时继承的需求\n\t* 6.3配置ContentProvider允许临时委派权限\n\t* 6.4基于URI的权限临时委派\n\n* 7.Android的Policy模式和多设备绑定\n\t* 7.1Android的Policy模式\n\t* 7.2MR2开始的AppOps(安卓4.3开始)\n\t* 7.3AppOps对开发者的影响\n\t* 7.4设备绑定\n\t* 7.5跨设备使用\n\n* 8.应用内计费和App2SDCard\n\t* 8.1应用内计费\n\t* 8.2SD卡安装应用的安全策略\n\n* 9.Android中的多用户安全\n\t* 9.1需求场景\n\t* 9.2UserManagerService\n\t* 9.3对开发者的影响\n\n* 10.Android Superuser机制讲解\n\t* 10.1ROOT的作用\n\t* 10.2ROOT的第一步:寻找漏洞并安装特权文件\n\t* 10.3SU的sUID的特性\n\t* 10.4SU的核心代码分析\n\t* 10.5MR2后的方案:SU Deamon Service\n\n* 11.SEAndroid\n\t* 11.1DAC和MAC\n\t* 11.2基于Label的MAC\n\t* 11.3推荐读物\n\n\n\n<!-- more -->\n\n---\n\n# 1.移动平台中的主流签名作用\n\t\n## 1.1 自签名的完整性鉴别\n\t证书的签名者和证书拥有者是同一个实体---自签名\n\t\t作为信任链的根证书.\n\t\t完整性鉴别\n## 1.2 信任模式\n\t签名了?\n\t签名是可信的?\n\t可信任和普通应用的权利差异\n\t\t人为的把一些操作归类\n\t\t某类操作对于可信任应用和普通应用的表现不一样.\n\t\n## 1.3 限制安装/运行\n\t应用安装时\n\t\t是否包含签名?-->没有?禁止安装\n\t\t提取证书进行验证-->证书是有效且可信任的吗?-->不是?禁止安装\n\t\t基于证书的公钥对签名进行验证-->签名正确吗?-->不正确?禁止安装\n\t应用运行时\n\t\t是否包含签名?-->没有?禁止运行\n\t\t提取证书进行验证-->证书是有效且可信任的吗?-->不是?禁止运行\n\t\t基于证书的公钥对签名进行验证-->签名正确吗?-->不正确?禁止运行\n\n\n## 1.4 权限的作用\n\n\t细粒度的特权管理\n\t\t权限是一个ID或者一个字符串\n\t\t权限用来细分权利(类似Capability)\n\t\t通常一个权限与一类操作绑定\n\t\t权限首先需要申请\n\t\t但申请后是否被批准由平台策略决定\n\n## 1.5 权限的安全性保护\n\n\t通过签名\n\t\t权限的完整性保护:防篡改\n\t\t权限的授权安全策略:防Escalate\n\n\n## 1.6 Android的签名作用\n\n### 1.6.1.完整性鉴别\n\t支持自签名用于完整性鉴别\n\t不做信任模式\n\t不做安装和运行时的限制\n\n### 1.6.2.Signature Permision和ShareUID\n\tSignature Protection Level Permision\n\t\t用于特权Permission\n\t\t只有特定签名的Apk才被授权\n\t\t\t\n\t\t\t例如:\n\n```xml\n\t<!--访问硬件辅助设备,用于硬件测试 -->\n\t<--allows access to hardware peripherals . Intended only for hardware testing . <p>Not for use by third-party applications.-->\n\t<permission android:name=\"android.permission.HARDWARE_TEST\"\n\t\tandroid:permissionGroup=\"android.permission-group.HARDWARE_CONTROLS\"\n\t\tandroid:protectionLevel=\"signature\"\n\t\tandroid:lable=\"@string/permlab_hardware_test\"\n\t\tandroid:description=\"@string/permadesc_hardware_test\" />\n```\n\n\t\t\tShare Process UID\n\n```xml\n\t\t\t\tandroid:sharedUserId=\"xxxx\"\n```\n\n\t\tProcess间Share UID的目的是共享资源等 (如:/data/data/A包名/目录下面)\n\t\tAndroid中两个APK Share相同的UID必须其签名所用的Private Key一样.\n\n### 1.6.3.身份ID和升级的匹配\n\tAndroid中的自签名只是代表了身份,但不代表身份是否可信任\n\tAndroid的应用的标识符是Package Name\n\t\tPackage Name不一样,相互不影响,允许同时存在(安装)\n\t\tPackage Name一样,只能存在一个,允许做升级处理.\n\t升级的安全性考虑\n\t\t必须签名的证书一致(防假冒,防侵入隐私)\n\t\t如果不一致,则用户要么放弃新的应用,要么先卸载旧的,再安装新的.但这属于安装,不属于升级\n\t\t正常的升级将不擦除应用的工作目录数据,以保证历史数据的持续性.\n\n\n## 1.7Android APK之METAINF\n\n\t\tAPK结构\n\n![apk结构](/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/001.png)\n\n\t\tMETA INF的组成\n\n![METAINF结构](/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/002.png)\n\n\t\t签名流程\n\n```shell\n\tjava -jar signapk.jar testkey.x509.pem testkey.pk8 update.apk update-signed.apk\n```\n\n\t\t\t\t这条命令的意思是:通过signapk.jar这个可执行jar包，以“testkey.x509.pem”这个公钥文件\n\t\t\t\t\t\t 和“testkey.pk8”这个私钥文件对“update.apk”进行签名，签名后的文件保存为“update_signed.apk”\n\t\t\t\t详情可阅:[Android APK 签名比对](http://www.blogjava.net/zh-weir/archive/2011/07/19/354663.html)\n\t\t\t\n\t\t\tMANIFEST.MF文件 (第一重保护,本文本里面包含apk的资源文件的每个文件的SHA1值)\n\n![METAINF结构](/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/003.png)\n\n\t\t\tCERT.SF文件 (第二重保护,本文本里面包含MANIFEST.MF里的所有内容,并包含有MANIFEST.MF的SHA1-Digest-Manifest)\n\n![METAINF结构](/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/004.png)\n\n\t\t\tCERT.RSA (第三重保护,此文件是一个PKCS#7格式的文件,\n\t\t\t\t里面包含证书信息,以及基于私钥的签名信息,\n\t\t\t\t签名信息是由整个CERT.SF文件的做一个基于sha1(160bit)+rsa(testkey.pk8,publicKey)生成)\n\n![METAINF结构](/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/005.png)\n\n---\n\n# 2.Android中的权限\n\t\n## 2.1 Android的权限作用\n\t细粒度特权管理\n\t\t权限与操作关联\n\t\t应用需要显式申请权限\n\t\t用户对权限可知(不可控) (也可通过LBE,腾讯管家,360等可进行权限控制)\n\t\t对特权权限单独控制\n\n## 2.2 Android的权限类别\n\tNormal 没那么敏感\n\tDangerous 比较敏感的,安装时会被列举出来.\n\tSignature 基于特殊权限的权限(申请权限的apk它的签名的私钥必须要跟定义这个权限的私钥一致)\n\tSignatureOrSystem  申请权限的apk它的签名的私钥必须要跟定义这个权限的私钥一致或者apk是系统应用\n\n## 2.3 Android的权限定义方式\n\n```xml\n   <!-- Allows an application to monitor incoming SMS messages, to record or perform processing on them. -->\n    <permission android:name=\"android.permission.RECEIVE_SMS\"\n\t\t\t\tandroid:permissionGroup=\"android.permission-group.MESSAGES\"\n\t\t\t\tandroid:protectionLevel=\"dangerous\"\n\t\t\t\tandroid:label=\"@string/permlab_receiveSms\"\n\t\t\t\tandroid:description=\"@string/permdesc_receiveSms\" />\n\n\t\t\t\t<!--name 权限名称\n\t\t\t\tpermissionGroup 权限组\n\t\t\t\tprotectionLevel 权限类别\n\t\t\t\tlabel 安装时用户可查看到的信息,提示申请当前权限的作用\n\t\t\t\tdescription 显示给用户的申请权限的详细概述-->\n```\n\n[源代码frameworks/base/core/res/AndroidManifest.xml](http://osdn.jp/projects/gb-231r1-is01/scm/git/Gingerbread_2.3.3_r1_IS01/blobs/master/frameworks/base/core/res/AndroidManifest.xml)\n\n\n## 2.4 Android的运行时权限控制方式\n\n\t通过PM的CheckPermission\n\t\tAndroid独有的Service(底层平台不具有)\n\t\t所以需要在Android本身Framework中控制\n\t\t主流的Service一般都基于Binder IPC或者其他IPC提供服务\n\t\t所以在最底层控制(Service所在的Server中)以避免逃逸控制\n\t\t\t绕开应用函数直接调用远程服务\n\t\t例子:(mContext.checkCallingOrSelfPermission(permission) == PackageManager.PERMISSION_GRANTED)\n\t\t\t\n\t映射为OS的特定属性\n\t\t非Android特有的Service(底层平台已经提供,如File访问,TCPIP数据收发等)\n\t\t多个入口访问ndroidAPI,Java API NDK C API , Shell , et:Ac\n\t\t底层控制准则,会聚口在底层,所以在底层(OS层面)统一控制,这样可以避免逃逸控制\n\t\t所以复用OS的一些安全控制特性,比如GID\n\t\t所以需要把Android空间的Permission Mapping到OS的GID\n\t\t\n```shell\n\t进入到手机SDCard里发现GID都是sdcard_rw\n\tshell@android:/storage/sdcard0 $ ls -l\n\tls -l\n\t\t      UID      GID\n\tdrwxrwxr-x system   sdcard_rw          2014-12-15 18:03 Android\n\tdrwxrwxr-x system   sdcard_rw          2015-03-18 16:09 BaiduMapSdk\n\tdrwxrwxr-x system   sdcard_rw          2014-06-30 10:04 BaoDownload\n\tdrwxrwxr-x system   sdcard_rw          2014-07-07 17:33 Cache\n\tdrwxrwxr-x system   sdcard_rw          2014-12-15 18:03 CloudDrive\n\tdrwxrwxr-x system   sdcard_rw          2015-03-20 11:33 DCIM\n\tdrwxrwxr-x system   sdcard_rw          2014-12-15 18:02 Download\n\tdrwxrwxr-x system   sdcard_rw          2015-03-04 12:05 ExtDataTunnel\n```\n\n```xml\n\t<uses-permission\n\tandroid:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n```xml\n\t<!--当开发者增加上条权限时会程序会自动增加这条信息. 本信息来源:frameworks/base/data/etc/platform.xml-->\n\t<permission name=\"android.permission.WRITE_EXTERNAL_STORAGE\">\n\t\t<group gid=\"sdcard_rw\" />\n\t</permission>\n```\n\n```shell\n\t/*进程所占内存proc pid status*/\n\tshell@android:/proc/5914 # cat status\n\tcat status\n\tName:   n.ledinside.app /*进程的程序名*/\n\tState:  S (sleeping) /*进程的状态信息*/\n\tTgid:   5914 /*线程组号*/\n\tPid:    5914 /*进程pid*/\n\tPPid:   148 /*父进程的pid*/\n\tTracerPid:      0 /*跟踪进程的pid*/\n\tUid:    10075   10075   10075   10075 /*uid euid suid fsuid*/\n\tGid:    10075   10075   10075   10075 /*gid egid sgid fsgid*/\n\tFDSize: 256 /*文件描述符的最大个数，file->fds*/\n\tGroups: 1015 1028 3003/*启动该进程的用户所属的组的id*/\n\tVmPeak:   354256 kB /*进程地址空间的大小*/\n\tVmSize:   301964 kB /*进程虚拟地址空间的大小reserved_vm：进程在预留或特殊的内存间的物理页*/\n\tVmLck:         0 kB /*进程已经锁住的物理内存的大小.锁住的物理内存不能交换到硬盘*/\n\tVmPin:         0 kB\n\tVmHWM:     63052 kB /*文件内存映射和匿名内存映射的大小*/\n\tVmRSS:     33884 kB /*应用程序正在使用的物理内存的大小，就是用ps命令的参数rss的值 (rss)*/\n\tVmData:    30484 kB /*程序数据段的大小（所占虚拟内存的大小），存放初始化了的数据*/\n\tVmStk:       136 kB /*进程在用户态的栈的大小*/\n\tVmExe:         8 kB /*程序所拥有的可执行虚拟内存的大小,代码段,不包括任务使用的库 */\n\tVmLib:     28068 kB /*被映像到任务的虚拟内存空间的库的大小*/\n\tVmPTE:       150 kB /*该进程的所有页表的大小*/\n\tVmSwap:        0 kB\n\tThreads:        15 /*共享使用该信号描述符的任务的个数*/\n\tSigQ:   0/3133 /*待处理信号的个数/目前最大可以处理的信号的个数*/\n\tSigPnd: 0000000000000000 /*屏蔽位，存储了该线程的待处理信号*/\n\tShdPnd: 0000000000000000 /*屏蔽位，存储了该线程组的待处理信号*/\n\tSigBlk: 0000000000001204 /*存放被阻塞的信号*/\n\tSigIgn: 0000000000000000 /*存放被忽略的信号*/\n\tSigCgt: 00000002000094e8 /*存放被俘获到的信号*/\n\tCapInh: 0000000000000000 /*能被当前进程执行的程序的继承的能力*/\n\tCapPrm: 0000000000000000 /*进程能够使用的能力，可以包含CapEff中没有的能力，这些能力是被进程自己临时放弃的*/\n\tCapEff: 0000000000000000 /*是CapPrm的一个子集，进程放弃没有必要的能力有利于提高安全性*/\n\tCapBnd: ffffffffffffffff\n\tCpus_allowed:   3 /*可以执行该进程的CPU掩码集*/\n\tCpus_allowed_list:      0-1\n\tvoluntary_ctxt_switches:        223 /*进程主动切换的次数*/\n\tnonvoluntary_ctxt_switches:     406 /*进程被动切换的次数*/\n```\n\t\n```xml\n\t<!--Groups中1015正好对应的是SDCARD_RW-->\n\t#define AID_MEDIA         1013  /* mediaserver process */\n\t#define AID_DHCP          1014  /* dhcp client */\n\t#define AID_SDCARD_RW     1015  /* external storage write access */\n\t#define AID_VPN           1016  /* vpn system */\n\t#define AID_KEYSTORE      1017  /* keystore subsystem */\n\t#define AID_USB           1018  /* USB devices */\n\n```\n\n## 2.5 Android的Permission与UID/GID的mapping\n\n\t语法:\n\t\tUID assigning permission: \n\t\t\t< assign-permission name=\"permission_name\" uid=\"target_uid\" />\n\t\tGIDs Mapping:\n\t\t\t<permission name=\"permission_nema\" >\n\t\t\t<group gid=\"assigned gid\" />\n\t\t\t<group gid=\"assigned gid\" />\n\t\t\t.....\n\t\t\t</permission>\n\t发生时刻:安装时\n\tetc/permissions\n\t\t任何符合以上语法的在system/etc/permissions下面的xml文件,都会被系统读取来parse并进行UID/GID的mapping.\n\t\t比如Platform.xml(check代码)\n\n[frameworks/base/data/etc/platform.xml](http://osdn.jp/projects/gb-231r1-is01/scm/git/Gingerbread_2.3.3_r1_IS01/blobs/master/frameworks/base/data/etc/platform.xml)\n\n\t\t安全性\n\t\t\t任何应用都可以为自己的permission assign GID? \n\t\t\t\t当然不行! 只有Root用户才允许新增或者改写.\n\t\t\t\t并且对于ROOT用户组的用户也只有r权限\n\t\t\t\t如下为手机system/etc/permissions目录下的文件权限\n\n```shell\n\n\tshell@android:/system/etc # ls -l\t\n\t....\n\tdrwxr-xr-x root     root              2013-07-09 21:54 permissions\n\t....\n\tshell@android:/system/etc # cd permissions\n\tshell@android:/system/etc/permissions # ls -l platform.xml\n\t-rw-r--r-- root     root         9466 2008-08-01 20:00 platform.xml\n\n```\n\n---\n\n# 3.Android中的组件的安全机制\n\t\t\n\tAndroid的4大组件及组件间的通信\n\t组件的public和private\n\t组件的权限分配\n\n## 3.1 组件的权限分配(demo)\n\n### 3.1.1.Activity\n\n\t服务端增加相应的权限:\n\t\t\n```xml\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t    package=\"com.tu.test.diyPermission\"\n\t    android:versionCode=\"1\"\n\t    android:versionName=\"1.0\" >\n\n\t    <uses-sdk\n\t\tandroid:minSdkVersion=\"8\"\n\t\tandroid:targetSdkVersion=\"19\" />\n\n\t    <!-- 自定义Activity权限 start -->\n\t    <permission android:name=\"com.tu.test.diyPermission.DIYPERMISSION\" />\n\t    <!-- 自定义Activity权限 end -->\n\n\t    <application\n\t\tandroid:allowBackup=\"true\"\n\t\tandroid:icon=\"@drawable/ic_launcher\"\n\t\tandroid:label=\"@string/app_name\" >\n\t\t<activity\n\t\t    android:name=\"com.tu.test.diyPermission.MainActivity\"\n\t\t    android:label=\"@string/app_name\" >\n\t\t    <intent-filter>\n\t\t\t<action android:name=\"android.intent.action.MAIN\" />\n\t\t\t<category android:name=\"android.intent.category.LAUNCHER\" />\n\t\t    </intent-filter>\n\t\t</activity>\n\t\t<!-- 自定义Activity权限 start -->\n\t\t<activity\n\t\t    android:name=\".NewPageActivity\"\n\t\t    android:exported=\"true\"\n\t\t    android:permission=\"com.tu.test.diyPermission.DIYPERMISSION\" >\n\t\t    <intent-filter>\n\t\t\t<action android:name=\"com.tu.test.diyPermission.NewPageActivity\" />\n\t\t\t<category android:name=\"android.intent.category.DEFAULT\" />\n\t\t    </intent-filter>\n\t\t</activity>\n\t\t<!-- 自定义Activity权限 end -->\n\t    </application>\n\t</manifest>\n```\n\n\t客户端必须申请许可:\n\t否则会抛出:\n\n\t\tjava.lang.SecurityException: Permission Denial: starting Intent { \n\t\t\tact=com.tu.test.diyPermission.NewPageActivity cmp=com.tu.test.\n\t\t\tdiyPermission/.NewPageActivity (has extras) } from ProcessRecord\n\t\t\t{41efe3e8 8642:com.tu.test.diyPermission.client/u0a204} (pid=8642,\n\t\t\tuid=10204) requires com.tu.test.diyPermission.DIYPERMISSION\n\n```xml\n\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t    package=\"com.tu.test.diyPermission.client\"\n\t    android:versionCode=\"1\"\n\t    android:versionName=\"1.0\" >\n\n\t    <uses-sdk\n\t\tandroid:minSdkVersion=\"8\"\n\t\tandroid:targetSdkVersion=\"19\" />\n\n\t    <!-- 申请应用DiyPermission中的自定义Activity权限 start -->\n\t    <uses-permission android:name=\"com.tu.test.diyPermission.DIYPERMISSION\" />\n\t    <!-- 申请应用DiyPermission中的自定义Activity权限 end -->\n\n\t    <application\n\t\tandroid:allowBackup=\"true\"\n\t\tandroid:icon=\"@drawable/ic_launcher\"\n\t\tandroid:label=\"@string/app_name\" >\n\t\t<activity\n\t\t    android:name=\"com.tu.test.diyPermission.client.MainActivity\"\n\t\t    android:label=\"@string/app_name\" >\n\t\t    <intent-filter>\n\t\t\t<action android:name=\"android.intent.action.MAIN\" />\n\t\t\t<category android:name=\"android.intent.category.LAUNCHER\" />\n\t\t    </intent-filter>\n\t\t</activity>\n\t    </application>\n\n\t</manifest>\n```\n\n### 3.1.2.service\n\t\n\t服务端增加相应的权限:\n\n```xml\n\t<manifest ...>\n\t    <permission\n\t\tandroid:name=\"com.tu.test.diyPermission.DIYPERMISSION_SERVICE\"\n\t\tandroid:label=\"diy Permission service\" \n\t\tandroid:description=\"@string/hello_world\"/>\n\n\t\t <application ...>\n\t\t\t....\n\t\t\t <service\n\t\t\t    android:name=\".service.NewService\"\n\t\t\t    android:enabled=\"true\"\n\t\t\t    android:exported=\"true\"\n\t\t\t    android:permission=\"com.tu.test.diyPermission.DIYPERMISSION_SERVICE\" >\n\t\t\t    <intent-filter>\n\t\t\t\t<action android:name=\"com.tu.test.diyPermission.SERVICE_ACTION\" />\n\t\t\t    </intent-filter>\n\t\t\t</service>\n\t\t </application>\n\t </manifest>\n```\n\t\n\t\t\t客户端必须申请许可:\n\t\t\t否则会抛出:\n\t\t\t\tCaused by: java.lang.SecurityException: \n\t\t\t\t\tNot allowed to bind to service Intent { act=com.tu.test.diyPermission.SERVICE_ACTION }\n\n```xml\n\t<uses-permission android:name=\"com.tu.test.diyPermission.DIYPERMISSION_SERVICE\" />\n```\n\n### 3.1.3.ContentProvide\n\n\t服务端增加相应的权限:\n\t\t读,写,访问权限.\n\n```xml\t\n\n\t<manifest ...>\n\t\t<permission android:name=\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER\" />\n\t\t<permission android:name=\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_WRITE\" />\n\t\t<permission android:name=\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_READ\" />\n\n\t\t <application ...>\n\t\t\t....\n\t\t\t <provider\n\t\t\t    android:name=\".provider.NewContentProvider\"\n\t\t\t    android:exported=\"true\"\n\t\t\t    android:authorities=\"com.tu.test.diyPermission.providers.PersonProvider\"\n\t\t\t    android:readPermission=\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_READ\"\n\t\t\t    android:writePermission=\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_WRITE\"\n\t\t\t    android:permission=\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER\" />\n\t\t </application>\n\t </manifest>\n```\n\n\t\t\t客户端必须申请许可:\n\t\t\t否则会抛出:\n\t\t\t\tCaused by: java.lang.SecurityException: Permission Denial: opening provider \n\t\t\t\tcom.tu.test.diyPermission.provider.NewContentProvider from ProcessRecord{4236abd0\n\t\t\t\t22086:com.tu.test.diyPermission.client/u0a204} (pid=22086, uid=10204) requires \n\t\t\t\tcom.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_READ or com.tu.test.\n\t\t\t\tdiyPermission.DIYPERMISSION_CONTENTPROVIDER_WRITE\n\n```xml\n\n\t<uses-permission android:name=\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER\" />\n\t<uses-permission android:name=\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_WRITE\" />\n\t<uses-permission android:name=\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_READ\" />\n\n```\n\n### 3.1.4.BroadcastReceiver\n\t服务端增加权限:\n\n```xml\t\t\n\n\t<manifest ...>\n\t\t....\n\t\t <permission android:name=\"com.tu.test.diyPermission.BROADCESTRECEIVER\" />\n\t\t<application ...>\n\t\t\t....\n\t\t  <receiver\n\t\t    android:name=\".receiver.NewReceiver\"\n\t\t    android:permission=\"com.tu.test.diyPermission.BROADCESTRECEIVER\" >\n\t\t    <intent-filter>\n\t\t\t<action android:name=\"com.tu.test.diyPermission.BROADCESTRECEIVER_ACTION\" />\n\t\t\t<category android:name=\"android.intent.category.DEFAULT\" />\n\t\t    </intent-filter>\n\t\t</receiver>\n\t\t  </application>\n\t</manifest>\n\n```\n\n\t\t\t客户端必须申请许可:\n\t\t\t\t否则服务端周日接收不到信息\n\n```xml\t\t\n <uses-permission android:name=\"com.tu.test.diyPermission.BROADCESTRECEIVER\" />\n```\n\n\n# 4.应用安装\n\t\n## 4.1.应用安装的安全性考虑和调用方式\n\t应用安装是一个高特权/风险操作,所以必须是可知/可控,主流实现方式:客户只能委派而不能直接操作.\n\t调用安装传统模式: 发送Intent给系统的Package Install app\n\n```java\n\t\t\tIntent intent = new Intent();\n\t\t\tintent.setAction(Intent.ACTION_VIEW);\n\t\t\tintent.setDataAndType(Uri.fromFile(file), \"application/vnd.android.package-archive\");\n\t\t\tintent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n\t\t\tstartActivity(intent);\n```\n\n\t\t特权安装模式:系统的Package Install App内部会调用PackageManagerService的Install Package,\n\t\t\t该操作与android.permission.INSTALL_PACKAGES 绑定,且该peimission的protection level是 signature|system\n\t\t\n\t\t所谓的静默安装方式只存在Root手机上,开发者可以选择:\n\t\t\t基于pm cmd : pm install -r\n\n## 4.2.应用安装流程之UID/GID的分配\n\n\t\t基于Android4.3原代码目录\n\t\tframeworks/base/services/java/com/android/srver/pm/PackageManagerService.java\n\n```java\t\t\n\t//installPackage 将会调用 scanPackageLI\n\n\tprivage PackageParser.Package scanPackageLI(PackageParser.Package pkg,int parseFlags,int scanMode,log currentTime,UserHandle user){\n\t\t....\n\t\tpkgSetting = mSettings.getPackageLPw(pkg,origPackage,realName,suid,destCodeFile,destResourceFile,pkg.applicationInfo.nativeLibraryDir,pkg.applicationInfo.flags,user,false);\n\t\t.....\n\t\tpkg.applicationInfo.uid = pkgSetting.appId;//说明是由Settings里面产生Uid,获取到appId\n\t\t....\n\t\t//invoke installer to do the actual installation \n\t\tint ret = createDataDirsLI(pagName,pkg.applicationInfo.uid,pkg.applicationInfo.seinfo);//创建工作目录和权限设置\n\t}\n```\n\t\t\n\t\tfameworks/base/services/java/com/android/server/pm/Settings.java\n\n\n```java\t\t\n\tprivate PackageSetting getPackageLPw(String name,PackageSetting origPackage,String realName,SharedUserSetting shardUser,File codePath,File resourcePath,String nativeLibraryPathString,int vc,int pkgFlags,UserHandle installUser,Boolean add , boolean allowlnstall){\n\t\tPackageSetting p = mPackages.get(name);\n\t\tif(p!=null){\n\t\t\tif(!p.codePath.equals(codePath)){\n\t\t\t\t//check to see if its a disabled syste\n\t\t\t\t.....\n\t\t\t}else{\n\t\t\t\t//Assign new user id\n\t\t\t\tp.appId = newUserIdLPw(p);//分配Uid\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//分配Uid的方法\n\tprivate int newUserIdLPw(Object obj){\n\t\t//Let's be stupidly inefficient for now...\n\t\tfinal int N = mUserIds.size();\n\t\tfor(int i = 0;i<N;i++){\n\t\t\tif(mUserIds.get(i)==null){\n\t\t\t\tmUserIds.set(i,obj);\n\t\t\t\treturn Process.FIRST_APPLICATION_UID + i;//这就为什么用户安装的uid都是大于10000的原因.\n\t\t\t}\n\t\t}\n\t\t//None left?\n\t\tif(N>(Process.LAST_APPLICATION_UID-Process.FIRST_APPLICATION_UID)){\n\t\t\treturn -1;\n\t\t}\n\t\tmUserIds.add(obj);\n\t\treturn Process.FIRST_APPLICATION_UID+N;\n\t}\n\n\tframeworks/base/core/java/android/os/Process.java\n\tpublic static final int FIRST_APPLICATION_UID=10000;//这就为什么用户安装的uid都是大于10000的原因.\n```\n\n## 4.3.应用安装流程之工作目录的创建和权限设置\n\n\tframeworks/base/services/java/com/android/server/pm/PackageManagerService.java\n\n```java\t\t\n\t\n\tprivate int createDataDirsLI(String packageName,int uid,String seinfo){\n\t\tint [] users = sUserManager.getUserIds();\n\t\tint res = mlnstaller.install(packageName,uid,uid,seinfo);//从这里可以看出uid gid都被设置成uid\n\t\tif(res<0){\n\t\t\treturn res;\n\t\t}\n\t\t//only for multi-user//Android 4.1之后支持多用户\n\t\tfor(int user: users){\n\t\t\tif(user!=0){\n\t\t\t\tres = mlnstaller.createUserData(packageName,UserHandle.getUid(user,uid),user);\n\t\t\t\tif(res<0){\n\t\t\t\t\treturn res;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n\n```\n\t\t\n\tframeworks/base/services/java/com/anddroid/server/pm/Installer.java\n\t\t\n```java\t\t\n\t\n\tprivate boolean connect(){//Installer一起来会进行初始化\n\t\tif(mSocket!=null){\n\t\t\treturn true;\n\t\t}\n\t\ttry{\n\t\t\tmSocket = new LocalSocket();\n\t\t\t//本地Socket\n\t\t\tLocalSocketAddress address = new LocalSocketAddress(\"installd\",LocalSocketAddress.Namespace.RESERVED);\n\t\t\tmSocket.connect(address);\n\t\t\tmIn = mSocket.getInputStream();\n\t\t\tmOut = mSocket.getOutputStream();\n\t\t}catch(IOException ex){\n\t\t\tdisconnect();\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate int install(String name,int uid , int gid , String seinfo){\n\t\t//内部协议\n\t\tStringBuilder builder = new StringBuilder(\"install\");\n\t\tbuilder.append('');\n\t\tbuilder.append(name);\n\t\tbuilder.append('');\n\t\tbuilder.append(uid);\n\t\tbuilder.append('');\n\t\tbuilder.append(gid);\n\t\tbuilder.append('');\n\t\tbuilder.append(seinfo!=null?seinfo:\"!\");\n\t\treturn execute(builder.toString());//会调用mOut mIn发数据\n\t}\n\n```\n\n\tframeworks/native/cmds/installd/installd.c\n\n```c\t\n\t\t\t\n\t\tint main(const int argc, const char *argv[]) {   //here the SOCKET_PATH is installd\n\t\t\t..........\n\t\t\tlsocket = android_get_control_socket(SOCKET_PATH);\n\t\t\tif (listen(lsocket, 5)) {}\n\t\t\t fcntl(lsocket, F_SETFD, FD_CLOEXEC);\n\t\t\t for (;;) {\n\t\t\t\talen = sizeof(addr);\n\t\t\t\ts = accept(lsocket, &addr, &alen);\n\t\t\t\tfcntl(s, F_SETFD, FD_CLOEXEC);\n\n\t\t\t\tif(readx(s,buf,count)){}\n\t\t\t\tif(execute(s,buf))break;\n\t\t\t}\n\t\t}\n\n\t\tstatic int do_install(char **arg, char reply[REPLY_MAX])\n\t\t{\n\t\t    return install(arg[0], atoi(arg[1]), atoi(arg[2]), atoi(arg[3])); /* pkgname, uid, gid */\n\t\t}\n```\n\n\tframework/native/cmds/installd/commands.c\n\n```c\t\n\n\tint install(const char *pkgname, int encrypted_fs_flag, uid_t uid, gid_t gid){\n\t\t.....\n\t\tif(create_pkg_path(pkgdir,pkgname,PKG_DIR_POSTEIX,0)){//创建工作目录结构,/data/data/包名/\n\t\t\tALOGE(\"cannot create package path\\n\");\n\t\t\treturn -1;\n\t\t}....\n\t\tif (mkdir(pkgdir, 0751) < 0) {//创建目录,并设置权限 0751 uid7(4+2+1)读写执行,gid5(4+1)读执行,其它1(1)执行\n\t\t\tALOGE(\"cannot create dir '%s': %s\\n\", pkgdir, strerror(errno));\n\t\t\treturn -1;\n\t\t}\n\t\tif (chmod(pkgdir,0751) < 0) {//再设置一次权限\n\t\t\tALOGE(\"cannot chmod dir '%s': %s\\n\", pkgdir, strerror(errno));\n\t\t\tunlink(pkgdir);\n\t\t\treturn -errno;\n\t\t}.....\n\t\tif(chown(pkgdir,uid,gid)<0){//因设置权限时是使用root用户,些处再进行权限修改.把uid root , gid root 修改成应用的uid,与gid.\n\t\t.....\n\t\t}\n\t}\n```\n\n# 5.Android中系统Service的安全\n\t\n## 5.1 Binder的安全\t\n\tBinder的作用:实现以IPC的RPC,完成远程业务范围.\n\n[Android进程间通信（IPC）机制Binder简要介绍和学习计划](http://blog.csdn.net/luoshengyang/article/details/6618363)\n\n[SEAndroid安全机制对Binder IPC的保护分析](http://blog.csdn.net/luoshengyang/article/details/38326729)\n\n## 5.2 ServiceManager Add Service的安全限制\n\tService Manager Process的作用: Naming Resolver,用于RPC框架中 AddService  GetSetvice\n\t\n\n## 5.3 Zygote的Process Fork\n\n[Android系统进程Zygote启动过程的源代码分析](http://blog.csdn.net/luoshengyang/article/details/6768304)\n\n[Android深入浅出之Zygote](http://www.cnblogs.com/innost/archive/2011/01/26/1945769.html)\n\n## 5.4 Zygote的Socket安全检查\n\n[空]()\n\n\n# 6.Android中的ContentProvider以及基于URI的安全\n\t\n## 6.1.ContentProvider的作用\n\t\n### 6.1.1.软件设计更优美(官方)\n\t屏蔽内部数据存储操作的差异性\n\t对外提供一致的数据操作方式\n\t抽象/共性---->都是数据操作\n\n### 6.1.2.进程间数据共享\n\t\t   Proxy|        Binder              |  Content Provider\n\tclient Process  ------------------------------- > Service Process \n\n## 6.2.权限临时继承的需求\n\t临时委派使得委托者的权限临时提升(类似Root-setUID模式)\n\n\n## 6.3.配置ContentProvider允许临时委派权限\n\n```xml\t\n\t<provider \n\t\tandroid:readPermission=\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_READ\"\n\t\tandroid:grantUriPermissions=\"true\" />\n\t\t<!--允许派遣给uri-->\n\t\t<provider ...>\n\t\t\t....\n\t\t\t<grant-uri-permission android:path=\"/comtu/\"/>\n\t\t\t<!--允许派遣给限制URI的路径-->\n\t\t</provider>\n\t\t<provider ...>\n\t\t\t....\n\t\t\t<grant-uri-permission android:pathPrefix=\"/abc/\"/>\n\t\t\t\t\t<!--允许派遣给限制URI的路径前缀-->\n\t\t</provider>\n\t\t<provider ...>\n\t\t\t....\n\t\t\t<grant-uri-permission android:pathPattern=\".*public.*\"/>\n\t\t\t<!--允许派遣给限制URI的路径通过正则-->\n\t</provider>\n```\n\n## 6.4.基于URI的权限临时委派\n\n### 6.4.1 基于API\n\n```java\t\t\n\t\t//委派uri权限临时委派给com.example.testapps.test2,权限为FLAG_GRANT_READ_URI_PERMISSION\n\t\turi = \"content://com.example.testapps.test1.mailprovider/attachments/42\";\n\t\tContext.grantUriPermission(\"com.example.testapps.test2\",uri,Intent.FLAG_GRANT_READ_URI_PERMISSION);\n\n\t\t//一定时间之后将收回委派的权限.否则可能存在安全隐患.需要思考的时什么时候收回.\n\t\turi = \"content://com.example.testapps.test1.mailprovider/attachments/42\";\n\t\tContext.revokeUriPermission(uri,Intent.FLAG_GRANT_READ_URI_PERMISSION);\n```\n\n### 6.4.2 基于Intent\n\n```java\t\t\n\t\t\tIntent intent = new Intent(Intent.ACTION_VIEW);\n\t\t\tintent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n\t\t\tintent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n\t\t\tintent.setDataAndType(uri,\"image/gif\");\n\t\t\tstartActivity(intent);\n```\n\n\t权限的生命周期: Activity Start --> Destro即Activity的生命周期\n\n# 7.Android的Policy模式和多设备绑定\n\n## 7.1.Android的Policy模式\n\t一个移动平台它解决用户隐私,相当的一系列控制或者说是跟用户的交互模式.\n\t安装时安全提问\n\t\t列出所有权限,提示用户是否安装.\n\n\t\tAll or Nothing \n\t\tNone Runtime Control \n\t\tNone Recallable \n\t\tDisable untrust source by default \n\n## 7.2.MR2开始的AppOps(安卓4.3开始)\n\t如 LBE 等安全卫士控制权限\n\n\t>基于AppOps Service\n\t>定义Ignore , Allow Reject 3种Policy\n\t>Hook and check Permission\n\n\t\n## 7.3AppOps对开发者的影响\n\t开发者已经申请权限时,但被LBE等安全卫士等的权限限制.\n\t\t会导致权限一样获取不到.为了代码健壮性,需加多一些try catch.防止异常\n\n## 7.4设备绑定\n\t应用与设备绑定的需求前景\n\t\t如,计费应用.\n\t\t\n\t>同时基于SIM卡和Device的绑定(如BREW下载,单机内的下载卡可用.基于SIM卡计费,运营商间排斥)\n\t>仅基于Device的绑定(如Google Store下载,当时下载的Device可用)\n\t>实现: 加密 per device per SIM卡\n\t\tDevice Key: ESN/MEID/IMEI or random generate\n\t\tSIM ID : IMSI\n\t\n## 7.5跨设备使用\n\t基于Account ID的云端管理\n\tDevice1 --buy it using xx@x.x account -->AppStore<----Down load freely--(Register as xx@x.x) --Device2\n\n\n# 8.应用内计费和App2SDCard\n\n## 8.1 应用内计费\n\t什么是应用内计费\n\t\tIn App purchase or In app Billing(IAP,IAB)\n\t\t直接在应用内进行Paymen以unLock某些功能,或者买某些道具等\n\t应用内计费的需求\n\t\t可支付途径(信用卡,手机卡等)\n\t\t安全性:\n\t\t\t面向用户\n\t\t\t\t可知\n\t\t\t\t可控\n\t\t\t面向应用\n\t\t\t\t可信(避免免费使用收费内容)\n\n\t解决方案\n\t\t>计费Server接口保密且Transiction加密(SSL)\n\t\t>仅允许配套的安全本地组件与计费Server通信,且安全本地组件负责\n\t\t\t与用户的\"显式\"交互,同时提供API给Client\n\t\t>Clent仅允许调用本地计费安全组件来委派Transiction\n\t\t>Response的signature + Nounce (防止重放攻击)\n\n\n## 8.2 SD卡安装应用的安全策略\t\n\t绑定设备\n\t\t>绑定perDevice使得防Export:应用以及应用数据(SD卡允许Export)\n\t\t>以加密实现之:例子,应用安装至SD卡(.Android_Secure in SDCard)\n\n\tASEC的不可访问性\n\t\t由于.Android_Secure的加密特性,所以需要禁止应用直接Access该Folder(允许Access SDCard上的其他任何内容)\n\n\t\n# 9.Android中的多用户安全\n\n\t4.2开始可以支持\n\n## 9.1需求场景\n\t已有的例子/ Windows/Linux多用户\n\n\tAndroid中的差别\n\t\tUID/GID跟着User走\n\t\tUID/GID和User的区分和绑定\n\t应用的可控共享\n\t\t共享,不存在多份Code\n\t\t可控,控制谁可见.\n\t数据的多用户独立\n\t\t工作目录\n\t\tExternal Storage(外部存储器)\n\n## 9.2UserManagerService\n\t作用:\n\t\t管理User的属性信息: 设置/获取用户的UserId,Name,Icon,RestrictProfile等\n\t\t管理User:创建,删除等\n\t\n\tUserId(UserHandle)是Process的属性,不100%等同于当前设置切换的用户\n\t一切与多用户相关的运行时行为(比如Mount的SDCard等)与进程的UserID所属有关,\n\t\t而与当前设置中的当前用户没有必然联系\n\t典型的例子:\n\t\t通过adb shell的方式,永远只能访问User0的SDCard:/data/media/0,不管切换哪个用户\n\t\t通过文件管理器应用访问的SDCard则与当前用户相关.\n\t\t原因: adb shell只存在User0,不管在哪个当前设置用户下.\n## 9.3对开发者的影响\n\t\n\t永远使用相对路径(基于工作目录)以及基于Environment.getXXXX来获取你感兴趣的路径(Environment内部\n\t\t会处理多用户).否则会出现路径错误而访问被拒绝的问题.\n\n```java\t\n\t\tNew File(\"setting/setting.log\");\n\t\tNew File(Environment.getExternalStorageDirectory+\"SharePic/a.png\");\n```\n\n\n# 10.Android Superuser机制讲解\n\t\n## 10.1 ROOT的作用\n\tCustomization(定制,用户化)\n\t任何需要特权的操作\n\n## 10.2 ROOT的第一步:寻找漏洞并安装特权文件\n\tHack会寻找漏洞,如UID设置设备(ADB)\n\t手机Root后,最重要的是,给手机安装了su程序和superuser apk. su一般被安装在/system/xbin或者/system/bin\n\n## 10.3 SU的sUID的特性\n\tAndroid的App授权获取Root权限,其实不是App自身的权限提升了,而是通过具有Root权限的Sh流来执行shell命令.\n\n```shell\nshell@android:/system/xbin # ls su -l\nls su -l\n-rwsr-sr-x root     root        79500 2008-08-01 20:00 su\n```\n\t这里可以看到,su是Owner和Group分别为Root,Root.Other用户具有Execute权限,另外,su设置了suid和sgid,这个非常重要,\n\t\t使得Su进程可以提升自身的EUID.\n\n\n\n## 10.4 SU的核心代码分析\n\t在JB MR2(4.3)之前,Apk内部可以通过Java的Runtime执行一个\n\t\t具有Root-setUid的可执行文件而提升Effective UID来完成一些特权操作,典型的Root包中的su就是这个原理.\n\tJB MR2中,修补了改漏洞.\n\t\t\n## 10.5 MR2后的方案:SU Deamon Service\n\t怎么办? Native Service依然可以利用Root-setUID的su提升权限\n\t\n\n# 11.SEAndroid\n\t\n## 11.1 DAC和MAC\n\tDAC\n\t\t自主访问控制\n\t\t主体(Process)的Capability觉得了它能访问和操作什么?\n\t\t\tRoot进程可以访问和操作一切!\n\t\t传统(legacy)Linux的安全模式,基于UID/GID/Capability\n\tMAC \n\t\t强制访问控制\n\t\t系统的Policy觉得了主体能操作访问哪些客体\n\t\t即便是ROOT进程,系统Policy配置了你能做什么,你只能做什么,在MAC模式下,ROOT进程和普通进程是无区别对待的.\n\t\t \n## 11.2 基于Label的MAC\n\t每个主体/客体在运行时都绑定一个标签(Label)\n\t该标签又称为Security Context\n\tSecurity Context的构成\n\t\tUser : Role : Type : SecurityLevel\n\t\t比如: u:r:zygote:s0\n\tType Enhancement\n\t\tSecurity Context中的Type主要是用于Policy的设定,即Policy\n\t\t一般的Rule是:\n\t\t\tAllow Type Type : Operation\n\t\t\tAllow appdomain zygote_tmpfs:file read;\n\t\t所以,Type被实际用于\"授权\"的Decision,所以称之为Type Enhancement\n\tls命令的SELinux版本: ls -l -Z\n\n\tPs命令的SELinux版本: ps -Z\n\n\n## 11.3 推荐读物\n\n[Your visual how-to guide for SELinux policy enforcement](http://opensource.com/business/13/11/selinux-policy-guide)\n\n[SELinux实例：使用安全增强的Linux](http://book.51cto.com/art/200810/94193.htm)\n\t\n\t\t\n---\n\n# Demo下载\n\nAndroid中的组件的安全机制之组件的权限分配(Demo)    \nActivity Service ContentProvide BroadcastReceiver四大组件不同App数据通信:   \n[Demo](/res/file/blog/2014/10/27/android_safe_mode_mechanism_three/Permission.rar)\n\n\n","slug":"android_safe_mode_mechanism_three","published":1,"updated":"2016-04-27T07:55:36.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinu3ety0000zxoj0gshool86","content":"<style>\nh3 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nh6 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\n\n</style>\n\n<p>目录:</p>\n<ul>\n<li><p>1.移动平台中的主流签名作用</p>\n<ul>\n<li>1.1自签名的完整性鉴别</li>\n<li>1.2信任模式</li>\n<li>1.3限制安装/运行</li>\n<li>1.4权限的作用</li>\n<li>1.5权限的安全性保护</li>\n<li>1.6Android的签名作用</li>\n<li>1.7Android APK之METAINF</li>\n</ul>\n</li>\n<li><p>2.Android中的权限</p>\n<ul>\n<li>2.1Android的权限作用</li>\n<li>2.2Android的权限类别</li>\n<li>2.3Android的权限定义方式</li>\n<li>2.4Android的运行时权限控制方式</li>\n<li>2.5Android的Permission与UID/GID的mapping</li>\n</ul>\n</li>\n<li><p>3.Android中的组件的安全机制</p>\n<ul>\n<li>3.1组件的权限分配(Demo)<ul>\n<li>3.1.1 Activity</li>\n<li>3.1.2 Service</li>\n<li>3.1.3 ContentProvide</li>\n<li>3.1.4 BroadcastReceiver</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>4.Android应用安装</p>\n<ul>\n<li>4.1应用安装的安全性考虑和调用方式</li>\n<li>4.2应用安装流程之UID/GID的分配</li>\n<li>4.3应用安装流程之工作目录的创建和权限设置</li>\n</ul>\n</li>\n<li><p>5.Android中系统Service的安全</p>\n<ul>\n<li>5.1Binder的安全</li>\n<li>5.2ServiceManager Add Service的安全限制</li>\n<li>5.3Zygote的Process Fork</li>\n<li>5.4Zygote的Socket安全检查    </li>\n</ul>\n</li>\n<li><p>6.Android中的ContentProvider以及基于URI的安全</p>\n<ul>\n<li>6.1ContentProvider的作用</li>\n<li>6.2权限临时继承的需求</li>\n<li>6.3配置ContentProvider允许临时委派权限</li>\n<li>6.4基于URI的权限临时委派</li>\n</ul>\n</li>\n<li><p>7.Android的Policy模式和多设备绑定</p>\n<ul>\n<li>7.1Android的Policy模式</li>\n<li>7.2MR2开始的AppOps(安卓4.3开始)</li>\n<li>7.3AppOps对开发者的影响</li>\n<li>7.4设备绑定</li>\n<li>7.5跨设备使用</li>\n</ul>\n</li>\n<li><p>8.应用内计费和App2SDCard</p>\n<ul>\n<li>8.1应用内计费</li>\n<li>8.2SD卡安装应用的安全策略</li>\n</ul>\n</li>\n<li><p>9.Android中的多用户安全</p>\n<ul>\n<li>9.1需求场景</li>\n<li>9.2UserManagerService</li>\n<li>9.3对开发者的影响</li>\n</ul>\n</li>\n<li><p>10.Android Superuser机制讲解</p>\n<ul>\n<li>10.1ROOT的作用</li>\n<li>10.2ROOT的第一步:寻找漏洞并安装特权文件</li>\n<li>10.3SU的sUID的特性</li>\n<li>10.4SU的核心代码分析</li>\n<li>10.5MR2后的方案:SU Deamon Service</li>\n</ul>\n</li>\n<li><p>11.SEAndroid</p>\n<ul>\n<li>11.1DAC和MAC</li>\n<li>11.2基于Label的MAC</li>\n<li>11.3推荐读物</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n<hr>\n<h1 id=\"1-移动平台中的主流签名作用\"><a href=\"#1-移动平台中的主流签名作用\" class=\"headerlink\" title=\"1.移动平台中的主流签名作用\"></a>1.移动平台中的主流签名作用</h1><h2 id=\"1-1-自签名的完整性鉴别\"><a href=\"#1-1-自签名的完整性鉴别\" class=\"headerlink\" title=\"1.1 自签名的完整性鉴别\"></a>1.1 自签名的完整性鉴别</h2><pre><code>证书的签名者和证书拥有者是同一个实体---自签名\n    作为信任链的根证书.\n    完整性鉴别\n</code></pre><h2 id=\"1-2-信任模式\"><a href=\"#1-2-信任模式\" class=\"headerlink\" title=\"1.2 信任模式\"></a>1.2 信任模式</h2><pre><code>签名了?\n签名是可信的?\n可信任和普通应用的权利差异\n    人为的把一些操作归类\n    某类操作对于可信任应用和普通应用的表现不一样.\n</code></pre><h2 id=\"1-3-限制安装-运行\"><a href=\"#1-3-限制安装-运行\" class=\"headerlink\" title=\"1.3 限制安装/运行\"></a>1.3 限制安装/运行</h2><pre><code>应用安装时\n    是否包含签名?--&gt;没有?禁止安装\n    提取证书进行验证--&gt;证书是有效且可信任的吗?--&gt;不是?禁止安装\n    基于证书的公钥对签名进行验证--&gt;签名正确吗?--&gt;不正确?禁止安装\n应用运行时\n    是否包含签名?--&gt;没有?禁止运行\n    提取证书进行验证--&gt;证书是有效且可信任的吗?--&gt;不是?禁止运行\n    基于证书的公钥对签名进行验证--&gt;签名正确吗?--&gt;不正确?禁止运行\n</code></pre><h2 id=\"1-4-权限的作用\"><a href=\"#1-4-权限的作用\" class=\"headerlink\" title=\"1.4 权限的作用\"></a>1.4 权限的作用</h2><pre><code>细粒度的特权管理\n    权限是一个ID或者一个字符串\n    权限用来细分权利(类似Capability)\n    通常一个权限与一类操作绑定\n    权限首先需要申请\n    但申请后是否被批准由平台策略决定\n</code></pre><h2 id=\"1-5-权限的安全性保护\"><a href=\"#1-5-权限的安全性保护\" class=\"headerlink\" title=\"1.5 权限的安全性保护\"></a>1.5 权限的安全性保护</h2><pre><code>通过签名\n    权限的完整性保护:防篡改\n    权限的授权安全策略:防Escalate\n</code></pre><h2 id=\"1-6-Android的签名作用\"><a href=\"#1-6-Android的签名作用\" class=\"headerlink\" title=\"1.6 Android的签名作用\"></a>1.6 Android的签名作用</h2><h3 id=\"1-6-1-完整性鉴别\"><a href=\"#1-6-1-完整性鉴别\" class=\"headerlink\" title=\"1.6.1.完整性鉴别\"></a>1.6.1.完整性鉴别</h3><pre><code>支持自签名用于完整性鉴别\n不做信任模式\n不做安装和运行时的限制\n</code></pre><h3 id=\"1-6-2-Signature-Permision和ShareUID\"><a href=\"#1-6-2-Signature-Permision和ShareUID\" class=\"headerlink\" title=\"1.6.2.Signature Permision和ShareUID\"></a>1.6.2.Signature Permision和ShareUID</h3><pre><code>Signature Protection Level Permision\n    用于特权Permission\n    只有特定签名的Apk才被授权\n\n        例如:\n</code></pre><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--访问硬件辅助设备,用于硬件测试 --&gt;</span><br><span class=\"line\">&lt;--allows access to hardware peripherals . Intended only for hardware testing . &lt;p&gt;Not for use by third-party applications.--&gt;</span><br><span class=\"line\">&lt;permission android:name=\"android.permission.HARDWARE_TEST\"</span><br><span class=\"line\">\tandroid:permissionGroup=\"android.permission-group.HARDWARE_CONTROLS\"</span><br><span class=\"line\">\tandroid:protectionLevel=\"signature\"</span><br><span class=\"line\">\tandroid:lable=\"@string/permlab_hardware_test\"</span><br><span class=\"line\">\tandroid:description=\"@string/permadesc_hardware_test\" /&gt;</span><br></pre></td></tr></table></figure>\n<pre><code>Share Process UID\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:sharedUserId=\"xxxx\"</span><br></pre></td></tr></table></figure>\n<pre><code>Process间Share UID的目的是共享资源等 (如:/data/data/A包名/目录下面)\nAndroid中两个APK Share相同的UID必须其签名所用的Private Key一样.\n</code></pre><h3 id=\"1-6-3-身份ID和升级的匹配\"><a href=\"#1-6-3-身份ID和升级的匹配\" class=\"headerlink\" title=\"1.6.3.身份ID和升级的匹配\"></a>1.6.3.身份ID和升级的匹配</h3><pre><code>Android中的自签名只是代表了身份,但不代表身份是否可信任\nAndroid的应用的标识符是Package Name\n    Package Name不一样,相互不影响,允许同时存在(安装)\n    Package Name一样,只能存在一个,允许做升级处理.\n升级的安全性考虑\n    必须签名的证书一致(防假冒,防侵入隐私)\n    如果不一致,则用户要么放弃新的应用,要么先卸载旧的,再安装新的.但这属于安装,不属于升级\n    正常的升级将不擦除应用的工作目录数据,以保证历史数据的持续性.\n</code></pre><h2 id=\"1-7Android-APK之METAINF\"><a href=\"#1-7Android-APK之METAINF\" class=\"headerlink\" title=\"1.7Android APK之METAINF\"></a>1.7Android APK之METAINF</h2><pre><code>APK结构\n</code></pre><p><img src=\"/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/001.png\" alt=\"apk结构\"></p>\n<pre><code>META INF的组成\n</code></pre><p><img src=\"/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/002.png\" alt=\"METAINF结构\"></p>\n<pre><code>签名流程\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar signapk.jar testkey.x509.pem testkey.pk8 update.apk update-signed.apk</span><br></pre></td></tr></table></figure>\n<pre><code>    这条命令的意思是:通过signapk.jar这个可执行jar包，以“testkey.x509.pem”这个公钥文件\n             和“testkey.pk8”这个私钥文件对“update.apk”进行签名，签名后的文件保存为“update_signed.apk”\n    详情可阅:[Android APK 签名比对](http://www.blogjava.net/zh-weir/archive/2011/07/19/354663.html)\n\nMANIFEST.MF文件 (第一重保护,本文本里面包含apk的资源文件的每个文件的SHA1值)\n</code></pre><p><img src=\"/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/003.png\" alt=\"METAINF结构\"></p>\n<pre><code>CERT.SF文件 (第二重保护,本文本里面包含MANIFEST.MF里的所有内容,并包含有MANIFEST.MF的SHA1-Digest-Manifest)\n</code></pre><p><img src=\"/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/004.png\" alt=\"METAINF结构\"></p>\n<pre><code>CERT.RSA (第三重保护,此文件是一个PKCS#7格式的文件,\n    里面包含证书信息,以及基于私钥的签名信息,\n    签名信息是由整个CERT.SF文件的做一个基于sha1(160bit)+rsa(testkey.pk8,publicKey)生成)\n</code></pre><p><img src=\"/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/005.png\" alt=\"METAINF结构\"></p>\n<hr>\n<h1 id=\"2-Android中的权限\"><a href=\"#2-Android中的权限\" class=\"headerlink\" title=\"2.Android中的权限\"></a>2.Android中的权限</h1><h2 id=\"2-1-Android的权限作用\"><a href=\"#2-1-Android的权限作用\" class=\"headerlink\" title=\"2.1 Android的权限作用\"></a>2.1 Android的权限作用</h2><pre><code>细粒度特权管理\n    权限与操作关联\n    应用需要显式申请权限\n    用户对权限可知(不可控) (也可通过LBE,腾讯管家,360等可进行权限控制)\n    对特权权限单独控制\n</code></pre><h2 id=\"2-2-Android的权限类别\"><a href=\"#2-2-Android的权限类别\" class=\"headerlink\" title=\"2.2 Android的权限类别\"></a>2.2 Android的权限类别</h2><pre><code>Normal 没那么敏感\nDangerous 比较敏感的,安装时会被列举出来.\nSignature 基于特殊权限的权限(申请权限的apk它的签名的私钥必须要跟定义这个权限的私钥一致)\nSignatureOrSystem  申请权限的apk它的签名的私钥必须要跟定义这个权限的私钥一致或者apk是系统应用\n</code></pre><h2 id=\"2-3-Android的权限定义方式\"><a href=\"#2-3-Android的权限定义方式\" class=\"headerlink\" title=\"2.3 Android的权限定义方式\"></a>2.3 Android的权限定义方式</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Allows an application to monitor incoming SMS messages, to record or perform processing on them. --&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.RECEIVE_SMS\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:permissionGroup</span>=<span class=\"string\">\"android.permission-group.MESSAGES\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:protectionLevel</span>=<span class=\"string\">\"dangerous\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/permlab_receiveSms\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:description</span>=<span class=\"string\">\"@string/permdesc_receiveSms\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--name 权限名称</span><br><span class=\"line\">\tpermissionGroup 权限组</span><br><span class=\"line\">\tprotectionLevel 权限类别</span><br><span class=\"line\">\tlabel 安装时用户可查看到的信息,提示申请当前权限的作用</span><br><span class=\"line\">\tdescription 显示给用户的申请权限的详细概述--&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://osdn.jp/projects/gb-231r1-is01/scm/git/Gingerbread_2.3.3_r1_IS01/blobs/master/frameworks/base/core/res/AndroidManifest.xml\" target=\"_blank\" rel=\"external\">源代码frameworks/base/core/res/AndroidManifest.xml</a></p>\n<h2 id=\"2-4-Android的运行时权限控制方式\"><a href=\"#2-4-Android的运行时权限控制方式\" class=\"headerlink\" title=\"2.4 Android的运行时权限控制方式\"></a>2.4 Android的运行时权限控制方式</h2><pre><code>通过PM的CheckPermission\n    Android独有的Service(底层平台不具有)\n    所以需要在Android本身Framework中控制\n    主流的Service一般都基于Binder IPC或者其他IPC提供服务\n    所以在最底层控制(Service所在的Server中)以避免逃逸控制\n        绕开应用函数直接调用远程服务\n    例子:(mContext.checkCallingOrSelfPermission(permission) == PackageManager.PERMISSION_GRANTED)\n\n映射为OS的特定属性\n    非Android特有的Service(底层平台已经提供,如File访问,TCPIP数据收发等)\n    多个入口访问ndroidAPI,Java API NDK C API , Shell , et:Ac\n    底层控制准则,会聚口在底层,所以在底层(OS层面)统一控制,这样可以避免逃逸控制\n    所以复用OS的一些安全控制特性,比如GID\n    所以需要把Android空间的Permission Mapping到OS的GID\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进入到手机SDCard里发现GID都是sdcard_rw</span><br><span class=\"line\">shell@android:/storage/sdcard0 $ ls -l</span><br><span class=\"line\">ls -l</span><br><span class=\"line\">\t      UID      GID</span><br><span class=\"line\">drwxrwxr-x system   sdcard_rw          2014-12-15 18:03 Android</span><br><span class=\"line\">drwxrwxr-x system   sdcard_rw          2015-03-18 16:09 BaiduMapSdk</span><br><span class=\"line\">drwxrwxr-x system   sdcard_rw          2014-06-30 10:04 BaoDownload</span><br><span class=\"line\">drwxrwxr-x system   sdcard_rw          2014-07-07 17:33 Cache</span><br><span class=\"line\">drwxrwxr-x system   sdcard_rw          2014-12-15 18:03 CloudDrive</span><br><span class=\"line\">drwxrwxr-x system   sdcard_rw          2015-03-20 11:33 DCIM</span><br><span class=\"line\">drwxrwxr-x system   sdcard_rw          2014-12-15 18:02 Download</span><br><span class=\"line\">drwxrwxr-x system   sdcard_rw          2015-03-04 12:05 ExtDataTunnel</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span></span><br><span class=\"line\"><span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--当开发者增加上条权限时会程序会自动增加这条信息. 本信息来源:frameworks/base/data/etc/platform.xml--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">permission</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">group</span> <span class=\"attr\">gid</span>=<span class=\"string\">\"sdcard_rw\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">permission</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*进程所占内存proc pid status*/</span><br><span class=\"line\">shell@android:/proc/5914 # cat status</span><br><span class=\"line\">cat status</span><br><span class=\"line\">Name:   n.ledinside.app /*进程的程序名*/</span><br><span class=\"line\">State:  S (sleeping) /*进程的状态信息*/</span><br><span class=\"line\">Tgid:   5914 /*线程组号*/</span><br><span class=\"line\">Pid:    5914 /*进程pid*/</span><br><span class=\"line\">PPid:   148 /*父进程的pid*/</span><br><span class=\"line\">TracerPid:      0 /*跟踪进程的pid*/</span><br><span class=\"line\">Uid:    10075   10075   10075   10075 /*uid euid suid fsuid*/</span><br><span class=\"line\">Gid:    10075   10075   10075   10075 /*gid egid sgid fsgid*/</span><br><span class=\"line\">FDSize: 256 /*文件描述符的最大个数，file-&gt;fds*/</span><br><span class=\"line\">Groups: 1015 1028 3003/*启动该进程的用户所属的组的id*/</span><br><span class=\"line\">VmPeak:   354256 kB /*进程地址空间的大小*/</span><br><span class=\"line\">VmSize:   301964 kB /*进程虚拟地址空间的大小reserved_vm：进程在预留或特殊的内存间的物理页*/</span><br><span class=\"line\">VmLck:         0 kB /*进程已经锁住的物理内存的大小.锁住的物理内存不能交换到硬盘*/</span><br><span class=\"line\">VmPin:         0 kB</span><br><span class=\"line\">VmHWM:     63052 kB /*文件内存映射和匿名内存映射的大小*/</span><br><span class=\"line\">VmRSS:     33884 kB /*应用程序正在使用的物理内存的大小，就是用ps命令的参数rss的值 (rss)*/</span><br><span class=\"line\">VmData:    30484 kB /*程序数据段的大小（所占虚拟内存的大小），存放初始化了的数据*/</span><br><span class=\"line\">VmStk:       136 kB /*进程在用户态的栈的大小*/</span><br><span class=\"line\">VmExe:         8 kB /*程序所拥有的可执行虚拟内存的大小,代码段,不包括任务使用的库 */</span><br><span class=\"line\">VmLib:     28068 kB /*被映像到任务的虚拟内存空间的库的大小*/</span><br><span class=\"line\">VmPTE:       150 kB /*该进程的所有页表的大小*/</span><br><span class=\"line\">VmSwap:        0 kB</span><br><span class=\"line\">Threads:        15 /*共享使用该信号描述符的任务的个数*/</span><br><span class=\"line\">SigQ:   0/3133 /*待处理信号的个数/目前最大可以处理的信号的个数*/</span><br><span class=\"line\">SigPnd: 0000000000000000 /*屏蔽位，存储了该线程的待处理信号*/</span><br><span class=\"line\">ShdPnd: 0000000000000000 /*屏蔽位，存储了该线程组的待处理信号*/</span><br><span class=\"line\">SigBlk: 0000000000001204 /*存放被阻塞的信号*/</span><br><span class=\"line\">SigIgn: 0000000000000000 /*存放被忽略的信号*/</span><br><span class=\"line\">SigCgt: 00000002000094e8 /*存放被俘获到的信号*/</span><br><span class=\"line\">CapInh: 0000000000000000 /*能被当前进程执行的程序的继承的能力*/</span><br><span class=\"line\">CapPrm: 0000000000000000 /*进程能够使用的能力，可以包含CapEff中没有的能力，这些能力是被进程自己临时放弃的*/</span><br><span class=\"line\">CapEff: 0000000000000000 /*是CapPrm的一个子集，进程放弃没有必要的能力有利于提高安全性*/</span><br><span class=\"line\">CapBnd: ffffffffffffffff</span><br><span class=\"line\">Cpus_allowed:   3 /*可以执行该进程的CPU掩码集*/</span><br><span class=\"line\">Cpus_allowed_list:      0-1</span><br><span class=\"line\">voluntary_ctxt_switches:        223 /*进程主动切换的次数*/</span><br><span class=\"line\">nonvoluntary_ctxt_switches:     406 /*进程被动切换的次数*/</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--Groups中1015正好对应的是SDCARD_RW--&gt;</span></span><br><span class=\"line\">#define AID_MEDIA         1013  /* mediaserver process */</span><br><span class=\"line\">#define AID_DHCP          1014  /* dhcp client */</span><br><span class=\"line\">#define AID_SDCARD_RW     1015  /* external storage write access */</span><br><span class=\"line\">#define AID_VPN           1016  /* vpn system */</span><br><span class=\"line\">#define AID_KEYSTORE      1017  /* keystore subsystem */</span><br><span class=\"line\">#define AID_USB           1018  /* USB devices */</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-5-Android的Permission与UID-GID的mapping\"><a href=\"#2-5-Android的Permission与UID-GID的mapping\" class=\"headerlink\" title=\"2.5 Android的Permission与UID/GID的mapping\"></a>2.5 Android的Permission与UID/GID的mapping</h2><pre><code>语法:\n    UID assigning permission: \n        &lt; assign-permission name=&quot;permission_name&quot; uid=&quot;target_uid&quot; /&gt;\n    GIDs Mapping:\n        &lt;permission name=&quot;permission_nema&quot; &gt;\n        &lt;group gid=&quot;assigned gid&quot; /&gt;\n        &lt;group gid=&quot;assigned gid&quot; /&gt;\n        .....\n        &lt;/permission&gt;\n发生时刻:安装时\netc/permissions\n    任何符合以上语法的在system/etc/permissions下面的xml文件,都会被系统读取来parse并进行UID/GID的mapping.\n    比如Platform.xml(check代码)\n</code></pre><p><a href=\"http://osdn.jp/projects/gb-231r1-is01/scm/git/Gingerbread_2.3.3_r1_IS01/blobs/master/frameworks/base/data/etc/platform.xml\" target=\"_blank\" rel=\"external\">frameworks/base/data/etc/platform.xml</a></p>\n<pre><code>安全性\n    任何应用都可以为自己的permission assign GID? \n        当然不行! 只有Root用户才允许新增或者改写.\n        并且对于ROOT用户组的用户也只有r权限\n        如下为手机system/etc/permissions目录下的文件权限\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">shell@android:/system/etc # ls -l\t</span><br><span class=\"line\">....</span><br><span class=\"line\">drwxr-xr-x root     root              2013-07-09 21:54 permissions</span><br><span class=\"line\">....</span><br><span class=\"line\">shell@android:/system/etc # cd permissions</span><br><span class=\"line\">shell@android:/system/etc/permissions # ls -l platform.xml</span><br><span class=\"line\">-rw-r--r-- root     root         9466 2008-08-01 20:00 platform.xml</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"3-Android中的组件的安全机制\"><a href=\"#3-Android中的组件的安全机制\" class=\"headerlink\" title=\"3.Android中的组件的安全机制\"></a>3.Android中的组件的安全机制</h1><pre><code>Android的4大组件及组件间的通信\n组件的public和private\n组件的权限分配\n</code></pre><h2 id=\"3-1-组件的权限分配-demo\"><a href=\"#3-1-组件的权限分配-demo\" class=\"headerlink\" title=\"3.1 组件的权限分配(demo)\"></a>3.1 组件的权限分配(demo)</h2><h3 id=\"3-1-1-Activity\"><a href=\"#3-1-1-Activity\" class=\"headerlink\" title=\"3.1.1.Activity\"></a>3.1.1.Activity</h3><pre><code>服务端增加相应的权限:\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">    <span class=\"attr\">package</span>=<span class=\"string\">\"com.tu.test.diyPermission\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:versionCode</span>=<span class=\"string\">\"1\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:versionName</span>=<span class=\"string\">\"1.0\"</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-sdk</span></span><br><span class=\"line\">\t<span class=\"attr\">android:minSdkVersion</span>=<span class=\"string\">\"8\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:targetSdkVersion</span>=<span class=\"string\">\"19\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 自定义Activity权限 start --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 自定义Activity权限 end --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></span><br><span class=\"line\">\t<span class=\"attr\">android:allowBackup</span>=<span class=\"string\">\"true\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_launcher\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span> &gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">activity</span></span><br><span class=\"line\">\t    <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.MainActivity\"</span></span><br><span class=\"line\">\t    <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span> &gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 自定义Activity权限 start --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">activity</span></span><br><span class=\"line\">\t    <span class=\"attr\">android:name</span>=<span class=\"string\">\".NewPageActivity\"</span></span><br><span class=\"line\">\t    <span class=\"attr\">android:exported</span>=<span class=\"string\">\"true\"</span></span><br><span class=\"line\">\t    <span class=\"attr\">android:permission</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION\"</span> &gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.NewPageActivity\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 自定义Activity权限 end --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<pre><code>客户端必须申请许可:\n否则会抛出:\n\n    java.lang.SecurityException: Permission Denial: starting Intent { \n        act=com.tu.test.diyPermission.NewPageActivity cmp=com.tu.test.\n        diyPermission/.NewPageActivity (has extras) } from ProcessRecord\n        {41efe3e8 8642:com.tu.test.diyPermission.client/u0a204} (pid=8642,\n        uid=10204) requires com.tu.test.diyPermission.DIYPERMISSION\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">    <span class=\"attr\">package</span>=<span class=\"string\">\"com.tu.test.diyPermission.client\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:versionCode</span>=<span class=\"string\">\"1\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:versionName</span>=<span class=\"string\">\"1.0\"</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-sdk</span></span><br><span class=\"line\">\t<span class=\"attr\">android:minSdkVersion</span>=<span class=\"string\">\"8\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:targetSdkVersion</span>=<span class=\"string\">\"19\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 申请应用DiyPermission中的自定义Activity权限 start --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 申请应用DiyPermission中的自定义Activity权限 end --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></span><br><span class=\"line\">\t<span class=\"attr\">android:allowBackup</span>=<span class=\"string\">\"true\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_launcher\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span> &gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">activity</span></span><br><span class=\"line\">\t    <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.client.MainActivity\"</span></span><br><span class=\"line\">\t    <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span> &gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-2-service\"><a href=\"#3-1-2-service\" class=\"headerlink\" title=\"3.1.2.service\"></a>3.1.2.service</h3><pre><code>服务端增加相应的权限:\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">permission</span></span><br><span class=\"line\">\t<span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_SERVICE\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:label</span>=<span class=\"string\">\"diy Permission service\"</span> </span><br><span class=\"line\">\t<span class=\"attr\">android:description</span>=<span class=\"string\">\"@string/hello_world\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">application</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">\t\t <span class=\"tag\">&lt;<span class=\"name\">service</span></span><br><span class=\"line\">\t\t    <span class=\"attr\">android:name</span>=<span class=\"string\">\".service.NewService\"</span></span><br><span class=\"line\">\t\t    <span class=\"attr\">android:enabled</span>=<span class=\"string\">\"true\"</span></span><br><span class=\"line\">\t\t    <span class=\"attr\">android:exported</span>=<span class=\"string\">\"true\"</span></span><br><span class=\"line\">\t\t    <span class=\"attr\">android:permission</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_SERVICE\"</span> &gt;</span></span><br><span class=\"line\">\t\t    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.SERVICE_ACTION\"</span> /&gt;</span></span><br><span class=\"line\">\t\t    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">service</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<pre><code>客户端必须申请许可:\n否则会抛出:\n    Caused by: java.lang.SecurityException: \n        Not allowed to bind to service Intent { act=com.tu.test.diyPermission.SERVICE_ACTION }\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_SERVICE\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-3-ContentProvide\"><a href=\"#3-1-3-ContentProvide\" class=\"headerlink\" title=\"3.1.3.ContentProvide\"></a>3.1.3.ContentProvide</h3><pre><code>服务端增加相应的权限:\n    读,写,访问权限.\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_WRITE\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_READ\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">application</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">\t\t <span class=\"tag\">&lt;<span class=\"name\">provider</span></span><br><span class=\"line\">\t\t    <span class=\"attr\">android:name</span>=<span class=\"string\">\".provider.NewContentProvider\"</span></span><br><span class=\"line\">\t\t    <span class=\"attr\">android:exported</span>=<span class=\"string\">\"true\"</span></span><br><span class=\"line\">\t\t    <span class=\"attr\">android:authorities</span>=<span class=\"string\">\"com.tu.test.diyPermission.providers.PersonProvider\"</span></span><br><span class=\"line\">\t\t    <span class=\"attr\">android:readPermission</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_READ\"</span></span><br><span class=\"line\">\t\t    <span class=\"attr\">android:writePermission</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_WRITE\"</span></span><br><span class=\"line\">\t\t    <span class=\"attr\">android:permission</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER\"</span> /&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<pre><code>客户端必须申请许可:\n否则会抛出:\n    Caused by: java.lang.SecurityException: Permission Denial: opening provider \n    com.tu.test.diyPermission.provider.NewContentProvider from ProcessRecord{4236abd0\n    22086:com.tu.test.diyPermission.client/u0a204} (pid=22086, uid=10204) requires \n    com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_READ or com.tu.test.\n    diyPermission.DIYPERMISSION_CONTENTPROVIDER_WRITE\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_WRITE\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_READ\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-4-BroadcastReceiver\"><a href=\"#3-1-4-BroadcastReceiver\" class=\"headerlink\" title=\"3.1.4.BroadcastReceiver\"></a>3.1.4.BroadcastReceiver</h3><pre><code>服务端增加权限:\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">\t....</span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.BROADCESTRECEIVER\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">application</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">receiver</span></span><br><span class=\"line\">\t    <span class=\"attr\">android:name</span>=<span class=\"string\">\".receiver.NewReceiver\"</span></span><br><span class=\"line\">\t    <span class=\"attr\">android:permission</span>=<span class=\"string\">\"com.tu.test.diyPermission.BROADCESTRECEIVER\"</span> &gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.BROADCESTRECEIVER_ACTION\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">receiver</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<pre><code>客户端必须申请许可:\n    否则服务端周日接收不到信息\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.BROADCESTRECEIVER\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"4-应用安装\"><a href=\"#4-应用安装\" class=\"headerlink\" title=\"4.应用安装\"></a>4.应用安装</h1><h2 id=\"4-1-应用安装的安全性考虑和调用方式\"><a href=\"#4-1-应用安装的安全性考虑和调用方式\" class=\"headerlink\" title=\"4.1.应用安装的安全性考虑和调用方式\"></a>4.1.应用安装的安全性考虑和调用方式</h2><pre><code>应用安装是一个高特权/风险操作,所以必须是可知/可控,主流实现方式:客户只能委派而不能直接操作.\n调用安装传统模式: 发送Intent给系统的Package Install app\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">intent.setAction(Intent.ACTION_VIEW);</span><br><span class=\"line\">intent.setDataAndType(Uri.fromFile(file), <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</span><br><span class=\"line\">intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n<pre><code>特权安装模式:系统的Package Install App内部会调用PackageManagerService的Install Package,\n    该操作与android.permission.INSTALL_PACKAGES 绑定,且该peimission的protection level是 signature|system\n\n所谓的静默安装方式只存在Root手机上,开发者可以选择:\n    基于pm cmd : pm install -r\n</code></pre><h2 id=\"4-2-应用安装流程之UID-GID的分配\"><a href=\"#4-2-应用安装流程之UID-GID的分配\" class=\"headerlink\" title=\"4.2.应用安装流程之UID/GID的分配\"></a>4.2.应用安装流程之UID/GID的分配</h2><pre><code>基于Android4.3原代码目录\nframeworks/base/services/java/com/android/srver/pm/PackageManagerService.java\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//installPackage 将会调用 scanPackageLI</span></span><br><span class=\"line\"></span><br><span class=\"line\">privage PackageParser.<span class=\"function\">Package <span class=\"title\">scanPackageLI</span><span class=\"params\">(PackageParser.Package pkg,<span class=\"keyword\">int</span> parseFlags,<span class=\"keyword\">int</span> scanMode,log currentTime,UserHandle user)</span></span>&#123;</span><br><span class=\"line\">\t....</span><br><span class=\"line\">\tpkgSetting = mSettings.getPackageLPw(pkg,origPackage,realName,suid,destCodeFile,destResourceFile,pkg.applicationInfo.nativeLibraryDir,pkg.applicationInfo.flags,user,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t.....</span><br><span class=\"line\">\tpkg.applicationInfo.uid = pkgSetting.appId;<span class=\"comment\">//说明是由Settings里面产生Uid,获取到appId</span></span><br><span class=\"line\">\t....</span><br><span class=\"line\">\t<span class=\"comment\">//invoke installer to do the actual installation </span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = createDataDirsLI(pagName,pkg.applicationInfo.uid,pkg.applicationInfo.seinfo);<span class=\"comment\">//创建工作目录和权限设置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>fameworks/base/services/java/com/android/server/pm/Settings.java\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> PackageSetting <span class=\"title\">getPackageLPw</span><span class=\"params\">(String name,PackageSetting origPackage,String realName,SharedUserSetting shardUser,File codePath,File resourcePath,String nativeLibraryPathString,<span class=\"keyword\">int</span> vc,<span class=\"keyword\">int</span> pkgFlags,UserHandle installUser,Boolean add , <span class=\"keyword\">boolean</span> allowlnstall)</span></span>&#123;</span><br><span class=\"line\">\tPackageSetting p = mPackages.get(name);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!p.codePath.equals(codePath))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//check to see if its a disabled syste</span></span><br><span class=\"line\">\t\t\t.....</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//Assign new user id</span></span><br><span class=\"line\">\t\t\tp.appId = newUserIdLPw(p);<span class=\"comment\">//分配Uid</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//分配Uid的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">newUserIdLPw</span><span class=\"params\">(Object obj)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//Let's be stupidly inefficient for now...</span></span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> N = mUserIds.size();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;N;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mUserIds.get(i)==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\tmUserIds.set(i,obj);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> Process.FIRST_APPLICATION_UID + i;<span class=\"comment\">//这就为什么用户安装的uid都是大于10000的原因.</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//None left?</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(N&gt;(Process.LAST_APPLICATION_UID-Process.FIRST_APPLICATION_UID))&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmUserIds.add(obj);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Process.FIRST_APPLICATION_UID+N;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">frameworks/base/core/java/android/os/Process.java</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FIRST_APPLICATION_UID=<span class=\"number\">10000</span>;<span class=\"comment\">//这就为什么用户安装的uid都是大于10000的原因.</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-应用安装流程之工作目录的创建和权限设置\"><a href=\"#4-3-应用安装流程之工作目录的创建和权限设置\" class=\"headerlink\" title=\"4.3.应用安装流程之工作目录的创建和权限设置\"></a>4.3.应用安装流程之工作目录的创建和权限设置</h2><pre><code>frameworks/base/services/java/com/android/server/pm/PackageManagerService.java\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">createDataDirsLI</span><span class=\"params\">(String packageName,<span class=\"keyword\">int</span> uid,String seinfo)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> [] users = sUserManager.getUserIds();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> res = mlnstaller.install(packageName,uid,uid,seinfo);<span class=\"comment\">//从这里可以看出uid gid都被设置成uid</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(res&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//only for multi-user//Android 4.1之后支持多用户</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> user: users)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(user!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\tres = mlnstaller.createUserData(packageName,UserHandle.getUid(user,uid),user);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(res&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>frameworks/base/services/java/com/anddroid/server/pm/Installer.java\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">connect</span><span class=\"params\">()</span></span>&#123;<span class=\"comment\">//Installer一起来会进行初始化</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(mSocket!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\tmSocket = <span class=\"keyword\">new</span> LocalSocket();</span><br><span class=\"line\">\t\t<span class=\"comment\">//本地Socket</span></span><br><span class=\"line\">\t\tLocalSocketAddress address = <span class=\"keyword\">new</span> LocalSocketAddress(<span class=\"string\">\"installd\"</span>,LocalSocketAddress.Namespace.RESERVED);</span><br><span class=\"line\">\t\tmSocket.connect(address);</span><br><span class=\"line\">\t\tmIn = mSocket.getInputStream();</span><br><span class=\"line\">\t\tmOut = mSocket.getOutputStream();</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">catch</span>(IOException ex)&#123;</span><br><span class=\"line\">\t\tdisconnect();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">install</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> uid , <span class=\"keyword\">int</span> gid , String seinfo)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//内部协议</span></span><br><span class=\"line\">\tStringBuilder builder = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"install\"</span>);</span><br><span class=\"line\">\tbuilder.append(<span class=\"string\">''</span>);</span><br><span class=\"line\">\tbuilder.append(name);</span><br><span class=\"line\">\tbuilder.append(<span class=\"string\">''</span>);</span><br><span class=\"line\">\tbuilder.append(uid);</span><br><span class=\"line\">\tbuilder.append(<span class=\"string\">''</span>);</span><br><span class=\"line\">\tbuilder.append(gid);</span><br><span class=\"line\">\tbuilder.append(<span class=\"string\">''</span>);</span><br><span class=\"line\">\tbuilder.append(seinfo!=<span class=\"keyword\">null</span>?seinfo:<span class=\"string\">\"!\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> execute(builder.toString());<span class=\"comment\">//会调用mOut mIn发数据</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>frameworks/native/cmds/installd/installd.c\n</code></pre><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;   <span class=\"comment\">//here the SOCKET_PATH is installd</span></span><br><span class=\"line\">\t..........</span><br><span class=\"line\">\tlsocket = android_get_control_socket(SOCKET_PATH);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (listen(lsocket, <span class=\"number\">5</span>)) &#123;&#125;</span><br><span class=\"line\">\t fcntl(lsocket, F_SETFD, FD_CLOEXEC);</span><br><span class=\"line\">\t <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">\t\talen = <span class=\"keyword\">sizeof</span>(addr);</span><br><span class=\"line\">\t\ts = accept(lsocket, &amp;addr, &amp;alen);</span><br><span class=\"line\">\t\tfcntl(s, F_SETFD, FD_CLOEXEC);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(readx(s,buf,count))&#123;&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(execute(s,buf))<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">do_install</span><span class=\"params\">(<span class=\"keyword\">char</span> **arg, <span class=\"keyword\">char</span> reply[REPLY_MAX])</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    return install(arg[<span class=\"number\">0</span>], atoi(arg[<span class=\"number\">1</span>]), atoi(arg[<span class=\"number\">2</span>]), atoi(arg[<span class=\"number\">3</span>])); <span class=\"comment\">/* pkgname, uid, gid */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>framework/native/cmds/installd/commands.c\n</code></pre><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">install</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *pkgname, <span class=\"keyword\">int</span> encrypted_fs_flag, uid_t uid, gid_t gid)</span></span>&#123;</span><br><span class=\"line\">\t.....</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(create_pkg_path(pkgdir,pkgname,PKG_DIR_POSTEIX,<span class=\"number\">0</span>))&#123;<span class=\"comment\">//创建工作目录结构,/data/data/包名/</span></span><br><span class=\"line\">\t\tALOGE(<span class=\"string\">\"cannot create package path\\n\"</span>);</span><br><span class=\"line\">\t\treturn <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;....</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mkdir(pkgdir, <span class=\"number\">0751</span>) &lt; <span class=\"number\">0</span>) &#123;<span class=\"comment\">//创建目录,并设置权限 0751 uid7(4+2+1)读写执行,gid5(4+1)读执行,其它1(1)执行</span></span><br><span class=\"line\">\t\tALOGE(<span class=\"string\">\"cannot create dir '%s': %s\\n\"</span>, pkgdir, strerror(errno));</span><br><span class=\"line\">\t\treturn <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (chmod(pkgdir,<span class=\"number\">0751</span>) &lt; <span class=\"number\">0</span>) &#123;<span class=\"comment\">//再设置一次权限</span></span><br><span class=\"line\">\t\tALOGE(<span class=\"string\">\"cannot chmod dir '%s': %s\\n\"</span>, pkgdir, strerror(errno));</span><br><span class=\"line\">\t\tunlink(pkgdir);</span><br><span class=\"line\">\t\treturn -errno;</span><br><span class=\"line\">\t&#125;.....</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(chown(pkgdir,uid,gid)&lt;<span class=\"number\">0</span>)&#123;<span class=\"comment\">//因设置权限时是使用root用户,些处再进行权限修改.把uid root , gid root 修改成应用的uid,与gid.</span></span><br><span class=\"line\">\t.....</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-Android中系统Service的安全\"><a href=\"#5-Android中系统Service的安全\" class=\"headerlink\" title=\"5.Android中系统Service的安全\"></a>5.Android中系统Service的安全</h1><h2 id=\"5-1-Binder的安全\"><a href=\"#5-1-Binder的安全\" class=\"headerlink\" title=\"5.1 Binder的安全\"></a>5.1 Binder的安全</h2><pre><code>Binder的作用:实现以IPC的RPC,完成远程业务范围.\n</code></pre><p><a href=\"http://blog.csdn.net/luoshengyang/article/details/6618363\" target=\"_blank\" rel=\"external\">Android进程间通信（IPC）机制Binder简要介绍和学习计划</a></p>\n<p><a href=\"http://blog.csdn.net/luoshengyang/article/details/38326729\" target=\"_blank\" rel=\"external\">SEAndroid安全机制对Binder IPC的保护分析</a></p>\n<h2 id=\"5-2-ServiceManager-Add-Service的安全限制\"><a href=\"#5-2-ServiceManager-Add-Service的安全限制\" class=\"headerlink\" title=\"5.2 ServiceManager Add Service的安全限制\"></a>5.2 ServiceManager Add Service的安全限制</h2><pre><code>Service Manager Process的作用: Naming Resolver,用于RPC框架中 AddService  GetSetvice\n</code></pre><h2 id=\"5-3-Zygote的Process-Fork\"><a href=\"#5-3-Zygote的Process-Fork\" class=\"headerlink\" title=\"5.3 Zygote的Process Fork\"></a>5.3 Zygote的Process Fork</h2><p><a href=\"http://blog.csdn.net/luoshengyang/article/details/6768304\" target=\"_blank\" rel=\"external\">Android系统进程Zygote启动过程的源代码分析</a></p>\n<p><a href=\"http://www.cnblogs.com/innost/archive/2011/01/26/1945769.html\" target=\"_blank\" rel=\"external\">Android深入浅出之Zygote</a></p>\n<h2 id=\"5-4-Zygote的Socket安全检查\"><a href=\"#5-4-Zygote的Socket安全检查\" class=\"headerlink\" title=\"5.4 Zygote的Socket安全检查\"></a>5.4 Zygote的Socket安全检查</h2><p><a href=\"\">空</a></p>\n<h1 id=\"6-Android中的ContentProvider以及基于URI的安全\"><a href=\"#6-Android中的ContentProvider以及基于URI的安全\" class=\"headerlink\" title=\"6.Android中的ContentProvider以及基于URI的安全\"></a>6.Android中的ContentProvider以及基于URI的安全</h1><h2 id=\"6-1-ContentProvider的作用\"><a href=\"#6-1-ContentProvider的作用\" class=\"headerlink\" title=\"6.1.ContentProvider的作用\"></a>6.1.ContentProvider的作用</h2><h3 id=\"6-1-1-软件设计更优美-官方\"><a href=\"#6-1-1-软件设计更优美-官方\" class=\"headerlink\" title=\"6.1.1.软件设计更优美(官方)\"></a>6.1.1.软件设计更优美(官方)</h3><pre><code>屏蔽内部数据存储操作的差异性\n对外提供一致的数据操作方式\n抽象/共性----&gt;都是数据操作\n</code></pre><h3 id=\"6-1-2-进程间数据共享\"><a href=\"#6-1-2-进程间数据共享\" class=\"headerlink\" title=\"6.1.2.进程间数据共享\"></a>6.1.2.进程间数据共享</h3><pre><code>       Proxy|        Binder              |  Content Provider\nclient Process  ------------------------------- &gt; Service Process \n</code></pre><h2 id=\"6-2-权限临时继承的需求\"><a href=\"#6-2-权限临时继承的需求\" class=\"headerlink\" title=\"6.2.权限临时继承的需求\"></a>6.2.权限临时继承的需求</h2><pre><code>临时委派使得委托者的权限临时提升(类似Root-setUID模式)\n</code></pre><h2 id=\"6-3-配置ContentProvider允许临时委派权限\"><a href=\"#6-3-配置ContentProvider允许临时委派权限\" class=\"headerlink\" title=\"6.3.配置ContentProvider允许临时委派权限\"></a>6.3.配置ContentProvider允许临时委派权限</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">provider</span> </span><br><span class=\"line\">\t<span class=\"attr\">android:readPermission</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_READ\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:grantUriPermissions</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--允许派遣给uri--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">provider</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">grant-uri-permission</span> <span class=\"attr\">android:path</span>=<span class=\"string\">\"/comtu/\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--允许派遣给限制URI的路径--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">provider</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">grant-uri-permission</span> <span class=\"attr\">android:pathPrefix</span>=<span class=\"string\">\"/abc/\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!--允许派遣给限制URI的路径前缀--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">provider</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">grant-uri-permission</span> <span class=\"attr\">android:pathPattern</span>=<span class=\"string\">\".*public.*\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--允许派遣给限制URI的路径通过正则--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"6-4-基于URI的权限临时委派\"><a href=\"#6-4-基于URI的权限临时委派\" class=\"headerlink\" title=\"6.4.基于URI的权限临时委派\"></a>6.4.基于URI的权限临时委派</h2><h3 id=\"6-4-1-基于API\"><a href=\"#6-4-1-基于API\" class=\"headerlink\" title=\"6.4.1 基于API\"></a>6.4.1 基于API</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//委派uri权限临时委派给com.example.testapps.test2,权限为FLAG_GRANT_READ_URI_PERMISSION</span></span><br><span class=\"line\">uri = <span class=\"string\">\"content://com.example.testapps.test1.mailprovider/attachments/42\"</span>;</span><br><span class=\"line\">Context.grantUriPermission(<span class=\"string\">\"com.example.testapps.test2\"</span>,uri,Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//一定时间之后将收回委派的权限.否则可能存在安全隐患.需要思考的时什么时候收回.</span></span><br><span class=\"line\">uri = <span class=\"string\">\"content://com.example.testapps.test1.mailprovider/attachments/42\"</span>;</span><br><span class=\"line\">Context.revokeUriPermission(uri,Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-4-2-基于Intent\"><a href=\"#6-4-2-基于Intent\" class=\"headerlink\" title=\"6.4.2 基于Intent\"></a>6.4.2 基于Intent</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class=\"line\">intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class=\"line\">intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br><span class=\"line\">intent.setDataAndType(uri,<span class=\"string\">\"image/gif\"</span>);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n<pre><code>权限的生命周期: Activity Start --&gt; Destro即Activity的生命周期\n</code></pre><h1 id=\"7-Android的Policy模式和多设备绑定\"><a href=\"#7-Android的Policy模式和多设备绑定\" class=\"headerlink\" title=\"7.Android的Policy模式和多设备绑定\"></a>7.Android的Policy模式和多设备绑定</h1><h2 id=\"7-1-Android的Policy模式\"><a href=\"#7-1-Android的Policy模式\" class=\"headerlink\" title=\"7.1.Android的Policy模式\"></a>7.1.Android的Policy模式</h2><pre><code>一个移动平台它解决用户隐私,相当的一系列控制或者说是跟用户的交互模式.\n安装时安全提问\n    列出所有权限,提示用户是否安装.\n\n    All or Nothing \n    None Runtime Control \n    None Recallable \n    Disable untrust source by default \n</code></pre><h2 id=\"7-2-MR2开始的AppOps-安卓4-3开始\"><a href=\"#7-2-MR2开始的AppOps-安卓4-3开始\" class=\"headerlink\" title=\"7.2.MR2开始的AppOps(安卓4.3开始)\"></a>7.2.MR2开始的AppOps(安卓4.3开始)</h2><pre><code>如 LBE 等安全卫士控制权限\n\n&gt;基于AppOps Service\n&gt;定义Ignore , Allow Reject 3种Policy\n&gt;Hook and check Permission\n</code></pre><h2 id=\"7-3AppOps对开发者的影响\"><a href=\"#7-3AppOps对开发者的影响\" class=\"headerlink\" title=\"7.3AppOps对开发者的影响\"></a>7.3AppOps对开发者的影响</h2><pre><code>开发者已经申请权限时,但被LBE等安全卫士等的权限限制.\n    会导致权限一样获取不到.为了代码健壮性,需加多一些try catch.防止异常\n</code></pre><h2 id=\"7-4设备绑定\"><a href=\"#7-4设备绑定\" class=\"headerlink\" title=\"7.4设备绑定\"></a>7.4设备绑定</h2><pre><code>应用与设备绑定的需求前景\n    如,计费应用.\n\n&gt;同时基于SIM卡和Device的绑定(如BREW下载,单机内的下载卡可用.基于SIM卡计费,运营商间排斥)\n&gt;仅基于Device的绑定(如Google Store下载,当时下载的Device可用)\n&gt;实现: 加密 per device per SIM卡\n    Device Key: ESN/MEID/IMEI or random generate\n    SIM ID : IMSI\n</code></pre><h2 id=\"7-5跨设备使用\"><a href=\"#7-5跨设备使用\" class=\"headerlink\" title=\"7.5跨设备使用\"></a>7.5跨设备使用</h2><pre><code>基于Account ID的云端管理\nDevice1 --buy it using xx@x.x account --&gt;AppStore&lt;----Down load freely--(Register as xx@x.x) --Device2\n</code></pre><h1 id=\"8-应用内计费和App2SDCard\"><a href=\"#8-应用内计费和App2SDCard\" class=\"headerlink\" title=\"8.应用内计费和App2SDCard\"></a>8.应用内计费和App2SDCard</h1><h2 id=\"8-1-应用内计费\"><a href=\"#8-1-应用内计费\" class=\"headerlink\" title=\"8.1 应用内计费\"></a>8.1 应用内计费</h2><pre><code>什么是应用内计费\n    In App purchase or In app Billing(IAP,IAB)\n    直接在应用内进行Paymen以unLock某些功能,或者买某些道具等\n应用内计费的需求\n    可支付途径(信用卡,手机卡等)\n    安全性:\n        面向用户\n            可知\n            可控\n        面向应用\n            可信(避免免费使用收费内容)\n\n解决方案\n    &gt;计费Server接口保密且Transiction加密(SSL)\n    &gt;仅允许配套的安全本地组件与计费Server通信,且安全本地组件负责\n        与用户的&quot;显式&quot;交互,同时提供API给Client\n    &gt;Clent仅允许调用本地计费安全组件来委派Transiction\n    &gt;Response的signature + Nounce (防止重放攻击)\n</code></pre><h2 id=\"8-2-SD卡安装应用的安全策略\"><a href=\"#8-2-SD卡安装应用的安全策略\" class=\"headerlink\" title=\"8.2 SD卡安装应用的安全策略\"></a>8.2 SD卡安装应用的安全策略</h2><pre><code>绑定设备\n    &gt;绑定perDevice使得防Export:应用以及应用数据(SD卡允许Export)\n    &gt;以加密实现之:例子,应用安装至SD卡(.Android_Secure in SDCard)\n\nASEC的不可访问性\n    由于.Android_Secure的加密特性,所以需要禁止应用直接Access该Folder(允许Access SDCard上的其他任何内容)\n</code></pre><h1 id=\"9-Android中的多用户安全\"><a href=\"#9-Android中的多用户安全\" class=\"headerlink\" title=\"9.Android中的多用户安全\"></a>9.Android中的多用户安全</h1><pre><code>4.2开始可以支持\n</code></pre><h2 id=\"9-1需求场景\"><a href=\"#9-1需求场景\" class=\"headerlink\" title=\"9.1需求场景\"></a>9.1需求场景</h2><pre><code>已有的例子/ Windows/Linux多用户\n\nAndroid中的差别\n    UID/GID跟着User走\n    UID/GID和User的区分和绑定\n应用的可控共享\n    共享,不存在多份Code\n    可控,控制谁可见.\n数据的多用户独立\n    工作目录\n    External Storage(外部存储器)\n</code></pre><h2 id=\"9-2UserManagerService\"><a href=\"#9-2UserManagerService\" class=\"headerlink\" title=\"9.2UserManagerService\"></a>9.2UserManagerService</h2><pre><code>作用:\n    管理User的属性信息: 设置/获取用户的UserId,Name,Icon,RestrictProfile等\n    管理User:创建,删除等\n\nUserId(UserHandle)是Process的属性,不100%等同于当前设置切换的用户\n一切与多用户相关的运行时行为(比如Mount的SDCard等)与进程的UserID所属有关,\n    而与当前设置中的当前用户没有必然联系\n典型的例子:\n    通过adb shell的方式,永远只能访问User0的SDCard:/data/media/0,不管切换哪个用户\n    通过文件管理器应用访问的SDCard则与当前用户相关.\n    原因: adb shell只存在User0,不管在哪个当前设置用户下.\n</code></pre><h2 id=\"9-3对开发者的影响\"><a href=\"#9-3对开发者的影响\" class=\"headerlink\" title=\"9.3对开发者的影响\"></a>9.3对开发者的影响</h2><pre><code>永远使用相对路径(基于工作目录)以及基于Environment.getXXXX来获取你感兴趣的路径(Environment内部\n    会处理多用户).否则会出现路径错误而访问被拒绝的问题.\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">New <span class=\"title\">File</span><span class=\"params\">(<span class=\"string\">\"setting/setting.log\"</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">New <span class=\"title\">File</span><span class=\"params\">(Environment.getExternalStorageDirectory+<span class=\"string\">\"SharePic/a.png\"</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-Android-Superuser机制讲解\"><a href=\"#10-Android-Superuser机制讲解\" class=\"headerlink\" title=\"10.Android Superuser机制讲解\"></a>10.Android Superuser机制讲解</h1><h2 id=\"10-1-ROOT的作用\"><a href=\"#10-1-ROOT的作用\" class=\"headerlink\" title=\"10.1 ROOT的作用\"></a>10.1 ROOT的作用</h2><pre><code>Customization(定制,用户化)\n任何需要特权的操作\n</code></pre><h2 id=\"10-2-ROOT的第一步-寻找漏洞并安装特权文件\"><a href=\"#10-2-ROOT的第一步-寻找漏洞并安装特权文件\" class=\"headerlink\" title=\"10.2 ROOT的第一步:寻找漏洞并安装特权文件\"></a>10.2 ROOT的第一步:寻找漏洞并安装特权文件</h2><pre><code>Hack会寻找漏洞,如UID设置设备(ADB)\n手机Root后,最重要的是,给手机安装了su程序和superuser apk. su一般被安装在/system/xbin或者/system/bin\n</code></pre><h2 id=\"10-3-SU的sUID的特性\"><a href=\"#10-3-SU的sUID的特性\" class=\"headerlink\" title=\"10.3 SU的sUID的特性\"></a>10.3 SU的sUID的特性</h2><pre><code>Android的App授权获取Root权限,其实不是App自身的权限提升了,而是通过具有Root权限的Sh流来执行shell命令.\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell@android:/system/xbin # ls su -l</span><br><span class=\"line\">ls su -l</span><br><span class=\"line\">-rwsr-sr-x root     root        79500 2008-08-01 20:00 su</span><br></pre></td></tr></table></figure>\n<pre><code>这里可以看到,su是Owner和Group分别为Root,Root.Other用户具有Execute权限,另外,su设置了suid和sgid,这个非常重要,\n    使得Su进程可以提升自身的EUID.\n</code></pre><h2 id=\"10-4-SU的核心代码分析\"><a href=\"#10-4-SU的核心代码分析\" class=\"headerlink\" title=\"10.4 SU的核心代码分析\"></a>10.4 SU的核心代码分析</h2><pre><code>在JB MR2(4.3)之前,Apk内部可以通过Java的Runtime执行一个\n    具有Root-setUid的可执行文件而提升Effective UID来完成一些特权操作,典型的Root包中的su就是这个原理.\nJB MR2中,修补了改漏洞.\n</code></pre><h2 id=\"10-5-MR2后的方案-SU-Deamon-Service\"><a href=\"#10-5-MR2后的方案-SU-Deamon-Service\" class=\"headerlink\" title=\"10.5 MR2后的方案:SU Deamon Service\"></a>10.5 MR2后的方案:SU Deamon Service</h2><pre><code>怎么办? Native Service依然可以利用Root-setUID的su提升权限\n</code></pre><h1 id=\"11-SEAndroid\"><a href=\"#11-SEAndroid\" class=\"headerlink\" title=\"11.SEAndroid\"></a>11.SEAndroid</h1><h2 id=\"11-1-DAC和MAC\"><a href=\"#11-1-DAC和MAC\" class=\"headerlink\" title=\"11.1 DAC和MAC\"></a>11.1 DAC和MAC</h2><pre><code>DAC\n    自主访问控制\n    主体(Process)的Capability觉得了它能访问和操作什么?\n        Root进程可以访问和操作一切!\n    传统(legacy)Linux的安全模式,基于UID/GID/Capability\nMAC \n    强制访问控制\n    系统的Policy觉得了主体能操作访问哪些客体\n    即便是ROOT进程,系统Policy配置了你能做什么,你只能做什么,在MAC模式下,ROOT进程和普通进程是无区别对待的.\n</code></pre><h2 id=\"11-2-基于Label的MAC\"><a href=\"#11-2-基于Label的MAC\" class=\"headerlink\" title=\"11.2 基于Label的MAC\"></a>11.2 基于Label的MAC</h2><pre><code>每个主体/客体在运行时都绑定一个标签(Label)\n该标签又称为Security Context\nSecurity Context的构成\n    User : Role : Type : SecurityLevel\n    比如: u:r:zygote:s0\nType Enhancement\n    Security Context中的Type主要是用于Policy的设定,即Policy\n    一般的Rule是:\n        Allow Type Type : Operation\n        Allow appdomain zygote_tmpfs:file read;\n    所以,Type被实际用于&quot;授权&quot;的Decision,所以称之为Type Enhancement\nls命令的SELinux版本: ls -l -Z\n\nPs命令的SELinux版本: ps -Z\n</code></pre><h2 id=\"11-3-推荐读物\"><a href=\"#11-3-推荐读物\" class=\"headerlink\" title=\"11.3 推荐读物\"></a>11.3 推荐读物</h2><p><a href=\"http://opensource.com/business/13/11/selinux-policy-guide\" target=\"_blank\" rel=\"external\">Your visual how-to guide for SELinux policy enforcement</a></p>\n<p><a href=\"http://book.51cto.com/art/200810/94193.htm\" target=\"_blank\" rel=\"external\">SELinux实例：使用安全增强的Linux</a></p>\n<hr>\n<h1 id=\"Demo下载\"><a href=\"#Demo下载\" class=\"headerlink\" title=\"Demo下载\"></a>Demo下载</h1><p>Android中的组件的安全机制之组件的权限分配(Demo)<br>Activity Service ContentProvide BroadcastReceiver四大组件不同App数据通信:<br><a href=\"/res/file/blog/2014/10/27/android_safe_mode_mechanism_three/Permission.rar\">Demo</a></p>\n","excerpt":"<style>\nh3 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\nh6 {\n    line-height: 1.5;\n    letter-spacing: 2px;\n    margin-top: -10px;\n}\n\n</style>\n\n<p>目录:</p>\n<ul>\n<li><p>1.移动平台中的主流签名作用</p>\n<ul>\n<li>1.1自签名的完整性鉴别</li>\n<li>1.2信任模式</li>\n<li>1.3限制安装/运行</li>\n<li>1.4权限的作用</li>\n<li>1.5权限的安全性保护</li>\n<li>1.6Android的签名作用</li>\n<li>1.7Android APK之METAINF</li>\n</ul>\n</li>\n<li><p>2.Android中的权限</p>\n<ul>\n<li>2.1Android的权限作用</li>\n<li>2.2Android的权限类别</li>\n<li>2.3Android的权限定义方式</li>\n<li>2.4Android的运行时权限控制方式</li>\n<li>2.5Android的Permission与UID/GID的mapping</li>\n</ul>\n</li>\n<li><p>3.Android中的组件的安全机制</p>\n<ul>\n<li>3.1组件的权限分配(Demo)<ul>\n<li>3.1.1 Activity</li>\n<li>3.1.2 Service</li>\n<li>3.1.3 ContentProvide</li>\n<li>3.1.4 BroadcastReceiver</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>4.Android应用安装</p>\n<ul>\n<li>4.1应用安装的安全性考虑和调用方式</li>\n<li>4.2应用安装流程之UID/GID的分配</li>\n<li>4.3应用安装流程之工作目录的创建和权限设置</li>\n</ul>\n</li>\n<li><p>5.Android中系统Service的安全</p>\n<ul>\n<li>5.1Binder的安全</li>\n<li>5.2ServiceManager Add Service的安全限制</li>\n<li>5.3Zygote的Process Fork</li>\n<li>5.4Zygote的Socket安全检查    </li>\n</ul>\n</li>\n<li><p>6.Android中的ContentProvider以及基于URI的安全</p>\n<ul>\n<li>6.1ContentProvider的作用</li>\n<li>6.2权限临时继承的需求</li>\n<li>6.3配置ContentProvider允许临时委派权限</li>\n<li>6.4基于URI的权限临时委派</li>\n</ul>\n</li>\n<li><p>7.Android的Policy模式和多设备绑定</p>\n<ul>\n<li>7.1Android的Policy模式</li>\n<li>7.2MR2开始的AppOps(安卓4.3开始)</li>\n<li>7.3AppOps对开发者的影响</li>\n<li>7.4设备绑定</li>\n<li>7.5跨设备使用</li>\n</ul>\n</li>\n<li><p>8.应用内计费和App2SDCard</p>\n<ul>\n<li>8.1应用内计费</li>\n<li>8.2SD卡安装应用的安全策略</li>\n</ul>\n</li>\n<li><p>9.Android中的多用户安全</p>\n<ul>\n<li>9.1需求场景</li>\n<li>9.2UserManagerService</li>\n<li>9.3对开发者的影响</li>\n</ul>\n</li>\n<li><p>10.Android Superuser机制讲解</p>\n<ul>\n<li>10.1ROOT的作用</li>\n<li>10.2ROOT的第一步:寻找漏洞并安装特权文件</li>\n<li>10.3SU的sUID的特性</li>\n<li>10.4SU的核心代码分析</li>\n<li>10.5MR2后的方案:SU Deamon Service</li>\n</ul>\n</li>\n<li><p>11.SEAndroid</p>\n<ul>\n<li>11.1DAC和MAC</li>\n<li>11.2基于Label的MAC</li>\n<li>11.3推荐读物</li>\n</ul>\n</li>\n</ul>","more":"<hr>\n<h1 id=\"1-移动平台中的主流签名作用\"><a href=\"#1-移动平台中的主流签名作用\" class=\"headerlink\" title=\"1.移动平台中的主流签名作用\"></a>1.移动平台中的主流签名作用</h1><h2 id=\"1-1-自签名的完整性鉴别\"><a href=\"#1-1-自签名的完整性鉴别\" class=\"headerlink\" title=\"1.1 自签名的完整性鉴别\"></a>1.1 自签名的完整性鉴别</h2><pre><code>证书的签名者和证书拥有者是同一个实体---自签名\n    作为信任链的根证书.\n    完整性鉴别\n</code></pre><h2 id=\"1-2-信任模式\"><a href=\"#1-2-信任模式\" class=\"headerlink\" title=\"1.2 信任模式\"></a>1.2 信任模式</h2><pre><code>签名了?\n签名是可信的?\n可信任和普通应用的权利差异\n    人为的把一些操作归类\n    某类操作对于可信任应用和普通应用的表现不一样.\n</code></pre><h2 id=\"1-3-限制安装-运行\"><a href=\"#1-3-限制安装-运行\" class=\"headerlink\" title=\"1.3 限制安装/运行\"></a>1.3 限制安装/运行</h2><pre><code>应用安装时\n    是否包含签名?--&gt;没有?禁止安装\n    提取证书进行验证--&gt;证书是有效且可信任的吗?--&gt;不是?禁止安装\n    基于证书的公钥对签名进行验证--&gt;签名正确吗?--&gt;不正确?禁止安装\n应用运行时\n    是否包含签名?--&gt;没有?禁止运行\n    提取证书进行验证--&gt;证书是有效且可信任的吗?--&gt;不是?禁止运行\n    基于证书的公钥对签名进行验证--&gt;签名正确吗?--&gt;不正确?禁止运行\n</code></pre><h2 id=\"1-4-权限的作用\"><a href=\"#1-4-权限的作用\" class=\"headerlink\" title=\"1.4 权限的作用\"></a>1.4 权限的作用</h2><pre><code>细粒度的特权管理\n    权限是一个ID或者一个字符串\n    权限用来细分权利(类似Capability)\n    通常一个权限与一类操作绑定\n    权限首先需要申请\n    但申请后是否被批准由平台策略决定\n</code></pre><h2 id=\"1-5-权限的安全性保护\"><a href=\"#1-5-权限的安全性保护\" class=\"headerlink\" title=\"1.5 权限的安全性保护\"></a>1.5 权限的安全性保护</h2><pre><code>通过签名\n    权限的完整性保护:防篡改\n    权限的授权安全策略:防Escalate\n</code></pre><h2 id=\"1-6-Android的签名作用\"><a href=\"#1-6-Android的签名作用\" class=\"headerlink\" title=\"1.6 Android的签名作用\"></a>1.6 Android的签名作用</h2><h3 id=\"1-6-1-完整性鉴别\"><a href=\"#1-6-1-完整性鉴别\" class=\"headerlink\" title=\"1.6.1.完整性鉴别\"></a>1.6.1.完整性鉴别</h3><pre><code>支持自签名用于完整性鉴别\n不做信任模式\n不做安装和运行时的限制\n</code></pre><h3 id=\"1-6-2-Signature-Permision和ShareUID\"><a href=\"#1-6-2-Signature-Permision和ShareUID\" class=\"headerlink\" title=\"1.6.2.Signature Permision和ShareUID\"></a>1.6.2.Signature Permision和ShareUID</h3><pre><code>Signature Protection Level Permision\n    用于特权Permission\n    只有特定签名的Apk才被授权\n\n        例如:\n</code></pre><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--访问硬件辅助设备,用于硬件测试 --&gt;</span><br><span class=\"line\">&lt;--allows access to hardware peripherals . Intended only for hardware testing . &lt;p&gt;Not for use by third-party applications.--&gt;</span><br><span class=\"line\">&lt;permission android:name=\"android.permission.HARDWARE_TEST\"</span><br><span class=\"line\">\tandroid:permissionGroup=\"android.permission-group.HARDWARE_CONTROLS\"</span><br><span class=\"line\">\tandroid:protectionLevel=\"signature\"</span><br><span class=\"line\">\tandroid:lable=\"@string/permlab_hardware_test\"</span><br><span class=\"line\">\tandroid:description=\"@string/permadesc_hardware_test\" /&gt;</span><br></pre></td></tr></table></figure>\n<pre><code>Share Process UID\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:sharedUserId=\"xxxx\"</span><br></pre></td></tr></table></figure>\n<pre><code>Process间Share UID的目的是共享资源等 (如:/data/data/A包名/目录下面)\nAndroid中两个APK Share相同的UID必须其签名所用的Private Key一样.\n</code></pre><h3 id=\"1-6-3-身份ID和升级的匹配\"><a href=\"#1-6-3-身份ID和升级的匹配\" class=\"headerlink\" title=\"1.6.3.身份ID和升级的匹配\"></a>1.6.3.身份ID和升级的匹配</h3><pre><code>Android中的自签名只是代表了身份,但不代表身份是否可信任\nAndroid的应用的标识符是Package Name\n    Package Name不一样,相互不影响,允许同时存在(安装)\n    Package Name一样,只能存在一个,允许做升级处理.\n升级的安全性考虑\n    必须签名的证书一致(防假冒,防侵入隐私)\n    如果不一致,则用户要么放弃新的应用,要么先卸载旧的,再安装新的.但这属于安装,不属于升级\n    正常的升级将不擦除应用的工作目录数据,以保证历史数据的持续性.\n</code></pre><h2 id=\"1-7Android-APK之METAINF\"><a href=\"#1-7Android-APK之METAINF\" class=\"headerlink\" title=\"1.7Android APK之METAINF\"></a>1.7Android APK之METAINF</h2><pre><code>APK结构\n</code></pre><p><img src=\"/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/001.png\" alt=\"apk结构\"></p>\n<pre><code>META INF的组成\n</code></pre><p><img src=\"/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/002.png\" alt=\"METAINF结构\"></p>\n<pre><code>签名流程\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar signapk.jar testkey.x509.pem testkey.pk8 update.apk update-signed.apk</span><br></pre></td></tr></table></figure>\n<pre><code>    这条命令的意思是:通过signapk.jar这个可执行jar包，以“testkey.x509.pem”这个公钥文件\n             和“testkey.pk8”这个私钥文件对“update.apk”进行签名，签名后的文件保存为“update_signed.apk”\n    详情可阅:[Android APK 签名比对](http://www.blogjava.net/zh-weir/archive/2011/07/19/354663.html)\n\nMANIFEST.MF文件 (第一重保护,本文本里面包含apk的资源文件的每个文件的SHA1值)\n</code></pre><p><img src=\"/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/003.png\" alt=\"METAINF结构\"></p>\n<pre><code>CERT.SF文件 (第二重保护,本文本里面包含MANIFEST.MF里的所有内容,并包含有MANIFEST.MF的SHA1-Digest-Manifest)\n</code></pre><p><img src=\"/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/004.png\" alt=\"METAINF结构\"></p>\n<pre><code>CERT.RSA (第三重保护,此文件是一个PKCS#7格式的文件,\n    里面包含证书信息,以及基于私钥的签名信息,\n    签名信息是由整个CERT.SF文件的做一个基于sha1(160bit)+rsa(testkey.pk8,publicKey)生成)\n</code></pre><p><img src=\"/res/img/blog/2014/10/27/android_safe_mode_mechanism_three/005.png\" alt=\"METAINF结构\"></p>\n<hr>\n<h1 id=\"2-Android中的权限\"><a href=\"#2-Android中的权限\" class=\"headerlink\" title=\"2.Android中的权限\"></a>2.Android中的权限</h1><h2 id=\"2-1-Android的权限作用\"><a href=\"#2-1-Android的权限作用\" class=\"headerlink\" title=\"2.1 Android的权限作用\"></a>2.1 Android的权限作用</h2><pre><code>细粒度特权管理\n    权限与操作关联\n    应用需要显式申请权限\n    用户对权限可知(不可控) (也可通过LBE,腾讯管家,360等可进行权限控制)\n    对特权权限单独控制\n</code></pre><h2 id=\"2-2-Android的权限类别\"><a href=\"#2-2-Android的权限类别\" class=\"headerlink\" title=\"2.2 Android的权限类别\"></a>2.2 Android的权限类别</h2><pre><code>Normal 没那么敏感\nDangerous 比较敏感的,安装时会被列举出来.\nSignature 基于特殊权限的权限(申请权限的apk它的签名的私钥必须要跟定义这个权限的私钥一致)\nSignatureOrSystem  申请权限的apk它的签名的私钥必须要跟定义这个权限的私钥一致或者apk是系统应用\n</code></pre><h2 id=\"2-3-Android的权限定义方式\"><a href=\"#2-3-Android的权限定义方式\" class=\"headerlink\" title=\"2.3 Android的权限定义方式\"></a>2.3 Android的权限定义方式</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Allows an application to monitor incoming SMS messages, to record or perform processing on them. --&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.RECEIVE_SMS\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:permissionGroup</span>=<span class=\"string\">\"android.permission-group.MESSAGES\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:protectionLevel</span>=<span class=\"string\">\"dangerous\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/permlab_receiveSms\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:description</span>=<span class=\"string\">\"@string/permdesc_receiveSms\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--name 权限名称</span><br><span class=\"line\">\tpermissionGroup 权限组</span><br><span class=\"line\">\tprotectionLevel 权限类别</span><br><span class=\"line\">\tlabel 安装时用户可查看到的信息,提示申请当前权限的作用</span><br><span class=\"line\">\tdescription 显示给用户的申请权限的详细概述--&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://osdn.jp/projects/gb-231r1-is01/scm/git/Gingerbread_2.3.3_r1_IS01/blobs/master/frameworks/base/core/res/AndroidManifest.xml\">源代码frameworks/base/core/res/AndroidManifest.xml</a></p>\n<h2 id=\"2-4-Android的运行时权限控制方式\"><a href=\"#2-4-Android的运行时权限控制方式\" class=\"headerlink\" title=\"2.4 Android的运行时权限控制方式\"></a>2.4 Android的运行时权限控制方式</h2><pre><code>通过PM的CheckPermission\n    Android独有的Service(底层平台不具有)\n    所以需要在Android本身Framework中控制\n    主流的Service一般都基于Binder IPC或者其他IPC提供服务\n    所以在最底层控制(Service所在的Server中)以避免逃逸控制\n        绕开应用函数直接调用远程服务\n    例子:(mContext.checkCallingOrSelfPermission(permission) == PackageManager.PERMISSION_GRANTED)\n\n映射为OS的特定属性\n    非Android特有的Service(底层平台已经提供,如File访问,TCPIP数据收发等)\n    多个入口访问ndroidAPI,Java API NDK C API , Shell , et:Ac\n    底层控制准则,会聚口在底层,所以在底层(OS层面)统一控制,这样可以避免逃逸控制\n    所以复用OS的一些安全控制特性,比如GID\n    所以需要把Android空间的Permission Mapping到OS的GID\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进入到手机SDCard里发现GID都是sdcard_rw</span><br><span class=\"line\">shell@android:/storage/sdcard0 $ ls -l</span><br><span class=\"line\">ls -l</span><br><span class=\"line\">\t      UID      GID</span><br><span class=\"line\">drwxrwxr-x system   sdcard_rw          2014-12-15 18:03 Android</span><br><span class=\"line\">drwxrwxr-x system   sdcard_rw          2015-03-18 16:09 BaiduMapSdk</span><br><span class=\"line\">drwxrwxr-x system   sdcard_rw          2014-06-30 10:04 BaoDownload</span><br><span class=\"line\">drwxrwxr-x system   sdcard_rw          2014-07-07 17:33 Cache</span><br><span class=\"line\">drwxrwxr-x system   sdcard_rw          2014-12-15 18:03 CloudDrive</span><br><span class=\"line\">drwxrwxr-x system   sdcard_rw          2015-03-20 11:33 DCIM</span><br><span class=\"line\">drwxrwxr-x system   sdcard_rw          2014-12-15 18:02 Download</span><br><span class=\"line\">drwxrwxr-x system   sdcard_rw          2015-03-04 12:05 ExtDataTunnel</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span></span><br><span class=\"line\"><span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--当开发者增加上条权限时会程序会自动增加这条信息. 本信息来源:frameworks/base/data/etc/platform.xml--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">permission</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">group</span> <span class=\"attr\">gid</span>=<span class=\"string\">\"sdcard_rw\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">permission</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*进程所占内存proc pid status*/</span><br><span class=\"line\">shell@android:/proc/5914 # cat status</span><br><span class=\"line\">cat status</span><br><span class=\"line\">Name:   n.ledinside.app /*进程的程序名*/</span><br><span class=\"line\">State:  S (sleeping) /*进程的状态信息*/</span><br><span class=\"line\">Tgid:   5914 /*线程组号*/</span><br><span class=\"line\">Pid:    5914 /*进程pid*/</span><br><span class=\"line\">PPid:   148 /*父进程的pid*/</span><br><span class=\"line\">TracerPid:      0 /*跟踪进程的pid*/</span><br><span class=\"line\">Uid:    10075   10075   10075   10075 /*uid euid suid fsuid*/</span><br><span class=\"line\">Gid:    10075   10075   10075   10075 /*gid egid sgid fsgid*/</span><br><span class=\"line\">FDSize: 256 /*文件描述符的最大个数，file-&gt;fds*/</span><br><span class=\"line\">Groups: 1015 1028 3003/*启动该进程的用户所属的组的id*/</span><br><span class=\"line\">VmPeak:   354256 kB /*进程地址空间的大小*/</span><br><span class=\"line\">VmSize:   301964 kB /*进程虚拟地址空间的大小reserved_vm：进程在预留或特殊的内存间的物理页*/</span><br><span class=\"line\">VmLck:         0 kB /*进程已经锁住的物理内存的大小.锁住的物理内存不能交换到硬盘*/</span><br><span class=\"line\">VmPin:         0 kB</span><br><span class=\"line\">VmHWM:     63052 kB /*文件内存映射和匿名内存映射的大小*/</span><br><span class=\"line\">VmRSS:     33884 kB /*应用程序正在使用的物理内存的大小，就是用ps命令的参数rss的值 (rss)*/</span><br><span class=\"line\">VmData:    30484 kB /*程序数据段的大小（所占虚拟内存的大小），存放初始化了的数据*/</span><br><span class=\"line\">VmStk:       136 kB /*进程在用户态的栈的大小*/</span><br><span class=\"line\">VmExe:         8 kB /*程序所拥有的可执行虚拟内存的大小,代码段,不包括任务使用的库 */</span><br><span class=\"line\">VmLib:     28068 kB /*被映像到任务的虚拟内存空间的库的大小*/</span><br><span class=\"line\">VmPTE:       150 kB /*该进程的所有页表的大小*/</span><br><span class=\"line\">VmSwap:        0 kB</span><br><span class=\"line\">Threads:        15 /*共享使用该信号描述符的任务的个数*/</span><br><span class=\"line\">SigQ:   0/3133 /*待处理信号的个数/目前最大可以处理的信号的个数*/</span><br><span class=\"line\">SigPnd: 0000000000000000 /*屏蔽位，存储了该线程的待处理信号*/</span><br><span class=\"line\">ShdPnd: 0000000000000000 /*屏蔽位，存储了该线程组的待处理信号*/</span><br><span class=\"line\">SigBlk: 0000000000001204 /*存放被阻塞的信号*/</span><br><span class=\"line\">SigIgn: 0000000000000000 /*存放被忽略的信号*/</span><br><span class=\"line\">SigCgt: 00000002000094e8 /*存放被俘获到的信号*/</span><br><span class=\"line\">CapInh: 0000000000000000 /*能被当前进程执行的程序的继承的能力*/</span><br><span class=\"line\">CapPrm: 0000000000000000 /*进程能够使用的能力，可以包含CapEff中没有的能力，这些能力是被进程自己临时放弃的*/</span><br><span class=\"line\">CapEff: 0000000000000000 /*是CapPrm的一个子集，进程放弃没有必要的能力有利于提高安全性*/</span><br><span class=\"line\">CapBnd: ffffffffffffffff</span><br><span class=\"line\">Cpus_allowed:   3 /*可以执行该进程的CPU掩码集*/</span><br><span class=\"line\">Cpus_allowed_list:      0-1</span><br><span class=\"line\">voluntary_ctxt_switches:        223 /*进程主动切换的次数*/</span><br><span class=\"line\">nonvoluntary_ctxt_switches:     406 /*进程被动切换的次数*/</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--Groups中1015正好对应的是SDCARD_RW--&gt;</span></span><br><span class=\"line\">#define AID_MEDIA         1013  /* mediaserver process */</span><br><span class=\"line\">#define AID_DHCP          1014  /* dhcp client */</span><br><span class=\"line\">#define AID_SDCARD_RW     1015  /* external storage write access */</span><br><span class=\"line\">#define AID_VPN           1016  /* vpn system */</span><br><span class=\"line\">#define AID_KEYSTORE      1017  /* keystore subsystem */</span><br><span class=\"line\">#define AID_USB           1018  /* USB devices */</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-5-Android的Permission与UID-GID的mapping\"><a href=\"#2-5-Android的Permission与UID-GID的mapping\" class=\"headerlink\" title=\"2.5 Android的Permission与UID/GID的mapping\"></a>2.5 Android的Permission与UID/GID的mapping</h2><pre><code>语法:\n    UID assigning permission: \n        &lt; assign-permission name=&quot;permission_name&quot; uid=&quot;target_uid&quot; /&gt;\n    GIDs Mapping:\n        &lt;permission name=&quot;permission_nema&quot; &gt;\n        &lt;group gid=&quot;assigned gid&quot; /&gt;\n        &lt;group gid=&quot;assigned gid&quot; /&gt;\n        .....\n        &lt;/permission&gt;\n发生时刻:安装时\netc/permissions\n    任何符合以上语法的在system/etc/permissions下面的xml文件,都会被系统读取来parse并进行UID/GID的mapping.\n    比如Platform.xml(check代码)\n</code></pre><p><a href=\"http://osdn.jp/projects/gb-231r1-is01/scm/git/Gingerbread_2.3.3_r1_IS01/blobs/master/frameworks/base/data/etc/platform.xml\">frameworks/base/data/etc/platform.xml</a></p>\n<pre><code>安全性\n    任何应用都可以为自己的permission assign GID? \n        当然不行! 只有Root用户才允许新增或者改写.\n        并且对于ROOT用户组的用户也只有r权限\n        如下为手机system/etc/permissions目录下的文件权限\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">shell@android:/system/etc # ls -l\t</span><br><span class=\"line\">....</span><br><span class=\"line\">drwxr-xr-x root     root              2013-07-09 21:54 permissions</span><br><span class=\"line\">....</span><br><span class=\"line\">shell@android:/system/etc # cd permissions</span><br><span class=\"line\">shell@android:/system/etc/permissions # ls -l platform.xml</span><br><span class=\"line\">-rw-r--r-- root     root         9466 2008-08-01 20:00 platform.xml</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"3-Android中的组件的安全机制\"><a href=\"#3-Android中的组件的安全机制\" class=\"headerlink\" title=\"3.Android中的组件的安全机制\"></a>3.Android中的组件的安全机制</h1><pre><code>Android的4大组件及组件间的通信\n组件的public和private\n组件的权限分配\n</code></pre><h2 id=\"3-1-组件的权限分配-demo\"><a href=\"#3-1-组件的权限分配-demo\" class=\"headerlink\" title=\"3.1 组件的权限分配(demo)\"></a>3.1 组件的权限分配(demo)</h2><h3 id=\"3-1-1-Activity\"><a href=\"#3-1-1-Activity\" class=\"headerlink\" title=\"3.1.1.Activity\"></a>3.1.1.Activity</h3><pre><code>服务端增加相应的权限:\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">    <span class=\"attr\">package</span>=<span class=\"string\">\"com.tu.test.diyPermission\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:versionCode</span>=<span class=\"string\">\"1\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:versionName</span>=<span class=\"string\">\"1.0\"</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-sdk</span></span><br><span class=\"line\">\t<span class=\"attr\">android:minSdkVersion</span>=<span class=\"string\">\"8\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:targetSdkVersion</span>=<span class=\"string\">\"19\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 自定义Activity权限 start --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 自定义Activity权限 end --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></span><br><span class=\"line\">\t<span class=\"attr\">android:allowBackup</span>=<span class=\"string\">\"true\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_launcher\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span> &gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">activity</span></span><br><span class=\"line\">\t    <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.MainActivity\"</span></span><br><span class=\"line\">\t    <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span> &gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 自定义Activity权限 start --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">activity</span></span><br><span class=\"line\">\t    <span class=\"attr\">android:name</span>=<span class=\"string\">\".NewPageActivity\"</span></span><br><span class=\"line\">\t    <span class=\"attr\">android:exported</span>=<span class=\"string\">\"true\"</span></span><br><span class=\"line\">\t    <span class=\"attr\">android:permission</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION\"</span> &gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.NewPageActivity\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 自定义Activity权限 end --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<pre><code>客户端必须申请许可:\n否则会抛出:\n\n    java.lang.SecurityException: Permission Denial: starting Intent { \n        act=com.tu.test.diyPermission.NewPageActivity cmp=com.tu.test.\n        diyPermission/.NewPageActivity (has extras) } from ProcessRecord\n        {41efe3e8 8642:com.tu.test.diyPermission.client/u0a204} (pid=8642,\n        uid=10204) requires com.tu.test.diyPermission.DIYPERMISSION\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">    <span class=\"attr\">package</span>=<span class=\"string\">\"com.tu.test.diyPermission.client\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:versionCode</span>=<span class=\"string\">\"1\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:versionName</span>=<span class=\"string\">\"1.0\"</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-sdk</span></span><br><span class=\"line\">\t<span class=\"attr\">android:minSdkVersion</span>=<span class=\"string\">\"8\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:targetSdkVersion</span>=<span class=\"string\">\"19\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 申请应用DiyPermission中的自定义Activity权限 start --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 申请应用DiyPermission中的自定义Activity权限 end --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></span><br><span class=\"line\">\t<span class=\"attr\">android:allowBackup</span>=<span class=\"string\">\"true\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_launcher\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span> &gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">activity</span></span><br><span class=\"line\">\t    <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.client.MainActivity\"</span></span><br><span class=\"line\">\t    <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span> &gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-2-service\"><a href=\"#3-1-2-service\" class=\"headerlink\" title=\"3.1.2.service\"></a>3.1.2.service</h3><pre><code>服务端增加相应的权限:\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">permission</span></span><br><span class=\"line\">\t<span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_SERVICE\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:label</span>=<span class=\"string\">\"diy Permission service\"</span> </span><br><span class=\"line\">\t<span class=\"attr\">android:description</span>=<span class=\"string\">\"@string/hello_world\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">application</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">\t\t <span class=\"tag\">&lt;<span class=\"name\">service</span></span><br><span class=\"line\">\t\t    <span class=\"attr\">android:name</span>=<span class=\"string\">\".service.NewService\"</span></span><br><span class=\"line\">\t\t    <span class=\"attr\">android:enabled</span>=<span class=\"string\">\"true\"</span></span><br><span class=\"line\">\t\t    <span class=\"attr\">android:exported</span>=<span class=\"string\">\"true\"</span></span><br><span class=\"line\">\t\t    <span class=\"attr\">android:permission</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_SERVICE\"</span> &gt;</span></span><br><span class=\"line\">\t\t    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.SERVICE_ACTION\"</span> /&gt;</span></span><br><span class=\"line\">\t\t    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">service</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<pre><code>客户端必须申请许可:\n否则会抛出:\n    Caused by: java.lang.SecurityException: \n        Not allowed to bind to service Intent { act=com.tu.test.diyPermission.SERVICE_ACTION }\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_SERVICE\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-3-ContentProvide\"><a href=\"#3-1-3-ContentProvide\" class=\"headerlink\" title=\"3.1.3.ContentProvide\"></a>3.1.3.ContentProvide</h3><pre><code>服务端增加相应的权限:\n    读,写,访问权限.\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_WRITE\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_READ\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">application</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">\t\t <span class=\"tag\">&lt;<span class=\"name\">provider</span></span><br><span class=\"line\">\t\t    <span class=\"attr\">android:name</span>=<span class=\"string\">\".provider.NewContentProvider\"</span></span><br><span class=\"line\">\t\t    <span class=\"attr\">android:exported</span>=<span class=\"string\">\"true\"</span></span><br><span class=\"line\">\t\t    <span class=\"attr\">android:authorities</span>=<span class=\"string\">\"com.tu.test.diyPermission.providers.PersonProvider\"</span></span><br><span class=\"line\">\t\t    <span class=\"attr\">android:readPermission</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_READ\"</span></span><br><span class=\"line\">\t\t    <span class=\"attr\">android:writePermission</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_WRITE\"</span></span><br><span class=\"line\">\t\t    <span class=\"attr\">android:permission</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER\"</span> /&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<pre><code>客户端必须申请许可:\n否则会抛出:\n    Caused by: java.lang.SecurityException: Permission Denial: opening provider \n    com.tu.test.diyPermission.provider.NewContentProvider from ProcessRecord{4236abd0\n    22086:com.tu.test.diyPermission.client/u0a204} (pid=22086, uid=10204) requires \n    com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_READ or com.tu.test.\n    diyPermission.DIYPERMISSION_CONTENTPROVIDER_WRITE\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_WRITE\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_READ\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-4-BroadcastReceiver\"><a href=\"#3-1-4-BroadcastReceiver\" class=\"headerlink\" title=\"3.1.4.BroadcastReceiver\"></a>3.1.4.BroadcastReceiver</h3><pre><code>服务端增加权限:\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">\t....</span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.BROADCESTRECEIVER\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">application</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">receiver</span></span><br><span class=\"line\">\t    <span class=\"attr\">android:name</span>=<span class=\"string\">\".receiver.NewReceiver\"</span></span><br><span class=\"line\">\t    <span class=\"attr\">android:permission</span>=<span class=\"string\">\"com.tu.test.diyPermission.BROADCESTRECEIVER\"</span> &gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.BROADCESTRECEIVER_ACTION\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span></span><br><span class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">receiver</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<pre><code>客户端必须申请许可:\n    否则服务端周日接收不到信息\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tu.test.diyPermission.BROADCESTRECEIVER\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"4-应用安装\"><a href=\"#4-应用安装\" class=\"headerlink\" title=\"4.应用安装\"></a>4.应用安装</h1><h2 id=\"4-1-应用安装的安全性考虑和调用方式\"><a href=\"#4-1-应用安装的安全性考虑和调用方式\" class=\"headerlink\" title=\"4.1.应用安装的安全性考虑和调用方式\"></a>4.1.应用安装的安全性考虑和调用方式</h2><pre><code>应用安装是一个高特权/风险操作,所以必须是可知/可控,主流实现方式:客户只能委派而不能直接操作.\n调用安装传统模式: 发送Intent给系统的Package Install app\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">intent.setAction(Intent.ACTION_VIEW);</span><br><span class=\"line\">intent.setDataAndType(Uri.fromFile(file), <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</span><br><span class=\"line\">intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n<pre><code>特权安装模式:系统的Package Install App内部会调用PackageManagerService的Install Package,\n    该操作与android.permission.INSTALL_PACKAGES 绑定,且该peimission的protection level是 signature|system\n\n所谓的静默安装方式只存在Root手机上,开发者可以选择:\n    基于pm cmd : pm install -r\n</code></pre><h2 id=\"4-2-应用安装流程之UID-GID的分配\"><a href=\"#4-2-应用安装流程之UID-GID的分配\" class=\"headerlink\" title=\"4.2.应用安装流程之UID/GID的分配\"></a>4.2.应用安装流程之UID/GID的分配</h2><pre><code>基于Android4.3原代码目录\nframeworks/base/services/java/com/android/srver/pm/PackageManagerService.java\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//installPackage 将会调用 scanPackageLI</span></span><br><span class=\"line\"></span><br><span class=\"line\">privage PackageParser.<span class=\"function\">Package <span class=\"title\">scanPackageLI</span><span class=\"params\">(PackageParser.Package pkg,<span class=\"keyword\">int</span> parseFlags,<span class=\"keyword\">int</span> scanMode,log currentTime,UserHandle user)</span></span>&#123;</span><br><span class=\"line\">\t....</span><br><span class=\"line\">\tpkgSetting = mSettings.getPackageLPw(pkg,origPackage,realName,suid,destCodeFile,destResourceFile,pkg.applicationInfo.nativeLibraryDir,pkg.applicationInfo.flags,user,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t.....</span><br><span class=\"line\">\tpkg.applicationInfo.uid = pkgSetting.appId;<span class=\"comment\">//说明是由Settings里面产生Uid,获取到appId</span></span><br><span class=\"line\">\t....</span><br><span class=\"line\">\t<span class=\"comment\">//invoke installer to do the actual installation </span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = createDataDirsLI(pagName,pkg.applicationInfo.uid,pkg.applicationInfo.seinfo);<span class=\"comment\">//创建工作目录和权限设置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>fameworks/base/services/java/com/android/server/pm/Settings.java\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> PackageSetting <span class=\"title\">getPackageLPw</span><span class=\"params\">(String name,PackageSetting origPackage,String realName,SharedUserSetting shardUser,File codePath,File resourcePath,String nativeLibraryPathString,<span class=\"keyword\">int</span> vc,<span class=\"keyword\">int</span> pkgFlags,UserHandle installUser,Boolean add , <span class=\"keyword\">boolean</span> allowlnstall)</span></span>&#123;</span><br><span class=\"line\">\tPackageSetting p = mPackages.get(name);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!p.codePath.equals(codePath))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//check to see if its a disabled syste</span></span><br><span class=\"line\">\t\t\t.....</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//Assign new user id</span></span><br><span class=\"line\">\t\t\tp.appId = newUserIdLPw(p);<span class=\"comment\">//分配Uid</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//分配Uid的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">newUserIdLPw</span><span class=\"params\">(Object obj)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//Let's be stupidly inefficient for now...</span></span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> N = mUserIds.size();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;N;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mUserIds.get(i)==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\tmUserIds.set(i,obj);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> Process.FIRST_APPLICATION_UID + i;<span class=\"comment\">//这就为什么用户安装的uid都是大于10000的原因.</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//None left?</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(N&gt;(Process.LAST_APPLICATION_UID-Process.FIRST_APPLICATION_UID))&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmUserIds.add(obj);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Process.FIRST_APPLICATION_UID+N;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">frameworks/base/core/java/android/os/Process.java</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FIRST_APPLICATION_UID=<span class=\"number\">10000</span>;<span class=\"comment\">//这就为什么用户安装的uid都是大于10000的原因.</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-应用安装流程之工作目录的创建和权限设置\"><a href=\"#4-3-应用安装流程之工作目录的创建和权限设置\" class=\"headerlink\" title=\"4.3.应用安装流程之工作目录的创建和权限设置\"></a>4.3.应用安装流程之工作目录的创建和权限设置</h2><pre><code>frameworks/base/services/java/com/android/server/pm/PackageManagerService.java\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">createDataDirsLI</span><span class=\"params\">(String packageName,<span class=\"keyword\">int</span> uid,String seinfo)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> [] users = sUserManager.getUserIds();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> res = mlnstaller.install(packageName,uid,uid,seinfo);<span class=\"comment\">//从这里可以看出uid gid都被设置成uid</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(res&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//only for multi-user//Android 4.1之后支持多用户</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> user: users)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(user!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\tres = mlnstaller.createUserData(packageName,UserHandle.getUid(user,uid),user);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(res&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>frameworks/base/services/java/com/anddroid/server/pm/Installer.java\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">connect</span><span class=\"params\">()</span></span>&#123;<span class=\"comment\">//Installer一起来会进行初始化</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(mSocket!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\tmSocket = <span class=\"keyword\">new</span> LocalSocket();</span><br><span class=\"line\">\t\t<span class=\"comment\">//本地Socket</span></span><br><span class=\"line\">\t\tLocalSocketAddress address = <span class=\"keyword\">new</span> LocalSocketAddress(<span class=\"string\">\"installd\"</span>,LocalSocketAddress.Namespace.RESERVED);</span><br><span class=\"line\">\t\tmSocket.connect(address);</span><br><span class=\"line\">\t\tmIn = mSocket.getInputStream();</span><br><span class=\"line\">\t\tmOut = mSocket.getOutputStream();</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">catch</span>(IOException ex)&#123;</span><br><span class=\"line\">\t\tdisconnect();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">install</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> uid , <span class=\"keyword\">int</span> gid , String seinfo)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//内部协议</span></span><br><span class=\"line\">\tStringBuilder builder = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"install\"</span>);</span><br><span class=\"line\">\tbuilder.append(<span class=\"string\">''</span>);</span><br><span class=\"line\">\tbuilder.append(name);</span><br><span class=\"line\">\tbuilder.append(<span class=\"string\">''</span>);</span><br><span class=\"line\">\tbuilder.append(uid);</span><br><span class=\"line\">\tbuilder.append(<span class=\"string\">''</span>);</span><br><span class=\"line\">\tbuilder.append(gid);</span><br><span class=\"line\">\tbuilder.append(<span class=\"string\">''</span>);</span><br><span class=\"line\">\tbuilder.append(seinfo!=<span class=\"keyword\">null</span>?seinfo:<span class=\"string\">\"!\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> execute(builder.toString());<span class=\"comment\">//会调用mOut mIn发数据</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>frameworks/native/cmds/installd/installd.c\n</code></pre><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;   <span class=\"comment\">//here the SOCKET_PATH is installd</span></span><br><span class=\"line\">\t..........</span><br><span class=\"line\">\tlsocket = android_get_control_socket(SOCKET_PATH);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (listen(lsocket, <span class=\"number\">5</span>)) &#123;&#125;</span><br><span class=\"line\">\t fcntl(lsocket, F_SETFD, FD_CLOEXEC);</span><br><span class=\"line\">\t <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">\t\talen = <span class=\"keyword\">sizeof</span>(addr);</span><br><span class=\"line\">\t\ts = accept(lsocket, &amp;addr, &amp;alen);</span><br><span class=\"line\">\t\tfcntl(s, F_SETFD, FD_CLOEXEC);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(readx(s,buf,count))&#123;&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(execute(s,buf))<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">do_install</span><span class=\"params\">(<span class=\"keyword\">char</span> **arg, <span class=\"keyword\">char</span> reply[REPLY_MAX])</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    return install(arg[<span class=\"number\">0</span>], atoi(arg[<span class=\"number\">1</span>]), atoi(arg[<span class=\"number\">2</span>]), atoi(arg[<span class=\"number\">3</span>])); <span class=\"comment\">/* pkgname, uid, gid */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>framework/native/cmds/installd/commands.c\n</code></pre><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">install</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *pkgname, <span class=\"keyword\">int</span> encrypted_fs_flag, uid_t uid, gid_t gid)</span></span>&#123;</span><br><span class=\"line\">\t.....</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(create_pkg_path(pkgdir,pkgname,PKG_DIR_POSTEIX,<span class=\"number\">0</span>))&#123;<span class=\"comment\">//创建工作目录结构,/data/data/包名/</span></span><br><span class=\"line\">\t\tALOGE(<span class=\"string\">\"cannot create package path\\n\"</span>);</span><br><span class=\"line\">\t\treturn <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;....</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mkdir(pkgdir, <span class=\"number\">0751</span>) &lt; <span class=\"number\">0</span>) &#123;<span class=\"comment\">//创建目录,并设置权限 0751 uid7(4+2+1)读写执行,gid5(4+1)读执行,其它1(1)执行</span></span><br><span class=\"line\">\t\tALOGE(<span class=\"string\">\"cannot create dir '%s': %s\\n\"</span>, pkgdir, strerror(errno));</span><br><span class=\"line\">\t\treturn <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (chmod(pkgdir,<span class=\"number\">0751</span>) &lt; <span class=\"number\">0</span>) &#123;<span class=\"comment\">//再设置一次权限</span></span><br><span class=\"line\">\t\tALOGE(<span class=\"string\">\"cannot chmod dir '%s': %s\\n\"</span>, pkgdir, strerror(errno));</span><br><span class=\"line\">\t\tunlink(pkgdir);</span><br><span class=\"line\">\t\treturn -errno;</span><br><span class=\"line\">\t&#125;.....</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(chown(pkgdir,uid,gid)&lt;<span class=\"number\">0</span>)&#123;<span class=\"comment\">//因设置权限时是使用root用户,些处再进行权限修改.把uid root , gid root 修改成应用的uid,与gid.</span></span><br><span class=\"line\">\t.....</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-Android中系统Service的安全\"><a href=\"#5-Android中系统Service的安全\" class=\"headerlink\" title=\"5.Android中系统Service的安全\"></a>5.Android中系统Service的安全</h1><h2 id=\"5-1-Binder的安全\"><a href=\"#5-1-Binder的安全\" class=\"headerlink\" title=\"5.1 Binder的安全\"></a>5.1 Binder的安全</h2><pre><code>Binder的作用:实现以IPC的RPC,完成远程业务范围.\n</code></pre><p><a href=\"http://blog.csdn.net/luoshengyang/article/details/6618363\">Android进程间通信（IPC）机制Binder简要介绍和学习计划</a></p>\n<p><a href=\"http://blog.csdn.net/luoshengyang/article/details/38326729\">SEAndroid安全机制对Binder IPC的保护分析</a></p>\n<h2 id=\"5-2-ServiceManager-Add-Service的安全限制\"><a href=\"#5-2-ServiceManager-Add-Service的安全限制\" class=\"headerlink\" title=\"5.2 ServiceManager Add Service的安全限制\"></a>5.2 ServiceManager Add Service的安全限制</h2><pre><code>Service Manager Process的作用: Naming Resolver,用于RPC框架中 AddService  GetSetvice\n</code></pre><h2 id=\"5-3-Zygote的Process-Fork\"><a href=\"#5-3-Zygote的Process-Fork\" class=\"headerlink\" title=\"5.3 Zygote的Process Fork\"></a>5.3 Zygote的Process Fork</h2><p><a href=\"http://blog.csdn.net/luoshengyang/article/details/6768304\">Android系统进程Zygote启动过程的源代码分析</a></p>\n<p><a href=\"http://www.cnblogs.com/innost/archive/2011/01/26/1945769.html\">Android深入浅出之Zygote</a></p>\n<h2 id=\"5-4-Zygote的Socket安全检查\"><a href=\"#5-4-Zygote的Socket安全检查\" class=\"headerlink\" title=\"5.4 Zygote的Socket安全检查\"></a>5.4 Zygote的Socket安全检查</h2><p><a href=\"\">空</a></p>\n<h1 id=\"6-Android中的ContentProvider以及基于URI的安全\"><a href=\"#6-Android中的ContentProvider以及基于URI的安全\" class=\"headerlink\" title=\"6.Android中的ContentProvider以及基于URI的安全\"></a>6.Android中的ContentProvider以及基于URI的安全</h1><h2 id=\"6-1-ContentProvider的作用\"><a href=\"#6-1-ContentProvider的作用\" class=\"headerlink\" title=\"6.1.ContentProvider的作用\"></a>6.1.ContentProvider的作用</h2><h3 id=\"6-1-1-软件设计更优美-官方\"><a href=\"#6-1-1-软件设计更优美-官方\" class=\"headerlink\" title=\"6.1.1.软件设计更优美(官方)\"></a>6.1.1.软件设计更优美(官方)</h3><pre><code>屏蔽内部数据存储操作的差异性\n对外提供一致的数据操作方式\n抽象/共性----&gt;都是数据操作\n</code></pre><h3 id=\"6-1-2-进程间数据共享\"><a href=\"#6-1-2-进程间数据共享\" class=\"headerlink\" title=\"6.1.2.进程间数据共享\"></a>6.1.2.进程间数据共享</h3><pre><code>       Proxy|        Binder              |  Content Provider\nclient Process  ------------------------------- &gt; Service Process \n</code></pre><h2 id=\"6-2-权限临时继承的需求\"><a href=\"#6-2-权限临时继承的需求\" class=\"headerlink\" title=\"6.2.权限临时继承的需求\"></a>6.2.权限临时继承的需求</h2><pre><code>临时委派使得委托者的权限临时提升(类似Root-setUID模式)\n</code></pre><h2 id=\"6-3-配置ContentProvider允许临时委派权限\"><a href=\"#6-3-配置ContentProvider允许临时委派权限\" class=\"headerlink\" title=\"6.3.配置ContentProvider允许临时委派权限\"></a>6.3.配置ContentProvider允许临时委派权限</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">provider</span> </span><br><span class=\"line\">\t<span class=\"attr\">android:readPermission</span>=<span class=\"string\">\"com.tu.test.diyPermission.DIYPERMISSION_CONTENTPROVIDER_READ\"</span></span><br><span class=\"line\">\t<span class=\"attr\">android:grantUriPermissions</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--允许派遣给uri--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">provider</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">grant-uri-permission</span> <span class=\"attr\">android:path</span>=<span class=\"string\">\"/comtu/\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--允许派遣给限制URI的路径--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">provider</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">grant-uri-permission</span> <span class=\"attr\">android:pathPrefix</span>=<span class=\"string\">\"/abc/\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!--允许派遣给限制URI的路径前缀--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">provider</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">grant-uri-permission</span> <span class=\"attr\">android:pathPattern</span>=<span class=\"string\">\".*public.*\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--允许派遣给限制URI的路径通过正则--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"6-4-基于URI的权限临时委派\"><a href=\"#6-4-基于URI的权限临时委派\" class=\"headerlink\" title=\"6.4.基于URI的权限临时委派\"></a>6.4.基于URI的权限临时委派</h2><h3 id=\"6-4-1-基于API\"><a href=\"#6-4-1-基于API\" class=\"headerlink\" title=\"6.4.1 基于API\"></a>6.4.1 基于API</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//委派uri权限临时委派给com.example.testapps.test2,权限为FLAG_GRANT_READ_URI_PERMISSION</span></span><br><span class=\"line\">uri = <span class=\"string\">\"content://com.example.testapps.test1.mailprovider/attachments/42\"</span>;</span><br><span class=\"line\">Context.grantUriPermission(<span class=\"string\">\"com.example.testapps.test2\"</span>,uri,Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//一定时间之后将收回委派的权限.否则可能存在安全隐患.需要思考的时什么时候收回.</span></span><br><span class=\"line\">uri = <span class=\"string\">\"content://com.example.testapps.test1.mailprovider/attachments/42\"</span>;</span><br><span class=\"line\">Context.revokeUriPermission(uri,Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-4-2-基于Intent\"><a href=\"#6-4-2-基于Intent\" class=\"headerlink\" title=\"6.4.2 基于Intent\"></a>6.4.2 基于Intent</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class=\"line\">intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class=\"line\">intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br><span class=\"line\">intent.setDataAndType(uri,<span class=\"string\">\"image/gif\"</span>);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n<pre><code>权限的生命周期: Activity Start --&gt; Destro即Activity的生命周期\n</code></pre><h1 id=\"7-Android的Policy模式和多设备绑定\"><a href=\"#7-Android的Policy模式和多设备绑定\" class=\"headerlink\" title=\"7.Android的Policy模式和多设备绑定\"></a>7.Android的Policy模式和多设备绑定</h1><h2 id=\"7-1-Android的Policy模式\"><a href=\"#7-1-Android的Policy模式\" class=\"headerlink\" title=\"7.1.Android的Policy模式\"></a>7.1.Android的Policy模式</h2><pre><code>一个移动平台它解决用户隐私,相当的一系列控制或者说是跟用户的交互模式.\n安装时安全提问\n    列出所有权限,提示用户是否安装.\n\n    All or Nothing \n    None Runtime Control \n    None Recallable \n    Disable untrust source by default \n</code></pre><h2 id=\"7-2-MR2开始的AppOps-安卓4-3开始\"><a href=\"#7-2-MR2开始的AppOps-安卓4-3开始\" class=\"headerlink\" title=\"7.2.MR2开始的AppOps(安卓4.3开始)\"></a>7.2.MR2开始的AppOps(安卓4.3开始)</h2><pre><code>如 LBE 等安全卫士控制权限\n\n&gt;基于AppOps Service\n&gt;定义Ignore , Allow Reject 3种Policy\n&gt;Hook and check Permission\n</code></pre><h2 id=\"7-3AppOps对开发者的影响\"><a href=\"#7-3AppOps对开发者的影响\" class=\"headerlink\" title=\"7.3AppOps对开发者的影响\"></a>7.3AppOps对开发者的影响</h2><pre><code>开发者已经申请权限时,但被LBE等安全卫士等的权限限制.\n    会导致权限一样获取不到.为了代码健壮性,需加多一些try catch.防止异常\n</code></pre><h2 id=\"7-4设备绑定\"><a href=\"#7-4设备绑定\" class=\"headerlink\" title=\"7.4设备绑定\"></a>7.4设备绑定</h2><pre><code>应用与设备绑定的需求前景\n    如,计费应用.\n\n&gt;同时基于SIM卡和Device的绑定(如BREW下载,单机内的下载卡可用.基于SIM卡计费,运营商间排斥)\n&gt;仅基于Device的绑定(如Google Store下载,当时下载的Device可用)\n&gt;实现: 加密 per device per SIM卡\n    Device Key: ESN/MEID/IMEI or random generate\n    SIM ID : IMSI\n</code></pre><h2 id=\"7-5跨设备使用\"><a href=\"#7-5跨设备使用\" class=\"headerlink\" title=\"7.5跨设备使用\"></a>7.5跨设备使用</h2><pre><code>基于Account ID的云端管理\nDevice1 --buy it using xx@x.x account --&gt;AppStore&lt;----Down load freely--(Register as xx@x.x) --Device2\n</code></pre><h1 id=\"8-应用内计费和App2SDCard\"><a href=\"#8-应用内计费和App2SDCard\" class=\"headerlink\" title=\"8.应用内计费和App2SDCard\"></a>8.应用内计费和App2SDCard</h1><h2 id=\"8-1-应用内计费\"><a href=\"#8-1-应用内计费\" class=\"headerlink\" title=\"8.1 应用内计费\"></a>8.1 应用内计费</h2><pre><code>什么是应用内计费\n    In App purchase or In app Billing(IAP,IAB)\n    直接在应用内进行Paymen以unLock某些功能,或者买某些道具等\n应用内计费的需求\n    可支付途径(信用卡,手机卡等)\n    安全性:\n        面向用户\n            可知\n            可控\n        面向应用\n            可信(避免免费使用收费内容)\n\n解决方案\n    &gt;计费Server接口保密且Transiction加密(SSL)\n    &gt;仅允许配套的安全本地组件与计费Server通信,且安全本地组件负责\n        与用户的&quot;显式&quot;交互,同时提供API给Client\n    &gt;Clent仅允许调用本地计费安全组件来委派Transiction\n    &gt;Response的signature + Nounce (防止重放攻击)\n</code></pre><h2 id=\"8-2-SD卡安装应用的安全策略\"><a href=\"#8-2-SD卡安装应用的安全策略\" class=\"headerlink\" title=\"8.2 SD卡安装应用的安全策略\"></a>8.2 SD卡安装应用的安全策略</h2><pre><code>绑定设备\n    &gt;绑定perDevice使得防Export:应用以及应用数据(SD卡允许Export)\n    &gt;以加密实现之:例子,应用安装至SD卡(.Android_Secure in SDCard)\n\nASEC的不可访问性\n    由于.Android_Secure的加密特性,所以需要禁止应用直接Access该Folder(允许Access SDCard上的其他任何内容)\n</code></pre><h1 id=\"9-Android中的多用户安全\"><a href=\"#9-Android中的多用户安全\" class=\"headerlink\" title=\"9.Android中的多用户安全\"></a>9.Android中的多用户安全</h1><pre><code>4.2开始可以支持\n</code></pre><h2 id=\"9-1需求场景\"><a href=\"#9-1需求场景\" class=\"headerlink\" title=\"9.1需求场景\"></a>9.1需求场景</h2><pre><code>已有的例子/ Windows/Linux多用户\n\nAndroid中的差别\n    UID/GID跟着User走\n    UID/GID和User的区分和绑定\n应用的可控共享\n    共享,不存在多份Code\n    可控,控制谁可见.\n数据的多用户独立\n    工作目录\n    External Storage(外部存储器)\n</code></pre><h2 id=\"9-2UserManagerService\"><a href=\"#9-2UserManagerService\" class=\"headerlink\" title=\"9.2UserManagerService\"></a>9.2UserManagerService</h2><pre><code>作用:\n    管理User的属性信息: 设置/获取用户的UserId,Name,Icon,RestrictProfile等\n    管理User:创建,删除等\n\nUserId(UserHandle)是Process的属性,不100%等同于当前设置切换的用户\n一切与多用户相关的运行时行为(比如Mount的SDCard等)与进程的UserID所属有关,\n    而与当前设置中的当前用户没有必然联系\n典型的例子:\n    通过adb shell的方式,永远只能访问User0的SDCard:/data/media/0,不管切换哪个用户\n    通过文件管理器应用访问的SDCard则与当前用户相关.\n    原因: adb shell只存在User0,不管在哪个当前设置用户下.\n</code></pre><h2 id=\"9-3对开发者的影响\"><a href=\"#9-3对开发者的影响\" class=\"headerlink\" title=\"9.3对开发者的影响\"></a>9.3对开发者的影响</h2><pre><code>永远使用相对路径(基于工作目录)以及基于Environment.getXXXX来获取你感兴趣的路径(Environment内部\n    会处理多用户).否则会出现路径错误而访问被拒绝的问题.\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">New <span class=\"title\">File</span><span class=\"params\">(<span class=\"string\">\"setting/setting.log\"</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">New <span class=\"title\">File</span><span class=\"params\">(Environment.getExternalStorageDirectory+<span class=\"string\">\"SharePic/a.png\"</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-Android-Superuser机制讲解\"><a href=\"#10-Android-Superuser机制讲解\" class=\"headerlink\" title=\"10.Android Superuser机制讲解\"></a>10.Android Superuser机制讲解</h1><h2 id=\"10-1-ROOT的作用\"><a href=\"#10-1-ROOT的作用\" class=\"headerlink\" title=\"10.1 ROOT的作用\"></a>10.1 ROOT的作用</h2><pre><code>Customization(定制,用户化)\n任何需要特权的操作\n</code></pre><h2 id=\"10-2-ROOT的第一步-寻找漏洞并安装特权文件\"><a href=\"#10-2-ROOT的第一步-寻找漏洞并安装特权文件\" class=\"headerlink\" title=\"10.2 ROOT的第一步:寻找漏洞并安装特权文件\"></a>10.2 ROOT的第一步:寻找漏洞并安装特权文件</h2><pre><code>Hack会寻找漏洞,如UID设置设备(ADB)\n手机Root后,最重要的是,给手机安装了su程序和superuser apk. su一般被安装在/system/xbin或者/system/bin\n</code></pre><h2 id=\"10-3-SU的sUID的特性\"><a href=\"#10-3-SU的sUID的特性\" class=\"headerlink\" title=\"10.3 SU的sUID的特性\"></a>10.3 SU的sUID的特性</h2><pre><code>Android的App授权获取Root权限,其实不是App自身的权限提升了,而是通过具有Root权限的Sh流来执行shell命令.\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell@android:/system/xbin # ls su -l</span><br><span class=\"line\">ls su -l</span><br><span class=\"line\">-rwsr-sr-x root     root        79500 2008-08-01 20:00 su</span><br></pre></td></tr></table></figure>\n<pre><code>这里可以看到,su是Owner和Group分别为Root,Root.Other用户具有Execute权限,另外,su设置了suid和sgid,这个非常重要,\n    使得Su进程可以提升自身的EUID.\n</code></pre><h2 id=\"10-4-SU的核心代码分析\"><a href=\"#10-4-SU的核心代码分析\" class=\"headerlink\" title=\"10.4 SU的核心代码分析\"></a>10.4 SU的核心代码分析</h2><pre><code>在JB MR2(4.3)之前,Apk内部可以通过Java的Runtime执行一个\n    具有Root-setUid的可执行文件而提升Effective UID来完成一些特权操作,典型的Root包中的su就是这个原理.\nJB MR2中,修补了改漏洞.\n</code></pre><h2 id=\"10-5-MR2后的方案-SU-Deamon-Service\"><a href=\"#10-5-MR2后的方案-SU-Deamon-Service\" class=\"headerlink\" title=\"10.5 MR2后的方案:SU Deamon Service\"></a>10.5 MR2后的方案:SU Deamon Service</h2><pre><code>怎么办? Native Service依然可以利用Root-setUID的su提升权限\n</code></pre><h1 id=\"11-SEAndroid\"><a href=\"#11-SEAndroid\" class=\"headerlink\" title=\"11.SEAndroid\"></a>11.SEAndroid</h1><h2 id=\"11-1-DAC和MAC\"><a href=\"#11-1-DAC和MAC\" class=\"headerlink\" title=\"11.1 DAC和MAC\"></a>11.1 DAC和MAC</h2><pre><code>DAC\n    自主访问控制\n    主体(Process)的Capability觉得了它能访问和操作什么?\n        Root进程可以访问和操作一切!\n    传统(legacy)Linux的安全模式,基于UID/GID/Capability\nMAC \n    强制访问控制\n    系统的Policy觉得了主体能操作访问哪些客体\n    即便是ROOT进程,系统Policy配置了你能做什么,你只能做什么,在MAC模式下,ROOT进程和普通进程是无区别对待的.\n</code></pre><h2 id=\"11-2-基于Label的MAC\"><a href=\"#11-2-基于Label的MAC\" class=\"headerlink\" title=\"11.2 基于Label的MAC\"></a>11.2 基于Label的MAC</h2><pre><code>每个主体/客体在运行时都绑定一个标签(Label)\n该标签又称为Security Context\nSecurity Context的构成\n    User : Role : Type : SecurityLevel\n    比如: u:r:zygote:s0\nType Enhancement\n    Security Context中的Type主要是用于Policy的设定,即Policy\n    一般的Rule是:\n        Allow Type Type : Operation\n        Allow appdomain zygote_tmpfs:file read;\n    所以,Type被实际用于&quot;授权&quot;的Decision,所以称之为Type Enhancement\nls命令的SELinux版本: ls -l -Z\n\nPs命令的SELinux版本: ps -Z\n</code></pre><h2 id=\"11-3-推荐读物\"><a href=\"#11-3-推荐读物\" class=\"headerlink\" title=\"11.3 推荐读物\"></a>11.3 推荐读物</h2><p><a href=\"http://opensource.com/business/13/11/selinux-policy-guide\">Your visual how-to guide for SELinux policy enforcement</a></p>\n<p><a href=\"http://book.51cto.com/art/200810/94193.htm\">SELinux实例：使用安全增强的Linux</a></p>\n<hr>\n<h1 id=\"Demo下载\"><a href=\"#Demo下载\" class=\"headerlink\" title=\"Demo下载\"></a>Demo下载</h1><p>Android中的组件的安全机制之组件的权限分配(Demo)<br>Activity Service ContentProvide BroadcastReceiver四大组件不同App数据通信:<br><a href=\"/res/file/blog/2014/10/27/android_safe_mode_mechanism_three/Permission.rar\">Demo</a></p>"},{"layout":"post","title":"Android 中NDK的使用详解第二篇:Hello World","duoshuo":true,"date":"2014-10-28T16:00:00.000Z","SyntaxHihglighter":true,"shTheme":"shThemeMidnight","_content":"\n目录:\n\t\n\tHello World\n\t编译多个源文件\n\t支持多CPU架构\n\t使用Ant批量生成头文件\n\n上一编讲到了搭建AndroidNDK开发环境的内容,这篇则进行实战.\n\n在实战之前首先介绍一下NDK与JNI的关系.\n\n> JNI (Java Native Interface)   \n> JNI是java语言提供的Java和C/C++相互沟通的机制，  \n> Java可以通过JNI调用本地的C/C++代码，本地的C/C++的代码也可以调用java代码。   \n> JNI 是本地编程接口，Java和C/C++互相通过的接口。  \n> Java通过C/C++使用本地的代码的一个关键性原因在于C/C++代码的高效性。\n\n> NDK是一系列工具的集合。它提供了一系列的工具，  \n> 帮助开发者快速开发C（或C++）的动态库，并能自动将so和java应用一起打包成apk。   \n> 这些工具对开发者的帮助是巨大的。它集成了交叉编译器，并提供了相应的mk文件  \n> 隔离CPU、平台、ABI等差异，开发人员只需要简单修改mk文件（指出“哪些文件需要  \n> 编译”、“编译特性要求”等），就可以创建出so。它可以自动地将so和Java应用一起  \n> 打包，极大地减轻了开发人员的打包工作。\n\n> 简单概括: 用C语言生成一个库文件，在java中调用这个库文件的函数。  \n> JNI的过程比较复杂，生成.so需要大量操作，而NDK就是简化了这个过程。\n\n<!-- more -->\n\n# Hello World\n\n创建一个项目:\n项目名为AndroidNDK\n项目包名为:com.tu.test.androidndk\n\n## 1.使用Android Tools工具为项目工程支持NDK\n\n> 项目上右击-->`Android Tools`-->`add native support`-->`输入或者默认的名称(例如:AndroidNDK)`-->`finish`  \n> 会注意到项目目录下多了一个`jni`的目录里面多了两个文件**Android.mk** , **AndroidNDK.app**(上面输入的名称)  \n> 以及多了一个obj的目录\n\n## 2.创建一个类.\n\n> 声明一个带有native修饰的方法  \n\n```java\npackage com.tu.test.androidndk.jni;\npublic class Port {\n\tpublic static native String sayHello(String str);\n}\n```\n\n\n## 3.使用javah命令生成头文件并拷贝到jni目录(后会被后面的使用Ant批量生成头文件方法代替)\n\t\n> 使用cmd把目录定位到\"`项目路径/bin/classes/`\"项目下.\n\n```shell\n\tC:\\Users\\comtu>cd E:\\ComTu_Design\\workspace\\AndroidNDK\n\tC:\\Users\\comtu>e:\n\tE:\\ComTu_Design\\workspace\\AndroidNDK>cd bin\n\tE:\\ComTu_Design\\workspace\\AndroidNDK\\bin>cd classes\n\tE:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes>dir\n\t 驱动器 E 中的卷没有标签。\n\t 卷的序列号是 EE26-DAFE\n\t E:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes 的目录\n\t2015-07-14  14:50    &lt;DIR>          .\n\t2015-07-14  14:50    &lt;DIR>          ..\n\t2015-07-14  14:50    &lt;DIR>          android\n\t2015-07-14  14:50    &lt;DIR>          com\n\t               0 个文件              0 字节\n\t               4 个目录 35,301,425,152 可用字节\n```\n\t\t       \n> 使用Javah命令生成包含native方法定义的C/C++头文件\n\n```shell\n\tE:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes>javah -jni com.tu.test.androidndk.jni.Port\n\tE:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes>dir\n\t 驱动器 E 中的卷没有标签。\n\t 卷的序列号是 EE26-DAFE\n\t\n\t E:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes 的目录\n\t\n\t2015-07-14  16:15    &lt;DIR>          .\n\t2015-07-14  16:15    &lt;DIR>          ..\n\t2015-07-14  16:08    &lt;DIR>          android\n\t2015-07-14  16:08    &lt;DIR>          com\n\t2015-07-14  16:15             1,213 com_tu_test_androidndk_jni_Port.h\n\t               1 个文件          1,213 字节\n\t               4 个目录 35,301,281,792 可用字节\n```\n\n> 输入完后控制台不会有打印信息,只会在E:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes>目  \n> 录下会生成一个文件名为**com_tu_test_androidndk_jni_Port.h**的头文件\n\t\n> 拷贝头文件   \n\n> 把生成的.h文件拷贝到步骤2生成的jni目录下.\n\n\t使目录结构如下:\n\t\tjni\n\t\t|-Android.mk\n\t\t|-AndroidNDK.app\n\t\t|-com_tu_test_androidndk_jni_Port.h\n\n## 4. 编写代码实现\n\n> 打开com_tu_test_androidndk_jni_Port.h文件\n\n```c\nJNIEXPORT jstring JNICALL Java_com_tu_androidndk_jni_Port_sayHello\n  (JNIEnv *, jclass, jstring);\n```\n\n> 把生成的方法拷贝到AndroidNDK.app里面.并实现方法体.\n\n```c\n#include &lt;jni.h>\n#include &lt;stdio.h>\n#include \"com_tu_androidndk_jni_Port.h\"//引入头文件\n#include &lt;android/log.h>\n//Logcat打印日志 Android.mk 文件必须配置: LOCAL_LDLIBS += -L$(SYSROOT)/usr/lib -llog\n\nJNIEXPORT jstring JNICALL Java_com_tu_androidndk_jni_Port_sayHello(\n\t\tJNIEnv *env, jclass clazz, jstring s) {\n\n\tchar * st = (char *) env->GetStringUTFChars(s, 0);\n\tprintf(\"\\n c-string:  %s\", st);\n\n\t//在Logcat中打印日志,在个参数,日志类型,过滤标签Tag,输入的文本内容Text\n\t__android_log_print(ANDROID_LOG_INFO, \"JNIMsg\", \"\\n c-string: %s\",st);\n\n\tjstring rtn = env->NewStringUTF(\"hello Comtu!\");\n\treturn rtn;\n}\n\n```\n\n> 在java里并编写静态代码块加载lib\n\n```java\n\tpackage com.tu.androidndkhelloworld;\n\timport android.app.Activity;\n\timport android.os.Bundle;\n\timport android.widget.TextView;\n\timport com.tu.androidndkhelloworld.jni.Port;\n\n\tpublic class MainActivity extends Activity {\n\t\tstatic {\n\t\t\tSystem.loadLibrary(\"AndroidNDK\");\n\t\t}\n\t\t@Override\n\t\tprotected void onCreate(Bundle savedInstanceState) {\n\t\t\tsuper.onCreate(savedInstanceState);\n\t\t\tsetContentView(R.layout.activity_main);\n\t\t\t//调用C程序实现的sayHello方法\n\t\t\t((TextView)findViewById(R.id.text)).setText(Port.sayHello(\"Hi\"));\n\t\t}\n\t}\n```\n\n> 运行程序(注意以上操作只适合于ARM架构的CPU)\n\t\t\n---\n\t\n# 编译多个源文件\n\n## 1.jni目录里创建多一个c文件\n\n> 选择jni-->右击选择new-->other-->C/C++-->class-->文件名如(Hello)  \n> 或者  \n> 选择C/C++ Perspective 视图 -->jni目录下右击new-->class-->文件名(Hello)  \n> 目录下就会自己创建出Hello.cpp与Hello.h文件\n\n\t使目录结构如下:\n\t\tjni\n\t\t|-Android.mk\n\t\t|-AndroidNDK.app\n\t\t|-com_tu_test_androidndk_jni_Port.h\n\t\t|-Hello.cpp\n\t\t|-Hello.h\n\t\n## 2.编写新创建的Hello.h文件\n\n```c\n\t#ifndef HELLO_H_\n\t#define HELLO_H_\n\t\n\tclass Hello {\n\tpublic:\n\t\tHello();\n\t\tchar * getWords();//&lt;----编写一个方法\n\t\tvirtual ~Hello();\n\t};\n\t\n\t#endif /* HELLO_H_ */\n```\n\n## 3.实现Hello.cpp代码\n\n```c\n\t#include \"Hello.h\"\n\t\n\tHello::Hello() {}\n\t\n\tchar * Hello::getWords(){//&lt;----编写一个方法用于与java交互\n\t\treturn \"Hello NDK\";\n\t}\n\t\n\tHello::~Hello() {}\n```\n\n## 4.编写Android.mk文件,让Hello可进行编译\n\n> LOCAL_LDLIBS += -L$(SYSROOT)/usr/lib -llog 要打印log需要增加\n\n```xml\n\tLOCAL_PATH := $(call my-dir)\n\n\tinclude $(CLEAR_VARS)\n\t\n\tLOCAL_LDLIBS += -L$(SYSROOT)/usr/lib -llog\n\n\tLOCAL_MODULE    := AndroidNDK\n\tLOCAL_SRC_FILES := AndroidNDK.cpp Hello.cpp\n\t\n\tinclude $(BUILD_SHARED_LIBRARY)\n```\n\n> 如果增加很多个.cpp文件使用空格分开,为了方便观看也可使用\\符号进行分行显示\n\n```xml\n\t\tLOCAL_SRC_FILES := AndroidNDK.cpp \\\n\t\tHello.cpp\n```\n\n## 5.编写TwoPort类增加如下代码作为测试\n\n```java\n\tpackage com.tu.androidndkhelloworld.jni;\n\tpublic class TwoPort {\n\t\tpublic static native String getWords();\n\t}\n```\n\n> 继续使用javah命令或者使用批量生头文件(见下文)的方式.生成头文件到jni目录.\n\n\t使目录结构如下:\n\t\tjni\n\t\t|-Android.mk\n\t\t|-AndroidNDK.app\n\t\t|-com_tu_test_androidndk_jni_Port.h\n\t\t|-com_tu_test_androidndk_jni_TwoPort.h\n\t\t|-Hello.cpp\n\t\t|-Hello.h\n\n> AndroidNDK.cpp实现代码\n\n```c\n\t#include &lt;jni.h>\n\t#include &lt;stdio.h>\n\t#include \"com_tu_test_androidndk_jni_Port.h\"//引入头文件\n\t#include \"com_tu_test_androidndk_jni_TwoPort.h\"\n\t#include &lt;android/log.h>\n\t#include &lt;Hello.h>\n\t//Logcat打印日志 Android.mk 文件必须配置: LOCAL_LDLIBS += -L$(SYSROOT)/usr/lib -llog\n\n\tJNIEXPORT jstring JNICALL Java_com_tu_androidndk_jni_Port_sayHello(\n\t\t\tJNIEnv *env, jclass clazz, jstring s) {\n\n\t\tchar * st = (char *) env->GetStringUTFChars(s, 0);\n\t\tprintf(\"\\n c-string:  %s\", st);\n\n\t\t//在Logcat中打印日志,在个参数,日志类型,过滤标签Tag,输入的文本内容Text\n\t\t__android_log_print(ANDROID_LOG_INFO, \"JNIMsg\", \"\\n c-string: %s\", st);\n\n\t\tjstring rtn = env->NewStringUTF(\"hello Comtu!\");\n\t\treturn rtn;\n\t}\n\n\tJNIEXPORT jstring JNICALL Java_com_tu_androidndk_jni_TwoPort_getWords(\n\t\t\tJNIEnv *env, jclass clazz) {\n\t\tHello h;\n\t\treturn env->NewStringUTF((const char *) h.getWords());\n\t}\n```\n\n## 6.运行\t\n\n\tString words = TwoPort.getWords();//调用 \n\n----\n\n# 支持多CPU架构\n\n**方法**:\n\n> 在jni目录新创建一个 **Application.mk** 文件里面增加内容**APP_ABI := x86 armeabi**即可.   \n> 这样就支持x86与armeabi的CPU架构了.   \n> 如果需要支持更多的架构会增加apk的文件大小.   \n> NDK的版本为android-ndk-r10e可支持包含64位的处理器  \n> APP_ABI := x86 armeabi armeabi-v7a mips arm64-v8a x86_64 mips64 \n\t\t\n\n> 查看手机CPU的架构方法\"  \n\n\t\t使用已经Root的手机通过R.E.管理器,\n\t\t或者ES文件管理器,进入到文件顶级根目录下/proc文件夹/cpuinfo文件可查看手机属于什么CPU架构\n\t\t\n\t\t或者使用cmd查看CPU是属于那个架构可使用命令:\n\n```shell\n\t\t\tC:\\Users\\comtu>adb shell\n\t\t\tshell@android:/ $ cat /proc/cpuinfo\n\t\t\tcat /proc/cpuinfo\n\t\t\tProcessor       : ARMv7 Processor rev 1 (v7l)\n\t\t\tprocessor       : 0\n\t\t\tBogoMIPS        : 668.86\n\t\t\t\n\t\t\tprocessor       : 1\n\t\t\tBogoMIPS        : 668.86\n\t\t\t\n\t\t\tFeatures        : swp half thumb fastmult vfp edsp thumbee neon vfpv3 tls vfpv4\n\t\t\tCPU implementer : 0x41\n\t\t\tCPU architecture: 7\n\t\t\tCPU variant     : 0x0\n\t\t\tCPU part        : 0xc05\n\t\t\tCPU revision    : 1\n\t\t\t\n\t\t\tHardware        : MSM8x25 C8833D BOARD\n\t\t\tRevision        : 0000\n\t\t\tSerial          : 0000000000000000\n\t\t\tshell@android:/ $\n```\n\n---\n\n# 使用Ant批量生成头文件\n\n使用Ant工具自动生成头文件.\t(方便快捷,代替上面的步骤3)\n\n> Ant是一个自动构建的一个脚本,基于xml . \n\n## 1.创建Ant文件\n\n> 在项目工程里创建一个new-->File新创建一个文件名:build_headers.xml的文件  \n> 选择文件-->右击-->open with->other->**ant editor**的方式打开.  \n> 打开文件后使用**alt+/**快捷键会自动生成模板.  \n\t\n## 2.编写模板\n\n```xml\n\t&lt;project name=\"AndroidNDK\" default=\"BuildAllHeaders\">\n\t&lt;description>description&lt;/description>\n\t&lt;!--呼叫目标-->\n\t&lt;target name=\"BuildAllHeaders\">\n\t\t&lt;antcall target=\"BuildPortHeader\" />\n\t\t&lt;antcall target=\"BuildTwoPortHeader\" />\n\t&lt;/target>\n\t&lt;!--目标_使用javah命令 destdir生成文件的目的路径,classpath类Class文件路径 , class类名-->\n\t&lt;target name=\"BuildPortHeader\">\n\t\t&lt;javah destdir=\"./jni\" classpath=\"./bin/classes\" class=\"com.tu.test.androidndk.jni.Port\"/>\n\t&lt;/target>\n\t&lt;target name=\"BuildTwoPortHeader\">\n\t\t&lt;javah destdir=\"./jni\" classpath=\"./bin/classes\" class=\"com.tu.test.androidndk.jni.TwoPort\"/>\n\t&lt;/target>\n\t&lt;/project>\n```\n\n## 3.运行Ant自动编译\n\n> 选择build_headers.xml右击--> run as -->Ant build   \n> 或者:   \n> 打开Ant窗口(Wnidow-->Show View-->Ant)-->Add Buildfiles-->选择项目-->Ant窗口里会多出一个AndroidNDK项双击即可.   \n\n## 4.刷新项目\n\n> 选择项目-->右击-->Refresh   \n> 查看jni目录会新增加对应.h的头文件\t   \n> 这样编译起多个文件时效率大大的提高.\t\n\n---  \n\n# Demo下载\n\n本文案例Demo[下载](/res/file/blog/2014/10/29/Android_NDK_Hello_World_two/AndroidNDKHelloWorld.rar)","source":"_posts/2014-10-29-Android_NDK_Hello_World_two.md","raw":"---\nlayout : post\ntitle : \"Android 中NDK的使用详解第二篇:Hello World\"\ncategory : Android\nduoshuo: true\ndate : 2014-10-29\ntags : [AndroidNDK , NDK , JNI]\nSyntaxHihglighter: true\nshTheme: shThemeMidnight # shThemeDefault  shThemeDjango  shThemeEclipse  shThemeEmacs  shThemeFadeToGrey  shThemeMidnight  shThemeRDark\n---\n\n目录:\n\t\n\tHello World\n\t编译多个源文件\n\t支持多CPU架构\n\t使用Ant批量生成头文件\n\n上一编讲到了搭建AndroidNDK开发环境的内容,这篇则进行实战.\n\n在实战之前首先介绍一下NDK与JNI的关系.\n\n> JNI (Java Native Interface)   \n> JNI是java语言提供的Java和C/C++相互沟通的机制，  \n> Java可以通过JNI调用本地的C/C++代码，本地的C/C++的代码也可以调用java代码。   \n> JNI 是本地编程接口，Java和C/C++互相通过的接口。  \n> Java通过C/C++使用本地的代码的一个关键性原因在于C/C++代码的高效性。\n\n> NDK是一系列工具的集合。它提供了一系列的工具，  \n> 帮助开发者快速开发C（或C++）的动态库，并能自动将so和java应用一起打包成apk。   \n> 这些工具对开发者的帮助是巨大的。它集成了交叉编译器，并提供了相应的mk文件  \n> 隔离CPU、平台、ABI等差异，开发人员只需要简单修改mk文件（指出“哪些文件需要  \n> 编译”、“编译特性要求”等），就可以创建出so。它可以自动地将so和Java应用一起  \n> 打包，极大地减轻了开发人员的打包工作。\n\n> 简单概括: 用C语言生成一个库文件，在java中调用这个库文件的函数。  \n> JNI的过程比较复杂，生成.so需要大量操作，而NDK就是简化了这个过程。\n\n<!-- more -->\n\n# Hello World\n\n创建一个项目:\n项目名为AndroidNDK\n项目包名为:com.tu.test.androidndk\n\n## 1.使用Android Tools工具为项目工程支持NDK\n\n> 项目上右击-->`Android Tools`-->`add native support`-->`输入或者默认的名称(例如:AndroidNDK)`-->`finish`  \n> 会注意到项目目录下多了一个`jni`的目录里面多了两个文件**Android.mk** , **AndroidNDK.app**(上面输入的名称)  \n> 以及多了一个obj的目录\n\n## 2.创建一个类.\n\n> 声明一个带有native修饰的方法  \n\n```java\npackage com.tu.test.androidndk.jni;\npublic class Port {\n\tpublic static native String sayHello(String str);\n}\n```\n\n\n## 3.使用javah命令生成头文件并拷贝到jni目录(后会被后面的使用Ant批量生成头文件方法代替)\n\t\n> 使用cmd把目录定位到\"`项目路径/bin/classes/`\"项目下.\n\n```shell\n\tC:\\Users\\comtu>cd E:\\ComTu_Design\\workspace\\AndroidNDK\n\tC:\\Users\\comtu>e:\n\tE:\\ComTu_Design\\workspace\\AndroidNDK>cd bin\n\tE:\\ComTu_Design\\workspace\\AndroidNDK\\bin>cd classes\n\tE:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes>dir\n\t 驱动器 E 中的卷没有标签。\n\t 卷的序列号是 EE26-DAFE\n\t E:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes 的目录\n\t2015-07-14  14:50    &lt;DIR>          .\n\t2015-07-14  14:50    &lt;DIR>          ..\n\t2015-07-14  14:50    &lt;DIR>          android\n\t2015-07-14  14:50    &lt;DIR>          com\n\t               0 个文件              0 字节\n\t               4 个目录 35,301,425,152 可用字节\n```\n\t\t       \n> 使用Javah命令生成包含native方法定义的C/C++头文件\n\n```shell\n\tE:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes>javah -jni com.tu.test.androidndk.jni.Port\n\tE:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes>dir\n\t 驱动器 E 中的卷没有标签。\n\t 卷的序列号是 EE26-DAFE\n\t\n\t E:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes 的目录\n\t\n\t2015-07-14  16:15    &lt;DIR>          .\n\t2015-07-14  16:15    &lt;DIR>          ..\n\t2015-07-14  16:08    &lt;DIR>          android\n\t2015-07-14  16:08    &lt;DIR>          com\n\t2015-07-14  16:15             1,213 com_tu_test_androidndk_jni_Port.h\n\t               1 个文件          1,213 字节\n\t               4 个目录 35,301,281,792 可用字节\n```\n\n> 输入完后控制台不会有打印信息,只会在E:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes>目  \n> 录下会生成一个文件名为**com_tu_test_androidndk_jni_Port.h**的头文件\n\t\n> 拷贝头文件   \n\n> 把生成的.h文件拷贝到步骤2生成的jni目录下.\n\n\t使目录结构如下:\n\t\tjni\n\t\t|-Android.mk\n\t\t|-AndroidNDK.app\n\t\t|-com_tu_test_androidndk_jni_Port.h\n\n## 4. 编写代码实现\n\n> 打开com_tu_test_androidndk_jni_Port.h文件\n\n```c\nJNIEXPORT jstring JNICALL Java_com_tu_androidndk_jni_Port_sayHello\n  (JNIEnv *, jclass, jstring);\n```\n\n> 把生成的方法拷贝到AndroidNDK.app里面.并实现方法体.\n\n```c\n#include &lt;jni.h>\n#include &lt;stdio.h>\n#include \"com_tu_androidndk_jni_Port.h\"//引入头文件\n#include &lt;android/log.h>\n//Logcat打印日志 Android.mk 文件必须配置: LOCAL_LDLIBS += -L$(SYSROOT)/usr/lib -llog\n\nJNIEXPORT jstring JNICALL Java_com_tu_androidndk_jni_Port_sayHello(\n\t\tJNIEnv *env, jclass clazz, jstring s) {\n\n\tchar * st = (char *) env->GetStringUTFChars(s, 0);\n\tprintf(\"\\n c-string:  %s\", st);\n\n\t//在Logcat中打印日志,在个参数,日志类型,过滤标签Tag,输入的文本内容Text\n\t__android_log_print(ANDROID_LOG_INFO, \"JNIMsg\", \"\\n c-string: %s\",st);\n\n\tjstring rtn = env->NewStringUTF(\"hello Comtu!\");\n\treturn rtn;\n}\n\n```\n\n> 在java里并编写静态代码块加载lib\n\n```java\n\tpackage com.tu.androidndkhelloworld;\n\timport android.app.Activity;\n\timport android.os.Bundle;\n\timport android.widget.TextView;\n\timport com.tu.androidndkhelloworld.jni.Port;\n\n\tpublic class MainActivity extends Activity {\n\t\tstatic {\n\t\t\tSystem.loadLibrary(\"AndroidNDK\");\n\t\t}\n\t\t@Override\n\t\tprotected void onCreate(Bundle savedInstanceState) {\n\t\t\tsuper.onCreate(savedInstanceState);\n\t\t\tsetContentView(R.layout.activity_main);\n\t\t\t//调用C程序实现的sayHello方法\n\t\t\t((TextView)findViewById(R.id.text)).setText(Port.sayHello(\"Hi\"));\n\t\t}\n\t}\n```\n\n> 运行程序(注意以上操作只适合于ARM架构的CPU)\n\t\t\n---\n\t\n# 编译多个源文件\n\n## 1.jni目录里创建多一个c文件\n\n> 选择jni-->右击选择new-->other-->C/C++-->class-->文件名如(Hello)  \n> 或者  \n> 选择C/C++ Perspective 视图 -->jni目录下右击new-->class-->文件名(Hello)  \n> 目录下就会自己创建出Hello.cpp与Hello.h文件\n\n\t使目录结构如下:\n\t\tjni\n\t\t|-Android.mk\n\t\t|-AndroidNDK.app\n\t\t|-com_tu_test_androidndk_jni_Port.h\n\t\t|-Hello.cpp\n\t\t|-Hello.h\n\t\n## 2.编写新创建的Hello.h文件\n\n```c\n\t#ifndef HELLO_H_\n\t#define HELLO_H_\n\t\n\tclass Hello {\n\tpublic:\n\t\tHello();\n\t\tchar * getWords();//&lt;----编写一个方法\n\t\tvirtual ~Hello();\n\t};\n\t\n\t#endif /* HELLO_H_ */\n```\n\n## 3.实现Hello.cpp代码\n\n```c\n\t#include \"Hello.h\"\n\t\n\tHello::Hello() {}\n\t\n\tchar * Hello::getWords(){//&lt;----编写一个方法用于与java交互\n\t\treturn \"Hello NDK\";\n\t}\n\t\n\tHello::~Hello() {}\n```\n\n## 4.编写Android.mk文件,让Hello可进行编译\n\n> LOCAL_LDLIBS += -L$(SYSROOT)/usr/lib -llog 要打印log需要增加\n\n```xml\n\tLOCAL_PATH := $(call my-dir)\n\n\tinclude $(CLEAR_VARS)\n\t\n\tLOCAL_LDLIBS += -L$(SYSROOT)/usr/lib -llog\n\n\tLOCAL_MODULE    := AndroidNDK\n\tLOCAL_SRC_FILES := AndroidNDK.cpp Hello.cpp\n\t\n\tinclude $(BUILD_SHARED_LIBRARY)\n```\n\n> 如果增加很多个.cpp文件使用空格分开,为了方便观看也可使用\\符号进行分行显示\n\n```xml\n\t\tLOCAL_SRC_FILES := AndroidNDK.cpp \\\n\t\tHello.cpp\n```\n\n## 5.编写TwoPort类增加如下代码作为测试\n\n```java\n\tpackage com.tu.androidndkhelloworld.jni;\n\tpublic class TwoPort {\n\t\tpublic static native String getWords();\n\t}\n```\n\n> 继续使用javah命令或者使用批量生头文件(见下文)的方式.生成头文件到jni目录.\n\n\t使目录结构如下:\n\t\tjni\n\t\t|-Android.mk\n\t\t|-AndroidNDK.app\n\t\t|-com_tu_test_androidndk_jni_Port.h\n\t\t|-com_tu_test_androidndk_jni_TwoPort.h\n\t\t|-Hello.cpp\n\t\t|-Hello.h\n\n> AndroidNDK.cpp实现代码\n\n```c\n\t#include &lt;jni.h>\n\t#include &lt;stdio.h>\n\t#include \"com_tu_test_androidndk_jni_Port.h\"//引入头文件\n\t#include \"com_tu_test_androidndk_jni_TwoPort.h\"\n\t#include &lt;android/log.h>\n\t#include &lt;Hello.h>\n\t//Logcat打印日志 Android.mk 文件必须配置: LOCAL_LDLIBS += -L$(SYSROOT)/usr/lib -llog\n\n\tJNIEXPORT jstring JNICALL Java_com_tu_androidndk_jni_Port_sayHello(\n\t\t\tJNIEnv *env, jclass clazz, jstring s) {\n\n\t\tchar * st = (char *) env->GetStringUTFChars(s, 0);\n\t\tprintf(\"\\n c-string:  %s\", st);\n\n\t\t//在Logcat中打印日志,在个参数,日志类型,过滤标签Tag,输入的文本内容Text\n\t\t__android_log_print(ANDROID_LOG_INFO, \"JNIMsg\", \"\\n c-string: %s\", st);\n\n\t\tjstring rtn = env->NewStringUTF(\"hello Comtu!\");\n\t\treturn rtn;\n\t}\n\n\tJNIEXPORT jstring JNICALL Java_com_tu_androidndk_jni_TwoPort_getWords(\n\t\t\tJNIEnv *env, jclass clazz) {\n\t\tHello h;\n\t\treturn env->NewStringUTF((const char *) h.getWords());\n\t}\n```\n\n## 6.运行\t\n\n\tString words = TwoPort.getWords();//调用 \n\n----\n\n# 支持多CPU架构\n\n**方法**:\n\n> 在jni目录新创建一个 **Application.mk** 文件里面增加内容**APP_ABI := x86 armeabi**即可.   \n> 这样就支持x86与armeabi的CPU架构了.   \n> 如果需要支持更多的架构会增加apk的文件大小.   \n> NDK的版本为android-ndk-r10e可支持包含64位的处理器  \n> APP_ABI := x86 armeabi armeabi-v7a mips arm64-v8a x86_64 mips64 \n\t\t\n\n> 查看手机CPU的架构方法\"  \n\n\t\t使用已经Root的手机通过R.E.管理器,\n\t\t或者ES文件管理器,进入到文件顶级根目录下/proc文件夹/cpuinfo文件可查看手机属于什么CPU架构\n\t\t\n\t\t或者使用cmd查看CPU是属于那个架构可使用命令:\n\n```shell\n\t\t\tC:\\Users\\comtu>adb shell\n\t\t\tshell@android:/ $ cat /proc/cpuinfo\n\t\t\tcat /proc/cpuinfo\n\t\t\tProcessor       : ARMv7 Processor rev 1 (v7l)\n\t\t\tprocessor       : 0\n\t\t\tBogoMIPS        : 668.86\n\t\t\t\n\t\t\tprocessor       : 1\n\t\t\tBogoMIPS        : 668.86\n\t\t\t\n\t\t\tFeatures        : swp half thumb fastmult vfp edsp thumbee neon vfpv3 tls vfpv4\n\t\t\tCPU implementer : 0x41\n\t\t\tCPU architecture: 7\n\t\t\tCPU variant     : 0x0\n\t\t\tCPU part        : 0xc05\n\t\t\tCPU revision    : 1\n\t\t\t\n\t\t\tHardware        : MSM8x25 C8833D BOARD\n\t\t\tRevision        : 0000\n\t\t\tSerial          : 0000000000000000\n\t\t\tshell@android:/ $\n```\n\n---\n\n# 使用Ant批量生成头文件\n\n使用Ant工具自动生成头文件.\t(方便快捷,代替上面的步骤3)\n\n> Ant是一个自动构建的一个脚本,基于xml . \n\n## 1.创建Ant文件\n\n> 在项目工程里创建一个new-->File新创建一个文件名:build_headers.xml的文件  \n> 选择文件-->右击-->open with->other->**ant editor**的方式打开.  \n> 打开文件后使用**alt+/**快捷键会自动生成模板.  \n\t\n## 2.编写模板\n\n```xml\n\t&lt;project name=\"AndroidNDK\" default=\"BuildAllHeaders\">\n\t&lt;description>description&lt;/description>\n\t&lt;!--呼叫目标-->\n\t&lt;target name=\"BuildAllHeaders\">\n\t\t&lt;antcall target=\"BuildPortHeader\" />\n\t\t&lt;antcall target=\"BuildTwoPortHeader\" />\n\t&lt;/target>\n\t&lt;!--目标_使用javah命令 destdir生成文件的目的路径,classpath类Class文件路径 , class类名-->\n\t&lt;target name=\"BuildPortHeader\">\n\t\t&lt;javah destdir=\"./jni\" classpath=\"./bin/classes\" class=\"com.tu.test.androidndk.jni.Port\"/>\n\t&lt;/target>\n\t&lt;target name=\"BuildTwoPortHeader\">\n\t\t&lt;javah destdir=\"./jni\" classpath=\"./bin/classes\" class=\"com.tu.test.androidndk.jni.TwoPort\"/>\n\t&lt;/target>\n\t&lt;/project>\n```\n\n## 3.运行Ant自动编译\n\n> 选择build_headers.xml右击--> run as -->Ant build   \n> 或者:   \n> 打开Ant窗口(Wnidow-->Show View-->Ant)-->Add Buildfiles-->选择项目-->Ant窗口里会多出一个AndroidNDK项双击即可.   \n\n## 4.刷新项目\n\n> 选择项目-->右击-->Refresh   \n> 查看jni目录会新增加对应.h的头文件\t   \n> 这样编译起多个文件时效率大大的提高.\t\n\n---  \n\n# Demo下载\n\n本文案例Demo[下载](/res/file/blog/2014/10/29/Android_NDK_Hello_World_two/AndroidNDKHelloWorld.rar)","slug":"Android_NDK_Hello_World_two","published":1,"updated":"2016-04-27T03:43:33.257Z","comments":1,"photos":[],"link":"","_id":"cinu3ety30012xoj0cphahduo","content":"<p>目录:</p>\n<pre><code>Hello World\n编译多个源文件\n支持多CPU架构\n使用Ant批量生成头文件\n</code></pre><p>上一编讲到了搭建AndroidNDK开发环境的内容,这篇则进行实战.</p>\n<p>在实战之前首先介绍一下NDK与JNI的关系.</p>\n<blockquote>\n<p>JNI (Java Native Interface)<br>JNI是java语言提供的Java和C/C++相互沟通的机制，<br>Java可以通过JNI调用本地的C/C++代码，本地的C/C++的代码也可以调用java代码。<br>JNI 是本地编程接口，Java和C/C++互相通过的接口。<br>Java通过C/C++使用本地的代码的一个关键性原因在于C/C++代码的高效性。</p>\n<p>NDK是一系列工具的集合。它提供了一系列的工具，<br>帮助开发者快速开发C（或C++）的动态库，并能自动将so和java应用一起打包成apk。<br>这些工具对开发者的帮助是巨大的。它集成了交叉编译器，并提供了相应的mk文件<br>隔离CPU、平台、ABI等差异，开发人员只需要简单修改mk文件（指出“哪些文件需要<br>编译”、“编译特性要求”等），就可以创建出so。它可以自动地将so和Java应用一起<br>打包，极大地减轻了开发人员的打包工作。</p>\n<p>简单概括: 用C语言生成一个库文件，在java中调用这个库文件的函数。<br>JNI的过程比较复杂，生成.so需要大量操作，而NDK就是简化了这个过程。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h1><p>创建一个项目:<br>项目名为AndroidNDK<br>项目包名为:com.tu.test.androidndk</p>\n<h2 id=\"1-使用Android-Tools工具为项目工程支持NDK\"><a href=\"#1-使用Android-Tools工具为项目工程支持NDK\" class=\"headerlink\" title=\"1.使用Android Tools工具为项目工程支持NDK\"></a>1.使用Android Tools工具为项目工程支持NDK</h2><blockquote>\n<p>项目上右击–&gt;<code>Android Tools</code>–&gt;<code>add native support</code>–&gt;<code>输入或者默认的名称(例如:AndroidNDK)</code>–&gt;<code>finish</code><br>会注意到项目目录下多了一个<code>jni</code>的目录里面多了两个文件<strong>Android.mk</strong> , <strong>AndroidNDK.app</strong>(上面输入的名称)<br>以及多了一个obj的目录</p>\n</blockquote>\n<h2 id=\"2-创建一个类\"><a href=\"#2-创建一个类\" class=\"headerlink\" title=\"2.创建一个类.\"></a>2.创建一个类.</h2><blockquote>\n<p>声明一个带有native修饰的方法  </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.androidndk.jni;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Port</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> String <span class=\"title\">sayHello</span><span class=\"params\">(String str)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-使用javah命令生成头文件并拷贝到jni目录-后会被后面的使用Ant批量生成头文件方法代替\"><a href=\"#3-使用javah命令生成头文件并拷贝到jni目录-后会被后面的使用Ant批量生成头文件方法代替\" class=\"headerlink\" title=\"3.使用javah命令生成头文件并拷贝到jni目录(后会被后面的使用Ant批量生成头文件方法代替)\"></a>3.使用javah命令生成头文件并拷贝到jni目录(后会被后面的使用Ant批量生成头文件方法代替)</h2><blockquote>\n<p>使用cmd把目录定位到”<code>项目路径/bin/classes/</code>“项目下.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\comtu&gt;cd E:\\ComTu_Design\\workspace\\AndroidNDK</span><br><span class=\"line\">C:\\Users\\comtu&gt;e:</span><br><span class=\"line\">E:\\ComTu_Design\\workspace\\AndroidNDK&gt;cd bin</span><br><span class=\"line\">E:\\ComTu_Design\\workspace\\AndroidNDK\\bin&gt;cd classes</span><br><span class=\"line\">E:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes&gt;dir</span><br><span class=\"line\"> 驱动器 E 中的卷没有标签。</span><br><span class=\"line\"> 卷的序列号是 EE26-DAFE</span><br><span class=\"line\"> E:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes 的目录</span><br><span class=\"line\">2015-07-14  14:50    &amp;lt;DIR&gt;          .</span><br><span class=\"line\">2015-07-14  14:50    &amp;lt;DIR&gt;          ..</span><br><span class=\"line\">2015-07-14  14:50    &amp;lt;DIR&gt;          android</span><br><span class=\"line\">2015-07-14  14:50    &amp;lt;DIR&gt;          com</span><br><span class=\"line\">               0 个文件              0 字节</span><br><span class=\"line\">               4 个目录 35,301,425,152 可用字节</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用Javah命令生成包含native方法定义的C/C++头文件</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes&gt;javah -jni com.tu.test.androidndk.jni.Port</span><br><span class=\"line\">E:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes&gt;dir</span><br><span class=\"line\"> 驱动器 E 中的卷没有标签。</span><br><span class=\"line\"> 卷的序列号是 EE26-DAFE</span><br><span class=\"line\"></span><br><span class=\"line\"> E:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes 的目录</span><br><span class=\"line\"></span><br><span class=\"line\">2015-07-14  16:15    &amp;lt;DIR&gt;          .</span><br><span class=\"line\">2015-07-14  16:15    &amp;lt;DIR&gt;          ..</span><br><span class=\"line\">2015-07-14  16:08    &amp;lt;DIR&gt;          android</span><br><span class=\"line\">2015-07-14  16:08    &amp;lt;DIR&gt;          com</span><br><span class=\"line\">2015-07-14  16:15             1,213 com_tu_test_androidndk_jni_Port.h</span><br><span class=\"line\">               1 个文件          1,213 字节</span><br><span class=\"line\">               4 个目录 35,301,281,792 可用字节</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>输入完后控制台不会有打印信息,只会在E:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes&gt;目<br>录下会生成一个文件名为<strong>com_tu_test_androidndk_jni_Port.h</strong>的头文件</p>\n<p>拷贝头文件   </p>\n<p>把生成的.h文件拷贝到步骤2生成的jni目录下.</p>\n</blockquote>\n<pre><code>使目录结构如下:\n    jni\n    |-Android.mk\n    |-AndroidNDK.app\n    |-com_tu_test_androidndk_jni_Port.h\n</code></pre><h2 id=\"4-编写代码实现\"><a href=\"#4-编写代码实现\" class=\"headerlink\" title=\"4. 编写代码实现\"></a>4. 编写代码实现</h2><blockquote>\n<p>打开com_tu_test_androidndk_jni_Port.h文件</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">JNIEXPORT jstring JNICALL <span class=\"title\">Java_com_tu_androidndk_jni_Port_sayHello</span></span><br><span class=\"line\">  <span class=\"params\">(JNIEnv *, jclass, jstring)</span></span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>把生成的方法拷贝到AndroidNDK.app里面.并实现方法体.</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;jni.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;stdio.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"string\">\"com_tu_androidndk_jni_Port.h\"</span>//引入头文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;android/log.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//Logcat打印日志 Android.mk 文件必须配置: LOCAL_LDLIBS += -L$(SYSROOT)/usr/lib -llog</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">JNIEXPORT jstring JNICALL <span class=\"title\">Java_com_tu_androidndk_jni_Port_sayHello</span><span class=\"params\">(</span><br><span class=\"line\">\t\tJNIEnv *env, jclass clazz, jstring s)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> * st = (char *) env-&gt;GetStringUTFChars(s, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n c-string:  %s\"</span>, st);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//在Logcat中打印日志,在个参数,日志类型,过滤标签Tag,输入的文本内容Text</span></span><br><span class=\"line\">\t__android_log_print(ANDROID_LOG_INFO, <span class=\"string\">\"JNIMsg\"</span>, <span class=\"string\">\"\\n c-string: %s\"</span>,st);</span><br><span class=\"line\"></span><br><span class=\"line\">\tjstring rtn = env-&gt;NewStringUTF(<span class=\"string\">\"hello Comtu!\"</span>);</span><br><span class=\"line\">\treturn rtn;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在java里并编写静态代码块加载lib</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.androidndkhelloworld;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.tu.androidndkhelloworld.jni.Port;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\tSystem.loadLibrary(<span class=\"string\">\"AndroidNDK\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">\t\tsetContentView(R.layout.activity_main);</span><br><span class=\"line\">\t\t<span class=\"comment\">//调用C程序实现的sayHello方法</span></span><br><span class=\"line\">\t\t((TextView)findViewById(R.id.text)).setText(Port.sayHello(<span class=\"string\">\"Hi\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>运行程序(注意以上操作只适合于ARM架构的CPU)</p>\n</blockquote>\n<hr>\n<h1 id=\"编译多个源文件\"><a href=\"#编译多个源文件\" class=\"headerlink\" title=\"编译多个源文件\"></a>编译多个源文件</h1><h2 id=\"1-jni目录里创建多一个c文件\"><a href=\"#1-jni目录里创建多一个c文件\" class=\"headerlink\" title=\"1.jni目录里创建多一个c文件\"></a>1.jni目录里创建多一个c文件</h2><blockquote>\n<p>选择jni–&gt;右击选择new–&gt;other–&gt;C/C++–&gt;class–&gt;文件名如(Hello)<br>或者<br>选择C/C++ Perspective 视图 –&gt;jni目录下右击new–&gt;class–&gt;文件名(Hello)<br>目录下就会自己创建出Hello.cpp与Hello.h文件</p>\n</blockquote>\n<pre><code>使目录结构如下:\n    jni\n    |-Android.mk\n    |-AndroidNDK.app\n    |-com_tu_test_androidndk_jni_Port.h\n    |-Hello.cpp\n    |-Hello.h\n</code></pre><h2 id=\"2-编写新创建的Hello-h文件\"><a href=\"#2-编写新创建的Hello-h文件\" class=\"headerlink\" title=\"2.编写新创建的Hello.h文件\"></a>2.编写新创建的Hello.h文件</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> HELLO_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HELLO_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Hello &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tHello();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">char</span> * <span class=\"title\">getWords</span><span class=\"params\">()</span></span>;<span class=\"comment\">//&amp;lt;----编写一个方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">virtual</span> ~Hello();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* HELLO_H_ */</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-实现Hello-cpp代码\"><a href=\"#3-实现Hello-cpp代码\" class=\"headerlink\" title=\"3.实现Hello.cpp代码\"></a>3.实现Hello.cpp代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"string\">\"Hello.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Hello::Hello() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> * Hello::getWords()&#123;<span class=\"comment\">//&amp;lt;----编写一个方法用于与java交互</span></span><br><span class=\"line\">\treturn <span class=\"string\">\"Hello NDK\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Hello::~Hello() &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-编写Android-mk文件-让Hello可进行编译\"><a href=\"#4-编写Android-mk文件-让Hello可进行编译\" class=\"headerlink\" title=\"4.编写Android.mk文件,让Hello可进行编译\"></a>4.编写Android.mk文件,让Hello可进行编译</h2><blockquote>\n<p>LOCAL_LDLIBS += -L$(SYSROOT)/usr/lib -llog 要打印log需要增加</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_PATH := $(call my-dir)</span><br><span class=\"line\"></span><br><span class=\"line\">include $(CLEAR_VARS)</span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_LDLIBS += -L$(SYSROOT)/usr/lib -llog</span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE    := AndroidNDK</span><br><span class=\"line\">LOCAL_SRC_FILES := AndroidNDK.cpp Hello.cpp</span><br><span class=\"line\"></span><br><span class=\"line\">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果增加很多个.cpp文件使用空格分开,为了方便观看也可使用\\符号进行分行显示</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_SRC_FILES := AndroidNDK.cpp \\</span><br><span class=\"line\">Hello.cpp</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-编写TwoPort类增加如下代码作为测试\"><a href=\"#5-编写TwoPort类增加如下代码作为测试\" class=\"headerlink\" title=\"5.编写TwoPort类增加如下代码作为测试\"></a>5.编写TwoPort类增加如下代码作为测试</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.androidndkhelloworld.jni;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TwoPort</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> String <span class=\"title\">getWords</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>继续使用javah命令或者使用批量生头文件(见下文)的方式.生成头文件到jni目录.</p>\n</blockquote>\n<pre><code>使目录结构如下:\n    jni\n    |-Android.mk\n    |-AndroidNDK.app\n    |-com_tu_test_androidndk_jni_Port.h\n    |-com_tu_test_androidndk_jni_TwoPort.h\n    |-Hello.cpp\n    |-Hello.h\n</code></pre><blockquote>\n<p>AndroidNDK.cpp实现代码</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;jni.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;stdio.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"string\">\"com_tu_test_androidndk_jni_Port.h\"</span>//引入头文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"string\">\"com_tu_test_androidndk_jni_TwoPort.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;android/log.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;Hello.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//Logcat打印日志 Android.mk 文件必须配置: LOCAL_LDLIBS += -L$(SYSROOT)/usr/lib -llog</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">JNIEXPORT jstring JNICALL <span class=\"title\">Java_com_tu_androidndk_jni_Port_sayHello</span><span class=\"params\">(</span><br><span class=\"line\">\t\tJNIEnv *env, jclass clazz, jstring s)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> * st = (char *) env-&gt;GetStringUTFChars(s, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n c-string:  %s\"</span>, st);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//在Logcat中打印日志,在个参数,日志类型,过滤标签Tag,输入的文本内容Text</span></span><br><span class=\"line\">\t__android_log_print(ANDROID_LOG_INFO, <span class=\"string\">\"JNIMsg\"</span>, <span class=\"string\">\"\\n c-string: %s\"</span>, st);</span><br><span class=\"line\"></span><br><span class=\"line\">\tjstring rtn = env-&gt;NewStringUTF(<span class=\"string\">\"hello Comtu!\"</span>);</span><br><span class=\"line\">\treturn rtn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">JNIEXPORT jstring JNICALL <span class=\"title\">Java_com_tu_androidndk_jni_TwoPort_getWords</span><span class=\"params\">(</span><br><span class=\"line\">\t\tJNIEnv *env, jclass clazz)</span> </span>&#123;</span><br><span class=\"line\">\tHello h;</span><br><span class=\"line\">\treturn env-&gt;NewStringUTF((const char *) h.getWords());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-运行\"><a href=\"#6-运行\" class=\"headerlink\" title=\"6.运行\"></a>6.运行</h2><pre><code>String words = TwoPort.getWords();//调用 \n</code></pre><hr>\n<h1 id=\"支持多CPU架构\"><a href=\"#支持多CPU架构\" class=\"headerlink\" title=\"支持多CPU架构\"></a>支持多CPU架构</h1><p><strong>方法</strong>:</p>\n<blockquote>\n<p>在jni目录新创建一个 <strong>Application.mk</strong> 文件里面增加内容<strong>APP_ABI := x86 armeabi</strong>即可.<br>这样就支持x86与armeabi的CPU架构了.<br>如果需要支持更多的架构会增加apk的文件大小.<br>NDK的版本为android-ndk-r10e可支持包含64位的处理器<br>APP_ABI := x86 armeabi armeabi-v7a mips arm64-v8a x86_64 mips64 </p>\n<p>查看手机CPU的架构方法”  </p>\n</blockquote>\n<pre><code>使用已经Root的手机通过R.E.管理器,\n或者ES文件管理器,进入到文件顶级根目录下/proc文件夹/cpuinfo文件可查看手机属于什么CPU架构\n\n或者使用cmd查看CPU是属于那个架构可使用命令:\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\comtu&gt;adb shell</span><br><span class=\"line\">shell@android:/ $ cat /proc/cpuinfo</span><br><span class=\"line\">cat /proc/cpuinfo</span><br><span class=\"line\">Processor       : ARMv7 Processor rev 1 (v7l)</span><br><span class=\"line\">processor       : 0</span><br><span class=\"line\">BogoMIPS        : 668.86</span><br><span class=\"line\"></span><br><span class=\"line\">processor       : 1</span><br><span class=\"line\">BogoMIPS        : 668.86</span><br><span class=\"line\"></span><br><span class=\"line\">Features        : swp half thumb fastmult vfp edsp thumbee neon vfpv3 tls vfpv4</span><br><span class=\"line\">CPU implementer : 0x41</span><br><span class=\"line\">CPU architecture: 7</span><br><span class=\"line\">CPU variant     : 0x0</span><br><span class=\"line\">CPU part        : 0xc05</span><br><span class=\"line\">CPU revision    : 1</span><br><span class=\"line\"></span><br><span class=\"line\">Hardware        : MSM8x25 C8833D BOARD</span><br><span class=\"line\">Revision        : 0000</span><br><span class=\"line\">Serial          : 0000000000000000</span><br><span class=\"line\">shell@android:/ $</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"使用Ant批量生成头文件\"><a href=\"#使用Ant批量生成头文件\" class=\"headerlink\" title=\"使用Ant批量生成头文件\"></a>使用Ant批量生成头文件</h1><p>使用Ant工具自动生成头文件.    (方便快捷,代替上面的步骤3)</p>\n<blockquote>\n<p>Ant是一个自动构建的一个脚本,基于xml . </p>\n</blockquote>\n<h2 id=\"1-创建Ant文件\"><a href=\"#1-创建Ant文件\" class=\"headerlink\" title=\"1.创建Ant文件\"></a>1.创建Ant文件</h2><blockquote>\n<p>在项目工程里创建一个new–&gt;File新创建一个文件名:build_headers.xml的文件<br>选择文件–&gt;右击–&gt;open with-&gt;other-&gt;<strong>ant editor</strong>的方式打开.<br>打开文件后使用<strong>alt+/</strong>快捷键会自动生成模板.  </p>\n</blockquote>\n<h2 id=\"2-编写模板\"><a href=\"#2-编写模板\" class=\"headerlink\" title=\"2.编写模板\"></a>2.编写模板</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;lt;project name=\"AndroidNDK\" default=\"BuildAllHeaders\"&gt;</span><br><span class=\"line\">&amp;lt;description&gt;description&amp;lt;/description&gt;</span><br><span class=\"line\">&amp;lt;!--呼叫目标--&gt;</span><br><span class=\"line\">&amp;lt;target name=\"BuildAllHeaders\"&gt;</span><br><span class=\"line\">\t&amp;lt;antcall target=\"BuildPortHeader\" /&gt;</span><br><span class=\"line\">\t&amp;lt;antcall target=\"BuildTwoPortHeader\" /&gt;</span><br><span class=\"line\">&amp;lt;/target&gt;</span><br><span class=\"line\">&amp;lt;!--目标_使用javah命令 destdir生成文件的目的路径,classpath类Class文件路径 , class类名--&gt;</span><br><span class=\"line\">&amp;lt;target name=\"BuildPortHeader\"&gt;</span><br><span class=\"line\">\t&amp;lt;javah destdir=\"./jni\" classpath=\"./bin/classes\" class=\"com.tu.test.androidndk.jni.Port\"/&gt;</span><br><span class=\"line\">&amp;lt;/target&gt;</span><br><span class=\"line\">&amp;lt;target name=\"BuildTwoPortHeader\"&gt;</span><br><span class=\"line\">\t&amp;lt;javah destdir=\"./jni\" classpath=\"./bin/classes\" class=\"com.tu.test.androidndk.jni.TwoPort\"/&gt;</span><br><span class=\"line\">&amp;lt;/target&gt;</span><br><span class=\"line\">&amp;lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-运行Ant自动编译\"><a href=\"#3-运行Ant自动编译\" class=\"headerlink\" title=\"3.运行Ant自动编译\"></a>3.运行Ant自动编译</h2><blockquote>\n<p>选择build_headers.xml右击–&gt; run as –&gt;Ant build<br>或者:<br>打开Ant窗口(Wnidow–&gt;Show View–&gt;Ant)–&gt;Add Buildfiles–&gt;选择项目–&gt;Ant窗口里会多出一个AndroidNDK项双击即可.   </p>\n</blockquote>\n<h2 id=\"4-刷新项目\"><a href=\"#4-刷新项目\" class=\"headerlink\" title=\"4.刷新项目\"></a>4.刷新项目</h2><blockquote>\n<p>选择项目–&gt;右击–&gt;Refresh<br>查看jni目录会新增加对应.h的头文件<br>这样编译起多个文件时效率大大的提高.    </p>\n</blockquote>\n<hr>\n<h1 id=\"Demo下载\"><a href=\"#Demo下载\" class=\"headerlink\" title=\"Demo下载\"></a>Demo下载</h1><p>本文案例Demo<a href=\"/res/file/blog/2014/10/29/Android_NDK_Hello_World_two/AndroidNDKHelloWorld.rar\">下载</a></p>\n","excerpt":"<p>目录:</p>\n<pre><code>Hello World\n编译多个源文件\n支持多CPU架构\n使用Ant批量生成头文件\n</code></pre><p>上一编讲到了搭建AndroidNDK开发环境的内容,这篇则进行实战.</p>\n<p>在实战之前首先介绍一下NDK与JNI的关系.</p>\n<blockquote>\n<p>JNI (Java Native Interface)<br>JNI是java语言提供的Java和C/C++相互沟通的机制，<br>Java可以通过JNI调用本地的C/C++代码，本地的C/C++的代码也可以调用java代码。<br>JNI 是本地编程接口，Java和C/C++互相通过的接口。<br>Java通过C/C++使用本地的代码的一个关键性原因在于C/C++代码的高效性。</p>\n<p>NDK是一系列工具的集合。它提供了一系列的工具，<br>帮助开发者快速开发C（或C++）的动态库，并能自动将so和java应用一起打包成apk。<br>这些工具对开发者的帮助是巨大的。它集成了交叉编译器，并提供了相应的mk文件<br>隔离CPU、平台、ABI等差异，开发人员只需要简单修改mk文件（指出“哪些文件需要<br>编译”、“编译特性要求”等），就可以创建出so。它可以自动地将so和Java应用一起<br>打包，极大地减轻了开发人员的打包工作。</p>\n<p>简单概括: 用C语言生成一个库文件，在java中调用这个库文件的函数。<br>JNI的过程比较复杂，生成.so需要大量操作，而NDK就是简化了这个过程。</p>\n</blockquote>","more":"<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h1><p>创建一个项目:<br>项目名为AndroidNDK<br>项目包名为:com.tu.test.androidndk</p>\n<h2 id=\"1-使用Android-Tools工具为项目工程支持NDK\"><a href=\"#1-使用Android-Tools工具为项目工程支持NDK\" class=\"headerlink\" title=\"1.使用Android Tools工具为项目工程支持NDK\"></a>1.使用Android Tools工具为项目工程支持NDK</h2><blockquote>\n<p>项目上右击–&gt;<code>Android Tools</code>–&gt;<code>add native support</code>–&gt;<code>输入或者默认的名称(例如:AndroidNDK)</code>–&gt;<code>finish</code><br>会注意到项目目录下多了一个<code>jni</code>的目录里面多了两个文件<strong>Android.mk</strong> , <strong>AndroidNDK.app</strong>(上面输入的名称)<br>以及多了一个obj的目录</p>\n</blockquote>\n<h2 id=\"2-创建一个类\"><a href=\"#2-创建一个类\" class=\"headerlink\" title=\"2.创建一个类.\"></a>2.创建一个类.</h2><blockquote>\n<p>声明一个带有native修饰的方法  </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.test.androidndk.jni;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Port</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> String <span class=\"title\">sayHello</span><span class=\"params\">(String str)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-使用javah命令生成头文件并拷贝到jni目录-后会被后面的使用Ant批量生成头文件方法代替\"><a href=\"#3-使用javah命令生成头文件并拷贝到jni目录-后会被后面的使用Ant批量生成头文件方法代替\" class=\"headerlink\" title=\"3.使用javah命令生成头文件并拷贝到jni目录(后会被后面的使用Ant批量生成头文件方法代替)\"></a>3.使用javah命令生成头文件并拷贝到jni目录(后会被后面的使用Ant批量生成头文件方法代替)</h2><blockquote>\n<p>使用cmd把目录定位到”<code>项目路径/bin/classes/</code>“项目下.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\comtu&gt;cd E:\\ComTu_Design\\workspace\\AndroidNDK</span><br><span class=\"line\">C:\\Users\\comtu&gt;e:</span><br><span class=\"line\">E:\\ComTu_Design\\workspace\\AndroidNDK&gt;cd bin</span><br><span class=\"line\">E:\\ComTu_Design\\workspace\\AndroidNDK\\bin&gt;cd classes</span><br><span class=\"line\">E:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes&gt;dir</span><br><span class=\"line\"> 驱动器 E 中的卷没有标签。</span><br><span class=\"line\"> 卷的序列号是 EE26-DAFE</span><br><span class=\"line\"> E:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes 的目录</span><br><span class=\"line\">2015-07-14  14:50    &amp;lt;DIR&gt;          .</span><br><span class=\"line\">2015-07-14  14:50    &amp;lt;DIR&gt;          ..</span><br><span class=\"line\">2015-07-14  14:50    &amp;lt;DIR&gt;          android</span><br><span class=\"line\">2015-07-14  14:50    &amp;lt;DIR&gt;          com</span><br><span class=\"line\">               0 个文件              0 字节</span><br><span class=\"line\">               4 个目录 35,301,425,152 可用字节</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用Javah命令生成包含native方法定义的C/C++头文件</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes&gt;javah -jni com.tu.test.androidndk.jni.Port</span><br><span class=\"line\">E:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes&gt;dir</span><br><span class=\"line\"> 驱动器 E 中的卷没有标签。</span><br><span class=\"line\"> 卷的序列号是 EE26-DAFE</span><br><span class=\"line\"></span><br><span class=\"line\"> E:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes 的目录</span><br><span class=\"line\"></span><br><span class=\"line\">2015-07-14  16:15    &amp;lt;DIR&gt;          .</span><br><span class=\"line\">2015-07-14  16:15    &amp;lt;DIR&gt;          ..</span><br><span class=\"line\">2015-07-14  16:08    &amp;lt;DIR&gt;          android</span><br><span class=\"line\">2015-07-14  16:08    &amp;lt;DIR&gt;          com</span><br><span class=\"line\">2015-07-14  16:15             1,213 com_tu_test_androidndk_jni_Port.h</span><br><span class=\"line\">               1 个文件          1,213 字节</span><br><span class=\"line\">               4 个目录 35,301,281,792 可用字节</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>输入完后控制台不会有打印信息,只会在E:\\ComTu_Design\\workspace\\AndroidNDK\\bin\\classes&gt;目<br>录下会生成一个文件名为<strong>com_tu_test_androidndk_jni_Port.h</strong>的头文件</p>\n<p>拷贝头文件   </p>\n<p>把生成的.h文件拷贝到步骤2生成的jni目录下.</p>\n</blockquote>\n<pre><code>使目录结构如下:\n    jni\n    |-Android.mk\n    |-AndroidNDK.app\n    |-com_tu_test_androidndk_jni_Port.h\n</code></pre><h2 id=\"4-编写代码实现\"><a href=\"#4-编写代码实现\" class=\"headerlink\" title=\"4. 编写代码实现\"></a>4. 编写代码实现</h2><blockquote>\n<p>打开com_tu_test_androidndk_jni_Port.h文件</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">JNIEXPORT jstring JNICALL <span class=\"title\">Java_com_tu_androidndk_jni_Port_sayHello</span></span><br><span class=\"line\">  <span class=\"params\">(JNIEnv *, jclass, jstring)</span></span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>把生成的方法拷贝到AndroidNDK.app里面.并实现方法体.</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;jni.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;stdio.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"string\">\"com_tu_androidndk_jni_Port.h\"</span>//引入头文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;android/log.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//Logcat打印日志 Android.mk 文件必须配置: LOCAL_LDLIBS += -L$(SYSROOT)/usr/lib -llog</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">JNIEXPORT jstring JNICALL <span class=\"title\">Java_com_tu_androidndk_jni_Port_sayHello</span><span class=\"params\">(</span><br><span class=\"line\">\t\tJNIEnv *env, jclass clazz, jstring s)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> * st = (char *) env-&gt;GetStringUTFChars(s, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n c-string:  %s\"</span>, st);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//在Logcat中打印日志,在个参数,日志类型,过滤标签Tag,输入的文本内容Text</span></span><br><span class=\"line\">\t__android_log_print(ANDROID_LOG_INFO, <span class=\"string\">\"JNIMsg\"</span>, <span class=\"string\">\"\\n c-string: %s\"</span>,st);</span><br><span class=\"line\"></span><br><span class=\"line\">\tjstring rtn = env-&gt;NewStringUTF(<span class=\"string\">\"hello Comtu!\"</span>);</span><br><span class=\"line\">\treturn rtn;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在java里并编写静态代码块加载lib</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.androidndkhelloworld;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.tu.androidndkhelloworld.jni.Port;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\tSystem.loadLibrary(<span class=\"string\">\"AndroidNDK\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">\t\tsetContentView(R.layout.activity_main);</span><br><span class=\"line\">\t\t<span class=\"comment\">//调用C程序实现的sayHello方法</span></span><br><span class=\"line\">\t\t((TextView)findViewById(R.id.text)).setText(Port.sayHello(<span class=\"string\">\"Hi\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>运行程序(注意以上操作只适合于ARM架构的CPU)</p>\n</blockquote>\n<hr>\n<h1 id=\"编译多个源文件\"><a href=\"#编译多个源文件\" class=\"headerlink\" title=\"编译多个源文件\"></a>编译多个源文件</h1><h2 id=\"1-jni目录里创建多一个c文件\"><a href=\"#1-jni目录里创建多一个c文件\" class=\"headerlink\" title=\"1.jni目录里创建多一个c文件\"></a>1.jni目录里创建多一个c文件</h2><blockquote>\n<p>选择jni–&gt;右击选择new–&gt;other–&gt;C/C++–&gt;class–&gt;文件名如(Hello)<br>或者<br>选择C/C++ Perspective 视图 –&gt;jni目录下右击new–&gt;class–&gt;文件名(Hello)<br>目录下就会自己创建出Hello.cpp与Hello.h文件</p>\n</blockquote>\n<pre><code>使目录结构如下:\n    jni\n    |-Android.mk\n    |-AndroidNDK.app\n    |-com_tu_test_androidndk_jni_Port.h\n    |-Hello.cpp\n    |-Hello.h\n</code></pre><h2 id=\"2-编写新创建的Hello-h文件\"><a href=\"#2-编写新创建的Hello-h文件\" class=\"headerlink\" title=\"2.编写新创建的Hello.h文件\"></a>2.编写新创建的Hello.h文件</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> HELLO_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HELLO_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Hello &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tHello();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">char</span> * <span class=\"title\">getWords</span><span class=\"params\">()</span></span>;<span class=\"comment\">//&amp;lt;----编写一个方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">virtual</span> ~Hello();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* HELLO_H_ */</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-实现Hello-cpp代码\"><a href=\"#3-实现Hello-cpp代码\" class=\"headerlink\" title=\"3.实现Hello.cpp代码\"></a>3.实现Hello.cpp代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"string\">\"Hello.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Hello::Hello() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> * Hello::getWords()&#123;<span class=\"comment\">//&amp;lt;----编写一个方法用于与java交互</span></span><br><span class=\"line\">\treturn <span class=\"string\">\"Hello NDK\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Hello::~Hello() &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-编写Android-mk文件-让Hello可进行编译\"><a href=\"#4-编写Android-mk文件-让Hello可进行编译\" class=\"headerlink\" title=\"4.编写Android.mk文件,让Hello可进行编译\"></a>4.编写Android.mk文件,让Hello可进行编译</h2><blockquote>\n<p>LOCAL_LDLIBS += -L$(SYSROOT)/usr/lib -llog 要打印log需要增加</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_PATH := $(call my-dir)</span><br><span class=\"line\"></span><br><span class=\"line\">include $(CLEAR_VARS)</span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_LDLIBS += -L$(SYSROOT)/usr/lib -llog</span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE    := AndroidNDK</span><br><span class=\"line\">LOCAL_SRC_FILES := AndroidNDK.cpp Hello.cpp</span><br><span class=\"line\"></span><br><span class=\"line\">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果增加很多个.cpp文件使用空格分开,为了方便观看也可使用\\符号进行分行显示</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_SRC_FILES := AndroidNDK.cpp \\</span><br><span class=\"line\">Hello.cpp</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-编写TwoPort类增加如下代码作为测试\"><a href=\"#5-编写TwoPort类增加如下代码作为测试\" class=\"headerlink\" title=\"5.编写TwoPort类增加如下代码作为测试\"></a>5.编写TwoPort类增加如下代码作为测试</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.androidndkhelloworld.jni;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TwoPort</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> String <span class=\"title\">getWords</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>继续使用javah命令或者使用批量生头文件(见下文)的方式.生成头文件到jni目录.</p>\n</blockquote>\n<pre><code>使目录结构如下:\n    jni\n    |-Android.mk\n    |-AndroidNDK.app\n    |-com_tu_test_androidndk_jni_Port.h\n    |-com_tu_test_androidndk_jni_TwoPort.h\n    |-Hello.cpp\n    |-Hello.h\n</code></pre><blockquote>\n<p>AndroidNDK.cpp实现代码</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;jni.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;stdio.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"string\">\"com_tu_test_androidndk_jni_Port.h\"</span>//引入头文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"string\">\"com_tu_test_androidndk_jni_TwoPort.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;android/log.h&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &amp;lt;Hello.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//Logcat打印日志 Android.mk 文件必须配置: LOCAL_LDLIBS += -L$(SYSROOT)/usr/lib -llog</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">JNIEXPORT jstring JNICALL <span class=\"title\">Java_com_tu_androidndk_jni_Port_sayHello</span><span class=\"params\">(</span><br><span class=\"line\">\t\tJNIEnv *env, jclass clazz, jstring s)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> * st = (char *) env-&gt;GetStringUTFChars(s, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n c-string:  %s\"</span>, st);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//在Logcat中打印日志,在个参数,日志类型,过滤标签Tag,输入的文本内容Text</span></span><br><span class=\"line\">\t__android_log_print(ANDROID_LOG_INFO, <span class=\"string\">\"JNIMsg\"</span>, <span class=\"string\">\"\\n c-string: %s\"</span>, st);</span><br><span class=\"line\"></span><br><span class=\"line\">\tjstring rtn = env-&gt;NewStringUTF(<span class=\"string\">\"hello Comtu!\"</span>);</span><br><span class=\"line\">\treturn rtn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">JNIEXPORT jstring JNICALL <span class=\"title\">Java_com_tu_androidndk_jni_TwoPort_getWords</span><span class=\"params\">(</span><br><span class=\"line\">\t\tJNIEnv *env, jclass clazz)</span> </span>&#123;</span><br><span class=\"line\">\tHello h;</span><br><span class=\"line\">\treturn env-&gt;NewStringUTF((const char *) h.getWords());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-运行\"><a href=\"#6-运行\" class=\"headerlink\" title=\"6.运行\"></a>6.运行</h2><pre><code>String words = TwoPort.getWords();//调用 \n</code></pre><hr>\n<h1 id=\"支持多CPU架构\"><a href=\"#支持多CPU架构\" class=\"headerlink\" title=\"支持多CPU架构\"></a>支持多CPU架构</h1><p><strong>方法</strong>:</p>\n<blockquote>\n<p>在jni目录新创建一个 <strong>Application.mk</strong> 文件里面增加内容<strong>APP_ABI := x86 armeabi</strong>即可.<br>这样就支持x86与armeabi的CPU架构了.<br>如果需要支持更多的架构会增加apk的文件大小.<br>NDK的版本为android-ndk-r10e可支持包含64位的处理器<br>APP_ABI := x86 armeabi armeabi-v7a mips arm64-v8a x86_64 mips64 </p>\n<p>查看手机CPU的架构方法”  </p>\n</blockquote>\n<pre><code>使用已经Root的手机通过R.E.管理器,\n或者ES文件管理器,进入到文件顶级根目录下/proc文件夹/cpuinfo文件可查看手机属于什么CPU架构\n\n或者使用cmd查看CPU是属于那个架构可使用命令:\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\comtu&gt;adb shell</span><br><span class=\"line\">shell@android:/ $ cat /proc/cpuinfo</span><br><span class=\"line\">cat /proc/cpuinfo</span><br><span class=\"line\">Processor       : ARMv7 Processor rev 1 (v7l)</span><br><span class=\"line\">processor       : 0</span><br><span class=\"line\">BogoMIPS        : 668.86</span><br><span class=\"line\"></span><br><span class=\"line\">processor       : 1</span><br><span class=\"line\">BogoMIPS        : 668.86</span><br><span class=\"line\"></span><br><span class=\"line\">Features        : swp half thumb fastmult vfp edsp thumbee neon vfpv3 tls vfpv4</span><br><span class=\"line\">CPU implementer : 0x41</span><br><span class=\"line\">CPU architecture: 7</span><br><span class=\"line\">CPU variant     : 0x0</span><br><span class=\"line\">CPU part        : 0xc05</span><br><span class=\"line\">CPU revision    : 1</span><br><span class=\"line\"></span><br><span class=\"line\">Hardware        : MSM8x25 C8833D BOARD</span><br><span class=\"line\">Revision        : 0000</span><br><span class=\"line\">Serial          : 0000000000000000</span><br><span class=\"line\">shell@android:/ $</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"使用Ant批量生成头文件\"><a href=\"#使用Ant批量生成头文件\" class=\"headerlink\" title=\"使用Ant批量生成头文件\"></a>使用Ant批量生成头文件</h1><p>使用Ant工具自动生成头文件.    (方便快捷,代替上面的步骤3)</p>\n<blockquote>\n<p>Ant是一个自动构建的一个脚本,基于xml . </p>\n</blockquote>\n<h2 id=\"1-创建Ant文件\"><a href=\"#1-创建Ant文件\" class=\"headerlink\" title=\"1.创建Ant文件\"></a>1.创建Ant文件</h2><blockquote>\n<p>在项目工程里创建一个new–&gt;File新创建一个文件名:build_headers.xml的文件<br>选择文件–&gt;右击–&gt;open with-&gt;other-&gt;<strong>ant editor</strong>的方式打开.<br>打开文件后使用<strong>alt+/</strong>快捷键会自动生成模板.  </p>\n</blockquote>\n<h2 id=\"2-编写模板\"><a href=\"#2-编写模板\" class=\"headerlink\" title=\"2.编写模板\"></a>2.编写模板</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;lt;project name=\"AndroidNDK\" default=\"BuildAllHeaders\"&gt;</span><br><span class=\"line\">&amp;lt;description&gt;description&amp;lt;/description&gt;</span><br><span class=\"line\">&amp;lt;!--呼叫目标--&gt;</span><br><span class=\"line\">&amp;lt;target name=\"BuildAllHeaders\"&gt;</span><br><span class=\"line\">\t&amp;lt;antcall target=\"BuildPortHeader\" /&gt;</span><br><span class=\"line\">\t&amp;lt;antcall target=\"BuildTwoPortHeader\" /&gt;</span><br><span class=\"line\">&amp;lt;/target&gt;</span><br><span class=\"line\">&amp;lt;!--目标_使用javah命令 destdir生成文件的目的路径,classpath类Class文件路径 , class类名--&gt;</span><br><span class=\"line\">&amp;lt;target name=\"BuildPortHeader\"&gt;</span><br><span class=\"line\">\t&amp;lt;javah destdir=\"./jni\" classpath=\"./bin/classes\" class=\"com.tu.test.androidndk.jni.Port\"/&gt;</span><br><span class=\"line\">&amp;lt;/target&gt;</span><br><span class=\"line\">&amp;lt;target name=\"BuildTwoPortHeader\"&gt;</span><br><span class=\"line\">\t&amp;lt;javah destdir=\"./jni\" classpath=\"./bin/classes\" class=\"com.tu.test.androidndk.jni.TwoPort\"/&gt;</span><br><span class=\"line\">&amp;lt;/target&gt;</span><br><span class=\"line\">&amp;lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-运行Ant自动编译\"><a href=\"#3-运行Ant自动编译\" class=\"headerlink\" title=\"3.运行Ant自动编译\"></a>3.运行Ant自动编译</h2><blockquote>\n<p>选择build_headers.xml右击–&gt; run as –&gt;Ant build<br>或者:<br>打开Ant窗口(Wnidow–&gt;Show View–&gt;Ant)–&gt;Add Buildfiles–&gt;选择项目–&gt;Ant窗口里会多出一个AndroidNDK项双击即可.   </p>\n</blockquote>\n<h2 id=\"4-刷新项目\"><a href=\"#4-刷新项目\" class=\"headerlink\" title=\"4.刷新项目\"></a>4.刷新项目</h2><blockquote>\n<p>选择项目–&gt;右击–&gt;Refresh<br>查看jni目录会新增加对应.h的头文件<br>这样编译起多个文件时效率大大的提高.    </p>\n</blockquote>\n<hr>\n<h1 id=\"Demo下载\"><a href=\"#Demo下载\" class=\"headerlink\" title=\"Demo下载\"></a>Demo下载</h1><p>本文案例Demo<a href=\"/res/file/blog/2014/10/29/Android_NDK_Hello_World_two/AndroidNDKHelloWorld.rar\">下载</a></p>"},{"layout":"post","title":"Android 中NDK的使用详解第一篇:环境","duoshuo":true,"date":"2014-10-27T16:00:00.000Z","SyntaxHihglighter":true,"shTheme":"shThemeMidnight","_content":"\n<style>\nh3 {\n    line-height: 1;\n    letter-spacing: 2px;\n    margin-top: 5px;\n}\nh6 {\n    line-height: 1;\n    letter-spacing: 2px;\n    margin-top: 5px;\n}\n</style>\n\n目录\n\n*  1.下载集成开发环境\n*  2.安装配置环境\n*  3.常用功能配置\n\t*  3.1自动生成头文件(配置javah)\n\t*  3.2生成Sign签名(配置Javap)\n\t*  3.3配置C/C++库\n\n# 1. 下载集成开发环境\n\n所需要的开发工具:   \n**Eclipse** 下载地址:[http://www.eclipse.org/downloads/](http://www.eclipse.org/downloads/)   \n\t选择Eclipse的时候可以选择C/C++版本的,方便后续直接在Eclipse里编写C程序.当然也可以自己对Eclipse安装C/C++插件   \n**JDK** 下载地址:[http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)   \n**ADT** 下载地址:[http://developer.android.com/sdk/installing/installing-adt.html](http://developer.android.com/sdk/installing/installing-adt.html)   \n**Android SDK** 下载地址:[http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html)   \n**NDK** 下载地址:[http://developer.android.com/ndk/downloads/index.html](http://developer.android.com/ndk/downloads/index.html)   \n\t也可以直接下载**ADT Bundle** 但官方已经找不到下载地址.可网上搜索或者我下面提供的一个地址可找到.   \n如果没有代理可能很多工具无法下载.这里提供一个[Android开发人员工具集给大家](http://www.androiddevtools.cn/)    \n\n<!-- more -->\n\n# 2. 安装配置环境\n\t\n## 2.1. 安装JDK并设置环境变量到path中. 如:javah工具等\n\n## 2.2. 解压Eclipse到D盘目录如: D:/eclipse\n\n## 2.3. 为Eclipse安装ADT插件 \n\n方式一绿色安装: \n\n> 1.解压ADT到到某一个目录   \n> 2.单独复制`features`与`plugins`这两个文件夹到D:/eclipse/my_plugins/ADT/eclipse/目录下(新创建目录)   \n> 3.到D:/eclipse/dropins目录下新创建一个adt.link文件,里面编写内容:`path=D:/eclipse/my_plugins/ADT/eclipse/`\n\n方式二直接安装:\n\n> 打开Eclpse-->Help-->Install New Software..-->Add-->Name:ADT-->Archive-->选择下载好的ADT.zip文件-->OK-->下方会加载显示出\n> Developer Tools -->全选-->Next-->Next-->选择上面的I accept the ....-->Finish-->进入自动安装状态-->安装完后重启,即可.   \n\n\nDeveloper Tools其中全部包含有如下\n\n\tAndroid DDMS\n\tAndroid Development Tool\n\tAndroid Hierarchy Viewer\n\tAndroid Native Developme\n\tAndroid Traceview\n\tTracer for OpenGL ES\n\n\n## 2.4. 解压Android SDK到my_plugins目录下.\n> 配置一下环境变量到path中,方便以后的需要.如:draw9patch工具等等\n\n## 2.5. 安装NDK,如果是压缩包形式则,解压到my_plugins目录下.\n> 如果是安装包(exe,其实是zip的自解压文件)也可安装到my_plugins目录\n\n## 2.6. 如果是下载的Eclipse是C/C++版本的,默认是C/C++视图.修改视图-->点击右上角Open perspective-->选择java\n\t\n\t如果安装ADT的时候使用的是方式二直接安装ADT.zip的方式,则安装完后无需要再配置C/C++环境,ADT已经包含了.\n\n> 如果非C/C++版本的则为Eclipse安装C/C++ 插件方法如下:\n\n\t\t1.Eclipse里安装CDT-->Help-->Install new software-->弹出窗口中-->\n\t\t\tWork with:输入-->http://download.eclipse.org/tools/cdt/releases/galileo\n\t\t\t-->回车-->等待一段时间后会在下面列表显示出CDT Main Features选中-->Next-->等待安装完后重启Eclipse即可.\n\t\t2.安装MinGW --- C/C++编译平台，下载后需要安装，http://www.mingw.org/download.shtml\n\t\t\t同时选中g++、MinGW Make，同时设置环境变量，将%MinGW_HOME%\\bin设置到PATH中.\n\t\t3.安装gdb——C/C++调试平台，下载后安装，默认到MinGW_HOME就行。http://www.gnu.org/software/gdb/download\n\t\t\n## 2.7. 目录结构如下:\n\n\tD:\\eclipse\n\t\t+---- ....\n\t\t+----dropins\n\t\t|\t+-----adt.link\n\t\t+----my_plugins\n\t\t\t+-----android-sdk\n\t\t\t|\t+----....\n\t\t\t+-----android-ndk-r10e\n\t\t\t|\t+----....\n\t\t\t+-----MinGW\n\t\t\t|\t+----....\n\t\t\t+-----ADT\n\t\t\t|\t+----eclipse\n\t\t\t|\t\t+-----features\n\t\t\t|\t\t|\t+-----....\n\t\t\t|\t\t+-----plugins\n\t\t\t|\t\t\t+-----....\t\t\t\n\n\n## 2.8. 配置环境变量:\n\n\t 计算机右击-->属性-->高级系统设置-->高级-->环境变量-->\n\t\t\t新建-->系统变量-->变量名:java_home -->变量值:jdk安装目录,如我的是:C:\\Program Files\\Java\\jdk1.8.0_20\n\t\t\t系统变量-->找到Path选中-->编辑-->光标定位到最尾部-->输入-->;%java_home%\\bin\n\t\t\t新建-->系统变量-->变量名:android_sdk -->变量值:androidSDK安装目录,如我的是:D:\\eclipse\\my_plugins\\android-sdk\n\t\t\t系统变量-->找到Path选中-->编辑-->光标定位到最尾部-->输入-->;%android_sdk%\\tools\n\t\t\t新建-->系统变量-->变量名:MinGW_HOME -->变量值:MinGW安装目录\\bin,如我的是:D:\\eclipse\\my_plugins\\MinGW;\n\t\t\t系统变量-->找到Path选中-->编辑-->光标定位到最尾部-->输入-->;%MinGW_HOME%\\bin\n\n## 2.9. 以上配置完成后打开eclipse/eclipse.exe运行IDE\n\n\t配置AndroidSDK-->Windows-->Proferences-->选择中Android-->\n\t\t\tSDK Location中选中D:\\eclipse\\my_plugins\\android-sdk目录即可\n\n\t配置AndroidNDK-->Windows-->Proferences-->打开折叠的Android-->\n\t\t\tNDK-->NDK Location中选中D:\\eclipse\\my_plugins\\android-ndk-r10e目录即可\n\n\t为了使CDT能够取用MinGW来进行编译的工作, 我们要回到 Eclipse 当中进行设定：\n\t\t\tWindow->Preferences->C/C++->New CDT project wizard->Makefile Project \n\t\t\t找到 Binary Parser 取消 Elf Parser 改选 PE Windows Parser\n\n## 2.10. 打开Android SDK Manager下载SDK\n\t\n> 如果速度慢可按照如下设置代理:\n\n\tAndroid SDK在线更新镜像服务器\n\n\t中国科学院开源协会镜像站地址:\n\n\tIPV4/IPV6: http://mirrors.opencas.cn 端口：80\n\n\tIPV4/IPV6: http://mirrors.opencas.org 端口：80\n\n\tIPV4/IPV6: http://mirrors.opencas.ac.cn 端口：80\n\n\t上海GDG镜像服务器地址:\n\n\thttp://sdk.gdgshanghai.com 端口：8000\n\n\t北京化工大学镜像服务器地址:\n\n\tIPv4: http://ubuntu.buct.edu.cn/ 端口：80\n\n\tIPv4: http://ubuntu.buct.cn/ 端口：80\n\n\tIPv6: http://ubuntu.buct6.edu.cn/ 端口：80\n\n\t大连东软信息学院镜像服务器地址:\n\n\thttp://mirrors.neusoft.edu.cn 端口：80\n\n\t使用方法：\n\n\t启动 Android SDK Manager ，打开主界面，依次选择『Tools』、『Options...』，\n\t弹出『Android SDK Manager - Settings』窗口；\n\n\t在『Android SDK Manager - Settings』窗口中，在『HTTP Proxy Server」和\n\t「HTTP Proxy Port』输入框内填入上面镜像服务器地址(不包含http:// )和端口，\n\t并且选中『Force https://... sources to be fetched using http://...』复选框。\n\t设置完成后单击『Close』按钮关闭『Android SDK Manager - Settings』窗口返回到主界面；\n\n\t依次选择『Packages』、『Reload』。\n\n---\n\n# 3.常用功能配置\n\n## 3.1自动生成头文件(配置javah)\n\n\t非Ant批量生成头文件,配置是为了简化命令行的操作.\n\n> 1.打开Eclipse  --> 2.Run  --> 3.External Tools  --> 4.External Tool Configurations -->   \n> 5.Program右击选择New --> 6.Name:输入 Generate_C++_Header_File ->7.Main栏目中Location:中选择下面的Variables  \n> 选择system_path --> 8.Locaton输入框里会自动填上${system_path}--> 9.修改内容为${system_path:javah} -->  \n> 10.  在Working Directory中选择Variables--> 11.选择project_loc --> 12.中间输入框会自动填写${project_loc}   \n> 13.修改内容为${_project_loc}/jni --> 14.Arguments:输入内容\n> -classpath ${project_loc}\\bin\\classes;输入AndroidSDK目录\\platforms\\android-?\\android.jar -d ${project_loc}\\jni -jni ${java_type_name}   \n\n例如我的配置是: \n\t\n\tLocation:\n\t\t${system_path:javah}\n\tWorking Directory:\n\t\t${project_loc}\\jni\n\tArguments:\n\t-classpath ${project_loc}\\bin\\classes;D:\\eclipse\\my_plugins\\android-sdk-windows\\platforms\\android-17\\android.jar -d ${project_loc}\\jni -jni ${java_type_name}\n\n![javah](/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_javah.png)\n\n使用方法:\n\n\t点选中有native修饰的方法的类 --> Run Generate_C++_Header_File  --> 刷新项目.会在项目/jni目录下生成.h头文件.\n\n![javah](/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_run.png)\n\n---\n\n## 3.2生成Sign签名(配置Javap) \n\t\n\t代替使用cmd命令行生成.提高效率\n\t见JNI\n\n> 1.打开Eclipse  --> 2.Run  --> 3.External Tools  --> 4.External Tool Configurations -->   \n> 5.Program右击选择New --> 6.Name:输入javap ->7.Main栏目中Location:中选择下面的Variables  \n> 选择system_path --> 8.Locaton输入框里会自动填上${system_path}--> 9.修改内容为${system_path:javap} -->  \n> 10.  在Working Directory中选择Variables--> 11.选择project_loc --> 12.中间输入框会自动填写${project_loc}   \n> 13.Arguments:输入内容: -classpath ${project_loc}\\bin\\classes -s -p ${java_type_name}\n\n如我的配置是:\n\n\tLocation:\n\t\t${system_path:javap}\n\tWorking Directory:\n\t\t${project_loc}\n\tArguments:\n\t\t-classpath ${project_loc}\\bin\\classes -s -p ${java_type_name}\n\t\n![javah](/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_javap.png)\n\n使用方法:\n\t\n\t点选有 native 修饰的方法的类--> Run javap\n\n\t在Console就会打印出javap运行在cmd命令行一样的效果.生成 Sign 签名 \n\n![javah](/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_run.png)\n\n---\n\n\n## 3.3配置C/C++库\n\t\n\t前提,已经有一个Android项目支持NDK.\n\t\t即: 选择项目右击--> Android Tool -->Add Native Support..\n\n如果出现C++代码alt+/无提示可使用此方法解决.\n或者需要引用其它.h资源库,也同样适用.\n\t\n\n\n> 1.选择C/C++视图 --> 2.选中项目右击-->Properties --> 3.C/C++ General--> Paths and Symbols   \n> 4.弹出的Paths and Symbols试图中--> Add  --> File system.. --> 选择NDK的目录结构如:  \n> NDK目录\\platforms\\android-?\\arch-arm\\usr\\include --> Apply --OK \n\n\n\n如我的配置是:\n\t\n\tD:\\eclipse\\my_plugins\\android-ndk-r10e\\platforms\\android-19\\arch-arm\\usr\\include\n\tD:\\eclipse\\my_plugins\\android-ndk-r10e\\sources\\cxx-stl\\stlport\\stlport      \n\t后者是原生C标准头文件库(代码提示,以及看原代码使用.)\n\n![javah](/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/Properties_C-C++.png)\n\n\n\n---\n\nEnd\n","source":"_posts/2014-10-28-Android_NDK_IDE_environment_one.md","raw":"---\nlayout : post\ntitle : \"Android 中NDK的使用详解第一篇:环境\"\ncategory : Android\nduoshuo: true\ndate : 2014-10-28\ntags : [AndroidNDK , NDK , JNI]\nSyntaxHihglighter: true\nshTheme: shThemeMidnight # shThemeDefault  shThemeDjango  shThemeEclipse  shThemeEmacs  shThemeFadeToGrey  shThemeMidnight  shThemeRDark\n---\n\n<style>\nh3 {\n    line-height: 1;\n    letter-spacing: 2px;\n    margin-top: 5px;\n}\nh6 {\n    line-height: 1;\n    letter-spacing: 2px;\n    margin-top: 5px;\n}\n</style>\n\n目录\n\n*  1.下载集成开发环境\n*  2.安装配置环境\n*  3.常用功能配置\n\t*  3.1自动生成头文件(配置javah)\n\t*  3.2生成Sign签名(配置Javap)\n\t*  3.3配置C/C++库\n\n# 1. 下载集成开发环境\n\n所需要的开发工具:   \n**Eclipse** 下载地址:[http://www.eclipse.org/downloads/](http://www.eclipse.org/downloads/)   \n\t选择Eclipse的时候可以选择C/C++版本的,方便后续直接在Eclipse里编写C程序.当然也可以自己对Eclipse安装C/C++插件   \n**JDK** 下载地址:[http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)   \n**ADT** 下载地址:[http://developer.android.com/sdk/installing/installing-adt.html](http://developer.android.com/sdk/installing/installing-adt.html)   \n**Android SDK** 下载地址:[http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html)   \n**NDK** 下载地址:[http://developer.android.com/ndk/downloads/index.html](http://developer.android.com/ndk/downloads/index.html)   \n\t也可以直接下载**ADT Bundle** 但官方已经找不到下载地址.可网上搜索或者我下面提供的一个地址可找到.   \n如果没有代理可能很多工具无法下载.这里提供一个[Android开发人员工具集给大家](http://www.androiddevtools.cn/)    \n\n<!-- more -->\n\n# 2. 安装配置环境\n\t\n## 2.1. 安装JDK并设置环境变量到path中. 如:javah工具等\n\n## 2.2. 解压Eclipse到D盘目录如: D:/eclipse\n\n## 2.3. 为Eclipse安装ADT插件 \n\n方式一绿色安装: \n\n> 1.解压ADT到到某一个目录   \n> 2.单独复制`features`与`plugins`这两个文件夹到D:/eclipse/my_plugins/ADT/eclipse/目录下(新创建目录)   \n> 3.到D:/eclipse/dropins目录下新创建一个adt.link文件,里面编写内容:`path=D:/eclipse/my_plugins/ADT/eclipse/`\n\n方式二直接安装:\n\n> 打开Eclpse-->Help-->Install New Software..-->Add-->Name:ADT-->Archive-->选择下载好的ADT.zip文件-->OK-->下方会加载显示出\n> Developer Tools -->全选-->Next-->Next-->选择上面的I accept the ....-->Finish-->进入自动安装状态-->安装完后重启,即可.   \n\n\nDeveloper Tools其中全部包含有如下\n\n\tAndroid DDMS\n\tAndroid Development Tool\n\tAndroid Hierarchy Viewer\n\tAndroid Native Developme\n\tAndroid Traceview\n\tTracer for OpenGL ES\n\n\n## 2.4. 解压Android SDK到my_plugins目录下.\n> 配置一下环境变量到path中,方便以后的需要.如:draw9patch工具等等\n\n## 2.5. 安装NDK,如果是压缩包形式则,解压到my_plugins目录下.\n> 如果是安装包(exe,其实是zip的自解压文件)也可安装到my_plugins目录\n\n## 2.6. 如果是下载的Eclipse是C/C++版本的,默认是C/C++视图.修改视图-->点击右上角Open perspective-->选择java\n\t\n\t如果安装ADT的时候使用的是方式二直接安装ADT.zip的方式,则安装完后无需要再配置C/C++环境,ADT已经包含了.\n\n> 如果非C/C++版本的则为Eclipse安装C/C++ 插件方法如下:\n\n\t\t1.Eclipse里安装CDT-->Help-->Install new software-->弹出窗口中-->\n\t\t\tWork with:输入-->http://download.eclipse.org/tools/cdt/releases/galileo\n\t\t\t-->回车-->等待一段时间后会在下面列表显示出CDT Main Features选中-->Next-->等待安装完后重启Eclipse即可.\n\t\t2.安装MinGW --- C/C++编译平台，下载后需要安装，http://www.mingw.org/download.shtml\n\t\t\t同时选中g++、MinGW Make，同时设置环境变量，将%MinGW_HOME%\\bin设置到PATH中.\n\t\t3.安装gdb——C/C++调试平台，下载后安装，默认到MinGW_HOME就行。http://www.gnu.org/software/gdb/download\n\t\t\n## 2.7. 目录结构如下:\n\n\tD:\\eclipse\n\t\t+---- ....\n\t\t+----dropins\n\t\t|\t+-----adt.link\n\t\t+----my_plugins\n\t\t\t+-----android-sdk\n\t\t\t|\t+----....\n\t\t\t+-----android-ndk-r10e\n\t\t\t|\t+----....\n\t\t\t+-----MinGW\n\t\t\t|\t+----....\n\t\t\t+-----ADT\n\t\t\t|\t+----eclipse\n\t\t\t|\t\t+-----features\n\t\t\t|\t\t|\t+-----....\n\t\t\t|\t\t+-----plugins\n\t\t\t|\t\t\t+-----....\t\t\t\n\n\n## 2.8. 配置环境变量:\n\n\t 计算机右击-->属性-->高级系统设置-->高级-->环境变量-->\n\t\t\t新建-->系统变量-->变量名:java_home -->变量值:jdk安装目录,如我的是:C:\\Program Files\\Java\\jdk1.8.0_20\n\t\t\t系统变量-->找到Path选中-->编辑-->光标定位到最尾部-->输入-->;%java_home%\\bin\n\t\t\t新建-->系统变量-->变量名:android_sdk -->变量值:androidSDK安装目录,如我的是:D:\\eclipse\\my_plugins\\android-sdk\n\t\t\t系统变量-->找到Path选中-->编辑-->光标定位到最尾部-->输入-->;%android_sdk%\\tools\n\t\t\t新建-->系统变量-->变量名:MinGW_HOME -->变量值:MinGW安装目录\\bin,如我的是:D:\\eclipse\\my_plugins\\MinGW;\n\t\t\t系统变量-->找到Path选中-->编辑-->光标定位到最尾部-->输入-->;%MinGW_HOME%\\bin\n\n## 2.9. 以上配置完成后打开eclipse/eclipse.exe运行IDE\n\n\t配置AndroidSDK-->Windows-->Proferences-->选择中Android-->\n\t\t\tSDK Location中选中D:\\eclipse\\my_plugins\\android-sdk目录即可\n\n\t配置AndroidNDK-->Windows-->Proferences-->打开折叠的Android-->\n\t\t\tNDK-->NDK Location中选中D:\\eclipse\\my_plugins\\android-ndk-r10e目录即可\n\n\t为了使CDT能够取用MinGW来进行编译的工作, 我们要回到 Eclipse 当中进行设定：\n\t\t\tWindow->Preferences->C/C++->New CDT project wizard->Makefile Project \n\t\t\t找到 Binary Parser 取消 Elf Parser 改选 PE Windows Parser\n\n## 2.10. 打开Android SDK Manager下载SDK\n\t\n> 如果速度慢可按照如下设置代理:\n\n\tAndroid SDK在线更新镜像服务器\n\n\t中国科学院开源协会镜像站地址:\n\n\tIPV4/IPV6: http://mirrors.opencas.cn 端口：80\n\n\tIPV4/IPV6: http://mirrors.opencas.org 端口：80\n\n\tIPV4/IPV6: http://mirrors.opencas.ac.cn 端口：80\n\n\t上海GDG镜像服务器地址:\n\n\thttp://sdk.gdgshanghai.com 端口：8000\n\n\t北京化工大学镜像服务器地址:\n\n\tIPv4: http://ubuntu.buct.edu.cn/ 端口：80\n\n\tIPv4: http://ubuntu.buct.cn/ 端口：80\n\n\tIPv6: http://ubuntu.buct6.edu.cn/ 端口：80\n\n\t大连东软信息学院镜像服务器地址:\n\n\thttp://mirrors.neusoft.edu.cn 端口：80\n\n\t使用方法：\n\n\t启动 Android SDK Manager ，打开主界面，依次选择『Tools』、『Options...』，\n\t弹出『Android SDK Manager - Settings』窗口；\n\n\t在『Android SDK Manager - Settings』窗口中，在『HTTP Proxy Server」和\n\t「HTTP Proxy Port』输入框内填入上面镜像服务器地址(不包含http:// )和端口，\n\t并且选中『Force https://... sources to be fetched using http://...』复选框。\n\t设置完成后单击『Close』按钮关闭『Android SDK Manager - Settings』窗口返回到主界面；\n\n\t依次选择『Packages』、『Reload』。\n\n---\n\n# 3.常用功能配置\n\n## 3.1自动生成头文件(配置javah)\n\n\t非Ant批量生成头文件,配置是为了简化命令行的操作.\n\n> 1.打开Eclipse  --> 2.Run  --> 3.External Tools  --> 4.External Tool Configurations -->   \n> 5.Program右击选择New --> 6.Name:输入 Generate_C++_Header_File ->7.Main栏目中Location:中选择下面的Variables  \n> 选择system_path --> 8.Locaton输入框里会自动填上${system_path}--> 9.修改内容为${system_path:javah} -->  \n> 10.  在Working Directory中选择Variables--> 11.选择project_loc --> 12.中间输入框会自动填写${project_loc}   \n> 13.修改内容为${_project_loc}/jni --> 14.Arguments:输入内容\n> -classpath ${project_loc}\\bin\\classes;输入AndroidSDK目录\\platforms\\android-?\\android.jar -d ${project_loc}\\jni -jni ${java_type_name}   \n\n例如我的配置是: \n\t\n\tLocation:\n\t\t${system_path:javah}\n\tWorking Directory:\n\t\t${project_loc}\\jni\n\tArguments:\n\t-classpath ${project_loc}\\bin\\classes;D:\\eclipse\\my_plugins\\android-sdk-windows\\platforms\\android-17\\android.jar -d ${project_loc}\\jni -jni ${java_type_name}\n\n![javah](/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_javah.png)\n\n使用方法:\n\n\t点选中有native修饰的方法的类 --> Run Generate_C++_Header_File  --> 刷新项目.会在项目/jni目录下生成.h头文件.\n\n![javah](/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_run.png)\n\n---\n\n## 3.2生成Sign签名(配置Javap) \n\t\n\t代替使用cmd命令行生成.提高效率\n\t见JNI\n\n> 1.打开Eclipse  --> 2.Run  --> 3.External Tools  --> 4.External Tool Configurations -->   \n> 5.Program右击选择New --> 6.Name:输入javap ->7.Main栏目中Location:中选择下面的Variables  \n> 选择system_path --> 8.Locaton输入框里会自动填上${system_path}--> 9.修改内容为${system_path:javap} -->  \n> 10.  在Working Directory中选择Variables--> 11.选择project_loc --> 12.中间输入框会自动填写${project_loc}   \n> 13.Arguments:输入内容: -classpath ${project_loc}\\bin\\classes -s -p ${java_type_name}\n\n如我的配置是:\n\n\tLocation:\n\t\t${system_path:javap}\n\tWorking Directory:\n\t\t${project_loc}\n\tArguments:\n\t\t-classpath ${project_loc}\\bin\\classes -s -p ${java_type_name}\n\t\n![javah](/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_javap.png)\n\n使用方法:\n\t\n\t点选有 native 修饰的方法的类--> Run javap\n\n\t在Console就会打印出javap运行在cmd命令行一样的效果.生成 Sign 签名 \n\n![javah](/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_run.png)\n\n---\n\n\n## 3.3配置C/C++库\n\t\n\t前提,已经有一个Android项目支持NDK.\n\t\t即: 选择项目右击--> Android Tool -->Add Native Support..\n\n如果出现C++代码alt+/无提示可使用此方法解决.\n或者需要引用其它.h资源库,也同样适用.\n\t\n\n\n> 1.选择C/C++视图 --> 2.选中项目右击-->Properties --> 3.C/C++ General--> Paths and Symbols   \n> 4.弹出的Paths and Symbols试图中--> Add  --> File system.. --> 选择NDK的目录结构如:  \n> NDK目录\\platforms\\android-?\\arch-arm\\usr\\include --> Apply --OK \n\n\n\n如我的配置是:\n\t\n\tD:\\eclipse\\my_plugins\\android-ndk-r10e\\platforms\\android-19\\arch-arm\\usr\\include\n\tD:\\eclipse\\my_plugins\\android-ndk-r10e\\sources\\cxx-stl\\stlport\\stlport      \n\t后者是原生C标准头文件库(代码提示,以及看原代码使用.)\n\n![javah](/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/Properties_C-C++.png)\n\n\n\n---\n\nEnd\n","slug":"Android_NDK_IDE_environment_one","published":1,"updated":"2016-04-27T03:40:40.364Z","comments":1,"photos":[],"link":"","_id":"cinu3ety70015xoj0c33lahyi","content":"<style>\nh3 {\n    line-height: 1;\n    letter-spacing: 2px;\n    margin-top: 5px;\n}\nh6 {\n    line-height: 1;\n    letter-spacing: 2px;\n    margin-top: 5px;\n}\n</style>\n\n<p>目录</p>\n<ul>\n<li>1.下载集成开发环境</li>\n<li>2.安装配置环境</li>\n<li>3.常用功能配置<ul>\n<li>3.1自动生成头文件(配置javah)</li>\n<li>3.2生成Sign签名(配置Javap)</li>\n<li>3.3配置C/C++库</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"1-下载集成开发环境\"><a href=\"#1-下载集成开发环境\" class=\"headerlink\" title=\"1. 下载集成开发环境\"></a>1. 下载集成开发环境</h1><p>所需要的开发工具:<br><strong>Eclipse</strong> 下载地址:<a href=\"http://www.eclipse.org/downloads/\" target=\"_blank\" rel=\"external\">http://www.eclipse.org/downloads/</a><br>    选择Eclipse的时候可以选择C/C++版本的,方便后续直接在Eclipse里编写C程序.当然也可以自己对Eclipse安装C/C++插件<br><strong>JDK</strong> 下载地址:<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br><strong>ADT</strong> 下载地址:<a href=\"http://developer.android.com/sdk/installing/installing-adt.html\" target=\"_blank\" rel=\"external\">http://developer.android.com/sdk/installing/installing-adt.html</a><br><strong>Android SDK</strong> 下载地址:<a href=\"http://developer.android.com/sdk/index.html\" target=\"_blank\" rel=\"external\">http://developer.android.com/sdk/index.html</a><br><strong>NDK</strong> 下载地址:<a href=\"http://developer.android.com/ndk/downloads/index.html\" target=\"_blank\" rel=\"external\">http://developer.android.com/ndk/downloads/index.html</a><br>    也可以直接下载<strong>ADT Bundle</strong> 但官方已经找不到下载地址.可网上搜索或者我下面提供的一个地址可找到.<br>如果没有代理可能很多工具无法下载.这里提供一个<a href=\"http://www.androiddevtools.cn/\" target=\"_blank\" rel=\"external\">Android开发人员工具集给大家</a>    </p>\n<a id=\"more\"></a>\n<h1 id=\"2-安装配置环境\"><a href=\"#2-安装配置环境\" class=\"headerlink\" title=\"2. 安装配置环境\"></a>2. 安装配置环境</h1><h2 id=\"2-1-安装JDK并设置环境变量到path中-如-javah工具等\"><a href=\"#2-1-安装JDK并设置环境变量到path中-如-javah工具等\" class=\"headerlink\" title=\"2.1. 安装JDK并设置环境变量到path中. 如:javah工具等\"></a>2.1. 安装JDK并设置环境变量到path中. 如:javah工具等</h2><h2 id=\"2-2-解压Eclipse到D盘目录如-D-eclipse\"><a href=\"#2-2-解压Eclipse到D盘目录如-D-eclipse\" class=\"headerlink\" title=\"2.2. 解压Eclipse到D盘目录如: D:/eclipse\"></a>2.2. 解压Eclipse到D盘目录如: D:/eclipse</h2><h2 id=\"2-3-为Eclipse安装ADT插件\"><a href=\"#2-3-为Eclipse安装ADT插件\" class=\"headerlink\" title=\"2.3. 为Eclipse安装ADT插件\"></a>2.3. 为Eclipse安装ADT插件</h2><p>方式一绿色安装: </p>\n<blockquote>\n<p>1.解压ADT到到某一个目录<br>2.单独复制<code>features</code>与<code>plugins</code>这两个文件夹到D:/eclipse/my_plugins/ADT/eclipse/目录下(新创建目录)<br>3.到D:/eclipse/dropins目录下新创建一个adt.link文件,里面编写内容:<code>path=D:/eclipse/my_plugins/ADT/eclipse/</code></p>\n</blockquote>\n<p>方式二直接安装:</p>\n<blockquote>\n<p>打开Eclpse–&gt;Help–&gt;Install New Software..–&gt;Add–&gt;Name:ADT–&gt;Archive–&gt;选择下载好的ADT.zip文件–&gt;OK–&gt;下方会加载显示出<br>Developer Tools –&gt;全选–&gt;Next–&gt;Next–&gt;选择上面的I accept the ….–&gt;Finish–&gt;进入自动安装状态–&gt;安装完后重启,即可.   </p>\n</blockquote>\n<p>Developer Tools其中全部包含有如下</p>\n<pre><code>Android DDMS\nAndroid Development Tool\nAndroid Hierarchy Viewer\nAndroid Native Developme\nAndroid Traceview\nTracer for OpenGL ES\n</code></pre><h2 id=\"2-4-解压Android-SDK到my-plugins目录下\"><a href=\"#2-4-解压Android-SDK到my-plugins目录下\" class=\"headerlink\" title=\"2.4. 解压Android SDK到my_plugins目录下.\"></a>2.4. 解压Android SDK到my_plugins目录下.</h2><blockquote>\n<p>配置一下环境变量到path中,方便以后的需要.如:draw9patch工具等等</p>\n</blockquote>\n<h2 id=\"2-5-安装NDK-如果是压缩包形式则-解压到my-plugins目录下\"><a href=\"#2-5-安装NDK-如果是压缩包形式则-解压到my-plugins目录下\" class=\"headerlink\" title=\"2.5. 安装NDK,如果是压缩包形式则,解压到my_plugins目录下.\"></a>2.5. 安装NDK,如果是压缩包形式则,解压到my_plugins目录下.</h2><blockquote>\n<p>如果是安装包(exe,其实是zip的自解压文件)也可安装到my_plugins目录</p>\n</blockquote>\n<h2 id=\"2-6-如果是下载的Eclipse是C-C-版本的-默认是C-C-视图-修改视图–-gt-点击右上角Open-perspective–-gt-选择java\"><a href=\"#2-6-如果是下载的Eclipse是C-C-版本的-默认是C-C-视图-修改视图–-gt-点击右上角Open-perspective–-gt-选择java\" class=\"headerlink\" title=\"2.6. 如果是下载的Eclipse是C/C++版本的,默认是C/C++视图.修改视图–&gt;点击右上角Open perspective–&gt;选择java\"></a>2.6. 如果是下载的Eclipse是C/C++版本的,默认是C/C++视图.修改视图–&gt;点击右上角Open perspective–&gt;选择java</h2><pre><code>如果安装ADT的时候使用的是方式二直接安装ADT.zip的方式,则安装完后无需要再配置C/C++环境,ADT已经包含了.\n</code></pre><blockquote>\n<p>如果非C/C++版本的则为Eclipse安装C/C++ 插件方法如下:</p>\n</blockquote>\n<pre><code>1.Eclipse里安装CDT--&gt;Help--&gt;Install new software--&gt;弹出窗口中--&gt;\n    Work with:输入--&gt;http://download.eclipse.org/tools/cdt/releases/galileo\n    --&gt;回车--&gt;等待一段时间后会在下面列表显示出CDT Main Features选中--&gt;Next--&gt;等待安装完后重启Eclipse即可.\n2.安装MinGW --- C/C++编译平台，下载后需要安装，http://www.mingw.org/download.shtml\n    同时选中g++、MinGW Make，同时设置环境变量，将%MinGW_HOME%\\bin设置到PATH中.\n3.安装gdb——C/C++调试平台，下载后安装，默认到MinGW_HOME就行。http://www.gnu.org/software/gdb/download\n</code></pre><h2 id=\"2-7-目录结构如下\"><a href=\"#2-7-目录结构如下\" class=\"headerlink\" title=\"2.7. 目录结构如下:\"></a>2.7. 目录结构如下:</h2><pre><code>D:\\eclipse\n    +---- ....\n    +----dropins\n    |    +-----adt.link\n    +----my_plugins\n        +-----android-sdk\n        |    +----....\n        +-----android-ndk-r10e\n        |    +----....\n        +-----MinGW\n        |    +----....\n        +-----ADT\n        |    +----eclipse\n        |        +-----features\n        |        |    +-----....\n        |        +-----plugins\n        |            +-----....            \n</code></pre><h2 id=\"2-8-配置环境变量\"><a href=\"#2-8-配置环境变量\" class=\"headerlink\" title=\"2.8. 配置环境变量:\"></a>2.8. 配置环境变量:</h2><pre><code>计算机右击--&gt;属性--&gt;高级系统设置--&gt;高级--&gt;环境变量--&gt;\n       新建--&gt;系统变量--&gt;变量名:java_home --&gt;变量值:jdk安装目录,如我的是:C:\\Program Files\\Java\\jdk1.8.0_20\n       系统变量--&gt;找到Path选中--&gt;编辑--&gt;光标定位到最尾部--&gt;输入--&gt;;%java_home%\\bin\n       新建--&gt;系统变量--&gt;变量名:android_sdk --&gt;变量值:androidSDK安装目录,如我的是:D:\\eclipse\\my_plugins\\android-sdk\n       系统变量--&gt;找到Path选中--&gt;编辑--&gt;光标定位到最尾部--&gt;输入--&gt;;%android_sdk%\\tools\n       新建--&gt;系统变量--&gt;变量名:MinGW_HOME --&gt;变量值:MinGW安装目录\\bin,如我的是:D:\\eclipse\\my_plugins\\MinGW;\n       系统变量--&gt;找到Path选中--&gt;编辑--&gt;光标定位到最尾部--&gt;输入--&gt;;%MinGW_HOME%\\bin\n</code></pre><h2 id=\"2-9-以上配置完成后打开eclipse-eclipse-exe运行IDE\"><a href=\"#2-9-以上配置完成后打开eclipse-eclipse-exe运行IDE\" class=\"headerlink\" title=\"2.9. 以上配置完成后打开eclipse/eclipse.exe运行IDE\"></a>2.9. 以上配置完成后打开eclipse/eclipse.exe运行IDE</h2><pre><code>配置AndroidSDK--&gt;Windows--&gt;Proferences--&gt;选择中Android--&gt;\n        SDK Location中选中D:\\eclipse\\my_plugins\\android-sdk目录即可\n\n配置AndroidNDK--&gt;Windows--&gt;Proferences--&gt;打开折叠的Android--&gt;\n        NDK--&gt;NDK Location中选中D:\\eclipse\\my_plugins\\android-ndk-r10e目录即可\n\n为了使CDT能够取用MinGW来进行编译的工作, 我们要回到 Eclipse 当中进行设定：\n        Window-&gt;Preferences-&gt;C/C++-&gt;New CDT project wizard-&gt;Makefile Project \n        找到 Binary Parser 取消 Elf Parser 改选 PE Windows Parser\n</code></pre><h2 id=\"2-10-打开Android-SDK-Manager下载SDK\"><a href=\"#2-10-打开Android-SDK-Manager下载SDK\" class=\"headerlink\" title=\"2.10. 打开Android SDK Manager下载SDK\"></a>2.10. 打开Android SDK Manager下载SDK</h2><blockquote>\n<p>如果速度慢可按照如下设置代理:</p>\n</blockquote>\n<pre><code>Android SDK在线更新镜像服务器\n\n中国科学院开源协会镜像站地址:\n\nIPV4/IPV6: http://mirrors.opencas.cn 端口：80\n\nIPV4/IPV6: http://mirrors.opencas.org 端口：80\n\nIPV4/IPV6: http://mirrors.opencas.ac.cn 端口：80\n\n上海GDG镜像服务器地址:\n\nhttp://sdk.gdgshanghai.com 端口：8000\n\n北京化工大学镜像服务器地址:\n\nIPv4: http://ubuntu.buct.edu.cn/ 端口：80\n\nIPv4: http://ubuntu.buct.cn/ 端口：80\n\nIPv6: http://ubuntu.buct6.edu.cn/ 端口：80\n\n大连东软信息学院镜像服务器地址:\n\nhttp://mirrors.neusoft.edu.cn 端口：80\n\n使用方法：\n\n启动 Android SDK Manager ，打开主界面，依次选择『Tools』、『Options...』，\n弹出『Android SDK Manager - Settings』窗口；\n\n在『Android SDK Manager - Settings』窗口中，在『HTTP Proxy Server」和\n「HTTP Proxy Port』输入框内填入上面镜像服务器地址(不包含http:// )和端口，\n并且选中『Force https://... sources to be fetched using http://...』复选框。\n设置完成后单击『Close』按钮关闭『Android SDK Manager - Settings』窗口返回到主界面；\n\n依次选择『Packages』、『Reload』。\n</code></pre><hr>\n<h1 id=\"3-常用功能配置\"><a href=\"#3-常用功能配置\" class=\"headerlink\" title=\"3.常用功能配置\"></a>3.常用功能配置</h1><h2 id=\"3-1自动生成头文件-配置javah\"><a href=\"#3-1自动生成头文件-配置javah\" class=\"headerlink\" title=\"3.1自动生成头文件(配置javah)\"></a>3.1自动生成头文件(配置javah)</h2><pre><code>非Ant批量生成头文件,配置是为了简化命令行的操作.\n</code></pre><blockquote>\n<p>1.打开Eclipse  –&gt; 2.Run  –&gt; 3.External Tools  –&gt; 4.External Tool Configurations –&gt;<br>5.Program右击选择New –&gt; 6.Name:输入 Generate_C++_Header_File -&gt;7.Main栏目中Location:中选择下面的Variables<br>选择system_path –&gt; 8.Locaton输入框里会自动填上${system_path}–&gt; 9.修改内容为${system_path:javah} –&gt;  </p>\n<ol>\n<li>在Working Directory中选择Variables–&gt; 11.选择project_loc –&gt; 12.中间输入框会自动填写${project_loc}<br>13.修改内容为${_project_loc}/jni –&gt; 14.Arguments:输入内容<br>-classpath ${project_loc}\\bin\\classes;输入AndroidSDK目录\\platforms\\android-?\\android.jar -d ${project_loc}\\jni -jni ${java_type_name}   </li>\n</ol>\n</blockquote>\n<p>例如我的配置是: </p>\n<pre><code>Location:\n    ${system_path:javah}\nWorking Directory:\n    ${project_loc}\\jni\nArguments:\n-classpath ${project_loc}\\bin\\classes;D:\\eclipse\\my_plugins\\android-sdk-windows\\platforms\\android-17\\android.jar -d ${project_loc}\\jni -jni ${java_type_name}\n</code></pre><p><img src=\"/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_javah.png\" alt=\"javah\"></p>\n<p>使用方法:</p>\n<pre><code>点选中有native修饰的方法的类 --&gt; Run Generate_C++_Header_File  --&gt; 刷新项目.会在项目/jni目录下生成.h头文件.\n</code></pre><p><img src=\"/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_run.png\" alt=\"javah\"></p>\n<hr>\n<h2 id=\"3-2生成Sign签名-配置Javap\"><a href=\"#3-2生成Sign签名-配置Javap\" class=\"headerlink\" title=\"3.2生成Sign签名(配置Javap)\"></a>3.2生成Sign签名(配置Javap)</h2><pre><code>代替使用cmd命令行生成.提高效率\n见JNI\n</code></pre><blockquote>\n<p>1.打开Eclipse  –&gt; 2.Run  –&gt; 3.External Tools  –&gt; 4.External Tool Configurations –&gt;<br>5.Program右击选择New –&gt; 6.Name:输入javap -&gt;7.Main栏目中Location:中选择下面的Variables<br>选择system_path –&gt; 8.Locaton输入框里会自动填上${system_path}–&gt; 9.修改内容为${system_path:javap} –&gt;  </p>\n<ol>\n<li>在Working Directory中选择Variables–&gt; 11.选择project_loc –&gt; 12.中间输入框会自动填写${project_loc}<br>13.Arguments:输入内容: -classpath ${project_loc}\\bin\\classes -s -p ${java_type_name}</li>\n</ol>\n</blockquote>\n<p>如我的配置是:</p>\n<pre><code>Location:\n    ${system_path:javap}\nWorking Directory:\n    ${project_loc}\nArguments:\n    -classpath ${project_loc}\\bin\\classes -s -p ${java_type_name}\n</code></pre><p><img src=\"/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_javap.png\" alt=\"javah\"></p>\n<p>使用方法:</p>\n<pre><code>点选有 native 修饰的方法的类--&gt; Run javap\n\n在Console就会打印出javap运行在cmd命令行一样的效果.生成 Sign 签名 \n</code></pre><p><img src=\"/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_run.png\" alt=\"javah\"></p>\n<hr>\n<h2 id=\"3-3配置C-C-库\"><a href=\"#3-3配置C-C-库\" class=\"headerlink\" title=\"3.3配置C/C++库\"></a>3.3配置C/C++库</h2><pre><code>前提,已经有一个Android项目支持NDK.\n    即: 选择项目右击--&gt; Android Tool --&gt;Add Native Support..\n</code></pre><p>如果出现C++代码alt+/无提示可使用此方法解决.<br>或者需要引用其它.h资源库,也同样适用.</p>\n<blockquote>\n<p>1.选择C/C++视图 –&gt; 2.选中项目右击–&gt;Properties –&gt; 3.C/C++ General–&gt; Paths and Symbols<br>4.弹出的Paths and Symbols试图中–&gt; Add  –&gt; File system.. –&gt; 选择NDK的目录结构如:<br>NDK目录\\platforms\\android-?\\arch-arm\\usr\\include –&gt; Apply –OK </p>\n</blockquote>\n<p>如我的配置是:</p>\n<pre><code>D:\\eclipse\\my_plugins\\android-ndk-r10e\\platforms\\android-19\\arch-arm\\usr\\include\nD:\\eclipse\\my_plugins\\android-ndk-r10e\\sources\\cxx-stl\\stlport\\stlport      \n后者是原生C标准头文件库(代码提示,以及看原代码使用.)\n</code></pre><p><img src=\"/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/Properties_C-C++.png\" alt=\"javah\"></p>\n<hr>\n<p>End</p>\n","excerpt":"<style>\nh3 {\n    line-height: 1;\n    letter-spacing: 2px;\n    margin-top: 5px;\n}\nh6 {\n    line-height: 1;\n    letter-spacing: 2px;\n    margin-top: 5px;\n}\n</style>\n\n<p>目录</p>\n<ul>\n<li>1.下载集成开发环境</li>\n<li>2.安装配置环境</li>\n<li>3.常用功能配置<ul>\n<li>3.1自动生成头文件(配置javah)</li>\n<li>3.2生成Sign签名(配置Javap)</li>\n<li>3.3配置C/C++库</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"1-下载集成开发环境\"><a href=\"#1-下载集成开发环境\" class=\"headerlink\" title=\"1. 下载集成开发环境\"></a>1. 下载集成开发环境</h1><p>所需要的开发工具:<br><strong>Eclipse</strong> 下载地址:<a href=\"http://www.eclipse.org/downloads/\">http://www.eclipse.org/downloads/</a><br>    选择Eclipse的时候可以选择C/C++版本的,方便后续直接在Eclipse里编写C程序.当然也可以自己对Eclipse安装C/C++插件<br><strong>JDK</strong> 下载地址:<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br><strong>ADT</strong> 下载地址:<a href=\"http://developer.android.com/sdk/installing/installing-adt.html\">http://developer.android.com/sdk/installing/installing-adt.html</a><br><strong>Android SDK</strong> 下载地址:<a href=\"http://developer.android.com/sdk/index.html\">http://developer.android.com/sdk/index.html</a><br><strong>NDK</strong> 下载地址:<a href=\"http://developer.android.com/ndk/downloads/index.html\">http://developer.android.com/ndk/downloads/index.html</a><br>    也可以直接下载<strong>ADT Bundle</strong> 但官方已经找不到下载地址.可网上搜索或者我下面提供的一个地址可找到.<br>如果没有代理可能很多工具无法下载.这里提供一个<a href=\"http://www.androiddevtools.cn/\">Android开发人员工具集给大家</a>    </p>","more":"<h1 id=\"2-安装配置环境\"><a href=\"#2-安装配置环境\" class=\"headerlink\" title=\"2. 安装配置环境\"></a>2. 安装配置环境</h1><h2 id=\"2-1-安装JDK并设置环境变量到path中-如-javah工具等\"><a href=\"#2-1-安装JDK并设置环境变量到path中-如-javah工具等\" class=\"headerlink\" title=\"2.1. 安装JDK并设置环境变量到path中. 如:javah工具等\"></a>2.1. 安装JDK并设置环境变量到path中. 如:javah工具等</h2><h2 id=\"2-2-解压Eclipse到D盘目录如-D-eclipse\"><a href=\"#2-2-解压Eclipse到D盘目录如-D-eclipse\" class=\"headerlink\" title=\"2.2. 解压Eclipse到D盘目录如: D:/eclipse\"></a>2.2. 解压Eclipse到D盘目录如: D:/eclipse</h2><h2 id=\"2-3-为Eclipse安装ADT插件\"><a href=\"#2-3-为Eclipse安装ADT插件\" class=\"headerlink\" title=\"2.3. 为Eclipse安装ADT插件\"></a>2.3. 为Eclipse安装ADT插件</h2><p>方式一绿色安装: </p>\n<blockquote>\n<p>1.解压ADT到到某一个目录<br>2.单独复制<code>features</code>与<code>plugins</code>这两个文件夹到D:/eclipse/my_plugins/ADT/eclipse/目录下(新创建目录)<br>3.到D:/eclipse/dropins目录下新创建一个adt.link文件,里面编写内容:<code>path=D:/eclipse/my_plugins/ADT/eclipse/</code></p>\n</blockquote>\n<p>方式二直接安装:</p>\n<blockquote>\n<p>打开Eclpse–&gt;Help–&gt;Install New Software..–&gt;Add–&gt;Name:ADT–&gt;Archive–&gt;选择下载好的ADT.zip文件–&gt;OK–&gt;下方会加载显示出<br>Developer Tools –&gt;全选–&gt;Next–&gt;Next–&gt;选择上面的I accept the ….–&gt;Finish–&gt;进入自动安装状态–&gt;安装完后重启,即可.   </p>\n</blockquote>\n<p>Developer Tools其中全部包含有如下</p>\n<pre><code>Android DDMS\nAndroid Development Tool\nAndroid Hierarchy Viewer\nAndroid Native Developme\nAndroid Traceview\nTracer for OpenGL ES\n</code></pre><h2 id=\"2-4-解压Android-SDK到my-plugins目录下\"><a href=\"#2-4-解压Android-SDK到my-plugins目录下\" class=\"headerlink\" title=\"2.4. 解压Android SDK到my_plugins目录下.\"></a>2.4. 解压Android SDK到my_plugins目录下.</h2><blockquote>\n<p>配置一下环境变量到path中,方便以后的需要.如:draw9patch工具等等</p>\n</blockquote>\n<h2 id=\"2-5-安装NDK-如果是压缩包形式则-解压到my-plugins目录下\"><a href=\"#2-5-安装NDK-如果是压缩包形式则-解压到my-plugins目录下\" class=\"headerlink\" title=\"2.5. 安装NDK,如果是压缩包形式则,解压到my_plugins目录下.\"></a>2.5. 安装NDK,如果是压缩包形式则,解压到my_plugins目录下.</h2><blockquote>\n<p>如果是安装包(exe,其实是zip的自解压文件)也可安装到my_plugins目录</p>\n</blockquote>\n<h2 id=\"2-6-如果是下载的Eclipse是C-C-版本的-默认是C-C-视图-修改视图–-gt-点击右上角Open-perspective–-gt-选择java\"><a href=\"#2-6-如果是下载的Eclipse是C-C-版本的-默认是C-C-视图-修改视图–-gt-点击右上角Open-perspective–-gt-选择java\" class=\"headerlink\" title=\"2.6. 如果是下载的Eclipse是C/C++版本的,默认是C/C++视图.修改视图–&gt;点击右上角Open perspective–&gt;选择java\"></a>2.6. 如果是下载的Eclipse是C/C++版本的,默认是C/C++视图.修改视图–&gt;点击右上角Open perspective–&gt;选择java</h2><pre><code>如果安装ADT的时候使用的是方式二直接安装ADT.zip的方式,则安装完后无需要再配置C/C++环境,ADT已经包含了.\n</code></pre><blockquote>\n<p>如果非C/C++版本的则为Eclipse安装C/C++ 插件方法如下:</p>\n</blockquote>\n<pre><code>1.Eclipse里安装CDT--&gt;Help--&gt;Install new software--&gt;弹出窗口中--&gt;\n    Work with:输入--&gt;http://download.eclipse.org/tools/cdt/releases/galileo\n    --&gt;回车--&gt;等待一段时间后会在下面列表显示出CDT Main Features选中--&gt;Next--&gt;等待安装完后重启Eclipse即可.\n2.安装MinGW --- C/C++编译平台，下载后需要安装，http://www.mingw.org/download.shtml\n    同时选中g++、MinGW Make，同时设置环境变量，将%MinGW_HOME%\\bin设置到PATH中.\n3.安装gdb——C/C++调试平台，下载后安装，默认到MinGW_HOME就行。http://www.gnu.org/software/gdb/download\n</code></pre><h2 id=\"2-7-目录结构如下\"><a href=\"#2-7-目录结构如下\" class=\"headerlink\" title=\"2.7. 目录结构如下:\"></a>2.7. 目录结构如下:</h2><pre><code>D:\\eclipse\n    +---- ....\n    +----dropins\n    |    +-----adt.link\n    +----my_plugins\n        +-----android-sdk\n        |    +----....\n        +-----android-ndk-r10e\n        |    +----....\n        +-----MinGW\n        |    +----....\n        +-----ADT\n        |    +----eclipse\n        |        +-----features\n        |        |    +-----....\n        |        +-----plugins\n        |            +-----....            \n</code></pre><h2 id=\"2-8-配置环境变量\"><a href=\"#2-8-配置环境变量\" class=\"headerlink\" title=\"2.8. 配置环境变量:\"></a>2.8. 配置环境变量:</h2><pre><code>计算机右击--&gt;属性--&gt;高级系统设置--&gt;高级--&gt;环境变量--&gt;\n       新建--&gt;系统变量--&gt;变量名:java_home --&gt;变量值:jdk安装目录,如我的是:C:\\Program Files\\Java\\jdk1.8.0_20\n       系统变量--&gt;找到Path选中--&gt;编辑--&gt;光标定位到最尾部--&gt;输入--&gt;;%java_home%\\bin\n       新建--&gt;系统变量--&gt;变量名:android_sdk --&gt;变量值:androidSDK安装目录,如我的是:D:\\eclipse\\my_plugins\\android-sdk\n       系统变量--&gt;找到Path选中--&gt;编辑--&gt;光标定位到最尾部--&gt;输入--&gt;;%android_sdk%\\tools\n       新建--&gt;系统变量--&gt;变量名:MinGW_HOME --&gt;变量值:MinGW安装目录\\bin,如我的是:D:\\eclipse\\my_plugins\\MinGW;\n       系统变量--&gt;找到Path选中--&gt;编辑--&gt;光标定位到最尾部--&gt;输入--&gt;;%MinGW_HOME%\\bin\n</code></pre><h2 id=\"2-9-以上配置完成后打开eclipse-eclipse-exe运行IDE\"><a href=\"#2-9-以上配置完成后打开eclipse-eclipse-exe运行IDE\" class=\"headerlink\" title=\"2.9. 以上配置完成后打开eclipse/eclipse.exe运行IDE\"></a>2.9. 以上配置完成后打开eclipse/eclipse.exe运行IDE</h2><pre><code>配置AndroidSDK--&gt;Windows--&gt;Proferences--&gt;选择中Android--&gt;\n        SDK Location中选中D:\\eclipse\\my_plugins\\android-sdk目录即可\n\n配置AndroidNDK--&gt;Windows--&gt;Proferences--&gt;打开折叠的Android--&gt;\n        NDK--&gt;NDK Location中选中D:\\eclipse\\my_plugins\\android-ndk-r10e目录即可\n\n为了使CDT能够取用MinGW来进行编译的工作, 我们要回到 Eclipse 当中进行设定：\n        Window-&gt;Preferences-&gt;C/C++-&gt;New CDT project wizard-&gt;Makefile Project \n        找到 Binary Parser 取消 Elf Parser 改选 PE Windows Parser\n</code></pre><h2 id=\"2-10-打开Android-SDK-Manager下载SDK\"><a href=\"#2-10-打开Android-SDK-Manager下载SDK\" class=\"headerlink\" title=\"2.10. 打开Android SDK Manager下载SDK\"></a>2.10. 打开Android SDK Manager下载SDK</h2><blockquote>\n<p>如果速度慢可按照如下设置代理:</p>\n</blockquote>\n<pre><code>Android SDK在线更新镜像服务器\n\n中国科学院开源协会镜像站地址:\n\nIPV4/IPV6: http://mirrors.opencas.cn 端口：80\n\nIPV4/IPV6: http://mirrors.opencas.org 端口：80\n\nIPV4/IPV6: http://mirrors.opencas.ac.cn 端口：80\n\n上海GDG镜像服务器地址:\n\nhttp://sdk.gdgshanghai.com 端口：8000\n\n北京化工大学镜像服务器地址:\n\nIPv4: http://ubuntu.buct.edu.cn/ 端口：80\n\nIPv4: http://ubuntu.buct.cn/ 端口：80\n\nIPv6: http://ubuntu.buct6.edu.cn/ 端口：80\n\n大连东软信息学院镜像服务器地址:\n\nhttp://mirrors.neusoft.edu.cn 端口：80\n\n使用方法：\n\n启动 Android SDK Manager ，打开主界面，依次选择『Tools』、『Options...』，\n弹出『Android SDK Manager - Settings』窗口；\n\n在『Android SDK Manager - Settings』窗口中，在『HTTP Proxy Server」和\n「HTTP Proxy Port』输入框内填入上面镜像服务器地址(不包含http:// )和端口，\n并且选中『Force https://... sources to be fetched using http://...』复选框。\n设置完成后单击『Close』按钮关闭『Android SDK Manager - Settings』窗口返回到主界面；\n\n依次选择『Packages』、『Reload』。\n</code></pre><hr>\n<h1 id=\"3-常用功能配置\"><a href=\"#3-常用功能配置\" class=\"headerlink\" title=\"3.常用功能配置\"></a>3.常用功能配置</h1><h2 id=\"3-1自动生成头文件-配置javah\"><a href=\"#3-1自动生成头文件-配置javah\" class=\"headerlink\" title=\"3.1自动生成头文件(配置javah)\"></a>3.1自动生成头文件(配置javah)</h2><pre><code>非Ant批量生成头文件,配置是为了简化命令行的操作.\n</code></pre><blockquote>\n<p>1.打开Eclipse  –&gt; 2.Run  –&gt; 3.External Tools  –&gt; 4.External Tool Configurations –&gt;<br>5.Program右击选择New –&gt; 6.Name:输入 Generate_C++_Header_File -&gt;7.Main栏目中Location:中选择下面的Variables<br>选择system_path –&gt; 8.Locaton输入框里会自动填上${system_path}–&gt; 9.修改内容为${system_path:javah} –&gt;  </p>\n<ol>\n<li>在Working Directory中选择Variables–&gt; 11.选择project_loc –&gt; 12.中间输入框会自动填写${project_loc}<br>13.修改内容为${_project_loc}/jni –&gt; 14.Arguments:输入内容<br>-classpath ${project_loc}\\bin\\classes;输入AndroidSDK目录\\platforms\\android-?\\android.jar -d ${project_loc}\\jni -jni ${java_type_name}   </li>\n</ol>\n</blockquote>\n<p>例如我的配置是: </p>\n<pre><code>Location:\n    ${system_path:javah}\nWorking Directory:\n    ${project_loc}\\jni\nArguments:\n-classpath ${project_loc}\\bin\\classes;D:\\eclipse\\my_plugins\\android-sdk-windows\\platforms\\android-17\\android.jar -d ${project_loc}\\jni -jni ${java_type_name}\n</code></pre><p><img src=\"/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_javah.png\" alt=\"javah\"></p>\n<p>使用方法:</p>\n<pre><code>点选中有native修饰的方法的类 --&gt; Run Generate_C++_Header_File  --&gt; 刷新项目.会在项目/jni目录下生成.h头文件.\n</code></pre><p><img src=\"/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_run.png\" alt=\"javah\"></p>\n<hr>\n<h2 id=\"3-2生成Sign签名-配置Javap\"><a href=\"#3-2生成Sign签名-配置Javap\" class=\"headerlink\" title=\"3.2生成Sign签名(配置Javap)\"></a>3.2生成Sign签名(配置Javap)</h2><pre><code>代替使用cmd命令行生成.提高效率\n见JNI\n</code></pre><blockquote>\n<p>1.打开Eclipse  –&gt; 2.Run  –&gt; 3.External Tools  –&gt; 4.External Tool Configurations –&gt;<br>5.Program右击选择New –&gt; 6.Name:输入javap -&gt;7.Main栏目中Location:中选择下面的Variables<br>选择system_path –&gt; 8.Locaton输入框里会自动填上${system_path}–&gt; 9.修改内容为${system_path:javap} –&gt;  </p>\n<ol>\n<li>在Working Directory中选择Variables–&gt; 11.选择project_loc –&gt; 12.中间输入框会自动填写${project_loc}<br>13.Arguments:输入内容: -classpath ${project_loc}\\bin\\classes -s -p ${java_type_name}</li>\n</ol>\n</blockquote>\n<p>如我的配置是:</p>\n<pre><code>Location:\n    ${system_path:javap}\nWorking Directory:\n    ${project_loc}\nArguments:\n    -classpath ${project_loc}\\bin\\classes -s -p ${java_type_name}\n</code></pre><p><img src=\"/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_javap.png\" alt=\"javah\"></p>\n<p>使用方法:</p>\n<pre><code>点选有 native 修饰的方法的类--&gt; Run javap\n\n在Console就会打印出javap运行在cmd命令行一样的效果.生成 Sign 签名 \n</code></pre><p><img src=\"/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/external_tool_run.png\" alt=\"javah\"></p>\n<hr>\n<h2 id=\"3-3配置C-C-库\"><a href=\"#3-3配置C-C-库\" class=\"headerlink\" title=\"3.3配置C/C++库\"></a>3.3配置C/C++库</h2><pre><code>前提,已经有一个Android项目支持NDK.\n    即: 选择项目右击--&gt; Android Tool --&gt;Add Native Support..\n</code></pre><p>如果出现C++代码alt+/无提示可使用此方法解决.<br>或者需要引用其它.h资源库,也同样适用.</p>\n<blockquote>\n<p>1.选择C/C++视图 –&gt; 2.选中项目右击–&gt;Properties –&gt; 3.C/C++ General–&gt; Paths and Symbols<br>4.弹出的Paths and Symbols试图中–&gt; Add  –&gt; File system.. –&gt; 选择NDK的目录结构如:<br>NDK目录\\platforms\\android-?\\arch-arm\\usr\\include –&gt; Apply –OK </p>\n</blockquote>\n<p>如我的配置是:</p>\n<pre><code>D:\\eclipse\\my_plugins\\android-ndk-r10e\\platforms\\android-19\\arch-arm\\usr\\include\nD:\\eclipse\\my_plugins\\android-ndk-r10e\\sources\\cxx-stl\\stlport\\stlport      \n后者是原生C标准头文件库(代码提示,以及看原代码使用.)\n</code></pre><p><img src=\"/res/img/blog/2014/10/28/Android_NDK_IDE_environment_one/Properties_C-C++.png\" alt=\"javah\"></p>\n<hr>\n<p>End</p>"},{"layout":"post","title":"JNI","duoshuo":true,"date":"2014-10-31T16:00:00.000Z","SyntaxHihglighter":true,"shTheme":"shThemeMidnight","_content":"<style>\nh3 {\n    line-height: 1;\n    letter-spacing: 2px;\n    margin-top: 5px;\n}\nh6 {\n    line-height: 1;\n    letter-spacing: 2px;\n    margin-top: 5px;\n}\n</style>\n\n* 1.JNI简介\n* 2.最简单的Java调用C/C++代码的步骤\n* 3.在C/C++本地代码中访问Java代码简介\n\t* 3.1 JNIEnv 类型\n\t* 3.2 jobject\n\t* 3.3 jclass\n\t* 3.4 Java的类型在C/C++中的映射关系\n\n* 4.在C/C++本地代码中访问Java类中的属性与方法\n\t* 4.1 jfieldID/jmethodID\n\t* 4.2 Sign签名\n\t* 4.3 使用Javap命令来产生Sign签名\n\t* 4.4 取得Java属性/设定Java属性值\n\t* 4.5 Java方法的调用\n* 5.在C/C++本地代码中创建Java的对象\n\t* 5.1 NewObject\n\t* 5.2 AllocObject\n* 6.在C/C++本地代码中访问/创建Java的String字符串对象\n\t* 6.1 GetStringChars / GetStringUTFChars / ReleaseStringChars / ReleaseStringUTFChars\n\t* 6.2 GetStringCritical / ReleaseStringCritical\n\t* 6.3 GetStringRegion / GetStringUTFRegion\n\t* 6.4 字符串相关函数\n\n* 7.在C/C++本地代码中操作Java的数组对象\n\t* 7.1处理基本类型数组\n\t* 7.2处理对象类型数组\n* 8.全局引用/局部引用/弱全局引用\n\t* 8.1局部引用\n\t* 8.2全局引用\n\t* 8.2全局引用\n\t* 8.4关于引用的一些函数\n\n* 9.JNI优化\n\n<!-- more -->\n\n---\n\n# JNI简介\n\nJava是跨平台的语言,但是在有些时候仍然是有需要调用要地代码(这些代码通常是由C/C++编写).  \n原Sun公司现Oracle公司提供的JNI是Java平台的一个功能强大的接口.    \n这个JNI接口提供了Java与操作系统本地代码互相调用的功能.  \n\n---\n\n# 最简单的Java调用C/C++代码的步骤:\n\t\n\t1.首先在Java类中声明一个native的方法  \n\t2.使用javah命令生成包含native方法声明的C/C++头文件  \n\t3.按照生成的C/C++头文件来写C/C++源文件.  \n\t4.将C/C++源文件编译成动态连接库(DLL , OS)  \n\t5.把DLL文件加入到Path环境变量下.  \n\t6.Java类中加载DLL,然后调用声明的native方法  \n\n---\n\n# 在C/C++本地代码中访问Java代码简介\n\n在被调用的C/C++函数中也可以反过来访问Java程序中的类  \njavah工具生成的C/C++函数声明中,可以看到有头两个参数 **JNIEnv,jobject/jclass**\n\n<pre class=\"brush: java;  highlight: [4,3]\">\n\tpackage com.tu.hellojni.jni;\n\tpublic class Port {\n\t\tpublic native String sayHello();//非静态函数\n\t\tpublic static native void sayHi(String str);//静态函数\n\t}\n```\n\n```c\n\tJNIEXPORT jstring JNICALL Java_com_tu_hellojni_jni_Port_sayHello (JNIEnv *, jobject);\n\tJNIEXPORT void JNICALL Java_com_tu_hellojni_jni_Port_sayHi (JNIEnv *, jclass, jstring);\n```\n\n---\n\n## JNIEnv 类型\n\n> JNIEnv类型实际上代表了Java环境,通过这个JNIEnv*指针,就可以对Java端的代码进行操作.  \n\n\t例如,创建Java类的对象,调用Java对象的方法,镬取Java对象的属性等等.    \n\t\tJNIEnv的指针会被JNI传入到本地方法的实现函数中来对Java端的代码进行操作.    \n\n\tJNIEnv类中有很多函数可以用:  \n\n\tNewObject/NewString/New<TYPE>Array 创建一个对象,创建一个字符串, 创建一个对应类型的数组   \n\tGet/Set<TYPE>Field 获取/设置 某个类的属性     \n\tGet/SetStatic<TYPE>Field 获取/设置某个类的静态属性    \n\tCall<TYPE>Method/CallStatic<TYPE>Method 调用某一个类里的方法/调用某一个类的静态方法   \n\t等等的函数  \n\n---\n\n## jobject\n\n> jobject `指向Java对象的实例` , 非静态函数中时会有jobject参数.  \n> 这个jobject指向的是如: Port p = new Port; 所指向的就是p对象.  \n\n---\n\n##  jclass \n\t\t\n> jclass `指向的是代表那个类的class对象`. 静态函数中会有jclass参数.  \n> 这个jclass指向的是如: Port.sayHi(\"hi\"); 所指向的是Port.class对象.  \n\n> jclass的取得\n\n\t为了能够在C/C++中使用Java类.JNI.h头文件中专门定义了jclass类型来表示java中的Class类\n\nJNIEnv类中有如下几个简单的函数可以取得jclass:\n\n* jclass FindClass(const char* clsName); 通过完整的类名取得Class  \n* jclass GetObjectClass(jobject obj); 通过对象获取到class对象. 类似于 Java中的 Object中getClass方法  \n* jclass GetSuperClass(jclass obj); 通过当前jclass获取到父类的class  \n\n其中FindClass 会在classPath系统环境变量下寻找类.\n\n\t传入完整类名,注意包与包之间是用\"/\"而不是\".\"来分隔.\n\t如:\n\tjclass cls_string = env->FindClass(\"java/lang/String\");\n\n---\t\n\n## Java的类型在C/C++中的映射关系\n\n|Java类型|本地类型|JNI定义的别名\n|---|:---|---:|:---:|\n|int|long|jint/jsize\n|long|__int64|jlong\n|byte|signed char|jbyte\n|boolean|uncigned char|jboolean\n|char|unsigned short|jchar\n|short|short|jshort\n|float|float|jfloat\n|double|double|jdouble\n|object|_jobject*|jobject\n\n---\n\n# 在C/C++本地代码中访问Java类中的属性与方法\n\n## jfieldID/jmethodID\n\n> 在C/C++本地代码中访问Java端的代码,一个常见的应用就是获取类的属性和调用类的方法,为了  \n> 在C/C++中表示属性和方法,JNI在Jni.h头文件中定义了**jfieldID**,**JmethodID**类型来分别代表Java类的属性和方法.  \n\n\t我们在访问,或是设置Java属性的时候,首先就要先在本地代码获取代表该Java属性的jfieldID,\n\t然后才能在本地代码进行Java属性操作.\n\t同样的,我们需要呼叫Java端的方法时,也是需要取得代表该方法的jmethodID才能进行Java方法调用.\n\n\t使用JNIEnv的\n\t    GetFieldID/GetMethodID 取得属性/方法ID ( jfieldID / jmethodID)\n\t    GetStaticFieldID/GetStaticMethodID 取得静态属性/方法ID ( jfieldID / jmethodID )\n\n\t    来取得相应的jfieldID和jmethodID\n\n```c\n\tjfieldID GetFieldID(jclass clazz,const char* name,const char* sign);\n\tjfieldID GetStaticFieldID(jclass clazz,const char* name,const char* sign);\n\tjmethodID GetMethodID(jclass clazz,const char* name,const char* sign);\n\tjmethodID GetStaticMethodID(jclass clazz,const char* name,const char* sign);\n```\n\n\tGetMethodID也能取得构造函数的jmethodID. 创建一个Java对象时可以调用\n\t指定的构造方法,这个将在下面的时候做介绍.\n\t\t如:env->GetMethodID(data_Clazz,\"<init>\",\"()V\");\n\n\t类似Java的Reflect(反射机制)需要指定类跟属性/方法我哑取得相应的jfieldID跟jmethodID.\n\n\t方法参数: jclass clazz调用指定某个类. const char* name常量字符串,代表属性或者方法的名称.\n\t\tconst char* sign是当类中有两个重载方法时签名.\n\n\t例如: TestNative类中有两个重载方法:\n\n```java\n\t//Java\n\tpackage com.tu.hellojni.jni;\n\tpublic class TestNative {\n\t\tpublic void function(int i) {\n\t\t\tSystem.out.println(\"TestNative.function(int i)\" + i);\n\t\t}\n\t\tpublic void function(double d) {\n\t\t\tSystem.out.println(\"TestNative.function(double d)\" + d);\n\t\t}\n\t}\n```\n\n\t\t然后在C/C++代码中需要调用其中一个function方法的话.\n\t\t//首先取得要调用的方法所在的类\n\n\t\tjclass clazz_TestNative = env->FindClass(\"com/tu/hellojni/jni/TestNative\");\n\t\t//取得jmethodID之后才进行调用\n\t\tjmethodID id_func = env->GetMethodID(clazz_testNative,\"function\",\"??????\");\n\n\t\t但是到底取得的是\n\t\tvoid function(int i )还是\n\t\tvoid function(double d)的jmethodID呢?\n\t\t这就是sign的作用了.它用于指定要取得的属性/方法类型.\n\t\t这里的sign如果指定为\"(I)V\"则取回void function(int)的jmethodID\n\t\t\t\t如果指定为(D)V\"则取回void function(double)的jmethodID\n\n---\t\n\n## Sign签名\n\n\t\t用来表示要取得的属性/方法的类型\n\n|类型|相应的签名\n|---|---|\n|boolean|Z\n|byte|B\n|char|C\n|short|S\n|int|I\n|long|J\n|float|F\n|double|D\n|void|V\n|object|L用/分隔包的完整类名: Ljava/lang/String;\n|Array|[签名 如[I 整形数组 如[Ljava/lang/Object; 对象数组\n|Method|(参数1类型签名,参数2类型签名...)返回值类型签名 如:(ILjava/util/Date;[I)I\n\n---\t\n\n\n## 使用Javap命令来产生Sign签名\n\n\t\t从上面代码中的签名可以看出.如果是比较复杂的签名编写起来还是比较麻烦的.\n\t\t所以JDK也提供了一个工具javap来查看一个类的声明,其中就可以设置输出每个方法/属性的签名.\n\n\t\t语法: \n\t\t\tjavap -s -p [full Class Name]\n\t\t\t-s 表示输出签名信息\n\t\t\t-p 同-private,输出包含private 访问权限的成员信息\n\n\t\t使用方法:\n\t\t\t1.cmd定位到工程目录下.\n\t\t\t2.使用javap输入信息.\n\n<pre class=\"brush: shell;  highlight: []\">\n\t\tC:\\Users\\ComTu>cd E:\\ComTu_Design\\workspace\\workspace-Android\\HelloJ\n\t\tC:\\Users\\ComTu>E:\n\t\tE:\\ComTu_Design\\workspace\\workspace-Android\\HelloJNI>cd bin/classes\n\n\t\tE:\\ComTu_Design\\workspace\\workspace-Android\\HelloJNI\\bin\\classes>jav\n\t\tCompiled from \"Port.java\"\n\t\tpublic class com.tu.hellojni.jni.Port extends java.lang.Object{\n\t\tpublic int property;\n\t\t  Signature: I\n\t\tpublic com.tu.hellojni.jni.Port();\n\t\t  Signature: ()V\n\t\tpublic native java.lang.String sayHello();\n\t\t  Signature: ()Ljava/lang/String;\n\t\tpublic static native void sayHi(java.lang.String);\n\t\t  Signature: (Ljava/lang/String;)V\n\t\tpublic native void testSign();\n\t\t  Signature: ()V\n\t\tpublic void functionOverride();\n\t\t  Signature: ()V\n\t\tpublic void functionOverride(int);\n\t\t  Signature: (I)V\n\t\tpublic int function(int, java.util.Date, int[]);\n\t\t  Signature: (ILjava/util/Date;[I)I\n\t\t}\n```\n\n[在Eclipse中配置Javap快捷操作](/blog/2014/10/28/Android_NDK_IDE_environment_one.html)\n\n---\t\n\n\n## 取得Java属性/设定Java属性值\n\n\t\t取得了相应属性的 jfieldID 之后就可以用\n\n\t\tSet<TYPE>Field\n\t\tGet<TYPE>Field\n\n\t\tSetStatic<TYPE>Filed\n\t\tGetStatic<TYPE>File等函数来对Java属性进行操作了.  -->TYPE泛指各种数据类型.\n\t\n\t\t如: Boolean , Byte , Double , Float ,  Int  , Long , Short , Object\n\t\t\n\t\t怎样获取数组属性呢?\n\t\t\t可以使用GetObjectField来取得数组类型的属性.\n\t\t\n\t\t案例:\n\n```java\n\t//Java\n\tpublic class Port{\n\t\t/** C进行get/set成员变量 */\n\t\tpublic int property = 55;\n\n\t\t/** C进行Get/Set静态成员变量 */\n\t\tpublic static boolean isShow = false;\n\t}\t\n```\n\n```c\n\t//C\n\tjclass port_clazz = env->GetObjectClass(obj);\n\t//获取java成员变量\n\t//public int property;\n\tjfieldID fieldId_prop = env->GetFieldID(port_clazz, \"property\", \"I\");\n\tjint prop = env->GetIntField(obj, fieldId_prop);//取值\n\t__android_log_print(ANDROID_LOG_INFO, \"JNIMsg\", \"\\n c-int: %d\", prop);\n\t//给java成员变量赋值\n\tenv->SetIntField(obj, fieldId_prop, 100L);//赋值100L表示c中的100常整数类型.\n\t\n\t//获取静态变量\n\tjfieldID fieldId_isShow = env->GetStaticFieldID(port_clazz, \"isShow\", \"Z\");\n\tjboolean jb = env->GetStaticBooleanField(port_clazz, fieldId_isShow);\n\t__android_log_print(ANDROID_LOG_INFO, \"JNIMsg\", \"\\n c-boolean: %d\", jb);\n\tjboolean b = !jb;\n\tenv->SetStaticBooleanField(port_clazz, fieldId_isShow, b);//给静态变量赋值\n\n```\n\n---\t\n\n\n## Java方法的调用\n\t\t\n\t\tJNIEnv 提供了众多的Call<TYPE>Method 跟 CallStatic<TYPT>Method,还有\n\t\tCallNonvirtual<TYPE>Method函数.需要通过 GetMethodID 取得相应方法的 jmethodID来\n\t\t传入到函数参数中.\n\n\t\t调用实例方法的三种形式:\n\t\t\t//第一种:最常用的方式\n\t\t\tCall<TYPE>Method(jobject obj,jmethodID id,...); \n\t\t\t//第二种:当调用这个函数的时候有一个指向参数表的va_list变量时使用的_很少使用到这种方式\n\t\t\tCall<TYPE>MethodV(jobject obj,jmethodID id, va_list lst);\n\t\t\t//第三种:当调用这个函数的时候有一个指向jvalue或者jvalue数组的指针时用的\n\t\t\tCall<TYPE>MethodA(jobject obj,jmethodID id, jvalue * v);\n\n\t\t调用静态方法的三种形式:\n\t\t\tCallStatic<TYPE>Method(jclass class , jmethodID id, ...);\n\t\t\tCallStatic<TYPE>MethodV(jclass class , jmethodID id, va_list lst);\n\t\t\tCallStatic<TYPE>MethodA(jclass class , jmethodID id, jvalue * v);\n\n\t\t第三种中的 jvalue 这个类型是一个联合体.\n\t\t源代码jni.h中:\n\n```c\n\t//C\n\t\t\ttypedef union jvalue {\n\t\t\t    jboolean    z;\n\t\t\t    jbyte       b;\n\t\t\t    jchar       c;\n\t\t\t    jshort      s;\n\t\t\t    jint        i;\n\t\t\t    jlong       j;\n\t\t\t    jfloat      f;\n\t\t\t    jdouble     d;\n\t\t\t    jobject     l;\n\t\t\t} jvalue;\n```\n\t\t\n\t\t案例: \n\n```java\n\t//Java\n\tpublic class Port {\n\t\t/** C调用重载成员函数_非静态方法 */\n\t\tpublic void functionOverride() {\n\t\t\tSystem.out.println(\"Port.functionOverride()--参数:property>\" + property + \"--isShow>\" + isShow);\n\t\t}\n\n\t\t/** C调用重载成员函数_非静态方法 */\n\t\tpublic void functionOverride(int i) {\n\t\t\tSystem.out.println(\"Port.functionOverride(int i)-->\" + i + \"--参数:property>\" + property + \"--isShow>\" + isShow);\n\t\t}\n\n\t\t/** C调用多参数签名_非静态方法 */\n\t\tpublic int function(int foo, Date date, int[] arr) {\n\t\t\tSystem.out.println(\"Port.function()foo>\" + foo + \"===date>\" + date + \"==arr>\" + arr);\n\t\t\treturn foo;\n\t\t}\n\n\t\t/** C调用成员函数 的三种形式 */\n\t\tpublic boolean function(int i, double d, char c) {\n\t\t\tSystem.out.println(\"===>Port.function()i>\" + i + \"===d>\" + d + \"==c>\" + c);\n\t\t\treturn true;\n\t\t}\n\t}\n```\n\n```c\n\t//C\n\tjclass port_clazz = env->GetObjectClass(obj);\n\t//调用调用Java里的Port类的void functionOverride()重载函数_非静态函数\n\tjmethodID id_func1 = env->GetMethodID(port_clazz, \"functionOverride\", \"()V\");\n\tenv->CallVoidMethod(obj, id_func1);//调用\n\n\t//调用调用java里的Port类的void functionOverride(int )C调用重载函数_非静态函数\n\tjmethodID id_func2 = env->GetMethodID(port_clazz, \"functionOverride\", \"(I)V\");\n\tenv->CallVoidMethod(obj, id_func2, 1L);//调用,并需要一个参数\n\n\t//调用调用java里的Port类的public int function(int foo, Date data, int[] arr) -->(ILjava/util/Date;[I)I\n\tjmethodID methodID_func = env->GetMethodID(port_clazz, \"function\", \"(ILjava/util/Date;[I)I\");\n\tenv->CallIntMethod(obj, methodID_func, 100L, NULL, NULL);//调用Port的function方法,后面跟随三个参数\n\n\n\tjmethodID methodID_func_IDC = env->GetMethodID(port_clazz, \"function\", \"(IDC)Z\");\n\t//调用实例方法的第一种形式: Call&lt;TYPE>Method(jobject obj,jmethodID id,...);\n\tenv->CallBooleanMethod(obj, methodID_func_IDC, 100L, 3.14, L'1');// 100L长整型,3.14double, L'1'宽字符\n\n\t//调用实例方法的第三种形式:\n\tjvalue * j = new jvalue[3];\n\tj[0].i = 50L;\n\tj[1].d = 3.1415;\n\tj[2].c = L'5';\n\tenv->CallBooleanMethodA(obj, methodID_func_IDC, j);\n\tdelete[] j;//删除回收\n```\n\n\t\t调用一个对象的父类的方法:\n\t\t\t在JNI中定义的 CallNonvirtual<TYPE>Method 就能够实现子类对象调用父类方法的功能.\n\t\t\t\n\t\t\t要使用它,首先要取得父类及要调用的父类方法的 jmethodID,方可.\n\t\t\t\n\t\t案例:\n\n```java\n\t//Java\n\tpublic class Father {\n\t\tpublic void function() {\n\t\t\tSystem.out.println(\"===>Father.function()\");\n\t\t}\n\t}\n\n\tpublic class Child extends Father {\n\n\t\t@Override\n\t\tpublic void function() {\n\t\t\tSystem.out.println(\"===>Child.function()\");\n\t\t}\n\t}\n\n\tpublic class Port {\n\t\t/** C调用_子父类关系类 */\n\t\tpublic Father father = new Child();\t\n\t}\n```\n\t\n```c\n\t//C\n\t//调用子父类的成员变量方法:\n\tjfieldID id_father = env->GetFieldID(port_clazz, \"father\", \"Lcom/tu/hellojni/jni/Father;\");\n\tjobject father = env->GetObjectField(obj, id_father);\n\n\tjclass clazz_Father = env->FindClass(\"com/tu/hellojni/jni/Father\");\n\tjmethodID id_father_function = env->GetMethodID(clazz_Father, \"function\", \"()V\");\n\n\tenv->CallVoidMethod(father, id_father_function);\n\n\t//\t以上代码相当于:\n\t//  Port port = new Port();\n\t//\tFather f = port.father; //-->father成员变量是:public Father father = new Child();\n\t//\tf.function();\n\t//运行结果: ===>Child.function()\n\n\t//\t调用父类的方法\n\tenv->CallNonvirtualVoidMethod(father, clazz_Father, id_father_function);\n\t//运行结果:===>Father.function()\n```\n\n---\t\n\n\n# 在C/C++本地代码中创建Java的对象\n\t\n\t创建Java对象有两种方式. (NewObject / AllocObject)\n\t\n## 5.1 NewObject\n\n> 使用函数 NewObject 可以用来创建对象  \n\t\n\tjobject NewObject(jclass clazz , jmethodID methodID,...)\n\n\tGetMethodID能够取得构造方法的 jmethodID .如果传入的要取得的方法名称设定为\"<init>\"就能够取得构造方法.  \n\t构造方法的方法返回值类型的签名始终为Void.\n\n\t\t案例:\n\n```c\n\t//C\n\t//创建一个日期类Date对象并调用getTime方法\n\tjclass clazz_date = env->FindClass(\"java/util/Date\");\n\tjmethodID mid_date = env->GetMethodID(clazz_date,\"&lt;init>\",\"()V\");\n\tjobject now = env->NewObject(clazz_date,mid_date);\n\n\tjmethodID jmethodID_getTime = env->GetMethodID(clazz_date,\"getTime\",\"()J\");\n\tjlong time = env->CallLongMethod(now,jmethodID_getTime);\n\n\t__android_log_print(ANDROID_LOG_INFO, \"JNIMsg\", \"\\n c-创建Date对象并调用getTime方法: %d\", time);\n```\n\n---\n\n## 5.2 AllocObject\n\n> 使用 AllocObject 方式创建对象(创建但未初始化,使用比较少.)    \n> 使用函数**AllocObject**可以根据传入的jclass创建一个Java对象,但是他的状态是非初始化的,  \n> 在使用这个对象之前绝对要用 **CallNonvirtualVoidMethod** 来调用该jclass的建构函数.  \n> 这样可以延迟构造函数的调用.这个部分用的很少.\n\t\n\t案例: \n\n```java\n\t//Java\n\tpublic class Port {\n\t\t/** C进行创建并初始化 */\n\t\tpublic static String STATIC_STR;\n\t}\n```\n\n```c\n\t//C\n\t//---> AllocObject 创建延迟初始化的对象\n\tjclass clazz_str = env->FindClass(\"java/lang/String\");\n\tjmethodID methodID_str = env->GetMethodID(clazz_str, \"&lt;init>\", \"([C)V\");//通过字符数组构造函数\n\n\t//预先创建一个没有初始化的字符串\n\tjobject string = env->AllocObject(clazz_str);\n\n\t//创建一个5个元素的字符数组,然后以'c','o','m','t','u'赋值\n\tjcharArray arg = env->NewCharArray(5);\n\tjchar buf[5];\n\tbuf[0] = 67;\n\tbuf[1] = 'o';\n\tbuf[2] = 'm';\n\tbuf[3] = 't';\n\tbuf[4] = 'u';\n\tenv->SetCharArrayRegion(arg, 0, 5, buf);\n\n\t//呼叫构建函数\n\tenv->CallNonvirtualVoidMethod(string, clazz_str, methodID_str, arg);\n\n\tjclass clazz_this = env->GetObjectClass(obj);\n\n\tjfieldID fieldID_str = env->GetStaticFieldID(clazz_this, \"STATIC_STR\", \"Ljava/lang/String;\");\n\tenv->SetStaticObjectField(clazz_this, fieldID_str, string);//给java静态变量赋值\n```\n\n---\t\n\n\n# 在C/C++本地代码中访问/创建Java的String字符串对象\n\n\tJava字符串<-->C/C++字符串\n\n\t\t在Java中,使用的字符串String对象是Unicode(UTF-16)码, \n\t\t\t即每个字符不论是中文英文还是符号,一个字符总是占两个字节.\n\n\tJava通过JNI接口可以将Java的字符串转换到C/C++中的宽字符串(wchar_t*),\n\t或者传回一个UTF-8的字符串(char*)到C/C++. \n\t返过来,C/C++可以通过一个宽字符串,或者一个UTF-8编码的字符串来创建一个Java端的String对象.\n\n\n\t获取Java中的String对象有如下几种函数:\n\t\n## GetStringChars / GetStringUTFChars / ReleaseStringChars / ReleaseStringUTFChars .\n\n\t\t\tconst jchar* GetStringChars (jstring str , jboolean* copied)\n\t\t\t\t可以取得UTF-16编码的宽字符串(jchar*)\n\t\t\t\t开新内存,然后把Java中的String拷贝到这个内存中,然后返回指向这个内存地址的指针.\n\n\t\t\tconst char* GetStringUTFChars (jstring str , jboolean* copied)\n\t\t\t\t可以取得UTF-8编码的字符串(char*)\n\t\t\t\t直接返回指向Java中String的内存的指针,这个时候\n\t\t\t\t千万不要改变这个内存的内容,这将破坏String在Java中始终是常量这个原则.\n\n\t\t\t第二个参数jboolean* copied是用来标示是否对Java的String对象进行拷贝的.\n\t\t\t如果传入的这个jboolean指针不是 NULL ,则他会给该指针所指向的内存传入 JNI_TRUE\n\t\t\t或 JNI_FALSE 指示是否进行拷贝.\n\t\t\t传入 NULL 表示不关心是否拷贝字符串,它就不会被jboolean* 指向的内存赋值\n\n\t\t\t使用了如上这两个函数取得的字串,在不使用的时候,要使用\n\t\t\tReleaseStringChars / ReleaseStringUTFChars 来释放拷贝的内存,或者释放对Java的String对象的引用.\n\t\t\n\t\t\tReleaseStringChars (jstring jstr, const jchar* str); \n\t\t\tReleaseStringUTFChars (jstring jstr, const char* str);\n\t\t\n\t\t\t\t第一个参数指定一个jstring变量,即要释放的本地字符串的来源.\n\t\t\t\t第二个参数就是要释放的本地字符串.\n\n```c\n\tvoid function(JNIEnv * env, jobject obj) {\n\t\t//-------- GetStringChars / ReleaseStringChars / NewString -------------\n\t\t//获取jmethodID\n\t\tjfieldID jfie_msg = env->GetFieldID(env->GetObjectClass(obj), \"message\", \"Ljava/lang/String;\");\n\t\t//获取到String属性\n\t\tjstring j_msg = (jstring) env->GetObjectField(obj, jfie_msg);\n\t\t//UTF-16编码的宽字符串(jchar*) const jchar* == const wchar_t*\n\t\t//\tJava-String->C-jchar*转换\n\t\tconst jchar* jstr = env->GetStringChars(j_msg, NULL);//j_msg不能为null否则会抛异常\n\n\t\t//---------拷贝数据start--------------\n\n\t\tjsize size = env->GetStringLength(j_msg);\n\n\t\t//转换成宽字符串\n\t\t//\twstring wstr((const wchar_t*) jstr);\n\n\t\tjchar* jstrTemp = (jchar*) jstr;\n\t\t//---------拷贝数据end--------------\n\n\t\t//回收本地字符串 _释放指针\n\t\tenv->ReleaseStringChars(j_msg, jstr);\n\n\t\t//---------处理数据start--------------\n\t\t//倒序函数迭代字符串\n\t\t//\tstd::reverse(wstr.begin(), wstr.end());\n\t\t//---------处理数据end--------------\n\n\t\t//创建String对象并赋予Port的message变量中.\n\t\t//\tjstring j_new_str = env->NewString((const jchar*) wstr.c_str(), (jint) wstr.size());\n\t\tjstring j_new_str = env->NewString(jstrTemp, size);\n\t\t//赋值给Java的Port的message变量\n\t\tenv->SetObjectField(obj, jfie_msg, j_new_str);\n\t}\n```\t\n\n```c\n\t//拷贝\n\tchar* cc2c(const char* str) {\n\t\tchar* strtemp = new char[strlen(str) + 1];\n\t\tstrcpy(strtemp, str);\n\t\treturn strtemp;\n\t}\n\n\t//简单倒序算法\n\tchar* myReverse(const char* str) {\n\t\tchar* strtemp = cc2c(str);\n\t\tint len = strlen(strtemp);\n\t\tchar t;\n\t\tfor (int i = 0; i < len / 2; i++) {\n\t\t\tt = strtemp[i];\n\t\t\tstrtemp[i] = strtemp[len - i - 1];\n\t\t\tstrtemp[len - i - 1] = t;\n\t\t}\n\t\treturn strtemp;\n\t}\n\tvoid function(JNIEnv * env, jobject obj) {\n\t\t//------------------ GetStringUTFChars / ReleaseStringUTFChars / NewStringUTF -------\n\t\tjfieldID jfie_msg = env->GetFieldID(env->GetObjectClass(obj), \"message\", \"Ljava/lang/String;\");\n\t\tjstring j_msg = (jstring) env->GetObjectField(obj, jfie_msg);\n\t\t//\tJava-String->C-jchar*转换\n\t\tconst char* str = env->GetStringUTFChars(j_msg, NULL);\n\t\tchar* strtemp = myReverse(str);\n\t\tenv->ReleaseStringUTFChars(j_msg, str);\n\t\tjstring j_new_str = env->NewStringUTF(strtemp);\n\t\tdelete[] strtemp;\n\t\tenv->SetObjectField(obj, jfie_msg, j_new_str);\n\t}\n```\n\n## GetStringCritical / ReleaseStringCritical .\n\t\t\t\n\t\t\t为了增加直接传回指向Java字符串的指针的可能性(而不是拷贝),JDK1.2之后出来新的函数\n\n\t\t\tconst jchar* GetStringCritical (jstring str , jboolean* copied)\n\t\t\tvoid ReleaseStringCritical (jstring jstr,const jchar* str);\n\n\t\t\t注意:\n\t\t\t在 GetStringCritical / ReleaseStringCritical 方法之间是一个关键区.\n\t\t\t在这关键区之中绝对不能呼叫(call)JNI的其它函数,会造成当前线程中断或是会让当前线程\n\t\t\t等待的任何本地代码.否则将造成关键区代码执行期间垃圾回收器停止动作,任何触发垃圾\n\t\t\t回收的线程也会暂停.其它的触发垃圾回收器的线程不能前进,直到当前线程结束而激活垃圾回收器.\n\n\t\t\t在关键区中千万不要出现中断操作,或者在JVM中分配任何新对象.否则会造成JVM死锁\n\n\t\t\t虽说这个函数会增加直接传回指向Java字符串的指针的可能性,不过还是会根据情况传回拷贝过的字符串.\n\n\t\t\t不支持 GetStringUTFCritical ,没有这样一个函数,由于Java字符串用的是UTF16,要转\n\t\t\t成UTF8编码的字符串始终需要进行一次拷贝,所以没有这样的函数.\n\n```c\n\t//--------------- GetStringCritical / ReleaseStringCritical ----------\n\tvoid function(JNIEnv * env, jobject obj) {\n\t\t// 基本与 GetStringChars 一样\n\t\tjfieldID jfie_msg = env->GetFieldID(env->GetObjectClass(obj), \"message\", \"Ljava/lang/String;\");\n\t\tjstring j_msg = (jstring) env->GetObjectField(obj, jfie_msg);\n\t\t//\tJava-String->C-jchar*转换\n\t\tconst jchar* jstr = env->GetStringCritical(j_msg, NULL);//jstr_msg不能为null复杂会抛异常\n\t\twstring wstr((const wchar_t*) jstr);\n\t\tenv->ReleaseStringCritical(j_msg, jstr);\n\t\tstd::reverse(wstr.begin(), wstr.end());\n\t\tjstring j_new_str = env->NewString((const jchar*) wstr.c_str(), (jint) wstr.size());\n\t\tenv->SetObjectField(obj, jfie_msg, j_new_str);\n\t}\n```\n\n## GetStringRegion / GetStringUTFRegion .\n\t\t\t\n\t\t\tJava 1.2之后出来的函数,这个函数的动作,是把Java字符串的内容直接拷贝到C/C++\n\t\t\t的字符数组中,在呼叫这个函数之前必须有一个C/C++分配出来的字符串,然后传入到\n\t\t\t这个函数中进行字符串的拷贝.\n\n\t\t\t由于C/C++中分配内存开销相对小,而且Java中的String内容拷贝的开销可以忽略,\n\t\t\t更好的一点是此函数不分配内存,不会抛OutOfMemoryError异常.\n\n\t\t\t//拷贝Java字符串并以UTF-8编码传入bufer\n\t\t\tGetStringUTFRegion(jstring str , jsize start , jsize len , char* buffer);\n\n\t\t\t//拷贝Java字符串并以UTF-16编码传入buffer\n\t\t\tGetStringRegion(jstring str, jsize start , jsize len, jchar* buffer);\n\n\t\t\tJava的String str:\n\t\t\t\tA  B  C  D  E  F  G  H  I  J  K  L  M  N\n\t\t\t\t         ↑― start = 3  ↓  len = 10 ―↑ \n\t\t\t\tenv->GetStringRegion(str,3,10,buffer);//copy至buffer\n\n```c\n\t//---------------- GetStringRegion / NewString ----------------\n\tvoid function(JNIEnv * env, jobject obj) {\n\t\tjfieldID jfie_msg = env->GetFieldID(env->GetObjectClass(obj), \"message\", \"Ljava/lang/String;\");\n\t\tjstring j_msg = (jstring) env->GetObjectField(obj, jfie_msg);\n\n\t\tjsize jm_len = env->GetStringLength(j_msg);\n\n\t\t//创建一个数组长度为message字符串的长度+1(结尾符)\n\t\tjchar* jstr = new jchar[jm_len + 1];\n\t\tjstr[jm_len] = L'\\0';//C++中都会有结尾符,不然会出现乱码.\n\t\t//拷贝到字符数组里\n\t\tenv->GetStringRegion(j_msg, 0, jm_len, jstr);\n\t\t//\twstring wstr((const wchar_t*) jstr);\n\n\t\t//std::reverse(wstr.begin(), wstr.end());\n\t\tjstring j_new_str = env->NewString((const jchar*) jstr,jm_len);\n\n\t\tenv->SetObjectField(obj, jfie_msg, j_new_str);\n\t\t//删除不必要的内存\n\t\tdelete[] jstr;\n\t}\n```\n\n\n```c\t\n\t//---------------- GetStringUTFRegion / NewStringUTF ----------------\n\tvoid function(JNIEnv * env, jobject obj) {\n\t\tjfieldID jfie_msg = env->GetFieldID(env->GetObjectClass(obj), \"message\", \"Ljava/lang/String;\");\n\t\tjstring j_msg = (jstring) env->GetObjectField(obj, jfie_msg);\n\n\t\tjsize jm_len = env->GetStringLength(j_msg);\n\n\t\tchar* buffer  = new char[jm_len + 1];\n\t\tenv->GetStringUTFRegion(j_msg, 0, jm_len, buffer);\n\t\t//\twstring wstr((const wchar_t*) jstr);\n\n\t\t//std::reverse(wstr.begin(), wstr.end());\n\t\tjstring j_new_str = env->NewStringUTF((const char*) buffer);\n\n\t\tenv->SetObjectField(obj, jfie_msg, j_new_str);\n\t\tdelete[] buffer;\n\t}\n```\n\n## 字符串相关函数\n\t\t\n\t\tjstring NewString(const jchar* str, jsize len); //创建一个字符串\n\t\tjstring NewStringUTF(const char* str); //创建一个UTF8的字符串\n\t\tjsize GetStringLength(jstring str);// 字符串的长度\n\t\tjsize GetStringUTFLength(jstring str);//UTF会占用多少个字节\n\n\n\n# 7.在C/C++本地代码中操作Java的数组对象\n\t\n\t\t1.基本类型的数组\n\t\t2.对象类型(Objcet[])的数组\n\n\t\t一个能通用于两种不同类型数组的函数\n\t\tGetArrayLength(jarray aray);//获取数组长度\n\n## 处理基本类型数组\n\t\t\n\t\tGet<TYPE>ArrayElements(<TYPE>Array arr, jboolean* iscopied);\n\t\t\t这类函数可以把Java基本类型的数组转换到C/C++中的数组,有两种处理方式,\n\t\t\t1.拷贝一份传回本地代码,\n\t\t\t2.把指向Java数组的指针直接传回到本地代码.\n\t\t\t处理完本地代码的数组后,通过 Release<TYPE>ArrayElements来释放数组.\n\n\t\tRelease<TYPE>ArrayElements(<TYPE>Array arr,<TYPE>* array,jint mode)\n\t\t\t用这个函数可以选择将如何处理Java跟C++的数组,是提交,撤消,内存释放,还是不释放等.\n\t\t\tmode可以取下面的值:\n\t\t\t0          -> 对Java的数组进行更新并释放C/C++的数组.\n\t\t\tJNI_COMMIT -> 对Java的数组进行更新但不释放C/C++的数组.\n\t\t\tJNI_ABORT  -> 对Java的数组不进行更新,释放C/C++的数组.\n\t\t\n\t\tGetPrimitiveArrayCritical(jarray arr , jboolean* isCopied);\n\t\tReleasePrimitiveArrayCritical(jarray arr , void* array,jint mode);\n\t\t\t也是JDK1.2出来的,为了增加直接传回指向Java数组的指针而加入的函数,同样的,\n\t\t\t也会有同 GetStringCritical 的死锁的问题.\n\t\t\n\t\tGet<TYPE>ArrayRegion(<TYPE>Array arr, jsize start , jsize len , <TYPE>* buffere);\n\t\t\t在C/C++预先开辟一段内存,然后把Java基本类型的数组拷贝到这段内存中.\n\t\t\t跟 GetStringRegion原理类似\n\t\t\n\t\tSet<TYPE>ArrayRegion(<TYPE>Array arr , jsize start, jsize len , const <TYPE>* buffer);\n\t\t\t把Java基本类型的数组中的指定范围的元素用C/C++的数组中的元素来赋值.\n\t\t\n\t\t<TYPE>Array New<TYPE>Array(jsize sz)\n\t\t\t指定一个长度然后返回相应Java基本类型的数组.\n\n\n```java\n\t//java\n\t/** C调用Get/Set成员变量 数组 */\n\tpublic int[] ints = new int[] { 67, 111, 109, 116, 117 };\n```\n\n```c\n\t//c\n\t//---- GetIntArrayElements / ReleaseIntArrayElements / ReleaseIntArrayElements / ReleaseIntArrayElements ----\n\t//基本数据类型数组\n\tvoid function(JNIEnv * env, jobject obj) {\n\t\t//取得属性Id\n\t\tjfieldID fieldId = env->GetFieldID(env->GetObjectClass(obj), \"ints\", \"[I\");\n\t\t//通过属性id取得数组变量\n\t\tjintArray ints = (jintArray) env->GetObjectField(obj, fieldId);\n\n\t\t//转取得本地数组\n\t\tjint* int_arr = env->GetIntArrayElements(ints, NULL);\n\t\tjsize len = env->GetArrayLength(ints);\n\n\t\t//C基本库 . 对数组进行排序,迭代器需要两个参数,第一个是array首地址,第二个是array尾地址\n\t\tstd::sort(int_arr, int_arr + len);\n\n\t\tfor (jsize i = 0; i &lt; len; ++i) {\n\t\t\t__android_log_print(ANDROID_LOG_INFO, \"JNIMsg\", \"\\n c-intArray[]: %d\", int_arr[i]);\n\t\t}\n\n\t\t//对Java的数组进行更新并释放C/C++的数组.\n\t\tenv->ReleaseIntArrayElements(ints, int_arr, 0);\n\t\t//对Java的数组进行更新但不释放C/C++的数组.\n\t\t//\tenv->ReleaseIntArrayElements(ints, int_arr, JNI_COMMIT);\n\t\t//对Java的数组不进行更新,释放C/C++的数组.\n\t\t//\tenv->ReleaseIntArrayElements(ints, int_arr, JNI_ABORT);\n\t}\n```\n\n\n## 处理对象类型数组\n\t\t\n\t\tJNI没有提供直接把Java的对象类型数组(Object[])直接传到C++中的jobject[]数组的函数.\n\t\t而是直接通过 Get/SetObjectArrayElement 这样的函数来对Java的Object[]数组进行操作.\n\n\n\t\t使用上述的函数也不用释放任何资源.\n\n\t\tNewObjectArray 可以通过指定长度跟初始值来创建某个类的数组.\n\n```c\n\t//c\n\t// ----- GetObjectArrayElement /  NewObjectArray / SetObjectArrayElement ------\n\t//对象数据类型数组\n\tvoid function(JNIEnv * env, jobject obj) {\n\t\tjfieldID fieldStrId = env->GetFieldID(jclazz, \"strs\", \"[Ljava/lang/String;\");\n\t\t//获取java的对象数组\n\t\tjobjectArray str_arr = (jobjectArray) env->GetObjectField(obj, fieldStrId);\n\t\tint lenStr = env->GetArrayLength(str_arr);\n\t\tprintf(\"\\n c-stringArray :\");\n\t\tint i = 0;\n\t\t//读Java的以String数组\n\t\tfor (i = 0; i < lenStr; i++) {\n\t\t\tjobject obj = env->GetObjectArrayElement(str_arr, i);\n\t\t\tjstring str = (jstring) obj;\n\n\t\t\tconst char * szStr = env->GetStringUTFChars(str, 0);\n\t\t\tprintf(\" %d-%s \", i, szStr);\n\t\t\t__android_log_print(ANDROID_LOG_INFO, \"JNIMsg\", \"\\n c-StringArray[]: %d - %s\", i, szStr);\n\t\t\tconst jchar * chars = (const jchar *) szStr;\n\t\t\tenv->ReleaseStringChars(str, chars);\n\t\t}\n\t\t//创建一个对象数组 , 为Java对象数组赋值并更新.\n\t\tjstring str;\n\t\tjobjectArray args = 0;\n\t\tjsize size = 7;\n\t\tchar* sa[] = { \"Hello,\", \"world!\", \"c\", \"o\", \"m\", \"t\", \"u\" };\n\t\tint j = 0;\n\t\tjclass objClass = env->FindClass(\"java/lang/String\");\n\t\targs = env->NewObjectArray(size, objClass, 0);\n\t\tfor (j = 0; j < size; j++) {\n\t\t\tstr = env->NewStringUTF(sa[j]);\n\t\t\tenv->SetObjectArrayElement(args, j, str);\n\t\t\tif (j < lenStr)//给Java数组赋数组下标越界抛异常 ,\n\t\t\t\tenv->SetObjectArrayElement(str_arr, j, str);//自动更新Java类中的strs对象数组\n\t\t}\n\t\t//\t不需要释放任何资源.\n\t\t//args 新创建的 String 数组.\n\t}\n```\n\n\n# 8.全局引用/局部引用/弱全局引用\n\t\n\t从Java虚拟机创建的对象传到本地C/C++代码时会产生引用.根据Java的垃圾回收机制,只要有引用\n\t存在就不会触发该引用指向的Java对象的垃圾回收.\n\n\t这些引用在JNI中分三种:\n\t\t全局引用(Global Reference)\n\t\t局部引用(Local Reference)\n\t\t弱全局引用(Weak Global Reference ) Since JDK1.2\n\n## 局部引用\n\n\t\t最常见的引用类型,基本上通过JNI返回来的引用都是局部引用.\n\t\t\t例如使用NewObject就会返回创建出来的实例的局部引用.局部引用只在该\n\t\t\tnative函数中有效,所有在该函数中产生的局部引用,都会在函数返回的时候\n\t\t\t自动释放(freed).也可以使用 DeleteLocalRef 函数手动释放该引用.\n\t\t\n\t\t实际上局部引用存在,就会防止其指向的对象被垃圾回收,尤其是当一个局部引用\n\t\t指向一个很庞大的对象,或是在一个循环中生成了局部引用,最好的做法就是在使用完该\n\t\t对象后,或在该循环尾部把这个引用释放掉,以确保在垃圾回收器被触发的时候被回收.\n\n\t\t在局部引用的有效期中,可以传递到别的本地函数中,要强调的是他的有效期仍然只在\n\t\t一次的Java本地函数调用中,所以千万不能用C++全局变量保存他或是把他定义为C++\n\t\t静态局部变量.\n\n\t\tenv->NewLocalRef(_jobject* localRef);\n\t\tenv->DeleteLocalRef(_jobject* localRef);\n\t\n## 全局引用\n\t\t\n\t\t全局引用可以跨越当前线程,在多个native函数中有效,不过需要编程人员手动\n\t\t来释放该引用.全局引用存在期间会防止在Java的垃圾回收的回收.\n\n\t\t与局部引用不同,全局引用的创建不是由JNI自动创建的,全局引用是需要\n\t\t调用 NewGlobalRef 函数,而释放他需要使用 DeleteGlobalRef 函数.\n\n\t\tenv->NewGlobalRef(_jobject* obj);\n\t\tenv->DeleteGlobalRef(_jobject * globalRef);\n\n## 弱全局引用\n\n\t\tJava 1.2后出来的功能,与全局引用相似,创建跟删除都需要由编程人员来进行.\n\t\t这种引用与全局引用一样可以在多个本地代码有效,也跨越多线程有效,不一样的是,\n\t\t这种引用将不会阻止垃圾回收器回收这个引用所指向的对象.\n\n\t\t使用 NewWeakGlobalRef 跟 DeleteWeakGlobalRef 来产生和解除引用.\n\n\t\tenv->NewWeakGlobalRef(_jobject * obj);\n\t\tenv->DeleteWeakGlobalRef(_jobject* obj);\n\n## 关于引用的一些函数\n\n\t\tjobject NewLocalRef( jobject obj);\n\t\tjobject NewGlobalRef( jobject obj);\n\t\tjboject NewWeakGlobalRef( jobject obj);\n\t\tvoid DeleteLocalRef( jobject obj);\n\t\tvoid DeleteGlobalRef( jobject obj);\n\t\tvoid DeleteWeakGlobalRef( jobject obj);\n\t\t//比较两个引用是否指向同一个Java对象\n\t\tjboolean IsSameObject(jobject obj1,Object obj2);\n\t\t这个函数对于弱全局引用还有一个特别的功能.\n\t\t把 NULL 传入要比较的对象中,就能判断弱全局引用所指向的Java对象是否被回收.\n\n# 9.JNI优化\n\n\t缓存 jfieldID/jmethodID\n\t\t\n\t\t取得 jfieldID跟jmethodID的时候会通过该属性/方法名称加上签名来查询相应的\n\t\tjfieldID/jmethodID.这种查询相对来说开销较大.我们可以将这些FieldID/MethodID\n\t\t缓存起来,这样只需要查询一次,以后就使用缓存起来的FieldID/MethodID了.\n\n\t\t两种缓存的方式:\n\t\t\t1.在用的时候缓存 (caching at the point of use)\n\t\t\t\t\n\t\t\t\t在Native Code 中使用static局部变量来保存已经查询过的id.这样就不会在每次\n\t\t\t\t函数调用时查询,而只要第一次查询成功后就保存起来了.\n\n\t\t\t\t不过在这种情况下就不得不考虑多线程同时呼叫此函数时可能会导致同时查询的危机.\n\t\t\t\t不过这种情况是无害的,因为查询同一个属性/方法的ID通常返回的是一样的值.\n\n```java\n\t/**缓存id*/\n\tpublic String cacheJfieldID = null;\n\tpublic String cacheJmethodID = null;\n```\n\n```c\n\tstatic jfieldID fieldID_string = NULL;\n\tjclass clazz = env->GetObjectClass(obj);\n\tif (fieldID_string == NULL) {\n\t\tfieldID_string = env->GetFieldID(clazz, \"cacheJfieldID\", \"Ljava/lang/String;\");\n\t}\n\t//other code...\n```\n\n\t\t\t\t\n\n2.在Java类初始化时缓存(caching at the defining Class's inititalizer)\n\t\t\t\t\n\t\t\t\t更好的一个方式就是在任何native函数调用前把id全部存起来.\n\n\t\t\t\t我们可以让java在第一次加载这个类的时候,首先调用本地代码初始化所以的\n\t\t\t\tjfieldID/jmethodID,这样的话就可以省去多次的确定id是否存在的语句,\n\t\t\t\t当然,这些jfieldID/jmethodID是定义在C/C++的全局.\n\t\t\t\t\n\t\t\t\t使用这种方式还有好处,当Java类卸载或是重新加载的时候也会重新呼叫\n\t\t\t\t该本地代码来重新计算IDs.\n\n\t\t\n```c\n\tpublic class Port {\n\t\tpublic int property = 55;\n\t\tpublic String message = \"123456\";\n\t\t/**缓存id*/\n\t\tstatic{\n\t\t\tinitNativeIDs();//初始化id\n\t\t}\n\t\t\t\n\t\tpublic static native void initNativeIDs(); \n\t\t//other code...\n\t}\n```\n\n```c\n\t//C\n\tjfieldID g_propInt_id = 0;\n\tjfieldID g_propStr_id = 0;\n\t/**Java初始化的时候缓存*/\n\tJNIEXPORT void JNICALL Java_com_tu_hellojni_jni_Port_initNativeIDs(JNIEnv * env, jclass clazz) {\n\t__android_log_print(ANDROID_LOG_INFO, \"JNIMsg\", \"\\n c-message: %s\", \"load.initNativeIDs..\");\n\tg_propInt_id = env->GetFieldID(clazz, \"property\", \"I\");\n\tg_propStr_id = env->GetFieldID(clazz, \"message\", \"Ljava/lang/String;\");\n}\n\t//other code...\n```\n\n\n# Demo下载\n\n![Demo](/res/img/blog/2014/11/01/Java_JNI/demo.gif)\n\n[本文Demo](/res/file/blog/2014/11/01/Java_JNI/HelloJNI.apk)  \n[本文Demo源代码](/res/file/blog/2014/11/01/Java_JNI/HelloJNI.rar)\n\n> 本博文暂时没有: 异常处理; C/C++如何启动JVM; JNI跟多线程;等介绍.有时间再后续...   \n> 介绍两本书:  \n> The Java Native interface Programmer's Guide and Specification  \n> JNI++ User Guider  \n\n\n\n\n\n","source":"_posts/2014-11-01-Java_JNI.md","raw":"---\nlayout : post\ntitle : \"JNI\"\ncategory : Java\nduoshuo: true\ndate : 2014-11-01\ntags : [AndroidNDK , NDK , JNI]\nSyntaxHihglighter: true\nshTheme: shThemeMidnight # shThemeDefault  shThemeDjango  shThemeEclipse  shThemeEmacs  shThemeFadeToGrey  shThemeMidnight  shThemeRDark\n---\n<style>\nh3 {\n    line-height: 1;\n    letter-spacing: 2px;\n    margin-top: 5px;\n}\nh6 {\n    line-height: 1;\n    letter-spacing: 2px;\n    margin-top: 5px;\n}\n</style>\n\n* 1.JNI简介\n* 2.最简单的Java调用C/C++代码的步骤\n* 3.在C/C++本地代码中访问Java代码简介\n\t* 3.1 JNIEnv 类型\n\t* 3.2 jobject\n\t* 3.3 jclass\n\t* 3.4 Java的类型在C/C++中的映射关系\n\n* 4.在C/C++本地代码中访问Java类中的属性与方法\n\t* 4.1 jfieldID/jmethodID\n\t* 4.2 Sign签名\n\t* 4.3 使用Javap命令来产生Sign签名\n\t* 4.4 取得Java属性/设定Java属性值\n\t* 4.5 Java方法的调用\n* 5.在C/C++本地代码中创建Java的对象\n\t* 5.1 NewObject\n\t* 5.2 AllocObject\n* 6.在C/C++本地代码中访问/创建Java的String字符串对象\n\t* 6.1 GetStringChars / GetStringUTFChars / ReleaseStringChars / ReleaseStringUTFChars\n\t* 6.2 GetStringCritical / ReleaseStringCritical\n\t* 6.3 GetStringRegion / GetStringUTFRegion\n\t* 6.4 字符串相关函数\n\n* 7.在C/C++本地代码中操作Java的数组对象\n\t* 7.1处理基本类型数组\n\t* 7.2处理对象类型数组\n* 8.全局引用/局部引用/弱全局引用\n\t* 8.1局部引用\n\t* 8.2全局引用\n\t* 8.2全局引用\n\t* 8.4关于引用的一些函数\n\n* 9.JNI优化\n\n<!-- more -->\n\n---\n\n# JNI简介\n\nJava是跨平台的语言,但是在有些时候仍然是有需要调用要地代码(这些代码通常是由C/C++编写).  \n原Sun公司现Oracle公司提供的JNI是Java平台的一个功能强大的接口.    \n这个JNI接口提供了Java与操作系统本地代码互相调用的功能.  \n\n---\n\n# 最简单的Java调用C/C++代码的步骤:\n\t\n\t1.首先在Java类中声明一个native的方法  \n\t2.使用javah命令生成包含native方法声明的C/C++头文件  \n\t3.按照生成的C/C++头文件来写C/C++源文件.  \n\t4.将C/C++源文件编译成动态连接库(DLL , OS)  \n\t5.把DLL文件加入到Path环境变量下.  \n\t6.Java类中加载DLL,然后调用声明的native方法  \n\n---\n\n# 在C/C++本地代码中访问Java代码简介\n\n在被调用的C/C++函数中也可以反过来访问Java程序中的类  \njavah工具生成的C/C++函数声明中,可以看到有头两个参数 **JNIEnv,jobject/jclass**\n\n<pre class=\"brush: java;  highlight: [4,3]\">\n\tpackage com.tu.hellojni.jni;\n\tpublic class Port {\n\t\tpublic native String sayHello();//非静态函数\n\t\tpublic static native void sayHi(String str);//静态函数\n\t}\n```\n\n```c\n\tJNIEXPORT jstring JNICALL Java_com_tu_hellojni_jni_Port_sayHello (JNIEnv *, jobject);\n\tJNIEXPORT void JNICALL Java_com_tu_hellojni_jni_Port_sayHi (JNIEnv *, jclass, jstring);\n```\n\n---\n\n## JNIEnv 类型\n\n> JNIEnv类型实际上代表了Java环境,通过这个JNIEnv*指针,就可以对Java端的代码进行操作.  \n\n\t例如,创建Java类的对象,调用Java对象的方法,镬取Java对象的属性等等.    \n\t\tJNIEnv的指针会被JNI传入到本地方法的实现函数中来对Java端的代码进行操作.    \n\n\tJNIEnv类中有很多函数可以用:  \n\n\tNewObject/NewString/New<TYPE>Array 创建一个对象,创建一个字符串, 创建一个对应类型的数组   \n\tGet/Set<TYPE>Field 获取/设置 某个类的属性     \n\tGet/SetStatic<TYPE>Field 获取/设置某个类的静态属性    \n\tCall<TYPE>Method/CallStatic<TYPE>Method 调用某一个类里的方法/调用某一个类的静态方法   \n\t等等的函数  \n\n---\n\n## jobject\n\n> jobject `指向Java对象的实例` , 非静态函数中时会有jobject参数.  \n> 这个jobject指向的是如: Port p = new Port; 所指向的就是p对象.  \n\n---\n\n##  jclass \n\t\t\n> jclass `指向的是代表那个类的class对象`. 静态函数中会有jclass参数.  \n> 这个jclass指向的是如: Port.sayHi(\"hi\"); 所指向的是Port.class对象.  \n\n> jclass的取得\n\n\t为了能够在C/C++中使用Java类.JNI.h头文件中专门定义了jclass类型来表示java中的Class类\n\nJNIEnv类中有如下几个简单的函数可以取得jclass:\n\n* jclass FindClass(const char* clsName); 通过完整的类名取得Class  \n* jclass GetObjectClass(jobject obj); 通过对象获取到class对象. 类似于 Java中的 Object中getClass方法  \n* jclass GetSuperClass(jclass obj); 通过当前jclass获取到父类的class  \n\n其中FindClass 会在classPath系统环境变量下寻找类.\n\n\t传入完整类名,注意包与包之间是用\"/\"而不是\".\"来分隔.\n\t如:\n\tjclass cls_string = env->FindClass(\"java/lang/String\");\n\n---\t\n\n## Java的类型在C/C++中的映射关系\n\n|Java类型|本地类型|JNI定义的别名\n|---|:---|---:|:---:|\n|int|long|jint/jsize\n|long|__int64|jlong\n|byte|signed char|jbyte\n|boolean|uncigned char|jboolean\n|char|unsigned short|jchar\n|short|short|jshort\n|float|float|jfloat\n|double|double|jdouble\n|object|_jobject*|jobject\n\n---\n\n# 在C/C++本地代码中访问Java类中的属性与方法\n\n## jfieldID/jmethodID\n\n> 在C/C++本地代码中访问Java端的代码,一个常见的应用就是获取类的属性和调用类的方法,为了  \n> 在C/C++中表示属性和方法,JNI在Jni.h头文件中定义了**jfieldID**,**JmethodID**类型来分别代表Java类的属性和方法.  \n\n\t我们在访问,或是设置Java属性的时候,首先就要先在本地代码获取代表该Java属性的jfieldID,\n\t然后才能在本地代码进行Java属性操作.\n\t同样的,我们需要呼叫Java端的方法时,也是需要取得代表该方法的jmethodID才能进行Java方法调用.\n\n\t使用JNIEnv的\n\t    GetFieldID/GetMethodID 取得属性/方法ID ( jfieldID / jmethodID)\n\t    GetStaticFieldID/GetStaticMethodID 取得静态属性/方法ID ( jfieldID / jmethodID )\n\n\t    来取得相应的jfieldID和jmethodID\n\n```c\n\tjfieldID GetFieldID(jclass clazz,const char* name,const char* sign);\n\tjfieldID GetStaticFieldID(jclass clazz,const char* name,const char* sign);\n\tjmethodID GetMethodID(jclass clazz,const char* name,const char* sign);\n\tjmethodID GetStaticMethodID(jclass clazz,const char* name,const char* sign);\n```\n\n\tGetMethodID也能取得构造函数的jmethodID. 创建一个Java对象时可以调用\n\t指定的构造方法,这个将在下面的时候做介绍.\n\t\t如:env->GetMethodID(data_Clazz,\"<init>\",\"()V\");\n\n\t类似Java的Reflect(反射机制)需要指定类跟属性/方法我哑取得相应的jfieldID跟jmethodID.\n\n\t方法参数: jclass clazz调用指定某个类. const char* name常量字符串,代表属性或者方法的名称.\n\t\tconst char* sign是当类中有两个重载方法时签名.\n\n\t例如: TestNative类中有两个重载方法:\n\n```java\n\t//Java\n\tpackage com.tu.hellojni.jni;\n\tpublic class TestNative {\n\t\tpublic void function(int i) {\n\t\t\tSystem.out.println(\"TestNative.function(int i)\" + i);\n\t\t}\n\t\tpublic void function(double d) {\n\t\t\tSystem.out.println(\"TestNative.function(double d)\" + d);\n\t\t}\n\t}\n```\n\n\t\t然后在C/C++代码中需要调用其中一个function方法的话.\n\t\t//首先取得要调用的方法所在的类\n\n\t\tjclass clazz_TestNative = env->FindClass(\"com/tu/hellojni/jni/TestNative\");\n\t\t//取得jmethodID之后才进行调用\n\t\tjmethodID id_func = env->GetMethodID(clazz_testNative,\"function\",\"??????\");\n\n\t\t但是到底取得的是\n\t\tvoid function(int i )还是\n\t\tvoid function(double d)的jmethodID呢?\n\t\t这就是sign的作用了.它用于指定要取得的属性/方法类型.\n\t\t这里的sign如果指定为\"(I)V\"则取回void function(int)的jmethodID\n\t\t\t\t如果指定为(D)V\"则取回void function(double)的jmethodID\n\n---\t\n\n## Sign签名\n\n\t\t用来表示要取得的属性/方法的类型\n\n|类型|相应的签名\n|---|---|\n|boolean|Z\n|byte|B\n|char|C\n|short|S\n|int|I\n|long|J\n|float|F\n|double|D\n|void|V\n|object|L用/分隔包的完整类名: Ljava/lang/String;\n|Array|[签名 如[I 整形数组 如[Ljava/lang/Object; 对象数组\n|Method|(参数1类型签名,参数2类型签名...)返回值类型签名 如:(ILjava/util/Date;[I)I\n\n---\t\n\n\n## 使用Javap命令来产生Sign签名\n\n\t\t从上面代码中的签名可以看出.如果是比较复杂的签名编写起来还是比较麻烦的.\n\t\t所以JDK也提供了一个工具javap来查看一个类的声明,其中就可以设置输出每个方法/属性的签名.\n\n\t\t语法: \n\t\t\tjavap -s -p [full Class Name]\n\t\t\t-s 表示输出签名信息\n\t\t\t-p 同-private,输出包含private 访问权限的成员信息\n\n\t\t使用方法:\n\t\t\t1.cmd定位到工程目录下.\n\t\t\t2.使用javap输入信息.\n\n<pre class=\"brush: shell;  highlight: []\">\n\t\tC:\\Users\\ComTu>cd E:\\ComTu_Design\\workspace\\workspace-Android\\HelloJ\n\t\tC:\\Users\\ComTu>E:\n\t\tE:\\ComTu_Design\\workspace\\workspace-Android\\HelloJNI>cd bin/classes\n\n\t\tE:\\ComTu_Design\\workspace\\workspace-Android\\HelloJNI\\bin\\classes>jav\n\t\tCompiled from \"Port.java\"\n\t\tpublic class com.tu.hellojni.jni.Port extends java.lang.Object{\n\t\tpublic int property;\n\t\t  Signature: I\n\t\tpublic com.tu.hellojni.jni.Port();\n\t\t  Signature: ()V\n\t\tpublic native java.lang.String sayHello();\n\t\t  Signature: ()Ljava/lang/String;\n\t\tpublic static native void sayHi(java.lang.String);\n\t\t  Signature: (Ljava/lang/String;)V\n\t\tpublic native void testSign();\n\t\t  Signature: ()V\n\t\tpublic void functionOverride();\n\t\t  Signature: ()V\n\t\tpublic void functionOverride(int);\n\t\t  Signature: (I)V\n\t\tpublic int function(int, java.util.Date, int[]);\n\t\t  Signature: (ILjava/util/Date;[I)I\n\t\t}\n```\n\n[在Eclipse中配置Javap快捷操作](/blog/2014/10/28/Android_NDK_IDE_environment_one.html)\n\n---\t\n\n\n## 取得Java属性/设定Java属性值\n\n\t\t取得了相应属性的 jfieldID 之后就可以用\n\n\t\tSet<TYPE>Field\n\t\tGet<TYPE>Field\n\n\t\tSetStatic<TYPE>Filed\n\t\tGetStatic<TYPE>File等函数来对Java属性进行操作了.  -->TYPE泛指各种数据类型.\n\t\n\t\t如: Boolean , Byte , Double , Float ,  Int  , Long , Short , Object\n\t\t\n\t\t怎样获取数组属性呢?\n\t\t\t可以使用GetObjectField来取得数组类型的属性.\n\t\t\n\t\t案例:\n\n```java\n\t//Java\n\tpublic class Port{\n\t\t/** C进行get/set成员变量 */\n\t\tpublic int property = 55;\n\n\t\t/** C进行Get/Set静态成员变量 */\n\t\tpublic static boolean isShow = false;\n\t}\t\n```\n\n```c\n\t//C\n\tjclass port_clazz = env->GetObjectClass(obj);\n\t//获取java成员变量\n\t//public int property;\n\tjfieldID fieldId_prop = env->GetFieldID(port_clazz, \"property\", \"I\");\n\tjint prop = env->GetIntField(obj, fieldId_prop);//取值\n\t__android_log_print(ANDROID_LOG_INFO, \"JNIMsg\", \"\\n c-int: %d\", prop);\n\t//给java成员变量赋值\n\tenv->SetIntField(obj, fieldId_prop, 100L);//赋值100L表示c中的100常整数类型.\n\t\n\t//获取静态变量\n\tjfieldID fieldId_isShow = env->GetStaticFieldID(port_clazz, \"isShow\", \"Z\");\n\tjboolean jb = env->GetStaticBooleanField(port_clazz, fieldId_isShow);\n\t__android_log_print(ANDROID_LOG_INFO, \"JNIMsg\", \"\\n c-boolean: %d\", jb);\n\tjboolean b = !jb;\n\tenv->SetStaticBooleanField(port_clazz, fieldId_isShow, b);//给静态变量赋值\n\n```\n\n---\t\n\n\n## Java方法的调用\n\t\t\n\t\tJNIEnv 提供了众多的Call<TYPE>Method 跟 CallStatic<TYPT>Method,还有\n\t\tCallNonvirtual<TYPE>Method函数.需要通过 GetMethodID 取得相应方法的 jmethodID来\n\t\t传入到函数参数中.\n\n\t\t调用实例方法的三种形式:\n\t\t\t//第一种:最常用的方式\n\t\t\tCall<TYPE>Method(jobject obj,jmethodID id,...); \n\t\t\t//第二种:当调用这个函数的时候有一个指向参数表的va_list变量时使用的_很少使用到这种方式\n\t\t\tCall<TYPE>MethodV(jobject obj,jmethodID id, va_list lst);\n\t\t\t//第三种:当调用这个函数的时候有一个指向jvalue或者jvalue数组的指针时用的\n\t\t\tCall<TYPE>MethodA(jobject obj,jmethodID id, jvalue * v);\n\n\t\t调用静态方法的三种形式:\n\t\t\tCallStatic<TYPE>Method(jclass class , jmethodID id, ...);\n\t\t\tCallStatic<TYPE>MethodV(jclass class , jmethodID id, va_list lst);\n\t\t\tCallStatic<TYPE>MethodA(jclass class , jmethodID id, jvalue * v);\n\n\t\t第三种中的 jvalue 这个类型是一个联合体.\n\t\t源代码jni.h中:\n\n```c\n\t//C\n\t\t\ttypedef union jvalue {\n\t\t\t    jboolean    z;\n\t\t\t    jbyte       b;\n\t\t\t    jchar       c;\n\t\t\t    jshort      s;\n\t\t\t    jint        i;\n\t\t\t    jlong       j;\n\t\t\t    jfloat      f;\n\t\t\t    jdouble     d;\n\t\t\t    jobject     l;\n\t\t\t} jvalue;\n```\n\t\t\n\t\t案例: \n\n```java\n\t//Java\n\tpublic class Port {\n\t\t/** C调用重载成员函数_非静态方法 */\n\t\tpublic void functionOverride() {\n\t\t\tSystem.out.println(\"Port.functionOverride()--参数:property>\" + property + \"--isShow>\" + isShow);\n\t\t}\n\n\t\t/** C调用重载成员函数_非静态方法 */\n\t\tpublic void functionOverride(int i) {\n\t\t\tSystem.out.println(\"Port.functionOverride(int i)-->\" + i + \"--参数:property>\" + property + \"--isShow>\" + isShow);\n\t\t}\n\n\t\t/** C调用多参数签名_非静态方法 */\n\t\tpublic int function(int foo, Date date, int[] arr) {\n\t\t\tSystem.out.println(\"Port.function()foo>\" + foo + \"===date>\" + date + \"==arr>\" + arr);\n\t\t\treturn foo;\n\t\t}\n\n\t\t/** C调用成员函数 的三种形式 */\n\t\tpublic boolean function(int i, double d, char c) {\n\t\t\tSystem.out.println(\"===>Port.function()i>\" + i + \"===d>\" + d + \"==c>\" + c);\n\t\t\treturn true;\n\t\t}\n\t}\n```\n\n```c\n\t//C\n\tjclass port_clazz = env->GetObjectClass(obj);\n\t//调用调用Java里的Port类的void functionOverride()重载函数_非静态函数\n\tjmethodID id_func1 = env->GetMethodID(port_clazz, \"functionOverride\", \"()V\");\n\tenv->CallVoidMethod(obj, id_func1);//调用\n\n\t//调用调用java里的Port类的void functionOverride(int )C调用重载函数_非静态函数\n\tjmethodID id_func2 = env->GetMethodID(port_clazz, \"functionOverride\", \"(I)V\");\n\tenv->CallVoidMethod(obj, id_func2, 1L);//调用,并需要一个参数\n\n\t//调用调用java里的Port类的public int function(int foo, Date data, int[] arr) -->(ILjava/util/Date;[I)I\n\tjmethodID methodID_func = env->GetMethodID(port_clazz, \"function\", \"(ILjava/util/Date;[I)I\");\n\tenv->CallIntMethod(obj, methodID_func, 100L, NULL, NULL);//调用Port的function方法,后面跟随三个参数\n\n\n\tjmethodID methodID_func_IDC = env->GetMethodID(port_clazz, \"function\", \"(IDC)Z\");\n\t//调用实例方法的第一种形式: Call&lt;TYPE>Method(jobject obj,jmethodID id,...);\n\tenv->CallBooleanMethod(obj, methodID_func_IDC, 100L, 3.14, L'1');// 100L长整型,3.14double, L'1'宽字符\n\n\t//调用实例方法的第三种形式:\n\tjvalue * j = new jvalue[3];\n\tj[0].i = 50L;\n\tj[1].d = 3.1415;\n\tj[2].c = L'5';\n\tenv->CallBooleanMethodA(obj, methodID_func_IDC, j);\n\tdelete[] j;//删除回收\n```\n\n\t\t调用一个对象的父类的方法:\n\t\t\t在JNI中定义的 CallNonvirtual<TYPE>Method 就能够实现子类对象调用父类方法的功能.\n\t\t\t\n\t\t\t要使用它,首先要取得父类及要调用的父类方法的 jmethodID,方可.\n\t\t\t\n\t\t案例:\n\n```java\n\t//Java\n\tpublic class Father {\n\t\tpublic void function() {\n\t\t\tSystem.out.println(\"===>Father.function()\");\n\t\t}\n\t}\n\n\tpublic class Child extends Father {\n\n\t\t@Override\n\t\tpublic void function() {\n\t\t\tSystem.out.println(\"===>Child.function()\");\n\t\t}\n\t}\n\n\tpublic class Port {\n\t\t/** C调用_子父类关系类 */\n\t\tpublic Father father = new Child();\t\n\t}\n```\n\t\n```c\n\t//C\n\t//调用子父类的成员变量方法:\n\tjfieldID id_father = env->GetFieldID(port_clazz, \"father\", \"Lcom/tu/hellojni/jni/Father;\");\n\tjobject father = env->GetObjectField(obj, id_father);\n\n\tjclass clazz_Father = env->FindClass(\"com/tu/hellojni/jni/Father\");\n\tjmethodID id_father_function = env->GetMethodID(clazz_Father, \"function\", \"()V\");\n\n\tenv->CallVoidMethod(father, id_father_function);\n\n\t//\t以上代码相当于:\n\t//  Port port = new Port();\n\t//\tFather f = port.father; //-->father成员变量是:public Father father = new Child();\n\t//\tf.function();\n\t//运行结果: ===>Child.function()\n\n\t//\t调用父类的方法\n\tenv->CallNonvirtualVoidMethod(father, clazz_Father, id_father_function);\n\t//运行结果:===>Father.function()\n```\n\n---\t\n\n\n# 在C/C++本地代码中创建Java的对象\n\t\n\t创建Java对象有两种方式. (NewObject / AllocObject)\n\t\n## 5.1 NewObject\n\n> 使用函数 NewObject 可以用来创建对象  \n\t\n\tjobject NewObject(jclass clazz , jmethodID methodID,...)\n\n\tGetMethodID能够取得构造方法的 jmethodID .如果传入的要取得的方法名称设定为\"<init>\"就能够取得构造方法.  \n\t构造方法的方法返回值类型的签名始终为Void.\n\n\t\t案例:\n\n```c\n\t//C\n\t//创建一个日期类Date对象并调用getTime方法\n\tjclass clazz_date = env->FindClass(\"java/util/Date\");\n\tjmethodID mid_date = env->GetMethodID(clazz_date,\"&lt;init>\",\"()V\");\n\tjobject now = env->NewObject(clazz_date,mid_date);\n\n\tjmethodID jmethodID_getTime = env->GetMethodID(clazz_date,\"getTime\",\"()J\");\n\tjlong time = env->CallLongMethod(now,jmethodID_getTime);\n\n\t__android_log_print(ANDROID_LOG_INFO, \"JNIMsg\", \"\\n c-创建Date对象并调用getTime方法: %d\", time);\n```\n\n---\n\n## 5.2 AllocObject\n\n> 使用 AllocObject 方式创建对象(创建但未初始化,使用比较少.)    \n> 使用函数**AllocObject**可以根据传入的jclass创建一个Java对象,但是他的状态是非初始化的,  \n> 在使用这个对象之前绝对要用 **CallNonvirtualVoidMethod** 来调用该jclass的建构函数.  \n> 这样可以延迟构造函数的调用.这个部分用的很少.\n\t\n\t案例: \n\n```java\n\t//Java\n\tpublic class Port {\n\t\t/** C进行创建并初始化 */\n\t\tpublic static String STATIC_STR;\n\t}\n```\n\n```c\n\t//C\n\t//---> AllocObject 创建延迟初始化的对象\n\tjclass clazz_str = env->FindClass(\"java/lang/String\");\n\tjmethodID methodID_str = env->GetMethodID(clazz_str, \"&lt;init>\", \"([C)V\");//通过字符数组构造函数\n\n\t//预先创建一个没有初始化的字符串\n\tjobject string = env->AllocObject(clazz_str);\n\n\t//创建一个5个元素的字符数组,然后以'c','o','m','t','u'赋值\n\tjcharArray arg = env->NewCharArray(5);\n\tjchar buf[5];\n\tbuf[0] = 67;\n\tbuf[1] = 'o';\n\tbuf[2] = 'm';\n\tbuf[3] = 't';\n\tbuf[4] = 'u';\n\tenv->SetCharArrayRegion(arg, 0, 5, buf);\n\n\t//呼叫构建函数\n\tenv->CallNonvirtualVoidMethod(string, clazz_str, methodID_str, arg);\n\n\tjclass clazz_this = env->GetObjectClass(obj);\n\n\tjfieldID fieldID_str = env->GetStaticFieldID(clazz_this, \"STATIC_STR\", \"Ljava/lang/String;\");\n\tenv->SetStaticObjectField(clazz_this, fieldID_str, string);//给java静态变量赋值\n```\n\n---\t\n\n\n# 在C/C++本地代码中访问/创建Java的String字符串对象\n\n\tJava字符串<-->C/C++字符串\n\n\t\t在Java中,使用的字符串String对象是Unicode(UTF-16)码, \n\t\t\t即每个字符不论是中文英文还是符号,一个字符总是占两个字节.\n\n\tJava通过JNI接口可以将Java的字符串转换到C/C++中的宽字符串(wchar_t*),\n\t或者传回一个UTF-8的字符串(char*)到C/C++. \n\t返过来,C/C++可以通过一个宽字符串,或者一个UTF-8编码的字符串来创建一个Java端的String对象.\n\n\n\t获取Java中的String对象有如下几种函数:\n\t\n## GetStringChars / GetStringUTFChars / ReleaseStringChars / ReleaseStringUTFChars .\n\n\t\t\tconst jchar* GetStringChars (jstring str , jboolean* copied)\n\t\t\t\t可以取得UTF-16编码的宽字符串(jchar*)\n\t\t\t\t开新内存,然后把Java中的String拷贝到这个内存中,然后返回指向这个内存地址的指针.\n\n\t\t\tconst char* GetStringUTFChars (jstring str , jboolean* copied)\n\t\t\t\t可以取得UTF-8编码的字符串(char*)\n\t\t\t\t直接返回指向Java中String的内存的指针,这个时候\n\t\t\t\t千万不要改变这个内存的内容,这将破坏String在Java中始终是常量这个原则.\n\n\t\t\t第二个参数jboolean* copied是用来标示是否对Java的String对象进行拷贝的.\n\t\t\t如果传入的这个jboolean指针不是 NULL ,则他会给该指针所指向的内存传入 JNI_TRUE\n\t\t\t或 JNI_FALSE 指示是否进行拷贝.\n\t\t\t传入 NULL 表示不关心是否拷贝字符串,它就不会被jboolean* 指向的内存赋值\n\n\t\t\t使用了如上这两个函数取得的字串,在不使用的时候,要使用\n\t\t\tReleaseStringChars / ReleaseStringUTFChars 来释放拷贝的内存,或者释放对Java的String对象的引用.\n\t\t\n\t\t\tReleaseStringChars (jstring jstr, const jchar* str); \n\t\t\tReleaseStringUTFChars (jstring jstr, const char* str);\n\t\t\n\t\t\t\t第一个参数指定一个jstring变量,即要释放的本地字符串的来源.\n\t\t\t\t第二个参数就是要释放的本地字符串.\n\n```c\n\tvoid function(JNIEnv * env, jobject obj) {\n\t\t//-------- GetStringChars / ReleaseStringChars / NewString -------------\n\t\t//获取jmethodID\n\t\tjfieldID jfie_msg = env->GetFieldID(env->GetObjectClass(obj), \"message\", \"Ljava/lang/String;\");\n\t\t//获取到String属性\n\t\tjstring j_msg = (jstring) env->GetObjectField(obj, jfie_msg);\n\t\t//UTF-16编码的宽字符串(jchar*) const jchar* == const wchar_t*\n\t\t//\tJava-String->C-jchar*转换\n\t\tconst jchar* jstr = env->GetStringChars(j_msg, NULL);//j_msg不能为null否则会抛异常\n\n\t\t//---------拷贝数据start--------------\n\n\t\tjsize size = env->GetStringLength(j_msg);\n\n\t\t//转换成宽字符串\n\t\t//\twstring wstr((const wchar_t*) jstr);\n\n\t\tjchar* jstrTemp = (jchar*) jstr;\n\t\t//---------拷贝数据end--------------\n\n\t\t//回收本地字符串 _释放指针\n\t\tenv->ReleaseStringChars(j_msg, jstr);\n\n\t\t//---------处理数据start--------------\n\t\t//倒序函数迭代字符串\n\t\t//\tstd::reverse(wstr.begin(), wstr.end());\n\t\t//---------处理数据end--------------\n\n\t\t//创建String对象并赋予Port的message变量中.\n\t\t//\tjstring j_new_str = env->NewString((const jchar*) wstr.c_str(), (jint) wstr.size());\n\t\tjstring j_new_str = env->NewString(jstrTemp, size);\n\t\t//赋值给Java的Port的message变量\n\t\tenv->SetObjectField(obj, jfie_msg, j_new_str);\n\t}\n```\t\n\n```c\n\t//拷贝\n\tchar* cc2c(const char* str) {\n\t\tchar* strtemp = new char[strlen(str) + 1];\n\t\tstrcpy(strtemp, str);\n\t\treturn strtemp;\n\t}\n\n\t//简单倒序算法\n\tchar* myReverse(const char* str) {\n\t\tchar* strtemp = cc2c(str);\n\t\tint len = strlen(strtemp);\n\t\tchar t;\n\t\tfor (int i = 0; i < len / 2; i++) {\n\t\t\tt = strtemp[i];\n\t\t\tstrtemp[i] = strtemp[len - i - 1];\n\t\t\tstrtemp[len - i - 1] = t;\n\t\t}\n\t\treturn strtemp;\n\t}\n\tvoid function(JNIEnv * env, jobject obj) {\n\t\t//------------------ GetStringUTFChars / ReleaseStringUTFChars / NewStringUTF -------\n\t\tjfieldID jfie_msg = env->GetFieldID(env->GetObjectClass(obj), \"message\", \"Ljava/lang/String;\");\n\t\tjstring j_msg = (jstring) env->GetObjectField(obj, jfie_msg);\n\t\t//\tJava-String->C-jchar*转换\n\t\tconst char* str = env->GetStringUTFChars(j_msg, NULL);\n\t\tchar* strtemp = myReverse(str);\n\t\tenv->ReleaseStringUTFChars(j_msg, str);\n\t\tjstring j_new_str = env->NewStringUTF(strtemp);\n\t\tdelete[] strtemp;\n\t\tenv->SetObjectField(obj, jfie_msg, j_new_str);\n\t}\n```\n\n## GetStringCritical / ReleaseStringCritical .\n\t\t\t\n\t\t\t为了增加直接传回指向Java字符串的指针的可能性(而不是拷贝),JDK1.2之后出来新的函数\n\n\t\t\tconst jchar* GetStringCritical (jstring str , jboolean* copied)\n\t\t\tvoid ReleaseStringCritical (jstring jstr,const jchar* str);\n\n\t\t\t注意:\n\t\t\t在 GetStringCritical / ReleaseStringCritical 方法之间是一个关键区.\n\t\t\t在这关键区之中绝对不能呼叫(call)JNI的其它函数,会造成当前线程中断或是会让当前线程\n\t\t\t等待的任何本地代码.否则将造成关键区代码执行期间垃圾回收器停止动作,任何触发垃圾\n\t\t\t回收的线程也会暂停.其它的触发垃圾回收器的线程不能前进,直到当前线程结束而激活垃圾回收器.\n\n\t\t\t在关键区中千万不要出现中断操作,或者在JVM中分配任何新对象.否则会造成JVM死锁\n\n\t\t\t虽说这个函数会增加直接传回指向Java字符串的指针的可能性,不过还是会根据情况传回拷贝过的字符串.\n\n\t\t\t不支持 GetStringUTFCritical ,没有这样一个函数,由于Java字符串用的是UTF16,要转\n\t\t\t成UTF8编码的字符串始终需要进行一次拷贝,所以没有这样的函数.\n\n```c\n\t//--------------- GetStringCritical / ReleaseStringCritical ----------\n\tvoid function(JNIEnv * env, jobject obj) {\n\t\t// 基本与 GetStringChars 一样\n\t\tjfieldID jfie_msg = env->GetFieldID(env->GetObjectClass(obj), \"message\", \"Ljava/lang/String;\");\n\t\tjstring j_msg = (jstring) env->GetObjectField(obj, jfie_msg);\n\t\t//\tJava-String->C-jchar*转换\n\t\tconst jchar* jstr = env->GetStringCritical(j_msg, NULL);//jstr_msg不能为null复杂会抛异常\n\t\twstring wstr((const wchar_t*) jstr);\n\t\tenv->ReleaseStringCritical(j_msg, jstr);\n\t\tstd::reverse(wstr.begin(), wstr.end());\n\t\tjstring j_new_str = env->NewString((const jchar*) wstr.c_str(), (jint) wstr.size());\n\t\tenv->SetObjectField(obj, jfie_msg, j_new_str);\n\t}\n```\n\n## GetStringRegion / GetStringUTFRegion .\n\t\t\t\n\t\t\tJava 1.2之后出来的函数,这个函数的动作,是把Java字符串的内容直接拷贝到C/C++\n\t\t\t的字符数组中,在呼叫这个函数之前必须有一个C/C++分配出来的字符串,然后传入到\n\t\t\t这个函数中进行字符串的拷贝.\n\n\t\t\t由于C/C++中分配内存开销相对小,而且Java中的String内容拷贝的开销可以忽略,\n\t\t\t更好的一点是此函数不分配内存,不会抛OutOfMemoryError异常.\n\n\t\t\t//拷贝Java字符串并以UTF-8编码传入bufer\n\t\t\tGetStringUTFRegion(jstring str , jsize start , jsize len , char* buffer);\n\n\t\t\t//拷贝Java字符串并以UTF-16编码传入buffer\n\t\t\tGetStringRegion(jstring str, jsize start , jsize len, jchar* buffer);\n\n\t\t\tJava的String str:\n\t\t\t\tA  B  C  D  E  F  G  H  I  J  K  L  M  N\n\t\t\t\t         ↑― start = 3  ↓  len = 10 ―↑ \n\t\t\t\tenv->GetStringRegion(str,3,10,buffer);//copy至buffer\n\n```c\n\t//---------------- GetStringRegion / NewString ----------------\n\tvoid function(JNIEnv * env, jobject obj) {\n\t\tjfieldID jfie_msg = env->GetFieldID(env->GetObjectClass(obj), \"message\", \"Ljava/lang/String;\");\n\t\tjstring j_msg = (jstring) env->GetObjectField(obj, jfie_msg);\n\n\t\tjsize jm_len = env->GetStringLength(j_msg);\n\n\t\t//创建一个数组长度为message字符串的长度+1(结尾符)\n\t\tjchar* jstr = new jchar[jm_len + 1];\n\t\tjstr[jm_len] = L'\\0';//C++中都会有结尾符,不然会出现乱码.\n\t\t//拷贝到字符数组里\n\t\tenv->GetStringRegion(j_msg, 0, jm_len, jstr);\n\t\t//\twstring wstr((const wchar_t*) jstr);\n\n\t\t//std::reverse(wstr.begin(), wstr.end());\n\t\tjstring j_new_str = env->NewString((const jchar*) jstr,jm_len);\n\n\t\tenv->SetObjectField(obj, jfie_msg, j_new_str);\n\t\t//删除不必要的内存\n\t\tdelete[] jstr;\n\t}\n```\n\n\n```c\t\n\t//---------------- GetStringUTFRegion / NewStringUTF ----------------\n\tvoid function(JNIEnv * env, jobject obj) {\n\t\tjfieldID jfie_msg = env->GetFieldID(env->GetObjectClass(obj), \"message\", \"Ljava/lang/String;\");\n\t\tjstring j_msg = (jstring) env->GetObjectField(obj, jfie_msg);\n\n\t\tjsize jm_len = env->GetStringLength(j_msg);\n\n\t\tchar* buffer  = new char[jm_len + 1];\n\t\tenv->GetStringUTFRegion(j_msg, 0, jm_len, buffer);\n\t\t//\twstring wstr((const wchar_t*) jstr);\n\n\t\t//std::reverse(wstr.begin(), wstr.end());\n\t\tjstring j_new_str = env->NewStringUTF((const char*) buffer);\n\n\t\tenv->SetObjectField(obj, jfie_msg, j_new_str);\n\t\tdelete[] buffer;\n\t}\n```\n\n## 字符串相关函数\n\t\t\n\t\tjstring NewString(const jchar* str, jsize len); //创建一个字符串\n\t\tjstring NewStringUTF(const char* str); //创建一个UTF8的字符串\n\t\tjsize GetStringLength(jstring str);// 字符串的长度\n\t\tjsize GetStringUTFLength(jstring str);//UTF会占用多少个字节\n\n\n\n# 7.在C/C++本地代码中操作Java的数组对象\n\t\n\t\t1.基本类型的数组\n\t\t2.对象类型(Objcet[])的数组\n\n\t\t一个能通用于两种不同类型数组的函数\n\t\tGetArrayLength(jarray aray);//获取数组长度\n\n## 处理基本类型数组\n\t\t\n\t\tGet<TYPE>ArrayElements(<TYPE>Array arr, jboolean* iscopied);\n\t\t\t这类函数可以把Java基本类型的数组转换到C/C++中的数组,有两种处理方式,\n\t\t\t1.拷贝一份传回本地代码,\n\t\t\t2.把指向Java数组的指针直接传回到本地代码.\n\t\t\t处理完本地代码的数组后,通过 Release<TYPE>ArrayElements来释放数组.\n\n\t\tRelease<TYPE>ArrayElements(<TYPE>Array arr,<TYPE>* array,jint mode)\n\t\t\t用这个函数可以选择将如何处理Java跟C++的数组,是提交,撤消,内存释放,还是不释放等.\n\t\t\tmode可以取下面的值:\n\t\t\t0          -> 对Java的数组进行更新并释放C/C++的数组.\n\t\t\tJNI_COMMIT -> 对Java的数组进行更新但不释放C/C++的数组.\n\t\t\tJNI_ABORT  -> 对Java的数组不进行更新,释放C/C++的数组.\n\t\t\n\t\tGetPrimitiveArrayCritical(jarray arr , jboolean* isCopied);\n\t\tReleasePrimitiveArrayCritical(jarray arr , void* array,jint mode);\n\t\t\t也是JDK1.2出来的,为了增加直接传回指向Java数组的指针而加入的函数,同样的,\n\t\t\t也会有同 GetStringCritical 的死锁的问题.\n\t\t\n\t\tGet<TYPE>ArrayRegion(<TYPE>Array arr, jsize start , jsize len , <TYPE>* buffere);\n\t\t\t在C/C++预先开辟一段内存,然后把Java基本类型的数组拷贝到这段内存中.\n\t\t\t跟 GetStringRegion原理类似\n\t\t\n\t\tSet<TYPE>ArrayRegion(<TYPE>Array arr , jsize start, jsize len , const <TYPE>* buffer);\n\t\t\t把Java基本类型的数组中的指定范围的元素用C/C++的数组中的元素来赋值.\n\t\t\n\t\t<TYPE>Array New<TYPE>Array(jsize sz)\n\t\t\t指定一个长度然后返回相应Java基本类型的数组.\n\n\n```java\n\t//java\n\t/** C调用Get/Set成员变量 数组 */\n\tpublic int[] ints = new int[] { 67, 111, 109, 116, 117 };\n```\n\n```c\n\t//c\n\t//---- GetIntArrayElements / ReleaseIntArrayElements / ReleaseIntArrayElements / ReleaseIntArrayElements ----\n\t//基本数据类型数组\n\tvoid function(JNIEnv * env, jobject obj) {\n\t\t//取得属性Id\n\t\tjfieldID fieldId = env->GetFieldID(env->GetObjectClass(obj), \"ints\", \"[I\");\n\t\t//通过属性id取得数组变量\n\t\tjintArray ints = (jintArray) env->GetObjectField(obj, fieldId);\n\n\t\t//转取得本地数组\n\t\tjint* int_arr = env->GetIntArrayElements(ints, NULL);\n\t\tjsize len = env->GetArrayLength(ints);\n\n\t\t//C基本库 . 对数组进行排序,迭代器需要两个参数,第一个是array首地址,第二个是array尾地址\n\t\tstd::sort(int_arr, int_arr + len);\n\n\t\tfor (jsize i = 0; i &lt; len; ++i) {\n\t\t\t__android_log_print(ANDROID_LOG_INFO, \"JNIMsg\", \"\\n c-intArray[]: %d\", int_arr[i]);\n\t\t}\n\n\t\t//对Java的数组进行更新并释放C/C++的数组.\n\t\tenv->ReleaseIntArrayElements(ints, int_arr, 0);\n\t\t//对Java的数组进行更新但不释放C/C++的数组.\n\t\t//\tenv->ReleaseIntArrayElements(ints, int_arr, JNI_COMMIT);\n\t\t//对Java的数组不进行更新,释放C/C++的数组.\n\t\t//\tenv->ReleaseIntArrayElements(ints, int_arr, JNI_ABORT);\n\t}\n```\n\n\n## 处理对象类型数组\n\t\t\n\t\tJNI没有提供直接把Java的对象类型数组(Object[])直接传到C++中的jobject[]数组的函数.\n\t\t而是直接通过 Get/SetObjectArrayElement 这样的函数来对Java的Object[]数组进行操作.\n\n\n\t\t使用上述的函数也不用释放任何资源.\n\n\t\tNewObjectArray 可以通过指定长度跟初始值来创建某个类的数组.\n\n```c\n\t//c\n\t// ----- GetObjectArrayElement /  NewObjectArray / SetObjectArrayElement ------\n\t//对象数据类型数组\n\tvoid function(JNIEnv * env, jobject obj) {\n\t\tjfieldID fieldStrId = env->GetFieldID(jclazz, \"strs\", \"[Ljava/lang/String;\");\n\t\t//获取java的对象数组\n\t\tjobjectArray str_arr = (jobjectArray) env->GetObjectField(obj, fieldStrId);\n\t\tint lenStr = env->GetArrayLength(str_arr);\n\t\tprintf(\"\\n c-stringArray :\");\n\t\tint i = 0;\n\t\t//读Java的以String数组\n\t\tfor (i = 0; i < lenStr; i++) {\n\t\t\tjobject obj = env->GetObjectArrayElement(str_arr, i);\n\t\t\tjstring str = (jstring) obj;\n\n\t\t\tconst char * szStr = env->GetStringUTFChars(str, 0);\n\t\t\tprintf(\" %d-%s \", i, szStr);\n\t\t\t__android_log_print(ANDROID_LOG_INFO, \"JNIMsg\", \"\\n c-StringArray[]: %d - %s\", i, szStr);\n\t\t\tconst jchar * chars = (const jchar *) szStr;\n\t\t\tenv->ReleaseStringChars(str, chars);\n\t\t}\n\t\t//创建一个对象数组 , 为Java对象数组赋值并更新.\n\t\tjstring str;\n\t\tjobjectArray args = 0;\n\t\tjsize size = 7;\n\t\tchar* sa[] = { \"Hello,\", \"world!\", \"c\", \"o\", \"m\", \"t\", \"u\" };\n\t\tint j = 0;\n\t\tjclass objClass = env->FindClass(\"java/lang/String\");\n\t\targs = env->NewObjectArray(size, objClass, 0);\n\t\tfor (j = 0; j < size; j++) {\n\t\t\tstr = env->NewStringUTF(sa[j]);\n\t\t\tenv->SetObjectArrayElement(args, j, str);\n\t\t\tif (j < lenStr)//给Java数组赋数组下标越界抛异常 ,\n\t\t\t\tenv->SetObjectArrayElement(str_arr, j, str);//自动更新Java类中的strs对象数组\n\t\t}\n\t\t//\t不需要释放任何资源.\n\t\t//args 新创建的 String 数组.\n\t}\n```\n\n\n# 8.全局引用/局部引用/弱全局引用\n\t\n\t从Java虚拟机创建的对象传到本地C/C++代码时会产生引用.根据Java的垃圾回收机制,只要有引用\n\t存在就不会触发该引用指向的Java对象的垃圾回收.\n\n\t这些引用在JNI中分三种:\n\t\t全局引用(Global Reference)\n\t\t局部引用(Local Reference)\n\t\t弱全局引用(Weak Global Reference ) Since JDK1.2\n\n## 局部引用\n\n\t\t最常见的引用类型,基本上通过JNI返回来的引用都是局部引用.\n\t\t\t例如使用NewObject就会返回创建出来的实例的局部引用.局部引用只在该\n\t\t\tnative函数中有效,所有在该函数中产生的局部引用,都会在函数返回的时候\n\t\t\t自动释放(freed).也可以使用 DeleteLocalRef 函数手动释放该引用.\n\t\t\n\t\t实际上局部引用存在,就会防止其指向的对象被垃圾回收,尤其是当一个局部引用\n\t\t指向一个很庞大的对象,或是在一个循环中生成了局部引用,最好的做法就是在使用完该\n\t\t对象后,或在该循环尾部把这个引用释放掉,以确保在垃圾回收器被触发的时候被回收.\n\n\t\t在局部引用的有效期中,可以传递到别的本地函数中,要强调的是他的有效期仍然只在\n\t\t一次的Java本地函数调用中,所以千万不能用C++全局变量保存他或是把他定义为C++\n\t\t静态局部变量.\n\n\t\tenv->NewLocalRef(_jobject* localRef);\n\t\tenv->DeleteLocalRef(_jobject* localRef);\n\t\n## 全局引用\n\t\t\n\t\t全局引用可以跨越当前线程,在多个native函数中有效,不过需要编程人员手动\n\t\t来释放该引用.全局引用存在期间会防止在Java的垃圾回收的回收.\n\n\t\t与局部引用不同,全局引用的创建不是由JNI自动创建的,全局引用是需要\n\t\t调用 NewGlobalRef 函数,而释放他需要使用 DeleteGlobalRef 函数.\n\n\t\tenv->NewGlobalRef(_jobject* obj);\n\t\tenv->DeleteGlobalRef(_jobject * globalRef);\n\n## 弱全局引用\n\n\t\tJava 1.2后出来的功能,与全局引用相似,创建跟删除都需要由编程人员来进行.\n\t\t这种引用与全局引用一样可以在多个本地代码有效,也跨越多线程有效,不一样的是,\n\t\t这种引用将不会阻止垃圾回收器回收这个引用所指向的对象.\n\n\t\t使用 NewWeakGlobalRef 跟 DeleteWeakGlobalRef 来产生和解除引用.\n\n\t\tenv->NewWeakGlobalRef(_jobject * obj);\n\t\tenv->DeleteWeakGlobalRef(_jobject* obj);\n\n## 关于引用的一些函数\n\n\t\tjobject NewLocalRef( jobject obj);\n\t\tjobject NewGlobalRef( jobject obj);\n\t\tjboject NewWeakGlobalRef( jobject obj);\n\t\tvoid DeleteLocalRef( jobject obj);\n\t\tvoid DeleteGlobalRef( jobject obj);\n\t\tvoid DeleteWeakGlobalRef( jobject obj);\n\t\t//比较两个引用是否指向同一个Java对象\n\t\tjboolean IsSameObject(jobject obj1,Object obj2);\n\t\t这个函数对于弱全局引用还有一个特别的功能.\n\t\t把 NULL 传入要比较的对象中,就能判断弱全局引用所指向的Java对象是否被回收.\n\n# 9.JNI优化\n\n\t缓存 jfieldID/jmethodID\n\t\t\n\t\t取得 jfieldID跟jmethodID的时候会通过该属性/方法名称加上签名来查询相应的\n\t\tjfieldID/jmethodID.这种查询相对来说开销较大.我们可以将这些FieldID/MethodID\n\t\t缓存起来,这样只需要查询一次,以后就使用缓存起来的FieldID/MethodID了.\n\n\t\t两种缓存的方式:\n\t\t\t1.在用的时候缓存 (caching at the point of use)\n\t\t\t\t\n\t\t\t\t在Native Code 中使用static局部变量来保存已经查询过的id.这样就不会在每次\n\t\t\t\t函数调用时查询,而只要第一次查询成功后就保存起来了.\n\n\t\t\t\t不过在这种情况下就不得不考虑多线程同时呼叫此函数时可能会导致同时查询的危机.\n\t\t\t\t不过这种情况是无害的,因为查询同一个属性/方法的ID通常返回的是一样的值.\n\n```java\n\t/**缓存id*/\n\tpublic String cacheJfieldID = null;\n\tpublic String cacheJmethodID = null;\n```\n\n```c\n\tstatic jfieldID fieldID_string = NULL;\n\tjclass clazz = env->GetObjectClass(obj);\n\tif (fieldID_string == NULL) {\n\t\tfieldID_string = env->GetFieldID(clazz, \"cacheJfieldID\", \"Ljava/lang/String;\");\n\t}\n\t//other code...\n```\n\n\t\t\t\t\n\n2.在Java类初始化时缓存(caching at the defining Class's inititalizer)\n\t\t\t\t\n\t\t\t\t更好的一个方式就是在任何native函数调用前把id全部存起来.\n\n\t\t\t\t我们可以让java在第一次加载这个类的时候,首先调用本地代码初始化所以的\n\t\t\t\tjfieldID/jmethodID,这样的话就可以省去多次的确定id是否存在的语句,\n\t\t\t\t当然,这些jfieldID/jmethodID是定义在C/C++的全局.\n\t\t\t\t\n\t\t\t\t使用这种方式还有好处,当Java类卸载或是重新加载的时候也会重新呼叫\n\t\t\t\t该本地代码来重新计算IDs.\n\n\t\t\n```c\n\tpublic class Port {\n\t\tpublic int property = 55;\n\t\tpublic String message = \"123456\";\n\t\t/**缓存id*/\n\t\tstatic{\n\t\t\tinitNativeIDs();//初始化id\n\t\t}\n\t\t\t\n\t\tpublic static native void initNativeIDs(); \n\t\t//other code...\n\t}\n```\n\n```c\n\t//C\n\tjfieldID g_propInt_id = 0;\n\tjfieldID g_propStr_id = 0;\n\t/**Java初始化的时候缓存*/\n\tJNIEXPORT void JNICALL Java_com_tu_hellojni_jni_Port_initNativeIDs(JNIEnv * env, jclass clazz) {\n\t__android_log_print(ANDROID_LOG_INFO, \"JNIMsg\", \"\\n c-message: %s\", \"load.initNativeIDs..\");\n\tg_propInt_id = env->GetFieldID(clazz, \"property\", \"I\");\n\tg_propStr_id = env->GetFieldID(clazz, \"message\", \"Ljava/lang/String;\");\n}\n\t//other code...\n```\n\n\n# Demo下载\n\n![Demo](/res/img/blog/2014/11/01/Java_JNI/demo.gif)\n\n[本文Demo](/res/file/blog/2014/11/01/Java_JNI/HelloJNI.apk)  \n[本文Demo源代码](/res/file/blog/2014/11/01/Java_JNI/HelloJNI.rar)\n\n> 本博文暂时没有: 异常处理; C/C++如何启动JVM; JNI跟多线程;等介绍.有时间再后续...   \n> 介绍两本书:  \n> The Java Native interface Programmer's Guide and Specification  \n> JNI++ User Guider  \n\n\n\n\n\n","slug":"Java_JNI","published":1,"updated":"2016-04-27T03:34:30.622Z","comments":1,"photos":[],"link":"","_id":"cinu3etya0019xoj0wt8bdpwy","content":"<style>\nh3 {\n    line-height: 1;\n    letter-spacing: 2px;\n    margin-top: 5px;\n}\nh6 {\n    line-height: 1;\n    letter-spacing: 2px;\n    margin-top: 5px;\n}\n</style>\n\n<ul>\n<li>1.JNI简介</li>\n<li>2.最简单的Java调用C/C++代码的步骤</li>\n<li><p>3.在C/C++本地代码中访问Java代码简介</p>\n<ul>\n<li>3.1 JNIEnv 类型</li>\n<li>3.2 jobject</li>\n<li>3.3 jclass</li>\n<li>3.4 Java的类型在C/C++中的映射关系</li>\n</ul>\n</li>\n<li><p>4.在C/C++本地代码中访问Java类中的属性与方法</p>\n<ul>\n<li>4.1 jfieldID/jmethodID</li>\n<li>4.2 Sign签名</li>\n<li>4.3 使用Javap命令来产生Sign签名</li>\n<li>4.4 取得Java属性/设定Java属性值</li>\n<li>4.5 Java方法的调用</li>\n</ul>\n</li>\n<li>5.在C/C++本地代码中创建Java的对象<ul>\n<li>5.1 NewObject</li>\n<li>5.2 AllocObject</li>\n</ul>\n</li>\n<li><p>6.在C/C++本地代码中访问/创建Java的String字符串对象</p>\n<ul>\n<li>6.1 GetStringChars / GetStringUTFChars / ReleaseStringChars / ReleaseStringUTFChars</li>\n<li>6.2 GetStringCritical / ReleaseStringCritical</li>\n<li>6.3 GetStringRegion / GetStringUTFRegion</li>\n<li>6.4 字符串相关函数</li>\n</ul>\n</li>\n<li><p>7.在C/C++本地代码中操作Java的数组对象</p>\n<ul>\n<li>7.1处理基本类型数组</li>\n<li>7.2处理对象类型数组</li>\n</ul>\n</li>\n<li><p>8.全局引用/局部引用/弱全局引用</p>\n<ul>\n<li>8.1局部引用</li>\n<li>8.2全局引用</li>\n<li>8.2全局引用</li>\n<li>8.4关于引用的一些函数</li>\n</ul>\n</li>\n<li><p>9.JNI优化</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<hr>\n<h1 id=\"JNI简介\"><a href=\"#JNI简介\" class=\"headerlink\" title=\"JNI简介\"></a>JNI简介</h1><p>Java是跨平台的语言,但是在有些时候仍然是有需要调用要地代码(这些代码通常是由C/C++编写).<br>原Sun公司现Oracle公司提供的JNI是Java平台的一个功能强大的接口.<br>这个JNI接口提供了Java与操作系统本地代码互相调用的功能.  </p>\n<hr>\n<h1 id=\"最简单的Java调用C-C-代码的步骤\"><a href=\"#最简单的Java调用C-C-代码的步骤\" class=\"headerlink\" title=\"最简单的Java调用C/C++代码的步骤:\"></a>最简单的Java调用C/C++代码的步骤:</h1><pre><code>1.首先在Java类中声明一个native的方法  \n2.使用javah命令生成包含native方法声明的C/C++头文件  \n3.按照生成的C/C++头文件来写C/C++源文件.  \n4.将C/C++源文件编译成动态连接库(DLL , OS)  \n5.把DLL文件加入到Path环境变量下.  \n6.Java类中加载DLL,然后调用声明的native方法  \n</code></pre><hr>\n<h1 id=\"在C-C-本地代码中访问Java代码简介\"><a href=\"#在C-C-本地代码中访问Java代码简介\" class=\"headerlink\" title=\"在C/C++本地代码中访问Java代码简介\"></a>在C/C++本地代码中访问Java代码简介</h1><p>在被调用的C/C++函数中也可以反过来访问Java程序中的类<br>javah工具生成的C/C++函数声明中,可以看到有头两个参数 <strong>JNIEnv,jobject/jclass</strong></p>\n<p><pre class=\"brush: java;  highlight: [4,3]\"><br>    package com.tu.hellojni.jni;<br>    public class Port {<br>        public native String sayHello();//非静态函数<br>        public static native void sayHi(String str);//静态函数<br>    }<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```c</span><br><span class=\"line\">\tJNIEXPORT jstring JNICALL Java_com_tu_hellojni_jni_Port_sayHello (JNIEnv *, jobject);</span><br><span class=\"line\">\tJNIEXPORT void JNICALL Java_com_tu_hellojni_jni_Port_sayHi (JNIEnv *, jclass, jstring);</span><br></pre></td></tr></table></figure></pre></p>\n<hr>\n<h2 id=\"JNIEnv-类型\"><a href=\"#JNIEnv-类型\" class=\"headerlink\" title=\"JNIEnv 类型\"></a>JNIEnv 类型</h2><blockquote>\n<p>JNIEnv类型实际上代表了Java环境,通过这个JNIEnv*指针,就可以对Java端的代码进行操作.  </p>\n</blockquote>\n<pre><code>例如,创建Java类的对象,调用Java对象的方法,镬取Java对象的属性等等.    \n    JNIEnv的指针会被JNI传入到本地方法的实现函数中来对Java端的代码进行操作.    \n\nJNIEnv类中有很多函数可以用:  \n\nNewObject/NewString/New&lt;TYPE&gt;Array 创建一个对象,创建一个字符串, 创建一个对应类型的数组   \nGet/Set&lt;TYPE&gt;Field 获取/设置 某个类的属性     \nGet/SetStatic&lt;TYPE&gt;Field 获取/设置某个类的静态属性    \nCall&lt;TYPE&gt;Method/CallStatic&lt;TYPE&gt;Method 调用某一个类里的方法/调用某一个类的静态方法   \n等等的函数  \n</code></pre><hr>\n<h2 id=\"jobject\"><a href=\"#jobject\" class=\"headerlink\" title=\"jobject\"></a>jobject</h2><blockquote>\n<p>jobject <code>指向Java对象的实例</code> , 非静态函数中时会有jobject参数.<br>这个jobject指向的是如: Port p = new Port; 所指向的就是p对象.  </p>\n</blockquote>\n<hr>\n<h2 id=\"jclass\"><a href=\"#jclass\" class=\"headerlink\" title=\"jclass\"></a>jclass</h2><blockquote>\n<p>jclass <code>指向的是代表那个类的class对象</code>. 静态函数中会有jclass参数.<br>这个jclass指向的是如: Port.sayHi(“hi”); 所指向的是Port.class对象.  </p>\n<p>jclass的取得</p>\n</blockquote>\n<pre><code>为了能够在C/C++中使用Java类.JNI.h头文件中专门定义了jclass类型来表示java中的Class类\n</code></pre><p>JNIEnv类中有如下几个简单的函数可以取得jclass:</p>\n<ul>\n<li>jclass FindClass(const char* clsName); 通过完整的类名取得Class  </li>\n<li>jclass GetObjectClass(jobject obj); 通过对象获取到class对象. 类似于 Java中的 Object中getClass方法  </li>\n<li>jclass GetSuperClass(jclass obj); 通过当前jclass获取到父类的class  </li>\n</ul>\n<p>其中FindClass 会在classPath系统环境变量下寻找类.</p>\n<pre><code>传入完整类名,注意包与包之间是用&quot;/&quot;而不是&quot;.&quot;来分隔.\n如:\njclass cls_string = env-&gt;FindClass(&quot;java/lang/String&quot;);\n</code></pre><hr>\n<h2 id=\"Java的类型在C-C-中的映射关系\"><a href=\"#Java的类型在C-C-中的映射关系\" class=\"headerlink\" title=\"Java的类型在C/C++中的映射关系\"></a>Java的类型在C/C++中的映射关系</h2><table>\n<thead>\n<tr>\n<th>Java类型</th>\n<th style=\"text-align:left\">本地类型</th>\n<th style=\"text-align:right\">JNI定义的别名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>int</td>\n<td style=\"text-align:left\">long</td>\n<td style=\"text-align:right\">jint/jsize</td>\n</tr>\n<tr>\n<td>long</td>\n<td style=\"text-align:left\">__int64</td>\n<td style=\"text-align:right\">jlong</td>\n</tr>\n<tr>\n<td>byte</td>\n<td style=\"text-align:left\">signed char</td>\n<td style=\"text-align:right\">jbyte</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td style=\"text-align:left\">uncigned char</td>\n<td style=\"text-align:right\">jboolean</td>\n</tr>\n<tr>\n<td>char</td>\n<td style=\"text-align:left\">unsigned short</td>\n<td style=\"text-align:right\">jchar</td>\n</tr>\n<tr>\n<td>short</td>\n<td style=\"text-align:left\">short</td>\n<td style=\"text-align:right\">jshort</td>\n</tr>\n<tr>\n<td>float</td>\n<td style=\"text-align:left\">float</td>\n<td style=\"text-align:right\">jfloat</td>\n</tr>\n<tr>\n<td>double</td>\n<td style=\"text-align:left\">double</td>\n<td style=\"text-align:right\">jdouble</td>\n</tr>\n<tr>\n<td>object</td>\n<td style=\"text-align:left\">_jobject*</td>\n<td style=\"text-align:right\">jobject</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"在C-C-本地代码中访问Java类中的属性与方法\"><a href=\"#在C-C-本地代码中访问Java类中的属性与方法\" class=\"headerlink\" title=\"在C/C++本地代码中访问Java类中的属性与方法\"></a>在C/C++本地代码中访问Java类中的属性与方法</h1><h2 id=\"jfieldID-jmethodID\"><a href=\"#jfieldID-jmethodID\" class=\"headerlink\" title=\"jfieldID/jmethodID\"></a>jfieldID/jmethodID</h2><blockquote>\n<p>在C/C++本地代码中访问Java端的代码,一个常见的应用就是获取类的属性和调用类的方法,为了<br>在C/C++中表示属性和方法,JNI在Jni.h头文件中定义了<strong>jfieldID</strong>,<strong>JmethodID</strong>类型来分别代表Java类的属性和方法.  </p>\n</blockquote>\n<pre><code>我们在访问,或是设置Java属性的时候,首先就要先在本地代码获取代表该Java属性的jfieldID,\n然后才能在本地代码进行Java属性操作.\n同样的,我们需要呼叫Java端的方法时,也是需要取得代表该方法的jmethodID才能进行Java方法调用.\n\n使用JNIEnv的\n    GetFieldID/GetMethodID 取得属性/方法ID ( jfieldID / jmethodID)\n    GetStaticFieldID/GetStaticMethodID 取得静态属性/方法ID ( jfieldID / jmethodID )\n\n    来取得相应的jfieldID和jmethodID\n</code></pre><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">jfieldID <span class=\"title\">GetFieldID</span><span class=\"params\">(jclass clazz,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* name,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* sign)</span></span>;</span><br><span class=\"line\"><span class=\"function\">jfieldID <span class=\"title\">GetStaticFieldID</span><span class=\"params\">(jclass clazz,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* name,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* sign)</span></span>;</span><br><span class=\"line\"><span class=\"function\">jmethodID <span class=\"title\">GetMethodID</span><span class=\"params\">(jclass clazz,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* name,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* sign)</span></span>;</span><br><span class=\"line\"><span class=\"function\">jmethodID <span class=\"title\">GetStaticMethodID</span><span class=\"params\">(jclass clazz,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* name,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* sign)</span></span>;</span><br></pre></td></tr></table></figure>\n<pre><code>GetMethodID也能取得构造函数的jmethodID. 创建一个Java对象时可以调用\n指定的构造方法,这个将在下面的时候做介绍.\n    如:env-&gt;GetMethodID(data_Clazz,&quot;&lt;init&gt;&quot;,&quot;()V&quot;);\n\n类似Java的Reflect(反射机制)需要指定类跟属性/方法我哑取得相应的jfieldID跟jmethodID.\n\n方法参数: jclass clazz调用指定某个类. const char* name常量字符串,代表属性或者方法的名称.\n    const char* sign是当类中有两个重载方法时签名.\n\n例如: TestNative类中有两个重载方法:\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.tu.hellojni.jni;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestNative</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"TestNative.function(int i)\"</span> + i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">(<span class=\"keyword\">double</span> d)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"TestNative.function(double d)\"</span> + d);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>然后在C/C++代码中需要调用其中一个function方法的话.\n//首先取得要调用的方法所在的类\n\njclass clazz_TestNative = env-&gt;FindClass(&quot;com/tu/hellojni/jni/TestNative&quot;);\n//取得jmethodID之后才进行调用\njmethodID id_func = env-&gt;GetMethodID(clazz_testNative,&quot;function&quot;,&quot;??????&quot;);\n\n但是到底取得的是\nvoid function(int i )还是\nvoid function(double d)的jmethodID呢?\n这就是sign的作用了.它用于指定要取得的属性/方法类型.\n这里的sign如果指定为&quot;(I)V&quot;则取回void function(int)的jmethodID\n        如果指定为(D)V&quot;则取回void function(double)的jmethodID\n</code></pre><hr>\n<h2 id=\"Sign签名\"><a href=\"#Sign签名\" class=\"headerlink\" title=\"Sign签名\"></a>Sign签名</h2><pre><code>用来表示要取得的属性/方法的类型\n</code></pre><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>相应的签名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean</td>\n<td>Z</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>B</td>\n</tr>\n<tr>\n<td>char</td>\n<td>C</td>\n</tr>\n<tr>\n<td>short</td>\n<td>S</td>\n</tr>\n<tr>\n<td>int</td>\n<td>I</td>\n</tr>\n<tr>\n<td>long</td>\n<td>J</td>\n</tr>\n<tr>\n<td>float</td>\n<td>F</td>\n</tr>\n<tr>\n<td>double</td>\n<td>D</td>\n</tr>\n<tr>\n<td>void</td>\n<td>V</td>\n</tr>\n<tr>\n<td>object</td>\n<td>L用/分隔包的完整类名: Ljava/lang/String;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>[签名 如[I 整形数组 如[Ljava/lang/Object; 对象数组</td>\n</tr>\n<tr>\n<td>Method</td>\n<td>(参数1类型签名,参数2类型签名…)返回值类型签名 如:(ILjava/util/Date;[I)I</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"使用Javap命令来产生Sign签名\"><a href=\"#使用Javap命令来产生Sign签名\" class=\"headerlink\" title=\"使用Javap命令来产生Sign签名\"></a>使用Javap命令来产生Sign签名</h2><pre><code>从上面代码中的签名可以看出.如果是比较复杂的签名编写起来还是比较麻烦的.\n所以JDK也提供了一个工具javap来查看一个类的声明,其中就可以设置输出每个方法/属性的签名.\n\n语法: \n    javap -s -p [full Class Name]\n    -s 表示输出签名信息\n    -p 同-private,输出包含private 访问权限的成员信息\n\n使用方法:\n    1.cmd定位到工程目录下.\n    2.使用javap输入信息.\n</code></pre><p><pre class=\"brush: shell;  highlight: []\"><br>        C:\\Users\\ComTu&gt;cd E:\\ComTu_Design\\workspace\\workspace-Android\\HelloJ<br>        C:\\Users\\ComTu&gt;E:<br>        E:\\ComTu_Design\\workspace\\workspace-Android\\HelloJNI&gt;cd bin/classes</pre></p>\n<pre><code>E:\\ComTu_Design\\workspace\\workspace-Android\\HelloJNI\\bin\\classes&gt;jav\nCompiled from &quot;Port.java&quot;\npublic class com.tu.hellojni.jni.Port extends java.lang.Object{\npublic int property;\n  Signature: I\npublic com.tu.hellojni.jni.Port();\n  Signature: ()V\npublic native java.lang.String sayHello();\n  Signature: ()Ljava/lang/String;\npublic static native void sayHi(java.lang.String);\n  Signature: (Ljava/lang/String;)V\npublic native void testSign();\n  Signature: ()V\npublic void functionOverride();\n  Signature: ()V\npublic void functionOverride(int);\n  Signature: (I)V\npublic int function(int, java.util.Date, int[]);\n  Signature: (ILjava/util/Date;[I)I\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[在Eclipse中配置Javap快捷操作](/blog/2014/10/28/Android_NDK_IDE_environment_one.html)</span><br><span class=\"line\"></span><br><span class=\"line\">---\t</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 取得Java属性/设定Java属性值</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t取得了相应属性的 jfieldID 之后就可以用</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSet&lt;TYPE&gt;Field</span><br><span class=\"line\">\t\tGet&lt;TYPE&gt;Field</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSetStatic&lt;TYPE&gt;Filed</span><br><span class=\"line\">\t\tGetStatic&lt;TYPE&gt;File等函数来对Java属性进行操作了.  --&gt;TYPE泛指各种数据类型.</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t如: Boolean , Byte , Double , Float ,  Int  , Long , Short , Object</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t怎样获取数组属性呢?</span><br><span class=\"line\">\t\t\t可以使用GetObjectField来取得数组类型的属性.</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t案例:</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">\t//Java</span><br><span class=\"line\">\tpublic class Port&#123;</span><br><span class=\"line\">\t\t/** C进行get/set成员变量 */</span><br><span class=\"line\">\t\tpublic int property = 55;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t/** C进行Get/Set静态成员变量 */</span><br><span class=\"line\">\t\tpublic static boolean isShow = false;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//C</span></span><br><span class=\"line\">jclass port_clazz = env-&gt;GetObjectClass(obj);</span><br><span class=\"line\"><span class=\"comment\">//获取java成员变量</span></span><br><span class=\"line\"><span class=\"comment\">//public int property;</span></span><br><span class=\"line\">jfieldID fieldId_prop = env-&gt;GetFieldID(port_clazz, <span class=\"string\">\"property\"</span>, <span class=\"string\">\"I\"</span>);</span><br><span class=\"line\">jint prop = env-&gt;GetIntField(obj, fieldId_prop);<span class=\"comment\">//取值</span></span><br><span class=\"line\">__android_log_print(ANDROID_LOG_INFO, <span class=\"string\">\"JNIMsg\"</span>, <span class=\"string\">\"\\n c-int: %d\"</span>, prop);</span><br><span class=\"line\"><span class=\"comment\">//给java成员变量赋值</span></span><br><span class=\"line\">env-&gt;SetIntField(obj, fieldId_prop, <span class=\"number\">100L</span>);<span class=\"comment\">//赋值100L表示c中的100常整数类型.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取静态变量</span></span><br><span class=\"line\">jfieldID fieldId_isShow = env-&gt;GetStaticFieldID(port_clazz, <span class=\"string\">\"isShow\"</span>, <span class=\"string\">\"Z\"</span>);</span><br><span class=\"line\">jboolean jb = env-&gt;GetStaticBooleanField(port_clazz, fieldId_isShow);</span><br><span class=\"line\">__android_log_print(ANDROID_LOG_INFO, <span class=\"string\">\"JNIMsg\"</span>, <span class=\"string\">\"\\n c-boolean: %d\"</span>, jb);</span><br><span class=\"line\">jboolean b = !jb;</span><br><span class=\"line\">env-&gt;SetStaticBooleanField(port_clazz, fieldId_isShow, b);<span class=\"comment\">//给静态变量赋值</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Java方法的调用\"><a href=\"#Java方法的调用\" class=\"headerlink\" title=\"Java方法的调用\"></a>Java方法的调用</h2><pre><code>JNIEnv 提供了众多的Call&lt;TYPE&gt;Method 跟 CallStatic&lt;TYPT&gt;Method,还有\nCallNonvirtual&lt;TYPE&gt;Method函数.需要通过 GetMethodID 取得相应方法的 jmethodID来\n传入到函数参数中.\n\n调用实例方法的三种形式:\n    //第一种:最常用的方式\n    Call&lt;TYPE&gt;Method(jobject obj,jmethodID id,...); \n    //第二种:当调用这个函数的时候有一个指向参数表的va_list变量时使用的_很少使用到这种方式\n    Call&lt;TYPE&gt;MethodV(jobject obj,jmethodID id, va_list lst);\n    //第三种:当调用这个函数的时候有一个指向jvalue或者jvalue数组的指针时用的\n    Call&lt;TYPE&gt;MethodA(jobject obj,jmethodID id, jvalue * v);\n\n调用静态方法的三种形式:\n    CallStatic&lt;TYPE&gt;Method(jclass class , jmethodID id, ...);\n    CallStatic&lt;TYPE&gt;MethodV(jclass class , jmethodID id, va_list lst);\n    CallStatic&lt;TYPE&gt;MethodA(jclass class , jmethodID id, jvalue * v);\n\n第三种中的 jvalue 这个类型是一个联合体.\n源代码jni.h中:\n</code></pre><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//C</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">typedef</span> <span class=\"keyword\">union</span> jvalue &#123;</span><br><span class=\"line\">\t\t    jboolean    z;</span><br><span class=\"line\">\t\t    jbyte       b;</span><br><span class=\"line\">\t\t    jchar       c;</span><br><span class=\"line\">\t\t    jshort      s;</span><br><span class=\"line\">\t\t    jint        i;</span><br><span class=\"line\">\t\t    jlong       j;</span><br><span class=\"line\">\t\t    jfloat      f;</span><br><span class=\"line\">\t\t    jdouble     d;</span><br><span class=\"line\">\t\t    jobject     l;</span><br><span class=\"line\">\t\t&#125; jvalue;</span><br></pre></td></tr></table></figure>\n<pre><code>案例: \n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Port</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/** C调用重载成员函数_非静态方法 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">functionOverride</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Port.functionOverride()--参数:property&gt;\"</span> + property + <span class=\"string\">\"--isShow&gt;\"</span> + isShow);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** C调用重载成员函数_非静态方法 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">functionOverride</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Port.functionOverride(int i)--&gt;\"</span> + i + <span class=\"string\">\"--参数:property&gt;\"</span> + property + <span class=\"string\">\"--isShow&gt;\"</span> + isShow);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** C调用多参数签名_非静态方法 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">function</span><span class=\"params\">(<span class=\"keyword\">int</span> foo, Date date, <span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Port.function()foo&gt;\"</span> + foo + <span class=\"string\">\"===date&gt;\"</span> + date + <span class=\"string\">\"==arr&gt;\"</span> + arr);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> foo;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** C调用成员函数 的三种形式 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">function</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">double</span> d, <span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"===&gt;Port.function()i&gt;\"</span> + i + <span class=\"string\">\"===d&gt;\"</span> + d + <span class=\"string\">\"==c&gt;\"</span> + c);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//C</span></span><br><span class=\"line\">jclass port_clazz = env-&gt;GetObjectClass(obj);</span><br><span class=\"line\"><span class=\"comment\">//调用调用Java里的Port类的void functionOverride()重载函数_非静态函数</span></span><br><span class=\"line\">jmethodID id_func1 = env-&gt;GetMethodID(port_clazz, <span class=\"string\">\"functionOverride\"</span>, <span class=\"string\">\"()V\"</span>);</span><br><span class=\"line\">env-&gt;CallVoidMethod(obj, id_func1);<span class=\"comment\">//调用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用调用java里的Port类的void functionOverride(int )C调用重载函数_非静态函数</span></span><br><span class=\"line\">jmethodID id_func2 = env-&gt;GetMethodID(port_clazz, <span class=\"string\">\"functionOverride\"</span>, <span class=\"string\">\"(I)V\"</span>);</span><br><span class=\"line\">env-&gt;CallVoidMethod(obj, id_func2, <span class=\"number\">1L</span>);<span class=\"comment\">//调用,并需要一个参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用调用java里的Port类的public int function(int foo, Date data, int[] arr) --&gt;(ILjava/util/Date;[I)I</span></span><br><span class=\"line\">jmethodID methodID_func = env-&gt;GetMethodID(port_clazz, <span class=\"string\">\"function\"</span>, <span class=\"string\">\"(ILjava/util/Date;[I)I\"</span>);</span><br><span class=\"line\">env-&gt;CallIntMethod(obj, methodID_func, <span class=\"number\">100L</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);<span class=\"comment\">//调用Port的function方法,后面跟随三个参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">jmethodID methodID_func_IDC = env-&gt;GetMethodID(port_clazz, <span class=\"string\">\"function\"</span>, <span class=\"string\">\"(IDC)Z\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//调用实例方法的第一种形式: Call&amp;lt;TYPE&gt;Method(jobject obj,jmethodID id,...);</span></span><br><span class=\"line\">env-&gt;CallBooleanMethod(obj, methodID_func_IDC, <span class=\"number\">100L</span>, <span class=\"number\">3.14</span>, L<span class=\"string\">'1'</span>);<span class=\"comment\">// 100L长整型,3.14double, L'1'宽字符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用实例方法的第三种形式:</span></span><br><span class=\"line\">jvalue * j = new jvalue[<span class=\"number\">3</span>];</span><br><span class=\"line\">j[<span class=\"number\">0</span>].i = <span class=\"number\">50L</span>;</span><br><span class=\"line\">j[<span class=\"number\">1</span>].d = <span class=\"number\">3.1415</span>;</span><br><span class=\"line\">j[<span class=\"number\">2</span>].c = L<span class=\"string\">'5'</span>;</span><br><span class=\"line\">env-&gt;CallBooleanMethodA(obj, methodID_func_IDC, j);</span><br><span class=\"line\"><span class=\"keyword\">delete</span>[] j;<span class=\"comment\">//删除回收</span></span><br></pre></td></tr></table></figure>\n<pre><code>调用一个对象的父类的方法:\n    在JNI中定义的 CallNonvirtual&lt;TYPE&gt;Method 就能够实现子类对象调用父类方法的功能.\n\n    要使用它,首先要取得父类及要调用的父类方法的 jmethodID,方可.\n\n案例:\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"===&gt;Father.function()\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Father</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"===&gt;Child.function()\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Port</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/** C调用_子父类关系类 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Father father = <span class=\"keyword\">new</span> Child();\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//C</span></span><br><span class=\"line\"><span class=\"comment\">//调用子父类的成员变量方法:</span></span><br><span class=\"line\">jfieldID id_father = env-&gt;GetFieldID(port_clazz, <span class=\"string\">\"father\"</span>, <span class=\"string\">\"Lcom/tu/hellojni/jni/Father;\"</span>);</span><br><span class=\"line\">jobject father = env-&gt;GetObjectField(obj, id_father);</span><br><span class=\"line\"></span><br><span class=\"line\">jclass clazz_Father = env-&gt;FindClass(<span class=\"string\">\"com/tu/hellojni/jni/Father\"</span>);</span><br><span class=\"line\">jmethodID id_father_function = env-&gt;GetMethodID(clazz_Father, <span class=\"string\">\"function\"</span>, <span class=\"string\">\"()V\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">env-&gt;CallVoidMethod(father, id_father_function);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t以上代码相当于:</span></span><br><span class=\"line\"><span class=\"comment\">//  Port port = new Port();</span></span><br><span class=\"line\"><span class=\"comment\">//\tFather f = port.father; //--&gt;father成员变量是:public Father father = new Child();</span></span><br><span class=\"line\"><span class=\"comment\">//\tf.function();</span></span><br><span class=\"line\"><span class=\"comment\">//运行结果: ===&gt;Child.function()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t调用父类的方法</span></span><br><span class=\"line\">env-&gt;CallNonvirtualVoidMethod(father, clazz_Father, id_father_function);</span><br><span class=\"line\"><span class=\"comment\">//运行结果:===&gt;Father.function()</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"在C-C-本地代码中创建Java的对象\"><a href=\"#在C-C-本地代码中创建Java的对象\" class=\"headerlink\" title=\"在C/C++本地代码中创建Java的对象\"></a>在C/C++本地代码中创建Java的对象</h1><pre><code>创建Java对象有两种方式. (NewObject / AllocObject)\n</code></pre><h2 id=\"5-1-NewObject\"><a href=\"#5-1-NewObject\" class=\"headerlink\" title=\"5.1 NewObject\"></a>5.1 NewObject</h2><blockquote>\n<p>使用函数 NewObject 可以用来创建对象  </p>\n</blockquote>\n<pre><code>jobject NewObject(jclass clazz , jmethodID methodID,...)\n\nGetMethodID能够取得构造方法的 jmethodID .如果传入的要取得的方法名称设定为&quot;&lt;init&gt;&quot;就能够取得构造方法.  \n构造方法的方法返回值类型的签名始终为Void.\n\n    案例:\n</code></pre><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//C</span></span><br><span class=\"line\"><span class=\"comment\">//创建一个日期类Date对象并调用getTime方法</span></span><br><span class=\"line\">jclass clazz_date = env-&gt;FindClass(<span class=\"string\">\"java/util/Date\"</span>);</span><br><span class=\"line\">jmethodID mid_date = env-&gt;GetMethodID(clazz_date,<span class=\"string\">\"&amp;lt;init&gt;\"</span>,<span class=\"string\">\"()V\"</span>);</span><br><span class=\"line\">jobject now = env-&gt;NewObject(clazz_date,mid_date);</span><br><span class=\"line\"></span><br><span class=\"line\">jmethodID jmethodID_getTime = env-&gt;GetMethodID(clazz_date,<span class=\"string\">\"getTime\"</span>,<span class=\"string\">\"()J\"</span>);</span><br><span class=\"line\">jlong time = env-&gt;CallLongMethod(now,jmethodID_getTime);</span><br><span class=\"line\"></span><br><span class=\"line\">__android_log_print(ANDROID_LOG_INFO, <span class=\"string\">\"JNIMsg\"</span>, <span class=\"string\">\"\\n c-创建Date对象并调用getTime方法: %d\"</span>, time);</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"5-2-AllocObject\"><a href=\"#5-2-AllocObject\" class=\"headerlink\" title=\"5.2 AllocObject\"></a>5.2 AllocObject</h2><blockquote>\n<p>使用 AllocObject 方式创建对象(创建但未初始化,使用比较少.)<br>使用函数<strong>AllocObject</strong>可以根据传入的jclass创建一个Java对象,但是他的状态是非初始化的,<br>在使用这个对象之前绝对要用 <strong>CallNonvirtualVoidMethod</strong> 来调用该jclass的建构函数.<br>这样可以延迟构造函数的调用.这个部分用的很少.</p>\n</blockquote>\n<pre><code>案例: \n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Port</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/** C进行创建并初始化 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String STATIC_STR;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//C</span></span><br><span class=\"line\"><span class=\"comment\">//---&gt; AllocObject 创建延迟初始化的对象</span></span><br><span class=\"line\">jclass clazz_str = env-&gt;FindClass(<span class=\"string\">\"java/lang/String\"</span>);</span><br><span class=\"line\">jmethodID methodID_str = env-&gt;GetMethodID(clazz_str, <span class=\"string\">\"&amp;lt;init&gt;\"</span>, <span class=\"string\">\"([C)V\"</span>);<span class=\"comment\">//通过字符数组构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//预先创建一个没有初始化的字符串</span></span><br><span class=\"line\">jobject <span class=\"built_in\">string</span> = env-&gt;AllocObject(clazz_str);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个5个元素的字符数组,然后以'c','o','m','t','u'赋值</span></span><br><span class=\"line\">jcharArray arg = env-&gt;NewCharArray(<span class=\"number\">5</span>);</span><br><span class=\"line\">jchar buf[<span class=\"number\">5</span>];</span><br><span class=\"line\">buf[<span class=\"number\">0</span>] = <span class=\"number\">67</span>;</span><br><span class=\"line\">buf[<span class=\"number\">1</span>] = <span class=\"string\">'o'</span>;</span><br><span class=\"line\">buf[<span class=\"number\">2</span>] = <span class=\"string\">'m'</span>;</span><br><span class=\"line\">buf[<span class=\"number\">3</span>] = <span class=\"string\">'t'</span>;</span><br><span class=\"line\">buf[<span class=\"number\">4</span>] = <span class=\"string\">'u'</span>;</span><br><span class=\"line\">env-&gt;SetCharArrayRegion(arg, <span class=\"number\">0</span>, <span class=\"number\">5</span>, buf);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//呼叫构建函数</span></span><br><span class=\"line\">env-&gt;CallNonvirtualVoidMethod(<span class=\"built_in\">string</span>, clazz_str, methodID_str, arg);</span><br><span class=\"line\"></span><br><span class=\"line\">jclass clazz_this = env-&gt;GetObjectClass(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">jfieldID fieldID_str = env-&gt;GetStaticFieldID(clazz_this, <span class=\"string\">\"STATIC_STR\"</span>, <span class=\"string\">\"Ljava/lang/String;\"</span>);</span><br><span class=\"line\">env-&gt;SetStaticObjectField(clazz_this, fieldID_str, <span class=\"built_in\">string</span>);<span class=\"comment\">//给java静态变量赋值</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"在C-C-本地代码中访问-创建Java的String字符串对象\"><a href=\"#在C-C-本地代码中访问-创建Java的String字符串对象\" class=\"headerlink\" title=\"在C/C++本地代码中访问/创建Java的String字符串对象\"></a>在C/C++本地代码中访问/创建Java的String字符串对象</h1><pre><code>Java字符串&lt;--&gt;C/C++字符串\n\n    在Java中,使用的字符串String对象是Unicode(UTF-16)码, \n        即每个字符不论是中文英文还是符号,一个字符总是占两个字节.\n\nJava通过JNI接口可以将Java的字符串转换到C/C++中的宽字符串(wchar_t*),\n或者传回一个UTF-8的字符串(char*)到C/C++. \n返过来,C/C++可以通过一个宽字符串,或者一个UTF-8编码的字符串来创建一个Java端的String对象.\n\n\n获取Java中的String对象有如下几种函数:\n</code></pre><h2 id=\"GetStringChars-GetStringUTFChars-ReleaseStringChars-ReleaseStringUTFChars\"><a href=\"#GetStringChars-GetStringUTFChars-ReleaseStringChars-ReleaseStringUTFChars\" class=\"headerlink\" title=\"GetStringChars / GetStringUTFChars / ReleaseStringChars / ReleaseStringUTFChars .\"></a>GetStringChars / GetStringUTFChars / ReleaseStringChars / ReleaseStringUTFChars .</h2><pre><code>const jchar* GetStringChars (jstring str , jboolean* copied)\n    可以取得UTF-16编码的宽字符串(jchar*)\n    开新内存,然后把Java中的String拷贝到这个内存中,然后返回指向这个内存地址的指针.\n\nconst char* GetStringUTFChars (jstring str , jboolean* copied)\n    可以取得UTF-8编码的字符串(char*)\n    直接返回指向Java中String的内存的指针,这个时候\n    千万不要改变这个内存的内容,这将破坏String在Java中始终是常量这个原则.\n\n第二个参数jboolean* copied是用来标示是否对Java的String对象进行拷贝的.\n如果传入的这个jboolean指针不是 NULL ,则他会给该指针所指向的内存传入 JNI_TRUE\n或 JNI_FALSE 指示是否进行拷贝.\n传入 NULL 表示不关心是否拷贝字符串,它就不会被jboolean* 指向的内存赋值\n\n使用了如上这两个函数取得的字串,在不使用的时候,要使用\nReleaseStringChars / ReleaseStringUTFChars 来释放拷贝的内存,或者释放对Java的String对象的引用.\n\nReleaseStringChars (jstring jstr, const jchar* str); \nReleaseStringUTFChars (jstring jstr, const char* str);\n\n    第一个参数指定一个jstring变量,即要释放的本地字符串的来源.\n    第二个参数就是要释放的本地字符串.\n</code></pre><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">(JNIEnv * env, jobject obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//-------- GetStringChars / ReleaseStringChars / NewString -------------</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//获取jmethodID</span></span><br><span class=\"line\">\t\tjfieldID jfie_msg = env-&gt;GetFieldID(env-&gt;GetObjectClass(obj), <span class=\"string\">\"message\"</span>, <span class=\"string\">\"Ljava/lang/String;\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取到String属性</span></span><br><span class=\"line\">\t\tjstring j_msg = (jstring) env-&gt;GetObjectField(obj, jfie_msg);</span><br><span class=\"line\">\t\t<span class=\"comment\">//UTF-16编码的宽字符串(jchar*) const jchar* == const wchar_t*</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//\tJava-String-&gt;C-jchar*转换</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> jchar* jstr = env-&gt;GetStringChars(j_msg, NULL);<span class=\"comment\">//j_msg不能为null否则会抛异常</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//---------拷贝数据start--------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tjsize size = env-&gt;GetStringLength(j_msg);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//转换成宽字符串</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//\twstring wstr((const wchar_t*) jstr);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tjchar* jstrTemp = (jchar*) jstr;</span><br><span class=\"line\">\t\t<span class=\"comment\">//---------拷贝数据end--------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//回收本地字符串 _释放指针</span></span><br><span class=\"line\">\t\tenv-&gt;ReleaseStringChars(j_msg, jstr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//---------处理数据start--------------</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//倒序函数迭代字符串</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//\tstd::reverse(wstr.begin(), wstr.end());</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//---------处理数据end--------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//创建String对象并赋予Port的message变量中.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//\tjstring j_new_str = env-&gt;NewString((const jchar*) wstr.c_str(), (jint) wstr.size());</span></span><br><span class=\"line\">\t\tjstring j_new_str = env-&gt;NewString(jstrTemp, size);</span><br><span class=\"line\">\t\t<span class=\"comment\">//赋值给Java的Port的message变量</span></span><br><span class=\"line\">\t\tenv-&gt;SetObjectField(obj, jfie_msg, j_new_str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">```\t</span><br><span class=\"line\"></span><br><span class=\"line\">```c</span><br><span class=\"line\">\t<span class=\"comment\">//拷贝</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">cc2c</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* str)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>* strtemp = new <span class=\"keyword\">char</span>[<span class=\"built_in\">strlen</span>(str) + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"built_in\">strcpy</span>(strtemp, str);</span><br><span class=\"line\">\t\treturn strtemp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//简单倒序算法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">myReverse</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* str)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>* strtemp = cc2c(str);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(strtemp);</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> t;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len / <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tt = strtemp[i];</span><br><span class=\"line\">\t\t\tstrtemp[i] = strtemp[len - i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\tstrtemp[len - i - <span class=\"number\">1</span>] = t;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn strtemp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">(JNIEnv * env, jobject obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//------------------ GetStringUTFChars / ReleaseStringUTFChars / NewStringUTF -------</span></span><br><span class=\"line\">\t\tjfieldID jfie_msg = env-&gt;GetFieldID(env-&gt;GetObjectClass(obj), <span class=\"string\">\"message\"</span>, <span class=\"string\">\"Ljava/lang/String;\"</span>);</span><br><span class=\"line\">\t\tjstring j_msg = (jstring) env-&gt;GetObjectField(obj, jfie_msg);</span><br><span class=\"line\">\t\t<span class=\"comment\">//\tJava-String-&gt;C-jchar*转换</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* str = env-&gt;GetStringUTFChars(j_msg, NULL);</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>* strtemp = myReverse(str);</span><br><span class=\"line\">\t\tenv-&gt;ReleaseStringUTFChars(j_msg, str);</span><br><span class=\"line\">\t\tjstring j_new_str = env-&gt;NewStringUTF(strtemp);</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span>[] strtemp;</span><br><span class=\"line\">\t\tenv-&gt;SetObjectField(obj, jfie_msg, j_new_str);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"GetStringCritical-ReleaseStringCritical\"><a href=\"#GetStringCritical-ReleaseStringCritical\" class=\"headerlink\" title=\"GetStringCritical / ReleaseStringCritical .\"></a>GetStringCritical / ReleaseStringCritical .</h2><pre><code>为了增加直接传回指向Java字符串的指针的可能性(而不是拷贝),JDK1.2之后出来新的函数\n\nconst jchar* GetStringCritical (jstring str , jboolean* copied)\nvoid ReleaseStringCritical (jstring jstr,const jchar* str);\n\n注意:\n在 GetStringCritical / ReleaseStringCritical 方法之间是一个关键区.\n在这关键区之中绝对不能呼叫(call)JNI的其它函数,会造成当前线程中断或是会让当前线程\n等待的任何本地代码.否则将造成关键区代码执行期间垃圾回收器停止动作,任何触发垃圾\n回收的线程也会暂停.其它的触发垃圾回收器的线程不能前进,直到当前线程结束而激活垃圾回收器.\n\n在关键区中千万不要出现中断操作,或者在JVM中分配任何新对象.否则会造成JVM死锁\n\n虽说这个函数会增加直接传回指向Java字符串的指针的可能性,不过还是会根据情况传回拷贝过的字符串.\n\n不支持 GetStringUTFCritical ,没有这样一个函数,由于Java字符串用的是UTF16,要转\n成UTF8编码的字符串始终需要进行一次拷贝,所以没有这样的函数.\n</code></pre><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//--------------- GetStringCritical / ReleaseStringCritical ----------</span><br><span class=\"line\">void function(JNIEnv * env, jobject obj) &#123;</span><br><span class=\"line\">\t// 基本与 GetStringChars 一样</span><br><span class=\"line\">\tjfieldID jfie_msg = env-&gt;GetFieldID(env-&gt;GetObjectClass(obj), \"message\", \"Ljava/lang/String;\");</span><br><span class=\"line\">\tjstring j_msg = (jstring) env-&gt;GetObjectField(obj, jfie_msg);</span><br><span class=\"line\">\t//\tJava-String-&gt;C-jchar*转换</span><br><span class=\"line\">\tconst jchar* jstr = env-&gt;GetStringCritical(j_msg, NULL);//jstr_msg不能为null复杂会抛异常</span><br><span class=\"line\">\twstring wstr((const wchar_t*) jstr);</span><br><span class=\"line\">\tenv-&gt;ReleaseStringCritical(j_msg, jstr);</span><br><span class=\"line\">\tstd::reverse(wstr.begin(), wstr.end());</span><br><span class=\"line\">\tjstring j_new_str = env-&gt;NewString((const jchar*) wstr.c_str(), (jint) wstr.size());</span><br><span class=\"line\">\tenv-&gt;SetObjectField(obj, jfie_msg, j_new_str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"GetStringRegion-GetStringUTFRegion\"><a href=\"#GetStringRegion-GetStringUTFRegion\" class=\"headerlink\" title=\"GetStringRegion / GetStringUTFRegion .\"></a>GetStringRegion / GetStringUTFRegion .</h2><pre><code>Java 1.2之后出来的函数,这个函数的动作,是把Java字符串的内容直接拷贝到C/C++\n的字符数组中,在呼叫这个函数之前必须有一个C/C++分配出来的字符串,然后传入到\n这个函数中进行字符串的拷贝.\n\n由于C/C++中分配内存开销相对小,而且Java中的String内容拷贝的开销可以忽略,\n更好的一点是此函数不分配内存,不会抛OutOfMemoryError异常.\n\n//拷贝Java字符串并以UTF-8编码传入bufer\nGetStringUTFRegion(jstring str , jsize start , jsize len , char* buffer);\n\n//拷贝Java字符串并以UTF-16编码传入buffer\nGetStringRegion(jstring str, jsize start , jsize len, jchar* buffer);\n\nJava的String str:\n    A  B  C  D  E  F  G  H  I  J  K  L  M  N\n             ↑― start = 3  ↓  len = 10 ―↑ \n    env-&gt;GetStringRegion(str,3,10,buffer);//copy至buffer\n</code></pre><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//---------------- GetStringRegion / NewString ----------------</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">(JNIEnv * env, jobject obj)</span> </span>&#123;</span><br><span class=\"line\">\tjfieldID jfie_msg = env-&gt;GetFieldID(env-&gt;GetObjectClass(obj), <span class=\"string\">\"message\"</span>, <span class=\"string\">\"Ljava/lang/String;\"</span>);</span><br><span class=\"line\">\tjstring j_msg = (jstring) env-&gt;GetObjectField(obj, jfie_msg);</span><br><span class=\"line\"></span><br><span class=\"line\">\tjsize jm_len = env-&gt;GetStringLength(j_msg);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//创建一个数组长度为message字符串的长度+1(结尾符)</span></span><br><span class=\"line\">\tjchar* jstr = new jchar[jm_len + <span class=\"number\">1</span>];</span><br><span class=\"line\">\tjstr[jm_len] = L<span class=\"string\">'\\0'</span>;<span class=\"comment\">//C++中都会有结尾符,不然会出现乱码.</span></span><br><span class=\"line\">\t<span class=\"comment\">//拷贝到字符数组里</span></span><br><span class=\"line\">\tenv-&gt;GetStringRegion(j_msg, <span class=\"number\">0</span>, jm_len, jstr);</span><br><span class=\"line\">\t<span class=\"comment\">//\twstring wstr((const wchar_t*) jstr);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//std::reverse(wstr.begin(), wstr.end());</span></span><br><span class=\"line\">\tjstring j_new_str = env-&gt;NewString((const jchar*) jstr,jm_len);</span><br><span class=\"line\"></span><br><span class=\"line\">\tenv-&gt;SetObjectField(obj, jfie_msg, j_new_str);</span><br><span class=\"line\">\t<span class=\"comment\">//删除不必要的内存</span></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] jstr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//---------------- GetStringUTFRegion / NewStringUTF ----------------</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">(JNIEnv * env, jobject obj)</span> </span>&#123;</span><br><span class=\"line\">\tjfieldID jfie_msg = env-&gt;GetFieldID(env-&gt;GetObjectClass(obj), <span class=\"string\">\"message\"</span>, <span class=\"string\">\"Ljava/lang/String;\"</span>);</span><br><span class=\"line\">\tjstring j_msg = (jstring) env-&gt;GetObjectField(obj, jfie_msg);</span><br><span class=\"line\"></span><br><span class=\"line\">\tjsize jm_len = env-&gt;GetStringLength(j_msg);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* buffer  = new <span class=\"keyword\">char</span>[jm_len + <span class=\"number\">1</span>];</span><br><span class=\"line\">\tenv-&gt;GetStringUTFRegion(j_msg, <span class=\"number\">0</span>, jm_len, buffer);</span><br><span class=\"line\">\t<span class=\"comment\">//\twstring wstr((const wchar_t*) jstr);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//std::reverse(wstr.begin(), wstr.end());</span></span><br><span class=\"line\">\tjstring j_new_str = env-&gt;NewStringUTF((const char*) buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">\tenv-&gt;SetObjectField(obj, jfie_msg, j_new_str);</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] buffer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串相关函数\"><a href=\"#字符串相关函数\" class=\"headerlink\" title=\"字符串相关函数\"></a>字符串相关函数</h2><pre><code>jstring NewString(const jchar* str, jsize len); //创建一个字符串\njstring NewStringUTF(const char* str); //创建一个UTF8的字符串\njsize GetStringLength(jstring str);// 字符串的长度\njsize GetStringUTFLength(jstring str);//UTF会占用多少个字节\n</code></pre><h1 id=\"7-在C-C-本地代码中操作Java的数组对象\"><a href=\"#7-在C-C-本地代码中操作Java的数组对象\" class=\"headerlink\" title=\"7.在C/C++本地代码中操作Java的数组对象\"></a>7.在C/C++本地代码中操作Java的数组对象</h1><pre><code>1.基本类型的数组\n2.对象类型(Objcet[])的数组\n\n一个能通用于两种不同类型数组的函数\nGetArrayLength(jarray aray);//获取数组长度\n</code></pre><h2 id=\"处理基本类型数组\"><a href=\"#处理基本类型数组\" class=\"headerlink\" title=\"处理基本类型数组\"></a>处理基本类型数组</h2><pre><code>Get&lt;TYPE&gt;ArrayElements(&lt;TYPE&gt;Array arr, jboolean* iscopied);\n    这类函数可以把Java基本类型的数组转换到C/C++中的数组,有两种处理方式,\n    1.拷贝一份传回本地代码,\n    2.把指向Java数组的指针直接传回到本地代码.\n    处理完本地代码的数组后,通过 Release&lt;TYPE&gt;ArrayElements来释放数组.\n\nRelease&lt;TYPE&gt;ArrayElements(&lt;TYPE&gt;Array arr,&lt;TYPE&gt;* array,jint mode)\n    用这个函数可以选择将如何处理Java跟C++的数组,是提交,撤消,内存释放,还是不释放等.\n    mode可以取下面的值:\n    0          -&gt; 对Java的数组进行更新并释放C/C++的数组.\n    JNI_COMMIT -&gt; 对Java的数组进行更新但不释放C/C++的数组.\n    JNI_ABORT  -&gt; 对Java的数组不进行更新,释放C/C++的数组.\n\nGetPrimitiveArrayCritical(jarray arr , jboolean* isCopied);\nReleasePrimitiveArrayCritical(jarray arr , void* array,jint mode);\n    也是JDK1.2出来的,为了增加直接传回指向Java数组的指针而加入的函数,同样的,\n    也会有同 GetStringCritical 的死锁的问题.\n\nGet&lt;TYPE&gt;ArrayRegion(&lt;TYPE&gt;Array arr, jsize start , jsize len , &lt;TYPE&gt;* buffere);\n    在C/C++预先开辟一段内存,然后把Java基本类型的数组拷贝到这段内存中.\n    跟 GetStringRegion原理类似\n\nSet&lt;TYPE&gt;ArrayRegion(&lt;TYPE&gt;Array arr , jsize start, jsize len , const &lt;TYPE&gt;* buffer);\n    把Java基本类型的数组中的指定范围的元素用C/C++的数组中的元素来赋值.\n\n&lt;TYPE&gt;Array New&lt;TYPE&gt;Array(jsize sz)\n    指定一个长度然后返回相应Java基本类型的数组.\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//java</span></span><br><span class=\"line\"><span class=\"comment\">/** C调用Get/Set成员变量 数组 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] ints = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; <span class=\"number\">67</span>, <span class=\"number\">111</span>, <span class=\"number\">109</span>, <span class=\"number\">116</span>, <span class=\"number\">117</span> &#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//c</span></span><br><span class=\"line\"><span class=\"comment\">//---- GetIntArrayElements / ReleaseIntArrayElements / ReleaseIntArrayElements / ReleaseIntArrayElements ----</span></span><br><span class=\"line\"><span class=\"comment\">//基本数据类型数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">(JNIEnv * env, jobject obj)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//取得属性Id</span></span><br><span class=\"line\">\tjfieldID fieldId = env-&gt;GetFieldID(env-&gt;GetObjectClass(obj), <span class=\"string\">\"ints\"</span>, <span class=\"string\">\"[I\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//通过属性id取得数组变量</span></span><br><span class=\"line\">\tjintArray ints = (jintArray) env-&gt;GetObjectField(obj, fieldId);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//转取得本地数组</span></span><br><span class=\"line\">\tjint* int_arr = env-&gt;GetIntArrayElements(ints, NULL);</span><br><span class=\"line\">\tjsize len = env-&gt;GetArrayLength(ints);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//C基本库 . 对数组进行排序,迭代器需要两个参数,第一个是array首地址,第二个是array尾地址</span></span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::sort(int_arr, int_arr + len);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (jsize i = <span class=\"number\">0</span>; i &amp;lt; len; ++i) &#123;</span><br><span class=\"line\">\t\t__android_log_print(ANDROID_LOG_INFO, <span class=\"string\">\"JNIMsg\"</span>, <span class=\"string\">\"\\n c-intArray[]: %d\"</span>, int_arr[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//对Java的数组进行更新并释放C/C++的数组.</span></span><br><span class=\"line\">\tenv-&gt;ReleaseIntArrayElements(ints, int_arr, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//对Java的数组进行更新但不释放C/C++的数组.</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tenv-&gt;ReleaseIntArrayElements(ints, int_arr, JNI_COMMIT);</span></span><br><span class=\"line\">\t<span class=\"comment\">//对Java的数组不进行更新,释放C/C++的数组.</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tenv-&gt;ReleaseIntArrayElements(ints, int_arr, JNI_ABORT);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"处理对象类型数组\"><a href=\"#处理对象类型数组\" class=\"headerlink\" title=\"处理对象类型数组\"></a>处理对象类型数组</h2><pre><code>JNI没有提供直接把Java的对象类型数组(Object[])直接传到C++中的jobject[]数组的函数.\n而是直接通过 Get/SetObjectArrayElement 这样的函数来对Java的Object[]数组进行操作.\n\n\n使用上述的函数也不用释放任何资源.\n\nNewObjectArray 可以通过指定长度跟初始值来创建某个类的数组.\n</code></pre><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//c</span></span><br><span class=\"line\"><span class=\"comment\">// ----- GetObjectArrayElement /  NewObjectArray / SetObjectArrayElement ------</span></span><br><span class=\"line\"><span class=\"comment\">//对象数据类型数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">(JNIEnv * env, jobject obj)</span> </span>&#123;</span><br><span class=\"line\">\tjfieldID fieldStrId = env-&gt;GetFieldID(jclazz, <span class=\"string\">\"strs\"</span>, <span class=\"string\">\"[Ljava/lang/String;\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//获取java的对象数组</span></span><br><span class=\"line\">\tjobjectArray str_arr = (jobjectArray) env-&gt;GetObjectField(obj, fieldStrId);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> lenStr = env-&gt;GetArrayLength(str_arr);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n c-stringArray :\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//读Java的以String数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; lenStr; i++) &#123;</span><br><span class=\"line\">\t\tjobject obj = env-&gt;GetObjectArrayElement(str_arr, i);</span><br><span class=\"line\">\t\tjstring str = (jstring) obj;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * szStr = env-&gt;GetStringUTFChars(str, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\" %d-%s \"</span>, i, szStr);</span><br><span class=\"line\">\t\t__android_log_print(ANDROID_LOG_INFO, <span class=\"string\">\"JNIMsg\"</span>, <span class=\"string\">\"\\n c-StringArray[]: %d - %s\"</span>, i, szStr);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> jchar * chars = (const jchar *) szStr;</span><br><span class=\"line\">\t\tenv-&gt;ReleaseStringChars(str, chars);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//创建一个对象数组 , 为Java对象数组赋值并更新.</span></span><br><span class=\"line\">\tjstring str;</span><br><span class=\"line\">\tjobjectArray args = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tjsize size = <span class=\"number\">7</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* sa[] = &#123; <span class=\"string\">\"Hello,\"</span>, <span class=\"string\">\"world!\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"o\"</span>, <span class=\"string\">\"m\"</span>, <span class=\"string\">\"t\"</span>, <span class=\"string\">\"u\"</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tjclass objClass = env-&gt;FindClass(<span class=\"string\">\"java/lang/String\"</span>);</span><br><span class=\"line\">\targs = env-&gt;NewObjectArray(size, objClass, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; size; j++) &#123;</span><br><span class=\"line\">\t\tstr = env-&gt;NewStringUTF(sa[j]);</span><br><span class=\"line\">\t\tenv-&gt;SetObjectArrayElement(args, j, str);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (j &lt; lenStr)<span class=\"comment\">//给Java数组赋数组下标越界抛异常 ,</span></span><br><span class=\"line\">\t\t\tenv-&gt;SetObjectArrayElement(str_arr, j, str);<span class=\"comment\">//自动更新Java类中的strs对象数组</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//\t不需要释放任何资源.</span></span><br><span class=\"line\">\t<span class=\"comment\">//args 新创建的 String 数组.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"8-全局引用-局部引用-弱全局引用\"><a href=\"#8-全局引用-局部引用-弱全局引用\" class=\"headerlink\" title=\"8.全局引用/局部引用/弱全局引用\"></a>8.全局引用/局部引用/弱全局引用</h1><pre><code>从Java虚拟机创建的对象传到本地C/C++代码时会产生引用.根据Java的垃圾回收机制,只要有引用\n存在就不会触发该引用指向的Java对象的垃圾回收.\n\n这些引用在JNI中分三种:\n    全局引用(Global Reference)\n    局部引用(Local Reference)\n    弱全局引用(Weak Global Reference ) Since JDK1.2\n</code></pre><h2 id=\"局部引用\"><a href=\"#局部引用\" class=\"headerlink\" title=\"局部引用\"></a>局部引用</h2><pre><code>最常见的引用类型,基本上通过JNI返回来的引用都是局部引用.\n    例如使用NewObject就会返回创建出来的实例的局部引用.局部引用只在该\n    native函数中有效,所有在该函数中产生的局部引用,都会在函数返回的时候\n    自动释放(freed).也可以使用 DeleteLocalRef 函数手动释放该引用.\n\n实际上局部引用存在,就会防止其指向的对象被垃圾回收,尤其是当一个局部引用\n指向一个很庞大的对象,或是在一个循环中生成了局部引用,最好的做法就是在使用完该\n对象后,或在该循环尾部把这个引用释放掉,以确保在垃圾回收器被触发的时候被回收.\n\n在局部引用的有效期中,可以传递到别的本地函数中,要强调的是他的有效期仍然只在\n一次的Java本地函数调用中,所以千万不能用C++全局变量保存他或是把他定义为C++\n静态局部变量.\n\nenv-&gt;NewLocalRef(_jobject* localRef);\nenv-&gt;DeleteLocalRef(_jobject* localRef);\n</code></pre><h2 id=\"全局引用\"><a href=\"#全局引用\" class=\"headerlink\" title=\"全局引用\"></a>全局引用</h2><pre><code>全局引用可以跨越当前线程,在多个native函数中有效,不过需要编程人员手动\n来释放该引用.全局引用存在期间会防止在Java的垃圾回收的回收.\n\n与局部引用不同,全局引用的创建不是由JNI自动创建的,全局引用是需要\n调用 NewGlobalRef 函数,而释放他需要使用 DeleteGlobalRef 函数.\n\nenv-&gt;NewGlobalRef(_jobject* obj);\nenv-&gt;DeleteGlobalRef(_jobject * globalRef);\n</code></pre><h2 id=\"弱全局引用\"><a href=\"#弱全局引用\" class=\"headerlink\" title=\"弱全局引用\"></a>弱全局引用</h2><pre><code>Java 1.2后出来的功能,与全局引用相似,创建跟删除都需要由编程人员来进行.\n这种引用与全局引用一样可以在多个本地代码有效,也跨越多线程有效,不一样的是,\n这种引用将不会阻止垃圾回收器回收这个引用所指向的对象.\n\n使用 NewWeakGlobalRef 跟 DeleteWeakGlobalRef 来产生和解除引用.\n\nenv-&gt;NewWeakGlobalRef(_jobject * obj);\nenv-&gt;DeleteWeakGlobalRef(_jobject* obj);\n</code></pre><h2 id=\"关于引用的一些函数\"><a href=\"#关于引用的一些函数\" class=\"headerlink\" title=\"关于引用的一些函数\"></a>关于引用的一些函数</h2><pre><code>jobject NewLocalRef( jobject obj);\njobject NewGlobalRef( jobject obj);\njboject NewWeakGlobalRef( jobject obj);\nvoid DeleteLocalRef( jobject obj);\nvoid DeleteGlobalRef( jobject obj);\nvoid DeleteWeakGlobalRef( jobject obj);\n//比较两个引用是否指向同一个Java对象\njboolean IsSameObject(jobject obj1,Object obj2);\n这个函数对于弱全局引用还有一个特别的功能.\n把 NULL 传入要比较的对象中,就能判断弱全局引用所指向的Java对象是否被回收.\n</code></pre><h1 id=\"9-JNI优化\"><a href=\"#9-JNI优化\" class=\"headerlink\" title=\"9.JNI优化\"></a>9.JNI优化</h1><pre><code>缓存 jfieldID/jmethodID\n\n    取得 jfieldID跟jmethodID的时候会通过该属性/方法名称加上签名来查询相应的\n    jfieldID/jmethodID.这种查询相对来说开销较大.我们可以将这些FieldID/MethodID\n    缓存起来,这样只需要查询一次,以后就使用缓存起来的FieldID/MethodID了.\n\n    两种缓存的方式:\n        1.在用的时候缓存 (caching at the point of use)\n\n            在Native Code 中使用static局部变量来保存已经查询过的id.这样就不会在每次\n            函数调用时查询,而只要第一次查询成功后就保存起来了.\n\n            不过在这种情况下就不得不考虑多线程同时呼叫此函数时可能会导致同时查询的危机.\n            不过这种情况是无害的,因为查询同一个属性/方法的ID通常返回的是一样的值.\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**缓存id*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String cacheJfieldID = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> String cacheJmethodID = <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> jfieldID fieldID_string = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">jclass clazz = env-&gt;GetObjectClass(obj);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fieldID_string == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\tfieldID_string = env-&gt;GetFieldID(clazz, <span class=\"string\">\"cacheJfieldID\"</span>, <span class=\"string\">\"Ljava/lang/String;\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//other code...</span></span><br></pre></td></tr></table></figure>\n<p>2.在Java类初始化时缓存(caching at the defining Class’s inititalizer)</p>\n<pre><code>更好的一个方式就是在任何native函数调用前把id全部存起来.\n\n我们可以让java在第一次加载这个类的时候,首先调用本地代码初始化所以的\njfieldID/jmethodID,这样的话就可以省去多次的确定id是否存在的语句,\n当然,这些jfieldID/jmethodID是定义在C/C++的全局.\n\n使用这种方式还有好处,当Java类卸载或是重新加载的时候也会重新呼叫\n该本地代码来重新计算IDs.\n</code></pre><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> Port &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> property = <span class=\"number\">55</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String message = <span class=\"string\">\"123456\"</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**缓存id*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">\t\tinitNativeIDs();<span class=\"comment\">//初始化id</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> native <span class=\"keyword\">void</span> <span class=\"title\">initNativeIDs</span><span class=\"params\">()</span></span>; </span><br><span class=\"line\">\t<span class=\"comment\">//other code...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"comment\">//C</span></span><br><span class=\"line\">\tjfieldID g_propInt_id = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tjfieldID g_propStr_id = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**Java初始化的时候缓存*/</span></span><br><span class=\"line\">\t<span class=\"function\">JNIEXPORT <span class=\"keyword\">void</span> JNICALL <span class=\"title\">Java_com_tu_hellojni_jni_Port_initNativeIDs</span><span class=\"params\">(JNIEnv * env, jclass clazz)</span> </span>&#123;</span><br><span class=\"line\">\t__android_log_print(ANDROID_LOG_INFO, <span class=\"string\">\"JNIMsg\"</span>, <span class=\"string\">\"\\n c-message: %s\"</span>, <span class=\"string\">\"load.initNativeIDs..\"</span>);</span><br><span class=\"line\">\tg_propInt_id = env-&gt;GetFieldID(clazz, <span class=\"string\">\"property\"</span>, <span class=\"string\">\"I\"</span>);</span><br><span class=\"line\">\tg_propStr_id = env-&gt;GetFieldID(clazz, <span class=\"string\">\"message\"</span>, <span class=\"string\">\"Ljava/lang/String;\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//other code...</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Demo下载\"><a href=\"#Demo下载\" class=\"headerlink\" title=\"Demo下载\"></a>Demo下载</h1><p><img src=\"/res/img/blog/2014/11/01/Java_JNI/demo.gif\" alt=\"Demo\"></p>\n<p><a href=\"/res/file/blog/2014/11/01/Java_JNI/HelloJNI.apk\">本文Demo</a><br><a href=\"/res/file/blog/2014/11/01/Java_JNI/HelloJNI.rar\">本文Demo源代码</a></p>\n<blockquote>\n<p>本博文暂时没有: 异常处理; C/C++如何启动JVM; JNI跟多线程;等介绍.有时间再后续…<br>介绍两本书:<br>The Java Native interface Programmer’s Guide and Specification<br>JNI++ User Guider  </p>\n</blockquote>\n","excerpt":"<style>\nh3 {\n    line-height: 1;\n    letter-spacing: 2px;\n    margin-top: 5px;\n}\nh6 {\n    line-height: 1;\n    letter-spacing: 2px;\n    margin-top: 5px;\n}\n</style>\n\n<ul>\n<li>1.JNI简介</li>\n<li>2.最简单的Java调用C/C++代码的步骤</li>\n<li><p>3.在C/C++本地代码中访问Java代码简介</p>\n<ul>\n<li>3.1 JNIEnv 类型</li>\n<li>3.2 jobject</li>\n<li>3.3 jclass</li>\n<li>3.4 Java的类型在C/C++中的映射关系</li>\n</ul>\n</li>\n<li><p>4.在C/C++本地代码中访问Java类中的属性与方法</p>\n<ul>\n<li>4.1 jfieldID/jmethodID</li>\n<li>4.2 Sign签名</li>\n<li>4.3 使用Javap命令来产生Sign签名</li>\n<li>4.4 取得Java属性/设定Java属性值</li>\n<li>4.5 Java方法的调用</li>\n</ul>\n</li>\n<li>5.在C/C++本地代码中创建Java的对象<ul>\n<li>5.1 NewObject</li>\n<li>5.2 AllocObject</li>\n</ul>\n</li>\n<li><p>6.在C/C++本地代码中访问/创建Java的String字符串对象</p>\n<ul>\n<li>6.1 GetStringChars / GetStringUTFChars / ReleaseStringChars / ReleaseStringUTFChars</li>\n<li>6.2 GetStringCritical / ReleaseStringCritical</li>\n<li>6.3 GetStringRegion / GetStringUTFRegion</li>\n<li>6.4 字符串相关函数</li>\n</ul>\n</li>\n<li><p>7.在C/C++本地代码中操作Java的数组对象</p>\n<ul>\n<li>7.1处理基本类型数组</li>\n<li>7.2处理对象类型数组</li>\n</ul>\n</li>\n<li><p>8.全局引用/局部引用/弱全局引用</p>\n<ul>\n<li>8.1局部引用</li>\n<li>8.2全局引用</li>\n<li>8.2全局引用</li>\n<li>8.4关于引用的一些函数</li>\n</ul>\n</li>\n<li><p>9.JNI优化</p>\n</li>\n</ul>","more":"<hr>\n<h1 id=\"JNI简介\"><a href=\"#JNI简介\" class=\"headerlink\" title=\"JNI简介\"></a>JNI简介</h1><p>Java是跨平台的语言,但是在有些时候仍然是有需要调用要地代码(这些代码通常是由C/C++编写).<br>原Sun公司现Oracle公司提供的JNI是Java平台的一个功能强大的接口.<br>这个JNI接口提供了Java与操作系统本地代码互相调用的功能.  </p>\n<hr>\n<h1 id=\"最简单的Java调用C-C-代码的步骤\"><a href=\"#最简单的Java调用C-C-代码的步骤\" class=\"headerlink\" title=\"最简单的Java调用C/C++代码的步骤:\"></a>最简单的Java调用C/C++代码的步骤:</h1><pre><code>1.首先在Java类中声明一个native的方法  \n2.使用javah命令生成包含native方法声明的C/C++头文件  \n3.按照生成的C/C++头文件来写C/C++源文件.  \n4.将C/C++源文件编译成动态连接库(DLL , OS)  \n5.把DLL文件加入到Path环境变量下.  \n6.Java类中加载DLL,然后调用声明的native方法  \n</code></pre><hr>\n<h1 id=\"在C-C-本地代码中访问Java代码简介\"><a href=\"#在C-C-本地代码中访问Java代码简介\" class=\"headerlink\" title=\"在C/C++本地代码中访问Java代码简介\"></a>在C/C++本地代码中访问Java代码简介</h1><p>在被调用的C/C++函数中也可以反过来访问Java程序中的类<br>javah工具生成的C/C++函数声明中,可以看到有头两个参数 <strong>JNIEnv,jobject/jclass</strong></p>\n<p><pre class=\"brush: java;  highlight: [4,3]\"><br>    package com.tu.hellojni.jni;<br>    public class Port {<br>        public native String sayHello();//非静态函数<br>        public static native void sayHi(String str);//静态函数<br>    }<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```c</span><br><span class=\"line\">\tJNIEXPORT jstring JNICALL Java_com_tu_hellojni_jni_Port_sayHello (JNIEnv *, jobject);</span><br><span class=\"line\">\tJNIEXPORT void JNICALL Java_com_tu_hellojni_jni_Port_sayHi (JNIEnv *, jclass, jstring);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"JNIEnv-类型\"><a href=\"#JNIEnv-类型\" class=\"headerlink\" title=\"JNIEnv 类型\"></a>JNIEnv 类型</h2><blockquote>\n<p>JNIEnv类型实际上代表了Java环境,通过这个JNIEnv*指针,就可以对Java端的代码进行操作.  </p>\n</blockquote>\n<pre><code>例如,创建Java类的对象,调用Java对象的方法,镬取Java对象的属性等等.    \n    JNIEnv的指针会被JNI传入到本地方法的实现函数中来对Java端的代码进行操作.    \n\nJNIEnv类中有很多函数可以用:  \n\nNewObject/NewString/New&lt;TYPE&gt;Array 创建一个对象,创建一个字符串, 创建一个对应类型的数组   \nGet/Set&lt;TYPE&gt;Field 获取/设置 某个类的属性     \nGet/SetStatic&lt;TYPE&gt;Field 获取/设置某个类的静态属性    \nCall&lt;TYPE&gt;Method/CallStatic&lt;TYPE&gt;Method 调用某一个类里的方法/调用某一个类的静态方法   \n等等的函数  \n</code></pre><hr>\n<h2 id=\"jobject\"><a href=\"#jobject\" class=\"headerlink\" title=\"jobject\"></a>jobject</h2><blockquote>\n<p>jobject <code>指向Java对象的实例</code> , 非静态函数中时会有jobject参数.<br>这个jobject指向的是如: Port p = new Port; 所指向的就是p对象.  </p>\n</blockquote>\n<hr>\n<h2 id=\"jclass\"><a href=\"#jclass\" class=\"headerlink\" title=\"jclass\"></a>jclass</h2><blockquote>\n<p>jclass <code>指向的是代表那个类的class对象</code>. 静态函数中会有jclass参数.<br>这个jclass指向的是如: Port.sayHi(“hi”); 所指向的是Port.class对象.  </p>\n<p>jclass的取得</p>\n</blockquote>\n<pre><code>为了能够在C/C++中使用Java类.JNI.h头文件中专门定义了jclass类型来表示java中的Class类\n</code></pre><p>JNIEnv类中有如下几个简单的函数可以取得jclass:</p>\n<ul>\n<li>jclass FindClass(const char* clsName); 通过完整的类名取得Class  </li>\n<li>jclass GetObjectClass(jobject obj); 通过对象获取到class对象. 类似于 Java中的 Object中getClass方法  </li>\n<li>jclass GetSuperClass(jclass obj); 通过当前jclass获取到父类的class  </li>\n</ul>\n<p>其中FindClass 会在classPath系统环境变量下寻找类.</p>\n<pre><code>传入完整类名,注意包与包之间是用&quot;/&quot;而不是&quot;.&quot;来分隔.\n如:\njclass cls_string = env-&gt;FindClass(&quot;java/lang/String&quot;);\n</code></pre><hr>\n<h2 id=\"Java的类型在C-C-中的映射关系\"><a href=\"#Java的类型在C-C-中的映射关系\" class=\"headerlink\" title=\"Java的类型在C/C++中的映射关系\"></a>Java的类型在C/C++中的映射关系</h2><table>\n<thead>\n<tr>\n<th>Java类型</th>\n<th style=\"text-align:left\">本地类型</th>\n<th style=\"text-align:right\">JNI定义的别名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>int</td>\n<td style=\"text-align:left\">long</td>\n<td style=\"text-align:right\">jint/jsize</td>\n</tr>\n<tr>\n<td>long</td>\n<td style=\"text-align:left\">__int64</td>\n<td style=\"text-align:right\">jlong</td>\n</tr>\n<tr>\n<td>byte</td>\n<td style=\"text-align:left\">signed char</td>\n<td style=\"text-align:right\">jbyte</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td style=\"text-align:left\">uncigned char</td>\n<td style=\"text-align:right\">jboolean</td>\n</tr>\n<tr>\n<td>char</td>\n<td style=\"text-align:left\">unsigned short</td>\n<td style=\"text-align:right\">jchar</td>\n</tr>\n<tr>\n<td>short</td>\n<td style=\"text-align:left\">short</td>\n<td style=\"text-align:right\">jshort</td>\n</tr>\n<tr>\n<td>float</td>\n<td style=\"text-align:left\">float</td>\n<td style=\"text-align:right\">jfloat</td>\n</tr>\n<tr>\n<td>double</td>\n<td style=\"text-align:left\">double</td>\n<td style=\"text-align:right\">jdouble</td>\n</tr>\n<tr>\n<td>object</td>\n<td style=\"text-align:left\">_jobject*</td>\n<td style=\"text-align:right\">jobject</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"在C-C-本地代码中访问Java类中的属性与方法\"><a href=\"#在C-C-本地代码中访问Java类中的属性与方法\" class=\"headerlink\" title=\"在C/C++本地代码中访问Java类中的属性与方法\"></a>在C/C++本地代码中访问Java类中的属性与方法</h1><h2 id=\"jfieldID-jmethodID\"><a href=\"#jfieldID-jmethodID\" class=\"headerlink\" title=\"jfieldID/jmethodID\"></a>jfieldID/jmethodID</h2><blockquote>\n<p>在C/C++本地代码中访问Java端的代码,一个常见的应用就是获取类的属性和调用类的方法,为了<br>在C/C++中表示属性和方法,JNI在Jni.h头文件中定义了<strong>jfieldID</strong>,<strong>JmethodID</strong>类型来分别代表Java类的属性和方法.  </p>\n</blockquote>\n<pre><code>我们在访问,或是设置Java属性的时候,首先就要先在本地代码获取代表该Java属性的jfieldID,\n然后才能在本地代码进行Java属性操作.\n同样的,我们需要呼叫Java端的方法时,也是需要取得代表该方法的jmethodID才能进行Java方法调用.\n\n使用JNIEnv的\n    GetFieldID/GetMethodID 取得属性/方法ID ( jfieldID / jmethodID)\n    GetStaticFieldID/GetStaticMethodID 取得静态属性/方法ID ( jfieldID / jmethodID )\n\n    来取得相应的jfieldID和jmethodID\n</code></pre><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">jfieldID <span class=\"title\">GetFieldID</span><span class=\"params\">(jclass clazz,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* name,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* sign)</span></span>;</span><br><span class=\"line\"><span class=\"function\">jfieldID <span class=\"title\">GetStaticFieldID</span><span class=\"params\">(jclass clazz,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* name,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* sign)</span></span>;</span><br><span class=\"line\"><span class=\"function\">jmethodID <span class=\"title\">GetMethodID</span><span class=\"params\">(jclass clazz,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* name,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* sign)</span></span>;</span><br><span class=\"line\"><span class=\"function\">jmethodID <span class=\"title\">GetStaticMethodID</span><span class=\"params\">(jclass clazz,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* name,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* sign)</span></span>;</span><br></pre></td></tr></table></figure>\n<pre><code>GetMethodID也能取得构造函数的jmethodID. 创建一个Java对象时可以调用\n指定的构造方法,这个将在下面的时候做介绍.\n    如:env-&gt;GetMethodID(data_Clazz,&quot;&lt;init&gt;&quot;,&quot;()V&quot;);\n\n类似Java的Reflect(反射机制)需要指定类跟属性/方法我哑取得相应的jfieldID跟jmethodID.\n\n方法参数: jclass clazz调用指定某个类. const char* name常量字符串,代表属性或者方法的名称.\n    const char* sign是当类中有两个重载方法时签名.\n\n例如: TestNative类中有两个重载方法:\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.tu.hellojni.jni;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestNative</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"TestNative.function(int i)\"</span> + i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">(<span class=\"keyword\">double</span> d)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"TestNative.function(double d)\"</span> + d);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>然后在C/C++代码中需要调用其中一个function方法的话.\n//首先取得要调用的方法所在的类\n\njclass clazz_TestNative = env-&gt;FindClass(&quot;com/tu/hellojni/jni/TestNative&quot;);\n//取得jmethodID之后才进行调用\njmethodID id_func = env-&gt;GetMethodID(clazz_testNative,&quot;function&quot;,&quot;??????&quot;);\n\n但是到底取得的是\nvoid function(int i )还是\nvoid function(double d)的jmethodID呢?\n这就是sign的作用了.它用于指定要取得的属性/方法类型.\n这里的sign如果指定为&quot;(I)V&quot;则取回void function(int)的jmethodID\n        如果指定为(D)V&quot;则取回void function(double)的jmethodID\n</code></pre><hr>\n<h2 id=\"Sign签名\"><a href=\"#Sign签名\" class=\"headerlink\" title=\"Sign签名\"></a>Sign签名</h2><pre><code>用来表示要取得的属性/方法的类型\n</code></pre><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>相应的签名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean</td>\n<td>Z</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>B</td>\n</tr>\n<tr>\n<td>char</td>\n<td>C</td>\n</tr>\n<tr>\n<td>short</td>\n<td>S</td>\n</tr>\n<tr>\n<td>int</td>\n<td>I</td>\n</tr>\n<tr>\n<td>long</td>\n<td>J</td>\n</tr>\n<tr>\n<td>float</td>\n<td>F</td>\n</tr>\n<tr>\n<td>double</td>\n<td>D</td>\n</tr>\n<tr>\n<td>void</td>\n<td>V</td>\n</tr>\n<tr>\n<td>object</td>\n<td>L用/分隔包的完整类名: Ljava/lang/String;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>[签名 如[I 整形数组 如[Ljava/lang/Object; 对象数组</td>\n</tr>\n<tr>\n<td>Method</td>\n<td>(参数1类型签名,参数2类型签名…)返回值类型签名 如:(ILjava/util/Date;[I)I</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"使用Javap命令来产生Sign签名\"><a href=\"#使用Javap命令来产生Sign签名\" class=\"headerlink\" title=\"使用Javap命令来产生Sign签名\"></a>使用Javap命令来产生Sign签名</h2><pre><code>从上面代码中的签名可以看出.如果是比较复杂的签名编写起来还是比较麻烦的.\n所以JDK也提供了一个工具javap来查看一个类的声明,其中就可以设置输出每个方法/属性的签名.\n\n语法: \n    javap -s -p [full Class Name]\n    -s 表示输出签名信息\n    -p 同-private,输出包含private 访问权限的成员信息\n\n使用方法:\n    1.cmd定位到工程目录下.\n    2.使用javap输入信息.\n</code></pre><p><pre class=\"brush: shell;  highlight: []\"><br>        C:\\Users\\ComTu&gt;cd E:\\ComTu_Design\\workspace\\workspace-Android\\HelloJ<br>        C:\\Users\\ComTu&gt;E:<br>        E:\\ComTu_Design\\workspace\\workspace-Android\\HelloJNI&gt;cd bin/classes</p>\n<pre><code>E:\\ComTu_Design\\workspace\\workspace-Android\\HelloJNI\\bin\\classes&gt;jav\nCompiled from &quot;Port.java&quot;\npublic class com.tu.hellojni.jni.Port extends java.lang.Object{\npublic int property;\n  Signature: I\npublic com.tu.hellojni.jni.Port();\n  Signature: ()V\npublic native java.lang.String sayHello();\n  Signature: ()Ljava/lang/String;\npublic static native void sayHi(java.lang.String);\n  Signature: (Ljava/lang/String;)V\npublic native void testSign();\n  Signature: ()V\npublic void functionOverride();\n  Signature: ()V\npublic void functionOverride(int);\n  Signature: (I)V\npublic int function(int, java.util.Date, int[]);\n  Signature: (ILjava/util/Date;[I)I\n}\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[在Eclipse中配置Javap快捷操作](/blog/2014/10/28/Android_NDK_IDE_environment_one.html)</span><br><span class=\"line\"></span><br><span class=\"line\">---\t</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 取得Java属性/设定Java属性值</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t取得了相应属性的 jfieldID 之后就可以用</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSet&lt;TYPE&gt;Field</span><br><span class=\"line\">\t\tGet&lt;TYPE&gt;Field</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSetStatic&lt;TYPE&gt;Filed</span><br><span class=\"line\">\t\tGetStatic&lt;TYPE&gt;File等函数来对Java属性进行操作了.  --&gt;TYPE泛指各种数据类型.</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t如: Boolean , Byte , Double , Float ,  Int  , Long , Short , Object</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t怎样获取数组属性呢?</span><br><span class=\"line\">\t\t\t可以使用GetObjectField来取得数组类型的属性.</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t案例:</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">\t//Java</span><br><span class=\"line\">\tpublic class Port&#123;</span><br><span class=\"line\">\t\t/** C进行get/set成员变量 */</span><br><span class=\"line\">\t\tpublic int property = 55;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t/** C进行Get/Set静态成员变量 */</span><br><span class=\"line\">\t\tpublic static boolean isShow = false;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//C</span></span><br><span class=\"line\">jclass port_clazz = env-&gt;GetObjectClass(obj);</span><br><span class=\"line\"><span class=\"comment\">//获取java成员变量</span></span><br><span class=\"line\"><span class=\"comment\">//public int property;</span></span><br><span class=\"line\">jfieldID fieldId_prop = env-&gt;GetFieldID(port_clazz, <span class=\"string\">\"property\"</span>, <span class=\"string\">\"I\"</span>);</span><br><span class=\"line\">jint prop = env-&gt;GetIntField(obj, fieldId_prop);<span class=\"comment\">//取值</span></span><br><span class=\"line\">__android_log_print(ANDROID_LOG_INFO, <span class=\"string\">\"JNIMsg\"</span>, <span class=\"string\">\"\\n c-int: %d\"</span>, prop);</span><br><span class=\"line\"><span class=\"comment\">//给java成员变量赋值</span></span><br><span class=\"line\">env-&gt;SetIntField(obj, fieldId_prop, <span class=\"number\">100L</span>);<span class=\"comment\">//赋值100L表示c中的100常整数类型.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取静态变量</span></span><br><span class=\"line\">jfieldID fieldId_isShow = env-&gt;GetStaticFieldID(port_clazz, <span class=\"string\">\"isShow\"</span>, <span class=\"string\">\"Z\"</span>);</span><br><span class=\"line\">jboolean jb = env-&gt;GetStaticBooleanField(port_clazz, fieldId_isShow);</span><br><span class=\"line\">__android_log_print(ANDROID_LOG_INFO, <span class=\"string\">\"JNIMsg\"</span>, <span class=\"string\">\"\\n c-boolean: %d\"</span>, jb);</span><br><span class=\"line\">jboolean b = !jb;</span><br><span class=\"line\">env-&gt;SetStaticBooleanField(port_clazz, fieldId_isShow, b);<span class=\"comment\">//给静态变量赋值</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Java方法的调用\"><a href=\"#Java方法的调用\" class=\"headerlink\" title=\"Java方法的调用\"></a>Java方法的调用</h2><pre><code>JNIEnv 提供了众多的Call&lt;TYPE&gt;Method 跟 CallStatic&lt;TYPT&gt;Method,还有\nCallNonvirtual&lt;TYPE&gt;Method函数.需要通过 GetMethodID 取得相应方法的 jmethodID来\n传入到函数参数中.\n\n调用实例方法的三种形式:\n    //第一种:最常用的方式\n    Call&lt;TYPE&gt;Method(jobject obj,jmethodID id,...); \n    //第二种:当调用这个函数的时候有一个指向参数表的va_list变量时使用的_很少使用到这种方式\n    Call&lt;TYPE&gt;MethodV(jobject obj,jmethodID id, va_list lst);\n    //第三种:当调用这个函数的时候有一个指向jvalue或者jvalue数组的指针时用的\n    Call&lt;TYPE&gt;MethodA(jobject obj,jmethodID id, jvalue * v);\n\n调用静态方法的三种形式:\n    CallStatic&lt;TYPE&gt;Method(jclass class , jmethodID id, ...);\n    CallStatic&lt;TYPE&gt;MethodV(jclass class , jmethodID id, va_list lst);\n    CallStatic&lt;TYPE&gt;MethodA(jclass class , jmethodID id, jvalue * v);\n\n第三种中的 jvalue 这个类型是一个联合体.\n源代码jni.h中:\n</code></pre><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//C</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">typedef</span> <span class=\"keyword\">union</span> jvalue &#123;</span><br><span class=\"line\">\t\t    jboolean    z;</span><br><span class=\"line\">\t\t    jbyte       b;</span><br><span class=\"line\">\t\t    jchar       c;</span><br><span class=\"line\">\t\t    jshort      s;</span><br><span class=\"line\">\t\t    jint        i;</span><br><span class=\"line\">\t\t    jlong       j;</span><br><span class=\"line\">\t\t    jfloat      f;</span><br><span class=\"line\">\t\t    jdouble     d;</span><br><span class=\"line\">\t\t    jobject     l;</span><br><span class=\"line\">\t\t&#125; jvalue;</span><br></pre></td></tr></table></figure>\n<pre><code>案例: \n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Port</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/** C调用重载成员函数_非静态方法 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">functionOverride</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Port.functionOverride()--参数:property&gt;\"</span> + property + <span class=\"string\">\"--isShow&gt;\"</span> + isShow);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** C调用重载成员函数_非静态方法 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">functionOverride</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Port.functionOverride(int i)--&gt;\"</span> + i + <span class=\"string\">\"--参数:property&gt;\"</span> + property + <span class=\"string\">\"--isShow&gt;\"</span> + isShow);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** C调用多参数签名_非静态方法 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">function</span><span class=\"params\">(<span class=\"keyword\">int</span> foo, Date date, <span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Port.function()foo&gt;\"</span> + foo + <span class=\"string\">\"===date&gt;\"</span> + date + <span class=\"string\">\"==arr&gt;\"</span> + arr);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> foo;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** C调用成员函数 的三种形式 */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">function</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">double</span> d, <span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"===&gt;Port.function()i&gt;\"</span> + i + <span class=\"string\">\"===d&gt;\"</span> + d + <span class=\"string\">\"==c&gt;\"</span> + c);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//C</span></span><br><span class=\"line\">jclass port_clazz = env-&gt;GetObjectClass(obj);</span><br><span class=\"line\"><span class=\"comment\">//调用调用Java里的Port类的void functionOverride()重载函数_非静态函数</span></span><br><span class=\"line\">jmethodID id_func1 = env-&gt;GetMethodID(port_clazz, <span class=\"string\">\"functionOverride\"</span>, <span class=\"string\">\"()V\"</span>);</span><br><span class=\"line\">env-&gt;CallVoidMethod(obj, id_func1);<span class=\"comment\">//调用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用调用java里的Port类的void functionOverride(int )C调用重载函数_非静态函数</span></span><br><span class=\"line\">jmethodID id_func2 = env-&gt;GetMethodID(port_clazz, <span class=\"string\">\"functionOverride\"</span>, <span class=\"string\">\"(I)V\"</span>);</span><br><span class=\"line\">env-&gt;CallVoidMethod(obj, id_func2, <span class=\"number\">1L</span>);<span class=\"comment\">//调用,并需要一个参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用调用java里的Port类的public int function(int foo, Date data, int[] arr) --&gt;(ILjava/util/Date;[I)I</span></span><br><span class=\"line\">jmethodID methodID_func = env-&gt;GetMethodID(port_clazz, <span class=\"string\">\"function\"</span>, <span class=\"string\">\"(ILjava/util/Date;[I)I\"</span>);</span><br><span class=\"line\">env-&gt;CallIntMethod(obj, methodID_func, <span class=\"number\">100L</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);<span class=\"comment\">//调用Port的function方法,后面跟随三个参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">jmethodID methodID_func_IDC = env-&gt;GetMethodID(port_clazz, <span class=\"string\">\"function\"</span>, <span class=\"string\">\"(IDC)Z\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//调用实例方法的第一种形式: Call&amp;lt;TYPE&gt;Method(jobject obj,jmethodID id,...);</span></span><br><span class=\"line\">env-&gt;CallBooleanMethod(obj, methodID_func_IDC, <span class=\"number\">100L</span>, <span class=\"number\">3.14</span>, L<span class=\"string\">'1'</span>);<span class=\"comment\">// 100L长整型,3.14double, L'1'宽字符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用实例方法的第三种形式:</span></span><br><span class=\"line\">jvalue * j = new jvalue[<span class=\"number\">3</span>];</span><br><span class=\"line\">j[<span class=\"number\">0</span>].i = <span class=\"number\">50L</span>;</span><br><span class=\"line\">j[<span class=\"number\">1</span>].d = <span class=\"number\">3.1415</span>;</span><br><span class=\"line\">j[<span class=\"number\">2</span>].c = L<span class=\"string\">'5'</span>;</span><br><span class=\"line\">env-&gt;CallBooleanMethodA(obj, methodID_func_IDC, j);</span><br><span class=\"line\"><span class=\"keyword\">delete</span>[] j;<span class=\"comment\">//删除回收</span></span><br></pre></td></tr></table></figure>\n<pre><code>调用一个对象的父类的方法:\n    在JNI中定义的 CallNonvirtual&lt;TYPE&gt;Method 就能够实现子类对象调用父类方法的功能.\n\n    要使用它,首先要取得父类及要调用的父类方法的 jmethodID,方可.\n\n案例:\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"===&gt;Father.function()\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Father</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"===&gt;Child.function()\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Port</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/** C调用_子父类关系类 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Father father = <span class=\"keyword\">new</span> Child();\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//C</span></span><br><span class=\"line\"><span class=\"comment\">//调用子父类的成员变量方法:</span></span><br><span class=\"line\">jfieldID id_father = env-&gt;GetFieldID(port_clazz, <span class=\"string\">\"father\"</span>, <span class=\"string\">\"Lcom/tu/hellojni/jni/Father;\"</span>);</span><br><span class=\"line\">jobject father = env-&gt;GetObjectField(obj, id_father);</span><br><span class=\"line\"></span><br><span class=\"line\">jclass clazz_Father = env-&gt;FindClass(<span class=\"string\">\"com/tu/hellojni/jni/Father\"</span>);</span><br><span class=\"line\">jmethodID id_father_function = env-&gt;GetMethodID(clazz_Father, <span class=\"string\">\"function\"</span>, <span class=\"string\">\"()V\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">env-&gt;CallVoidMethod(father, id_father_function);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t以上代码相当于:</span></span><br><span class=\"line\"><span class=\"comment\">//  Port port = new Port();</span></span><br><span class=\"line\"><span class=\"comment\">//\tFather f = port.father; //--&gt;father成员变量是:public Father father = new Child();</span></span><br><span class=\"line\"><span class=\"comment\">//\tf.function();</span></span><br><span class=\"line\"><span class=\"comment\">//运行结果: ===&gt;Child.function()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t调用父类的方法</span></span><br><span class=\"line\">env-&gt;CallNonvirtualVoidMethod(father, clazz_Father, id_father_function);</span><br><span class=\"line\"><span class=\"comment\">//运行结果:===&gt;Father.function()</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"在C-C-本地代码中创建Java的对象\"><a href=\"#在C-C-本地代码中创建Java的对象\" class=\"headerlink\" title=\"在C/C++本地代码中创建Java的对象\"></a>在C/C++本地代码中创建Java的对象</h1><pre><code>创建Java对象有两种方式. (NewObject / AllocObject)\n</code></pre><h2 id=\"5-1-NewObject\"><a href=\"#5-1-NewObject\" class=\"headerlink\" title=\"5.1 NewObject\"></a>5.1 NewObject</h2><blockquote>\n<p>使用函数 NewObject 可以用来创建对象  </p>\n</blockquote>\n<pre><code>jobject NewObject(jclass clazz , jmethodID methodID,...)\n\nGetMethodID能够取得构造方法的 jmethodID .如果传入的要取得的方法名称设定为&quot;&lt;init&gt;&quot;就能够取得构造方法.  \n构造方法的方法返回值类型的签名始终为Void.\n\n    案例:\n</code></pre><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//C</span></span><br><span class=\"line\"><span class=\"comment\">//创建一个日期类Date对象并调用getTime方法</span></span><br><span class=\"line\">jclass clazz_date = env-&gt;FindClass(<span class=\"string\">\"java/util/Date\"</span>);</span><br><span class=\"line\">jmethodID mid_date = env-&gt;GetMethodID(clazz_date,<span class=\"string\">\"&amp;lt;init&gt;\"</span>,<span class=\"string\">\"()V\"</span>);</span><br><span class=\"line\">jobject now = env-&gt;NewObject(clazz_date,mid_date);</span><br><span class=\"line\"></span><br><span class=\"line\">jmethodID jmethodID_getTime = env-&gt;GetMethodID(clazz_date,<span class=\"string\">\"getTime\"</span>,<span class=\"string\">\"()J\"</span>);</span><br><span class=\"line\">jlong time = env-&gt;CallLongMethod(now,jmethodID_getTime);</span><br><span class=\"line\"></span><br><span class=\"line\">__android_log_print(ANDROID_LOG_INFO, <span class=\"string\">\"JNIMsg\"</span>, <span class=\"string\">\"\\n c-创建Date对象并调用getTime方法: %d\"</span>, time);</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"5-2-AllocObject\"><a href=\"#5-2-AllocObject\" class=\"headerlink\" title=\"5.2 AllocObject\"></a>5.2 AllocObject</h2><blockquote>\n<p>使用 AllocObject 方式创建对象(创建但未初始化,使用比较少.)<br>使用函数<strong>AllocObject</strong>可以根据传入的jclass创建一个Java对象,但是他的状态是非初始化的,<br>在使用这个对象之前绝对要用 <strong>CallNonvirtualVoidMethod</strong> 来调用该jclass的建构函数.<br>这样可以延迟构造函数的调用.这个部分用的很少.</p>\n</blockquote>\n<pre><code>案例: \n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Port</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/** C进行创建并初始化 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String STATIC_STR;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//C</span></span><br><span class=\"line\"><span class=\"comment\">//---&gt; AllocObject 创建延迟初始化的对象</span></span><br><span class=\"line\">jclass clazz_str = env-&gt;FindClass(<span class=\"string\">\"java/lang/String\"</span>);</span><br><span class=\"line\">jmethodID methodID_str = env-&gt;GetMethodID(clazz_str, <span class=\"string\">\"&amp;lt;init&gt;\"</span>, <span class=\"string\">\"([C)V\"</span>);<span class=\"comment\">//通过字符数组构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//预先创建一个没有初始化的字符串</span></span><br><span class=\"line\">jobject <span class=\"built_in\">string</span> = env-&gt;AllocObject(clazz_str);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个5个元素的字符数组,然后以'c','o','m','t','u'赋值</span></span><br><span class=\"line\">jcharArray arg = env-&gt;NewCharArray(<span class=\"number\">5</span>);</span><br><span class=\"line\">jchar buf[<span class=\"number\">5</span>];</span><br><span class=\"line\">buf[<span class=\"number\">0</span>] = <span class=\"number\">67</span>;</span><br><span class=\"line\">buf[<span class=\"number\">1</span>] = <span class=\"string\">'o'</span>;</span><br><span class=\"line\">buf[<span class=\"number\">2</span>] = <span class=\"string\">'m'</span>;</span><br><span class=\"line\">buf[<span class=\"number\">3</span>] = <span class=\"string\">'t'</span>;</span><br><span class=\"line\">buf[<span class=\"number\">4</span>] = <span class=\"string\">'u'</span>;</span><br><span class=\"line\">env-&gt;SetCharArrayRegion(arg, <span class=\"number\">0</span>, <span class=\"number\">5</span>, buf);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//呼叫构建函数</span></span><br><span class=\"line\">env-&gt;CallNonvirtualVoidMethod(<span class=\"built_in\">string</span>, clazz_str, methodID_str, arg);</span><br><span class=\"line\"></span><br><span class=\"line\">jclass clazz_this = env-&gt;GetObjectClass(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">jfieldID fieldID_str = env-&gt;GetStaticFieldID(clazz_this, <span class=\"string\">\"STATIC_STR\"</span>, <span class=\"string\">\"Ljava/lang/String;\"</span>);</span><br><span class=\"line\">env-&gt;SetStaticObjectField(clazz_this, fieldID_str, <span class=\"built_in\">string</span>);<span class=\"comment\">//给java静态变量赋值</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"在C-C-本地代码中访问-创建Java的String字符串对象\"><a href=\"#在C-C-本地代码中访问-创建Java的String字符串对象\" class=\"headerlink\" title=\"在C/C++本地代码中访问/创建Java的String字符串对象\"></a>在C/C++本地代码中访问/创建Java的String字符串对象</h1><pre><code>Java字符串&lt;--&gt;C/C++字符串\n\n    在Java中,使用的字符串String对象是Unicode(UTF-16)码, \n        即每个字符不论是中文英文还是符号,一个字符总是占两个字节.\n\nJava通过JNI接口可以将Java的字符串转换到C/C++中的宽字符串(wchar_t*),\n或者传回一个UTF-8的字符串(char*)到C/C++. \n返过来,C/C++可以通过一个宽字符串,或者一个UTF-8编码的字符串来创建一个Java端的String对象.\n\n\n获取Java中的String对象有如下几种函数:\n</code></pre><h2 id=\"GetStringChars-GetStringUTFChars-ReleaseStringChars-ReleaseStringUTFChars\"><a href=\"#GetStringChars-GetStringUTFChars-ReleaseStringChars-ReleaseStringUTFChars\" class=\"headerlink\" title=\"GetStringChars / GetStringUTFChars / ReleaseStringChars / ReleaseStringUTFChars .\"></a>GetStringChars / GetStringUTFChars / ReleaseStringChars / ReleaseStringUTFChars .</h2><pre><code>const jchar* GetStringChars (jstring str , jboolean* copied)\n    可以取得UTF-16编码的宽字符串(jchar*)\n    开新内存,然后把Java中的String拷贝到这个内存中,然后返回指向这个内存地址的指针.\n\nconst char* GetStringUTFChars (jstring str , jboolean* copied)\n    可以取得UTF-8编码的字符串(char*)\n    直接返回指向Java中String的内存的指针,这个时候\n    千万不要改变这个内存的内容,这将破坏String在Java中始终是常量这个原则.\n\n第二个参数jboolean* copied是用来标示是否对Java的String对象进行拷贝的.\n如果传入的这个jboolean指针不是 NULL ,则他会给该指针所指向的内存传入 JNI_TRUE\n或 JNI_FALSE 指示是否进行拷贝.\n传入 NULL 表示不关心是否拷贝字符串,它就不会被jboolean* 指向的内存赋值\n\n使用了如上这两个函数取得的字串,在不使用的时候,要使用\nReleaseStringChars / ReleaseStringUTFChars 来释放拷贝的内存,或者释放对Java的String对象的引用.\n\nReleaseStringChars (jstring jstr, const jchar* str); \nReleaseStringUTFChars (jstring jstr, const char* str);\n\n    第一个参数指定一个jstring变量,即要释放的本地字符串的来源.\n    第二个参数就是要释放的本地字符串.\n</code></pre><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">(JNIEnv * env, jobject obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//-------- GetStringChars / ReleaseStringChars / NewString -------------</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//获取jmethodID</span></span><br><span class=\"line\">\t\tjfieldID jfie_msg = env-&gt;GetFieldID(env-&gt;GetObjectClass(obj), <span class=\"string\">\"message\"</span>, <span class=\"string\">\"Ljava/lang/String;\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取到String属性</span></span><br><span class=\"line\">\t\tjstring j_msg = (jstring) env-&gt;GetObjectField(obj, jfie_msg);</span><br><span class=\"line\">\t\t<span class=\"comment\">//UTF-16编码的宽字符串(jchar*) const jchar* == const wchar_t*</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//\tJava-String-&gt;C-jchar*转换</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> jchar* jstr = env-&gt;GetStringChars(j_msg, NULL);<span class=\"comment\">//j_msg不能为null否则会抛异常</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//---------拷贝数据start--------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tjsize size = env-&gt;GetStringLength(j_msg);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//转换成宽字符串</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//\twstring wstr((const wchar_t*) jstr);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tjchar* jstrTemp = (jchar*) jstr;</span><br><span class=\"line\">\t\t<span class=\"comment\">//---------拷贝数据end--------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//回收本地字符串 _释放指针</span></span><br><span class=\"line\">\t\tenv-&gt;ReleaseStringChars(j_msg, jstr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//---------处理数据start--------------</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//倒序函数迭代字符串</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//\tstd::reverse(wstr.begin(), wstr.end());</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//---------处理数据end--------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//创建String对象并赋予Port的message变量中.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//\tjstring j_new_str = env-&gt;NewString((const jchar*) wstr.c_str(), (jint) wstr.size());</span></span><br><span class=\"line\">\t\tjstring j_new_str = env-&gt;NewString(jstrTemp, size);</span><br><span class=\"line\">\t\t<span class=\"comment\">//赋值给Java的Port的message变量</span></span><br><span class=\"line\">\t\tenv-&gt;SetObjectField(obj, jfie_msg, j_new_str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">```\t</span><br><span class=\"line\"></span><br><span class=\"line\">```c</span><br><span class=\"line\">\t<span class=\"comment\">//拷贝</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">cc2c</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* str)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>* strtemp = new <span class=\"keyword\">char</span>[<span class=\"built_in\">strlen</span>(str) + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"built_in\">strcpy</span>(strtemp, str);</span><br><span class=\"line\">\t\treturn strtemp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//简单倒序算法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">myReverse</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* str)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>* strtemp = cc2c(str);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(strtemp);</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> t;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len / <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tt = strtemp[i];</span><br><span class=\"line\">\t\t\tstrtemp[i] = strtemp[len - i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\tstrtemp[len - i - <span class=\"number\">1</span>] = t;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn strtemp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">(JNIEnv * env, jobject obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//------------------ GetStringUTFChars / ReleaseStringUTFChars / NewStringUTF -------</span></span><br><span class=\"line\">\t\tjfieldID jfie_msg = env-&gt;GetFieldID(env-&gt;GetObjectClass(obj), <span class=\"string\">\"message\"</span>, <span class=\"string\">\"Ljava/lang/String;\"</span>);</span><br><span class=\"line\">\t\tjstring j_msg = (jstring) env-&gt;GetObjectField(obj, jfie_msg);</span><br><span class=\"line\">\t\t<span class=\"comment\">//\tJava-String-&gt;C-jchar*转换</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* str = env-&gt;GetStringUTFChars(j_msg, NULL);</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>* strtemp = myReverse(str);</span><br><span class=\"line\">\t\tenv-&gt;ReleaseStringUTFChars(j_msg, str);</span><br><span class=\"line\">\t\tjstring j_new_str = env-&gt;NewStringUTF(strtemp);</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span>[] strtemp;</span><br><span class=\"line\">\t\tenv-&gt;SetObjectField(obj, jfie_msg, j_new_str);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"GetStringCritical-ReleaseStringCritical\"><a href=\"#GetStringCritical-ReleaseStringCritical\" class=\"headerlink\" title=\"GetStringCritical / ReleaseStringCritical .\"></a>GetStringCritical / ReleaseStringCritical .</h2><pre><code>为了增加直接传回指向Java字符串的指针的可能性(而不是拷贝),JDK1.2之后出来新的函数\n\nconst jchar* GetStringCritical (jstring str , jboolean* copied)\nvoid ReleaseStringCritical (jstring jstr,const jchar* str);\n\n注意:\n在 GetStringCritical / ReleaseStringCritical 方法之间是一个关键区.\n在这关键区之中绝对不能呼叫(call)JNI的其它函数,会造成当前线程中断或是会让当前线程\n等待的任何本地代码.否则将造成关键区代码执行期间垃圾回收器停止动作,任何触发垃圾\n回收的线程也会暂停.其它的触发垃圾回收器的线程不能前进,直到当前线程结束而激活垃圾回收器.\n\n在关键区中千万不要出现中断操作,或者在JVM中分配任何新对象.否则会造成JVM死锁\n\n虽说这个函数会增加直接传回指向Java字符串的指针的可能性,不过还是会根据情况传回拷贝过的字符串.\n\n不支持 GetStringUTFCritical ,没有这样一个函数,由于Java字符串用的是UTF16,要转\n成UTF8编码的字符串始终需要进行一次拷贝,所以没有这样的函数.\n</code></pre><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//--------------- GetStringCritical / ReleaseStringCritical ----------</span><br><span class=\"line\">void function(JNIEnv * env, jobject obj) &#123;</span><br><span class=\"line\">\t// 基本与 GetStringChars 一样</span><br><span class=\"line\">\tjfieldID jfie_msg = env-&gt;GetFieldID(env-&gt;GetObjectClass(obj), \"message\", \"Ljava/lang/String;\");</span><br><span class=\"line\">\tjstring j_msg = (jstring) env-&gt;GetObjectField(obj, jfie_msg);</span><br><span class=\"line\">\t//\tJava-String-&gt;C-jchar*转换</span><br><span class=\"line\">\tconst jchar* jstr = env-&gt;GetStringCritical(j_msg, NULL);//jstr_msg不能为null复杂会抛异常</span><br><span class=\"line\">\twstring wstr((const wchar_t*) jstr);</span><br><span class=\"line\">\tenv-&gt;ReleaseStringCritical(j_msg, jstr);</span><br><span class=\"line\">\tstd::reverse(wstr.begin(), wstr.end());</span><br><span class=\"line\">\tjstring j_new_str = env-&gt;NewString((const jchar*) wstr.c_str(), (jint) wstr.size());</span><br><span class=\"line\">\tenv-&gt;SetObjectField(obj, jfie_msg, j_new_str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"GetStringRegion-GetStringUTFRegion\"><a href=\"#GetStringRegion-GetStringUTFRegion\" class=\"headerlink\" title=\"GetStringRegion / GetStringUTFRegion .\"></a>GetStringRegion / GetStringUTFRegion .</h2><pre><code>Java 1.2之后出来的函数,这个函数的动作,是把Java字符串的内容直接拷贝到C/C++\n的字符数组中,在呼叫这个函数之前必须有一个C/C++分配出来的字符串,然后传入到\n这个函数中进行字符串的拷贝.\n\n由于C/C++中分配内存开销相对小,而且Java中的String内容拷贝的开销可以忽略,\n更好的一点是此函数不分配内存,不会抛OutOfMemoryError异常.\n\n//拷贝Java字符串并以UTF-8编码传入bufer\nGetStringUTFRegion(jstring str , jsize start , jsize len , char* buffer);\n\n//拷贝Java字符串并以UTF-16编码传入buffer\nGetStringRegion(jstring str, jsize start , jsize len, jchar* buffer);\n\nJava的String str:\n    A  B  C  D  E  F  G  H  I  J  K  L  M  N\n             ↑― start = 3  ↓  len = 10 ―↑ \n    env-&gt;GetStringRegion(str,3,10,buffer);//copy至buffer\n</code></pre><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//---------------- GetStringRegion / NewString ----------------</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">(JNIEnv * env, jobject obj)</span> </span>&#123;</span><br><span class=\"line\">\tjfieldID jfie_msg = env-&gt;GetFieldID(env-&gt;GetObjectClass(obj), <span class=\"string\">\"message\"</span>, <span class=\"string\">\"Ljava/lang/String;\"</span>);</span><br><span class=\"line\">\tjstring j_msg = (jstring) env-&gt;GetObjectField(obj, jfie_msg);</span><br><span class=\"line\"></span><br><span class=\"line\">\tjsize jm_len = env-&gt;GetStringLength(j_msg);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//创建一个数组长度为message字符串的长度+1(结尾符)</span></span><br><span class=\"line\">\tjchar* jstr = new jchar[jm_len + <span class=\"number\">1</span>];</span><br><span class=\"line\">\tjstr[jm_len] = L<span class=\"string\">'\\0'</span>;<span class=\"comment\">//C++中都会有结尾符,不然会出现乱码.</span></span><br><span class=\"line\">\t<span class=\"comment\">//拷贝到字符数组里</span></span><br><span class=\"line\">\tenv-&gt;GetStringRegion(j_msg, <span class=\"number\">0</span>, jm_len, jstr);</span><br><span class=\"line\">\t<span class=\"comment\">//\twstring wstr((const wchar_t*) jstr);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//std::reverse(wstr.begin(), wstr.end());</span></span><br><span class=\"line\">\tjstring j_new_str = env-&gt;NewString((const jchar*) jstr,jm_len);</span><br><span class=\"line\"></span><br><span class=\"line\">\tenv-&gt;SetObjectField(obj, jfie_msg, j_new_str);</span><br><span class=\"line\">\t<span class=\"comment\">//删除不必要的内存</span></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] jstr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//---------------- GetStringUTFRegion / NewStringUTF ----------------</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">(JNIEnv * env, jobject obj)</span> </span>&#123;</span><br><span class=\"line\">\tjfieldID jfie_msg = env-&gt;GetFieldID(env-&gt;GetObjectClass(obj), <span class=\"string\">\"message\"</span>, <span class=\"string\">\"Ljava/lang/String;\"</span>);</span><br><span class=\"line\">\tjstring j_msg = (jstring) env-&gt;GetObjectField(obj, jfie_msg);</span><br><span class=\"line\"></span><br><span class=\"line\">\tjsize jm_len = env-&gt;GetStringLength(j_msg);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* buffer  = new <span class=\"keyword\">char</span>[jm_len + <span class=\"number\">1</span>];</span><br><span class=\"line\">\tenv-&gt;GetStringUTFRegion(j_msg, <span class=\"number\">0</span>, jm_len, buffer);</span><br><span class=\"line\">\t<span class=\"comment\">//\twstring wstr((const wchar_t*) jstr);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//std::reverse(wstr.begin(), wstr.end());</span></span><br><span class=\"line\">\tjstring j_new_str = env-&gt;NewStringUTF((const char*) buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">\tenv-&gt;SetObjectField(obj, jfie_msg, j_new_str);</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] buffer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串相关函数\"><a href=\"#字符串相关函数\" class=\"headerlink\" title=\"字符串相关函数\"></a>字符串相关函数</h2><pre><code>jstring NewString(const jchar* str, jsize len); //创建一个字符串\njstring NewStringUTF(const char* str); //创建一个UTF8的字符串\njsize GetStringLength(jstring str);// 字符串的长度\njsize GetStringUTFLength(jstring str);//UTF会占用多少个字节\n</code></pre><h1 id=\"7-在C-C-本地代码中操作Java的数组对象\"><a href=\"#7-在C-C-本地代码中操作Java的数组对象\" class=\"headerlink\" title=\"7.在C/C++本地代码中操作Java的数组对象\"></a>7.在C/C++本地代码中操作Java的数组对象</h1><pre><code>1.基本类型的数组\n2.对象类型(Objcet[])的数组\n\n一个能通用于两种不同类型数组的函数\nGetArrayLength(jarray aray);//获取数组长度\n</code></pre><h2 id=\"处理基本类型数组\"><a href=\"#处理基本类型数组\" class=\"headerlink\" title=\"处理基本类型数组\"></a>处理基本类型数组</h2><pre><code>Get&lt;TYPE&gt;ArrayElements(&lt;TYPE&gt;Array arr, jboolean* iscopied);\n    这类函数可以把Java基本类型的数组转换到C/C++中的数组,有两种处理方式,\n    1.拷贝一份传回本地代码,\n    2.把指向Java数组的指针直接传回到本地代码.\n    处理完本地代码的数组后,通过 Release&lt;TYPE&gt;ArrayElements来释放数组.\n\nRelease&lt;TYPE&gt;ArrayElements(&lt;TYPE&gt;Array arr,&lt;TYPE&gt;* array,jint mode)\n    用这个函数可以选择将如何处理Java跟C++的数组,是提交,撤消,内存释放,还是不释放等.\n    mode可以取下面的值:\n    0          -&gt; 对Java的数组进行更新并释放C/C++的数组.\n    JNI_COMMIT -&gt; 对Java的数组进行更新但不释放C/C++的数组.\n    JNI_ABORT  -&gt; 对Java的数组不进行更新,释放C/C++的数组.\n\nGetPrimitiveArrayCritical(jarray arr , jboolean* isCopied);\nReleasePrimitiveArrayCritical(jarray arr , void* array,jint mode);\n    也是JDK1.2出来的,为了增加直接传回指向Java数组的指针而加入的函数,同样的,\n    也会有同 GetStringCritical 的死锁的问题.\n\nGet&lt;TYPE&gt;ArrayRegion(&lt;TYPE&gt;Array arr, jsize start , jsize len , &lt;TYPE&gt;* buffere);\n    在C/C++预先开辟一段内存,然后把Java基本类型的数组拷贝到这段内存中.\n    跟 GetStringRegion原理类似\n\nSet&lt;TYPE&gt;ArrayRegion(&lt;TYPE&gt;Array arr , jsize start, jsize len , const &lt;TYPE&gt;* buffer);\n    把Java基本类型的数组中的指定范围的元素用C/C++的数组中的元素来赋值.\n\n&lt;TYPE&gt;Array New&lt;TYPE&gt;Array(jsize sz)\n    指定一个长度然后返回相应Java基本类型的数组.\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//java</span></span><br><span class=\"line\"><span class=\"comment\">/** C调用Get/Set成员变量 数组 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] ints = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; <span class=\"number\">67</span>, <span class=\"number\">111</span>, <span class=\"number\">109</span>, <span class=\"number\">116</span>, <span class=\"number\">117</span> &#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//c</span></span><br><span class=\"line\"><span class=\"comment\">//---- GetIntArrayElements / ReleaseIntArrayElements / ReleaseIntArrayElements / ReleaseIntArrayElements ----</span></span><br><span class=\"line\"><span class=\"comment\">//基本数据类型数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">(JNIEnv * env, jobject obj)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//取得属性Id</span></span><br><span class=\"line\">\tjfieldID fieldId = env-&gt;GetFieldID(env-&gt;GetObjectClass(obj), <span class=\"string\">\"ints\"</span>, <span class=\"string\">\"[I\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//通过属性id取得数组变量</span></span><br><span class=\"line\">\tjintArray ints = (jintArray) env-&gt;GetObjectField(obj, fieldId);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//转取得本地数组</span></span><br><span class=\"line\">\tjint* int_arr = env-&gt;GetIntArrayElements(ints, NULL);</span><br><span class=\"line\">\tjsize len = env-&gt;GetArrayLength(ints);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//C基本库 . 对数组进行排序,迭代器需要两个参数,第一个是array首地址,第二个是array尾地址</span></span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::sort(int_arr, int_arr + len);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (jsize i = <span class=\"number\">0</span>; i &amp;lt; len; ++i) &#123;</span><br><span class=\"line\">\t\t__android_log_print(ANDROID_LOG_INFO, <span class=\"string\">\"JNIMsg\"</span>, <span class=\"string\">\"\\n c-intArray[]: %d\"</span>, int_arr[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//对Java的数组进行更新并释放C/C++的数组.</span></span><br><span class=\"line\">\tenv-&gt;ReleaseIntArrayElements(ints, int_arr, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//对Java的数组进行更新但不释放C/C++的数组.</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tenv-&gt;ReleaseIntArrayElements(ints, int_arr, JNI_COMMIT);</span></span><br><span class=\"line\">\t<span class=\"comment\">//对Java的数组不进行更新,释放C/C++的数组.</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tenv-&gt;ReleaseIntArrayElements(ints, int_arr, JNI_ABORT);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"处理对象类型数组\"><a href=\"#处理对象类型数组\" class=\"headerlink\" title=\"处理对象类型数组\"></a>处理对象类型数组</h2><pre><code>JNI没有提供直接把Java的对象类型数组(Object[])直接传到C++中的jobject[]数组的函数.\n而是直接通过 Get/SetObjectArrayElement 这样的函数来对Java的Object[]数组进行操作.\n\n\n使用上述的函数也不用释放任何资源.\n\nNewObjectArray 可以通过指定长度跟初始值来创建某个类的数组.\n</code></pre><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//c</span></span><br><span class=\"line\"><span class=\"comment\">// ----- GetObjectArrayElement /  NewObjectArray / SetObjectArrayElement ------</span></span><br><span class=\"line\"><span class=\"comment\">//对象数据类型数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">(JNIEnv * env, jobject obj)</span> </span>&#123;</span><br><span class=\"line\">\tjfieldID fieldStrId = env-&gt;GetFieldID(jclazz, <span class=\"string\">\"strs\"</span>, <span class=\"string\">\"[Ljava/lang/String;\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//获取java的对象数组</span></span><br><span class=\"line\">\tjobjectArray str_arr = (jobjectArray) env-&gt;GetObjectField(obj, fieldStrId);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> lenStr = env-&gt;GetArrayLength(str_arr);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n c-stringArray :\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//读Java的以String数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; lenStr; i++) &#123;</span><br><span class=\"line\">\t\tjobject obj = env-&gt;GetObjectArrayElement(str_arr, i);</span><br><span class=\"line\">\t\tjstring str = (jstring) obj;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * szStr = env-&gt;GetStringUTFChars(str, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\" %d-%s \"</span>, i, szStr);</span><br><span class=\"line\">\t\t__android_log_print(ANDROID_LOG_INFO, <span class=\"string\">\"JNIMsg\"</span>, <span class=\"string\">\"\\n c-StringArray[]: %d - %s\"</span>, i, szStr);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> jchar * chars = (const jchar *) szStr;</span><br><span class=\"line\">\t\tenv-&gt;ReleaseStringChars(str, chars);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//创建一个对象数组 , 为Java对象数组赋值并更新.</span></span><br><span class=\"line\">\tjstring str;</span><br><span class=\"line\">\tjobjectArray args = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tjsize size = <span class=\"number\">7</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* sa[] = &#123; <span class=\"string\">\"Hello,\"</span>, <span class=\"string\">\"world!\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"o\"</span>, <span class=\"string\">\"m\"</span>, <span class=\"string\">\"t\"</span>, <span class=\"string\">\"u\"</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tjclass objClass = env-&gt;FindClass(<span class=\"string\">\"java/lang/String\"</span>);</span><br><span class=\"line\">\targs = env-&gt;NewObjectArray(size, objClass, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; size; j++) &#123;</span><br><span class=\"line\">\t\tstr = env-&gt;NewStringUTF(sa[j]);</span><br><span class=\"line\">\t\tenv-&gt;SetObjectArrayElement(args, j, str);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (j &lt; lenStr)<span class=\"comment\">//给Java数组赋数组下标越界抛异常 ,</span></span><br><span class=\"line\">\t\t\tenv-&gt;SetObjectArrayElement(str_arr, j, str);<span class=\"comment\">//自动更新Java类中的strs对象数组</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//\t不需要释放任何资源.</span></span><br><span class=\"line\">\t<span class=\"comment\">//args 新创建的 String 数组.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"8-全局引用-局部引用-弱全局引用\"><a href=\"#8-全局引用-局部引用-弱全局引用\" class=\"headerlink\" title=\"8.全局引用/局部引用/弱全局引用\"></a>8.全局引用/局部引用/弱全局引用</h1><pre><code>从Java虚拟机创建的对象传到本地C/C++代码时会产生引用.根据Java的垃圾回收机制,只要有引用\n存在就不会触发该引用指向的Java对象的垃圾回收.\n\n这些引用在JNI中分三种:\n    全局引用(Global Reference)\n    局部引用(Local Reference)\n    弱全局引用(Weak Global Reference ) Since JDK1.2\n</code></pre><h2 id=\"局部引用\"><a href=\"#局部引用\" class=\"headerlink\" title=\"局部引用\"></a>局部引用</h2><pre><code>最常见的引用类型,基本上通过JNI返回来的引用都是局部引用.\n    例如使用NewObject就会返回创建出来的实例的局部引用.局部引用只在该\n    native函数中有效,所有在该函数中产生的局部引用,都会在函数返回的时候\n    自动释放(freed).也可以使用 DeleteLocalRef 函数手动释放该引用.\n\n实际上局部引用存在,就会防止其指向的对象被垃圾回收,尤其是当一个局部引用\n指向一个很庞大的对象,或是在一个循环中生成了局部引用,最好的做法就是在使用完该\n对象后,或在该循环尾部把这个引用释放掉,以确保在垃圾回收器被触发的时候被回收.\n\n在局部引用的有效期中,可以传递到别的本地函数中,要强调的是他的有效期仍然只在\n一次的Java本地函数调用中,所以千万不能用C++全局变量保存他或是把他定义为C++\n静态局部变量.\n\nenv-&gt;NewLocalRef(_jobject* localRef);\nenv-&gt;DeleteLocalRef(_jobject* localRef);\n</code></pre><h2 id=\"全局引用\"><a href=\"#全局引用\" class=\"headerlink\" title=\"全局引用\"></a>全局引用</h2><pre><code>全局引用可以跨越当前线程,在多个native函数中有效,不过需要编程人员手动\n来释放该引用.全局引用存在期间会防止在Java的垃圾回收的回收.\n\n与局部引用不同,全局引用的创建不是由JNI自动创建的,全局引用是需要\n调用 NewGlobalRef 函数,而释放他需要使用 DeleteGlobalRef 函数.\n\nenv-&gt;NewGlobalRef(_jobject* obj);\nenv-&gt;DeleteGlobalRef(_jobject * globalRef);\n</code></pre><h2 id=\"弱全局引用\"><a href=\"#弱全局引用\" class=\"headerlink\" title=\"弱全局引用\"></a>弱全局引用</h2><pre><code>Java 1.2后出来的功能,与全局引用相似,创建跟删除都需要由编程人员来进行.\n这种引用与全局引用一样可以在多个本地代码有效,也跨越多线程有效,不一样的是,\n这种引用将不会阻止垃圾回收器回收这个引用所指向的对象.\n\n使用 NewWeakGlobalRef 跟 DeleteWeakGlobalRef 来产生和解除引用.\n\nenv-&gt;NewWeakGlobalRef(_jobject * obj);\nenv-&gt;DeleteWeakGlobalRef(_jobject* obj);\n</code></pre><h2 id=\"关于引用的一些函数\"><a href=\"#关于引用的一些函数\" class=\"headerlink\" title=\"关于引用的一些函数\"></a>关于引用的一些函数</h2><pre><code>jobject NewLocalRef( jobject obj);\njobject NewGlobalRef( jobject obj);\njboject NewWeakGlobalRef( jobject obj);\nvoid DeleteLocalRef( jobject obj);\nvoid DeleteGlobalRef( jobject obj);\nvoid DeleteWeakGlobalRef( jobject obj);\n//比较两个引用是否指向同一个Java对象\njboolean IsSameObject(jobject obj1,Object obj2);\n这个函数对于弱全局引用还有一个特别的功能.\n把 NULL 传入要比较的对象中,就能判断弱全局引用所指向的Java对象是否被回收.\n</code></pre><h1 id=\"9-JNI优化\"><a href=\"#9-JNI优化\" class=\"headerlink\" title=\"9.JNI优化\"></a>9.JNI优化</h1><pre><code>缓存 jfieldID/jmethodID\n\n    取得 jfieldID跟jmethodID的时候会通过该属性/方法名称加上签名来查询相应的\n    jfieldID/jmethodID.这种查询相对来说开销较大.我们可以将这些FieldID/MethodID\n    缓存起来,这样只需要查询一次,以后就使用缓存起来的FieldID/MethodID了.\n\n    两种缓存的方式:\n        1.在用的时候缓存 (caching at the point of use)\n\n            在Native Code 中使用static局部变量来保存已经查询过的id.这样就不会在每次\n            函数调用时查询,而只要第一次查询成功后就保存起来了.\n\n            不过在这种情况下就不得不考虑多线程同时呼叫此函数时可能会导致同时查询的危机.\n            不过这种情况是无害的,因为查询同一个属性/方法的ID通常返回的是一样的值.\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**缓存id*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String cacheJfieldID = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> String cacheJmethodID = <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> jfieldID fieldID_string = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">jclass clazz = env-&gt;GetObjectClass(obj);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fieldID_string == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\tfieldID_string = env-&gt;GetFieldID(clazz, <span class=\"string\">\"cacheJfieldID\"</span>, <span class=\"string\">\"Ljava/lang/String;\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//other code...</span></span><br></pre></td></tr></table></figure>\n<p>2.在Java类初始化时缓存(caching at the defining Class’s inititalizer)</p>\n<pre><code>更好的一个方式就是在任何native函数调用前把id全部存起来.\n\n我们可以让java在第一次加载这个类的时候,首先调用本地代码初始化所以的\njfieldID/jmethodID,这样的话就可以省去多次的确定id是否存在的语句,\n当然,这些jfieldID/jmethodID是定义在C/C++的全局.\n\n使用这种方式还有好处,当Java类卸载或是重新加载的时候也会重新呼叫\n该本地代码来重新计算IDs.\n</code></pre><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> Port &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> property = <span class=\"number\">55</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String message = <span class=\"string\">\"123456\"</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**缓存id*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">\t\tinitNativeIDs();<span class=\"comment\">//初始化id</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> native <span class=\"keyword\">void</span> <span class=\"title\">initNativeIDs</span><span class=\"params\">()</span></span>; </span><br><span class=\"line\">\t<span class=\"comment\">//other code...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"comment\">//C</span></span><br><span class=\"line\">\tjfieldID g_propInt_id = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tjfieldID g_propStr_id = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**Java初始化的时候缓存*/</span></span><br><span class=\"line\">\t<span class=\"function\">JNIEXPORT <span class=\"keyword\">void</span> JNICALL <span class=\"title\">Java_com_tu_hellojni_jni_Port_initNativeIDs</span><span class=\"params\">(JNIEnv * env, jclass clazz)</span> </span>&#123;</span><br><span class=\"line\">\t__android_log_print(ANDROID_LOG_INFO, <span class=\"string\">\"JNIMsg\"</span>, <span class=\"string\">\"\\n c-message: %s\"</span>, <span class=\"string\">\"load.initNativeIDs..\"</span>);</span><br><span class=\"line\">\tg_propInt_id = env-&gt;GetFieldID(clazz, <span class=\"string\">\"property\"</span>, <span class=\"string\">\"I\"</span>);</span><br><span class=\"line\">\tg_propStr_id = env-&gt;GetFieldID(clazz, <span class=\"string\">\"message\"</span>, <span class=\"string\">\"Ljava/lang/String;\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//other code...</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Demo下载\"><a href=\"#Demo下载\" class=\"headerlink\" title=\"Demo下载\"></a>Demo下载</h1><p><img src=\"/res/img/blog/2014/11/01/Java_JNI/demo.gif\" alt=\"Demo\"></p>\n<p><a href=\"/res/file/blog/2014/11/01/Java_JNI/HelloJNI.apk\">本文Demo</a><br><a href=\"/res/file/blog/2014/11/01/Java_JNI/HelloJNI.rar\">本文Demo源代码</a></p>\n<blockquote>\n<p>本博文暂时没有: 异常处理; C/C++如何启动JVM; JNI跟多线程;等介绍.有时间再后续…<br>介绍两本书:<br>The Java Native interface Programmer’s Guide and Specification<br>JNI++ User Guider  </p>\n</blockquote>"},{"layout":"post","title":"Java实现加密算法","duoshuo":true,"date":"2014-11-30T16:00:00.000Z","SyntaxHihglighter":true,"shTheme":"shThemeMidnight","_content":"\n目录:\n\n\tBase64\n\t消息摘要算法\n\t\tMD\n\t\tSHA\n\t\tMAC\n\t对称加密算法\n\t\tDES\n\t\t3DES\n\t\tAES\n\t\tPBE\n\t非对称加密算法\n\t\tDH\n\t\tRSA\n\t\tElGamal\n\t数字签名算法\n\t\tRSA\n\t\tDSA\n\t\tECDSA\n\t其它算法\n\t\tIDEA\n\t\tCRC\n\n<!-- more -->\n\n# Base64\n\n```java\n\tpublic static void jdkBase64(String msg) {\n\t\ttry {\n\t\t\tBASE64Encoder encoder = new BASE64Encoder();\n\t\t\tString encode = encoder.encode(msg.getBytes());\n\t\t\tSystem.out.println(\"encode:\" + encode);\n\t\t\t\n\t\t\tBASE64Decoder decoder = new BASE64Decoder();\n\t\t\tbyte[] b = decoder.decodeBuffer(encode);\n\t\t\tSystem.out.println(\"decoder:\" + new String(b));\n\t\t} catch (Exception e) {\n\t\t}\n\t}\n\n\tpublic static void commonsCodesBase64(String msg) {\n\t\tbyte[] encodeBytes = org.apache.commons.codec.binary.Base64.encodeBase64(msg.getBytes());\n\t\tSystem.out.println(\"encode:\" + new String(encodeBytes));\n\n\t\tbyte[] decodeBytes = org.apache.commons.codec.binary.Base64.decodeBase64(encodeBytes);\n\t\tSystem.out.println(\"decode:\" + new String(decodeBytes));\n\t}\n\t\n\tpublic static void bouncyCastleBase64(String msg) {\n\t\tbyte[] encodeBytes = org.bouncycastle.util.encoders.Base64.encode(msg.getBytes());\n\t\tSystem.out.println(\"encode:\" + new String(encodeBytes));\n\t\t\n\t\tbyte[] decodeBytes = org.bouncycastle.util.encoders.Base64.decode(encodeBytes);\n\t\tSystem.out.println(\"decode:\" + new String(decodeBytes));\n\t}\n```\n# 消息摘要算法\n\n## 消息摘要算法 - MD \n \n\t 算法:\n\t MD2  实现方:JDK\n\t MD4  实现方:BouncyCastle 简称BC\n\t MD5  实现方:JDK\n\n\n```java\n\tpublic static void jdkMD2(String msg) {\n\t\ttry {\n\t\t\tMessageDigest md = MessageDigest.getInstance(\"MD2\");\n\t\t\tbyte[] md2Bytes = md.digest(msg.getBytes());\n\t\t\tSystem.out.println(\"JDK MD2:\" + org.apache.commons.codec.binary.Hex.encodeHexString(md2Bytes));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void jdkMD5(String msg) {\n\t\ttry {\n\t\t\tMessageDigest md = MessageDigest.getInstance(\"MD5\");\n\t\t\tbyte[] md5Bytes = md.digest(msg.getBytes());\n\t\t\tSystem.out.println(\"JDK MD5:\" + org.apache.commons.codec.binary.Hex.encodeHexString(md5Bytes));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t// BouncyCastle\n\tpublic static void bcMD4(String msg) {\n\t\ttry {\n\t\t\tSecurity.addProvider(new BouncyCastleProvider());// 为JDK设置算法\n\t\t\tMessageDigest md = MessageDigest.getInstance(\"MD4\");\n\t\t\tbyte[] md4Bytes = md.digest(msg.getBytes());\n\t\t\tSystem.out.println(\"JDK MD5:\" + org.apache.commons.codec.binary.Hex.encodeHexString(md4Bytes));\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tDigest digest = new MD4Digest();\n\t\tdigest.update(msg.getBytes(), 0, msg.getBytes().length);\n\t\tbyte[] md4Byte = new byte[digest.getDigestSize()];\n\t\tdigest.doFinal(md4Byte, 0);\n\t\tSystem.out.println(\"BC MD4: \" + org.bouncycastle.util.encoders.Hex.toHexString(md4Byte));\n\t}\n\n\t// BouncyCastle\n\tpublic static void bcMD5(String msg) {\n\t\tDigest digest = new MD5Digest();\n\t\tdigest.update(msg.getBytes(), 0, msg.getBytes().length);\n\t\tbyte[] md5Byte = new byte[digest.getDigestSize()];\n\t\tdigest.doFinal(md5Byte, 0);\n\t\tSystem.out.println(\"BC MD5: \" + org.bouncycastle.util.encoders.Hex.toHexString(md5Byte));\n\t}\n\t\n\t//commons codec\n\tpublic static void ccMD5(String msg){\n\t\tSystem.out.println(\"CC MD5:\"+DigestUtils.md5Hex(msg.getBytes()));\n\t}\n\t//commons codec\n\tpublic static void ccMD2(String msg){\n\t\tSystem.out.println(\"CC MD2:\"+DigestUtils.md2Hex(msg.getBytes()));\n\t}\n\n\t//-----------------\n\tpublic static final String MD5_TYPE_16 = \"t_16\";\n\tpublic static final String MD5_TYPE_32 = \"T_32\";\n\n\tpublic static String md5s(String plainText, String type) {\n\t\ttry {\n\t\t\tMessageDigest md = MessageDigest.getInstance(\"MD5\");\n\t\t\tmd.update(plainText.getBytes());\n\t\t\tbyte b[] = md.digest();\n\n\t\t\tint i;\n\n\t\t\tStringBuffer buf = new StringBuffer(\"\");\n\t\t\tfor (int offset = 0; offset < b.length; offset++) {\n\t\t\t\ti = b[offset];\n\t\t\t\tif (i < 0)\n\t\t\t\t\ti += 256;\n\t\t\t\tif (i < 16)\n\t\t\t\t\tbuf.append(\"0\");\n\t\t\t\tbuf.append(Integer.toHexString(i));\n\t\t\t}\n\t\t\tString str = buf.toString();\n\n\t\t\tif (type.equals(MD5_TYPE_16)) {\n\t\t\t\tstr = str.substring(8, 24);\n\t\t\t}\n\n\t\t\treturn str;\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n\n```\n\n## 消息摘要算法 - SHA\n\n\t安全散列算法\n\t固定长度摘要信息\n\tSHA-1  SHA-2(SHA-224,SHA-256,SHA-384,SHA-512)\n\n\t算法:\n\tSHA-1    实现方:JDK\n\tSHA-224  实现方:BC\n\tSHA-256  实现方:JDK\n\tSHA-384  实现方:JDK\n\tSHA-512  实现方:JDK\n\n\n```java\n\n\tpublic static void jdkSHA1(String msg) {\n\t\ttry {\n\t\t\tMessageDigest md = MessageDigest.getInstance(\"SHA\");// SHA1\n\t\t\tmd.update(msg.getBytes());\n\t\t\tSystem.out.println(\"jdk SHA-1:\" + Hex.encodeHexString(md.digest()));\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void bcSHA1(String msg) {\n\t\tDigest digest = new SHA1Digest();\n\t\tdigest.update(msg.getBytes(), 0, msg.getBytes().length);\n\t\tbyte[] sha1Byte = new byte[digest.getDigestSize()];\n\t\tdigest.doFinal(sha1Byte, 0);\n\t\tSystem.out.println(\"bc SHA-1:\" + org.bouncycastle.util.encoders.Hex.toHexString(sha1Byte));\n\t}\n\n\tpublic static void bcSHA224(String msg) {\n\t\tDigest digest = new SHA224Digest();\n\t\tdigest.update(msg.getBytes(), 0, msg.getBytes().length);\n\t\tbyte[] sha224Byte = new byte[digest.getDigestSize()];\n\t\tdigest.doFinal(sha224Byte, 0);\n\t\tSystem.out.println(\"bc SHA-224:\" + org.bouncycastle.util.encoders.Hex.toHexString(sha224Byte));\n\t}\n\n\tpublic static void jdkSHA224_2(String msg) {\n\t\ttry {\n\t\t\tSecurity.addProvider(new BouncyCastleProvider());// 设置\n\t\t\tMessageDigest md = MessageDigest.getInstance(\"SHA224\");// SHA224\n\t\t\tmd.update(msg.getBytes());\n\t\t\tSystem.out.println(\"jdk addProvider ->SHA-224:\" + Hex.encodeHexString(md.digest()));\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void ccSHA1(String msg) {\n\t\tSystem.out.println(\"cc sha1:\" + DigestUtils.sha1Hex(msg.getBytes()));\n\t\tSystem.out.println(\"cc sha512:\" + DigestUtils.sha512Hex((msg.getBytes())));\n\t}\n\n```\n\n## 消息摘要算法 - MAC\n \n\t MAC(Message Authentication Code)\n\t HMAC(keyed-Hash Message Authentication Code),含有密钥的散列函数算法\n\t 任何MD,SHA\n\t  -MD系列:HmacMD2 , HmacMD4 , HmacMD5\n\t  -SHA系列: HmacSHA1, HmacSHA224,HmacSHA256,HmacSHA384,HmacSHA512\n\t  \n\t  算法:\n\t  HmacMD2    实现方:BC\n\t  HmacMD4    实现方:BC\n\t  HmacMD5    实现方:JDK\n\t  HamcSHA1   实现方:JKD\n\t  HmacSHA224 实现方:BC\n\t  HmacSHA256 实现方:JKD\n\t  HmacSHA384 实现方:JKD\n\t  HmacSHA512 实现方:JKD\n\t  \n\t  \n\t  \n\t  其它消息摘要算法\n\t  RipeMD\n\t  Tiger\n\t  Whirlpool\n\t  GOST3411\n\t  \n\t  Bouncy Castle实现\n\n\n```java\n\tpublic static void jdkHmacMD5(String msg, String keyParameter) {\n\t\ttry {\n\t\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(\"HmacMD5\");\n\t\t\tSecretKey secretKey = keyGenerator.generateKey();// 产生密钥\n\t\t\tbyte[] key = secretKey.getEncoded();// 获取密钥\n\n\t\t\tkey = Hex.decodeHex(keyParameter.toCharArray());//\n\n\t\t\t// 还原密钥\n\t\t\tSecretKey restoreSecretKey = new SecretKeySpec(key, \"HmacMD5\");\n\t\t\tMac mac = Mac.getInstance(restoreSecretKey.getAlgorithm());// 实例化MAC\n\t\t\tmac.init(restoreSecretKey);\n\t\t\tbyte[] hmacMD5Bytes = mac.doFinal(msg.getBytes());// 执行摘要\n\t\t\tSystem.out.println(\"jdk hmacMD5:\" + Hex.encodeHexString(hmacMD5Bytes));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void bcHmacMD5(String msg, String keyParameter) {\n\t\tHMac hmac = new HMac(new MD5Digest());\n\n\t\tbyte[] b = org.bouncycastle.util.encoders.Hex.decode(keyParameter.getBytes());\n\t\tKeyParameter k = new KeyParameter(b);\n\t\thmac.init(k);\n\t\thmac.update(msg.getBytes(), 0, msg.getBytes().length);\n\n\t\tbyte[] hmacMD5Bytes = new byte[hmac.getMacSize()];\n\t\thmac.doFinal(hmacMD5Bytes, 0);\n\n\t\tSystem.out.println(\"bc hmacMD5:\" + org.bouncycastle.util.encoders.Hex.toHexString(hmacMD5Bytes));\n\t}\n```\n\n# 对称加密算法\n\n## 对称加密算法 - DEC - 3DEC \n\n\t 初等\n\t DES\n\t\t-3DES\n\t AES\n\t PBE\n\t IDEA\n\t \n\t DES(Data Encryptiong Standard) 数据加密标准\n\t 对称加密元老.\n\t \n\t 密钥长度56  默认56  工作模式:ECB,CBC,PCBC,CTR,CTS,CFB,CFB8,到128,OFB,OFB8到128 \n\t 实现方:JDK 填充方式:NoPadding,PKCS5Padding,ISO10126Padding, \n\t 实现方:BC 填充方式:PKCS7Padding,ISO10126d2Padding,X932Padding,ISO7816d4Pading,ZeroBytePading\n\t \n\t 3DES(Triple DES或者DESede)\n\t 密钥长度112,168  默认168 \n\t 密钥长度128,192  默认168\n\n```java\n\tpublic static void jdkDES(String src) {\n\t\ttry {\n\t\t\t// 生成KEY\n\t\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(\"DES\");\n\t\t\tkeyGenerator.init(56);\n\t\t\tSecretKey secretKey = keyGenerator.generateKey();\n\t\t\tbyte[] bytesKey = secretKey.getEncoded();\n\n\t\t\t// KEY转换\n\t\t\tDESKeySpec desKeySpec = new DESKeySpec(bytesKey);\n\t\t\tSecretKeyFactory factory = SecretKeyFactory.getInstance(\"DES\");\n\t\t\tKey convertSecretKey = factory.generateSecret(desKeySpec);\n\n\t\t\t// 加密\n\t\t\tCipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, convertSecretKey);\n\t\t\tbyte[] result = cipher.doFinal(src.getBytes());\n\t\t\tSystem.out.println(\"jdk des encrypt : \" + Hex.encodeHexString(result));\n\n\t\t\t// 解密\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, convertSecretKey);\n\t\t\tresult = cipher.doFinal(result);\n\t\t\tSystem.out.println(\"jdk des decrypt : \" + new String(result));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void bcDES(String src) {\n\t\ttry {\n\t\t\tSecurity.addProvider(new BouncyCastleProvider());\n\n\t\t\t// 生成KEY\n\t\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(\"DES\", \"BC\");\n\t\t\tkeyGenerator.getProvider();\n\t\t\tkeyGenerator.init(56);\n\t\t\tSecretKey secretKey = keyGenerator.generateKey();\n\t\t\tbyte[] bytesKey = secretKey.getEncoded();\n\n\t\t\t// KEY转换\n\t\t\tDESKeySpec desKeySpec = new DESKeySpec(bytesKey);\n\t\t\tSecretKeyFactory factory = SecretKeyFactory.getInstance(\"DES\");\n\t\t\tKey convertSecretKey = factory.generateSecret(desKeySpec);\n\n\t\t\t// 加密\n\t\t\tCipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, convertSecretKey);\n\t\t\tbyte[] result = cipher.doFinal(src.getBytes());\n\t\t\tSystem.out.println(\"bc des encrypt : \" + Hex.encodeHexString(result));\n\n\t\t\t// 解密\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, convertSecretKey);\n\t\t\tresult = cipher.doFinal(result);\n\t\t\tSystem.out.println(\"bc des decrypt : \" + new String(result));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void jdk3DES(String src) {\n\t\ttry {\n\t\t\t// 生成KEY\n\t\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(\"DESede\");\n\t\t\t// keyGenerator.init(168);\n\t\t\tkeyGenerator.init(new SecureRandom());// 默认长度\n\t\t\tSecretKey secretKey = keyGenerator.generateKey();\n\t\t\tbyte[] bytesKey = secretKey.getEncoded();\n\n\t\t\t// KEY转换\n\t\t\tDESKeySpec desKeySpec = new DESKeySpec(bytesKey);\n\t\t\tSecretKeyFactory factory = SecretKeyFactory.getInstance(\"DES\");\n\t\t\tKey convertSecretKey = factory.generateSecret(desKeySpec);\n\n\t\t\t// 加密\n\t\t\tCipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, convertSecretKey);\n\t\t\tbyte[] result = cipher.doFinal(src.getBytes());\n\t\t\tSystem.out.println(\"jdk 3des encrypt : \" + Base64.encodeBase64String(result));\n\n\t\t\t// 解密\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, convertSecretKey);\n\t\t\tresult = cipher.doFinal(result);\n\t\t\tSystem.out.println(\"jdk 3des decrypt : \" + new String(result));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n```\n\n\n## 对称加密算法 - AES\n\n\t DES替代者\n\t \n\t 密钥长度:128,192,256 默认128 工作模式:ECB,CBC,PCBC,CTR,CTS,CFB,CFB8到128,OFB,OFB8到128 \n\t 填充方式:NoPadding,PKCS5Padding,ISO10126Padding 实现方:JDK(256位密钥需要获得无政策限制权限文件)\n\t 填充方式:PKCS7Padding,ZeroBytePadding 实现方:BC\n\t \n\t 无政策限制权限文件是指,因为某些国家的进口管制限制,Java发布的远行环境包中的加解密有一定的限制\n\n```java\n\tpublic static void jdkAES(String src) {\n\t\ttry {\n\t\t\t// 生成KEY\n\t\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n\t\t\tkeyGenerator.init(128);\n\t\t\tSecretKey secretKey = keyGenerator.generateKey();\n\t\t\tbyte[] keyBytes = secretKey.getEncoded();\n\n\t\t\t// key转换\n\t\t\tKey key = new SecretKeySpec(keyBytes, \"AES\");\n\n\t\t\t// 加密\n\t\t\tCipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, key);\n\t\t\tbyte[] result = cipher.doFinal(src.getBytes());\n\t\t\tSystem.out.println(\"jdk aes encrypt : \" + Base64.encodeBase64String(result));\n\n\t\t\t// 解密\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, key);\n\t\t\tresult = cipher.doFinal(result);\n\t\t\tSystem.out.println(\"jdk aes desrypt : \" + new String(result));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n```\n\n\n## 对称加密算法 - PBE\n\n\tPBE(Password Based Encryption)基于口令加密\n\n\t算法                         密钥长度    默认  工作模式       填充方式      实现\n\tPBEWithMD5AndDES                64       64      CBC       PKCS5Padding       BC\n\tPBEWithMd5AndRC2                112      128               PKCS7Padding\n\tPBEWithSHA1AndDES               6        64                ISO10126Padding\n\tPBEWithSHAAndIDEA-CBC           128      128\n\tPBEWithSHAAnd2-KeyTripleDES-CBC 128      128\n\tPBEWithSHAAnd3-KeyTripleDES-CBC 192      192\n\n```java\n\n\tpublic static void jdkPBE(String src) {\n\t\ttry {\n\t\t\t// 初始化盐\n\t\t\tSecureRandom random = new SecureRandom();\n\t\t\tbyte[] salt = random.generateSeed(8);\n\n\t\t\t// 口令与密钥\n\t\t\tString password = \"password_comtu\";\n\t\t\tPBEKeySpec pbeKeySpec = new PBEKeySpec(password.toCharArray());\n\t\t\tSecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBEWITHMD5andDES\");\n\t\t\tKey key = factory.generateSecret(pbeKeySpec);\n\n\t\t\t// 加密\n\t\t\tPBEParameterSpec pbeParameterSpec = new PBEParameterSpec(salt, 100);\n\t\t\tCipher cipher = Cipher.getInstance(\"PBEWITHMD5andDES\");\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, key, pbeParameterSpec);\n\t\t\tbyte[] result = cipher.doFinal(src.getBytes());\n\t\t\tSystem.out.println(\"jdk pbe encrypt : \" + Base64.encodeBase64String(result));\n\n\t\t\t// 解密\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, key, pbeParameterSpec);\n\t\t\tresult = cipher.doFinal(result);\n\t\t\tSystem.out.println(\"jdk pbe decrypt : \" + new String(result));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n```\n\n# 非对称加密算法\n\n## 非对称加密算法 - DH\n\t\n\t高级 \n\t双保险 \n\t公钥,私钥\n \n\t  DH(Diffie-Hellman)密钥交换算法\n\t  RSA-基于因子分解 ElGamal - 基于离散对数 \n\t  ECC(Elliptical Curve Cryptography) - 椭圆曲线加密\n \n \n\tDH 密钥长度: 512~1024(64倍数) 默认1024 实现方:JDK\n \n```java\n\tpublic static void jdkDH(String src) {\n\t\ttry {\n\t\t\t// 1.初始化发送方密钥\n\t\t\tKeyPairGenerator senderKeyPairGenerator = KeyPairGenerator.getInstance(\"DH\");\n\t\t\tsenderKeyPairGenerator.initialize(512);\n\t\t\tKeyPair senderKeyPair = senderKeyPairGenerator.generateKeyPair();\n\t\t\tbyte[] senderPublicKeyEnc = senderKeyPair.getPublic().getEncoded();// 发送方公钥，发送给接收方（网络、文件。。。）\n\n\t\t\t// 2.初始化接收方密钥\n\t\t\tKeyFactory receiverKeyFactory = KeyFactory.getInstance(\"DH\");\n\t\t\tX509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(senderPublicKeyEnc);\n\t\t\tPublicKey receiverPublicKey = receiverKeyFactory.generatePublic(x509EncodedKeySpec);\n\t\t\tDHParameterSpec dhParameterSpec = ((DHPublicKey) receiverPublicKey).getParams();\n\t\t\tKeyPairGenerator receiverKeyPairGenerator = KeyPairGenerator.getInstance(\"DH\");\n\t\t\treceiverKeyPairGenerator.initialize(dhParameterSpec);\n\t\t\tKeyPair receiverKeypair = receiverKeyPairGenerator.generateKeyPair();\n\t\t\tPrivateKey receiverPrivateKey = receiverKeypair.getPrivate();\n\t\t\tbyte[] receiverPublicKeyEnc = receiverKeypair.getPublic().getEncoded();\n\n\t\t\t// 3.密钥构建\n\t\t\tKeyAgreement receiverKeyAgreement = KeyAgreement.getInstance(\"DH\");\n\t\t\treceiverKeyAgreement.init(receiverPrivateKey);\n\t\t\treceiverKeyAgreement.doPhase(receiverPublicKey, true);\n\t\t\tSecretKey receiverDesKey = receiverKeyAgreement.generateSecret(\"DES\");\n\n\t\t\tKeyFactory senderKeyFactory = KeyFactory.getInstance(\"DH\");\n\t\t\tx509EncodedKeySpec = new X509EncodedKeySpec(receiverPublicKeyEnc);\n\t\t\tPublicKey senderPublicKey = senderKeyFactory.generatePublic(x509EncodedKeySpec);\n\t\t\tKeyAgreement senderKeyAgreement = KeyAgreement.getInstance(\"DH\");\n\t\t\tsenderKeyAgreement.init(senderKeyPair.getPrivate());\n\t\t\tsenderKeyAgreement.doPhase(senderPublicKey, true);\n\t\t\tSecretKey senderDesKey = senderKeyAgreement.generateSecret(\"DES\");\n\n\t\t\t// if (com.sun.org.apache.xalan.internal.utils.Objects.equals(receiverDesKey, senderDesKey)) {\n\t\t\tif (receiverDesKey.equals(senderDesKey)) {\n\t\t\t\tSystem.out.println(\"双方密钥相同\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"双方密钥不同\");\n\t\t\t}\n\n\t\t\t// 4.加密\n\t\t\tCipher cipher = Cipher.getInstance(\"DES\");\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, senderDesKey);\n\t\t\tbyte[] result = cipher.doFinal(src.getBytes());\n\t\t\tSystem.out.println(\"jdk dh encrypt : \" + Base64.encodeBase64String(result));\n\n\t\t\t// 5.解密\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, receiverDesKey);\n\t\t\tresult = cipher.doFinal(result);\n\t\t\tSystem.out.println(\"jdk dh decrypt : \" + new String(result));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n```\n\n\n\n## 非对称加密算法 - 数字签名算法 - RSA\n\n\t经典算法 \n\tMD,SHA两类\n\n\t算法:\n\tMD2withRSA       实现方: JDK\n\tMD5withRSA       实现方: JDK\n\tSHA1withRSA      实现方: JDK\n\tSHA224withRSA    实现方: BC\n\tSHA256withRSA    实现方: BC\n\tSHA384withRSA    实现方: BC\n\tSHA512withRSA    实现方: BC\n\tRIPEMD128withRSA 实现方: BC\n\tRIPEMD160withRSA 实现方: BC\n\n\n\t非对称加密算法-RSA\n\t唯一广泛接受并实现\n\t数据加密&数字签名\n\t公钥加密,私钥解密\n\t私钥加密,公钥解密\n\n\tJDK 密钥长度:512~65536(64整数倍) 工作模式:ECB 默认长度:1024 填充方式: \n\tNoPadding\n\tPKCS1Padding\n\tOAEPWITHMD5AndMGF1Pading\n\tOAEPWITHSHA1AndMGF1Pading\n\tOAEPWITHSHA256AndMGF1Pading\n\tOAEPWITHSHA384AndMGF1Pading\n\tOAEPWITHSHA512AndMGF1Pading\n\n\tBC 密钥长度:512~65536(64整数倍) 工作模式:NONE 默认长度:2048 填充方式: \n\tNoPadding\n\tPKCS1Padding\n\tOAEPWITHMD5AndMGF1Pading\n\tOAEPWITHSHA1AndMGF1Pading\n\tOAEPWITHSHA224AndMGF1Pading\n\tOAEPWITHSHA256AndMGF1Pading\n\tOAEPWITHSHA384AndMGF1Pading\n\tOAEPWITHSHA512AndMGF1Pading\n\tISO9796-1Padding\n\n\n```java\n\n\tpublic static void jdkRSA(String msg) {\n\t\ttry {\n\t\t\t// 1.初始化密钥\n\t\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n\t\t\tkeyPairGenerator.initialize(512);\n\t\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\t\t\tRSAPublicKey rsaPublicKey = (RSAPublicKey) keyPair.getPublic();\n\t\t\tRSAPrivateKey rsaPrivateKey = (RSAPrivateKey) keyPair.getPrivate();\n\n\t\t\t// 2.执行签名\n\t\t\tPKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(rsaPrivateKey.getEncoded());\n\t\t\tKeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n\t\t\tPrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);\n\t\t\tSignature signature = Signature.getInstance(\"MD5withRSA\");\n\t\t\tsignature.initSign(privateKey);\n\t\t\tsignature.update(msg.getBytes());\n\t\t\tbyte[] result = signature.sign();\n\t\t\tSystem.out.println(\"jdk rsa sign: \" + Hex.encodeHexString(result));\n\n\t\t\t// 3.验证签名\n\t\t\tX509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(rsaPublicKey.getEncoded());\n\t\t\tkeyFactory = KeyFactory.getInstance(\"RSA\");\n\t\t\tPublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);\n\t\t\tsignature = Signature.getInstance(\"MD5withRSA\");\n\t\t\tsignature.initVerify(publicKey);\n\t\t\tsignature.update(msg.getBytes());\n\t\t\tboolean bool = signature.verify(result);\n\t\t\tSystem.out.println(\"jdk rea verify:\" + bool);\n\t\t} catch (Exception e) {\n\t\t}\n\t}\n\n\tpublic static void jdkRSA2(String src) {\n\t\ttry {\n\t\t\t// 1.初始化密钥\n\t\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n\t\t\tkeyPairGenerator.initialize(512);\n\t\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\t\t\tRSAPublicKey rsaPublicKey = (RSAPublicKey) keyPair.getPublic();\n\t\t\tRSAPrivateKey rsaPrivateKey = (RSAPrivateKey) keyPair.getPrivate();\n\t\t\tSystem.out.println(\"Public Key : \" + Base64.encodeBase64String(rsaPublicKey.getEncoded()));\n\t\t\tSystem.out.println(\"Private Key : \" + Base64.encodeBase64String(rsaPrivateKey.getEncoded()));\n\n\t\t\t// 2.私钥加密、公钥解密——加密\n\t\t\tPKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(rsaPrivateKey.getEncoded());\n\t\t\tKeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n\t\t\tPrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);\n\t\t\tCipher cipher = Cipher.getInstance(\"RSA\");\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, privateKey);\n\t\t\tbyte[] result = cipher.doFinal(src.getBytes());\n\t\t\tSystem.out.println(\"私钥加密、公钥解密——加密 : \" + Base64.encodeBase64String(result));\n\n\t\t\t// 3.私钥加密、公钥解密——解密\n\t\t\tX509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(rsaPublicKey.getEncoded());\n\t\t\tkeyFactory = KeyFactory.getInstance(\"RSA\");\n\t\t\tPublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);\n\t\t\tcipher = Cipher.getInstance(\"RSA\");\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, publicKey);\n\t\t\tresult = cipher.doFinal(result);\n\t\t\tSystem.out.println(\"私钥加密、公钥解密——解密：\" + new String(result));\n\n\t\t\t// 4.公钥加密、私钥解密——加密\n\t\t\tx509EncodedKeySpec = new X509EncodedKeySpec(rsaPublicKey.getEncoded());\n\t\t\tkeyFactory = KeyFactory.getInstance(\"RSA\");\n\t\t\tpublicKey = keyFactory.generatePublic(x509EncodedKeySpec);\n\t\t\tcipher = Cipher.getInstance(\"RSA\");\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, publicKey);\n\t\t\tresult = cipher.doFinal(src.getBytes());\n\t\t\tSystem.out.println(\"公钥加密、私钥解密——加密 : \" + Base64.encodeBase64String(result));\n\n\t\t\t// 5.公钥加密、私钥解密——解密\n\t\t\tpkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(rsaPrivateKey.getEncoded());\n\t\t\tkeyFactory = KeyFactory.getInstance(\"RSA\");\n\t\t\tprivateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);\n\t\t\tcipher = Cipher.getInstance(\"RSA\");\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, privateKey);\n\t\t\tresult = cipher.doFinal(result);\n\t\t\tSystem.out.println(\"公钥加密、私钥解密——解密：\" + new String(result));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n```\n\n\n## 非对称加密算法 - ElGamal\n\n\t  公钥加密算法\n\t 实现方:BC 密钥长度:160~16384(8的整数倍) , 默认:1024 工作模式:ECB,NONE\n\t 填充方式:\n\t NoPadding , PKCS1Padding\n\t OAEPWITHMD5AndMGF1Pading\n\t OAEPWITSHA1AndMGF1Pading\n\t OAEPWITSHA224AndMGF1Pading\n\t OAEPWITSHA256AndMGF1Pading\n\t OAEPWITSHA384AndMGF1Pading\n\t OAEPWITSHA512AndMGF1Pading\n\t ISO9796-1Padding\n\n\n```java\n\tpublic static void bcElGamal(String src) {\n\t\ttry {\n\t\t\t// 公钥加密,私钥解密\n\t\t\tSecurity.addProvider(new BouncyCastleProvider());\n\n\t\t\t// 1.初始化密钥\n\t\t\tAlgorithmParameterGenerator algorithmParameterGenerator = AlgorithmParameterGenerator.getInstance(\"ElGamal\");\n\t\t\talgorithmParameterGenerator.init(256);\n\t\t\tAlgorithmParameters algorithmParameters = algorithmParameterGenerator.generateParameters();\n\n\t\t\tDHParameterSpec dhParameterSpec =  (DHParameterSpec) algorithmParameters.getParameterSpec(DHParameterSpec.class);\n\t\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"ElGamal\");\n\t\t\tkeyPairGenerator.initialize(dhParameterSpec, new SecureRandom());\n\t\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\t\t\tPublicKey elGamalPublicKey = keyPair.getPublic();\n\t\t\tPrivateKey elGamalPrivateKey = keyPair.getPrivate();\n\n\t\t\tSystem.out.println(\"Public Key:\" + org.apache.commons.codec.binary.Base64.encodeBase64String(elGamalPublicKey.getEncoded()));\n\t\t\tSystem.out.println(\"Private Key:\" + org.apache.commons.codec.binary.Base64.encodeBase64String(elGamalPrivateKey.getEncoded()));\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n```\n\n# 数字签名算法\n\n## 数字签名算法 - DSA\n\n\t  DSS (Digital Signature Standard)数字签名标准\n\t  DSA(Digital Signature Algorithm)数字签名算法\n\t  DSA仅包含数字签名\n\t  \n\t  算法:\n\t  SHA1withDSA    实现方:JDK\n\t  SHA224withDSA  实现方:BC\n\t  SHA256withDSA  实现方:BC\n\t  SHA384withDSA  实现方:BC\n\t  SHA512withDSA  实现方:BC\n\n\n```java\n\tpublic static void jdkDSA(String src) {\n\t\ttry {\n\t\t\t// 1.初始化密钥\n\t\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"DSA\");\n\t\t\tkeyPairGenerator.initialize(512);\n\t\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\t\t\tDSAPublicKey dsaPublicKey = (DSAPublicKey) keyPair.getPublic();\n\t\t\tDSAPrivateKey dsaPrivateKey = (DSAPrivateKey) keyPair.getPrivate();\n\n\t\t\t// 2.执行签名\n\t\t\tPKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(dsaPrivateKey.getEncoded());\n\t\t\tKeyFactory keyFactory = KeyFactory.getInstance(\"DSA\");\n\t\t\tPrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);\n\t\t\tSignature signature = Signature.getInstance(\"SHA1withDSA\");\n\t\t\tsignature.initSign(privateKey);\n\t\t\tsignature.update(src.getBytes());\n\t\t\tbyte[] result = signature.sign();\n\t\t\tSystem.out.println(\"jdk dsa sign : \" + Hex.encodeHexString(result));\n\n\t\t\t// 3.验证签名\n\t\t\tX509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(dsaPublicKey.getEncoded());\n\t\t\tkeyFactory = KeyFactory.getInstance(\"DSA\");\n\t\t\tPublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);\n\t\t\tsignature = Signature.getInstance(\"SHA1withDSA\");\n\t\t\tsignature.initVerify(publicKey);\n\t\t\tsignature.update(src.getBytes());\n\t\t\tboolean bool = signature.verify(result);\n\t\t\tSystem.out.println(\"jdk dsa verify : \" + bool);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n```\n\n\n## 数字签名算法 - ECDSA\n\n\t 微软\n\t Elliptic Curve Digital Signature Algorithm , 椭圆曲线数字签名算法\n\t 速度快,强度高,签名短.\n\t \n\t 算法:\n\t NNONEwithECDSA       实现方:JDK/BC  签名长度:128 \n\t RIPEMD160withECDSA   实现方:BC      签名长度:160\n\t SHA1withECDSA        实现方:JDK/BC  签名长度:160\n\t SHA224withECDSA      实现方:BC      签名长度:224\n\t SHA256withECDSA      实现方:JDK/BC  签名长度:256\n\t SHA384withECDSA      实现方:JDK/BC  签名长度:384\n\t SHA512withECDSA      实现方:JDK/BC  签名长度:512\n\t \n\tjdk版本1.7以上\n\n```java\n\tpublic static void jdkECDSA(String src) {\n\t\ttry {\n\t\t\t//1.初始化密钥\n\t\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"EC\");\n\t\t\tkeyPairGenerator.initialize(256);\n\t\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\t\t\tECPublicKey ecPublicKey = (ECPublicKey)keyPair.getPublic();\n\t\t\tECPrivateKey ecPrivateKey = (ECPrivateKey)keyPair.getPrivate();\n\t\t\t\n\t\t\t//2.执行签名\n\t\t\tPKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(ecPrivateKey.getEncoded());\n\t\t\tKeyFactory keyFactory = KeyFactory.getInstance(\"EC\");\n\t\t\tPrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);\n\t\t\tSignature signature = Signature.getInstance(\"SHA1withECDSA\");\n\t\t\tsignature.initSign(privateKey);\n\t\t\tsignature.update(src.getBytes());\n\t\t\tbyte[] result = signature.sign();\n\t\t\tSystem.out.println(\"jdk ecdsa sign : \" + Hex.encodeHexString(result));\n\t\t\t\n\t\t\t//3.验证签名\n\t\t\tX509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(ecPublicKey.getEncoded());\n\t\t\tkeyFactory = KeyFactory.getInstance(\"EC\");\n\t\t\tPublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);\n\t\t\tsignature = Signature.getInstance(\"SHA1withECDSA\");\n\t\t\tsignature.initVerify(publicKey);\n\t\t\tsignature.update(src.getBytes());\n\t\t\tboolean bool = signature.verify(result);\n\t\t\tSystem.out.println(\"jdk ecdsa verify : \" + bool);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t}\n```\n\n# 其它算法\n\n## IDEA\n\n\t这种算法是在DES算法的基础上发展出来的，类似于三重DES。\n\t发展IDEA也是因为感到DES具有密钥太短等缺点。IDEA的密钥为128位，这么长的密钥在今后若干年内应该是安全的。\n\n```java\n\tpublic static void bcIDEA(String src) {\n\t\ttry {\n\t\t\tSecurity.addProvider(new BouncyCastleProvider());\n\t\t\t\n\t\t\t//生成key\n\t\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(\"IDEA\");\n\t\t\tkeyGenerator.init(128);\n\t\t\tSecretKey secretKey = keyGenerator.generateKey();\n\t\t\tbyte[] keyBytes = secretKey.getEncoded();\n\t\t\t\n\t\t\t//转换密钥\n\t\t\tKey key = new SecretKeySpec(keyBytes, \"IDEA\");\n\t\t\t\n\t\t\t//加密\n\t\t\tCipher cipher = Cipher.getInstance(\"IDEA/ECB/ISO10126Padding\");\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, key);\n\t\t\tbyte[] result = cipher.doFinal(src.getBytes());\n\t\t\tSystem.out.println(\"bc idea encrypt : \" + Base64.encodeBase64String(result));\n\t\t\t\n\t\t\t//解密\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, key);\n\t\t\tresult = cipher.doFinal(result);\n\t\t\tSystem.out.println(\"bc idea decrypt : \" + new String(result));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t}\n```\n\n\n## CRC\n\n```java\n\tpublic static void jdkCrc(String src){\n\t\tCRC32 crc = new CRC32();\n\t\tcrc.update(src.getBytes());\n\t\tString hex = Long.toHexString(crc.getValue());\n\t\tSystem.out.println(\"jdk crc32 : \" + hex);\n\t}\n```\n\n\n## 运行\n\n```java\n\tpublic static void main(String[] args) {\n\t\t\n\t\t//AES\n\t\tjdkAES(\"comtu\");\n\n\t\t//Base64\n\t\tjdkBase64(\"comtu\");\n\t\tcommonsCodesBase64(\"comtu\");\n\t\tbouncyCastleBase64(\"comtu\");\n\n\t\t//DES\n\t\tjdkDES(\"comtu\");\n\t\tbcDES(\"comtu\");\n\t\tjdk3DES(\"comtu\");\n\n\t\t//DH\n\t\tjdkDH(\"comtu\");\n\n\t\t//DSA\n\t\tjdkDSA(\"comtu\");\n\n\t\t//ECDSA\n\t\tjdkECDSA(\"comtu\");\n\n\t\t//ElGamal\n\t\tbcElGamal(\"comtu\");\n\t\t\n\t\t//HMAC\n\t\tjdkHmacMD5(\"comtu\", \"1234567890abcdef\");\n\t\tbcHmacMD5(\"comtu\", \"1234567890abcdef\");\n\n\t\t//IDEA\n\t\tbcIDEA(\"comtu\");\n\n\t\t//md\n\t\tSystem.out.println(\"MD5_TYPE_16:\" + Md.md5s(\"comtu\", MD5_TYPE_16));\n\t\tSystem.out.println(\"MD5_TYPE_32:\" + Md.md5s(\"comtu\", MD5_TYPE_32));\n\t\tjdkMD2(\"comtu\");\n\t\tjdkMD5(\"comtu\");\n\t\tbcMD4(\"comtu\");\n\t\tbcMD5(\"comtu\");\n\t\tccMD2(\"comtu\");\n\t\tccMD5(\"comtu\");\n\n\t\t//PBE\n\t\tjdkPBE(\"comtu\");\n\n\t\t//RSA\n\t\tjdkRSA(\"comtu\");\n\t\tjdkRSA2(\"comtu\");\n\n\t\n\t\t//SHA\n\t\tjdkSHA1(\"comtu\");\n\t\tbcSHA1(\"comtu\");\n\t\tbcSHA224(\"comtu\");\n\t\tjdkSHA224_2(\"comtu\");\n\t\tccSHA1(\"comtu\");\n\t}\n```\n\n案例引用如下三个jar包:\n\n\tbcprov-ext-jdk15on-149.jar\n\tbcprov-jdk15on-149.jar\n\tcommons-codec-1.10.jar\n\n代码引用包详情见原代码:\n\n# Demo下载\n\n[本文Demo源代码](/res/file/blog/2014/12/01/Java_security/Security.rar)\n\n","source":"_posts/2014-12-01-Java_security.md","raw":"---\nlayout : post\ntitle : \"Java实现加密算法\"\ncategory : Java\nduoshuo: true\ndate : 2014-12-01\ntags : [Java,Base64,AES,CRC,DES,DH,DSA,ECDSA,ElGamal,HMAC,IDEA,MD,PBE,RSA,SHA,加密,解密]\nSyntaxHihglighter: true\nshTheme: shThemeMidnight # shThemeDefault  shThemeDjango  shThemeEclipse  shThemeEmacs  shThemeFadeToGrey  shThemeMidnight  shThemeRDark\n---\n\n目录:\n\n\tBase64\n\t消息摘要算法\n\t\tMD\n\t\tSHA\n\t\tMAC\n\t对称加密算法\n\t\tDES\n\t\t3DES\n\t\tAES\n\t\tPBE\n\t非对称加密算法\n\t\tDH\n\t\tRSA\n\t\tElGamal\n\t数字签名算法\n\t\tRSA\n\t\tDSA\n\t\tECDSA\n\t其它算法\n\t\tIDEA\n\t\tCRC\n\n<!-- more -->\n\n# Base64\n\n```java\n\tpublic static void jdkBase64(String msg) {\n\t\ttry {\n\t\t\tBASE64Encoder encoder = new BASE64Encoder();\n\t\t\tString encode = encoder.encode(msg.getBytes());\n\t\t\tSystem.out.println(\"encode:\" + encode);\n\t\t\t\n\t\t\tBASE64Decoder decoder = new BASE64Decoder();\n\t\t\tbyte[] b = decoder.decodeBuffer(encode);\n\t\t\tSystem.out.println(\"decoder:\" + new String(b));\n\t\t} catch (Exception e) {\n\t\t}\n\t}\n\n\tpublic static void commonsCodesBase64(String msg) {\n\t\tbyte[] encodeBytes = org.apache.commons.codec.binary.Base64.encodeBase64(msg.getBytes());\n\t\tSystem.out.println(\"encode:\" + new String(encodeBytes));\n\n\t\tbyte[] decodeBytes = org.apache.commons.codec.binary.Base64.decodeBase64(encodeBytes);\n\t\tSystem.out.println(\"decode:\" + new String(decodeBytes));\n\t}\n\t\n\tpublic static void bouncyCastleBase64(String msg) {\n\t\tbyte[] encodeBytes = org.bouncycastle.util.encoders.Base64.encode(msg.getBytes());\n\t\tSystem.out.println(\"encode:\" + new String(encodeBytes));\n\t\t\n\t\tbyte[] decodeBytes = org.bouncycastle.util.encoders.Base64.decode(encodeBytes);\n\t\tSystem.out.println(\"decode:\" + new String(decodeBytes));\n\t}\n```\n# 消息摘要算法\n\n## 消息摘要算法 - MD \n \n\t 算法:\n\t MD2  实现方:JDK\n\t MD4  实现方:BouncyCastle 简称BC\n\t MD5  实现方:JDK\n\n\n```java\n\tpublic static void jdkMD2(String msg) {\n\t\ttry {\n\t\t\tMessageDigest md = MessageDigest.getInstance(\"MD2\");\n\t\t\tbyte[] md2Bytes = md.digest(msg.getBytes());\n\t\t\tSystem.out.println(\"JDK MD2:\" + org.apache.commons.codec.binary.Hex.encodeHexString(md2Bytes));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void jdkMD5(String msg) {\n\t\ttry {\n\t\t\tMessageDigest md = MessageDigest.getInstance(\"MD5\");\n\t\t\tbyte[] md5Bytes = md.digest(msg.getBytes());\n\t\t\tSystem.out.println(\"JDK MD5:\" + org.apache.commons.codec.binary.Hex.encodeHexString(md5Bytes));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t// BouncyCastle\n\tpublic static void bcMD4(String msg) {\n\t\ttry {\n\t\t\tSecurity.addProvider(new BouncyCastleProvider());// 为JDK设置算法\n\t\t\tMessageDigest md = MessageDigest.getInstance(\"MD4\");\n\t\t\tbyte[] md4Bytes = md.digest(msg.getBytes());\n\t\t\tSystem.out.println(\"JDK MD5:\" + org.apache.commons.codec.binary.Hex.encodeHexString(md4Bytes));\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tDigest digest = new MD4Digest();\n\t\tdigest.update(msg.getBytes(), 0, msg.getBytes().length);\n\t\tbyte[] md4Byte = new byte[digest.getDigestSize()];\n\t\tdigest.doFinal(md4Byte, 0);\n\t\tSystem.out.println(\"BC MD4: \" + org.bouncycastle.util.encoders.Hex.toHexString(md4Byte));\n\t}\n\n\t// BouncyCastle\n\tpublic static void bcMD5(String msg) {\n\t\tDigest digest = new MD5Digest();\n\t\tdigest.update(msg.getBytes(), 0, msg.getBytes().length);\n\t\tbyte[] md5Byte = new byte[digest.getDigestSize()];\n\t\tdigest.doFinal(md5Byte, 0);\n\t\tSystem.out.println(\"BC MD5: \" + org.bouncycastle.util.encoders.Hex.toHexString(md5Byte));\n\t}\n\t\n\t//commons codec\n\tpublic static void ccMD5(String msg){\n\t\tSystem.out.println(\"CC MD5:\"+DigestUtils.md5Hex(msg.getBytes()));\n\t}\n\t//commons codec\n\tpublic static void ccMD2(String msg){\n\t\tSystem.out.println(\"CC MD2:\"+DigestUtils.md2Hex(msg.getBytes()));\n\t}\n\n\t//-----------------\n\tpublic static final String MD5_TYPE_16 = \"t_16\";\n\tpublic static final String MD5_TYPE_32 = \"T_32\";\n\n\tpublic static String md5s(String plainText, String type) {\n\t\ttry {\n\t\t\tMessageDigest md = MessageDigest.getInstance(\"MD5\");\n\t\t\tmd.update(plainText.getBytes());\n\t\t\tbyte b[] = md.digest();\n\n\t\t\tint i;\n\n\t\t\tStringBuffer buf = new StringBuffer(\"\");\n\t\t\tfor (int offset = 0; offset < b.length; offset++) {\n\t\t\t\ti = b[offset];\n\t\t\t\tif (i < 0)\n\t\t\t\t\ti += 256;\n\t\t\t\tif (i < 16)\n\t\t\t\t\tbuf.append(\"0\");\n\t\t\t\tbuf.append(Integer.toHexString(i));\n\t\t\t}\n\t\t\tString str = buf.toString();\n\n\t\t\tif (type.equals(MD5_TYPE_16)) {\n\t\t\t\tstr = str.substring(8, 24);\n\t\t\t}\n\n\t\t\treturn str;\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n\n```\n\n## 消息摘要算法 - SHA\n\n\t安全散列算法\n\t固定长度摘要信息\n\tSHA-1  SHA-2(SHA-224,SHA-256,SHA-384,SHA-512)\n\n\t算法:\n\tSHA-1    实现方:JDK\n\tSHA-224  实现方:BC\n\tSHA-256  实现方:JDK\n\tSHA-384  实现方:JDK\n\tSHA-512  实现方:JDK\n\n\n```java\n\n\tpublic static void jdkSHA1(String msg) {\n\t\ttry {\n\t\t\tMessageDigest md = MessageDigest.getInstance(\"SHA\");// SHA1\n\t\t\tmd.update(msg.getBytes());\n\t\t\tSystem.out.println(\"jdk SHA-1:\" + Hex.encodeHexString(md.digest()));\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void bcSHA1(String msg) {\n\t\tDigest digest = new SHA1Digest();\n\t\tdigest.update(msg.getBytes(), 0, msg.getBytes().length);\n\t\tbyte[] sha1Byte = new byte[digest.getDigestSize()];\n\t\tdigest.doFinal(sha1Byte, 0);\n\t\tSystem.out.println(\"bc SHA-1:\" + org.bouncycastle.util.encoders.Hex.toHexString(sha1Byte));\n\t}\n\n\tpublic static void bcSHA224(String msg) {\n\t\tDigest digest = new SHA224Digest();\n\t\tdigest.update(msg.getBytes(), 0, msg.getBytes().length);\n\t\tbyte[] sha224Byte = new byte[digest.getDigestSize()];\n\t\tdigest.doFinal(sha224Byte, 0);\n\t\tSystem.out.println(\"bc SHA-224:\" + org.bouncycastle.util.encoders.Hex.toHexString(sha224Byte));\n\t}\n\n\tpublic static void jdkSHA224_2(String msg) {\n\t\ttry {\n\t\t\tSecurity.addProvider(new BouncyCastleProvider());// 设置\n\t\t\tMessageDigest md = MessageDigest.getInstance(\"SHA224\");// SHA224\n\t\t\tmd.update(msg.getBytes());\n\t\t\tSystem.out.println(\"jdk addProvider ->SHA-224:\" + Hex.encodeHexString(md.digest()));\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void ccSHA1(String msg) {\n\t\tSystem.out.println(\"cc sha1:\" + DigestUtils.sha1Hex(msg.getBytes()));\n\t\tSystem.out.println(\"cc sha512:\" + DigestUtils.sha512Hex((msg.getBytes())));\n\t}\n\n```\n\n## 消息摘要算法 - MAC\n \n\t MAC(Message Authentication Code)\n\t HMAC(keyed-Hash Message Authentication Code),含有密钥的散列函数算法\n\t 任何MD,SHA\n\t  -MD系列:HmacMD2 , HmacMD4 , HmacMD5\n\t  -SHA系列: HmacSHA1, HmacSHA224,HmacSHA256,HmacSHA384,HmacSHA512\n\t  \n\t  算法:\n\t  HmacMD2    实现方:BC\n\t  HmacMD4    实现方:BC\n\t  HmacMD5    实现方:JDK\n\t  HamcSHA1   实现方:JKD\n\t  HmacSHA224 实现方:BC\n\t  HmacSHA256 实现方:JKD\n\t  HmacSHA384 实现方:JKD\n\t  HmacSHA512 实现方:JKD\n\t  \n\t  \n\t  \n\t  其它消息摘要算法\n\t  RipeMD\n\t  Tiger\n\t  Whirlpool\n\t  GOST3411\n\t  \n\t  Bouncy Castle实现\n\n\n```java\n\tpublic static void jdkHmacMD5(String msg, String keyParameter) {\n\t\ttry {\n\t\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(\"HmacMD5\");\n\t\t\tSecretKey secretKey = keyGenerator.generateKey();// 产生密钥\n\t\t\tbyte[] key = secretKey.getEncoded();// 获取密钥\n\n\t\t\tkey = Hex.decodeHex(keyParameter.toCharArray());//\n\n\t\t\t// 还原密钥\n\t\t\tSecretKey restoreSecretKey = new SecretKeySpec(key, \"HmacMD5\");\n\t\t\tMac mac = Mac.getInstance(restoreSecretKey.getAlgorithm());// 实例化MAC\n\t\t\tmac.init(restoreSecretKey);\n\t\t\tbyte[] hmacMD5Bytes = mac.doFinal(msg.getBytes());// 执行摘要\n\t\t\tSystem.out.println(\"jdk hmacMD5:\" + Hex.encodeHexString(hmacMD5Bytes));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void bcHmacMD5(String msg, String keyParameter) {\n\t\tHMac hmac = new HMac(new MD5Digest());\n\n\t\tbyte[] b = org.bouncycastle.util.encoders.Hex.decode(keyParameter.getBytes());\n\t\tKeyParameter k = new KeyParameter(b);\n\t\thmac.init(k);\n\t\thmac.update(msg.getBytes(), 0, msg.getBytes().length);\n\n\t\tbyte[] hmacMD5Bytes = new byte[hmac.getMacSize()];\n\t\thmac.doFinal(hmacMD5Bytes, 0);\n\n\t\tSystem.out.println(\"bc hmacMD5:\" + org.bouncycastle.util.encoders.Hex.toHexString(hmacMD5Bytes));\n\t}\n```\n\n# 对称加密算法\n\n## 对称加密算法 - DEC - 3DEC \n\n\t 初等\n\t DES\n\t\t-3DES\n\t AES\n\t PBE\n\t IDEA\n\t \n\t DES(Data Encryptiong Standard) 数据加密标准\n\t 对称加密元老.\n\t \n\t 密钥长度56  默认56  工作模式:ECB,CBC,PCBC,CTR,CTS,CFB,CFB8,到128,OFB,OFB8到128 \n\t 实现方:JDK 填充方式:NoPadding,PKCS5Padding,ISO10126Padding, \n\t 实现方:BC 填充方式:PKCS7Padding,ISO10126d2Padding,X932Padding,ISO7816d4Pading,ZeroBytePading\n\t \n\t 3DES(Triple DES或者DESede)\n\t 密钥长度112,168  默认168 \n\t 密钥长度128,192  默认168\n\n```java\n\tpublic static void jdkDES(String src) {\n\t\ttry {\n\t\t\t// 生成KEY\n\t\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(\"DES\");\n\t\t\tkeyGenerator.init(56);\n\t\t\tSecretKey secretKey = keyGenerator.generateKey();\n\t\t\tbyte[] bytesKey = secretKey.getEncoded();\n\n\t\t\t// KEY转换\n\t\t\tDESKeySpec desKeySpec = new DESKeySpec(bytesKey);\n\t\t\tSecretKeyFactory factory = SecretKeyFactory.getInstance(\"DES\");\n\t\t\tKey convertSecretKey = factory.generateSecret(desKeySpec);\n\n\t\t\t// 加密\n\t\t\tCipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, convertSecretKey);\n\t\t\tbyte[] result = cipher.doFinal(src.getBytes());\n\t\t\tSystem.out.println(\"jdk des encrypt : \" + Hex.encodeHexString(result));\n\n\t\t\t// 解密\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, convertSecretKey);\n\t\t\tresult = cipher.doFinal(result);\n\t\t\tSystem.out.println(\"jdk des decrypt : \" + new String(result));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void bcDES(String src) {\n\t\ttry {\n\t\t\tSecurity.addProvider(new BouncyCastleProvider());\n\n\t\t\t// 生成KEY\n\t\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(\"DES\", \"BC\");\n\t\t\tkeyGenerator.getProvider();\n\t\t\tkeyGenerator.init(56);\n\t\t\tSecretKey secretKey = keyGenerator.generateKey();\n\t\t\tbyte[] bytesKey = secretKey.getEncoded();\n\n\t\t\t// KEY转换\n\t\t\tDESKeySpec desKeySpec = new DESKeySpec(bytesKey);\n\t\t\tSecretKeyFactory factory = SecretKeyFactory.getInstance(\"DES\");\n\t\t\tKey convertSecretKey = factory.generateSecret(desKeySpec);\n\n\t\t\t// 加密\n\t\t\tCipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, convertSecretKey);\n\t\t\tbyte[] result = cipher.doFinal(src.getBytes());\n\t\t\tSystem.out.println(\"bc des encrypt : \" + Hex.encodeHexString(result));\n\n\t\t\t// 解密\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, convertSecretKey);\n\t\t\tresult = cipher.doFinal(result);\n\t\t\tSystem.out.println(\"bc des decrypt : \" + new String(result));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void jdk3DES(String src) {\n\t\ttry {\n\t\t\t// 生成KEY\n\t\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(\"DESede\");\n\t\t\t// keyGenerator.init(168);\n\t\t\tkeyGenerator.init(new SecureRandom());// 默认长度\n\t\t\tSecretKey secretKey = keyGenerator.generateKey();\n\t\t\tbyte[] bytesKey = secretKey.getEncoded();\n\n\t\t\t// KEY转换\n\t\t\tDESKeySpec desKeySpec = new DESKeySpec(bytesKey);\n\t\t\tSecretKeyFactory factory = SecretKeyFactory.getInstance(\"DES\");\n\t\t\tKey convertSecretKey = factory.generateSecret(desKeySpec);\n\n\t\t\t// 加密\n\t\t\tCipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, convertSecretKey);\n\t\t\tbyte[] result = cipher.doFinal(src.getBytes());\n\t\t\tSystem.out.println(\"jdk 3des encrypt : \" + Base64.encodeBase64String(result));\n\n\t\t\t// 解密\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, convertSecretKey);\n\t\t\tresult = cipher.doFinal(result);\n\t\t\tSystem.out.println(\"jdk 3des decrypt : \" + new String(result));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n```\n\n\n## 对称加密算法 - AES\n\n\t DES替代者\n\t \n\t 密钥长度:128,192,256 默认128 工作模式:ECB,CBC,PCBC,CTR,CTS,CFB,CFB8到128,OFB,OFB8到128 \n\t 填充方式:NoPadding,PKCS5Padding,ISO10126Padding 实现方:JDK(256位密钥需要获得无政策限制权限文件)\n\t 填充方式:PKCS7Padding,ZeroBytePadding 实现方:BC\n\t \n\t 无政策限制权限文件是指,因为某些国家的进口管制限制,Java发布的远行环境包中的加解密有一定的限制\n\n```java\n\tpublic static void jdkAES(String src) {\n\t\ttry {\n\t\t\t// 生成KEY\n\t\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n\t\t\tkeyGenerator.init(128);\n\t\t\tSecretKey secretKey = keyGenerator.generateKey();\n\t\t\tbyte[] keyBytes = secretKey.getEncoded();\n\n\t\t\t// key转换\n\t\t\tKey key = new SecretKeySpec(keyBytes, \"AES\");\n\n\t\t\t// 加密\n\t\t\tCipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, key);\n\t\t\tbyte[] result = cipher.doFinal(src.getBytes());\n\t\t\tSystem.out.println(\"jdk aes encrypt : \" + Base64.encodeBase64String(result));\n\n\t\t\t// 解密\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, key);\n\t\t\tresult = cipher.doFinal(result);\n\t\t\tSystem.out.println(\"jdk aes desrypt : \" + new String(result));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n```\n\n\n## 对称加密算法 - PBE\n\n\tPBE(Password Based Encryption)基于口令加密\n\n\t算法                         密钥长度    默认  工作模式       填充方式      实现\n\tPBEWithMD5AndDES                64       64      CBC       PKCS5Padding       BC\n\tPBEWithMd5AndRC2                112      128               PKCS7Padding\n\tPBEWithSHA1AndDES               6        64                ISO10126Padding\n\tPBEWithSHAAndIDEA-CBC           128      128\n\tPBEWithSHAAnd2-KeyTripleDES-CBC 128      128\n\tPBEWithSHAAnd3-KeyTripleDES-CBC 192      192\n\n```java\n\n\tpublic static void jdkPBE(String src) {\n\t\ttry {\n\t\t\t// 初始化盐\n\t\t\tSecureRandom random = new SecureRandom();\n\t\t\tbyte[] salt = random.generateSeed(8);\n\n\t\t\t// 口令与密钥\n\t\t\tString password = \"password_comtu\";\n\t\t\tPBEKeySpec pbeKeySpec = new PBEKeySpec(password.toCharArray());\n\t\t\tSecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBEWITHMD5andDES\");\n\t\t\tKey key = factory.generateSecret(pbeKeySpec);\n\n\t\t\t// 加密\n\t\t\tPBEParameterSpec pbeParameterSpec = new PBEParameterSpec(salt, 100);\n\t\t\tCipher cipher = Cipher.getInstance(\"PBEWITHMD5andDES\");\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, key, pbeParameterSpec);\n\t\t\tbyte[] result = cipher.doFinal(src.getBytes());\n\t\t\tSystem.out.println(\"jdk pbe encrypt : \" + Base64.encodeBase64String(result));\n\n\t\t\t// 解密\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, key, pbeParameterSpec);\n\t\t\tresult = cipher.doFinal(result);\n\t\t\tSystem.out.println(\"jdk pbe decrypt : \" + new String(result));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n```\n\n# 非对称加密算法\n\n## 非对称加密算法 - DH\n\t\n\t高级 \n\t双保险 \n\t公钥,私钥\n \n\t  DH(Diffie-Hellman)密钥交换算法\n\t  RSA-基于因子分解 ElGamal - 基于离散对数 \n\t  ECC(Elliptical Curve Cryptography) - 椭圆曲线加密\n \n \n\tDH 密钥长度: 512~1024(64倍数) 默认1024 实现方:JDK\n \n```java\n\tpublic static void jdkDH(String src) {\n\t\ttry {\n\t\t\t// 1.初始化发送方密钥\n\t\t\tKeyPairGenerator senderKeyPairGenerator = KeyPairGenerator.getInstance(\"DH\");\n\t\t\tsenderKeyPairGenerator.initialize(512);\n\t\t\tKeyPair senderKeyPair = senderKeyPairGenerator.generateKeyPair();\n\t\t\tbyte[] senderPublicKeyEnc = senderKeyPair.getPublic().getEncoded();// 发送方公钥，发送给接收方（网络、文件。。。）\n\n\t\t\t// 2.初始化接收方密钥\n\t\t\tKeyFactory receiverKeyFactory = KeyFactory.getInstance(\"DH\");\n\t\t\tX509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(senderPublicKeyEnc);\n\t\t\tPublicKey receiverPublicKey = receiverKeyFactory.generatePublic(x509EncodedKeySpec);\n\t\t\tDHParameterSpec dhParameterSpec = ((DHPublicKey) receiverPublicKey).getParams();\n\t\t\tKeyPairGenerator receiverKeyPairGenerator = KeyPairGenerator.getInstance(\"DH\");\n\t\t\treceiverKeyPairGenerator.initialize(dhParameterSpec);\n\t\t\tKeyPair receiverKeypair = receiverKeyPairGenerator.generateKeyPair();\n\t\t\tPrivateKey receiverPrivateKey = receiverKeypair.getPrivate();\n\t\t\tbyte[] receiverPublicKeyEnc = receiverKeypair.getPublic().getEncoded();\n\n\t\t\t// 3.密钥构建\n\t\t\tKeyAgreement receiverKeyAgreement = KeyAgreement.getInstance(\"DH\");\n\t\t\treceiverKeyAgreement.init(receiverPrivateKey);\n\t\t\treceiverKeyAgreement.doPhase(receiverPublicKey, true);\n\t\t\tSecretKey receiverDesKey = receiverKeyAgreement.generateSecret(\"DES\");\n\n\t\t\tKeyFactory senderKeyFactory = KeyFactory.getInstance(\"DH\");\n\t\t\tx509EncodedKeySpec = new X509EncodedKeySpec(receiverPublicKeyEnc);\n\t\t\tPublicKey senderPublicKey = senderKeyFactory.generatePublic(x509EncodedKeySpec);\n\t\t\tKeyAgreement senderKeyAgreement = KeyAgreement.getInstance(\"DH\");\n\t\t\tsenderKeyAgreement.init(senderKeyPair.getPrivate());\n\t\t\tsenderKeyAgreement.doPhase(senderPublicKey, true);\n\t\t\tSecretKey senderDesKey = senderKeyAgreement.generateSecret(\"DES\");\n\n\t\t\t// if (com.sun.org.apache.xalan.internal.utils.Objects.equals(receiverDesKey, senderDesKey)) {\n\t\t\tif (receiverDesKey.equals(senderDesKey)) {\n\t\t\t\tSystem.out.println(\"双方密钥相同\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"双方密钥不同\");\n\t\t\t}\n\n\t\t\t// 4.加密\n\t\t\tCipher cipher = Cipher.getInstance(\"DES\");\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, senderDesKey);\n\t\t\tbyte[] result = cipher.doFinal(src.getBytes());\n\t\t\tSystem.out.println(\"jdk dh encrypt : \" + Base64.encodeBase64String(result));\n\n\t\t\t// 5.解密\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, receiverDesKey);\n\t\t\tresult = cipher.doFinal(result);\n\t\t\tSystem.out.println(\"jdk dh decrypt : \" + new String(result));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n```\n\n\n\n## 非对称加密算法 - 数字签名算法 - RSA\n\n\t经典算法 \n\tMD,SHA两类\n\n\t算法:\n\tMD2withRSA       实现方: JDK\n\tMD5withRSA       实现方: JDK\n\tSHA1withRSA      实现方: JDK\n\tSHA224withRSA    实现方: BC\n\tSHA256withRSA    实现方: BC\n\tSHA384withRSA    实现方: BC\n\tSHA512withRSA    实现方: BC\n\tRIPEMD128withRSA 实现方: BC\n\tRIPEMD160withRSA 实现方: BC\n\n\n\t非对称加密算法-RSA\n\t唯一广泛接受并实现\n\t数据加密&数字签名\n\t公钥加密,私钥解密\n\t私钥加密,公钥解密\n\n\tJDK 密钥长度:512~65536(64整数倍) 工作模式:ECB 默认长度:1024 填充方式: \n\tNoPadding\n\tPKCS1Padding\n\tOAEPWITHMD5AndMGF1Pading\n\tOAEPWITHSHA1AndMGF1Pading\n\tOAEPWITHSHA256AndMGF1Pading\n\tOAEPWITHSHA384AndMGF1Pading\n\tOAEPWITHSHA512AndMGF1Pading\n\n\tBC 密钥长度:512~65536(64整数倍) 工作模式:NONE 默认长度:2048 填充方式: \n\tNoPadding\n\tPKCS1Padding\n\tOAEPWITHMD5AndMGF1Pading\n\tOAEPWITHSHA1AndMGF1Pading\n\tOAEPWITHSHA224AndMGF1Pading\n\tOAEPWITHSHA256AndMGF1Pading\n\tOAEPWITHSHA384AndMGF1Pading\n\tOAEPWITHSHA512AndMGF1Pading\n\tISO9796-1Padding\n\n\n```java\n\n\tpublic static void jdkRSA(String msg) {\n\t\ttry {\n\t\t\t// 1.初始化密钥\n\t\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n\t\t\tkeyPairGenerator.initialize(512);\n\t\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\t\t\tRSAPublicKey rsaPublicKey = (RSAPublicKey) keyPair.getPublic();\n\t\t\tRSAPrivateKey rsaPrivateKey = (RSAPrivateKey) keyPair.getPrivate();\n\n\t\t\t// 2.执行签名\n\t\t\tPKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(rsaPrivateKey.getEncoded());\n\t\t\tKeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n\t\t\tPrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);\n\t\t\tSignature signature = Signature.getInstance(\"MD5withRSA\");\n\t\t\tsignature.initSign(privateKey);\n\t\t\tsignature.update(msg.getBytes());\n\t\t\tbyte[] result = signature.sign();\n\t\t\tSystem.out.println(\"jdk rsa sign: \" + Hex.encodeHexString(result));\n\n\t\t\t// 3.验证签名\n\t\t\tX509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(rsaPublicKey.getEncoded());\n\t\t\tkeyFactory = KeyFactory.getInstance(\"RSA\");\n\t\t\tPublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);\n\t\t\tsignature = Signature.getInstance(\"MD5withRSA\");\n\t\t\tsignature.initVerify(publicKey);\n\t\t\tsignature.update(msg.getBytes());\n\t\t\tboolean bool = signature.verify(result);\n\t\t\tSystem.out.println(\"jdk rea verify:\" + bool);\n\t\t} catch (Exception e) {\n\t\t}\n\t}\n\n\tpublic static void jdkRSA2(String src) {\n\t\ttry {\n\t\t\t// 1.初始化密钥\n\t\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n\t\t\tkeyPairGenerator.initialize(512);\n\t\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\t\t\tRSAPublicKey rsaPublicKey = (RSAPublicKey) keyPair.getPublic();\n\t\t\tRSAPrivateKey rsaPrivateKey = (RSAPrivateKey) keyPair.getPrivate();\n\t\t\tSystem.out.println(\"Public Key : \" + Base64.encodeBase64String(rsaPublicKey.getEncoded()));\n\t\t\tSystem.out.println(\"Private Key : \" + Base64.encodeBase64String(rsaPrivateKey.getEncoded()));\n\n\t\t\t// 2.私钥加密、公钥解密——加密\n\t\t\tPKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(rsaPrivateKey.getEncoded());\n\t\t\tKeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n\t\t\tPrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);\n\t\t\tCipher cipher = Cipher.getInstance(\"RSA\");\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, privateKey);\n\t\t\tbyte[] result = cipher.doFinal(src.getBytes());\n\t\t\tSystem.out.println(\"私钥加密、公钥解密——加密 : \" + Base64.encodeBase64String(result));\n\n\t\t\t// 3.私钥加密、公钥解密——解密\n\t\t\tX509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(rsaPublicKey.getEncoded());\n\t\t\tkeyFactory = KeyFactory.getInstance(\"RSA\");\n\t\t\tPublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);\n\t\t\tcipher = Cipher.getInstance(\"RSA\");\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, publicKey);\n\t\t\tresult = cipher.doFinal(result);\n\t\t\tSystem.out.println(\"私钥加密、公钥解密——解密：\" + new String(result));\n\n\t\t\t// 4.公钥加密、私钥解密——加密\n\t\t\tx509EncodedKeySpec = new X509EncodedKeySpec(rsaPublicKey.getEncoded());\n\t\t\tkeyFactory = KeyFactory.getInstance(\"RSA\");\n\t\t\tpublicKey = keyFactory.generatePublic(x509EncodedKeySpec);\n\t\t\tcipher = Cipher.getInstance(\"RSA\");\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, publicKey);\n\t\t\tresult = cipher.doFinal(src.getBytes());\n\t\t\tSystem.out.println(\"公钥加密、私钥解密——加密 : \" + Base64.encodeBase64String(result));\n\n\t\t\t// 5.公钥加密、私钥解密——解密\n\t\t\tpkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(rsaPrivateKey.getEncoded());\n\t\t\tkeyFactory = KeyFactory.getInstance(\"RSA\");\n\t\t\tprivateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);\n\t\t\tcipher = Cipher.getInstance(\"RSA\");\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, privateKey);\n\t\t\tresult = cipher.doFinal(result);\n\t\t\tSystem.out.println(\"公钥加密、私钥解密——解密：\" + new String(result));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n```\n\n\n## 非对称加密算法 - ElGamal\n\n\t  公钥加密算法\n\t 实现方:BC 密钥长度:160~16384(8的整数倍) , 默认:1024 工作模式:ECB,NONE\n\t 填充方式:\n\t NoPadding , PKCS1Padding\n\t OAEPWITHMD5AndMGF1Pading\n\t OAEPWITSHA1AndMGF1Pading\n\t OAEPWITSHA224AndMGF1Pading\n\t OAEPWITSHA256AndMGF1Pading\n\t OAEPWITSHA384AndMGF1Pading\n\t OAEPWITSHA512AndMGF1Pading\n\t ISO9796-1Padding\n\n\n```java\n\tpublic static void bcElGamal(String src) {\n\t\ttry {\n\t\t\t// 公钥加密,私钥解密\n\t\t\tSecurity.addProvider(new BouncyCastleProvider());\n\n\t\t\t// 1.初始化密钥\n\t\t\tAlgorithmParameterGenerator algorithmParameterGenerator = AlgorithmParameterGenerator.getInstance(\"ElGamal\");\n\t\t\talgorithmParameterGenerator.init(256);\n\t\t\tAlgorithmParameters algorithmParameters = algorithmParameterGenerator.generateParameters();\n\n\t\t\tDHParameterSpec dhParameterSpec =  (DHParameterSpec) algorithmParameters.getParameterSpec(DHParameterSpec.class);\n\t\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"ElGamal\");\n\t\t\tkeyPairGenerator.initialize(dhParameterSpec, new SecureRandom());\n\t\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\t\t\tPublicKey elGamalPublicKey = keyPair.getPublic();\n\t\t\tPrivateKey elGamalPrivateKey = keyPair.getPrivate();\n\n\t\t\tSystem.out.println(\"Public Key:\" + org.apache.commons.codec.binary.Base64.encodeBase64String(elGamalPublicKey.getEncoded()));\n\t\t\tSystem.out.println(\"Private Key:\" + org.apache.commons.codec.binary.Base64.encodeBase64String(elGamalPrivateKey.getEncoded()));\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n```\n\n# 数字签名算法\n\n## 数字签名算法 - DSA\n\n\t  DSS (Digital Signature Standard)数字签名标准\n\t  DSA(Digital Signature Algorithm)数字签名算法\n\t  DSA仅包含数字签名\n\t  \n\t  算法:\n\t  SHA1withDSA    实现方:JDK\n\t  SHA224withDSA  实现方:BC\n\t  SHA256withDSA  实现方:BC\n\t  SHA384withDSA  实现方:BC\n\t  SHA512withDSA  实现方:BC\n\n\n```java\n\tpublic static void jdkDSA(String src) {\n\t\ttry {\n\t\t\t// 1.初始化密钥\n\t\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"DSA\");\n\t\t\tkeyPairGenerator.initialize(512);\n\t\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\t\t\tDSAPublicKey dsaPublicKey = (DSAPublicKey) keyPair.getPublic();\n\t\t\tDSAPrivateKey dsaPrivateKey = (DSAPrivateKey) keyPair.getPrivate();\n\n\t\t\t// 2.执行签名\n\t\t\tPKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(dsaPrivateKey.getEncoded());\n\t\t\tKeyFactory keyFactory = KeyFactory.getInstance(\"DSA\");\n\t\t\tPrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);\n\t\t\tSignature signature = Signature.getInstance(\"SHA1withDSA\");\n\t\t\tsignature.initSign(privateKey);\n\t\t\tsignature.update(src.getBytes());\n\t\t\tbyte[] result = signature.sign();\n\t\t\tSystem.out.println(\"jdk dsa sign : \" + Hex.encodeHexString(result));\n\n\t\t\t// 3.验证签名\n\t\t\tX509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(dsaPublicKey.getEncoded());\n\t\t\tkeyFactory = KeyFactory.getInstance(\"DSA\");\n\t\t\tPublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);\n\t\t\tsignature = Signature.getInstance(\"SHA1withDSA\");\n\t\t\tsignature.initVerify(publicKey);\n\t\t\tsignature.update(src.getBytes());\n\t\t\tboolean bool = signature.verify(result);\n\t\t\tSystem.out.println(\"jdk dsa verify : \" + bool);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n```\n\n\n## 数字签名算法 - ECDSA\n\n\t 微软\n\t Elliptic Curve Digital Signature Algorithm , 椭圆曲线数字签名算法\n\t 速度快,强度高,签名短.\n\t \n\t 算法:\n\t NNONEwithECDSA       实现方:JDK/BC  签名长度:128 \n\t RIPEMD160withECDSA   实现方:BC      签名长度:160\n\t SHA1withECDSA        实现方:JDK/BC  签名长度:160\n\t SHA224withECDSA      实现方:BC      签名长度:224\n\t SHA256withECDSA      实现方:JDK/BC  签名长度:256\n\t SHA384withECDSA      实现方:JDK/BC  签名长度:384\n\t SHA512withECDSA      实现方:JDK/BC  签名长度:512\n\t \n\tjdk版本1.7以上\n\n```java\n\tpublic static void jdkECDSA(String src) {\n\t\ttry {\n\t\t\t//1.初始化密钥\n\t\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"EC\");\n\t\t\tkeyPairGenerator.initialize(256);\n\t\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\t\t\tECPublicKey ecPublicKey = (ECPublicKey)keyPair.getPublic();\n\t\t\tECPrivateKey ecPrivateKey = (ECPrivateKey)keyPair.getPrivate();\n\t\t\t\n\t\t\t//2.执行签名\n\t\t\tPKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(ecPrivateKey.getEncoded());\n\t\t\tKeyFactory keyFactory = KeyFactory.getInstance(\"EC\");\n\t\t\tPrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);\n\t\t\tSignature signature = Signature.getInstance(\"SHA1withECDSA\");\n\t\t\tsignature.initSign(privateKey);\n\t\t\tsignature.update(src.getBytes());\n\t\t\tbyte[] result = signature.sign();\n\t\t\tSystem.out.println(\"jdk ecdsa sign : \" + Hex.encodeHexString(result));\n\t\t\t\n\t\t\t//3.验证签名\n\t\t\tX509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(ecPublicKey.getEncoded());\n\t\t\tkeyFactory = KeyFactory.getInstance(\"EC\");\n\t\t\tPublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);\n\t\t\tsignature = Signature.getInstance(\"SHA1withECDSA\");\n\t\t\tsignature.initVerify(publicKey);\n\t\t\tsignature.update(src.getBytes());\n\t\t\tboolean bool = signature.verify(result);\n\t\t\tSystem.out.println(\"jdk ecdsa verify : \" + bool);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t}\n```\n\n# 其它算法\n\n## IDEA\n\n\t这种算法是在DES算法的基础上发展出来的，类似于三重DES。\n\t发展IDEA也是因为感到DES具有密钥太短等缺点。IDEA的密钥为128位，这么长的密钥在今后若干年内应该是安全的。\n\n```java\n\tpublic static void bcIDEA(String src) {\n\t\ttry {\n\t\t\tSecurity.addProvider(new BouncyCastleProvider());\n\t\t\t\n\t\t\t//生成key\n\t\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(\"IDEA\");\n\t\t\tkeyGenerator.init(128);\n\t\t\tSecretKey secretKey = keyGenerator.generateKey();\n\t\t\tbyte[] keyBytes = secretKey.getEncoded();\n\t\t\t\n\t\t\t//转换密钥\n\t\t\tKey key = new SecretKeySpec(keyBytes, \"IDEA\");\n\t\t\t\n\t\t\t//加密\n\t\t\tCipher cipher = Cipher.getInstance(\"IDEA/ECB/ISO10126Padding\");\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, key);\n\t\t\tbyte[] result = cipher.doFinal(src.getBytes());\n\t\t\tSystem.out.println(\"bc idea encrypt : \" + Base64.encodeBase64String(result));\n\t\t\t\n\t\t\t//解密\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, key);\n\t\t\tresult = cipher.doFinal(result);\n\t\t\tSystem.out.println(\"bc idea decrypt : \" + new String(result));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t}\n```\n\n\n## CRC\n\n```java\n\tpublic static void jdkCrc(String src){\n\t\tCRC32 crc = new CRC32();\n\t\tcrc.update(src.getBytes());\n\t\tString hex = Long.toHexString(crc.getValue());\n\t\tSystem.out.println(\"jdk crc32 : \" + hex);\n\t}\n```\n\n\n## 运行\n\n```java\n\tpublic static void main(String[] args) {\n\t\t\n\t\t//AES\n\t\tjdkAES(\"comtu\");\n\n\t\t//Base64\n\t\tjdkBase64(\"comtu\");\n\t\tcommonsCodesBase64(\"comtu\");\n\t\tbouncyCastleBase64(\"comtu\");\n\n\t\t//DES\n\t\tjdkDES(\"comtu\");\n\t\tbcDES(\"comtu\");\n\t\tjdk3DES(\"comtu\");\n\n\t\t//DH\n\t\tjdkDH(\"comtu\");\n\n\t\t//DSA\n\t\tjdkDSA(\"comtu\");\n\n\t\t//ECDSA\n\t\tjdkECDSA(\"comtu\");\n\n\t\t//ElGamal\n\t\tbcElGamal(\"comtu\");\n\t\t\n\t\t//HMAC\n\t\tjdkHmacMD5(\"comtu\", \"1234567890abcdef\");\n\t\tbcHmacMD5(\"comtu\", \"1234567890abcdef\");\n\n\t\t//IDEA\n\t\tbcIDEA(\"comtu\");\n\n\t\t//md\n\t\tSystem.out.println(\"MD5_TYPE_16:\" + Md.md5s(\"comtu\", MD5_TYPE_16));\n\t\tSystem.out.println(\"MD5_TYPE_32:\" + Md.md5s(\"comtu\", MD5_TYPE_32));\n\t\tjdkMD2(\"comtu\");\n\t\tjdkMD5(\"comtu\");\n\t\tbcMD4(\"comtu\");\n\t\tbcMD5(\"comtu\");\n\t\tccMD2(\"comtu\");\n\t\tccMD5(\"comtu\");\n\n\t\t//PBE\n\t\tjdkPBE(\"comtu\");\n\n\t\t//RSA\n\t\tjdkRSA(\"comtu\");\n\t\tjdkRSA2(\"comtu\");\n\n\t\n\t\t//SHA\n\t\tjdkSHA1(\"comtu\");\n\t\tbcSHA1(\"comtu\");\n\t\tbcSHA224(\"comtu\");\n\t\tjdkSHA224_2(\"comtu\");\n\t\tccSHA1(\"comtu\");\n\t}\n```\n\n案例引用如下三个jar包:\n\n\tbcprov-ext-jdk15on-149.jar\n\tbcprov-jdk15on-149.jar\n\tcommons-codec-1.10.jar\n\n代码引用包详情见原代码:\n\n# Demo下载\n\n[本文Demo源代码](/res/file/blog/2014/12/01/Java_security/Security.rar)\n\n","slug":"Java_security","published":1,"updated":"2016-04-27T03:24:29.057Z","comments":1,"photos":[],"link":"","_id":"cinu3etyd001dxoj0qw1uodyj","content":"<p>目录:</p>\n<pre><code>Base64\n消息摘要算法\n    MD\n    SHA\n    MAC\n对称加密算法\n    DES\n    3DES\n    AES\n    PBE\n非对称加密算法\n    DH\n    RSA\n    ElGamal\n数字签名算法\n    RSA\n    DSA\n    ECDSA\n其它算法\n    IDEA\n    CRC\n</code></pre><a id=\"more\"></a>\n<h1 id=\"Base64\"><a href=\"#Base64\" class=\"headerlink\" title=\"Base64\"></a>Base64</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkBase64</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tBASE64Encoder encoder = <span class=\"keyword\">new</span> BASE64Encoder();</span><br><span class=\"line\">\t\tString encode = encoder.encode(msg.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"encode:\"</span> + encode);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tBASE64Decoder decoder = <span class=\"keyword\">new</span> BASE64Decoder();</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] b = decoder.decodeBuffer(encode);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"decoder:\"</span> + <span class=\"keyword\">new</span> String(b));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">commonsCodesBase64</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] encodeBytes = org.apache.commons.codec.binary.Base64.encodeBase64(msg.getBytes());</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"encode:\"</span> + <span class=\"keyword\">new</span> String(encodeBytes));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] decodeBytes = org.apache.commons.codec.binary.Base64.decodeBase64(encodeBytes);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"decode:\"</span> + <span class=\"keyword\">new</span> String(decodeBytes));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bouncyCastleBase64</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] encodeBytes = org.bouncycastle.util.encoders.Base64.encode(msg.getBytes());</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"encode:\"</span> + <span class=\"keyword\">new</span> String(encodeBytes));</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] decodeBytes = org.bouncycastle.util.encoders.Base64.decode(encodeBytes);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"decode:\"</span> + <span class=\"keyword\">new</span> String(decodeBytes));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"消息摘要算法\"><a href=\"#消息摘要算法\" class=\"headerlink\" title=\"消息摘要算法\"></a>消息摘要算法</h1><h2 id=\"消息摘要算法-MD\"><a href=\"#消息摘要算法-MD\" class=\"headerlink\" title=\"消息摘要算法 - MD\"></a>消息摘要算法 - MD</h2><pre><code>算法:\nMD2  实现方:JDK\nMD4  实现方:BouncyCastle 简称BC\nMD5  实现方:JDK\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkMD2</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tMessageDigest md = MessageDigest.getInstance(<span class=\"string\">\"MD2\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] md2Bytes = md.digest(msg.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"JDK MD2:\"</span> + org.apache.commons.codec.binary.Hex.encodeHexString(md2Bytes));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkMD5</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tMessageDigest md = MessageDigest.getInstance(<span class=\"string\">\"MD5\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] md5Bytes = md.digest(msg.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"JDK MD5:\"</span> + org.apache.commons.codec.binary.Hex.encodeHexString(md5Bytes));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BouncyCastle</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bcMD4</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tSecurity.addProvider(<span class=\"keyword\">new</span> BouncyCastleProvider());<span class=\"comment\">// 为JDK设置算法</span></span><br><span class=\"line\">\t\tMessageDigest md = MessageDigest.getInstance(<span class=\"string\">\"MD4\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] md4Bytes = md.digest(msg.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"JDK MD5:\"</span> + org.apache.commons.codec.binary.Hex.encodeHexString(md4Bytes));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tDigest digest = <span class=\"keyword\">new</span> MD4Digest();</span><br><span class=\"line\">\tdigest.update(msg.getBytes(), <span class=\"number\">0</span>, msg.getBytes().length);</span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] md4Byte = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[digest.getDigestSize()];</span><br><span class=\"line\">\tdigest.doFinal(md4Byte, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"BC MD4: \"</span> + org.bouncycastle.util.encoders.Hex.toHexString(md4Byte));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BouncyCastle</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bcMD5</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\tDigest digest = <span class=\"keyword\">new</span> MD5Digest();</span><br><span class=\"line\">\tdigest.update(msg.getBytes(), <span class=\"number\">0</span>, msg.getBytes().length);</span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] md5Byte = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[digest.getDigestSize()];</span><br><span class=\"line\">\tdigest.doFinal(md5Byte, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"BC MD5: \"</span> + org.bouncycastle.util.encoders.Hex.toHexString(md5Byte));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//commons codec</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ccMD5</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"CC MD5:\"</span>+DigestUtils.md5Hex(msg.getBytes()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//commons codec</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ccMD2</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"CC MD2:\"</span>+DigestUtils.md2Hex(msg.getBytes()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String MD5_TYPE_16 = <span class=\"string\">\"t_16\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String MD5_TYPE_32 = <span class=\"string\">\"T_32\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">md5s</span><span class=\"params\">(String plainText, String type)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tMessageDigest md = MessageDigest.getInstance(<span class=\"string\">\"MD5\"</span>);</span><br><span class=\"line\">\t\tmd.update(plainText.getBytes());</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span> b[] = md.digest();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tStringBuffer buf = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> offset = <span class=\"number\">0</span>; offset &lt; b.length; offset++) &#123;</span><br><span class=\"line\">\t\t\ti = b[offset];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\ti += <span class=\"number\">256</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i &lt; <span class=\"number\">16</span>)</span><br><span class=\"line\">\t\t\t\tbuf.append(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">\t\t\tbuf.append(Integer.toHexString(i));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tString str = buf.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (type.equals(MD5_TYPE_16)) &#123;</span><br><span class=\"line\">\t\t\tstr = str.substring(<span class=\"number\">8</span>, <span class=\"number\">24</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"消息摘要算法-SHA\"><a href=\"#消息摘要算法-SHA\" class=\"headerlink\" title=\"消息摘要算法 - SHA\"></a>消息摘要算法 - SHA</h2><pre><code>安全散列算法\n固定长度摘要信息\nSHA-1  SHA-2(SHA-224,SHA-256,SHA-384,SHA-512)\n\n算法:\nSHA-1    实现方:JDK\nSHA-224  实现方:BC\nSHA-256  实现方:JDK\nSHA-384  实现方:JDK\nSHA-512  实现方:JDK\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkSHA1</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tMessageDigest md = MessageDigest.getInstance(<span class=\"string\">\"SHA\"</span>);<span class=\"comment\">// SHA1</span></span><br><span class=\"line\">\t\tmd.update(msg.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk SHA-1:\"</span> + Hex.encodeHexString(md.digest()));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bcSHA1</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\tDigest digest = <span class=\"keyword\">new</span> SHA1Digest();</span><br><span class=\"line\">\tdigest.update(msg.getBytes(), <span class=\"number\">0</span>, msg.getBytes().length);</span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] sha1Byte = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[digest.getDigestSize()];</span><br><span class=\"line\">\tdigest.doFinal(sha1Byte, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"bc SHA-1:\"</span> + org.bouncycastle.util.encoders.Hex.toHexString(sha1Byte));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bcSHA224</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\tDigest digest = <span class=\"keyword\">new</span> SHA224Digest();</span><br><span class=\"line\">\tdigest.update(msg.getBytes(), <span class=\"number\">0</span>, msg.getBytes().length);</span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] sha224Byte = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[digest.getDigestSize()];</span><br><span class=\"line\">\tdigest.doFinal(sha224Byte, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"bc SHA-224:\"</span> + org.bouncycastle.util.encoders.Hex.toHexString(sha224Byte));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkSHA224_2</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tSecurity.addProvider(<span class=\"keyword\">new</span> BouncyCastleProvider());<span class=\"comment\">// 设置</span></span><br><span class=\"line\">\t\tMessageDigest md = MessageDigest.getInstance(<span class=\"string\">\"SHA224\"</span>);<span class=\"comment\">// SHA224</span></span><br><span class=\"line\">\t\tmd.update(msg.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk addProvider -&gt;SHA-224:\"</span> + Hex.encodeHexString(md.digest()));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ccSHA1</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"cc sha1:\"</span> + DigestUtils.sha1Hex(msg.getBytes()));</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"cc sha512:\"</span> + DigestUtils.sha512Hex((msg.getBytes())));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"消息摘要算法-MAC\"><a href=\"#消息摘要算法-MAC\" class=\"headerlink\" title=\"消息摘要算法 - MAC\"></a>消息摘要算法 - MAC</h2><pre><code>MAC(Message Authentication Code)\nHMAC(keyed-Hash Message Authentication Code),含有密钥的散列函数算法\n任何MD,SHA\n -MD系列:HmacMD2 , HmacMD4 , HmacMD5\n -SHA系列: HmacSHA1, HmacSHA224,HmacSHA256,HmacSHA384,HmacSHA512\n\n 算法:\n HmacMD2    实现方:BC\n HmacMD4    实现方:BC\n HmacMD5    实现方:JDK\n HamcSHA1   实现方:JKD\n HmacSHA224 实现方:BC\n HmacSHA256 实现方:JKD\n HmacSHA384 实现方:JKD\n HmacSHA512 实现方:JKD\n\n\n\n 其它消息摘要算法\n RipeMD\n Tiger\n Whirlpool\n GOST3411\n\n Bouncy Castle实现\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkHmacMD5</span><span class=\"params\">(String msg, String keyParameter)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(<span class=\"string\">\"HmacMD5\"</span>);</span><br><span class=\"line\">\t\tSecretKey secretKey = keyGenerator.generateKey();<span class=\"comment\">// 产生密钥</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] key = secretKey.getEncoded();<span class=\"comment\">// 获取密钥</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tkey = Hex.decodeHex(keyParameter.toCharArray());<span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 还原密钥</span></span><br><span class=\"line\">\t\tSecretKey restoreSecretKey = <span class=\"keyword\">new</span> SecretKeySpec(key, <span class=\"string\">\"HmacMD5\"</span>);</span><br><span class=\"line\">\t\tMac mac = Mac.getInstance(restoreSecretKey.getAlgorithm());<span class=\"comment\">// 实例化MAC</span></span><br><span class=\"line\">\t\tmac.init(restoreSecretKey);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] hmacMD5Bytes = mac.doFinal(msg.getBytes());<span class=\"comment\">// 执行摘要</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk hmacMD5:\"</span> + Hex.encodeHexString(hmacMD5Bytes));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bcHmacMD5</span><span class=\"params\">(String msg, String keyParameter)</span> </span>&#123;</span><br><span class=\"line\">\tHMac hmac = <span class=\"keyword\">new</span> HMac(<span class=\"keyword\">new</span> MD5Digest());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] b = org.bouncycastle.util.encoders.Hex.decode(keyParameter.getBytes());</span><br><span class=\"line\">\tKeyParameter k = <span class=\"keyword\">new</span> KeyParameter(b);</span><br><span class=\"line\">\thmac.init(k);</span><br><span class=\"line\">\thmac.update(msg.getBytes(), <span class=\"number\">0</span>, msg.getBytes().length);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] hmacMD5Bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[hmac.getMacSize()];</span><br><span class=\"line\">\thmac.doFinal(hmacMD5Bytes, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"bc hmacMD5:\"</span> + org.bouncycastle.util.encoders.Hex.toHexString(hmacMD5Bytes));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"对称加密算法\"><a href=\"#对称加密算法\" class=\"headerlink\" title=\"对称加密算法\"></a>对称加密算法</h1><h2 id=\"对称加密算法-DEC-3DEC\"><a href=\"#对称加密算法-DEC-3DEC\" class=\"headerlink\" title=\"对称加密算法 - DEC - 3DEC\"></a>对称加密算法 - DEC - 3DEC</h2><pre><code>初等\nDES\n   -3DES\nAES\nPBE\nIDEA\n\nDES(Data Encryptiong Standard) 数据加密标准\n对称加密元老.\n\n密钥长度56  默认56  工作模式:ECB,CBC,PCBC,CTR,CTS,CFB,CFB8,到128,OFB,OFB8到128 \n实现方:JDK 填充方式:NoPadding,PKCS5Padding,ISO10126Padding, \n实现方:BC 填充方式:PKCS7Padding,ISO10126d2Padding,X932Padding,ISO7816d4Pading,ZeroBytePading\n\n3DES(Triple DES或者DESede)\n密钥长度112,168  默认168 \n密钥长度128,192  默认168\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkDES</span><span class=\"params\">(String src)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 生成KEY</span></span><br><span class=\"line\">\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(<span class=\"string\">\"DES\"</span>);</span><br><span class=\"line\">\t\tkeyGenerator.init(<span class=\"number\">56</span>);</span><br><span class=\"line\">\t\tSecretKey secretKey = keyGenerator.generateKey();</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] bytesKey = secretKey.getEncoded();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// KEY转换</span></span><br><span class=\"line\">\t\tDESKeySpec desKeySpec = <span class=\"keyword\">new</span> DESKeySpec(bytesKey);</span><br><span class=\"line\">\t\tSecretKeyFactory factory = SecretKeyFactory.getInstance(<span class=\"string\">\"DES\"</span>);</span><br><span class=\"line\">\t\tKey convertSecretKey = factory.generateSecret(desKeySpec);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 加密</span></span><br><span class=\"line\">\t\tCipher cipher = Cipher.getInstance(<span class=\"string\">\"DES/ECB/PKCS5Padding\"</span>);</span><br><span class=\"line\">\t\tcipher.init(Cipher.ENCRYPT_MODE, convertSecretKey);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] result = cipher.doFinal(src.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk des encrypt : \"</span> + Hex.encodeHexString(result));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 解密</span></span><br><span class=\"line\">\t\tcipher.init(Cipher.DECRYPT_MODE, convertSecretKey);</span><br><span class=\"line\">\t\tresult = cipher.doFinal(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk des decrypt : \"</span> + <span class=\"keyword\">new</span> String(result));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bcDES</span><span class=\"params\">(String src)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tSecurity.addProvider(<span class=\"keyword\">new</span> BouncyCastleProvider());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 生成KEY</span></span><br><span class=\"line\">\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(<span class=\"string\">\"DES\"</span>, <span class=\"string\">\"BC\"</span>);</span><br><span class=\"line\">\t\tkeyGenerator.getProvider();</span><br><span class=\"line\">\t\tkeyGenerator.init(<span class=\"number\">56</span>);</span><br><span class=\"line\">\t\tSecretKey secretKey = keyGenerator.generateKey();</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] bytesKey = secretKey.getEncoded();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// KEY转换</span></span><br><span class=\"line\">\t\tDESKeySpec desKeySpec = <span class=\"keyword\">new</span> DESKeySpec(bytesKey);</span><br><span class=\"line\">\t\tSecretKeyFactory factory = SecretKeyFactory.getInstance(<span class=\"string\">\"DES\"</span>);</span><br><span class=\"line\">\t\tKey convertSecretKey = factory.generateSecret(desKeySpec);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 加密</span></span><br><span class=\"line\">\t\tCipher cipher = Cipher.getInstance(<span class=\"string\">\"DES/ECB/PKCS5Padding\"</span>);</span><br><span class=\"line\">\t\tcipher.init(Cipher.ENCRYPT_MODE, convertSecretKey);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] result = cipher.doFinal(src.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"bc des encrypt : \"</span> + Hex.encodeHexString(result));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 解密</span></span><br><span class=\"line\">\t\tcipher.init(Cipher.DECRYPT_MODE, convertSecretKey);</span><br><span class=\"line\">\t\tresult = cipher.doFinal(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"bc des decrypt : \"</span> + <span class=\"keyword\">new</span> String(result));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdk3DES</span><span class=\"params\">(String src)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 生成KEY</span></span><br><span class=\"line\">\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(<span class=\"string\">\"DESede\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// keyGenerator.init(168);</span></span><br><span class=\"line\">\t\tkeyGenerator.init(<span class=\"keyword\">new</span> SecureRandom());<span class=\"comment\">// 默认长度</span></span><br><span class=\"line\">\t\tSecretKey secretKey = keyGenerator.generateKey();</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] bytesKey = secretKey.getEncoded();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// KEY转换</span></span><br><span class=\"line\">\t\tDESKeySpec desKeySpec = <span class=\"keyword\">new</span> DESKeySpec(bytesKey);</span><br><span class=\"line\">\t\tSecretKeyFactory factory = SecretKeyFactory.getInstance(<span class=\"string\">\"DES\"</span>);</span><br><span class=\"line\">\t\tKey convertSecretKey = factory.generateSecret(desKeySpec);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 加密</span></span><br><span class=\"line\">\t\tCipher cipher = Cipher.getInstance(<span class=\"string\">\"DES/ECB/PKCS5Padding\"</span>);</span><br><span class=\"line\">\t\tcipher.init(Cipher.ENCRYPT_MODE, convertSecretKey);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] result = cipher.doFinal(src.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk 3des encrypt : \"</span> + Base64.encodeBase64String(result));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 解密</span></span><br><span class=\"line\">\t\tcipher.init(Cipher.DECRYPT_MODE, convertSecretKey);</span><br><span class=\"line\">\t\tresult = cipher.doFinal(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk 3des decrypt : \"</span> + <span class=\"keyword\">new</span> String(result));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对称加密算法-AES\"><a href=\"#对称加密算法-AES\" class=\"headerlink\" title=\"对称加密算法 - AES\"></a>对称加密算法 - AES</h2><pre><code>DES替代者\n\n密钥长度:128,192,256 默认128 工作模式:ECB,CBC,PCBC,CTR,CTS,CFB,CFB8到128,OFB,OFB8到128 \n填充方式:NoPadding,PKCS5Padding,ISO10126Padding 实现方:JDK(256位密钥需要获得无政策限制权限文件)\n填充方式:PKCS7Padding,ZeroBytePadding 实现方:BC\n\n无政策限制权限文件是指,因为某些国家的进口管制限制,Java发布的远行环境包中的加解密有一定的限制\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkAES</span><span class=\"params\">(String src)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 生成KEY</span></span><br><span class=\"line\">\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(<span class=\"string\">\"AES\"</span>);</span><br><span class=\"line\">\t\tkeyGenerator.init(<span class=\"number\">128</span>);</span><br><span class=\"line\">\t\tSecretKey secretKey = keyGenerator.generateKey();</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] keyBytes = secretKey.getEncoded();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// key转换</span></span><br><span class=\"line\">\t\tKey key = <span class=\"keyword\">new</span> SecretKeySpec(keyBytes, <span class=\"string\">\"AES\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 加密</span></span><br><span class=\"line\">\t\tCipher cipher = Cipher.getInstance(<span class=\"string\">\"AES/ECB/PKCS5Padding\"</span>);</span><br><span class=\"line\">\t\tcipher.init(Cipher.ENCRYPT_MODE, key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] result = cipher.doFinal(src.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk aes encrypt : \"</span> + Base64.encodeBase64String(result));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 解密</span></span><br><span class=\"line\">\t\tcipher.init(Cipher.DECRYPT_MODE, key);</span><br><span class=\"line\">\t\tresult = cipher.doFinal(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk aes desrypt : \"</span> + <span class=\"keyword\">new</span> String(result));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对称加密算法-PBE\"><a href=\"#对称加密算法-PBE\" class=\"headerlink\" title=\"对称加密算法 - PBE\"></a>对称加密算法 - PBE</h2><pre><code>PBE(Password Based Encryption)基于口令加密\n\n算法                         密钥长度    默认  工作模式       填充方式      实现\nPBEWithMD5AndDES                64       64      CBC       PKCS5Padding       BC\nPBEWithMd5AndRC2                112      128               PKCS7Padding\nPBEWithSHA1AndDES               6        64                ISO10126Padding\nPBEWithSHAAndIDEA-CBC           128      128\nPBEWithSHAAnd2-KeyTripleDES-CBC 128      128\nPBEWithSHAAnd3-KeyTripleDES-CBC 192      192\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkPBE</span><span class=\"params\">(String src)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 初始化盐</span></span><br><span class=\"line\">\t\tSecureRandom random = <span class=\"keyword\">new</span> SecureRandom();</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] salt = random.generateSeed(<span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 口令与密钥</span></span><br><span class=\"line\">\t\tString password = <span class=\"string\">\"password_comtu\"</span>;</span><br><span class=\"line\">\t\tPBEKeySpec pbeKeySpec = <span class=\"keyword\">new</span> PBEKeySpec(password.toCharArray());</span><br><span class=\"line\">\t\tSecretKeyFactory factory = SecretKeyFactory.getInstance(<span class=\"string\">\"PBEWITHMD5andDES\"</span>);</span><br><span class=\"line\">\t\tKey key = factory.generateSecret(pbeKeySpec);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 加密</span></span><br><span class=\"line\">\t\tPBEParameterSpec pbeParameterSpec = <span class=\"keyword\">new</span> PBEParameterSpec(salt, <span class=\"number\">100</span>);</span><br><span class=\"line\">\t\tCipher cipher = Cipher.getInstance(<span class=\"string\">\"PBEWITHMD5andDES\"</span>);</span><br><span class=\"line\">\t\tcipher.init(Cipher.ENCRYPT_MODE, key, pbeParameterSpec);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] result = cipher.doFinal(src.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk pbe encrypt : \"</span> + Base64.encodeBase64String(result));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 解密</span></span><br><span class=\"line\">\t\tcipher.init(Cipher.DECRYPT_MODE, key, pbeParameterSpec);</span><br><span class=\"line\">\t\tresult = cipher.doFinal(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk pbe decrypt : \"</span> + <span class=\"keyword\">new</span> String(result));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"非对称加密算法\"><a href=\"#非对称加密算法\" class=\"headerlink\" title=\"非对称加密算法\"></a>非对称加密算法</h1><h2 id=\"非对称加密算法-DH\"><a href=\"#非对称加密算法-DH\" class=\"headerlink\" title=\"非对称加密算法 - DH\"></a>非对称加密算法 - DH</h2><pre><code>高级 \n双保险 \n公钥,私钥\n\n  DH(Diffie-Hellman)密钥交换算法\n  RSA-基于因子分解 ElGamal - 基于离散对数 \n  ECC(Elliptical Curve Cryptography) - 椭圆曲线加密\n\n\nDH 密钥长度: 512~1024(64倍数) 默认1024 实现方:JDK\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkDH</span><span class=\"params\">(String src)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.初始化发送方密钥</span></span><br><span class=\"line\">\t\tKeyPairGenerator senderKeyPairGenerator = KeyPairGenerator.getInstance(<span class=\"string\">\"DH\"</span>);</span><br><span class=\"line\">\t\tsenderKeyPairGenerator.initialize(<span class=\"number\">512</span>);</span><br><span class=\"line\">\t\tKeyPair senderKeyPair = senderKeyPairGenerator.generateKeyPair();</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] senderPublicKeyEnc = senderKeyPair.getPublic().getEncoded();<span class=\"comment\">// 发送方公钥，发送给接收方（网络、文件。。。）</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.初始化接收方密钥</span></span><br><span class=\"line\">\t\tKeyFactory receiverKeyFactory = KeyFactory.getInstance(<span class=\"string\">\"DH\"</span>);</span><br><span class=\"line\">\t\tX509EncodedKeySpec x509EncodedKeySpec = <span class=\"keyword\">new</span> X509EncodedKeySpec(senderPublicKeyEnc);</span><br><span class=\"line\">\t\tPublicKey receiverPublicKey = receiverKeyFactory.generatePublic(x509EncodedKeySpec);</span><br><span class=\"line\">\t\tDHParameterSpec dhParameterSpec = ((DHPublicKey) receiverPublicKey).getParams();</span><br><span class=\"line\">\t\tKeyPairGenerator receiverKeyPairGenerator = KeyPairGenerator.getInstance(<span class=\"string\">\"DH\"</span>);</span><br><span class=\"line\">\t\treceiverKeyPairGenerator.initialize(dhParameterSpec);</span><br><span class=\"line\">\t\tKeyPair receiverKeypair = receiverKeyPairGenerator.generateKeyPair();</span><br><span class=\"line\">\t\tPrivateKey receiverPrivateKey = receiverKeypair.getPrivate();</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] receiverPublicKeyEnc = receiverKeypair.getPublic().getEncoded();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.密钥构建</span></span><br><span class=\"line\">\t\tKeyAgreement receiverKeyAgreement = KeyAgreement.getInstance(<span class=\"string\">\"DH\"</span>);</span><br><span class=\"line\">\t\treceiverKeyAgreement.init(receiverPrivateKey);</span><br><span class=\"line\">\t\treceiverKeyAgreement.doPhase(receiverPublicKey, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\tSecretKey receiverDesKey = receiverKeyAgreement.generateSecret(<span class=\"string\">\"DES\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tKeyFactory senderKeyFactory = KeyFactory.getInstance(<span class=\"string\">\"DH\"</span>);</span><br><span class=\"line\">\t\tx509EncodedKeySpec = <span class=\"keyword\">new</span> X509EncodedKeySpec(receiverPublicKeyEnc);</span><br><span class=\"line\">\t\tPublicKey senderPublicKey = senderKeyFactory.generatePublic(x509EncodedKeySpec);</span><br><span class=\"line\">\t\tKeyAgreement senderKeyAgreement = KeyAgreement.getInstance(<span class=\"string\">\"DH\"</span>);</span><br><span class=\"line\">\t\tsenderKeyAgreement.init(senderKeyPair.getPrivate());</span><br><span class=\"line\">\t\tsenderKeyAgreement.doPhase(senderPublicKey, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\tSecretKey senderDesKey = senderKeyAgreement.generateSecret(<span class=\"string\">\"DES\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// if (com.sun.org.apache.xalan.internal.utils.Objects.equals(receiverDesKey, senderDesKey)) &#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (receiverDesKey.equals(senderDesKey)) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"双方密钥相同\"</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"双方密钥不同\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 4.加密</span></span><br><span class=\"line\">\t\tCipher cipher = Cipher.getInstance(<span class=\"string\">\"DES\"</span>);</span><br><span class=\"line\">\t\tcipher.init(Cipher.ENCRYPT_MODE, senderDesKey);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] result = cipher.doFinal(src.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk dh encrypt : \"</span> + Base64.encodeBase64String(result));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 5.解密</span></span><br><span class=\"line\">\t\tcipher.init(Cipher.DECRYPT_MODE, receiverDesKey);</span><br><span class=\"line\">\t\tresult = cipher.doFinal(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk dh decrypt : \"</span> + <span class=\"keyword\">new</span> String(result));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"非对称加密算法-数字签名算法-RSA\"><a href=\"#非对称加密算法-数字签名算法-RSA\" class=\"headerlink\" title=\"非对称加密算法 - 数字签名算法 - RSA\"></a>非对称加密算法 - 数字签名算法 - RSA</h2><pre><code>经典算法 \nMD,SHA两类\n\n算法:\nMD2withRSA       实现方: JDK\nMD5withRSA       实现方: JDK\nSHA1withRSA      实现方: JDK\nSHA224withRSA    实现方: BC\nSHA256withRSA    实现方: BC\nSHA384withRSA    实现方: BC\nSHA512withRSA    实现方: BC\nRIPEMD128withRSA 实现方: BC\nRIPEMD160withRSA 实现方: BC\n\n\n非对称加密算法-RSA\n唯一广泛接受并实现\n数据加密&amp;数字签名\n公钥加密,私钥解密\n私钥加密,公钥解密\n\nJDK 密钥长度:512~65536(64整数倍) 工作模式:ECB 默认长度:1024 填充方式: \nNoPadding\nPKCS1Padding\nOAEPWITHMD5AndMGF1Pading\nOAEPWITHSHA1AndMGF1Pading\nOAEPWITHSHA256AndMGF1Pading\nOAEPWITHSHA384AndMGF1Pading\nOAEPWITHSHA512AndMGF1Pading\n\nBC 密钥长度:512~65536(64整数倍) 工作模式:NONE 默认长度:2048 填充方式: \nNoPadding\nPKCS1Padding\nOAEPWITHMD5AndMGF1Pading\nOAEPWITHSHA1AndMGF1Pading\nOAEPWITHSHA224AndMGF1Pading\nOAEPWITHSHA256AndMGF1Pading\nOAEPWITHSHA384AndMGF1Pading\nOAEPWITHSHA512AndMGF1Pading\nISO9796-1Padding\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkRSA</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.初始化密钥</span></span><br><span class=\"line\">\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tkeyPairGenerator.initialize(<span class=\"number\">512</span>);</span><br><span class=\"line\">\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();</span><br><span class=\"line\">\t\tRSAPublicKey rsaPublicKey = (RSAPublicKey) keyPair.getPublic();</span><br><span class=\"line\">\t\tRSAPrivateKey rsaPrivateKey = (RSAPrivateKey) keyPair.getPrivate();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.执行签名</span></span><br><span class=\"line\">\t\tPKCS8EncodedKeySpec pkcs8EncodedKeySpec = <span class=\"keyword\">new</span> PKCS8EncodedKeySpec(rsaPrivateKey.getEncoded());</span><br><span class=\"line\">\t\tKeyFactory keyFactory = KeyFactory.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tPrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</span><br><span class=\"line\">\t\tSignature signature = Signature.getInstance(<span class=\"string\">\"MD5withRSA\"</span>);</span><br><span class=\"line\">\t\tsignature.initSign(privateKey);</span><br><span class=\"line\">\t\tsignature.update(msg.getBytes());</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] result = signature.sign();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk rsa sign: \"</span> + Hex.encodeHexString(result));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.验证签名</span></span><br><span class=\"line\">\t\tX509EncodedKeySpec x509EncodedKeySpec = <span class=\"keyword\">new</span> X509EncodedKeySpec(rsaPublicKey.getEncoded());</span><br><span class=\"line\">\t\tkeyFactory = KeyFactory.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tPublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);</span><br><span class=\"line\">\t\tsignature = Signature.getInstance(<span class=\"string\">\"MD5withRSA\"</span>);</span><br><span class=\"line\">\t\tsignature.initVerify(publicKey);</span><br><span class=\"line\">\t\tsignature.update(msg.getBytes());</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> bool = signature.verify(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk rea verify:\"</span> + bool);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkRSA2</span><span class=\"params\">(String src)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.初始化密钥</span></span><br><span class=\"line\">\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tkeyPairGenerator.initialize(<span class=\"number\">512</span>);</span><br><span class=\"line\">\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();</span><br><span class=\"line\">\t\tRSAPublicKey rsaPublicKey = (RSAPublicKey) keyPair.getPublic();</span><br><span class=\"line\">\t\tRSAPrivateKey rsaPrivateKey = (RSAPrivateKey) keyPair.getPrivate();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Public Key : \"</span> + Base64.encodeBase64String(rsaPublicKey.getEncoded()));</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Private Key : \"</span> + Base64.encodeBase64String(rsaPrivateKey.getEncoded()));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.私钥加密、公钥解密——加密</span></span><br><span class=\"line\">\t\tPKCS8EncodedKeySpec pkcs8EncodedKeySpec = <span class=\"keyword\">new</span> PKCS8EncodedKeySpec(rsaPrivateKey.getEncoded());</span><br><span class=\"line\">\t\tKeyFactory keyFactory = KeyFactory.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tPrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</span><br><span class=\"line\">\t\tCipher cipher = Cipher.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tcipher.init(Cipher.ENCRYPT_MODE, privateKey);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] result = cipher.doFinal(src.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"私钥加密、公钥解密——加密 : \"</span> + Base64.encodeBase64String(result));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.私钥加密、公钥解密——解密</span></span><br><span class=\"line\">\t\tX509EncodedKeySpec x509EncodedKeySpec = <span class=\"keyword\">new</span> X509EncodedKeySpec(rsaPublicKey.getEncoded());</span><br><span class=\"line\">\t\tkeyFactory = KeyFactory.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tPublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);</span><br><span class=\"line\">\t\tcipher = Cipher.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tcipher.init(Cipher.DECRYPT_MODE, publicKey);</span><br><span class=\"line\">\t\tresult = cipher.doFinal(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"私钥加密、公钥解密——解密：\"</span> + <span class=\"keyword\">new</span> String(result));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 4.公钥加密、私钥解密——加密</span></span><br><span class=\"line\">\t\tx509EncodedKeySpec = <span class=\"keyword\">new</span> X509EncodedKeySpec(rsaPublicKey.getEncoded());</span><br><span class=\"line\">\t\tkeyFactory = KeyFactory.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tpublicKey = keyFactory.generatePublic(x509EncodedKeySpec);</span><br><span class=\"line\">\t\tcipher = Cipher.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tcipher.init(Cipher.ENCRYPT_MODE, publicKey);</span><br><span class=\"line\">\t\tresult = cipher.doFinal(src.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"公钥加密、私钥解密——加密 : \"</span> + Base64.encodeBase64String(result));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 5.公钥加密、私钥解密——解密</span></span><br><span class=\"line\">\t\tpkcs8EncodedKeySpec = <span class=\"keyword\">new</span> PKCS8EncodedKeySpec(rsaPrivateKey.getEncoded());</span><br><span class=\"line\">\t\tkeyFactory = KeyFactory.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tprivateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</span><br><span class=\"line\">\t\tcipher = Cipher.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tcipher.init(Cipher.DECRYPT_MODE, privateKey);</span><br><span class=\"line\">\t\tresult = cipher.doFinal(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"公钥加密、私钥解密——解密：\"</span> + <span class=\"keyword\">new</span> String(result));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"非对称加密算法-ElGamal\"><a href=\"#非对称加密算法-ElGamal\" class=\"headerlink\" title=\"非对称加密算法 - ElGamal\"></a>非对称加密算法 - ElGamal</h2><pre><code> 公钥加密算法\n实现方:BC 密钥长度:160~16384(8的整数倍) , 默认:1024 工作模式:ECB,NONE\n填充方式:\nNoPadding , PKCS1Padding\nOAEPWITHMD5AndMGF1Pading\nOAEPWITSHA1AndMGF1Pading\nOAEPWITSHA224AndMGF1Pading\nOAEPWITSHA256AndMGF1Pading\nOAEPWITSHA384AndMGF1Pading\nOAEPWITSHA512AndMGF1Pading\nISO9796-1Padding\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bcElGamal</span><span class=\"params\">(String src)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 公钥加密,私钥解密</span></span><br><span class=\"line\">\t\tSecurity.addProvider(<span class=\"keyword\">new</span> BouncyCastleProvider());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.初始化密钥</span></span><br><span class=\"line\">\t\tAlgorithmParameterGenerator algorithmParameterGenerator = AlgorithmParameterGenerator.getInstance(<span class=\"string\">\"ElGamal\"</span>);</span><br><span class=\"line\">\t\talgorithmParameterGenerator.init(<span class=\"number\">256</span>);</span><br><span class=\"line\">\t\tAlgorithmParameters algorithmParameters = algorithmParameterGenerator.generateParameters();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tDHParameterSpec dhParameterSpec =  (DHParameterSpec) algorithmParameters.getParameterSpec(DHParameterSpec.class);</span><br><span class=\"line\">\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(<span class=\"string\">\"ElGamal\"</span>);</span><br><span class=\"line\">\t\tkeyPairGenerator.initialize(dhParameterSpec, <span class=\"keyword\">new</span> SecureRandom());</span><br><span class=\"line\">\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();</span><br><span class=\"line\">\t\tPublicKey elGamalPublicKey = keyPair.getPublic();</span><br><span class=\"line\">\t\tPrivateKey elGamalPrivateKey = keyPair.getPrivate();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Public Key:\"</span> + org.apache.commons.codec.binary.Base64.encodeBase64String(elGamalPublicKey.getEncoded()));</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Private Key:\"</span> + org.apache.commons.codec.binary.Base64.encodeBase64String(elGamalPrivateKey.getEncoded()));</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"数字签名算法\"><a href=\"#数字签名算法\" class=\"headerlink\" title=\"数字签名算法\"></a>数字签名算法</h1><h2 id=\"数字签名算法-DSA\"><a href=\"#数字签名算法-DSA\" class=\"headerlink\" title=\"数字签名算法 - DSA\"></a>数字签名算法 - DSA</h2><pre><code>DSS (Digital Signature Standard)数字签名标准\nDSA(Digital Signature Algorithm)数字签名算法\nDSA仅包含数字签名\n\n算法:\nSHA1withDSA    实现方:JDK\nSHA224withDSA  实现方:BC\nSHA256withDSA  实现方:BC\nSHA384withDSA  实现方:BC\nSHA512withDSA  实现方:BC\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkDSA</span><span class=\"params\">(String src)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.初始化密钥</span></span><br><span class=\"line\">\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(<span class=\"string\">\"DSA\"</span>);</span><br><span class=\"line\">\t\tkeyPairGenerator.initialize(<span class=\"number\">512</span>);</span><br><span class=\"line\">\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();</span><br><span class=\"line\">\t\tDSAPublicKey dsaPublicKey = (DSAPublicKey) keyPair.getPublic();</span><br><span class=\"line\">\t\tDSAPrivateKey dsaPrivateKey = (DSAPrivateKey) keyPair.getPrivate();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.执行签名</span></span><br><span class=\"line\">\t\tPKCS8EncodedKeySpec pkcs8EncodedKeySpec = <span class=\"keyword\">new</span> PKCS8EncodedKeySpec(dsaPrivateKey.getEncoded());</span><br><span class=\"line\">\t\tKeyFactory keyFactory = KeyFactory.getInstance(<span class=\"string\">\"DSA\"</span>);</span><br><span class=\"line\">\t\tPrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</span><br><span class=\"line\">\t\tSignature signature = Signature.getInstance(<span class=\"string\">\"SHA1withDSA\"</span>);</span><br><span class=\"line\">\t\tsignature.initSign(privateKey);</span><br><span class=\"line\">\t\tsignature.update(src.getBytes());</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] result = signature.sign();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk dsa sign : \"</span> + Hex.encodeHexString(result));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.验证签名</span></span><br><span class=\"line\">\t\tX509EncodedKeySpec x509EncodedKeySpec = <span class=\"keyword\">new</span> X509EncodedKeySpec(dsaPublicKey.getEncoded());</span><br><span class=\"line\">\t\tkeyFactory = KeyFactory.getInstance(<span class=\"string\">\"DSA\"</span>);</span><br><span class=\"line\">\t\tPublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);</span><br><span class=\"line\">\t\tsignature = Signature.getInstance(<span class=\"string\">\"SHA1withDSA\"</span>);</span><br><span class=\"line\">\t\tsignature.initVerify(publicKey);</span><br><span class=\"line\">\t\tsignature.update(src.getBytes());</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> bool = signature.verify(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk dsa verify : \"</span> + bool);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数字签名算法-ECDSA\"><a href=\"#数字签名算法-ECDSA\" class=\"headerlink\" title=\"数字签名算法 - ECDSA\"></a>数字签名算法 - ECDSA</h2><pre><code> 微软\n Elliptic Curve Digital Signature Algorithm , 椭圆曲线数字签名算法\n 速度快,强度高,签名短.\n\n 算法:\n NNONEwithECDSA       实现方:JDK/BC  签名长度:128 \n RIPEMD160withECDSA   实现方:BC      签名长度:160\n SHA1withECDSA        实现方:JDK/BC  签名长度:160\n SHA224withECDSA      实现方:BC      签名长度:224\n SHA256withECDSA      实现方:JDK/BC  签名长度:256\n SHA384withECDSA      实现方:JDK/BC  签名长度:384\n SHA512withECDSA      实现方:JDK/BC  签名长度:512\n\njdk版本1.7以上\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkECDSA</span><span class=\"params\">(String src)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//1.初始化密钥</span></span><br><span class=\"line\">\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(<span class=\"string\">\"EC\"</span>);</span><br><span class=\"line\">\t\tkeyPairGenerator.initialize(<span class=\"number\">256</span>);</span><br><span class=\"line\">\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();</span><br><span class=\"line\">\t\tECPublicKey ecPublicKey = (ECPublicKey)keyPair.getPublic();</span><br><span class=\"line\">\t\tECPrivateKey ecPrivateKey = (ECPrivateKey)keyPair.getPrivate();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//2.执行签名</span></span><br><span class=\"line\">\t\tPKCS8EncodedKeySpec pkcs8EncodedKeySpec = <span class=\"keyword\">new</span> PKCS8EncodedKeySpec(ecPrivateKey.getEncoded());</span><br><span class=\"line\">\t\tKeyFactory keyFactory = KeyFactory.getInstance(<span class=\"string\">\"EC\"</span>);</span><br><span class=\"line\">\t\tPrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</span><br><span class=\"line\">\t\tSignature signature = Signature.getInstance(<span class=\"string\">\"SHA1withECDSA\"</span>);</span><br><span class=\"line\">\t\tsignature.initSign(privateKey);</span><br><span class=\"line\">\t\tsignature.update(src.getBytes());</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] result = signature.sign();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk ecdsa sign : \"</span> + Hex.encodeHexString(result));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//3.验证签名</span></span><br><span class=\"line\">\t\tX509EncodedKeySpec x509EncodedKeySpec = <span class=\"keyword\">new</span> X509EncodedKeySpec(ecPublicKey.getEncoded());</span><br><span class=\"line\">\t\tkeyFactory = KeyFactory.getInstance(<span class=\"string\">\"EC\"</span>);</span><br><span class=\"line\">\t\tPublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);</span><br><span class=\"line\">\t\tsignature = Signature.getInstance(<span class=\"string\">\"SHA1withECDSA\"</span>);</span><br><span class=\"line\">\t\tsignature.initVerify(publicKey);</span><br><span class=\"line\">\t\tsignature.update(src.getBytes());</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> bool = signature.verify(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk ecdsa verify : \"</span> + bool);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"其它算法\"><a href=\"#其它算法\" class=\"headerlink\" title=\"其它算法\"></a>其它算法</h1><h2 id=\"IDEA\"><a href=\"#IDEA\" class=\"headerlink\" title=\"IDEA\"></a>IDEA</h2><pre><code>这种算法是在DES算法的基础上发展出来的，类似于三重DES。\n发展IDEA也是因为感到DES具有密钥太短等缺点。IDEA的密钥为128位，这么长的密钥在今后若干年内应该是安全的。\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bcIDEA</span><span class=\"params\">(String src)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tSecurity.addProvider(<span class=\"keyword\">new</span> BouncyCastleProvider());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//生成key</span></span><br><span class=\"line\">\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(<span class=\"string\">\"IDEA\"</span>);</span><br><span class=\"line\">\t\tkeyGenerator.init(<span class=\"number\">128</span>);</span><br><span class=\"line\">\t\tSecretKey secretKey = keyGenerator.generateKey();</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] keyBytes = secretKey.getEncoded();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//转换密钥</span></span><br><span class=\"line\">\t\tKey key = <span class=\"keyword\">new</span> SecretKeySpec(keyBytes, <span class=\"string\">\"IDEA\"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//加密</span></span><br><span class=\"line\">\t\tCipher cipher = Cipher.getInstance(<span class=\"string\">\"IDEA/ECB/ISO10126Padding\"</span>);</span><br><span class=\"line\">\t\tcipher.init(Cipher.ENCRYPT_MODE, key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] result = cipher.doFinal(src.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"bc idea encrypt : \"</span> + Base64.encodeBase64String(result));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//解密</span></span><br><span class=\"line\">\t\tcipher.init(Cipher.DECRYPT_MODE, key);</span><br><span class=\"line\">\t\tresult = cipher.doFinal(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"bc idea decrypt : \"</span> + <span class=\"keyword\">new</span> String(result));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CRC\"><a href=\"#CRC\" class=\"headerlink\" title=\"CRC\"></a>CRC</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkCrc</span><span class=\"params\">(String src)</span></span>&#123;</span><br><span class=\"line\">\tCRC32 crc = <span class=\"keyword\">new</span> CRC32();</span><br><span class=\"line\">\tcrc.update(src.getBytes());</span><br><span class=\"line\">\tString hex = Long.toHexString(crc.getValue());</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"jdk crc32 : \"</span> + hex);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//AES</span></span><br><span class=\"line\">\tjdkAES(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Base64</span></span><br><span class=\"line\">\tjdkBase64(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tcommonsCodesBase64(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tbouncyCastleBase64(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//DES</span></span><br><span class=\"line\">\tjdkDES(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tbcDES(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tjdk3DES(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//DH</span></span><br><span class=\"line\">\tjdkDH(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//DSA</span></span><br><span class=\"line\">\tjdkDSA(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//ECDSA</span></span><br><span class=\"line\">\tjdkECDSA(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//ElGamal</span></span><br><span class=\"line\">\tbcElGamal(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//HMAC</span></span><br><span class=\"line\">\tjdkHmacMD5(<span class=\"string\">\"comtu\"</span>, <span class=\"string\">\"1234567890abcdef\"</span>);</span><br><span class=\"line\">\tbcHmacMD5(<span class=\"string\">\"comtu\"</span>, <span class=\"string\">\"1234567890abcdef\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//IDEA</span></span><br><span class=\"line\">\tbcIDEA(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//md</span></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"MD5_TYPE_16:\"</span> + Md.md5s(<span class=\"string\">\"comtu\"</span>, MD5_TYPE_16));</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"MD5_TYPE_32:\"</span> + Md.md5s(<span class=\"string\">\"comtu\"</span>, MD5_TYPE_32));</span><br><span class=\"line\">\tjdkMD2(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tjdkMD5(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tbcMD4(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tbcMD5(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tccMD2(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tccMD5(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//PBE</span></span><br><span class=\"line\">\tjdkPBE(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//RSA</span></span><br><span class=\"line\">\tjdkRSA(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tjdkRSA2(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//SHA</span></span><br><span class=\"line\">\tjdkSHA1(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tbcSHA1(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tbcSHA224(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tjdkSHA224_2(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tccSHA1(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>案例引用如下三个jar包:</p>\n<pre><code>bcprov-ext-jdk15on-149.jar\nbcprov-jdk15on-149.jar\ncommons-codec-1.10.jar\n</code></pre><p>代码引用包详情见原代码:</p>\n<h1 id=\"Demo下载\"><a href=\"#Demo下载\" class=\"headerlink\" title=\"Demo下载\"></a>Demo下载</h1><p><a href=\"/res/file/blog/2014/12/01/Java_security/Security.rar\">本文Demo源代码</a></p>\n","excerpt":"<p>目录:</p>\n<pre><code>Base64\n消息摘要算法\n    MD\n    SHA\n    MAC\n对称加密算法\n    DES\n    3DES\n    AES\n    PBE\n非对称加密算法\n    DH\n    RSA\n    ElGamal\n数字签名算法\n    RSA\n    DSA\n    ECDSA\n其它算法\n    IDEA\n    CRC\n</code></pre>","more":"<h1 id=\"Base64\"><a href=\"#Base64\" class=\"headerlink\" title=\"Base64\"></a>Base64</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkBase64</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tBASE64Encoder encoder = <span class=\"keyword\">new</span> BASE64Encoder();</span><br><span class=\"line\">\t\tString encode = encoder.encode(msg.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"encode:\"</span> + encode);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tBASE64Decoder decoder = <span class=\"keyword\">new</span> BASE64Decoder();</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] b = decoder.decodeBuffer(encode);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"decoder:\"</span> + <span class=\"keyword\">new</span> String(b));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">commonsCodesBase64</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] encodeBytes = org.apache.commons.codec.binary.Base64.encodeBase64(msg.getBytes());</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"encode:\"</span> + <span class=\"keyword\">new</span> String(encodeBytes));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] decodeBytes = org.apache.commons.codec.binary.Base64.decodeBase64(encodeBytes);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"decode:\"</span> + <span class=\"keyword\">new</span> String(decodeBytes));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bouncyCastleBase64</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] encodeBytes = org.bouncycastle.util.encoders.Base64.encode(msg.getBytes());</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"encode:\"</span> + <span class=\"keyword\">new</span> String(encodeBytes));</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] decodeBytes = org.bouncycastle.util.encoders.Base64.decode(encodeBytes);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"decode:\"</span> + <span class=\"keyword\">new</span> String(decodeBytes));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"消息摘要算法\"><a href=\"#消息摘要算法\" class=\"headerlink\" title=\"消息摘要算法\"></a>消息摘要算法</h1><h2 id=\"消息摘要算法-MD\"><a href=\"#消息摘要算法-MD\" class=\"headerlink\" title=\"消息摘要算法 - MD\"></a>消息摘要算法 - MD</h2><pre><code>算法:\nMD2  实现方:JDK\nMD4  实现方:BouncyCastle 简称BC\nMD5  实现方:JDK\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkMD2</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tMessageDigest md = MessageDigest.getInstance(<span class=\"string\">\"MD2\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] md2Bytes = md.digest(msg.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"JDK MD2:\"</span> + org.apache.commons.codec.binary.Hex.encodeHexString(md2Bytes));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkMD5</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tMessageDigest md = MessageDigest.getInstance(<span class=\"string\">\"MD5\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] md5Bytes = md.digest(msg.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"JDK MD5:\"</span> + org.apache.commons.codec.binary.Hex.encodeHexString(md5Bytes));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BouncyCastle</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bcMD4</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tSecurity.addProvider(<span class=\"keyword\">new</span> BouncyCastleProvider());<span class=\"comment\">// 为JDK设置算法</span></span><br><span class=\"line\">\t\tMessageDigest md = MessageDigest.getInstance(<span class=\"string\">\"MD4\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] md4Bytes = md.digest(msg.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"JDK MD5:\"</span> + org.apache.commons.codec.binary.Hex.encodeHexString(md4Bytes));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tDigest digest = <span class=\"keyword\">new</span> MD4Digest();</span><br><span class=\"line\">\tdigest.update(msg.getBytes(), <span class=\"number\">0</span>, msg.getBytes().length);</span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] md4Byte = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[digest.getDigestSize()];</span><br><span class=\"line\">\tdigest.doFinal(md4Byte, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"BC MD4: \"</span> + org.bouncycastle.util.encoders.Hex.toHexString(md4Byte));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BouncyCastle</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bcMD5</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\tDigest digest = <span class=\"keyword\">new</span> MD5Digest();</span><br><span class=\"line\">\tdigest.update(msg.getBytes(), <span class=\"number\">0</span>, msg.getBytes().length);</span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] md5Byte = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[digest.getDigestSize()];</span><br><span class=\"line\">\tdigest.doFinal(md5Byte, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"BC MD5: \"</span> + org.bouncycastle.util.encoders.Hex.toHexString(md5Byte));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//commons codec</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ccMD5</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"CC MD5:\"</span>+DigestUtils.md5Hex(msg.getBytes()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//commons codec</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ccMD2</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"CC MD2:\"</span>+DigestUtils.md2Hex(msg.getBytes()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String MD5_TYPE_16 = <span class=\"string\">\"t_16\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String MD5_TYPE_32 = <span class=\"string\">\"T_32\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">md5s</span><span class=\"params\">(String plainText, String type)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tMessageDigest md = MessageDigest.getInstance(<span class=\"string\">\"MD5\"</span>);</span><br><span class=\"line\">\t\tmd.update(plainText.getBytes());</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span> b[] = md.digest();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tStringBuffer buf = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> offset = <span class=\"number\">0</span>; offset &lt; b.length; offset++) &#123;</span><br><span class=\"line\">\t\t\ti = b[offset];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\ti += <span class=\"number\">256</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i &lt; <span class=\"number\">16</span>)</span><br><span class=\"line\">\t\t\t\tbuf.append(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">\t\t\tbuf.append(Integer.toHexString(i));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tString str = buf.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (type.equals(MD5_TYPE_16)) &#123;</span><br><span class=\"line\">\t\t\tstr = str.substring(<span class=\"number\">8</span>, <span class=\"number\">24</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"消息摘要算法-SHA\"><a href=\"#消息摘要算法-SHA\" class=\"headerlink\" title=\"消息摘要算法 - SHA\"></a>消息摘要算法 - SHA</h2><pre><code>安全散列算法\n固定长度摘要信息\nSHA-1  SHA-2(SHA-224,SHA-256,SHA-384,SHA-512)\n\n算法:\nSHA-1    实现方:JDK\nSHA-224  实现方:BC\nSHA-256  实现方:JDK\nSHA-384  实现方:JDK\nSHA-512  实现方:JDK\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkSHA1</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tMessageDigest md = MessageDigest.getInstance(<span class=\"string\">\"SHA\"</span>);<span class=\"comment\">// SHA1</span></span><br><span class=\"line\">\t\tmd.update(msg.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk SHA-1:\"</span> + Hex.encodeHexString(md.digest()));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bcSHA1</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\tDigest digest = <span class=\"keyword\">new</span> SHA1Digest();</span><br><span class=\"line\">\tdigest.update(msg.getBytes(), <span class=\"number\">0</span>, msg.getBytes().length);</span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] sha1Byte = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[digest.getDigestSize()];</span><br><span class=\"line\">\tdigest.doFinal(sha1Byte, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"bc SHA-1:\"</span> + org.bouncycastle.util.encoders.Hex.toHexString(sha1Byte));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bcSHA224</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\tDigest digest = <span class=\"keyword\">new</span> SHA224Digest();</span><br><span class=\"line\">\tdigest.update(msg.getBytes(), <span class=\"number\">0</span>, msg.getBytes().length);</span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] sha224Byte = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[digest.getDigestSize()];</span><br><span class=\"line\">\tdigest.doFinal(sha224Byte, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"bc SHA-224:\"</span> + org.bouncycastle.util.encoders.Hex.toHexString(sha224Byte));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkSHA224_2</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tSecurity.addProvider(<span class=\"keyword\">new</span> BouncyCastleProvider());<span class=\"comment\">// 设置</span></span><br><span class=\"line\">\t\tMessageDigest md = MessageDigest.getInstance(<span class=\"string\">\"SHA224\"</span>);<span class=\"comment\">// SHA224</span></span><br><span class=\"line\">\t\tmd.update(msg.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk addProvider -&gt;SHA-224:\"</span> + Hex.encodeHexString(md.digest()));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ccSHA1</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"cc sha1:\"</span> + DigestUtils.sha1Hex(msg.getBytes()));</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"cc sha512:\"</span> + DigestUtils.sha512Hex((msg.getBytes())));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"消息摘要算法-MAC\"><a href=\"#消息摘要算法-MAC\" class=\"headerlink\" title=\"消息摘要算法 - MAC\"></a>消息摘要算法 - MAC</h2><pre><code>MAC(Message Authentication Code)\nHMAC(keyed-Hash Message Authentication Code),含有密钥的散列函数算法\n任何MD,SHA\n -MD系列:HmacMD2 , HmacMD4 , HmacMD5\n -SHA系列: HmacSHA1, HmacSHA224,HmacSHA256,HmacSHA384,HmacSHA512\n\n 算法:\n HmacMD2    实现方:BC\n HmacMD4    实现方:BC\n HmacMD5    实现方:JDK\n HamcSHA1   实现方:JKD\n HmacSHA224 实现方:BC\n HmacSHA256 实现方:JKD\n HmacSHA384 实现方:JKD\n HmacSHA512 实现方:JKD\n\n\n\n 其它消息摘要算法\n RipeMD\n Tiger\n Whirlpool\n GOST3411\n\n Bouncy Castle实现\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkHmacMD5</span><span class=\"params\">(String msg, String keyParameter)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(<span class=\"string\">\"HmacMD5\"</span>);</span><br><span class=\"line\">\t\tSecretKey secretKey = keyGenerator.generateKey();<span class=\"comment\">// 产生密钥</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] key = secretKey.getEncoded();<span class=\"comment\">// 获取密钥</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tkey = Hex.decodeHex(keyParameter.toCharArray());<span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 还原密钥</span></span><br><span class=\"line\">\t\tSecretKey restoreSecretKey = <span class=\"keyword\">new</span> SecretKeySpec(key, <span class=\"string\">\"HmacMD5\"</span>);</span><br><span class=\"line\">\t\tMac mac = Mac.getInstance(restoreSecretKey.getAlgorithm());<span class=\"comment\">// 实例化MAC</span></span><br><span class=\"line\">\t\tmac.init(restoreSecretKey);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] hmacMD5Bytes = mac.doFinal(msg.getBytes());<span class=\"comment\">// 执行摘要</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk hmacMD5:\"</span> + Hex.encodeHexString(hmacMD5Bytes));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bcHmacMD5</span><span class=\"params\">(String msg, String keyParameter)</span> </span>&#123;</span><br><span class=\"line\">\tHMac hmac = <span class=\"keyword\">new</span> HMac(<span class=\"keyword\">new</span> MD5Digest());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] b = org.bouncycastle.util.encoders.Hex.decode(keyParameter.getBytes());</span><br><span class=\"line\">\tKeyParameter k = <span class=\"keyword\">new</span> KeyParameter(b);</span><br><span class=\"line\">\thmac.init(k);</span><br><span class=\"line\">\thmac.update(msg.getBytes(), <span class=\"number\">0</span>, msg.getBytes().length);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] hmacMD5Bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[hmac.getMacSize()];</span><br><span class=\"line\">\thmac.doFinal(hmacMD5Bytes, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"bc hmacMD5:\"</span> + org.bouncycastle.util.encoders.Hex.toHexString(hmacMD5Bytes));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"对称加密算法\"><a href=\"#对称加密算法\" class=\"headerlink\" title=\"对称加密算法\"></a>对称加密算法</h1><h2 id=\"对称加密算法-DEC-3DEC\"><a href=\"#对称加密算法-DEC-3DEC\" class=\"headerlink\" title=\"对称加密算法 - DEC - 3DEC\"></a>对称加密算法 - DEC - 3DEC</h2><pre><code>初等\nDES\n   -3DES\nAES\nPBE\nIDEA\n\nDES(Data Encryptiong Standard) 数据加密标准\n对称加密元老.\n\n密钥长度56  默认56  工作模式:ECB,CBC,PCBC,CTR,CTS,CFB,CFB8,到128,OFB,OFB8到128 \n实现方:JDK 填充方式:NoPadding,PKCS5Padding,ISO10126Padding, \n实现方:BC 填充方式:PKCS7Padding,ISO10126d2Padding,X932Padding,ISO7816d4Pading,ZeroBytePading\n\n3DES(Triple DES或者DESede)\n密钥长度112,168  默认168 \n密钥长度128,192  默认168\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkDES</span><span class=\"params\">(String src)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 生成KEY</span></span><br><span class=\"line\">\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(<span class=\"string\">\"DES\"</span>);</span><br><span class=\"line\">\t\tkeyGenerator.init(<span class=\"number\">56</span>);</span><br><span class=\"line\">\t\tSecretKey secretKey = keyGenerator.generateKey();</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] bytesKey = secretKey.getEncoded();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// KEY转换</span></span><br><span class=\"line\">\t\tDESKeySpec desKeySpec = <span class=\"keyword\">new</span> DESKeySpec(bytesKey);</span><br><span class=\"line\">\t\tSecretKeyFactory factory = SecretKeyFactory.getInstance(<span class=\"string\">\"DES\"</span>);</span><br><span class=\"line\">\t\tKey convertSecretKey = factory.generateSecret(desKeySpec);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 加密</span></span><br><span class=\"line\">\t\tCipher cipher = Cipher.getInstance(<span class=\"string\">\"DES/ECB/PKCS5Padding\"</span>);</span><br><span class=\"line\">\t\tcipher.init(Cipher.ENCRYPT_MODE, convertSecretKey);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] result = cipher.doFinal(src.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk des encrypt : \"</span> + Hex.encodeHexString(result));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 解密</span></span><br><span class=\"line\">\t\tcipher.init(Cipher.DECRYPT_MODE, convertSecretKey);</span><br><span class=\"line\">\t\tresult = cipher.doFinal(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk des decrypt : \"</span> + <span class=\"keyword\">new</span> String(result));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bcDES</span><span class=\"params\">(String src)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tSecurity.addProvider(<span class=\"keyword\">new</span> BouncyCastleProvider());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 生成KEY</span></span><br><span class=\"line\">\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(<span class=\"string\">\"DES\"</span>, <span class=\"string\">\"BC\"</span>);</span><br><span class=\"line\">\t\tkeyGenerator.getProvider();</span><br><span class=\"line\">\t\tkeyGenerator.init(<span class=\"number\">56</span>);</span><br><span class=\"line\">\t\tSecretKey secretKey = keyGenerator.generateKey();</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] bytesKey = secretKey.getEncoded();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// KEY转换</span></span><br><span class=\"line\">\t\tDESKeySpec desKeySpec = <span class=\"keyword\">new</span> DESKeySpec(bytesKey);</span><br><span class=\"line\">\t\tSecretKeyFactory factory = SecretKeyFactory.getInstance(<span class=\"string\">\"DES\"</span>);</span><br><span class=\"line\">\t\tKey convertSecretKey = factory.generateSecret(desKeySpec);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 加密</span></span><br><span class=\"line\">\t\tCipher cipher = Cipher.getInstance(<span class=\"string\">\"DES/ECB/PKCS5Padding\"</span>);</span><br><span class=\"line\">\t\tcipher.init(Cipher.ENCRYPT_MODE, convertSecretKey);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] result = cipher.doFinal(src.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"bc des encrypt : \"</span> + Hex.encodeHexString(result));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 解密</span></span><br><span class=\"line\">\t\tcipher.init(Cipher.DECRYPT_MODE, convertSecretKey);</span><br><span class=\"line\">\t\tresult = cipher.doFinal(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"bc des decrypt : \"</span> + <span class=\"keyword\">new</span> String(result));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdk3DES</span><span class=\"params\">(String src)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 生成KEY</span></span><br><span class=\"line\">\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(<span class=\"string\">\"DESede\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// keyGenerator.init(168);</span></span><br><span class=\"line\">\t\tkeyGenerator.init(<span class=\"keyword\">new</span> SecureRandom());<span class=\"comment\">// 默认长度</span></span><br><span class=\"line\">\t\tSecretKey secretKey = keyGenerator.generateKey();</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] bytesKey = secretKey.getEncoded();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// KEY转换</span></span><br><span class=\"line\">\t\tDESKeySpec desKeySpec = <span class=\"keyword\">new</span> DESKeySpec(bytesKey);</span><br><span class=\"line\">\t\tSecretKeyFactory factory = SecretKeyFactory.getInstance(<span class=\"string\">\"DES\"</span>);</span><br><span class=\"line\">\t\tKey convertSecretKey = factory.generateSecret(desKeySpec);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 加密</span></span><br><span class=\"line\">\t\tCipher cipher = Cipher.getInstance(<span class=\"string\">\"DES/ECB/PKCS5Padding\"</span>);</span><br><span class=\"line\">\t\tcipher.init(Cipher.ENCRYPT_MODE, convertSecretKey);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] result = cipher.doFinal(src.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk 3des encrypt : \"</span> + Base64.encodeBase64String(result));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 解密</span></span><br><span class=\"line\">\t\tcipher.init(Cipher.DECRYPT_MODE, convertSecretKey);</span><br><span class=\"line\">\t\tresult = cipher.doFinal(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk 3des decrypt : \"</span> + <span class=\"keyword\">new</span> String(result));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对称加密算法-AES\"><a href=\"#对称加密算法-AES\" class=\"headerlink\" title=\"对称加密算法 - AES\"></a>对称加密算法 - AES</h2><pre><code>DES替代者\n\n密钥长度:128,192,256 默认128 工作模式:ECB,CBC,PCBC,CTR,CTS,CFB,CFB8到128,OFB,OFB8到128 \n填充方式:NoPadding,PKCS5Padding,ISO10126Padding 实现方:JDK(256位密钥需要获得无政策限制权限文件)\n填充方式:PKCS7Padding,ZeroBytePadding 实现方:BC\n\n无政策限制权限文件是指,因为某些国家的进口管制限制,Java发布的远行环境包中的加解密有一定的限制\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkAES</span><span class=\"params\">(String src)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 生成KEY</span></span><br><span class=\"line\">\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(<span class=\"string\">\"AES\"</span>);</span><br><span class=\"line\">\t\tkeyGenerator.init(<span class=\"number\">128</span>);</span><br><span class=\"line\">\t\tSecretKey secretKey = keyGenerator.generateKey();</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] keyBytes = secretKey.getEncoded();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// key转换</span></span><br><span class=\"line\">\t\tKey key = <span class=\"keyword\">new</span> SecretKeySpec(keyBytes, <span class=\"string\">\"AES\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 加密</span></span><br><span class=\"line\">\t\tCipher cipher = Cipher.getInstance(<span class=\"string\">\"AES/ECB/PKCS5Padding\"</span>);</span><br><span class=\"line\">\t\tcipher.init(Cipher.ENCRYPT_MODE, key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] result = cipher.doFinal(src.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk aes encrypt : \"</span> + Base64.encodeBase64String(result));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 解密</span></span><br><span class=\"line\">\t\tcipher.init(Cipher.DECRYPT_MODE, key);</span><br><span class=\"line\">\t\tresult = cipher.doFinal(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk aes desrypt : \"</span> + <span class=\"keyword\">new</span> String(result));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对称加密算法-PBE\"><a href=\"#对称加密算法-PBE\" class=\"headerlink\" title=\"对称加密算法 - PBE\"></a>对称加密算法 - PBE</h2><pre><code>PBE(Password Based Encryption)基于口令加密\n\n算法                         密钥长度    默认  工作模式       填充方式      实现\nPBEWithMD5AndDES                64       64      CBC       PKCS5Padding       BC\nPBEWithMd5AndRC2                112      128               PKCS7Padding\nPBEWithSHA1AndDES               6        64                ISO10126Padding\nPBEWithSHAAndIDEA-CBC           128      128\nPBEWithSHAAnd2-KeyTripleDES-CBC 128      128\nPBEWithSHAAnd3-KeyTripleDES-CBC 192      192\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkPBE</span><span class=\"params\">(String src)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 初始化盐</span></span><br><span class=\"line\">\t\tSecureRandom random = <span class=\"keyword\">new</span> SecureRandom();</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] salt = random.generateSeed(<span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 口令与密钥</span></span><br><span class=\"line\">\t\tString password = <span class=\"string\">\"password_comtu\"</span>;</span><br><span class=\"line\">\t\tPBEKeySpec pbeKeySpec = <span class=\"keyword\">new</span> PBEKeySpec(password.toCharArray());</span><br><span class=\"line\">\t\tSecretKeyFactory factory = SecretKeyFactory.getInstance(<span class=\"string\">\"PBEWITHMD5andDES\"</span>);</span><br><span class=\"line\">\t\tKey key = factory.generateSecret(pbeKeySpec);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 加密</span></span><br><span class=\"line\">\t\tPBEParameterSpec pbeParameterSpec = <span class=\"keyword\">new</span> PBEParameterSpec(salt, <span class=\"number\">100</span>);</span><br><span class=\"line\">\t\tCipher cipher = Cipher.getInstance(<span class=\"string\">\"PBEWITHMD5andDES\"</span>);</span><br><span class=\"line\">\t\tcipher.init(Cipher.ENCRYPT_MODE, key, pbeParameterSpec);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] result = cipher.doFinal(src.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk pbe encrypt : \"</span> + Base64.encodeBase64String(result));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 解密</span></span><br><span class=\"line\">\t\tcipher.init(Cipher.DECRYPT_MODE, key, pbeParameterSpec);</span><br><span class=\"line\">\t\tresult = cipher.doFinal(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk pbe decrypt : \"</span> + <span class=\"keyword\">new</span> String(result));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"非对称加密算法\"><a href=\"#非对称加密算法\" class=\"headerlink\" title=\"非对称加密算法\"></a>非对称加密算法</h1><h2 id=\"非对称加密算法-DH\"><a href=\"#非对称加密算法-DH\" class=\"headerlink\" title=\"非对称加密算法 - DH\"></a>非对称加密算法 - DH</h2><pre><code>高级 \n双保险 \n公钥,私钥\n\n  DH(Diffie-Hellman)密钥交换算法\n  RSA-基于因子分解 ElGamal - 基于离散对数 \n  ECC(Elliptical Curve Cryptography) - 椭圆曲线加密\n\n\nDH 密钥长度: 512~1024(64倍数) 默认1024 实现方:JDK\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkDH</span><span class=\"params\">(String src)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.初始化发送方密钥</span></span><br><span class=\"line\">\t\tKeyPairGenerator senderKeyPairGenerator = KeyPairGenerator.getInstance(<span class=\"string\">\"DH\"</span>);</span><br><span class=\"line\">\t\tsenderKeyPairGenerator.initialize(<span class=\"number\">512</span>);</span><br><span class=\"line\">\t\tKeyPair senderKeyPair = senderKeyPairGenerator.generateKeyPair();</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] senderPublicKeyEnc = senderKeyPair.getPublic().getEncoded();<span class=\"comment\">// 发送方公钥，发送给接收方（网络、文件。。。）</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.初始化接收方密钥</span></span><br><span class=\"line\">\t\tKeyFactory receiverKeyFactory = KeyFactory.getInstance(<span class=\"string\">\"DH\"</span>);</span><br><span class=\"line\">\t\tX509EncodedKeySpec x509EncodedKeySpec = <span class=\"keyword\">new</span> X509EncodedKeySpec(senderPublicKeyEnc);</span><br><span class=\"line\">\t\tPublicKey receiverPublicKey = receiverKeyFactory.generatePublic(x509EncodedKeySpec);</span><br><span class=\"line\">\t\tDHParameterSpec dhParameterSpec = ((DHPublicKey) receiverPublicKey).getParams();</span><br><span class=\"line\">\t\tKeyPairGenerator receiverKeyPairGenerator = KeyPairGenerator.getInstance(<span class=\"string\">\"DH\"</span>);</span><br><span class=\"line\">\t\treceiverKeyPairGenerator.initialize(dhParameterSpec);</span><br><span class=\"line\">\t\tKeyPair receiverKeypair = receiverKeyPairGenerator.generateKeyPair();</span><br><span class=\"line\">\t\tPrivateKey receiverPrivateKey = receiverKeypair.getPrivate();</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] receiverPublicKeyEnc = receiverKeypair.getPublic().getEncoded();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.密钥构建</span></span><br><span class=\"line\">\t\tKeyAgreement receiverKeyAgreement = KeyAgreement.getInstance(<span class=\"string\">\"DH\"</span>);</span><br><span class=\"line\">\t\treceiverKeyAgreement.init(receiverPrivateKey);</span><br><span class=\"line\">\t\treceiverKeyAgreement.doPhase(receiverPublicKey, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\tSecretKey receiverDesKey = receiverKeyAgreement.generateSecret(<span class=\"string\">\"DES\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tKeyFactory senderKeyFactory = KeyFactory.getInstance(<span class=\"string\">\"DH\"</span>);</span><br><span class=\"line\">\t\tx509EncodedKeySpec = <span class=\"keyword\">new</span> X509EncodedKeySpec(receiverPublicKeyEnc);</span><br><span class=\"line\">\t\tPublicKey senderPublicKey = senderKeyFactory.generatePublic(x509EncodedKeySpec);</span><br><span class=\"line\">\t\tKeyAgreement senderKeyAgreement = KeyAgreement.getInstance(<span class=\"string\">\"DH\"</span>);</span><br><span class=\"line\">\t\tsenderKeyAgreement.init(senderKeyPair.getPrivate());</span><br><span class=\"line\">\t\tsenderKeyAgreement.doPhase(senderPublicKey, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\tSecretKey senderDesKey = senderKeyAgreement.generateSecret(<span class=\"string\">\"DES\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// if (com.sun.org.apache.xalan.internal.utils.Objects.equals(receiverDesKey, senderDesKey)) &#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (receiverDesKey.equals(senderDesKey)) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"双方密钥相同\"</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"双方密钥不同\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 4.加密</span></span><br><span class=\"line\">\t\tCipher cipher = Cipher.getInstance(<span class=\"string\">\"DES\"</span>);</span><br><span class=\"line\">\t\tcipher.init(Cipher.ENCRYPT_MODE, senderDesKey);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] result = cipher.doFinal(src.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk dh encrypt : \"</span> + Base64.encodeBase64String(result));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 5.解密</span></span><br><span class=\"line\">\t\tcipher.init(Cipher.DECRYPT_MODE, receiverDesKey);</span><br><span class=\"line\">\t\tresult = cipher.doFinal(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk dh decrypt : \"</span> + <span class=\"keyword\">new</span> String(result));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"非对称加密算法-数字签名算法-RSA\"><a href=\"#非对称加密算法-数字签名算法-RSA\" class=\"headerlink\" title=\"非对称加密算法 - 数字签名算法 - RSA\"></a>非对称加密算法 - 数字签名算法 - RSA</h2><pre><code>经典算法 \nMD,SHA两类\n\n算法:\nMD2withRSA       实现方: JDK\nMD5withRSA       实现方: JDK\nSHA1withRSA      实现方: JDK\nSHA224withRSA    实现方: BC\nSHA256withRSA    实现方: BC\nSHA384withRSA    实现方: BC\nSHA512withRSA    实现方: BC\nRIPEMD128withRSA 实现方: BC\nRIPEMD160withRSA 实现方: BC\n\n\n非对称加密算法-RSA\n唯一广泛接受并实现\n数据加密&amp;数字签名\n公钥加密,私钥解密\n私钥加密,公钥解密\n\nJDK 密钥长度:512~65536(64整数倍) 工作模式:ECB 默认长度:1024 填充方式: \nNoPadding\nPKCS1Padding\nOAEPWITHMD5AndMGF1Pading\nOAEPWITHSHA1AndMGF1Pading\nOAEPWITHSHA256AndMGF1Pading\nOAEPWITHSHA384AndMGF1Pading\nOAEPWITHSHA512AndMGF1Pading\n\nBC 密钥长度:512~65536(64整数倍) 工作模式:NONE 默认长度:2048 填充方式: \nNoPadding\nPKCS1Padding\nOAEPWITHMD5AndMGF1Pading\nOAEPWITHSHA1AndMGF1Pading\nOAEPWITHSHA224AndMGF1Pading\nOAEPWITHSHA256AndMGF1Pading\nOAEPWITHSHA384AndMGF1Pading\nOAEPWITHSHA512AndMGF1Pading\nISO9796-1Padding\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkRSA</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.初始化密钥</span></span><br><span class=\"line\">\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tkeyPairGenerator.initialize(<span class=\"number\">512</span>);</span><br><span class=\"line\">\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();</span><br><span class=\"line\">\t\tRSAPublicKey rsaPublicKey = (RSAPublicKey) keyPair.getPublic();</span><br><span class=\"line\">\t\tRSAPrivateKey rsaPrivateKey = (RSAPrivateKey) keyPair.getPrivate();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.执行签名</span></span><br><span class=\"line\">\t\tPKCS8EncodedKeySpec pkcs8EncodedKeySpec = <span class=\"keyword\">new</span> PKCS8EncodedKeySpec(rsaPrivateKey.getEncoded());</span><br><span class=\"line\">\t\tKeyFactory keyFactory = KeyFactory.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tPrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</span><br><span class=\"line\">\t\tSignature signature = Signature.getInstance(<span class=\"string\">\"MD5withRSA\"</span>);</span><br><span class=\"line\">\t\tsignature.initSign(privateKey);</span><br><span class=\"line\">\t\tsignature.update(msg.getBytes());</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] result = signature.sign();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk rsa sign: \"</span> + Hex.encodeHexString(result));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.验证签名</span></span><br><span class=\"line\">\t\tX509EncodedKeySpec x509EncodedKeySpec = <span class=\"keyword\">new</span> X509EncodedKeySpec(rsaPublicKey.getEncoded());</span><br><span class=\"line\">\t\tkeyFactory = KeyFactory.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tPublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);</span><br><span class=\"line\">\t\tsignature = Signature.getInstance(<span class=\"string\">\"MD5withRSA\"</span>);</span><br><span class=\"line\">\t\tsignature.initVerify(publicKey);</span><br><span class=\"line\">\t\tsignature.update(msg.getBytes());</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> bool = signature.verify(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk rea verify:\"</span> + bool);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkRSA2</span><span class=\"params\">(String src)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.初始化密钥</span></span><br><span class=\"line\">\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tkeyPairGenerator.initialize(<span class=\"number\">512</span>);</span><br><span class=\"line\">\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();</span><br><span class=\"line\">\t\tRSAPublicKey rsaPublicKey = (RSAPublicKey) keyPair.getPublic();</span><br><span class=\"line\">\t\tRSAPrivateKey rsaPrivateKey = (RSAPrivateKey) keyPair.getPrivate();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Public Key : \"</span> + Base64.encodeBase64String(rsaPublicKey.getEncoded()));</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Private Key : \"</span> + Base64.encodeBase64String(rsaPrivateKey.getEncoded()));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.私钥加密、公钥解密——加密</span></span><br><span class=\"line\">\t\tPKCS8EncodedKeySpec pkcs8EncodedKeySpec = <span class=\"keyword\">new</span> PKCS8EncodedKeySpec(rsaPrivateKey.getEncoded());</span><br><span class=\"line\">\t\tKeyFactory keyFactory = KeyFactory.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tPrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</span><br><span class=\"line\">\t\tCipher cipher = Cipher.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tcipher.init(Cipher.ENCRYPT_MODE, privateKey);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] result = cipher.doFinal(src.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"私钥加密、公钥解密——加密 : \"</span> + Base64.encodeBase64String(result));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.私钥加密、公钥解密——解密</span></span><br><span class=\"line\">\t\tX509EncodedKeySpec x509EncodedKeySpec = <span class=\"keyword\">new</span> X509EncodedKeySpec(rsaPublicKey.getEncoded());</span><br><span class=\"line\">\t\tkeyFactory = KeyFactory.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tPublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);</span><br><span class=\"line\">\t\tcipher = Cipher.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tcipher.init(Cipher.DECRYPT_MODE, publicKey);</span><br><span class=\"line\">\t\tresult = cipher.doFinal(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"私钥加密、公钥解密——解密：\"</span> + <span class=\"keyword\">new</span> String(result));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 4.公钥加密、私钥解密——加密</span></span><br><span class=\"line\">\t\tx509EncodedKeySpec = <span class=\"keyword\">new</span> X509EncodedKeySpec(rsaPublicKey.getEncoded());</span><br><span class=\"line\">\t\tkeyFactory = KeyFactory.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tpublicKey = keyFactory.generatePublic(x509EncodedKeySpec);</span><br><span class=\"line\">\t\tcipher = Cipher.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tcipher.init(Cipher.ENCRYPT_MODE, publicKey);</span><br><span class=\"line\">\t\tresult = cipher.doFinal(src.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"公钥加密、私钥解密——加密 : \"</span> + Base64.encodeBase64String(result));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 5.公钥加密、私钥解密——解密</span></span><br><span class=\"line\">\t\tpkcs8EncodedKeySpec = <span class=\"keyword\">new</span> PKCS8EncodedKeySpec(rsaPrivateKey.getEncoded());</span><br><span class=\"line\">\t\tkeyFactory = KeyFactory.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tprivateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</span><br><span class=\"line\">\t\tcipher = Cipher.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">\t\tcipher.init(Cipher.DECRYPT_MODE, privateKey);</span><br><span class=\"line\">\t\tresult = cipher.doFinal(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"公钥加密、私钥解密——解密：\"</span> + <span class=\"keyword\">new</span> String(result));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"非对称加密算法-ElGamal\"><a href=\"#非对称加密算法-ElGamal\" class=\"headerlink\" title=\"非对称加密算法 - ElGamal\"></a>非对称加密算法 - ElGamal</h2><pre><code> 公钥加密算法\n实现方:BC 密钥长度:160~16384(8的整数倍) , 默认:1024 工作模式:ECB,NONE\n填充方式:\nNoPadding , PKCS1Padding\nOAEPWITHMD5AndMGF1Pading\nOAEPWITSHA1AndMGF1Pading\nOAEPWITSHA224AndMGF1Pading\nOAEPWITSHA256AndMGF1Pading\nOAEPWITSHA384AndMGF1Pading\nOAEPWITSHA512AndMGF1Pading\nISO9796-1Padding\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bcElGamal</span><span class=\"params\">(String src)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 公钥加密,私钥解密</span></span><br><span class=\"line\">\t\tSecurity.addProvider(<span class=\"keyword\">new</span> BouncyCastleProvider());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.初始化密钥</span></span><br><span class=\"line\">\t\tAlgorithmParameterGenerator algorithmParameterGenerator = AlgorithmParameterGenerator.getInstance(<span class=\"string\">\"ElGamal\"</span>);</span><br><span class=\"line\">\t\talgorithmParameterGenerator.init(<span class=\"number\">256</span>);</span><br><span class=\"line\">\t\tAlgorithmParameters algorithmParameters = algorithmParameterGenerator.generateParameters();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tDHParameterSpec dhParameterSpec =  (DHParameterSpec) algorithmParameters.getParameterSpec(DHParameterSpec.class);</span><br><span class=\"line\">\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(<span class=\"string\">\"ElGamal\"</span>);</span><br><span class=\"line\">\t\tkeyPairGenerator.initialize(dhParameterSpec, <span class=\"keyword\">new</span> SecureRandom());</span><br><span class=\"line\">\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();</span><br><span class=\"line\">\t\tPublicKey elGamalPublicKey = keyPair.getPublic();</span><br><span class=\"line\">\t\tPrivateKey elGamalPrivateKey = keyPair.getPrivate();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Public Key:\"</span> + org.apache.commons.codec.binary.Base64.encodeBase64String(elGamalPublicKey.getEncoded()));</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Private Key:\"</span> + org.apache.commons.codec.binary.Base64.encodeBase64String(elGamalPrivateKey.getEncoded()));</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"数字签名算法\"><a href=\"#数字签名算法\" class=\"headerlink\" title=\"数字签名算法\"></a>数字签名算法</h1><h2 id=\"数字签名算法-DSA\"><a href=\"#数字签名算法-DSA\" class=\"headerlink\" title=\"数字签名算法 - DSA\"></a>数字签名算法 - DSA</h2><pre><code>DSS (Digital Signature Standard)数字签名标准\nDSA(Digital Signature Algorithm)数字签名算法\nDSA仅包含数字签名\n\n算法:\nSHA1withDSA    实现方:JDK\nSHA224withDSA  实现方:BC\nSHA256withDSA  实现方:BC\nSHA384withDSA  实现方:BC\nSHA512withDSA  实现方:BC\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkDSA</span><span class=\"params\">(String src)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.初始化密钥</span></span><br><span class=\"line\">\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(<span class=\"string\">\"DSA\"</span>);</span><br><span class=\"line\">\t\tkeyPairGenerator.initialize(<span class=\"number\">512</span>);</span><br><span class=\"line\">\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();</span><br><span class=\"line\">\t\tDSAPublicKey dsaPublicKey = (DSAPublicKey) keyPair.getPublic();</span><br><span class=\"line\">\t\tDSAPrivateKey dsaPrivateKey = (DSAPrivateKey) keyPair.getPrivate();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.执行签名</span></span><br><span class=\"line\">\t\tPKCS8EncodedKeySpec pkcs8EncodedKeySpec = <span class=\"keyword\">new</span> PKCS8EncodedKeySpec(dsaPrivateKey.getEncoded());</span><br><span class=\"line\">\t\tKeyFactory keyFactory = KeyFactory.getInstance(<span class=\"string\">\"DSA\"</span>);</span><br><span class=\"line\">\t\tPrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</span><br><span class=\"line\">\t\tSignature signature = Signature.getInstance(<span class=\"string\">\"SHA1withDSA\"</span>);</span><br><span class=\"line\">\t\tsignature.initSign(privateKey);</span><br><span class=\"line\">\t\tsignature.update(src.getBytes());</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] result = signature.sign();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk dsa sign : \"</span> + Hex.encodeHexString(result));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.验证签名</span></span><br><span class=\"line\">\t\tX509EncodedKeySpec x509EncodedKeySpec = <span class=\"keyword\">new</span> X509EncodedKeySpec(dsaPublicKey.getEncoded());</span><br><span class=\"line\">\t\tkeyFactory = KeyFactory.getInstance(<span class=\"string\">\"DSA\"</span>);</span><br><span class=\"line\">\t\tPublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);</span><br><span class=\"line\">\t\tsignature = Signature.getInstance(<span class=\"string\">\"SHA1withDSA\"</span>);</span><br><span class=\"line\">\t\tsignature.initVerify(publicKey);</span><br><span class=\"line\">\t\tsignature.update(src.getBytes());</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> bool = signature.verify(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk dsa verify : \"</span> + bool);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数字签名算法-ECDSA\"><a href=\"#数字签名算法-ECDSA\" class=\"headerlink\" title=\"数字签名算法 - ECDSA\"></a>数字签名算法 - ECDSA</h2><pre><code> 微软\n Elliptic Curve Digital Signature Algorithm , 椭圆曲线数字签名算法\n 速度快,强度高,签名短.\n\n 算法:\n NNONEwithECDSA       实现方:JDK/BC  签名长度:128 \n RIPEMD160withECDSA   实现方:BC      签名长度:160\n SHA1withECDSA        实现方:JDK/BC  签名长度:160\n SHA224withECDSA      实现方:BC      签名长度:224\n SHA256withECDSA      实现方:JDK/BC  签名长度:256\n SHA384withECDSA      实现方:JDK/BC  签名长度:384\n SHA512withECDSA      实现方:JDK/BC  签名长度:512\n\njdk版本1.7以上\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkECDSA</span><span class=\"params\">(String src)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//1.初始化密钥</span></span><br><span class=\"line\">\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(<span class=\"string\">\"EC\"</span>);</span><br><span class=\"line\">\t\tkeyPairGenerator.initialize(<span class=\"number\">256</span>);</span><br><span class=\"line\">\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();</span><br><span class=\"line\">\t\tECPublicKey ecPublicKey = (ECPublicKey)keyPair.getPublic();</span><br><span class=\"line\">\t\tECPrivateKey ecPrivateKey = (ECPrivateKey)keyPair.getPrivate();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//2.执行签名</span></span><br><span class=\"line\">\t\tPKCS8EncodedKeySpec pkcs8EncodedKeySpec = <span class=\"keyword\">new</span> PKCS8EncodedKeySpec(ecPrivateKey.getEncoded());</span><br><span class=\"line\">\t\tKeyFactory keyFactory = KeyFactory.getInstance(<span class=\"string\">\"EC\"</span>);</span><br><span class=\"line\">\t\tPrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</span><br><span class=\"line\">\t\tSignature signature = Signature.getInstance(<span class=\"string\">\"SHA1withECDSA\"</span>);</span><br><span class=\"line\">\t\tsignature.initSign(privateKey);</span><br><span class=\"line\">\t\tsignature.update(src.getBytes());</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] result = signature.sign();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk ecdsa sign : \"</span> + Hex.encodeHexString(result));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//3.验证签名</span></span><br><span class=\"line\">\t\tX509EncodedKeySpec x509EncodedKeySpec = <span class=\"keyword\">new</span> X509EncodedKeySpec(ecPublicKey.getEncoded());</span><br><span class=\"line\">\t\tkeyFactory = KeyFactory.getInstance(<span class=\"string\">\"EC\"</span>);</span><br><span class=\"line\">\t\tPublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);</span><br><span class=\"line\">\t\tsignature = Signature.getInstance(<span class=\"string\">\"SHA1withECDSA\"</span>);</span><br><span class=\"line\">\t\tsignature.initVerify(publicKey);</span><br><span class=\"line\">\t\tsignature.update(src.getBytes());</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> bool = signature.verify(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"jdk ecdsa verify : \"</span> + bool);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"其它算法\"><a href=\"#其它算法\" class=\"headerlink\" title=\"其它算法\"></a>其它算法</h1><h2 id=\"IDEA\"><a href=\"#IDEA\" class=\"headerlink\" title=\"IDEA\"></a>IDEA</h2><pre><code>这种算法是在DES算法的基础上发展出来的，类似于三重DES。\n发展IDEA也是因为感到DES具有密钥太短等缺点。IDEA的密钥为128位，这么长的密钥在今后若干年内应该是安全的。\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bcIDEA</span><span class=\"params\">(String src)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tSecurity.addProvider(<span class=\"keyword\">new</span> BouncyCastleProvider());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//生成key</span></span><br><span class=\"line\">\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(<span class=\"string\">\"IDEA\"</span>);</span><br><span class=\"line\">\t\tkeyGenerator.init(<span class=\"number\">128</span>);</span><br><span class=\"line\">\t\tSecretKey secretKey = keyGenerator.generateKey();</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] keyBytes = secretKey.getEncoded();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//转换密钥</span></span><br><span class=\"line\">\t\tKey key = <span class=\"keyword\">new</span> SecretKeySpec(keyBytes, <span class=\"string\">\"IDEA\"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//加密</span></span><br><span class=\"line\">\t\tCipher cipher = Cipher.getInstance(<span class=\"string\">\"IDEA/ECB/ISO10126Padding\"</span>);</span><br><span class=\"line\">\t\tcipher.init(Cipher.ENCRYPT_MODE, key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] result = cipher.doFinal(src.getBytes());</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"bc idea encrypt : \"</span> + Base64.encodeBase64String(result));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//解密</span></span><br><span class=\"line\">\t\tcipher.init(Cipher.DECRYPT_MODE, key);</span><br><span class=\"line\">\t\tresult = cipher.doFinal(result);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"bc idea decrypt : \"</span> + <span class=\"keyword\">new</span> String(result));</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CRC\"><a href=\"#CRC\" class=\"headerlink\" title=\"CRC\"></a>CRC</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">jdkCrc</span><span class=\"params\">(String src)</span></span>&#123;</span><br><span class=\"line\">\tCRC32 crc = <span class=\"keyword\">new</span> CRC32();</span><br><span class=\"line\">\tcrc.update(src.getBytes());</span><br><span class=\"line\">\tString hex = Long.toHexString(crc.getValue());</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"jdk crc32 : \"</span> + hex);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//AES</span></span><br><span class=\"line\">\tjdkAES(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Base64</span></span><br><span class=\"line\">\tjdkBase64(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tcommonsCodesBase64(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tbouncyCastleBase64(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//DES</span></span><br><span class=\"line\">\tjdkDES(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tbcDES(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tjdk3DES(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//DH</span></span><br><span class=\"line\">\tjdkDH(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//DSA</span></span><br><span class=\"line\">\tjdkDSA(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//ECDSA</span></span><br><span class=\"line\">\tjdkECDSA(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//ElGamal</span></span><br><span class=\"line\">\tbcElGamal(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//HMAC</span></span><br><span class=\"line\">\tjdkHmacMD5(<span class=\"string\">\"comtu\"</span>, <span class=\"string\">\"1234567890abcdef\"</span>);</span><br><span class=\"line\">\tbcHmacMD5(<span class=\"string\">\"comtu\"</span>, <span class=\"string\">\"1234567890abcdef\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//IDEA</span></span><br><span class=\"line\">\tbcIDEA(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//md</span></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"MD5_TYPE_16:\"</span> + Md.md5s(<span class=\"string\">\"comtu\"</span>, MD5_TYPE_16));</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"MD5_TYPE_32:\"</span> + Md.md5s(<span class=\"string\">\"comtu\"</span>, MD5_TYPE_32));</span><br><span class=\"line\">\tjdkMD2(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tjdkMD5(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tbcMD4(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tbcMD5(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tccMD2(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tccMD5(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//PBE</span></span><br><span class=\"line\">\tjdkPBE(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//RSA</span></span><br><span class=\"line\">\tjdkRSA(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tjdkRSA2(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//SHA</span></span><br><span class=\"line\">\tjdkSHA1(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tbcSHA1(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tbcSHA224(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tjdkSHA224_2(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">\tccSHA1(<span class=\"string\">\"comtu\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>案例引用如下三个jar包:</p>\n<pre><code>bcprov-ext-jdk15on-149.jar\nbcprov-jdk15on-149.jar\ncommons-codec-1.10.jar\n</code></pre><p>代码引用包详情见原代码:</p>\n<h1 id=\"Demo下载\"><a href=\"#Demo下载\" class=\"headerlink\" title=\"Demo下载\"></a>Demo下载</h1><p><a href=\"/res/file/blog/2014/12/01/Java_security/Security.rar\">本文Demo源代码</a></p>"},{"layout":"post","title":"Java线程","duoshuo":true,"date":"2014-12-13T16:00:00.000Z","SyntaxHihglighter":true,"shTheme":"shThemeMidnight","_content":"\n目录\n\t\n\t线程简介\n\tJava中的线程实现方式\n\tThread常用方法\n\t线程同步(synchronized关键字)\n\t多线程间数据通信\n\t线程同步死锁\n\n\n<!-- more -->\n\n# 线程简介\n\n\t程序(Program)：\n\t\t计算机指令的集合，它以文件的形式存储在磁盘上。\n\t进程(Process)：\n\t\t一个程序在其自身的地址空间中的一次执行活动。\n\t\t资源申请、调度和独立运行的单位，因此，它使用系统中的运行资源；\n\t\t而程序不能申请系统资源，不能被系统调度，也不能作为独立运行的单位，因此，它不占用系统的运行资源。\n\t线程(Thread)：\n\t\t是进程中的一个单一的连续控制流程。一个进程可以拥有多个线程。\n\t\t线程又称为轻量级进程，它和进程一样拥有独立的执行控制，由操作系统负责调度，\n\t\t区别在于线程没有独立的存储空间，而是和所属进程中的其他线程共享一个存储空间，这使得线程间的通信远较进程简单。\n\t\n\t什么是线程： \n\t\t线程是一个应用程序执行时候的多条路径。\n\n\t线程执行的原理：\n\t      在物理上只有一个CPU的情况下，JVM是采用抢占CPU资源，给不同的线程划分指定执行时间片的方式来实现。\n\n\tjava中隐含的两个线程：\n\t\t主线程\n\t\t\t每个java应用程序都至少有一个线程。这就是所为的主线程。它由JVM创建并调用java应用程序的main方法。\n\t\t垃圾回收线程(后台线程)\n\t\t\tJVM还通常会创建一些其他的线程，不过这些线程对我们来说是不可见的.\n\t\t\t\t比如，用于自动垃圾收集的线程、对象终止或者其他的JVM处理任务相关的线程。\n\n\n# Java中的线程实现方式\n\n\tThread ：线程\n\t\t  所在包: java.lang.*\n\n\t多线程实现方式: \n\t 多线程的方式一:(继承)见下面例:\n\t\t1.1. 将类声明为 Thread 的子类。(继承)\n\t\t1.2. 该子类应重写 Thread 类的 run 方法。\n\t\t1.3. 接下来可以分配并启动该子类的实例。\n\n\t多线程的方式二:(接口)见下面例:\n\t\t2.1. 声明实现 Runnable 接口的类。\n\t\t2.2. 该子类应重写 Thread 类的 run 方法。\n\t\t2.3. 然后可以分配该类的实例，\n\t\t2.4. 在创建 Thread 时作为一个参数来传递并启动\n\n\t二种方式的区别:\n\t\t使用Runnable接口\n\t\t\t可以将CPU，代码和数据分开，形成清晰的模型；\n\t\t\t更加体现了面向对象的编程思想，线程运行的代码也是对象(Runnable)\n\t\t\t还可以从其他类继承；\n\t\t\t保持程序风格的一致性。\n\t\t直接继承Thread类\n\t\t\t不能再继承其他类；\n\t\t\t编写简单，可以直接操纵线程.\n\n\n\t 线程的使用细节：\n\t \n\t\t1. 线程的启动使用父类的start()方法\n\t\t2. 如果线程对象直接调用run()，那么JVN不会当作线程来运行，会认为是普通的方法调用\n\t\t3. 匿名内部类的线程实现方式 \n\t\t4. 可以直接创建Thread类的对象并启动该线程，但是如果没有重写run()，什么也不执行。\n\t\t5. 同一个线程的启动只能有一次，否则抛出异常 (IllegalThreadStateException)\n\t\t\tException in thread \"main\" thread1: i=1java.lang.IllegalThreadStateException\n\n\t守护线程(后台线程)\n\t\tsetDaemon (boolean on)\n\t\t用法:\n\t\t\t线程对象.setDaemon(true)\n\t\t\t在启动线程之前调用\n\t\t特点：\n\t\t和其他线程一起等待CPU执行\n\t\t当其他线程都结束后，后台线程默认结束\n\t\t查看API文档\n\t\t当正在运行的线程都是守护线程时，Java 虚拟机退出\n\t\t该方法必须在启动线程前调用\n\n\t线程的生命周期(lifecycle)\n\n![线程的生命周期(lifecycle)](/res/img/blog/2014/12/14/Java_Thread/Thread_lifecycle.png)\n\n\t\n\n```java\n\tpackage com.tu.mtar;\n\n\tpublic class ThreadAndRunnableDemo {\n\t\t// 主函数\n\t\tpublic static void main(String[] args) {\n\t\t\t// 方式一\n\t\t\tMyThread mt = new MyThread(); // 1.3.接下来可以分配并启动该子类的实例。\n\t\t\t// mt.setDaemon(true);//设置成后台线程必须在开户线程之前\n\t\t\tmt.start(); // 1.4.并调用实例的start()方法,start方法会调用run方法,如果直接调用run方法将不能实现多线程.\n\n\t\t\t// 方式二\n\t\t\tMyRunnable mr = new MyRunnable(); // 2.3. 然后可以分配该类的实例，\n\t\t\tnew Thread(mr).start(); // 2.4 在创建 Thread 时作为一个参数来传递并启动\n\n\t\t\tfor (int i = 0; i < 100; i++) {\n\t\t\t\tSystem.out.println(\"main -- i: \" + i);\n\t\t\t}\n\n\t\t\tro();// Override........\n\n\t\t}\n\n\t\tprotected static void ro() {\n\t\t\t// 当执行的线程的时候如果同时指定了Runnable的实现类和重写了Thread的run()，\n\t\t\t// 那么一定执行重写的run方法，而不是实现的run();\n\n\t\t\tnew Thread(new Runnable() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\tSystem.out.println(\"Runnable........\");\n\t\t\t\t}\n\t\t\t}) {\n\t\t\t\tpublic void run() {\n\t\t\t\t\tSystem.out.println(\"Override........\");\n\t\t\t\t}\n\t\t\t}.start();\n\t\t}\n\t}\n\n\t// 方式一\n\tclass MyThread extends Thread // 1.1.将类声明为 Thread 的子类。(继承)\n\t{\n\t\tpublic void run() // 1.2.该子类应重写 Thread 类的 run 方法。\n\t\t{\n\t\t\tfor (int i = 0; i < 100; i++) {\n\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \"==>MyThread:   i :\" + i);\n\t\t\t}\n\t\t}\n\t}\n\n\t// 方式 二\n\tclass MyRunnable implements Runnable// 2.1. 声明实现 Runnable 接口的类。\n\t{\n\t\tpublic void run() // 2.2. 该类然后实现 run 方法。\n\t\t{\n\t\t\tfor (int i = 0; i < 100; i++) {\n\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \"==>MyRunnable  -- i: \" + i);\n\t\t\t}\n\t\t}\n\t}\n\n```\n\n\n\n# Thread常用方法\n\n<table border=\"1px\" cellpadding=\"5px\"  cellspacing=\"1px\" bgcolor=\"\">\n<tr><td><B>类别</B></td><td ><B>方法签名</B></td><td><B>简介</B></td></tr>\n<tr><td rowspan=\"4\">线程的创建</td><td>Thread()</td>\t  <td></td></tr>\n<tr>\t\t\t\t   <td>Thread(String name)</td><td></td></tr>\n<tr>\t\t\t\t   <td>Thread(Runnable tagrget)</td><td></td></tr>\n<tr>\t\t\t\t   <td>Thread(Runnable target,String name)</td><td></td></tr>\n<tr><td rowspan=\"7\">线程的方法</td><td>void start()</td><td>启动线程</td></tr>\n<tr>\t\t\t\t   <td>static void sleep(long millis)</td><td rowspan=\"2\">线程休眠</td></tr>\n<tr>\t\t\t\t   <td>static void sleep(long millis , int nanos)</td></tr>\n<tr>\t\t\t\t   <td>void join()</td><td rowspan=\"3\">使其他线程等待当前线程终止</td></tr>\n<tr>\t\t\t\t   <td>void join(long millis)</td></tr>\n<tr>\t\t\t\t   <td>void join(long missis,int nanos)</td></tr>\n<tr>\t\t\t\t   <td>static void yield()</td><td>当前运行线程释放处理器资源</td></tr>\n<tr><td>获取线程引用</td><td >static Thread currentThread()</td><td>返回当前运行的线程引用</td></tr>\n\n</table>\n\n\tstatic yield()\t\t暂停当前正在执行的线程对象，并执行其他线程\n\n\tjoin()\t\t调用这个方法的主线程，会等待加入的子线程完成    例: 其它线程.join();\n\t\t特点：当A线程的执行遇到了B线程的join方法，那么就挂起A线程，直到B线程运行完毕,再继续执行A线程。\n\n\tgetName()            返回线程的名字\n\tsetName(String name) 设置线程对象名\n\tgetId()              返回线程的标识  同一个线程对象的id不同\n\tgetPriority()\t\t返回当前线程对象的优先级   默认线程的优先级是5\n\tsetPriority()\t\t设置线程优先级当前线程对象的优先级   默认线程的优先级是5\n\n\tsetPriority(int newPriority) 设置线程的优先级    虽然设置了线程的优先级，但是具体的实现取决于底层的操作系统的实现\n\t\n\tstatic int MAX_PRIORITY \n\t\t线程可以具有的最高优先级。  max : 10\n\tstatic int MIN_PRIORITY \n\t\t线程可以具有的最低优先级。  min : 1\n\tstatic int NORM_PRIORITY \n\t\t分配给线程的默认优先级。  nor : 5\n\n\twait()\t\t线程进入等待状态，等待被notify，这是对象方法，不是线程方法,要配合同步一起才能使用\n\tnotify()\t唤醒其他的线程，这是一个对象方法，而不是线程方法,要配合同步一起才能使用\n\tnotifyAll()\t唤醒其他的所有线程,这是一个对象方法，而不是线程方法,要配合同步一起才能使用  例:同步锁对象.notifyAll();\n\n\n# 线程同步(synchronized关键字)\n      \n\t线程同步\n\t\t同步就是协同步调，按预定的先后次序进行运行。\n\t\t\t如：你说完，我再说。阻塞式的运行。\n\t\t主要用来解决线程的安全问题\n\t格式：\n\tsynchronized (对象)\n\t{\n\t    // 需要同步的代码；\n\t    // 共享资源的操作\n\t}\n\t原理：\n\t\t同步可以解决安全问题的根本原因就在那个对象上。\n\t\t该对象如同锁的功能。\n\t\t对象的标志位\n\n\t线程同步特点\n\t\t线程同步的前提：\n\t\t\t同步需要两个或者两个以上的线程\n\t\t\t多个线程使用的是同一个锁\n\t线程同步的特点：\n\t\t即使获取了CPU的时间片，没有对象锁也无法执行\n\t\t单线程无需同步\n\t线程同步缺点：\n\t\t当线程相当多时，因为每个线程都会去判断同步上的锁，这是很耗费资源的，无形中会降低程序的运行效率。\n\n\n\n\t同步函数:\n\t\t使得整个函数加锁同步\n\t实现\n\t\t在函数上加上synchronized修饰符即可\n\t\t    如：public synchronized void run(){  }\n\t\n\n\n\t创建锁对象：\n\n\t       如果加锁的代码中访问的是非静态变量，那么优先使用this关键字作为锁对象\n\t\t   如果加锁的代码中访问的是静态变量，那么优先使用所在类的字节码文件对应的Class对象作为锁对象\n\t\t   1. 类名.class        静态属性\n\t\t   2. 对象.getClass()   \n\n\t思考\n\t\t同步函数用的是哪个锁呢？  this\n\t\t同步静态函数用的是哪个锁呢？Class   \n\t\t\t该方法所在的函数中的类的Class对象，类.class\n\n# 多线程间数据通信\n\n\t其实就是多个线程在操作同一个资源,但是操作的动作不同.如果同时操作会出现错乱.\n\n\twait();释放资源，释放锁。\n\tnotify();唤醒资源\n\tnotifyAll();唤醒全部资源\n\n\tsleep():释放资源，不释放锁。\n\n\n\twait,notify,notifyAll都使用在同步中,因为要对持有监视器(锁)的线程操作所以要使用在同步中,因为只有同步才具有锁.\n\n\t为什么这些操作线程的方法要定义Object类中呢?\n\t\t因为这些方法在操作同步中的线程时,都必须要标识它们所操作线程只有的锁.\n\t\t只有同一个锁上的被等待线程,可以被同一个锁上notify唤醒.\n\t\t不可以对不同锁中的线程进行唤醒.\t也就是说,等待和唤醒必须是同一个锁.\n\t\t而锁可以是任意对象,所以可以被任意对象调用的方法定义在Object类中.\n\n\n\n案例: 输入名字,打印名字(两线程同步操作查询数据)\n\n```java\n\tpackage com.tu.mtar;\n\n\t//主线程,调用输入输出线程\n\tpublic class InputOutputDemo {\n\t\tpublic static void main(String[] args) {\n\t\t\tRes r = new Res();\n\t\t\tInput in = new Input(r);// 3.然后可以分配该类的实例，\n\t\t\tOutput out = new Output(r);// 输入与输出需要的是同一个对象r\n\n\t\t\tThread t1 = new Thread(in);// 4.在创建 Thread 时作为一个参数来传递并启动\n\t\t\tThread t2 = new Thread(out);\n\n\t\t\t// 启动线程\n\t\t\tt1.start();\n\t\t\tt2.start();\n\t\t}\n\t}\n\n\tclass Res // 定义一个两个线程需要同时操作的数据\n\t{\n\t\tString name; // 名字 未做封装,为了简化代码\n\t\tString sex; // 性别\n\t\tint index = 1; // 计数当前第几个客户ID\n\t\tboolean flag = false; // 定义一个标记\n\t}\n\n\tclass Input implements Runnable// 1.声明实现 Runnable 接口的类。\n\t{\n\t\tprivate Res r;\n\n\t\tInput(Res r) // 构造函数\n\t\t{\n\t\t\tthis.r = r;\n\t\t}\n\n\t\tpublic void run()// 2.该类然后实现 run 方法。\n\t\t{\n\t\t\tint x = 0;// 用于让线程每次写入的数据不同而定的标记\n\t\t\tfor (int i = 0; i < 100; i++)// 循环写入100次数据\n\t\t\t{\n\t\t\t\tsynchronized (r)// 同步 使用的锁是main函数中传入的与输出线程同一个锁r, 锁也叫监视器\n\t\t\t\t{\n\t\t\t\t\tif (r.flag)// 标记 如果我已经输入过了数据,那么:当前线程等待,并释放锁让被唤醒的线程可以拿到锁进行数据的查询.\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tr.wait();\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t}// (线程等待);线程池中休息,wait()会有(如果当前线程不是此对象监视器的所有者)InterruptedException异常\n\t\t\t\t\tif (x == 0) {\n\t\t\t\t\t\tr.name = \"mike\";\n\t\t\t\t\t\tr.sex = \"man\";\n\t\t\t\t\t\tSystem.out.println(\"我输入了第\" + r.index + \"个客户,名字为:\" + r.name + \"性别为:\" + r.sex + \"的靓仔.\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr.name = \"丽丽\";\n\t\t\t\t\t\tr.sex = \"女女\";\n\t\t\t\t\t\tSystem.out.println(\"我输入了第\" + r.index + \"个客户,名字为:\" + r.name + \"性别为:\" + r.sex + \"的靓女.\");\n\t\t\t\t\t}\n\t\t\t\t\tr.index++;// 只做计数\n\t\t\t\t\tx = (x + 1) % 2;// 为了辨别每次输入的数据不同.也可以使用boolean的方法代替\n\t\t\t\t\tr.flag = true;// 作标记,我已经输入过数据了.\n\t\t\t\t\tr.notify();// 唤醒再等待的最优先的线程, r为锁////notifyAll();全部叫醒线程池中的所有线程\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 输出线程\n\tclass Output implements Runnable {\n\t\tprivate Res r;\n\n\t\tOutput(Res r) {\n\t\t\tthis.r = r;\n\t\t}\n\n\t\tpublic void run() {\n\t\t\tfor (int i = 0; i < 100; i++) {\n\t\t\t\tsynchronized (r)// 同步 使用的锁是main函数中传入的与输入线程同一个锁r.\n\t\t\t\t{\n\t\t\t\t\tif (!r.flag)// 如果我已经查询过 , 当前线程等待,并释放锁\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tr.wait();\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(\"I query the named : \" + r.name + \" , gender:\" + r.sex + \" customers . Id:\" + (r.index - 1));\n\t\t\t\t\tr.flag = false;// 标记已经查询过\n\t\t\t\t\tr.notify();// 唤醒r中等待的线程.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n```\n\n案例: 多线程数据通信之生产者消费者例(大于两线程同步 操作查询数据)\n\n```java\n\tpackage com.tu.mtar;\n\n\t//对于多个生产者和消费者. 为什么要定义while判断标记. 原因:让被唤醒的线程再一次判断标记.\n\t//为什么定义notifyAll,因为需要唤醒对方线程. 因为只用notify,容易出现只唤醒本方线程的情况.导致程序中的所有线程都等待.\n\tpublic class ProducerConsumerDemo // 主线程main分别开启四个线程 两进 两出\n\t{\n\t\tpublic static void main(String[] args) {\n\t\t\tResource r = new Resource();\n\n\t\t\tProducer pro = new Producer(r);// 3. 然后可以分配该类的实例，\n\t\t\tConsumer con = new Consumer(r);\n\n\t\t\tThread t1 = new Thread(pro);// 4 在创建 Thread 时作为一个参数来传递并启动\n\t\t\tThread t2 = new Thread(pro);\n\n\t\t\tThread t3 = new Thread(con);\n\t\t\tThread t4 = new Thread(con);\n\t\t\t// 启动线程.\n\t\t\tt1.start();\n\t\t\tt2.start();\n\n\t\t\tt3.start();\n\t\t\tt4.start();\n\t\t}\n\t}\n\n\t// 将生产线程与消费线程运行方式封装起来.\n\tclass Resource {\n\t\tprivate String name;\n\t\tprivate int count = 1;\n\t\tprivate boolean flag = false;\n\n\t\tpublic synchronized void set(String name) {\n\t\t\t// if \n\t\t\twhile (flag)\n\t\t\t\ttry {\n\t\t\t\t\twait();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t}\n\t\t\tthis.name = name + \"--\" + count++;\n\t\t\tSystem.out.println(Thread.currentThread().getName() + \"...生产者..\" + this.name);\n\t\t\tflag = true;\n\t\t\t// this.notify();\n\t\t\tthis.notifyAll();\n\t\t}\n\n\t\tpublic synchronized void out()// 当消费者方法都是{}里的内容都是需要同步时可以将函数定义为同步,些时使用的锁是this\n\t\t{\n\t\t\t// if \n\t\t\twhile (!flag)\n\t\t\t\t// 不断循环判断本线程是否将生产出来的东西消费了.当出现多个相同线程时.因为有可以再次出现消费线程.\n\t\t\t\ttry {\n\t\t\t\t\twait();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t}// 如果已经消费或是又是消费线程(第二个消费线程),那么消费线程等待,并释放锁.\n\t\t\tSystem.out.println(Thread.currentThread().getName() + \"...消费者....\" + this.name);\n\t\t\tflag = false;// 更改标记,记录已经消费过.\n\t\t\t// this.notify();//当只有两线程时\n\t\t\tthis.notifyAll();// 多个线程最好是使用些方法.要不然会出现全部线程等待的问题\n\t\t}\n\t}\n\n\t// 生产者线程\n\tclass Producer implements Runnable// 1.声明实现 Runnable 接口的类\n\t{\n\t\tprivate Resource res;\n\n\t\tProducer(Resource res) {\n\t\t\tthis.res = res;\n\t\t}\n\n\t\tpublic void run()// 2. 该类实现 run 方法。\n\t\t{\n\t\t\twhile (true)// 循环生产,,,,注,如果使用的是控制台CMD窗口,可以使用Ctrl+C键停止.\n\t\t\t{\n\t\t\t\tres.set(\"+商品+\");// 将需要运行的线程内容封装起来\n\t\t\t}\n\t\t}\n\t}\n\n\t// 消费者线程\n\tclass Consumer implements Runnable {\n\t\tprivate Resource res;\n\n\t\tConsumer(Resource res) {\n\t\t\tthis.res = res;\n\t\t}\n\n\t\tpublic void run() {\n\t\t\twhile (true)// 循环消费,循环次数增加才看得出问题.\n\t\t\t{\n\t\t\t\tres.out();// 将需要运行的线程内容封装起来\n\t\t\t}\n\t\t}\n\t}\n\n```\n\n\n# 线程同步死锁\n\n\t线程同步死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，\n\t\t若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。\n\t\t当多个线程完成功能需要同时获取多个共享资源的时候可能会导致死锁。\n\n\t死锁无法解决，只能避免。\n\t特定的资源分配方式才会导致线程的死锁，所以可以进行资源的分配前的死锁检测来避免死锁的发生。\n\n\n\t预防死锁的算法： 银行家算法。\n\n\t\t银行家算法\n\t\t\t银行家算法是一种最有代表性的避免死锁的算法。在避免死锁方法中允许进程动态地申请资源，\n\t\t\t但系统在进行资源分配之前，应先计算此次分配资源的安全性，若分配不会导致系统进入不安全状态，则分配，否则等待。\n\n\t\t算法原理\n\t\t\t我们可以把操作系统看作是银行家，操作系统管理的资源相当于银行家管理的资金，\n\t\t\t进程向操作系统请求分配资源相当于用户向银行家贷款。 　\n\n\t\t为保证资金的安全,银行家规定: 　　\n\t\t\t(1) 当一个顾客对资金的最大需求量不超过银行家现有的资金时就可接纳该顾客; 　　\n\t\t\t(2) 顾客可以分期贷款,但贷款的总数不能超过最大需求量; 　\n\t\t\t(3) 当银行家现有的资金不能满足顾客尚需的贷款数额时,对顾客的贷款可推迟支付,但总能使顾客在有限的时间里得到贷款; 　　\n\t\t\t(4) 当顾客得到所需的全部资金后,一定能在有限的时间里归还所有的资金. 　　\n\t\t操作系统按照银行家制定的规则为进程分配资源，当进程首次申请资源时，要测试该进程对资源的最大需求量，\n\t\t如果系统现存的资源可以满足它的最大需求量则按当前的申请量分配资源，否则就推迟分配。当进程在执行中继续申请资源时，\n\t\t先测试该进程本次申请的资源数是否超过了该资源所剩余的总量。若超过则拒绝分配资源，\n\t\t若能满足则按当前的申请量分配资源，否则也要推迟分配。 \n\n死锁案例\n\n```java\n\tpackage com.tu.mtar;\n\n\tpublic class DeadLockDemo {\n\t\tpublic static void main(String[] args) {\n\t\t\t//如果没有出现死锁,请多运行几次试试.\n\t\t\tDeadLock d = new DeadLock();\n\n\t\t\tThread th1 = new Thread(d, \"张三\");\n\t\t\tThread th2 = new Thread(d, \"李四\");\n\n\t\t\tth1.start();\n\t\t\tth2.start();\n\t\t\t\n\t\t\tSystem.out.println(\"finish.............\");\n\t\t}\n\t}\n\n\t// 出现死锁案例 死锁无法解决，只能避免。\n\tclass DeadLock implements Runnable {\n\t\t// 定义资源\n\t\tString controller = \"遥控器\";\n\t\tString battery = \"2节7号电池\";\n\n\t\tpublic void run() {\n\t\t\t// 需要抢资源\n\t\t\tif (Thread.currentThread().getName().equals(\"张三\")) {\n\t\t\t\tsynchronized (controller) {// 同步嵌套\n\t\t\t\t\tSystem.out.println(\"张三拿着遥控器，准备获取电池\");\n\n\t\t\t\t\tsynchronized (battery) {// 同步嵌套\n\n\t\t\t\t\t\tSystem.out.println(\"张三拿着遥控器，拿到电池\");\n\t\t\t\t\t\tSystem.out.println(\"张三看电视\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsynchronized (battery) {// 同步嵌套\n\n\t\t\t\t\tSystem.out.println(\"李四拿着电池，准备获取遥控器\");\n\n\t\t\t\t\tsynchronized (controller) { // 同步嵌套\n\t\t\t\t\t\tSystem.out.println(\"李四拿着电池，拿到遥控器\");\n\t\t\t\t\t\tSystem.out.println(\"李四看电视\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n```\n\n\n# Demo下载\n\n[本文案例Demo](/res/file/blog/2014/12/14/Java_Thread/MyThreadAndRunnable.rar)\n\n\n\n\t\n","source":"_posts/2014-12-14-Java_Thread.md","raw":"---\nlayout : post\ntitle : \"Java线程\"\ncategory : Java\nduoshuo: true\ndate : 2014-12-14\ntags : [Thread , Runnable ,多线程,死锁,synchronized ]\nSyntaxHihglighter: true\nshTheme: shThemeMidnight # shThemeDefault  shThemeDjango  shThemeEclipse  shThemeEmacs  shThemeFadeToGrey  shThemeMidnight  shThemeRDark\n---\n\n目录\n\t\n\t线程简介\n\tJava中的线程实现方式\n\tThread常用方法\n\t线程同步(synchronized关键字)\n\t多线程间数据通信\n\t线程同步死锁\n\n\n<!-- more -->\n\n# 线程简介\n\n\t程序(Program)：\n\t\t计算机指令的集合，它以文件的形式存储在磁盘上。\n\t进程(Process)：\n\t\t一个程序在其自身的地址空间中的一次执行活动。\n\t\t资源申请、调度和独立运行的单位，因此，它使用系统中的运行资源；\n\t\t而程序不能申请系统资源，不能被系统调度，也不能作为独立运行的单位，因此，它不占用系统的运行资源。\n\t线程(Thread)：\n\t\t是进程中的一个单一的连续控制流程。一个进程可以拥有多个线程。\n\t\t线程又称为轻量级进程，它和进程一样拥有独立的执行控制，由操作系统负责调度，\n\t\t区别在于线程没有独立的存储空间，而是和所属进程中的其他线程共享一个存储空间，这使得线程间的通信远较进程简单。\n\t\n\t什么是线程： \n\t\t线程是一个应用程序执行时候的多条路径。\n\n\t线程执行的原理：\n\t      在物理上只有一个CPU的情况下，JVM是采用抢占CPU资源，给不同的线程划分指定执行时间片的方式来实现。\n\n\tjava中隐含的两个线程：\n\t\t主线程\n\t\t\t每个java应用程序都至少有一个线程。这就是所为的主线程。它由JVM创建并调用java应用程序的main方法。\n\t\t垃圾回收线程(后台线程)\n\t\t\tJVM还通常会创建一些其他的线程，不过这些线程对我们来说是不可见的.\n\t\t\t\t比如，用于自动垃圾收集的线程、对象终止或者其他的JVM处理任务相关的线程。\n\n\n# Java中的线程实现方式\n\n\tThread ：线程\n\t\t  所在包: java.lang.*\n\n\t多线程实现方式: \n\t 多线程的方式一:(继承)见下面例:\n\t\t1.1. 将类声明为 Thread 的子类。(继承)\n\t\t1.2. 该子类应重写 Thread 类的 run 方法。\n\t\t1.3. 接下来可以分配并启动该子类的实例。\n\n\t多线程的方式二:(接口)见下面例:\n\t\t2.1. 声明实现 Runnable 接口的类。\n\t\t2.2. 该子类应重写 Thread 类的 run 方法。\n\t\t2.3. 然后可以分配该类的实例，\n\t\t2.4. 在创建 Thread 时作为一个参数来传递并启动\n\n\t二种方式的区别:\n\t\t使用Runnable接口\n\t\t\t可以将CPU，代码和数据分开，形成清晰的模型；\n\t\t\t更加体现了面向对象的编程思想，线程运行的代码也是对象(Runnable)\n\t\t\t还可以从其他类继承；\n\t\t\t保持程序风格的一致性。\n\t\t直接继承Thread类\n\t\t\t不能再继承其他类；\n\t\t\t编写简单，可以直接操纵线程.\n\n\n\t 线程的使用细节：\n\t \n\t\t1. 线程的启动使用父类的start()方法\n\t\t2. 如果线程对象直接调用run()，那么JVN不会当作线程来运行，会认为是普通的方法调用\n\t\t3. 匿名内部类的线程实现方式 \n\t\t4. 可以直接创建Thread类的对象并启动该线程，但是如果没有重写run()，什么也不执行。\n\t\t5. 同一个线程的启动只能有一次，否则抛出异常 (IllegalThreadStateException)\n\t\t\tException in thread \"main\" thread1: i=1java.lang.IllegalThreadStateException\n\n\t守护线程(后台线程)\n\t\tsetDaemon (boolean on)\n\t\t用法:\n\t\t\t线程对象.setDaemon(true)\n\t\t\t在启动线程之前调用\n\t\t特点：\n\t\t和其他线程一起等待CPU执行\n\t\t当其他线程都结束后，后台线程默认结束\n\t\t查看API文档\n\t\t当正在运行的线程都是守护线程时，Java 虚拟机退出\n\t\t该方法必须在启动线程前调用\n\n\t线程的生命周期(lifecycle)\n\n![线程的生命周期(lifecycle)](/res/img/blog/2014/12/14/Java_Thread/Thread_lifecycle.png)\n\n\t\n\n```java\n\tpackage com.tu.mtar;\n\n\tpublic class ThreadAndRunnableDemo {\n\t\t// 主函数\n\t\tpublic static void main(String[] args) {\n\t\t\t// 方式一\n\t\t\tMyThread mt = new MyThread(); // 1.3.接下来可以分配并启动该子类的实例。\n\t\t\t// mt.setDaemon(true);//设置成后台线程必须在开户线程之前\n\t\t\tmt.start(); // 1.4.并调用实例的start()方法,start方法会调用run方法,如果直接调用run方法将不能实现多线程.\n\n\t\t\t// 方式二\n\t\t\tMyRunnable mr = new MyRunnable(); // 2.3. 然后可以分配该类的实例，\n\t\t\tnew Thread(mr).start(); // 2.4 在创建 Thread 时作为一个参数来传递并启动\n\n\t\t\tfor (int i = 0; i < 100; i++) {\n\t\t\t\tSystem.out.println(\"main -- i: \" + i);\n\t\t\t}\n\n\t\t\tro();// Override........\n\n\t\t}\n\n\t\tprotected static void ro() {\n\t\t\t// 当执行的线程的时候如果同时指定了Runnable的实现类和重写了Thread的run()，\n\t\t\t// 那么一定执行重写的run方法，而不是实现的run();\n\n\t\t\tnew Thread(new Runnable() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\tSystem.out.println(\"Runnable........\");\n\t\t\t\t}\n\t\t\t}) {\n\t\t\t\tpublic void run() {\n\t\t\t\t\tSystem.out.println(\"Override........\");\n\t\t\t\t}\n\t\t\t}.start();\n\t\t}\n\t}\n\n\t// 方式一\n\tclass MyThread extends Thread // 1.1.将类声明为 Thread 的子类。(继承)\n\t{\n\t\tpublic void run() // 1.2.该子类应重写 Thread 类的 run 方法。\n\t\t{\n\t\t\tfor (int i = 0; i < 100; i++) {\n\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \"==>MyThread:   i :\" + i);\n\t\t\t}\n\t\t}\n\t}\n\n\t// 方式 二\n\tclass MyRunnable implements Runnable// 2.1. 声明实现 Runnable 接口的类。\n\t{\n\t\tpublic void run() // 2.2. 该类然后实现 run 方法。\n\t\t{\n\t\t\tfor (int i = 0; i < 100; i++) {\n\t\t\t\tSystem.out.println(Thread.currentThread().getName() + \"==>MyRunnable  -- i: \" + i);\n\t\t\t}\n\t\t}\n\t}\n\n```\n\n\n\n# Thread常用方法\n\n<table border=\"1px\" cellpadding=\"5px\"  cellspacing=\"1px\" bgcolor=\"\">\n<tr><td><B>类别</B></td><td ><B>方法签名</B></td><td><B>简介</B></td></tr>\n<tr><td rowspan=\"4\">线程的创建</td><td>Thread()</td>\t  <td></td></tr>\n<tr>\t\t\t\t   <td>Thread(String name)</td><td></td></tr>\n<tr>\t\t\t\t   <td>Thread(Runnable tagrget)</td><td></td></tr>\n<tr>\t\t\t\t   <td>Thread(Runnable target,String name)</td><td></td></tr>\n<tr><td rowspan=\"7\">线程的方法</td><td>void start()</td><td>启动线程</td></tr>\n<tr>\t\t\t\t   <td>static void sleep(long millis)</td><td rowspan=\"2\">线程休眠</td></tr>\n<tr>\t\t\t\t   <td>static void sleep(long millis , int nanos)</td></tr>\n<tr>\t\t\t\t   <td>void join()</td><td rowspan=\"3\">使其他线程等待当前线程终止</td></tr>\n<tr>\t\t\t\t   <td>void join(long millis)</td></tr>\n<tr>\t\t\t\t   <td>void join(long missis,int nanos)</td></tr>\n<tr>\t\t\t\t   <td>static void yield()</td><td>当前运行线程释放处理器资源</td></tr>\n<tr><td>获取线程引用</td><td >static Thread currentThread()</td><td>返回当前运行的线程引用</td></tr>\n\n</table>\n\n\tstatic yield()\t\t暂停当前正在执行的线程对象，并执行其他线程\n\n\tjoin()\t\t调用这个方法的主线程，会等待加入的子线程完成    例: 其它线程.join();\n\t\t特点：当A线程的执行遇到了B线程的join方法，那么就挂起A线程，直到B线程运行完毕,再继续执行A线程。\n\n\tgetName()            返回线程的名字\n\tsetName(String name) 设置线程对象名\n\tgetId()              返回线程的标识  同一个线程对象的id不同\n\tgetPriority()\t\t返回当前线程对象的优先级   默认线程的优先级是5\n\tsetPriority()\t\t设置线程优先级当前线程对象的优先级   默认线程的优先级是5\n\n\tsetPriority(int newPriority) 设置线程的优先级    虽然设置了线程的优先级，但是具体的实现取决于底层的操作系统的实现\n\t\n\tstatic int MAX_PRIORITY \n\t\t线程可以具有的最高优先级。  max : 10\n\tstatic int MIN_PRIORITY \n\t\t线程可以具有的最低优先级。  min : 1\n\tstatic int NORM_PRIORITY \n\t\t分配给线程的默认优先级。  nor : 5\n\n\twait()\t\t线程进入等待状态，等待被notify，这是对象方法，不是线程方法,要配合同步一起才能使用\n\tnotify()\t唤醒其他的线程，这是一个对象方法，而不是线程方法,要配合同步一起才能使用\n\tnotifyAll()\t唤醒其他的所有线程,这是一个对象方法，而不是线程方法,要配合同步一起才能使用  例:同步锁对象.notifyAll();\n\n\n# 线程同步(synchronized关键字)\n      \n\t线程同步\n\t\t同步就是协同步调，按预定的先后次序进行运行。\n\t\t\t如：你说完，我再说。阻塞式的运行。\n\t\t主要用来解决线程的安全问题\n\t格式：\n\tsynchronized (对象)\n\t{\n\t    // 需要同步的代码；\n\t    // 共享资源的操作\n\t}\n\t原理：\n\t\t同步可以解决安全问题的根本原因就在那个对象上。\n\t\t该对象如同锁的功能。\n\t\t对象的标志位\n\n\t线程同步特点\n\t\t线程同步的前提：\n\t\t\t同步需要两个或者两个以上的线程\n\t\t\t多个线程使用的是同一个锁\n\t线程同步的特点：\n\t\t即使获取了CPU的时间片，没有对象锁也无法执行\n\t\t单线程无需同步\n\t线程同步缺点：\n\t\t当线程相当多时，因为每个线程都会去判断同步上的锁，这是很耗费资源的，无形中会降低程序的运行效率。\n\n\n\n\t同步函数:\n\t\t使得整个函数加锁同步\n\t实现\n\t\t在函数上加上synchronized修饰符即可\n\t\t    如：public synchronized void run(){  }\n\t\n\n\n\t创建锁对象：\n\n\t       如果加锁的代码中访问的是非静态变量，那么优先使用this关键字作为锁对象\n\t\t   如果加锁的代码中访问的是静态变量，那么优先使用所在类的字节码文件对应的Class对象作为锁对象\n\t\t   1. 类名.class        静态属性\n\t\t   2. 对象.getClass()   \n\n\t思考\n\t\t同步函数用的是哪个锁呢？  this\n\t\t同步静态函数用的是哪个锁呢？Class   \n\t\t\t该方法所在的函数中的类的Class对象，类.class\n\n# 多线程间数据通信\n\n\t其实就是多个线程在操作同一个资源,但是操作的动作不同.如果同时操作会出现错乱.\n\n\twait();释放资源，释放锁。\n\tnotify();唤醒资源\n\tnotifyAll();唤醒全部资源\n\n\tsleep():释放资源，不释放锁。\n\n\n\twait,notify,notifyAll都使用在同步中,因为要对持有监视器(锁)的线程操作所以要使用在同步中,因为只有同步才具有锁.\n\n\t为什么这些操作线程的方法要定义Object类中呢?\n\t\t因为这些方法在操作同步中的线程时,都必须要标识它们所操作线程只有的锁.\n\t\t只有同一个锁上的被等待线程,可以被同一个锁上notify唤醒.\n\t\t不可以对不同锁中的线程进行唤醒.\t也就是说,等待和唤醒必须是同一个锁.\n\t\t而锁可以是任意对象,所以可以被任意对象调用的方法定义在Object类中.\n\n\n\n案例: 输入名字,打印名字(两线程同步操作查询数据)\n\n```java\n\tpackage com.tu.mtar;\n\n\t//主线程,调用输入输出线程\n\tpublic class InputOutputDemo {\n\t\tpublic static void main(String[] args) {\n\t\t\tRes r = new Res();\n\t\t\tInput in = new Input(r);// 3.然后可以分配该类的实例，\n\t\t\tOutput out = new Output(r);// 输入与输出需要的是同一个对象r\n\n\t\t\tThread t1 = new Thread(in);// 4.在创建 Thread 时作为一个参数来传递并启动\n\t\t\tThread t2 = new Thread(out);\n\n\t\t\t// 启动线程\n\t\t\tt1.start();\n\t\t\tt2.start();\n\t\t}\n\t}\n\n\tclass Res // 定义一个两个线程需要同时操作的数据\n\t{\n\t\tString name; // 名字 未做封装,为了简化代码\n\t\tString sex; // 性别\n\t\tint index = 1; // 计数当前第几个客户ID\n\t\tboolean flag = false; // 定义一个标记\n\t}\n\n\tclass Input implements Runnable// 1.声明实现 Runnable 接口的类。\n\t{\n\t\tprivate Res r;\n\n\t\tInput(Res r) // 构造函数\n\t\t{\n\t\t\tthis.r = r;\n\t\t}\n\n\t\tpublic void run()// 2.该类然后实现 run 方法。\n\t\t{\n\t\t\tint x = 0;// 用于让线程每次写入的数据不同而定的标记\n\t\t\tfor (int i = 0; i < 100; i++)// 循环写入100次数据\n\t\t\t{\n\t\t\t\tsynchronized (r)// 同步 使用的锁是main函数中传入的与输出线程同一个锁r, 锁也叫监视器\n\t\t\t\t{\n\t\t\t\t\tif (r.flag)// 标记 如果我已经输入过了数据,那么:当前线程等待,并释放锁让被唤醒的线程可以拿到锁进行数据的查询.\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tr.wait();\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t}// (线程等待);线程池中休息,wait()会有(如果当前线程不是此对象监视器的所有者)InterruptedException异常\n\t\t\t\t\tif (x == 0) {\n\t\t\t\t\t\tr.name = \"mike\";\n\t\t\t\t\t\tr.sex = \"man\";\n\t\t\t\t\t\tSystem.out.println(\"我输入了第\" + r.index + \"个客户,名字为:\" + r.name + \"性别为:\" + r.sex + \"的靓仔.\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr.name = \"丽丽\";\n\t\t\t\t\t\tr.sex = \"女女\";\n\t\t\t\t\t\tSystem.out.println(\"我输入了第\" + r.index + \"个客户,名字为:\" + r.name + \"性别为:\" + r.sex + \"的靓女.\");\n\t\t\t\t\t}\n\t\t\t\t\tr.index++;// 只做计数\n\t\t\t\t\tx = (x + 1) % 2;// 为了辨别每次输入的数据不同.也可以使用boolean的方法代替\n\t\t\t\t\tr.flag = true;// 作标记,我已经输入过数据了.\n\t\t\t\t\tr.notify();// 唤醒再等待的最优先的线程, r为锁////notifyAll();全部叫醒线程池中的所有线程\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 输出线程\n\tclass Output implements Runnable {\n\t\tprivate Res r;\n\n\t\tOutput(Res r) {\n\t\t\tthis.r = r;\n\t\t}\n\n\t\tpublic void run() {\n\t\t\tfor (int i = 0; i < 100; i++) {\n\t\t\t\tsynchronized (r)// 同步 使用的锁是main函数中传入的与输入线程同一个锁r.\n\t\t\t\t{\n\t\t\t\t\tif (!r.flag)// 如果我已经查询过 , 当前线程等待,并释放锁\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tr.wait();\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(\"I query the named : \" + r.name + \" , gender:\" + r.sex + \" customers . Id:\" + (r.index - 1));\n\t\t\t\t\tr.flag = false;// 标记已经查询过\n\t\t\t\t\tr.notify();// 唤醒r中等待的线程.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n```\n\n案例: 多线程数据通信之生产者消费者例(大于两线程同步 操作查询数据)\n\n```java\n\tpackage com.tu.mtar;\n\n\t//对于多个生产者和消费者. 为什么要定义while判断标记. 原因:让被唤醒的线程再一次判断标记.\n\t//为什么定义notifyAll,因为需要唤醒对方线程. 因为只用notify,容易出现只唤醒本方线程的情况.导致程序中的所有线程都等待.\n\tpublic class ProducerConsumerDemo // 主线程main分别开启四个线程 两进 两出\n\t{\n\t\tpublic static void main(String[] args) {\n\t\t\tResource r = new Resource();\n\n\t\t\tProducer pro = new Producer(r);// 3. 然后可以分配该类的实例，\n\t\t\tConsumer con = new Consumer(r);\n\n\t\t\tThread t1 = new Thread(pro);// 4 在创建 Thread 时作为一个参数来传递并启动\n\t\t\tThread t2 = new Thread(pro);\n\n\t\t\tThread t3 = new Thread(con);\n\t\t\tThread t4 = new Thread(con);\n\t\t\t// 启动线程.\n\t\t\tt1.start();\n\t\t\tt2.start();\n\n\t\t\tt3.start();\n\t\t\tt4.start();\n\t\t}\n\t}\n\n\t// 将生产线程与消费线程运行方式封装起来.\n\tclass Resource {\n\t\tprivate String name;\n\t\tprivate int count = 1;\n\t\tprivate boolean flag = false;\n\n\t\tpublic synchronized void set(String name) {\n\t\t\t// if \n\t\t\twhile (flag)\n\t\t\t\ttry {\n\t\t\t\t\twait();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t}\n\t\t\tthis.name = name + \"--\" + count++;\n\t\t\tSystem.out.println(Thread.currentThread().getName() + \"...生产者..\" + this.name);\n\t\t\tflag = true;\n\t\t\t// this.notify();\n\t\t\tthis.notifyAll();\n\t\t}\n\n\t\tpublic synchronized void out()// 当消费者方法都是{}里的内容都是需要同步时可以将函数定义为同步,些时使用的锁是this\n\t\t{\n\t\t\t// if \n\t\t\twhile (!flag)\n\t\t\t\t// 不断循环判断本线程是否将生产出来的东西消费了.当出现多个相同线程时.因为有可以再次出现消费线程.\n\t\t\t\ttry {\n\t\t\t\t\twait();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t}// 如果已经消费或是又是消费线程(第二个消费线程),那么消费线程等待,并释放锁.\n\t\t\tSystem.out.println(Thread.currentThread().getName() + \"...消费者....\" + this.name);\n\t\t\tflag = false;// 更改标记,记录已经消费过.\n\t\t\t// this.notify();//当只有两线程时\n\t\t\tthis.notifyAll();// 多个线程最好是使用些方法.要不然会出现全部线程等待的问题\n\t\t}\n\t}\n\n\t// 生产者线程\n\tclass Producer implements Runnable// 1.声明实现 Runnable 接口的类\n\t{\n\t\tprivate Resource res;\n\n\t\tProducer(Resource res) {\n\t\t\tthis.res = res;\n\t\t}\n\n\t\tpublic void run()// 2. 该类实现 run 方法。\n\t\t{\n\t\t\twhile (true)// 循环生产,,,,注,如果使用的是控制台CMD窗口,可以使用Ctrl+C键停止.\n\t\t\t{\n\t\t\t\tres.set(\"+商品+\");// 将需要运行的线程内容封装起来\n\t\t\t}\n\t\t}\n\t}\n\n\t// 消费者线程\n\tclass Consumer implements Runnable {\n\t\tprivate Resource res;\n\n\t\tConsumer(Resource res) {\n\t\t\tthis.res = res;\n\t\t}\n\n\t\tpublic void run() {\n\t\t\twhile (true)// 循环消费,循环次数增加才看得出问题.\n\t\t\t{\n\t\t\t\tres.out();// 将需要运行的线程内容封装起来\n\t\t\t}\n\t\t}\n\t}\n\n```\n\n\n# 线程同步死锁\n\n\t线程同步死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，\n\t\t若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。\n\t\t当多个线程完成功能需要同时获取多个共享资源的时候可能会导致死锁。\n\n\t死锁无法解决，只能避免。\n\t特定的资源分配方式才会导致线程的死锁，所以可以进行资源的分配前的死锁检测来避免死锁的发生。\n\n\n\t预防死锁的算法： 银行家算法。\n\n\t\t银行家算法\n\t\t\t银行家算法是一种最有代表性的避免死锁的算法。在避免死锁方法中允许进程动态地申请资源，\n\t\t\t但系统在进行资源分配之前，应先计算此次分配资源的安全性，若分配不会导致系统进入不安全状态，则分配，否则等待。\n\n\t\t算法原理\n\t\t\t我们可以把操作系统看作是银行家，操作系统管理的资源相当于银行家管理的资金，\n\t\t\t进程向操作系统请求分配资源相当于用户向银行家贷款。 　\n\n\t\t为保证资金的安全,银行家规定: 　　\n\t\t\t(1) 当一个顾客对资金的最大需求量不超过银行家现有的资金时就可接纳该顾客; 　　\n\t\t\t(2) 顾客可以分期贷款,但贷款的总数不能超过最大需求量; 　\n\t\t\t(3) 当银行家现有的资金不能满足顾客尚需的贷款数额时,对顾客的贷款可推迟支付,但总能使顾客在有限的时间里得到贷款; 　　\n\t\t\t(4) 当顾客得到所需的全部资金后,一定能在有限的时间里归还所有的资金. 　　\n\t\t操作系统按照银行家制定的规则为进程分配资源，当进程首次申请资源时，要测试该进程对资源的最大需求量，\n\t\t如果系统现存的资源可以满足它的最大需求量则按当前的申请量分配资源，否则就推迟分配。当进程在执行中继续申请资源时，\n\t\t先测试该进程本次申请的资源数是否超过了该资源所剩余的总量。若超过则拒绝分配资源，\n\t\t若能满足则按当前的申请量分配资源，否则也要推迟分配。 \n\n死锁案例\n\n```java\n\tpackage com.tu.mtar;\n\n\tpublic class DeadLockDemo {\n\t\tpublic static void main(String[] args) {\n\t\t\t//如果没有出现死锁,请多运行几次试试.\n\t\t\tDeadLock d = new DeadLock();\n\n\t\t\tThread th1 = new Thread(d, \"张三\");\n\t\t\tThread th2 = new Thread(d, \"李四\");\n\n\t\t\tth1.start();\n\t\t\tth2.start();\n\t\t\t\n\t\t\tSystem.out.println(\"finish.............\");\n\t\t}\n\t}\n\n\t// 出现死锁案例 死锁无法解决，只能避免。\n\tclass DeadLock implements Runnable {\n\t\t// 定义资源\n\t\tString controller = \"遥控器\";\n\t\tString battery = \"2节7号电池\";\n\n\t\tpublic void run() {\n\t\t\t// 需要抢资源\n\t\t\tif (Thread.currentThread().getName().equals(\"张三\")) {\n\t\t\t\tsynchronized (controller) {// 同步嵌套\n\t\t\t\t\tSystem.out.println(\"张三拿着遥控器，准备获取电池\");\n\n\t\t\t\t\tsynchronized (battery) {// 同步嵌套\n\n\t\t\t\t\t\tSystem.out.println(\"张三拿着遥控器，拿到电池\");\n\t\t\t\t\t\tSystem.out.println(\"张三看电视\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsynchronized (battery) {// 同步嵌套\n\n\t\t\t\t\tSystem.out.println(\"李四拿着电池，准备获取遥控器\");\n\n\t\t\t\t\tsynchronized (controller) { // 同步嵌套\n\t\t\t\t\t\tSystem.out.println(\"李四拿着电池，拿到遥控器\");\n\t\t\t\t\t\tSystem.out.println(\"李四看电视\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n```\n\n\n# Demo下载\n\n[本文案例Demo](/res/file/blog/2014/12/14/Java_Thread/MyThreadAndRunnable.rar)\n\n\n\n\t\n","slug":"Java_Thread","published":1,"updated":"2016-04-27T03:19:40.938Z","comments":1,"photos":[],"link":"","_id":"cinu3etyg001hxoj0oxnd30hv","content":"<p>目录</p>\n<pre><code>线程简介\nJava中的线程实现方式\nThread常用方法\n线程同步(synchronized关键字)\n多线程间数据通信\n线程同步死锁\n</code></pre><a id=\"more\"></a>\n<h1 id=\"线程简介\"><a href=\"#线程简介\" class=\"headerlink\" title=\"线程简介\"></a>线程简介</h1><pre><code>程序(Program)：\n    计算机指令的集合，它以文件的形式存储在磁盘上。\n进程(Process)：\n    一个程序在其自身的地址空间中的一次执行活动。\n    资源申请、调度和独立运行的单位，因此，它使用系统中的运行资源；\n    而程序不能申请系统资源，不能被系统调度，也不能作为独立运行的单位，因此，它不占用系统的运行资源。\n线程(Thread)：\n    是进程中的一个单一的连续控制流程。一个进程可以拥有多个线程。\n    线程又称为轻量级进程，它和进程一样拥有独立的执行控制，由操作系统负责调度，\n    区别在于线程没有独立的存储空间，而是和所属进程中的其他线程共享一个存储空间，这使得线程间的通信远较进程简单。\n\n什么是线程： \n    线程是一个应用程序执行时候的多条路径。\n\n线程执行的原理：\n      在物理上只有一个CPU的情况下，JVM是采用抢占CPU资源，给不同的线程划分指定执行时间片的方式来实现。\n\njava中隐含的两个线程：\n    主线程\n        每个java应用程序都至少有一个线程。这就是所为的主线程。它由JVM创建并调用java应用程序的main方法。\n    垃圾回收线程(后台线程)\n        JVM还通常会创建一些其他的线程，不过这些线程对我们来说是不可见的.\n            比如，用于自动垃圾收集的线程、对象终止或者其他的JVM处理任务相关的线程。\n</code></pre><h1 id=\"Java中的线程实现方式\"><a href=\"#Java中的线程实现方式\" class=\"headerlink\" title=\"Java中的线程实现方式\"></a>Java中的线程实现方式</h1><pre><code>Thread ：线程\n      所在包: java.lang.*\n\n多线程实现方式: \n 多线程的方式一:(继承)见下面例:\n    1.1. 将类声明为 Thread 的子类。(继承)\n    1.2. 该子类应重写 Thread 类的 run 方法。\n    1.3. 接下来可以分配并启动该子类的实例。\n\n多线程的方式二:(接口)见下面例:\n    2.1. 声明实现 Runnable 接口的类。\n    2.2. 该子类应重写 Thread 类的 run 方法。\n    2.3. 然后可以分配该类的实例，\n    2.4. 在创建 Thread 时作为一个参数来传递并启动\n\n二种方式的区别:\n    使用Runnable接口\n        可以将CPU，代码和数据分开，形成清晰的模型；\n        更加体现了面向对象的编程思想，线程运行的代码也是对象(Runnable)\n        还可以从其他类继承；\n        保持程序风格的一致性。\n    直接继承Thread类\n        不能再继承其他类；\n        编写简单，可以直接操纵线程.\n\n\n 线程的使用细节：\n\n    1. 线程的启动使用父类的start()方法\n    2. 如果线程对象直接调用run()，那么JVN不会当作线程来运行，会认为是普通的方法调用\n    3. 匿名内部类的线程实现方式 \n    4. 可以直接创建Thread类的对象并启动该线程，但是如果没有重写run()，什么也不执行。\n    5. 同一个线程的启动只能有一次，否则抛出异常 (IllegalThreadStateException)\n        Exception in thread &quot;main&quot; thread1: i=1java.lang.IllegalThreadStateException\n\n守护线程(后台线程)\n    setDaemon (boolean on)\n    用法:\n        线程对象.setDaemon(true)\n        在启动线程之前调用\n    特点：\n    和其他线程一起等待CPU执行\n    当其他线程都结束后，后台线程默认结束\n    查看API文档\n    当正在运行的线程都是守护线程时，Java 虚拟机退出\n    该方法必须在启动线程前调用\n\n线程的生命周期(lifecycle)\n</code></pre><p><img src=\"/res/img/blog/2014/12/14/Java_Thread/Thread_lifecycle.png\" alt=\"线程的生命周期(lifecycle)\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.mtar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadAndRunnableDemo</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 主函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 方式一</span></span><br><span class=\"line\">\t\tMyThread mt = <span class=\"keyword\">new</span> MyThread(); <span class=\"comment\">// 1.3.接下来可以分配并启动该子类的实例。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// mt.setDaemon(true);//设置成后台线程必须在开户线程之前</span></span><br><span class=\"line\">\t\tmt.start(); <span class=\"comment\">// 1.4.并调用实例的start()方法,start方法会调用run方法,如果直接调用run方法将不能实现多线程.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 方式二</span></span><br><span class=\"line\">\t\tMyRunnable mr = <span class=\"keyword\">new</span> MyRunnable(); <span class=\"comment\">// 2.3. 然后可以分配该类的实例，</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(mr).start(); <span class=\"comment\">// 2.4 在创建 Thread 时作为一个参数来传递并启动</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"main -- i: \"</span> + i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tro();<span class=\"comment\">// Override........</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ro</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 当执行的线程的时候如果同时指定了Runnable的实现类和重写了Thread的run()，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 那么一定执行重写的run方法，而不是实现的run();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"Runnable........\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"Override........\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式一</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> // 1.1.将类声明为 <span class=\"title\">Thread</span> 的子类。(继承)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"comment\">// 1.2.该子类应重写 Thread 类的 run 方法。</span></span><br><span class=\"line\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\"==&gt;MyThread:   i :\"</span> + i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式 二</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span>// 2.1. 声明实现 <span class=\"title\">Runnable</span> 接口的类。</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"comment\">// 2.2. 该类然后实现 run 方法。</span></span><br><span class=\"line\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\"==&gt;MyRunnable  -- i: \"</span> + i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Thread常用方法\"><a href=\"#Thread常用方法\" class=\"headerlink\" title=\"Thread常用方法\"></a>Thread常用方法</h1><table border=\"1px\" cellpadding=\"5px\" cellspacing=\"1px\" bgcolor=\"\"><br><tr><td><b>类别</b></td><td><b>方法签名</b></td><td><b>简介</b></td></tr><br><tr><td rowspan=\"4\">线程的创建</td><td>Thread()</td>      <td></td></tr><br><tr>                   <td>Thread(String name)</td><td></td></tr><br><tr>                   <td>Thread(Runnable tagrget)</td><td></td></tr><br><tr>                   <td>Thread(Runnable target,String name)</td><td></td></tr><br><tr><td rowspan=\"7\">线程的方法</td><td>void start()</td><td>启动线程</td></tr><br><tr>                   <td>static void sleep(long millis)</td><td rowspan=\"2\">线程休眠</td></tr><br><tr>                   <td>static void sleep(long millis , int nanos)</td></tr><br><tr>                   <td>void join()</td><td rowspan=\"3\">使其他线程等待当前线程终止</td></tr><br><tr>                   <td>void join(long millis)</td></tr><br><tr>                   <td>void join(long missis,int nanos)</td></tr><br><tr>                   <td>static void yield()</td><td>当前运行线程释放处理器资源</td></tr><br><tr><td>获取线程引用</td><td>static Thread currentThread()</td><td>返回当前运行的线程引用</td></tr><br><br></table>\n\n<pre><code>static yield()        暂停当前正在执行的线程对象，并执行其他线程\n\njoin()        调用这个方法的主线程，会等待加入的子线程完成    例: 其它线程.join();\n    特点：当A线程的执行遇到了B线程的join方法，那么就挂起A线程，直到B线程运行完毕,再继续执行A线程。\n\ngetName()            返回线程的名字\nsetName(String name) 设置线程对象名\ngetId()              返回线程的标识  同一个线程对象的id不同\ngetPriority()        返回当前线程对象的优先级   默认线程的优先级是5\nsetPriority()        设置线程优先级当前线程对象的优先级   默认线程的优先级是5\n\nsetPriority(int newPriority) 设置线程的优先级    虽然设置了线程的优先级，但是具体的实现取决于底层的操作系统的实现\n\nstatic int MAX_PRIORITY \n    线程可以具有的最高优先级。  max : 10\nstatic int MIN_PRIORITY \n    线程可以具有的最低优先级。  min : 1\nstatic int NORM_PRIORITY \n    分配给线程的默认优先级。  nor : 5\n\nwait()        线程进入等待状态，等待被notify，这是对象方法，不是线程方法,要配合同步一起才能使用\nnotify()    唤醒其他的线程，这是一个对象方法，而不是线程方法,要配合同步一起才能使用\nnotifyAll()    唤醒其他的所有线程,这是一个对象方法，而不是线程方法,要配合同步一起才能使用  例:同步锁对象.notifyAll();\n</code></pre><h1 id=\"线程同步-synchronized关键字\"><a href=\"#线程同步-synchronized关键字\" class=\"headerlink\" title=\"线程同步(synchronized关键字)\"></a>线程同步(synchronized关键字)</h1><pre><code>线程同步\n    同步就是协同步调，按预定的先后次序进行运行。\n        如：你说完，我再说。阻塞式的运行。\n    主要用来解决线程的安全问题\n格式：\nsynchronized (对象)\n{\n    // 需要同步的代码；\n    // 共享资源的操作\n}\n原理：\n    同步可以解决安全问题的根本原因就在那个对象上。\n    该对象如同锁的功能。\n    对象的标志位\n\n线程同步特点\n    线程同步的前提：\n        同步需要两个或者两个以上的线程\n        多个线程使用的是同一个锁\n线程同步的特点：\n    即使获取了CPU的时间片，没有对象锁也无法执行\n    单线程无需同步\n线程同步缺点：\n    当线程相当多时，因为每个线程都会去判断同步上的锁，这是很耗费资源的，无形中会降低程序的运行效率。\n\n\n\n同步函数:\n    使得整个函数加锁同步\n实现\n    在函数上加上synchronized修饰符即可\n        如：public synchronized void run(){  }\n\n\n\n创建锁对象：\n\n       如果加锁的代码中访问的是非静态变量，那么优先使用this关键字作为锁对象\n       如果加锁的代码中访问的是静态变量，那么优先使用所在类的字节码文件对应的Class对象作为锁对象\n       1. 类名.class        静态属性\n       2. 对象.getClass()   \n\n思考\n    同步函数用的是哪个锁呢？  this\n    同步静态函数用的是哪个锁呢？Class   \n        该方法所在的函数中的类的Class对象，类.class\n</code></pre><h1 id=\"多线程间数据通信\"><a href=\"#多线程间数据通信\" class=\"headerlink\" title=\"多线程间数据通信\"></a>多线程间数据通信</h1><pre><code>其实就是多个线程在操作同一个资源,但是操作的动作不同.如果同时操作会出现错乱.\n\nwait();释放资源，释放锁。\nnotify();唤醒资源\nnotifyAll();唤醒全部资源\n\nsleep():释放资源，不释放锁。\n\n\nwait,notify,notifyAll都使用在同步中,因为要对持有监视器(锁)的线程操作所以要使用在同步中,因为只有同步才具有锁.\n\n为什么这些操作线程的方法要定义Object类中呢?\n    因为这些方法在操作同步中的线程时,都必须要标识它们所操作线程只有的锁.\n    只有同一个锁上的被等待线程,可以被同一个锁上notify唤醒.\n    不可以对不同锁中的线程进行唤醒.    也就是说,等待和唤醒必须是同一个锁.\n    而锁可以是任意对象,所以可以被任意对象调用的方法定义在Object类中.\n</code></pre><p>案例: 输入名字,打印名字(两线程同步操作查询数据)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.mtar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//主线程,调用输入输出线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InputOutputDemo</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tRes r = <span class=\"keyword\">new</span> Res();</span><br><span class=\"line\">\t\tInput in = <span class=\"keyword\">new</span> Input(r);<span class=\"comment\">// 3.然后可以分配该类的实例，</span></span><br><span class=\"line\">\t\tOutput out = <span class=\"keyword\">new</span> Output(r);<span class=\"comment\">// 输入与输出需要的是同一个对象r</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(in);<span class=\"comment\">// 4.在创建 Thread 时作为一个参数来传递并启动</span></span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(out);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 启动线程</span></span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Res</span> // 定义一个两个线程需要同时操作的数据</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\tString name; <span class=\"comment\">// 名字 未做封装,为了简化代码</span></span><br><span class=\"line\">\tString sex; <span class=\"comment\">// 性别</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index = <span class=\"number\">1</span>; <span class=\"comment\">// 计数当前第几个客户ID</span></span><br><span class=\"line\">\t<span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>; <span class=\"comment\">// 定义一个标记</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Input</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span>// 1.声明实现 <span class=\"title\">Runnable</span> 接口的类。</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Res r;</span><br><span class=\"line\"></span><br><span class=\"line\">\tInput(Res r) <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.r = r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span><span class=\"comment\">// 2.该类然后实现 run 方法。</span></span><br><span class=\"line\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;<span class=\"comment\">// 用于让线程每次写入的数据不同而定的标记</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)<span class=\"comment\">// 循环写入100次数据</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (r)<span class=\"comment\">// 同步 使用的锁是main函数中传入的与输出线程同一个锁r, 锁也叫监视器</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (r.flag)<span class=\"comment\">// 标记 如果我已经输入过了数据,那么:当前线程等待,并释放锁让被唤醒的线程可以拿到锁进行数据的查询.</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tr.wait();</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\t\t&#125;<span class=\"comment\">// (线程等待);线程池中休息,wait()会有(如果当前线程不是此对象监视器的所有者)InterruptedException异常</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tr.name = <span class=\"string\">\"mike\"</span>;</span><br><span class=\"line\">\t\t\t\t\tr.sex = <span class=\"string\">\"man\"</span>;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"我输入了第\"</span> + r.index + <span class=\"string\">\"个客户,名字为:\"</span> + r.name + <span class=\"string\">\"性别为:\"</span> + r.sex + <span class=\"string\">\"的靓仔.\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tr.name = <span class=\"string\">\"丽丽\"</span>;</span><br><span class=\"line\">\t\t\t\t\tr.sex = <span class=\"string\">\"女女\"</span>;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"我输入了第\"</span> + r.index + <span class=\"string\">\"个客户,名字为:\"</span> + r.name + <span class=\"string\">\"性别为:\"</span> + r.sex + <span class=\"string\">\"的靓女.\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tr.index++;<span class=\"comment\">// 只做计数</span></span><br><span class=\"line\">\t\t\t\tx = (x + <span class=\"number\">1</span>) % <span class=\"number\">2</span>;<span class=\"comment\">// 为了辨别每次输入的数据不同.也可以使用boolean的方法代替</span></span><br><span class=\"line\">\t\t\t\tr.flag = <span class=\"keyword\">true</span>;<span class=\"comment\">// 作标记,我已经输入过数据了.</span></span><br><span class=\"line\">\t\t\t\tr.notify();<span class=\"comment\">// 唤醒再等待的最优先的线程, r为锁////notifyAll();全部叫醒线程池中的所有线程</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出线程</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Output</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Res r;</span><br><span class=\"line\"></span><br><span class=\"line\">\tOutput(Res r) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.r = r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (r)<span class=\"comment\">// 同步 使用的锁是main函数中传入的与输入线程同一个锁r.</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!r.flag)<span class=\"comment\">// 如果我已经查询过 , 当前线程等待,并释放锁</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tr.wait();</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"I query the named : \"</span> + r.name + <span class=\"string\">\" , gender:\"</span> + r.sex + <span class=\"string\">\" customers . Id:\"</span> + (r.index - <span class=\"number\">1</span>));</span><br><span class=\"line\">\t\t\t\tr.flag = <span class=\"keyword\">false</span>;<span class=\"comment\">// 标记已经查询过</span></span><br><span class=\"line\">\t\t\t\tr.notify();<span class=\"comment\">// 唤醒r中等待的线程.</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>案例: 多线程数据通信之生产者消费者例(大于两线程同步 操作查询数据)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.mtar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对于多个生产者和消费者. 为什么要定义while判断标记. 原因:让被唤醒的线程再一次判断标记.</span></span><br><span class=\"line\"><span class=\"comment\">//为什么定义notifyAll,因为需要唤醒对方线程. 因为只用notify,容易出现只唤醒本方线程的情况.导致程序中的所有线程都等待.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerConsumerDemo</span> // 主线程<span class=\"title\">main</span>分别开启四个线程 两进 两出</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tResource r = <span class=\"keyword\">new</span> Resource();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tProducer pro = <span class=\"keyword\">new</span> Producer(r);<span class=\"comment\">// 3. 然后可以分配该类的实例，</span></span><br><span class=\"line\">\t\tConsumer con = <span class=\"keyword\">new</span> Consumer(r);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(pro);<span class=\"comment\">// 4 在创建 Thread 时作为一个参数来传递并启动</span></span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(pro);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tThread t3 = <span class=\"keyword\">new</span> Thread(con);</span><br><span class=\"line\">\t\tThread t4 = <span class=\"keyword\">new</span> Thread(con);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 启动线程.</span></span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tt3.start();</span><br><span class=\"line\">\t\tt4.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将生产线程与消费线程运行方式封装起来.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Resource</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// if </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (flag)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\twait();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name + <span class=\"string\">\"--\"</span> + count++;</span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\"...生产者..\"</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t\tflag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// this.notify();</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">out</span><span class=\"params\">()</span><span class=\"comment\">// 当消费者方法都是&#123;&#125;里的内容都是需要同步时可以将函数定义为同步,些时使用的锁是this</span></span><br><span class=\"line\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// if </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (!flag)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 不断循环判断本线程是否将生产出来的东西消费了.当出现多个相同线程时.因为有可以再次出现消费线程.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\twait();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"comment\">// 如果已经消费或是又是消费线程(第二个消费线程),那么消费线程等待,并释放锁.</span></span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\"...消费者....\"</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t\tflag = <span class=\"keyword\">false</span>;<span class=\"comment\">// 更改标记,记录已经消费过.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// this.notify();//当只有两线程时</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.notifyAll();<span class=\"comment\">// 多个线程最好是使用些方法.要不然会出现全部线程等待的问题</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生产者线程</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span>// 1.声明实现 <span class=\"title\">Runnable</span> 接口的类</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Resource res;</span><br><span class=\"line\"></span><br><span class=\"line\">\tProducer(Resource res) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.res = res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span><span class=\"comment\">// 2. 该类实现 run 方法。</span></span><br><span class=\"line\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)<span class=\"comment\">// 循环生产,,,,注,如果使用的是控制台CMD窗口,可以使用Ctrl+C键停止.</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tres.set(<span class=\"string\">\"+商品+\"</span>);<span class=\"comment\">// 将需要运行的线程内容封装起来</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 消费者线程</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Resource res;</span><br><span class=\"line\"></span><br><span class=\"line\">\tConsumer(Resource res) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.res = res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)<span class=\"comment\">// 循环消费,循环次数增加才看得出问题.</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tres.out();<span class=\"comment\">// 将需要运行的线程内容封装起来</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"线程同步死锁\"><a href=\"#线程同步死锁\" class=\"headerlink\" title=\"线程同步死锁\"></a>线程同步死锁</h1><pre><code>线程同步死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，\n    若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。\n    当多个线程完成功能需要同时获取多个共享资源的时候可能会导致死锁。\n\n死锁无法解决，只能避免。\n特定的资源分配方式才会导致线程的死锁，所以可以进行资源的分配前的死锁检测来避免死锁的发生。\n\n\n预防死锁的算法： 银行家算法。\n\n    银行家算法\n        银行家算法是一种最有代表性的避免死锁的算法。在避免死锁方法中允许进程动态地申请资源，\n        但系统在进行资源分配之前，应先计算此次分配资源的安全性，若分配不会导致系统进入不安全状态，则分配，否则等待。\n\n    算法原理\n        我们可以把操作系统看作是银行家，操作系统管理的资源相当于银行家管理的资金，\n        进程向操作系统请求分配资源相当于用户向银行家贷款。 　\n\n    为保证资金的安全,银行家规定: 　　\n        (1) 当一个顾客对资金的最大需求量不超过银行家现有的资金时就可接纳该顾客; 　　\n        (2) 顾客可以分期贷款,但贷款的总数不能超过最大需求量; 　\n        (3) 当银行家现有的资金不能满足顾客尚需的贷款数额时,对顾客的贷款可推迟支付,但总能使顾客在有限的时间里得到贷款; 　　\n        (4) 当顾客得到所需的全部资金后,一定能在有限的时间里归还所有的资金. 　　\n    操作系统按照银行家制定的规则为进程分配资源，当进程首次申请资源时，要测试该进程对资源的最大需求量，\n    如果系统现存的资源可以满足它的最大需求量则按当前的申请量分配资源，否则就推迟分配。当进程在执行中继续申请资源时，\n    先测试该进程本次申请的资源数是否超过了该资源所剩余的总量。若超过则拒绝分配资源，\n    若能满足则按当前的申请量分配资源，否则也要推迟分配。 \n</code></pre><p>死锁案例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.mtar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeadLockDemo</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果没有出现死锁,请多运行几次试试.</span></span><br><span class=\"line\">\t\tDeadLock d = <span class=\"keyword\">new</span> DeadLock();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tThread th1 = <span class=\"keyword\">new</span> Thread(d, <span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">\t\tThread th2 = <span class=\"keyword\">new</span> Thread(d, <span class=\"string\">\"李四\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tth1.start();</span><br><span class=\"line\">\t\tth2.start();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"finish.............\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出现死锁案例 死锁无法解决，只能避免。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeadLock</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义资源</span></span><br><span class=\"line\">\tString controller = <span class=\"string\">\"遥控器\"</span>;</span><br><span class=\"line\">\tString battery = <span class=\"string\">\"2节7号电池\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 需要抢资源</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (Thread.currentThread().getName().equals(<span class=\"string\">\"张三\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (controller) &#123;<span class=\"comment\">// 同步嵌套</span></span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"张三拿着遥控器，准备获取电池\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span> (battery) &#123;<span class=\"comment\">// 同步嵌套</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"张三拿着遥控器，拿到电池\"</span>);</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"张三看电视\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (battery) &#123;<span class=\"comment\">// 同步嵌套</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"李四拿着电池，准备获取遥控器\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span> (controller) &#123; <span class=\"comment\">// 同步嵌套</span></span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"李四拿着电池，拿到遥控器\"</span>);</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"李四看电视\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Demo下载\"><a href=\"#Demo下载\" class=\"headerlink\" title=\"Demo下载\"></a>Demo下载</h1><p><a href=\"/res/file/blog/2014/12/14/Java_Thread/MyThreadAndRunnable.rar\">本文案例Demo</a></p>\n","excerpt":"<p>目录</p>\n<pre><code>线程简介\nJava中的线程实现方式\nThread常用方法\n线程同步(synchronized关键字)\n多线程间数据通信\n线程同步死锁\n</code></pre>","more":"<h1 id=\"线程简介\"><a href=\"#线程简介\" class=\"headerlink\" title=\"线程简介\"></a>线程简介</h1><pre><code>程序(Program)：\n    计算机指令的集合，它以文件的形式存储在磁盘上。\n进程(Process)：\n    一个程序在其自身的地址空间中的一次执行活动。\n    资源申请、调度和独立运行的单位，因此，它使用系统中的运行资源；\n    而程序不能申请系统资源，不能被系统调度，也不能作为独立运行的单位，因此，它不占用系统的运行资源。\n线程(Thread)：\n    是进程中的一个单一的连续控制流程。一个进程可以拥有多个线程。\n    线程又称为轻量级进程，它和进程一样拥有独立的执行控制，由操作系统负责调度，\n    区别在于线程没有独立的存储空间，而是和所属进程中的其他线程共享一个存储空间，这使得线程间的通信远较进程简单。\n\n什么是线程： \n    线程是一个应用程序执行时候的多条路径。\n\n线程执行的原理：\n      在物理上只有一个CPU的情况下，JVM是采用抢占CPU资源，给不同的线程划分指定执行时间片的方式来实现。\n\njava中隐含的两个线程：\n    主线程\n        每个java应用程序都至少有一个线程。这就是所为的主线程。它由JVM创建并调用java应用程序的main方法。\n    垃圾回收线程(后台线程)\n        JVM还通常会创建一些其他的线程，不过这些线程对我们来说是不可见的.\n            比如，用于自动垃圾收集的线程、对象终止或者其他的JVM处理任务相关的线程。\n</code></pre><h1 id=\"Java中的线程实现方式\"><a href=\"#Java中的线程实现方式\" class=\"headerlink\" title=\"Java中的线程实现方式\"></a>Java中的线程实现方式</h1><pre><code>Thread ：线程\n      所在包: java.lang.*\n\n多线程实现方式: \n 多线程的方式一:(继承)见下面例:\n    1.1. 将类声明为 Thread 的子类。(继承)\n    1.2. 该子类应重写 Thread 类的 run 方法。\n    1.3. 接下来可以分配并启动该子类的实例。\n\n多线程的方式二:(接口)见下面例:\n    2.1. 声明实现 Runnable 接口的类。\n    2.2. 该子类应重写 Thread 类的 run 方法。\n    2.3. 然后可以分配该类的实例，\n    2.4. 在创建 Thread 时作为一个参数来传递并启动\n\n二种方式的区别:\n    使用Runnable接口\n        可以将CPU，代码和数据分开，形成清晰的模型；\n        更加体现了面向对象的编程思想，线程运行的代码也是对象(Runnable)\n        还可以从其他类继承；\n        保持程序风格的一致性。\n    直接继承Thread类\n        不能再继承其他类；\n        编写简单，可以直接操纵线程.\n\n\n 线程的使用细节：\n\n    1. 线程的启动使用父类的start()方法\n    2. 如果线程对象直接调用run()，那么JVN不会当作线程来运行，会认为是普通的方法调用\n    3. 匿名内部类的线程实现方式 \n    4. 可以直接创建Thread类的对象并启动该线程，但是如果没有重写run()，什么也不执行。\n    5. 同一个线程的启动只能有一次，否则抛出异常 (IllegalThreadStateException)\n        Exception in thread &quot;main&quot; thread1: i=1java.lang.IllegalThreadStateException\n\n守护线程(后台线程)\n    setDaemon (boolean on)\n    用法:\n        线程对象.setDaemon(true)\n        在启动线程之前调用\n    特点：\n    和其他线程一起等待CPU执行\n    当其他线程都结束后，后台线程默认结束\n    查看API文档\n    当正在运行的线程都是守护线程时，Java 虚拟机退出\n    该方法必须在启动线程前调用\n\n线程的生命周期(lifecycle)\n</code></pre><p><img src=\"/res/img/blog/2014/12/14/Java_Thread/Thread_lifecycle.png\" alt=\"线程的生命周期(lifecycle)\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.mtar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadAndRunnableDemo</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 主函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 方式一</span></span><br><span class=\"line\">\t\tMyThread mt = <span class=\"keyword\">new</span> MyThread(); <span class=\"comment\">// 1.3.接下来可以分配并启动该子类的实例。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// mt.setDaemon(true);//设置成后台线程必须在开户线程之前</span></span><br><span class=\"line\">\t\tmt.start(); <span class=\"comment\">// 1.4.并调用实例的start()方法,start方法会调用run方法,如果直接调用run方法将不能实现多线程.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 方式二</span></span><br><span class=\"line\">\t\tMyRunnable mr = <span class=\"keyword\">new</span> MyRunnable(); <span class=\"comment\">// 2.3. 然后可以分配该类的实例，</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(mr).start(); <span class=\"comment\">// 2.4 在创建 Thread 时作为一个参数来传递并启动</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"main -- i: \"</span> + i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tro();<span class=\"comment\">// Override........</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ro</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 当执行的线程的时候如果同时指定了Runnable的实现类和重写了Thread的run()，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 那么一定执行重写的run方法，而不是实现的run();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"Runnable........\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"Override........\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式一</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> // 1.1.将类声明为 <span class=\"title\">Thread</span> 的子类。(继承)</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"comment\">// 1.2.该子类应重写 Thread 类的 run 方法。</span></span><br><span class=\"line\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\"==&gt;MyThread:   i :\"</span> + i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式 二</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span>// 2.1. 声明实现 <span class=\"title\">Runnable</span> 接口的类。</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"comment\">// 2.2. 该类然后实现 run 方法。</span></span><br><span class=\"line\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\"==&gt;MyRunnable  -- i: \"</span> + i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Thread常用方法\"><a href=\"#Thread常用方法\" class=\"headerlink\" title=\"Thread常用方法\"></a>Thread常用方法</h1><table border=\"1px\" cellpadding=\"5px\"  cellspacing=\"1px\" bgcolor=\"\"><br><tr><td><B>类别</B></td><td ><B>方法签名</B></td><td><B>简介</B></td></tr><br><tr><td rowspan=\"4\">线程的创建</td><td>Thread()</td>      <td></td></tr><br><tr>                   <td>Thread(String name)</td><td></td></tr><br><tr>                   <td>Thread(Runnable tagrget)</td><td></td></tr><br><tr>                   <td>Thread(Runnable target,String name)</td><td></td></tr><br><tr><td rowspan=\"7\">线程的方法</td><td>void start()</td><td>启动线程</td></tr><br><tr>                   <td>static void sleep(long millis)</td><td rowspan=\"2\">线程休眠</td></tr><br><tr>                   <td>static void sleep(long millis , int nanos)</td></tr><br><tr>                   <td>void join()</td><td rowspan=\"3\">使其他线程等待当前线程终止</td></tr><br><tr>                   <td>void join(long millis)</td></tr><br><tr>                   <td>void join(long missis,int nanos)</td></tr><br><tr>                   <td>static void yield()</td><td>当前运行线程释放处理器资源</td></tr><br><tr><td>获取线程引用</td><td >static Thread currentThread()</td><td>返回当前运行的线程引用</td></tr><br><br></table>\n\n<pre><code>static yield()        暂停当前正在执行的线程对象，并执行其他线程\n\njoin()        调用这个方法的主线程，会等待加入的子线程完成    例: 其它线程.join();\n    特点：当A线程的执行遇到了B线程的join方法，那么就挂起A线程，直到B线程运行完毕,再继续执行A线程。\n\ngetName()            返回线程的名字\nsetName(String name) 设置线程对象名\ngetId()              返回线程的标识  同一个线程对象的id不同\ngetPriority()        返回当前线程对象的优先级   默认线程的优先级是5\nsetPriority()        设置线程优先级当前线程对象的优先级   默认线程的优先级是5\n\nsetPriority(int newPriority) 设置线程的优先级    虽然设置了线程的优先级，但是具体的实现取决于底层的操作系统的实现\n\nstatic int MAX_PRIORITY \n    线程可以具有的最高优先级。  max : 10\nstatic int MIN_PRIORITY \n    线程可以具有的最低优先级。  min : 1\nstatic int NORM_PRIORITY \n    分配给线程的默认优先级。  nor : 5\n\nwait()        线程进入等待状态，等待被notify，这是对象方法，不是线程方法,要配合同步一起才能使用\nnotify()    唤醒其他的线程，这是一个对象方法，而不是线程方法,要配合同步一起才能使用\nnotifyAll()    唤醒其他的所有线程,这是一个对象方法，而不是线程方法,要配合同步一起才能使用  例:同步锁对象.notifyAll();\n</code></pre><h1 id=\"线程同步-synchronized关键字\"><a href=\"#线程同步-synchronized关键字\" class=\"headerlink\" title=\"线程同步(synchronized关键字)\"></a>线程同步(synchronized关键字)</h1><pre><code>线程同步\n    同步就是协同步调，按预定的先后次序进行运行。\n        如：你说完，我再说。阻塞式的运行。\n    主要用来解决线程的安全问题\n格式：\nsynchronized (对象)\n{\n    // 需要同步的代码；\n    // 共享资源的操作\n}\n原理：\n    同步可以解决安全问题的根本原因就在那个对象上。\n    该对象如同锁的功能。\n    对象的标志位\n\n线程同步特点\n    线程同步的前提：\n        同步需要两个或者两个以上的线程\n        多个线程使用的是同一个锁\n线程同步的特点：\n    即使获取了CPU的时间片，没有对象锁也无法执行\n    单线程无需同步\n线程同步缺点：\n    当线程相当多时，因为每个线程都会去判断同步上的锁，这是很耗费资源的，无形中会降低程序的运行效率。\n\n\n\n同步函数:\n    使得整个函数加锁同步\n实现\n    在函数上加上synchronized修饰符即可\n        如：public synchronized void run(){  }\n\n\n\n创建锁对象：\n\n       如果加锁的代码中访问的是非静态变量，那么优先使用this关键字作为锁对象\n       如果加锁的代码中访问的是静态变量，那么优先使用所在类的字节码文件对应的Class对象作为锁对象\n       1. 类名.class        静态属性\n       2. 对象.getClass()   \n\n思考\n    同步函数用的是哪个锁呢？  this\n    同步静态函数用的是哪个锁呢？Class   \n        该方法所在的函数中的类的Class对象，类.class\n</code></pre><h1 id=\"多线程间数据通信\"><a href=\"#多线程间数据通信\" class=\"headerlink\" title=\"多线程间数据通信\"></a>多线程间数据通信</h1><pre><code>其实就是多个线程在操作同一个资源,但是操作的动作不同.如果同时操作会出现错乱.\n\nwait();释放资源，释放锁。\nnotify();唤醒资源\nnotifyAll();唤醒全部资源\n\nsleep():释放资源，不释放锁。\n\n\nwait,notify,notifyAll都使用在同步中,因为要对持有监视器(锁)的线程操作所以要使用在同步中,因为只有同步才具有锁.\n\n为什么这些操作线程的方法要定义Object类中呢?\n    因为这些方法在操作同步中的线程时,都必须要标识它们所操作线程只有的锁.\n    只有同一个锁上的被等待线程,可以被同一个锁上notify唤醒.\n    不可以对不同锁中的线程进行唤醒.    也就是说,等待和唤醒必须是同一个锁.\n    而锁可以是任意对象,所以可以被任意对象调用的方法定义在Object类中.\n</code></pre><p>案例: 输入名字,打印名字(两线程同步操作查询数据)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.mtar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//主线程,调用输入输出线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InputOutputDemo</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tRes r = <span class=\"keyword\">new</span> Res();</span><br><span class=\"line\">\t\tInput in = <span class=\"keyword\">new</span> Input(r);<span class=\"comment\">// 3.然后可以分配该类的实例，</span></span><br><span class=\"line\">\t\tOutput out = <span class=\"keyword\">new</span> Output(r);<span class=\"comment\">// 输入与输出需要的是同一个对象r</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(in);<span class=\"comment\">// 4.在创建 Thread 时作为一个参数来传递并启动</span></span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(out);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 启动线程</span></span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Res</span> // 定义一个两个线程需要同时操作的数据</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\tString name; <span class=\"comment\">// 名字 未做封装,为了简化代码</span></span><br><span class=\"line\">\tString sex; <span class=\"comment\">// 性别</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index = <span class=\"number\">1</span>; <span class=\"comment\">// 计数当前第几个客户ID</span></span><br><span class=\"line\">\t<span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>; <span class=\"comment\">// 定义一个标记</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Input</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span>// 1.声明实现 <span class=\"title\">Runnable</span> 接口的类。</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Res r;</span><br><span class=\"line\"></span><br><span class=\"line\">\tInput(Res r) <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.r = r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span><span class=\"comment\">// 2.该类然后实现 run 方法。</span></span><br><span class=\"line\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;<span class=\"comment\">// 用于让线程每次写入的数据不同而定的标记</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)<span class=\"comment\">// 循环写入100次数据</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (r)<span class=\"comment\">// 同步 使用的锁是main函数中传入的与输出线程同一个锁r, 锁也叫监视器</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (r.flag)<span class=\"comment\">// 标记 如果我已经输入过了数据,那么:当前线程等待,并释放锁让被唤醒的线程可以拿到锁进行数据的查询.</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tr.wait();</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\t\t&#125;<span class=\"comment\">// (线程等待);线程池中休息,wait()会有(如果当前线程不是此对象监视器的所有者)InterruptedException异常</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tr.name = <span class=\"string\">\"mike\"</span>;</span><br><span class=\"line\">\t\t\t\t\tr.sex = <span class=\"string\">\"man\"</span>;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"我输入了第\"</span> + r.index + <span class=\"string\">\"个客户,名字为:\"</span> + r.name + <span class=\"string\">\"性别为:\"</span> + r.sex + <span class=\"string\">\"的靓仔.\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tr.name = <span class=\"string\">\"丽丽\"</span>;</span><br><span class=\"line\">\t\t\t\t\tr.sex = <span class=\"string\">\"女女\"</span>;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"我输入了第\"</span> + r.index + <span class=\"string\">\"个客户,名字为:\"</span> + r.name + <span class=\"string\">\"性别为:\"</span> + r.sex + <span class=\"string\">\"的靓女.\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tr.index++;<span class=\"comment\">// 只做计数</span></span><br><span class=\"line\">\t\t\t\tx = (x + <span class=\"number\">1</span>) % <span class=\"number\">2</span>;<span class=\"comment\">// 为了辨别每次输入的数据不同.也可以使用boolean的方法代替</span></span><br><span class=\"line\">\t\t\t\tr.flag = <span class=\"keyword\">true</span>;<span class=\"comment\">// 作标记,我已经输入过数据了.</span></span><br><span class=\"line\">\t\t\t\tr.notify();<span class=\"comment\">// 唤醒再等待的最优先的线程, r为锁////notifyAll();全部叫醒线程池中的所有线程</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出线程</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Output</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Res r;</span><br><span class=\"line\"></span><br><span class=\"line\">\tOutput(Res r) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.r = r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (r)<span class=\"comment\">// 同步 使用的锁是main函数中传入的与输入线程同一个锁r.</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!r.flag)<span class=\"comment\">// 如果我已经查询过 , 当前线程等待,并释放锁</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tr.wait();</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"I query the named : \"</span> + r.name + <span class=\"string\">\" , gender:\"</span> + r.sex + <span class=\"string\">\" customers . Id:\"</span> + (r.index - <span class=\"number\">1</span>));</span><br><span class=\"line\">\t\t\t\tr.flag = <span class=\"keyword\">false</span>;<span class=\"comment\">// 标记已经查询过</span></span><br><span class=\"line\">\t\t\t\tr.notify();<span class=\"comment\">// 唤醒r中等待的线程.</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>案例: 多线程数据通信之生产者消费者例(大于两线程同步 操作查询数据)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.mtar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对于多个生产者和消费者. 为什么要定义while判断标记. 原因:让被唤醒的线程再一次判断标记.</span></span><br><span class=\"line\"><span class=\"comment\">//为什么定义notifyAll,因为需要唤醒对方线程. 因为只用notify,容易出现只唤醒本方线程的情况.导致程序中的所有线程都等待.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerConsumerDemo</span> // 主线程<span class=\"title\">main</span>分别开启四个线程 两进 两出</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tResource r = <span class=\"keyword\">new</span> Resource();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tProducer pro = <span class=\"keyword\">new</span> Producer(r);<span class=\"comment\">// 3. 然后可以分配该类的实例，</span></span><br><span class=\"line\">\t\tConsumer con = <span class=\"keyword\">new</span> Consumer(r);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tThread t1 = <span class=\"keyword\">new</span> Thread(pro);<span class=\"comment\">// 4 在创建 Thread 时作为一个参数来传递并启动</span></span><br><span class=\"line\">\t\tThread t2 = <span class=\"keyword\">new</span> Thread(pro);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tThread t3 = <span class=\"keyword\">new</span> Thread(con);</span><br><span class=\"line\">\t\tThread t4 = <span class=\"keyword\">new</span> Thread(con);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 启动线程.</span></span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tt3.start();</span><br><span class=\"line\">\t\tt4.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将生产线程与消费线程运行方式封装起来.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Resource</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// if </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (flag)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\twait();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name + <span class=\"string\">\"--\"</span> + count++;</span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\"...生产者..\"</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t\tflag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// this.notify();</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.notifyAll();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">out</span><span class=\"params\">()</span><span class=\"comment\">// 当消费者方法都是&#123;&#125;里的内容都是需要同步时可以将函数定义为同步,些时使用的锁是this</span></span><br><span class=\"line\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// if </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (!flag)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 不断循环判断本线程是否将生产出来的东西消费了.当出现多个相同线程时.因为有可以再次出现消费线程.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\twait();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"comment\">// 如果已经消费或是又是消费线程(第二个消费线程),那么消费线程等待,并释放锁.</span></span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName() + <span class=\"string\">\"...消费者....\"</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t\tflag = <span class=\"keyword\">false</span>;<span class=\"comment\">// 更改标记,记录已经消费过.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// this.notify();//当只有两线程时</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.notifyAll();<span class=\"comment\">// 多个线程最好是使用些方法.要不然会出现全部线程等待的问题</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生产者线程</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span>// 1.声明实现 <span class=\"title\">Runnable</span> 接口的类</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Resource res;</span><br><span class=\"line\"></span><br><span class=\"line\">\tProducer(Resource res) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.res = res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span><span class=\"comment\">// 2. 该类实现 run 方法。</span></span><br><span class=\"line\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)<span class=\"comment\">// 循环生产,,,,注,如果使用的是控制台CMD窗口,可以使用Ctrl+C键停止.</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tres.set(<span class=\"string\">\"+商品+\"</span>);<span class=\"comment\">// 将需要运行的线程内容封装起来</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 消费者线程</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Resource res;</span><br><span class=\"line\"></span><br><span class=\"line\">\tConsumer(Resource res) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.res = res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)<span class=\"comment\">// 循环消费,循环次数增加才看得出问题.</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tres.out();<span class=\"comment\">// 将需要运行的线程内容封装起来</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"线程同步死锁\"><a href=\"#线程同步死锁\" class=\"headerlink\" title=\"线程同步死锁\"></a>线程同步死锁</h1><pre><code>线程同步死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，\n    若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。\n    当多个线程完成功能需要同时获取多个共享资源的时候可能会导致死锁。\n\n死锁无法解决，只能避免。\n特定的资源分配方式才会导致线程的死锁，所以可以进行资源的分配前的死锁检测来避免死锁的发生。\n\n\n预防死锁的算法： 银行家算法。\n\n    银行家算法\n        银行家算法是一种最有代表性的避免死锁的算法。在避免死锁方法中允许进程动态地申请资源，\n        但系统在进行资源分配之前，应先计算此次分配资源的安全性，若分配不会导致系统进入不安全状态，则分配，否则等待。\n\n    算法原理\n        我们可以把操作系统看作是银行家，操作系统管理的资源相当于银行家管理的资金，\n        进程向操作系统请求分配资源相当于用户向银行家贷款。 　\n\n    为保证资金的安全,银行家规定: 　　\n        (1) 当一个顾客对资金的最大需求量不超过银行家现有的资金时就可接纳该顾客; 　　\n        (2) 顾客可以分期贷款,但贷款的总数不能超过最大需求量; 　\n        (3) 当银行家现有的资金不能满足顾客尚需的贷款数额时,对顾客的贷款可推迟支付,但总能使顾客在有限的时间里得到贷款; 　　\n        (4) 当顾客得到所需的全部资金后,一定能在有限的时间里归还所有的资金. 　　\n    操作系统按照银行家制定的规则为进程分配资源，当进程首次申请资源时，要测试该进程对资源的最大需求量，\n    如果系统现存的资源可以满足它的最大需求量则按当前的申请量分配资源，否则就推迟分配。当进程在执行中继续申请资源时，\n    先测试该进程本次申请的资源数是否超过了该资源所剩余的总量。若超过则拒绝分配资源，\n    若能满足则按当前的申请量分配资源，否则也要推迟分配。 \n</code></pre><p>死锁案例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.tu.mtar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeadLockDemo</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果没有出现死锁,请多运行几次试试.</span></span><br><span class=\"line\">\t\tDeadLock d = <span class=\"keyword\">new</span> DeadLock();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tThread th1 = <span class=\"keyword\">new</span> Thread(d, <span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">\t\tThread th2 = <span class=\"keyword\">new</span> Thread(d, <span class=\"string\">\"李四\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tth1.start();</span><br><span class=\"line\">\t\tth2.start();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"finish.............\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出现死锁案例 死锁无法解决，只能避免。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeadLock</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义资源</span></span><br><span class=\"line\">\tString controller = <span class=\"string\">\"遥控器\"</span>;</span><br><span class=\"line\">\tString battery = <span class=\"string\">\"2节7号电池\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 需要抢资源</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (Thread.currentThread().getName().equals(<span class=\"string\">\"张三\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (controller) &#123;<span class=\"comment\">// 同步嵌套</span></span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"张三拿着遥控器，准备获取电池\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span> (battery) &#123;<span class=\"comment\">// 同步嵌套</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"张三拿着遥控器，拿到电池\"</span>);</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"张三看电视\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (battery) &#123;<span class=\"comment\">// 同步嵌套</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"李四拿着电池，准备获取遥控器\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">synchronized</span> (controller) &#123; <span class=\"comment\">// 同步嵌套</span></span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"李四拿着电池，拿到遥控器\"</span>);</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(<span class=\"string\">\"李四看电视\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Demo下载\"><a href=\"#Demo下载\" class=\"headerlink\" title=\"Demo下载\"></a>Demo下载</h1><p><a href=\"/res/file/blog/2014/12/14/Java_Thread/MyThreadAndRunnable.rar\">本文案例Demo</a></p>"},{"layout":"post","title":"Java线程池","duoshuo":true,"date":"2014-12-15T16:00:00.000Z","SyntaxHihglighter":true,"shTheme":"shThemeMidnight","_content":"\n目录\n\n\t线程池的作用\n\tExecutors提供四种线程池\n\t\tnewCachedThreadPool\n\t\tnewFixedThreadPool\n\t\tnewScheduledThreadPool\n\t\tnewSingleThreadExecutor\n\tThreadPoolExecutor类\n\t\n\n<!-- more -->\n\nJdk1.5之后加入了java.util.concurrent包，这个包中主要介绍java中线程以及线程池的使用。\n\n\n\n# 线程池的作用\n\n\t线程池作用就是限制系统中执行线程的数量。   \n\t     根据系统的环境情况，可以自动或手动设置线程数量，达到运行的最佳效果；   \n\t     少了浪费了系统资源，多了造成系统拥挤效率不高。用线程池控制线程数量，其他线程排队等候。   \n\t     一个任务执行完毕，再从队列的中取最前面的任务开始执行。若队列中没有等待进程，线程池的这一资源处于等待。   \n\t     当一个新任务需要运行时，如果线程池中有等待的工作线程，就可以开始运行了；否则进入等待队列。   \n\n# 使用线程池的好处\n\t\n\t1.减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。\n\t2.可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存.\n\n\n# 比较重要的几个类\n\t\t\n\tJava里面线程池的顶级接口是Executor，但是严格意义上讲Executor并不是一个线程池，\n\t而只是一个执行线程的工具。真正的线程池接口是ExecutorService。\n|类名|说明\n|---|:---|\n|ExecutorService|真正的线程池接口。   \n|ScheduledExecutorService|能和Timer/TimerTask类似，解决那些需要任务重复执行的问题。  \n|ThreadPoolExecutor|ExecutorService的默认实现。   \n|ScheduledThreadPoolExecutor|继承ThreadPoolExecutor的ScheduledExecutorService接口实现，周期性任务调度的类实现。\n\n要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，\n很有可能配置的线程池不是较优的，因此在Executors类里面提供了一些静态工厂，生成一些常用的线程池。\n\n# Executors提供四种线程池\n\nJava通过Executors提供四种线程池，分别为：\n\n\t> newCachedThreadPool\n\t\t创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。\n\t> newFixedThreadPool \n\t\t创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。\n\t> newScheduledThreadPool\t\n\t\t创建一个定长线程池，支持定时及周期性任务执行。\n\t> newSingleThreadExecutor \n\t\t创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。\n\n\n# (1). newCachedThreadPool\n\n\t创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。\n\t线程池为无限大，当执行第二个任务时第一个任务已经完成，会复用执行第一个任务的线程，而不用每次新建线程。\n\n```java\t\n\tExecutorService cachedThreadPool = Executors.newCachedThreadPool();\n\tfor (int i = 0; i &lt; 10; i++) {\n\t\tfinal int index = i;\n\t\ttry {\n\t\t\tThread.sleep(index * 1000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t \n\t\tcachedThreadPool.execute(new Runnable() {\n\t \n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tSystem.out.println(index);\n\t\t\t}\n\t\t});\n\t}\n\n\t//==========================\n\t//实际调用\n\tclass Executors {\n\t\tpublic static ExecutorService newCachedThreadPool() {\n\t\t\treturn new ThreadPoolExecutor(0, \n\t\t\tInteger.MAX_VALUE,\n\t\t\t60L, \n\t\t\tTimeUnit.SECONDS,\n\t\t\tnew SynchronousQueue&lt;Runnable>());\n\t\t}\n\t}\n\n```\n\n\n# (2). newFixedThreadPool\n\n\t创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。\n\t定长线程池的大小最好根据系统资源进行设置。如Runtime.getRuntime().availableProcessors()。\n\n```java\t\n\t\n\tExecutorService fixedThreadPool = Executors.newFixedThreadPool(3);\n\tfor (int i = 0; i &lt; 10; i++) {\n\t\tfinal int index = i;\n\t\tfixedThreadPool.execute(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tSystem.out.println(index);\n\t\t\t\t\tThread.sleep(2000);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\t\n\t//==========================\n\t//实际调用 \n\tclass Executors {\n\t\tpublic static ExecutorService newFixedThreadPool(int nThreads) {\n\t\t\treturn new ThreadPoolExecutor(nThreads, \n\t\t\tnThreads,\n\t\t\t0L,\n\t\t\tTimeUnit.MILLISECONDS,\n\t\t\tnew LinkedBlockingQueue&lt;Runnable>());\n\t\t}\n\t\t\n\t}\n\n```\n\n# (3) newScheduledThreadPool\n\t\n\t创建一个定长线程池，支持定时及周期性任务执行。延迟执行\n\n```java\t\n\tScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5);\n\tscheduledThreadPool.schedule(new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tSystem.out.println(\"delay 3 seconds\");\n\t\t}\n\t}, 3, TimeUnit.SECONDS);//表示延时3秒执行\n\n\tscheduledThreadPool.scheduleAtFixedRate(new Runnable() {\n \t\t@Override\n\t\tpublic void run() {\n\t\t\tSystem.out.println(\"delay 1 seconds, and excute every 3 seconds\");\n\t\t}\n\t}, 1, 3, TimeUnit.SECONDS);//表示延迟1秒后每3秒执行一次.\n\n\t//==========================\n\t//实际调用\n\tclass Executors{\n\t\tpublic static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {\n\t\t\treturn new ScheduledThreadPoolExecutor(corePoolSize);\n\t\t}\n\t}\n\n\tclass ScheduledThreadPoolExecutor \n\t\textends ThreadPoolExecutor \n\t\timplements ScheduledExecutorService {\n\t\tpublic ScheduledThreadPoolExecutor(int corePoolSize) {\n\t\t\tsuper(corePoolSize, \n\t\t\t\tInteger.MAX_VALUE, \n\t\t\t\t0, \n\t\t\t\tNANOSECONDS,\n\t\t\t\tnew DelayedWorkQueue());\n\t\t}\n\t}\n\t//上面的super调用\n\tclass ThreadPoolExecutor extends AbstractExecutorService{\n\t\tpublic ThreadPoolExecutor(int corePoolSize,\n\t\t\t\t      int maximumPoolSize,\n\t\t\t\t      long keepAliveTime,\n\t\t\t\t      TimeUnit unit,\n\t\t\t\t      BlockingQueue&lt;Runnable> workQueue) {\n\t\tthis(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,\n\t\t     Executors.defaultThreadFactory(), defaultHandler);//调用下面构造函数\n\t\t}\n\n\t\t public ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue&lt;Runnable> workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler) {...}\n\t}\n\n\n```\n\n\n# (4)、newSingleThreadExecutor\n\n创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。\n\n```java\t\n\tExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();\n\tfor (int i = 0; i &lt; 10; i++) {\n\t\tfinal int index = i;\n\t\tsingleThreadExecutor.execute(new Runnable() {\n\t \n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tSystem.out.println(index);\n\t\t\t\t\tThread.sleep(2000);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t//==========================\n\t//实际调用\n\tclass Executors {\n\t\tpublic static ExecutorService newSingleThreadExecutor() {\n\t\t\treturn new FinalizableDelegatedExecutorService\n\t\t\t(new ThreadPoolExecutor(1, 1,\n\t\t\t\t\t    0L, TimeUnit.MILLISECONDS,\n\t\t\t\t\t    new LinkedBlockingQueue&lt;Runnable>()));\n\t\t}\n\t}\n\n\tstatic class FinalizableDelegatedExecutorService\n\t\textends DelegatedExecutorService {\n\t\tFinalizableDelegatedExecutorService(ExecutorService executor) {\n\t\t\tsuper(executor);\n\t\t}\n\t\tprotected void finalize() {\n\t\t\tsuper.shutdown();\n\t\t}\n\t}\n\n\tstatic class DelegatedExecutorService extends AbstractExecutorService{\n\t}\n\n```\n\n结果依次输出，相当于顺序执行各个任务。\n\n现行大多数GUI程序都是单线程的。Android中单线程可用于数据库操作，文件操作，应用批量安装，应用批量删除等不适合并发但可能IO阻塞性及影响UI线程响应的操作。\n\n\n# ThreadPoolExecutor\n\nThreadPoolExecutor 的完整构造方法的签名是：\n\n```java\t\n\t\n\tclass ThreadPoolExecutor extends AbstractExecutorService {\n\t\tpublic ThreadPoolExecutor(int corePoolSize,\n\t\t\tint maximumPoolSize, \n\t\t\tlong keepAliveTime,\n\t\t\tTimeUnit unit, \n\t\t\tBlockingQueue&lt;Runnable> workQueue, \n\t\t\tThreadFactory threadFactory,\n\t\t\tRejectedExecutionHandler handler) {...}\n\t}\n\t//corePoolSize - 池中所保存的线程数，包括空闲线程。\n\t//maximumPoolSize -池中允许的最大线程数\n\t//keepAliveTime - 当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间。\n\t//unit - keepAliveTime 参数的时间单位。\n\t//workQueue - 执行前用于保持任务的队列。此队列仅保持由 execute方法提交的 Runnable任务。\n\t//threadFactory - 执行程序创建新线程时使用的工厂。\n\t//handler - 由于超出线程范围和队列容量而使执行被阻塞时所使用的处理程序。\n\t\n\n\t abstract class AbstractExecutorService implements ExecutorService {}\n\t public interface ExecutorService extends Executor {}\n\t public interface Executor {}\n\t //以上关系可看出 ThreadPoolExecutor是Executors类的底层实现。\n```\n\n 参数 corePoolSize - 池中所保存的线程数，包括空闲线程。\n\t\n\t同时并发运行的核心线程数量.\n\n 参数 maximumPoolSize -池中允许的最大线程数\n\t\n\t线程最大容纳线程数\n\n 参数 keepAliveTime - 当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间。\n\t\n\t简时一点说就是,当核心线程空闲多长时间后自销毁.\n\t例如: 当corePoolSize为2个时,maximumPoolSize为3时,用户同时放入3个线程任务到池中.\n\t\t创建线程运行了前两个任务后,还需要运行一个任务,复用前面创建的线程运行\n\t\t最后一个任务,而还有一个线程闲置,keepAliveTime的参数就是当这个闲置线程等待\n\t\t多长时间内都无任务则销毁.而unit则是keepAliveTime的时间单位.\n\n 参数 unit#  - keepAliveTime 参数的时间单位。\n\n 参数 workQueue#  - 执行前用于保持任务的队列。此队列仅保持由 execute方法提交的 Runnable任务。\n\n\t排队\n\t所有 BlockingQueue 都可用于传输和保持提交的任务。可以使用此队列与池大小进行交互：\n\t\n\t> 如果运行的线程少于 corePoolSize，则 Executor 始终首选添加新的线程，而不进行排队。 \n\t> 如果运行的线程等于或多于 corePoolSize，则 Executor 始终首选将请求加入队列，而不添加新的线程。 \n\t> 如果无法将请求加入队列，则创建新的线程，除非创建此线程超出 maximumPoolSize，在这种情况下，任务将被拒绝。 \n\t\n\t排队Queue有三种通用策略： \n\t> 直接提交。工作队列的默认选项是 SynchronousQueue ，它将任务直接提交给线程而不保持它们。\n\t\t在此，如果不存在可用于立即运行任务的线程，则试图把任务加入队列将失败，因此会构造一个新的线程。\n\t\t此策略可以避免在处理可能具有内部依赖性的请求集时出现锁。直接提交通常要求无界 maximumPoolSizes \n\t\t以避免拒绝新提交的任务。当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。\n\t\t\n\t> 无界队列。使用无界队列（例如，不具有预定义容量的 LinkedBlockingQueue）将导致在所有 corePoolSize 线\n\t\t程都忙时新任务在队列中等待。这样，创建的线程就不会超过 corePoolSize。（因此， maximumPoolSize 的\n\t\t值也就无效了。）当每个任务完全独立于其他任务，即任务执行互不影响时，适合于使用无界队列；\n\t\t例如，在 Web 页服务器中。这种排队可用于处理瞬态突发请求，当命令以超过队列所能处理的平均数连\n\t\t续到达时，此策略允许无界线程具有增长的可能性。 \n\n\t> 有界队列。当使用有限的 maximumPoolSizes 时，有界队列（如 ArrayBlockingQueue）有助于防止资源耗尽，\n\t\t但是可能较难调整和控制。队列大小和最大池大小可能需要相互折衷：使用大型队列和小型池可以最大\n\t\t限度地降低 CPU 使用率、操作系统资源和上下文切换开销，但是可能导致人工降低吞吐量。如果任务频\n\t\t繁阻塞（例如，如果它们是 I/O 边界），则系统可能为超过您许可的更多线程安排时间。使用小型队列\n\t\t通常要求较大的池大小，CPU 使用率较高，但是可能遇到不可接受的调度开销，这样也会降低吞吐量。 \n\n 参数 threadFactory  - 执行程序创建新线程时使用的工厂。\n\n\tThreadFactory 是一种在软件开发过程中封装对象创建过程的面向对象的设计模式。\n\n 参数 handler  - 由于超出线程范围和队列容量而使执行被阻塞时所使用的处理程序。\n\t\n\t无法由 ThreadPoolExecutor 执行的任务的处理程序。\n\n\t当 Executor 已经关闭，并且 Executor 将有限边界用于最大线程和工作队列容量，且已经饱和时，\n\t在方法 execute(java.lang.Runnable) 中提交的新任务将被拒绝。\n\t在以上两种情况下，execute 方法都将调用其 RejectedExecutionHandler 的\n\tRejectedExecutionHandler.rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor) 方法。\n\t下面提供了四种预定义的处理程序策略： \n\n\t> 在默认的 ThreadPoolExecutor.AbortPolicy 中，处理程序遭到拒绝将抛出运行时 RejectedExecutionException 。 \n\n```java\t\n public static class AbortPolicy implements RejectedExecutionHandler {\n        public AbortPolicy() { }\n        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n            throw new RejectedExecutionException(\"Task \" +\n\t\tr.toString() +\" rejected from \" + e.toString());\n        }\n}\n```\n\n\t> 在 ThreadPoolExecutor.CallerRunsPolicy 中，线程调用运行该任务的 execute 本身。\n\t\t此策略提供简单的反馈控制机制，能够减缓新任务的提交速度。 \n\n```java\t\npublic void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n\tif (!e.isShutdown()) {\n\t\tr.run();\n\t}\n}\n```\n\n\t> 在 ThreadPoolExecutor.DiscardPolicy 中，不能执行的任务将被删除。\n\n```java\t\n public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {}\n```\n\t\n\t> 在 ThreadPoolExecutor.DiscardOldestPolicy 中，如果执行程序尚未关闭，\n\t\t则位于工作队列头部的任务将被删除，然后重试执行程序（如果再次失败，则重复此过程）。 \n\n```java\t\n\t\tpublic void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n\t\t    if (!e.isShutdown()) {\n\t\t\te.getQueue().poll();\n\t\t\te.execute(r);\n\t\t    }\n\t\t}\n```\n\n\t定义和使用其他种类的 RejectedExecutionHandler 类也是可能的，但这样做需要非常小心，尤其是当策略仅用于特定容量或排队策略时。 \n\n# Demo下载\n\n在JDK帮助文档中，有如此一段话：  \n“强烈建议程序员使用较为方便的Executors工厂方法    \n\tExecutors.newCachedThreadPool()（无界线程池，可以进行自动线程回收）、   \n\tExecutors.newFixedThreadPool(int)（固定大小线程池）   \n\tExecutors.newSingleThreadExecutor()（单个后台线程）   \n它们均为大多数使用场景预定义了设置。” \n\n\n![img](/res/img/blog/2014/12/16/Java_Thread_Pool/01.gif)\n![img](/res/img/blog/2014/12/16/Java_Thread_Pool/02.gif)\n\n\n\n[本文Demo下载](/res/file/blog/2014/12/16/Java_Thread_Pool/MyThread.rar)\n\n本Demo中有Executors提供四种线程池的基本使用,以及自定义实现 ThreadPoolExecutor 线程池暂停,继续运行等介绍.","source":"_posts/2014-12-16-Java_Throad_Pool.md","raw":"---\nlayout : post\ntitle : \"Java线程池\"\ncategory : Java\nduoshuo: true\ndate : 2014-12-16\ntags : [ThreadPoolExecutor , Thread , ScheduledThreadPoolExecutor,newCachedThreadPool,newSingleThreadExecutor,newFixedThreadPool,ExecutorService,]\nSyntaxHihglighter: true\nshTheme: shThemeMidnight # shThemeDefault  shThemeDjango  shThemeEclipse  shThemeEmacs  shThemeFadeToGrey  shThemeMidnight  shThemeRDark\n\n---\n\n目录\n\n\t线程池的作用\n\tExecutors提供四种线程池\n\t\tnewCachedThreadPool\n\t\tnewFixedThreadPool\n\t\tnewScheduledThreadPool\n\t\tnewSingleThreadExecutor\n\tThreadPoolExecutor类\n\t\n\n<!-- more -->\n\nJdk1.5之后加入了java.util.concurrent包，这个包中主要介绍java中线程以及线程池的使用。\n\n\n\n# 线程池的作用\n\n\t线程池作用就是限制系统中执行线程的数量。   \n\t     根据系统的环境情况，可以自动或手动设置线程数量，达到运行的最佳效果；   \n\t     少了浪费了系统资源，多了造成系统拥挤效率不高。用线程池控制线程数量，其他线程排队等候。   \n\t     一个任务执行完毕，再从队列的中取最前面的任务开始执行。若队列中没有等待进程，线程池的这一资源处于等待。   \n\t     当一个新任务需要运行时，如果线程池中有等待的工作线程，就可以开始运行了；否则进入等待队列。   \n\n# 使用线程池的好处\n\t\n\t1.减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。\n\t2.可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存.\n\n\n# 比较重要的几个类\n\t\t\n\tJava里面线程池的顶级接口是Executor，但是严格意义上讲Executor并不是一个线程池，\n\t而只是一个执行线程的工具。真正的线程池接口是ExecutorService。\n|类名|说明\n|---|:---|\n|ExecutorService|真正的线程池接口。   \n|ScheduledExecutorService|能和Timer/TimerTask类似，解决那些需要任务重复执行的问题。  \n|ThreadPoolExecutor|ExecutorService的默认实现。   \n|ScheduledThreadPoolExecutor|继承ThreadPoolExecutor的ScheduledExecutorService接口实现，周期性任务调度的类实现。\n\n要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，\n很有可能配置的线程池不是较优的，因此在Executors类里面提供了一些静态工厂，生成一些常用的线程池。\n\n# Executors提供四种线程池\n\nJava通过Executors提供四种线程池，分别为：\n\n\t> newCachedThreadPool\n\t\t创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。\n\t> newFixedThreadPool \n\t\t创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。\n\t> newScheduledThreadPool\t\n\t\t创建一个定长线程池，支持定时及周期性任务执行。\n\t> newSingleThreadExecutor \n\t\t创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。\n\n\n# (1). newCachedThreadPool\n\n\t创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。\n\t线程池为无限大，当执行第二个任务时第一个任务已经完成，会复用执行第一个任务的线程，而不用每次新建线程。\n\n```java\t\n\tExecutorService cachedThreadPool = Executors.newCachedThreadPool();\n\tfor (int i = 0; i &lt; 10; i++) {\n\t\tfinal int index = i;\n\t\ttry {\n\t\t\tThread.sleep(index * 1000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t \n\t\tcachedThreadPool.execute(new Runnable() {\n\t \n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tSystem.out.println(index);\n\t\t\t}\n\t\t});\n\t}\n\n\t//==========================\n\t//实际调用\n\tclass Executors {\n\t\tpublic static ExecutorService newCachedThreadPool() {\n\t\t\treturn new ThreadPoolExecutor(0, \n\t\t\tInteger.MAX_VALUE,\n\t\t\t60L, \n\t\t\tTimeUnit.SECONDS,\n\t\t\tnew SynchronousQueue&lt;Runnable>());\n\t\t}\n\t}\n\n```\n\n\n# (2). newFixedThreadPool\n\n\t创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。\n\t定长线程池的大小最好根据系统资源进行设置。如Runtime.getRuntime().availableProcessors()。\n\n```java\t\n\t\n\tExecutorService fixedThreadPool = Executors.newFixedThreadPool(3);\n\tfor (int i = 0; i &lt; 10; i++) {\n\t\tfinal int index = i;\n\t\tfixedThreadPool.execute(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tSystem.out.println(index);\n\t\t\t\t\tThread.sleep(2000);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\t\n\t//==========================\n\t//实际调用 \n\tclass Executors {\n\t\tpublic static ExecutorService newFixedThreadPool(int nThreads) {\n\t\t\treturn new ThreadPoolExecutor(nThreads, \n\t\t\tnThreads,\n\t\t\t0L,\n\t\t\tTimeUnit.MILLISECONDS,\n\t\t\tnew LinkedBlockingQueue&lt;Runnable>());\n\t\t}\n\t\t\n\t}\n\n```\n\n# (3) newScheduledThreadPool\n\t\n\t创建一个定长线程池，支持定时及周期性任务执行。延迟执行\n\n```java\t\n\tScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5);\n\tscheduledThreadPool.schedule(new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tSystem.out.println(\"delay 3 seconds\");\n\t\t}\n\t}, 3, TimeUnit.SECONDS);//表示延时3秒执行\n\n\tscheduledThreadPool.scheduleAtFixedRate(new Runnable() {\n \t\t@Override\n\t\tpublic void run() {\n\t\t\tSystem.out.println(\"delay 1 seconds, and excute every 3 seconds\");\n\t\t}\n\t}, 1, 3, TimeUnit.SECONDS);//表示延迟1秒后每3秒执行一次.\n\n\t//==========================\n\t//实际调用\n\tclass Executors{\n\t\tpublic static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {\n\t\t\treturn new ScheduledThreadPoolExecutor(corePoolSize);\n\t\t}\n\t}\n\n\tclass ScheduledThreadPoolExecutor \n\t\textends ThreadPoolExecutor \n\t\timplements ScheduledExecutorService {\n\t\tpublic ScheduledThreadPoolExecutor(int corePoolSize) {\n\t\t\tsuper(corePoolSize, \n\t\t\t\tInteger.MAX_VALUE, \n\t\t\t\t0, \n\t\t\t\tNANOSECONDS,\n\t\t\t\tnew DelayedWorkQueue());\n\t\t}\n\t}\n\t//上面的super调用\n\tclass ThreadPoolExecutor extends AbstractExecutorService{\n\t\tpublic ThreadPoolExecutor(int corePoolSize,\n\t\t\t\t      int maximumPoolSize,\n\t\t\t\t      long keepAliveTime,\n\t\t\t\t      TimeUnit unit,\n\t\t\t\t      BlockingQueue&lt;Runnable> workQueue) {\n\t\tthis(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,\n\t\t     Executors.defaultThreadFactory(), defaultHandler);//调用下面构造函数\n\t\t}\n\n\t\t public ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue&lt;Runnable> workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler) {...}\n\t}\n\n\n```\n\n\n# (4)、newSingleThreadExecutor\n\n创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。\n\n```java\t\n\tExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();\n\tfor (int i = 0; i &lt; 10; i++) {\n\t\tfinal int index = i;\n\t\tsingleThreadExecutor.execute(new Runnable() {\n\t \n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tSystem.out.println(index);\n\t\t\t\t\tThread.sleep(2000);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t//==========================\n\t//实际调用\n\tclass Executors {\n\t\tpublic static ExecutorService newSingleThreadExecutor() {\n\t\t\treturn new FinalizableDelegatedExecutorService\n\t\t\t(new ThreadPoolExecutor(1, 1,\n\t\t\t\t\t    0L, TimeUnit.MILLISECONDS,\n\t\t\t\t\t    new LinkedBlockingQueue&lt;Runnable>()));\n\t\t}\n\t}\n\n\tstatic class FinalizableDelegatedExecutorService\n\t\textends DelegatedExecutorService {\n\t\tFinalizableDelegatedExecutorService(ExecutorService executor) {\n\t\t\tsuper(executor);\n\t\t}\n\t\tprotected void finalize() {\n\t\t\tsuper.shutdown();\n\t\t}\n\t}\n\n\tstatic class DelegatedExecutorService extends AbstractExecutorService{\n\t}\n\n```\n\n结果依次输出，相当于顺序执行各个任务。\n\n现行大多数GUI程序都是单线程的。Android中单线程可用于数据库操作，文件操作，应用批量安装，应用批量删除等不适合并发但可能IO阻塞性及影响UI线程响应的操作。\n\n\n# ThreadPoolExecutor\n\nThreadPoolExecutor 的完整构造方法的签名是：\n\n```java\t\n\t\n\tclass ThreadPoolExecutor extends AbstractExecutorService {\n\t\tpublic ThreadPoolExecutor(int corePoolSize,\n\t\t\tint maximumPoolSize, \n\t\t\tlong keepAliveTime,\n\t\t\tTimeUnit unit, \n\t\t\tBlockingQueue&lt;Runnable> workQueue, \n\t\t\tThreadFactory threadFactory,\n\t\t\tRejectedExecutionHandler handler) {...}\n\t}\n\t//corePoolSize - 池中所保存的线程数，包括空闲线程。\n\t//maximumPoolSize -池中允许的最大线程数\n\t//keepAliveTime - 当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间。\n\t//unit - keepAliveTime 参数的时间单位。\n\t//workQueue - 执行前用于保持任务的队列。此队列仅保持由 execute方法提交的 Runnable任务。\n\t//threadFactory - 执行程序创建新线程时使用的工厂。\n\t//handler - 由于超出线程范围和队列容量而使执行被阻塞时所使用的处理程序。\n\t\n\n\t abstract class AbstractExecutorService implements ExecutorService {}\n\t public interface ExecutorService extends Executor {}\n\t public interface Executor {}\n\t //以上关系可看出 ThreadPoolExecutor是Executors类的底层实现。\n```\n\n 参数 corePoolSize - 池中所保存的线程数，包括空闲线程。\n\t\n\t同时并发运行的核心线程数量.\n\n 参数 maximumPoolSize -池中允许的最大线程数\n\t\n\t线程最大容纳线程数\n\n 参数 keepAliveTime - 当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间。\n\t\n\t简时一点说就是,当核心线程空闲多长时间后自销毁.\n\t例如: 当corePoolSize为2个时,maximumPoolSize为3时,用户同时放入3个线程任务到池中.\n\t\t创建线程运行了前两个任务后,还需要运行一个任务,复用前面创建的线程运行\n\t\t最后一个任务,而还有一个线程闲置,keepAliveTime的参数就是当这个闲置线程等待\n\t\t多长时间内都无任务则销毁.而unit则是keepAliveTime的时间单位.\n\n 参数 unit#  - keepAliveTime 参数的时间单位。\n\n 参数 workQueue#  - 执行前用于保持任务的队列。此队列仅保持由 execute方法提交的 Runnable任务。\n\n\t排队\n\t所有 BlockingQueue 都可用于传输和保持提交的任务。可以使用此队列与池大小进行交互：\n\t\n\t> 如果运行的线程少于 corePoolSize，则 Executor 始终首选添加新的线程，而不进行排队。 \n\t> 如果运行的线程等于或多于 corePoolSize，则 Executor 始终首选将请求加入队列，而不添加新的线程。 \n\t> 如果无法将请求加入队列，则创建新的线程，除非创建此线程超出 maximumPoolSize，在这种情况下，任务将被拒绝。 \n\t\n\t排队Queue有三种通用策略： \n\t> 直接提交。工作队列的默认选项是 SynchronousQueue ，它将任务直接提交给线程而不保持它们。\n\t\t在此，如果不存在可用于立即运行任务的线程，则试图把任务加入队列将失败，因此会构造一个新的线程。\n\t\t此策略可以避免在处理可能具有内部依赖性的请求集时出现锁。直接提交通常要求无界 maximumPoolSizes \n\t\t以避免拒绝新提交的任务。当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。\n\t\t\n\t> 无界队列。使用无界队列（例如，不具有预定义容量的 LinkedBlockingQueue）将导致在所有 corePoolSize 线\n\t\t程都忙时新任务在队列中等待。这样，创建的线程就不会超过 corePoolSize。（因此， maximumPoolSize 的\n\t\t值也就无效了。）当每个任务完全独立于其他任务，即任务执行互不影响时，适合于使用无界队列；\n\t\t例如，在 Web 页服务器中。这种排队可用于处理瞬态突发请求，当命令以超过队列所能处理的平均数连\n\t\t续到达时，此策略允许无界线程具有增长的可能性。 \n\n\t> 有界队列。当使用有限的 maximumPoolSizes 时，有界队列（如 ArrayBlockingQueue）有助于防止资源耗尽，\n\t\t但是可能较难调整和控制。队列大小和最大池大小可能需要相互折衷：使用大型队列和小型池可以最大\n\t\t限度地降低 CPU 使用率、操作系统资源和上下文切换开销，但是可能导致人工降低吞吐量。如果任务频\n\t\t繁阻塞（例如，如果它们是 I/O 边界），则系统可能为超过您许可的更多线程安排时间。使用小型队列\n\t\t通常要求较大的池大小，CPU 使用率较高，但是可能遇到不可接受的调度开销，这样也会降低吞吐量。 \n\n 参数 threadFactory  - 执行程序创建新线程时使用的工厂。\n\n\tThreadFactory 是一种在软件开发过程中封装对象创建过程的面向对象的设计模式。\n\n 参数 handler  - 由于超出线程范围和队列容量而使执行被阻塞时所使用的处理程序。\n\t\n\t无法由 ThreadPoolExecutor 执行的任务的处理程序。\n\n\t当 Executor 已经关闭，并且 Executor 将有限边界用于最大线程和工作队列容量，且已经饱和时，\n\t在方法 execute(java.lang.Runnable) 中提交的新任务将被拒绝。\n\t在以上两种情况下，execute 方法都将调用其 RejectedExecutionHandler 的\n\tRejectedExecutionHandler.rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor) 方法。\n\t下面提供了四种预定义的处理程序策略： \n\n\t> 在默认的 ThreadPoolExecutor.AbortPolicy 中，处理程序遭到拒绝将抛出运行时 RejectedExecutionException 。 \n\n```java\t\n public static class AbortPolicy implements RejectedExecutionHandler {\n        public AbortPolicy() { }\n        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n            throw new RejectedExecutionException(\"Task \" +\n\t\tr.toString() +\" rejected from \" + e.toString());\n        }\n}\n```\n\n\t> 在 ThreadPoolExecutor.CallerRunsPolicy 中，线程调用运行该任务的 execute 本身。\n\t\t此策略提供简单的反馈控制机制，能够减缓新任务的提交速度。 \n\n```java\t\npublic void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n\tif (!e.isShutdown()) {\n\t\tr.run();\n\t}\n}\n```\n\n\t> 在 ThreadPoolExecutor.DiscardPolicy 中，不能执行的任务将被删除。\n\n```java\t\n public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {}\n```\n\t\n\t> 在 ThreadPoolExecutor.DiscardOldestPolicy 中，如果执行程序尚未关闭，\n\t\t则位于工作队列头部的任务将被删除，然后重试执行程序（如果再次失败，则重复此过程）。 \n\n```java\t\n\t\tpublic void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n\t\t    if (!e.isShutdown()) {\n\t\t\te.getQueue().poll();\n\t\t\te.execute(r);\n\t\t    }\n\t\t}\n```\n\n\t定义和使用其他种类的 RejectedExecutionHandler 类也是可能的，但这样做需要非常小心，尤其是当策略仅用于特定容量或排队策略时。 \n\n# Demo下载\n\n在JDK帮助文档中，有如此一段话：  \n“强烈建议程序员使用较为方便的Executors工厂方法    \n\tExecutors.newCachedThreadPool()（无界线程池，可以进行自动线程回收）、   \n\tExecutors.newFixedThreadPool(int)（固定大小线程池）   \n\tExecutors.newSingleThreadExecutor()（单个后台线程）   \n它们均为大多数使用场景预定义了设置。” \n\n\n![img](/res/img/blog/2014/12/16/Java_Thread_Pool/01.gif)\n![img](/res/img/blog/2014/12/16/Java_Thread_Pool/02.gif)\n\n\n\n[本文Demo下载](/res/file/blog/2014/12/16/Java_Thread_Pool/MyThread.rar)\n\n本Demo中有Executors提供四种线程池的基本使用,以及自定义实现 ThreadPoolExecutor 线程池暂停,继续运行等介绍.","slug":"Java_Throad_Pool","published":1,"updated":"2016-04-27T03:13:00.814Z","comments":1,"photos":[],"link":"","_id":"cinu3etyk001lxoj0wcu2e3v6","content":"<p>目录</p>\n<pre><code>线程池的作用\nExecutors提供四种线程池\n    newCachedThreadPool\n    newFixedThreadPool\n    newScheduledThreadPool\n    newSingleThreadExecutor\nThreadPoolExecutor类\n</code></pre><a id=\"more\"></a>\n<p>Jdk1.5之后加入了java.util.concurrent包，这个包中主要介绍java中线程以及线程池的使用。</p>\n<h1 id=\"线程池的作用\"><a href=\"#线程池的作用\" class=\"headerlink\" title=\"线程池的作用\"></a>线程池的作用</h1><pre><code>线程池作用就是限制系统中执行线程的数量。   \n     根据系统的环境情况，可以自动或手动设置线程数量，达到运行的最佳效果；   \n     少了浪费了系统资源，多了造成系统拥挤效率不高。用线程池控制线程数量，其他线程排队等候。   \n     一个任务执行完毕，再从队列的中取最前面的任务开始执行。若队列中没有等待进程，线程池的这一资源处于等待。   \n     当一个新任务需要运行时，如果线程池中有等待的工作线程，就可以开始运行了；否则进入等待队列。   \n</code></pre><h1 id=\"使用线程池的好处\"><a href=\"#使用线程池的好处\" class=\"headerlink\" title=\"使用线程池的好处\"></a>使用线程池的好处</h1><pre><code>1.减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。\n2.可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存.\n</code></pre><h1 id=\"比较重要的几个类\"><a href=\"#比较重要的几个类\" class=\"headerlink\" title=\"比较重要的几个类\"></a>比较重要的几个类</h1><pre><code>Java里面线程池的顶级接口是Executor，但是严格意义上讲Executor并不是一个线程池，\n而只是一个执行线程的工具。真正的线程池接口是ExecutorService。\n</code></pre><table>\n<thead>\n<tr>\n<th>类名</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ExecutorService</td>\n<td style=\"text-align:left\">真正的线程池接口。   </td>\n</tr>\n<tr>\n<td>ScheduledExecutorService</td>\n<td style=\"text-align:left\">能和Timer/TimerTask类似，解决那些需要任务重复执行的问题。  </td>\n</tr>\n<tr>\n<td>ThreadPoolExecutor</td>\n<td style=\"text-align:left\">ExecutorService的默认实现。   </td>\n</tr>\n<tr>\n<td>ScheduledThreadPoolExecutor</td>\n<td style=\"text-align:left\">继承ThreadPoolExecutor的ScheduledExecutorService接口实现，周期性任务调度的类实现。</td>\n</tr>\n</tbody>\n</table>\n<p>要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，<br>很有可能配置的线程池不是较优的，因此在Executors类里面提供了一些静态工厂，生成一些常用的线程池。</p>\n<h1 id=\"Executors提供四种线程池\"><a href=\"#Executors提供四种线程池\" class=\"headerlink\" title=\"Executors提供四种线程池\"></a>Executors提供四种线程池</h1><p>Java通过Executors提供四种线程池，分别为：</p>\n<pre><code>&gt; newCachedThreadPool\n    创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。\n&gt; newFixedThreadPool \n    创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。\n&gt; newScheduledThreadPool    \n    创建一个定长线程池，支持定时及周期性任务执行。\n&gt; newSingleThreadExecutor \n    创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。\n</code></pre><h1 id=\"1-newCachedThreadPool\"><a href=\"#1-newCachedThreadPool\" class=\"headerlink\" title=\"(1). newCachedThreadPool\"></a>(1). newCachedThreadPool</h1><pre><code>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。\n线程池为无限大，当执行第二个任务时第一个任务已经完成，会复用执行第一个任务的线程，而不用每次新建线程。\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tThread.sleep(index * <span class=\"number\">1000</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tcachedThreadPool.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(index);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//==========================</span></span><br><span class=\"line\"><span class=\"comment\">//实际调用</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Executors</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, </span><br><span class=\"line\">\t\tInteger.MAX_VALUE,</span><br><span class=\"line\">\t\t<span class=\"number\">60L</span>, </span><br><span class=\"line\">\t\tTimeUnit.SECONDS,</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> SynchronousQueue&amp;lt;Runnable&gt;());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-newFixedThreadPool\"><a href=\"#2-newFixedThreadPool\" class=\"headerlink\" title=\"(2). newFixedThreadPool\"></a>(2). newFixedThreadPool</h1><pre><code>创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。\n定长线程池的大小最好根据系统资源进行设置。如Runtime.getRuntime().availableProcessors()。\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ExecutorService fixedThreadPool = Executors.newFixedThreadPool(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</span><br><span class=\"line\">\tfixedThreadPool.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(index);</span><br><span class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//==========================</span></span><br><span class=\"line\"><span class=\"comment\">//实际调用 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Executors</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, </span><br><span class=\"line\">\t\tnThreads,</span><br><span class=\"line\">\t\t<span class=\"number\">0L</span>,</span><br><span class=\"line\">\t\tTimeUnit.MILLISECONDS,</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> LinkedBlockingQueue&amp;lt;Runnable&gt;());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-newScheduledThreadPool\"><a href=\"#3-newScheduledThreadPool\" class=\"headerlink\" title=\"(3) newScheduledThreadPool\"></a>(3) newScheduledThreadPool</h1><pre><code>创建一个定长线程池，支持定时及周期性任务执行。延迟执行\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(<span class=\"number\">5</span>);</span><br><span class=\"line\">scheduledThreadPool.schedule(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"delay 3 seconds\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">3</span>, TimeUnit.SECONDS);<span class=\"comment\">//表示延时3秒执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">scheduledThreadPool.scheduleAtFixedRate(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"delay 1 seconds, and excute every 3 seconds\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">1</span>, <span class=\"number\">3</span>, TimeUnit.SECONDS);<span class=\"comment\">//表示延迟1秒后每3秒执行一次.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//==========================</span></span><br><span class=\"line\"><span class=\"comment\">//实际调用</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Executors</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ScheduledExecutorService <span class=\"title\">newScheduledThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduledThreadPoolExecutor</span> </span><br><span class=\"line\">\t<span class=\"keyword\">extends</span> <span class=\"title\">ThreadPoolExecutor</span> </span><br><span class=\"line\">\t<span class=\"keyword\">implements</span> <span class=\"title\">ScheduledExecutorService</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScheduledThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(corePoolSize, </span><br><span class=\"line\">\t\t\tInteger.MAX_VALUE, </span><br><span class=\"line\">\t\t\t<span class=\"number\">0</span>, </span><br><span class=\"line\">\t\t\tNANOSECONDS,</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> DelayedWorkQueue());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//上面的super调用</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolExecutor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExecutorService</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span><br><span class=\"line\">\t\t\t      <span class=\"keyword\">int</span> maximumPoolSize,</span><br><span class=\"line\">\t\t\t      <span class=\"keyword\">long</span> keepAliveTime,</span><br><span class=\"line\">\t\t\t      TimeUnit unit,</span><br><span class=\"line\">\t\t\t      BlockingQueue&amp;lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class=\"line\">\t     Executors.defaultThreadFactory(), defaultHandler);<span class=\"comment\">//调用下面构造函数</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span><br><span class=\"line\">                             <span class=\"keyword\">int</span> maximumPoolSize,</span><br><span class=\"line\">                             <span class=\"keyword\">long</span> keepAliveTime,</span><br><span class=\"line\">                             TimeUnit unit,</span><br><span class=\"line\">                             BlockingQueue&amp;lt;Runnable&gt; workQueue,</span><br><span class=\"line\">                             ThreadFactory threadFactory,</span><br><span class=\"line\">                             RejectedExecutionHandler handler)</span> </span>&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-、newSingleThreadExecutor\"><a href=\"#4-、newSingleThreadExecutor\" class=\"headerlink\" title=\"(4)、newSingleThreadExecutor\"></a>(4)、newSingleThreadExecutor</h1><p>创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</span><br><span class=\"line\">\tsingleThreadExecutor.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(index);</span><br><span class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//==========================</span></span><br><span class=\"line\"><span class=\"comment\">//实际调用</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Executors</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FinalizableDelegatedExecutorService</span><br><span class=\"line\">\t\t(<span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t\t    <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">\t\t\t\t    <span class=\"keyword\">new</span> LinkedBlockingQueue&amp;lt;Runnable&gt;()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FinalizableDelegatedExecutorService</span></span><br><span class=\"line\">\t<span class=\"keyword\">extends</span> <span class=\"title\">DelegatedExecutorService</span> </span>&#123;</span><br><span class=\"line\">\tFinalizableDelegatedExecutorService(ExecutorService executor) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(executor);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">finalize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.shutdown();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelegatedExecutorService</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExecutorService</span></span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果依次输出，相当于顺序执行各个任务。</p>\n<p>现行大多数GUI程序都是单线程的。Android中单线程可用于数据库操作，文件操作，应用批量安装，应用批量删除等不适合并发但可能IO阻塞性及影响UI线程响应的操作。</p>\n<h1 id=\"ThreadPoolExecutor\"><a href=\"#ThreadPoolExecutor\" class=\"headerlink\" title=\"ThreadPoolExecutor\"></a>ThreadPoolExecutor</h1><p>ThreadPoolExecutor 的完整构造方法的签名是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolExecutor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExecutorService</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> maximumPoolSize, </span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> keepAliveTime,</span><br><span class=\"line\">\t\tTimeUnit unit, </span><br><span class=\"line\">\t\tBlockingQueue&amp;lt;Runnable&gt; workQueue, </span><br><span class=\"line\">\t\tThreadFactory threadFactory,</span><br><span class=\"line\">\t\tRejectedExecutionHandler handler)</span> </span>&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//corePoolSize - 池中所保存的线程数，包括空闲线程。</span></span><br><span class=\"line\"><span class=\"comment\">//maximumPoolSize -池中允许的最大线程数</span></span><br><span class=\"line\"><span class=\"comment\">//keepAliveTime - 当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间。</span></span><br><span class=\"line\"><span class=\"comment\">//unit - keepAliveTime 参数的时间单位。</span></span><br><span class=\"line\"><span class=\"comment\">//workQueue - 执行前用于保持任务的队列。此队列仅保持由 execute方法提交的 Runnable任务。</span></span><br><span class=\"line\"><span class=\"comment\">//threadFactory - 执行程序创建新线程时使用的工厂。</span></span><br><span class=\"line\"><span class=\"comment\">//handler - 由于超出线程范围和队列容量而使执行被阻塞时所使用的处理程序。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractExecutorService</span> <span class=\"keyword\">implements</span> <span class=\"title\">ExecutorService</span> </span>&#123;&#125;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ExecutorService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Executor</span> </span>&#123;&#125;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Executor</span> </span>&#123;&#125;</span><br><span class=\"line\"> <span class=\"comment\">//以上关系可看出 ThreadPoolExecutor是Executors类的底层实现。</span></span><br></pre></td></tr></table></figure>\n<p> 参数 corePoolSize - 池中所保存的线程数，包括空闲线程。</p>\n<pre><code>同时并发运行的核心线程数量.\n</code></pre><p> 参数 maximumPoolSize -池中允许的最大线程数</p>\n<pre><code>线程最大容纳线程数\n</code></pre><p> 参数 keepAliveTime - 当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间。</p>\n<pre><code>简时一点说就是,当核心线程空闲多长时间后自销毁.\n例如: 当corePoolSize为2个时,maximumPoolSize为3时,用户同时放入3个线程任务到池中.\n    创建线程运行了前两个任务后,还需要运行一个任务,复用前面创建的线程运行\n    最后一个任务,而还有一个线程闲置,keepAliveTime的参数就是当这个闲置线程等待\n    多长时间内都无任务则销毁.而unit则是keepAliveTime的时间单位.\n</code></pre><p> 参数 unit#  - keepAliveTime 参数的时间单位。</p>\n<p> 参数 workQueue#  - 执行前用于保持任务的队列。此队列仅保持由 execute方法提交的 Runnable任务。</p>\n<pre><code>排队\n所有 BlockingQueue 都可用于传输和保持提交的任务。可以使用此队列与池大小进行交互：\n\n&gt; 如果运行的线程少于 corePoolSize，则 Executor 始终首选添加新的线程，而不进行排队。 \n&gt; 如果运行的线程等于或多于 corePoolSize，则 Executor 始终首选将请求加入队列，而不添加新的线程。 \n&gt; 如果无法将请求加入队列，则创建新的线程，除非创建此线程超出 maximumPoolSize，在这种情况下，任务将被拒绝。 \n\n排队Queue有三种通用策略： \n&gt; 直接提交。工作队列的默认选项是 SynchronousQueue ，它将任务直接提交给线程而不保持它们。\n    在此，如果不存在可用于立即运行任务的线程，则试图把任务加入队列将失败，因此会构造一个新的线程。\n    此策略可以避免在处理可能具有内部依赖性的请求集时出现锁。直接提交通常要求无界 maximumPoolSizes \n    以避免拒绝新提交的任务。当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。\n\n&gt; 无界队列。使用无界队列（例如，不具有预定义容量的 LinkedBlockingQueue）将导致在所有 corePoolSize 线\n    程都忙时新任务在队列中等待。这样，创建的线程就不会超过 corePoolSize。（因此， maximumPoolSize 的\n    值也就无效了。）当每个任务完全独立于其他任务，即任务执行互不影响时，适合于使用无界队列；\n    例如，在 Web 页服务器中。这种排队可用于处理瞬态突发请求，当命令以超过队列所能处理的平均数连\n    续到达时，此策略允许无界线程具有增长的可能性。 \n\n&gt; 有界队列。当使用有限的 maximumPoolSizes 时，有界队列（如 ArrayBlockingQueue）有助于防止资源耗尽，\n    但是可能较难调整和控制。队列大小和最大池大小可能需要相互折衷：使用大型队列和小型池可以最大\n    限度地降低 CPU 使用率、操作系统资源和上下文切换开销，但是可能导致人工降低吞吐量。如果任务频\n    繁阻塞（例如，如果它们是 I/O 边界），则系统可能为超过您许可的更多线程安排时间。使用小型队列\n    通常要求较大的池大小，CPU 使用率较高，但是可能遇到不可接受的调度开销，这样也会降低吞吐量。 \n</code></pre><p> 参数 threadFactory  - 执行程序创建新线程时使用的工厂。</p>\n<pre><code>ThreadFactory 是一种在软件开发过程中封装对象创建过程的面向对象的设计模式。\n</code></pre><p> 参数 handler  - 由于超出线程范围和队列容量而使执行被阻塞时所使用的处理程序。</p>\n<pre><code>无法由 ThreadPoolExecutor 执行的任务的处理程序。\n\n当 Executor 已经关闭，并且 Executor 将有限边界用于最大线程和工作队列容量，且已经饱和时，\n在方法 execute(java.lang.Runnable) 中提交的新任务将被拒绝。\n在以上两种情况下，execute 方法都将调用其 RejectedExecutionHandler 的\nRejectedExecutionHandler.rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor) 方法。\n下面提供了四种预定义的处理程序策略： \n\n&gt; 在默认的 ThreadPoolExecutor.AbortPolicy 中，处理程序遭到拒绝将抛出运行时 RejectedExecutionException 。 \n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbortPolicy</span> <span class=\"keyword\">implements</span> <span class=\"title\">RejectedExecutionHandler</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AbortPolicy</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rejectedExecution</span><span class=\"params\">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RejectedExecutionException(<span class=\"string\">\"Task \"</span> +</span><br><span class=\"line\">\t\tr.toString() +<span class=\"string\">\" rejected from \"</span> + e.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>&gt; 在 ThreadPoolExecutor.CallerRunsPolicy 中，线程调用运行该任务的 execute 本身。\n    此策略提供简单的反馈控制机制，能够减缓新任务的提交速度。 \n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rejectedExecution</span><span class=\"params\">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!e.isShutdown()) &#123;</span><br><span class=\"line\">\t\tr.run();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>&gt; 在 ThreadPoolExecutor.DiscardPolicy 中，不能执行的任务将被删除。\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rejectedExecution</span><span class=\"params\">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>&gt; 在 ThreadPoolExecutor.DiscardOldestPolicy 中，如果执行程序尚未关闭，\n    则位于工作队列头部的任务将被删除，然后重试执行程序（如果再次失败，则重复此过程）。 \n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rejectedExecution</span><span class=\"params\">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!e.isShutdown()) &#123;</span><br><span class=\"line\">\te.getQueue().poll();</span><br><span class=\"line\">\te.execute(r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>定义和使用其他种类的 RejectedExecutionHandler 类也是可能的，但这样做需要非常小心，尤其是当策略仅用于特定容量或排队策略时。 \n</code></pre><h1 id=\"Demo下载\"><a href=\"#Demo下载\" class=\"headerlink\" title=\"Demo下载\"></a>Demo下载</h1><p>在JDK帮助文档中，有如此一段话：<br>“强烈建议程序员使用较为方便的Executors工厂方法<br>    Executors.newCachedThreadPool()（无界线程池，可以进行自动线程回收）、<br>    Executors.newFixedThreadPool(int)（固定大小线程池）<br>    Executors.newSingleThreadExecutor()（单个后台线程）<br>它们均为大多数使用场景预定义了设置。” </p>\n<p><img src=\"/res/img/blog/2014/12/16/Java_Thread_Pool/01.gif\" alt=\"img\"><br><img src=\"/res/img/blog/2014/12/16/Java_Thread_Pool/02.gif\" alt=\"img\"></p>\n<p><a href=\"/res/file/blog/2014/12/16/Java_Thread_Pool/MyThread.rar\">本文Demo下载</a></p>\n<p>本Demo中有Executors提供四种线程池的基本使用,以及自定义实现 ThreadPoolExecutor 线程池暂停,继续运行等介绍.</p>\n","excerpt":"<p>目录</p>\n<pre><code>线程池的作用\nExecutors提供四种线程池\n    newCachedThreadPool\n    newFixedThreadPool\n    newScheduledThreadPool\n    newSingleThreadExecutor\nThreadPoolExecutor类\n</code></pre>","more":"<p>Jdk1.5之后加入了java.util.concurrent包，这个包中主要介绍java中线程以及线程池的使用。</p>\n<h1 id=\"线程池的作用\"><a href=\"#线程池的作用\" class=\"headerlink\" title=\"线程池的作用\"></a>线程池的作用</h1><pre><code>线程池作用就是限制系统中执行线程的数量。   \n     根据系统的环境情况，可以自动或手动设置线程数量，达到运行的最佳效果；   \n     少了浪费了系统资源，多了造成系统拥挤效率不高。用线程池控制线程数量，其他线程排队等候。   \n     一个任务执行完毕，再从队列的中取最前面的任务开始执行。若队列中没有等待进程，线程池的这一资源处于等待。   \n     当一个新任务需要运行时，如果线程池中有等待的工作线程，就可以开始运行了；否则进入等待队列。   \n</code></pre><h1 id=\"使用线程池的好处\"><a href=\"#使用线程池的好处\" class=\"headerlink\" title=\"使用线程池的好处\"></a>使用线程池的好处</h1><pre><code>1.减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。\n2.可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存.\n</code></pre><h1 id=\"比较重要的几个类\"><a href=\"#比较重要的几个类\" class=\"headerlink\" title=\"比较重要的几个类\"></a>比较重要的几个类</h1><pre><code>Java里面线程池的顶级接口是Executor，但是严格意义上讲Executor并不是一个线程池，\n而只是一个执行线程的工具。真正的线程池接口是ExecutorService。\n</code></pre><table>\n<thead>\n<tr>\n<th>类名</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ExecutorService</td>\n<td style=\"text-align:left\">真正的线程池接口。   </td>\n</tr>\n<tr>\n<td>ScheduledExecutorService</td>\n<td style=\"text-align:left\">能和Timer/TimerTask类似，解决那些需要任务重复执行的问题。  </td>\n</tr>\n<tr>\n<td>ThreadPoolExecutor</td>\n<td style=\"text-align:left\">ExecutorService的默认实现。   </td>\n</tr>\n<tr>\n<td>ScheduledThreadPoolExecutor</td>\n<td style=\"text-align:left\">继承ThreadPoolExecutor的ScheduledExecutorService接口实现，周期性任务调度的类实现。</td>\n</tr>\n</tbody>\n</table>\n<p>要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，<br>很有可能配置的线程池不是较优的，因此在Executors类里面提供了一些静态工厂，生成一些常用的线程池。</p>\n<h1 id=\"Executors提供四种线程池\"><a href=\"#Executors提供四种线程池\" class=\"headerlink\" title=\"Executors提供四种线程池\"></a>Executors提供四种线程池</h1><p>Java通过Executors提供四种线程池，分别为：</p>\n<pre><code>&gt; newCachedThreadPool\n    创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。\n&gt; newFixedThreadPool \n    创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。\n&gt; newScheduledThreadPool    \n    创建一个定长线程池，支持定时及周期性任务执行。\n&gt; newSingleThreadExecutor \n    创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。\n</code></pre><h1 id=\"1-newCachedThreadPool\"><a href=\"#1-newCachedThreadPool\" class=\"headerlink\" title=\"(1). newCachedThreadPool\"></a>(1). newCachedThreadPool</h1><pre><code>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。\n线程池为无限大，当执行第二个任务时第一个任务已经完成，会复用执行第一个任务的线程，而不用每次新建线程。\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tThread.sleep(index * <span class=\"number\">1000</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tcachedThreadPool.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(index);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//==========================</span></span><br><span class=\"line\"><span class=\"comment\">//实际调用</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Executors</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, </span><br><span class=\"line\">\t\tInteger.MAX_VALUE,</span><br><span class=\"line\">\t\t<span class=\"number\">60L</span>, </span><br><span class=\"line\">\t\tTimeUnit.SECONDS,</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> SynchronousQueue&amp;lt;Runnable&gt;());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-newFixedThreadPool\"><a href=\"#2-newFixedThreadPool\" class=\"headerlink\" title=\"(2). newFixedThreadPool\"></a>(2). newFixedThreadPool</h1><pre><code>创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。\n定长线程池的大小最好根据系统资源进行设置。如Runtime.getRuntime().availableProcessors()。\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ExecutorService fixedThreadPool = Executors.newFixedThreadPool(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</span><br><span class=\"line\">\tfixedThreadPool.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(index);</span><br><span class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//==========================</span></span><br><span class=\"line\"><span class=\"comment\">//实际调用 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Executors</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, </span><br><span class=\"line\">\t\tnThreads,</span><br><span class=\"line\">\t\t<span class=\"number\">0L</span>,</span><br><span class=\"line\">\t\tTimeUnit.MILLISECONDS,</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> LinkedBlockingQueue&amp;lt;Runnable&gt;());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-newScheduledThreadPool\"><a href=\"#3-newScheduledThreadPool\" class=\"headerlink\" title=\"(3) newScheduledThreadPool\"></a>(3) newScheduledThreadPool</h1><pre><code>创建一个定长线程池，支持定时及周期性任务执行。延迟执行\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(<span class=\"number\">5</span>);</span><br><span class=\"line\">scheduledThreadPool.schedule(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"delay 3 seconds\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">3</span>, TimeUnit.SECONDS);<span class=\"comment\">//表示延时3秒执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">scheduledThreadPool.scheduleAtFixedRate(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"delay 1 seconds, and excute every 3 seconds\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">1</span>, <span class=\"number\">3</span>, TimeUnit.SECONDS);<span class=\"comment\">//表示延迟1秒后每3秒执行一次.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//==========================</span></span><br><span class=\"line\"><span class=\"comment\">//实际调用</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Executors</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ScheduledExecutorService <span class=\"title\">newScheduledThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduledThreadPoolExecutor</span> </span><br><span class=\"line\">\t<span class=\"keyword\">extends</span> <span class=\"title\">ThreadPoolExecutor</span> </span><br><span class=\"line\">\t<span class=\"keyword\">implements</span> <span class=\"title\">ScheduledExecutorService</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScheduledThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(corePoolSize, </span><br><span class=\"line\">\t\t\tInteger.MAX_VALUE, </span><br><span class=\"line\">\t\t\t<span class=\"number\">0</span>, </span><br><span class=\"line\">\t\t\tNANOSECONDS,</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> DelayedWorkQueue());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//上面的super调用</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolExecutor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExecutorService</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span><br><span class=\"line\">\t\t\t      <span class=\"keyword\">int</span> maximumPoolSize,</span><br><span class=\"line\">\t\t\t      <span class=\"keyword\">long</span> keepAliveTime,</span><br><span class=\"line\">\t\t\t      TimeUnit unit,</span><br><span class=\"line\">\t\t\t      BlockingQueue&amp;lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class=\"line\">\t     Executors.defaultThreadFactory(), defaultHandler);<span class=\"comment\">//调用下面构造函数</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span><br><span class=\"line\">                             <span class=\"keyword\">int</span> maximumPoolSize,</span><br><span class=\"line\">                             <span class=\"keyword\">long</span> keepAliveTime,</span><br><span class=\"line\">                             TimeUnit unit,</span><br><span class=\"line\">                             BlockingQueue&amp;lt;Runnable&gt; workQueue,</span><br><span class=\"line\">                             ThreadFactory threadFactory,</span><br><span class=\"line\">                             RejectedExecutionHandler handler)</span> </span>&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-、newSingleThreadExecutor\"><a href=\"#4-、newSingleThreadExecutor\" class=\"headerlink\" title=\"(4)、newSingleThreadExecutor\"></a>(4)、newSingleThreadExecutor</h1><p>创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</span><br><span class=\"line\">\tsingleThreadExecutor.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(index);</span><br><span class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//==========================</span></span><br><span class=\"line\"><span class=\"comment\">//实际调用</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Executors</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FinalizableDelegatedExecutorService</span><br><span class=\"line\">\t\t(<span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t\t    <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">\t\t\t\t    <span class=\"keyword\">new</span> LinkedBlockingQueue&amp;lt;Runnable&gt;()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FinalizableDelegatedExecutorService</span></span><br><span class=\"line\">\t<span class=\"keyword\">extends</span> <span class=\"title\">DelegatedExecutorService</span> </span>&#123;</span><br><span class=\"line\">\tFinalizableDelegatedExecutorService(ExecutorService executor) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(executor);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">finalize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.shutdown();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelegatedExecutorService</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExecutorService</span></span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果依次输出，相当于顺序执行各个任务。</p>\n<p>现行大多数GUI程序都是单线程的。Android中单线程可用于数据库操作，文件操作，应用批量安装，应用批量删除等不适合并发但可能IO阻塞性及影响UI线程响应的操作。</p>\n<h1 id=\"ThreadPoolExecutor\"><a href=\"#ThreadPoolExecutor\" class=\"headerlink\" title=\"ThreadPoolExecutor\"></a>ThreadPoolExecutor</h1><p>ThreadPoolExecutor 的完整构造方法的签名是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolExecutor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExecutorService</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> maximumPoolSize, </span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> keepAliveTime,</span><br><span class=\"line\">\t\tTimeUnit unit, </span><br><span class=\"line\">\t\tBlockingQueue&amp;lt;Runnable&gt; workQueue, </span><br><span class=\"line\">\t\tThreadFactory threadFactory,</span><br><span class=\"line\">\t\tRejectedExecutionHandler handler)</span> </span>&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//corePoolSize - 池中所保存的线程数，包括空闲线程。</span></span><br><span class=\"line\"><span class=\"comment\">//maximumPoolSize -池中允许的最大线程数</span></span><br><span class=\"line\"><span class=\"comment\">//keepAliveTime - 当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间。</span></span><br><span class=\"line\"><span class=\"comment\">//unit - keepAliveTime 参数的时间单位。</span></span><br><span class=\"line\"><span class=\"comment\">//workQueue - 执行前用于保持任务的队列。此队列仅保持由 execute方法提交的 Runnable任务。</span></span><br><span class=\"line\"><span class=\"comment\">//threadFactory - 执行程序创建新线程时使用的工厂。</span></span><br><span class=\"line\"><span class=\"comment\">//handler - 由于超出线程范围和队列容量而使执行被阻塞时所使用的处理程序。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractExecutorService</span> <span class=\"keyword\">implements</span> <span class=\"title\">ExecutorService</span> </span>&#123;&#125;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ExecutorService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Executor</span> </span>&#123;&#125;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Executor</span> </span>&#123;&#125;</span><br><span class=\"line\"> <span class=\"comment\">//以上关系可看出 ThreadPoolExecutor是Executors类的底层实现。</span></span><br></pre></td></tr></table></figure>\n<p> 参数 corePoolSize - 池中所保存的线程数，包括空闲线程。</p>\n<pre><code>同时并发运行的核心线程数量.\n</code></pre><p> 参数 maximumPoolSize -池中允许的最大线程数</p>\n<pre><code>线程最大容纳线程数\n</code></pre><p> 参数 keepAliveTime - 当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间。</p>\n<pre><code>简时一点说就是,当核心线程空闲多长时间后自销毁.\n例如: 当corePoolSize为2个时,maximumPoolSize为3时,用户同时放入3个线程任务到池中.\n    创建线程运行了前两个任务后,还需要运行一个任务,复用前面创建的线程运行\n    最后一个任务,而还有一个线程闲置,keepAliveTime的参数就是当这个闲置线程等待\n    多长时间内都无任务则销毁.而unit则是keepAliveTime的时间单位.\n</code></pre><p> 参数 unit#  - keepAliveTime 参数的时间单位。</p>\n<p> 参数 workQueue#  - 执行前用于保持任务的队列。此队列仅保持由 execute方法提交的 Runnable任务。</p>\n<pre><code>排队\n所有 BlockingQueue 都可用于传输和保持提交的任务。可以使用此队列与池大小进行交互：\n\n&gt; 如果运行的线程少于 corePoolSize，则 Executor 始终首选添加新的线程，而不进行排队。 \n&gt; 如果运行的线程等于或多于 corePoolSize，则 Executor 始终首选将请求加入队列，而不添加新的线程。 \n&gt; 如果无法将请求加入队列，则创建新的线程，除非创建此线程超出 maximumPoolSize，在这种情况下，任务将被拒绝。 \n\n排队Queue有三种通用策略： \n&gt; 直接提交。工作队列的默认选项是 SynchronousQueue ，它将任务直接提交给线程而不保持它们。\n    在此，如果不存在可用于立即运行任务的线程，则试图把任务加入队列将失败，因此会构造一个新的线程。\n    此策略可以避免在处理可能具有内部依赖性的请求集时出现锁。直接提交通常要求无界 maximumPoolSizes \n    以避免拒绝新提交的任务。当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。\n\n&gt; 无界队列。使用无界队列（例如，不具有预定义容量的 LinkedBlockingQueue）将导致在所有 corePoolSize 线\n    程都忙时新任务在队列中等待。这样，创建的线程就不会超过 corePoolSize。（因此， maximumPoolSize 的\n    值也就无效了。）当每个任务完全独立于其他任务，即任务执行互不影响时，适合于使用无界队列；\n    例如，在 Web 页服务器中。这种排队可用于处理瞬态突发请求，当命令以超过队列所能处理的平均数连\n    续到达时，此策略允许无界线程具有增长的可能性。 \n\n&gt; 有界队列。当使用有限的 maximumPoolSizes 时，有界队列（如 ArrayBlockingQueue）有助于防止资源耗尽，\n    但是可能较难调整和控制。队列大小和最大池大小可能需要相互折衷：使用大型队列和小型池可以最大\n    限度地降低 CPU 使用率、操作系统资源和上下文切换开销，但是可能导致人工降低吞吐量。如果任务频\n    繁阻塞（例如，如果它们是 I/O 边界），则系统可能为超过您许可的更多线程安排时间。使用小型队列\n    通常要求较大的池大小，CPU 使用率较高，但是可能遇到不可接受的调度开销，这样也会降低吞吐量。 \n</code></pre><p> 参数 threadFactory  - 执行程序创建新线程时使用的工厂。</p>\n<pre><code>ThreadFactory 是一种在软件开发过程中封装对象创建过程的面向对象的设计模式。\n</code></pre><p> 参数 handler  - 由于超出线程范围和队列容量而使执行被阻塞时所使用的处理程序。</p>\n<pre><code>无法由 ThreadPoolExecutor 执行的任务的处理程序。\n\n当 Executor 已经关闭，并且 Executor 将有限边界用于最大线程和工作队列容量，且已经饱和时，\n在方法 execute(java.lang.Runnable) 中提交的新任务将被拒绝。\n在以上两种情况下，execute 方法都将调用其 RejectedExecutionHandler 的\nRejectedExecutionHandler.rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor) 方法。\n下面提供了四种预定义的处理程序策略： \n\n&gt; 在默认的 ThreadPoolExecutor.AbortPolicy 中，处理程序遭到拒绝将抛出运行时 RejectedExecutionException 。 \n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbortPolicy</span> <span class=\"keyword\">implements</span> <span class=\"title\">RejectedExecutionHandler</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AbortPolicy</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rejectedExecution</span><span class=\"params\">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RejectedExecutionException(<span class=\"string\">\"Task \"</span> +</span><br><span class=\"line\">\t\tr.toString() +<span class=\"string\">\" rejected from \"</span> + e.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>&gt; 在 ThreadPoolExecutor.CallerRunsPolicy 中，线程调用运行该任务的 execute 本身。\n    此策略提供简单的反馈控制机制，能够减缓新任务的提交速度。 \n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rejectedExecution</span><span class=\"params\">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!e.isShutdown()) &#123;</span><br><span class=\"line\">\t\tr.run();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>&gt; 在 ThreadPoolExecutor.DiscardPolicy 中，不能执行的任务将被删除。\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rejectedExecution</span><span class=\"params\">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>&gt; 在 ThreadPoolExecutor.DiscardOldestPolicy 中，如果执行程序尚未关闭，\n    则位于工作队列头部的任务将被删除，然后重试执行程序（如果再次失败，则重复此过程）。 \n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rejectedExecution</span><span class=\"params\">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!e.isShutdown()) &#123;</span><br><span class=\"line\">\te.getQueue().poll();</span><br><span class=\"line\">\te.execute(r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>定义和使用其他种类的 RejectedExecutionHandler 类也是可能的，但这样做需要非常小心，尤其是当策略仅用于特定容量或排队策略时。 \n</code></pre><h1 id=\"Demo下载\"><a href=\"#Demo下载\" class=\"headerlink\" title=\"Demo下载\"></a>Demo下载</h1><p>在JDK帮助文档中，有如此一段话：<br>“强烈建议程序员使用较为方便的Executors工厂方法<br>    Executors.newCachedThreadPool()（无界线程池，可以进行自动线程回收）、<br>    Executors.newFixedThreadPool(int)（固定大小线程池）<br>    Executors.newSingleThreadExecutor()（单个后台线程）<br>它们均为大多数使用场景预定义了设置。” </p>\n<p><img src=\"/res/img/blog/2014/12/16/Java_Thread_Pool/01.gif\" alt=\"img\"><br><img src=\"/res/img/blog/2014/12/16/Java_Thread_Pool/02.gif\" alt=\"img\"></p>\n<p><a href=\"/res/file/blog/2014/12/16/Java_Thread_Pool/MyThread.rar\">本文Demo下载</a></p>\n<p>本Demo中有Executors提供四种线程池的基本使用,以及自定义实现 ThreadPoolExecutor 线程池暂停,继续运行等介绍.</p>"},{"layout":"post","title":"Java线程可见性","duoshuo":true,"date":"2014-12-14T16:00:00.000Z","SyntaxHihglighter":true,"shTheme":"shThemeMidnight","_content":"\n\n目录:\n\n\t1. 共享变量在线程间的可见性\n\t\t1.1 Java内存模型(JMM)\n\t\t1.2 共享变量可见性实现的原理\n\t\t1.3 重排序\n\t\t1.4 as-if-serial语义\n\n\t2. synchronized实现可见性\n\n\t3. volatile实现可见性\n\t\t3.1 volatile适用场景\n\t4. synchoronized和volatile比较\n\n<!-- more -->\n\n---\n\n# 共享变量在线程间的可见性 \n\t\n\t可见性:一个线程对共享变量值的修改,能够及时地被其他线程看到.\n\t共享变量: 如果一个变量在多个线程的工作中都存在副本,那么这个变量就是这个几个线程的共享变量.\n\n## Java内存模型(JMM)\n\t\n\tJava内存模型(Java Memory Model)描述了Java程序中各种变量(线程共享变量)的访问规则,   \n\t以及在JVM中将变量存储到内存和从内存中读取出变量这样的底层细节.\n\t> 所有的变量都存储在主内存中\n\t> 每个线程都有自己独立的工作内存,里面保存该线程使用到的变量的副本(主内存中该变量的一份拷贝)\n\n\n\n\t线程1         线程2     线程3    \n\t↑↓             ↑↓         ↑↓    \n\t-------------------------------------    \n\t工作内存1  工作内存2   工作内存3    \n\tx的副本1   x的副本2    x的副本3    \n\t↑↓              ↑↓        ↑↓    \n\t-------------------------------------    \n\t        主内存   \n\t       共享变量x    \n\n\t两条规定\n\t\t\n\t\t> 线程对共享变量的所有操作都必须在自己的工作内存中进行,不能直接从主内存中读写\n\t\t> 不同线程之间无法直接访问其他线程工作内存中的变量,线程间变量值的传递需要通过主内存来完成.\n\n## 共享变量可见性实现的原理\n\t\n\t线程1对共享变量的修改要想被线程2及时看到,必须要经过如下2个步骤:\n\t> 把工作内存1中更新过的共享变量刷新到主内存中\n\t> 将主内存中读取共享变量的值工作内存2中.\n\n\n要实现共享变量的可见性,必须保证两点:\n\n\t> 线程修改后的共享变量值能够及时从工作内存刷新到主内存中\n\t> 其他线程能够及时把共享变量的最新值从主内存更新到自己的工作内存中.\n\t\n\n## 重排序\n\n\t> 重排序:代码书写的顺序与实际执行的顺序不同,指令重排序是编译器或者处理器为了提高程序性能而做的优化\n\t\t1.编译器优化的重排序(编译器优化)\n\t\t2.指令级并行重排序(处理器优化)\n\t\t3.内存系统的重排序(处理器优化)\n\n\n\t例如:\n\t\t代码顺序:\n\t\tint number = 1\n\t\tint result = 0\n\n\t\t有可能执行顺序:\n\t\tint result = 0\n\t\tint number = 1\n\n## as-if-serial\n\n\t无论如何重排序,程序执行的结果应该与代码顺序执行结果一致\n\t(Java编译器,运行时和处理器都会保证Java在单线程下遵循as-if-serial语义\n\t\n\t例如:\n\tint num1 = 1;//第1行代码\n\tint num2 = 2;//第2行代码\n\tint sum = num1+num2;//第3行代码 \n\n\t单线程:第1,2行的顺序可以重排,但第3行不能\n\t重排序不会给单线程带来内存可见性问题.\n\t多线程中程序交错执行时,重排序可能会造成内存可见性问题\n\n\n\n可见性的实现方式\n\n\tJava语言层面(不包括jdk1.5之后的concurrent包下的高级特性)支持的可见性实现方式:\n\t> synchronized\n\t> voatile\n\n---\t\n\n# synchronized实现可见性\n\t\n\tsynchronized能够实现:\n\t\t> 原子性(同步)\n\t\t> 可见性\n\n\tJMM关于synchronized的两条规定:\n\t\t> 线程解锁前,(离开synchronized代码块前),必须把共享变量的最新值刷新到主内存中.\n\t\t> 线程加锁时,(进入synchronized代码块前),将清空工作内存中共享变量的值,    \n\t\t\t从而使用共享变量时需要从主内存中重新读取最新的值.\n\t\t(注意:加锁,解锁需要同一把锁)\n\t\t线程解锁前对共享变量的修改在下次加锁时对其他线程可见.\n\n\tsynchronized实现可见性\n\t\t线程执行互斥代码的过程:\n\t\t1.获得互斥锁\n\t\t2.清空工作内存\n\t\t3.从主内存拷贝变量的最新副本到工作内存\n\t\t4.执行代码\n\t\t5.将更改后的共享变量的值刷新到主内存\n\t\t6.释放互斥锁\n\t\n<pre class=\"brush: java; ruler: true; first-line: 0; highlight: [] ; auto-links: true ; collapse: true ; gutter: true; \">\t\n\tpackage com.tu.test.visibility;\n\n\tpublic class SynchronizedDemo {\n\t\t// 共享变量\n\t\tprivate boolean ready = false;\n\t\tprivate int result = 0;\n\t\tprivate int number = 1;\n\n\t\t// 写操作\n\t\tpublic void write() {\n\t\t\tready = true; // 1.1\n\t\t\ttry {//为了得到结果一\n\t\t\t\tThread.sleep(100);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t}\n\t\t\tnumber = 2; // 1.2\n\t\t}\n\n\t\t// 读操作\n\t\tpublic void read() {\n\t\t\tif (ready) {// 2.1\n\t\t\t\tresult = number * 3;// 2.2\n\t\t\t}\n\t\t\tSystem.out.println(\"result的值为：\" + result );\n\t\t}\n\n\t\t// 内部线程类\n\t\tprivate class ReadWriteThread extends Thread {\n\t\t\t// 根据构造方法中传入的flag参数,确定线程执行读操作还是写操作\n\t\t\tprivate boolean flag;\n\n\t\t\tpublic ReadWriteThread(boolean flag) {\n\t\t\t\tthis.flag = flag;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tif (flag) {\n\t\t\t\t\twrite();\n\t\t\t\t} else\n\t\t\t\t\tread();\n\t\t\t}\n\t\t}\n\n\t\tpublic static void main(String[] args) {\n\t\t\tfor (int i = 0; i < 100; i++) {\n\t\t\t\tSynchronizedDemo synDemo = new SynchronizedDemo();\n\t\t\t\tsynDemo.new ReadWriteThread(true).start();\n\t\t\t\tsynDemo.new ReadWriteThread(false).start();\n\t\t\t\t// 结果有可能会出现如下情况\n\t\t\t\t//结果一: 1.1->2.1->2.2->1.2 结果:result = 3  <-交错\n\t\t\t\t//结果二: 1.1->2.1->1.2->2.2 结果:result = 6  <-交错\n\t\t\t\t//结果三: 1.1->1.2->2.1->2.2 结果:result = 6\n\t\t\t\t//结果四: 2.1->1.1->1.2 结果:result = 0\n\t\t\t}\n\t\t}\n\t}\n\n</pre>\n\n可见性分析\n\n\t导致共享变量在线程间不可见的原因:\n\t\t1.线程的交叉执行\n\t\t2.重排序结合线程交叉执行\n\t\t3.共享变量更新后的值没有在工作内存与主内存间及时更新\n\n\tsynchronized解决方案:\n\t\t1.原子性()\n\t\t2.原子性\n\t\t3.可见性\n\n\n<pre class=\"brush: java; ruler: true; first-line: 0; highlight: [] ; auto-links: true ; collapse: true ; gutter: true; \">\t\n\t// 写操作\n\tpublic synchronized void write() {\n\t\tready = true; // 1.1\n\t\tnumber = 2; // 1.2\n\t}\n\n\t// 读操作\n\tpublic synchronized void read() {\n\t\tif (ready) {// 2.1\n\t\t\tresult = number * 3;// 2.2\n\t\t}\n\t\tSystem.out.println(\"result的值为：\" + result );\n\t}\n\t//给代码加锁后结果就不同了.`\n\t// 结果有可能会出现如下情况\n\t//结果三: 1.1->1.2->2.1->2.2 结果:result = 6\n\t//结果四: 2.1->1.1->1.2 结果:result = 0\n\t//这两种结果是由线程间谁先争取到CPU的使用权而得出来的不同结果.\n</pre>\n\t\n---\n\n# volatile实现可见性\n\n\t深入来说:通过加入内存屏障和禁止重排序优化来实现的.\n\t> 对volatile变量执行写操作时,会在写操作后加入一条store屏障指令\n\t> 对volatile变量执行读操作时,会在读操作前加入一条load屏障指令\n\t(Java提供了8条屏障指令)\n\t\n\t通俗地讲: volatile变量在第次被线程访问时,都强迫从主内存中重读该变量的值,\n\t而当该变量发生变化时,又会强迫线程将最新的值刷新到主内存.\n\t这样任何时刻,不同的线程总能看到该变量的最新值.\n\n\t线程写volatile变量的过程:\n\t1.改变线程工作内存中volatile变量副本的值\n\t2.将改变后的副本的值从工作内存刷新到主内存\n\n\t线程读volatile变量的过程\n\t1.从主内存中读取volatile变量的最新值到线程在工作内存中.\n\t2.从工作内存中读取volatile变量的副本\n\n\t\n\tvolatile不能保证volatile变量复合操作的原子性:\n\tprivate int number = 0;\n\tnumber++; //不是原子操作, 多线程时有可能会交叉执行或重排序.\n\t1.读取number的值\n\t2.将number的值加1\n\t3.写入最新的number的值\n\t----\n\tsynchronized(this){\n\t\tnumber++;\n\t}\n\t加入synchronized,变为原子操作\n\t1.读取number的值\n\t2.将number的值加1\n\t3.写入最新的number的值\n\t以上3步骤不会被交错执行不会被重排序\n\t----\n\tprivate volatile int number = 0;\n\t变为volatile变量,无法保证原子性\n\n\n<pre class=\"brush: java; ruler: true; first-line: 0; highlight: [] ; auto-links: true ; collapse: true ; gutter: true; \">\n\tpackage com.tu.test.visibility;\n\n\tpublic class VolatileDemo {\n\t\tprivate volatile int number = 0;\n\n\t\tpublic int getNumber() {\n\t\t\treturn this.number;\n\t\t}\n\n\t\tpublic void increase() {\n\t\t\ttry {\n\t\t\t\tThread.sleep(100);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tthis.number++;\n\t\t}\n\n\t\tpublic static void main(String[] args) {\n\t\t\tfinal VolatileDemo volMemo = new VolatileDemo();\n\t\t\tfor (int i = 0; i < 500; i++) {\n\t\t\t\tnew Thread() {\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tvolMemo.increase();\n\t\t\t\t\t};\n\t\t\t\t}.start();\n\t\t\t}\n\n\t\t\t// 如果还有子线程在运行,主线程就让出CPU资源\n\t\t\t// 直到所有的子线程都运行完了,主线程再继续往下执行\n\t\t\twhile (Thread.activeCount() > 1) {\n\t\t\t\tThread.yield();\n\t\t\t}\n\n\t\t\t//正常应该打印number的值为500.但因为number++不是原子\n\t\t\t//操作所以值变的不确定,有可能会小于500的值\n\t\t\tSystem.out.println(\"number\" + volMemo.getNumber());\n\t\t}\n\t}\n\n</pre>\n\n程序分析:\n\n\t假设number=5;\n\t1.线程A读取number的值\n\t2.线程B读取number的值\n\t3.线程B执行加1操作\n\t4.线程B写入最新的number的值\n\t5.线程A执行加1操作\n\t6.线程A写入最新的number的值.把线程B的值覆盖了.\n\t7.两次number++只增加了1\n\t这是因为number自增操作的原子性的原因.\n\n解决方案有:\n\n\t> 保证number自增操作的原子性:\n\t> 使用synchronized关键字   \n\t> 使用JDK1.5后推出的 ReentrantLock (java.until.concurrent.locks包下)   \n\t> 使用JDK1.5后推出的 AtomicInterger (java.util.concurrent.atomic包下)   \n\n\n<pre class=\"brush: java; ruler: true; first-line: 0; highlight: [] ; auto-links: true ; collapse: true ; gutter: true; \">\n\n//原\n//private volatile int number = 0;\n//修改\nprivate int number = 0;\n\n//原\n//public void increase() {\n//\ttry {\n//\t\tThread.sleep(100);\n//\t} catch (InterruptedException e) {\n//\t\t// TODO Auto-generated catch block\n//\t\te.printStackTrace();\n//\t}\n//\tthis.number++;\n//}\n//修改 使用 synchronized 实现原子性\npublic void increase() {\n\ttry {\n\t\tThread.sleep(100);\n\t} catch (InterruptedException e) {\n\t\te.printStackTrace();\n\t}\n\tsynchronized (this) {\n\t\tthis.number++;\n\t}\n}\n\n//修改使用 ReentrantLock 实现原子性\nprivate Lock lock = new ReentrantLock();\npublic void increase() {\n\ttry {\n\t\tThread.sleep(100);\n\t} catch (InterruptedException e) {\n\t\te.printStackTrace();\n\t}\n\tlock.lock();//加锁\n\ttry {\n\t\tthis.number++;\n\t} finally {\n\t\tlock.unlock();//解锁 .防止try有异常.JDK推荐写法try..finally\n\t}\n}\n\n</pre>\n\n\n\n## volatile适用场景\n\t\n\t因volatile只能保证变量的可见性,不能保证操作的原子性.\n\t\n\t要在多线程中安全的使用volatile变量,必须同时满足:\n\t> 1.对变量的写入操作不依赖其当前值(即改变后的volatile的值与改变前的值不要有关系)\n\t\t不满足: number++ , count = count*5等这类操作.\n\t\t满足: boolean变量,记录温度变化的变量等.\n\t> 2.该变量没有包含在具有其他变量的不变式中.   \n\t\t(即程序中有多个volatile变量,那么,每个volatile变量的状态要独立其它volatile变量)\n\t\t例如:\n\t\t程序中有两个volatile变量low 与up\n\t\t不满足: 不变式low<up\n\t\t\n---\n\n# synchronized和volatile比较\n\n\t> volatile不需要加锁,比synchronized更轻量级,不会阻塞线程.\n\t> 从内存可见性角度讲,volatile读相当于加锁,volatile写相当于解释锁\n\t> synchronized即能保证可见性,又能保证原子性,而volatile只能保证可见性,无法保证原子性.\n\n---\n\n问题补充:\n\n\t即使没有保证可见性的措施,很多时候共享变量依然能够在主内存和工作内存见得到及时更新:\n\t\t一般只有在短时间内高并发的情况下才会出现变量得不到及时更新的情况,因为\n\t\tCPU在执行时会很快地刷新缓存,所以一般情况下很难看到这种问题.\n\n\n\t对64位(long,double)变量的读写可能不是原子操作:\n\t\t>Java内存模型允许JVM将没有被volatile修饰的64位数据类型的读写操作\n\t\t划分为两次32位的读写操作来进行.\n\n\t\t导致问题: 有可能会出现读取到\" 半个变量 \"的情况\n\t\t解决方法: 加volatile关键字 \n\t\t实际上很多商用JVM已经为long,double作为原子性来进行操作处理\n\n\n---\n\n# Demo下载\n\n[本文案例Demo](/res/file/blog/2014/12/15/Java_Throad_Visibility/ThreadTheVisibility.rar)\n\n","source":"_posts/2014-12-15-Java_Throad_Visibility.md","raw":"---\nlayout : post\ntitle : \"Java线程可见性\"\ncategory : Java\nduoshuo: true\ndate : 2014-12-15\ntags : [synchronized,volatile ,ReentrantLock, 原子性,可见性,重排序]\nSyntaxHihglighter: true\nshTheme: shThemeMidnight # shThemeDefault  shThemeDjango  shThemeEclipse  shThemeEmacs  shThemeFadeToGrey  shThemeMidnight  shThemeRDark\n\n---\n\n\n目录:\n\n\t1. 共享变量在线程间的可见性\n\t\t1.1 Java内存模型(JMM)\n\t\t1.2 共享变量可见性实现的原理\n\t\t1.3 重排序\n\t\t1.4 as-if-serial语义\n\n\t2. synchronized实现可见性\n\n\t3. volatile实现可见性\n\t\t3.1 volatile适用场景\n\t4. synchoronized和volatile比较\n\n<!-- more -->\n\n---\n\n# 共享变量在线程间的可见性 \n\t\n\t可见性:一个线程对共享变量值的修改,能够及时地被其他线程看到.\n\t共享变量: 如果一个变量在多个线程的工作中都存在副本,那么这个变量就是这个几个线程的共享变量.\n\n## Java内存模型(JMM)\n\t\n\tJava内存模型(Java Memory Model)描述了Java程序中各种变量(线程共享变量)的访问规则,   \n\t以及在JVM中将变量存储到内存和从内存中读取出变量这样的底层细节.\n\t> 所有的变量都存储在主内存中\n\t> 每个线程都有自己独立的工作内存,里面保存该线程使用到的变量的副本(主内存中该变量的一份拷贝)\n\n\n\n\t线程1         线程2     线程3    \n\t↑↓             ↑↓         ↑↓    \n\t-------------------------------------    \n\t工作内存1  工作内存2   工作内存3    \n\tx的副本1   x的副本2    x的副本3    \n\t↑↓              ↑↓        ↑↓    \n\t-------------------------------------    \n\t        主内存   \n\t       共享变量x    \n\n\t两条规定\n\t\t\n\t\t> 线程对共享变量的所有操作都必须在自己的工作内存中进行,不能直接从主内存中读写\n\t\t> 不同线程之间无法直接访问其他线程工作内存中的变量,线程间变量值的传递需要通过主内存来完成.\n\n## 共享变量可见性实现的原理\n\t\n\t线程1对共享变量的修改要想被线程2及时看到,必须要经过如下2个步骤:\n\t> 把工作内存1中更新过的共享变量刷新到主内存中\n\t> 将主内存中读取共享变量的值工作内存2中.\n\n\n要实现共享变量的可见性,必须保证两点:\n\n\t> 线程修改后的共享变量值能够及时从工作内存刷新到主内存中\n\t> 其他线程能够及时把共享变量的最新值从主内存更新到自己的工作内存中.\n\t\n\n## 重排序\n\n\t> 重排序:代码书写的顺序与实际执行的顺序不同,指令重排序是编译器或者处理器为了提高程序性能而做的优化\n\t\t1.编译器优化的重排序(编译器优化)\n\t\t2.指令级并行重排序(处理器优化)\n\t\t3.内存系统的重排序(处理器优化)\n\n\n\t例如:\n\t\t代码顺序:\n\t\tint number = 1\n\t\tint result = 0\n\n\t\t有可能执行顺序:\n\t\tint result = 0\n\t\tint number = 1\n\n## as-if-serial\n\n\t无论如何重排序,程序执行的结果应该与代码顺序执行结果一致\n\t(Java编译器,运行时和处理器都会保证Java在单线程下遵循as-if-serial语义\n\t\n\t例如:\n\tint num1 = 1;//第1行代码\n\tint num2 = 2;//第2行代码\n\tint sum = num1+num2;//第3行代码 \n\n\t单线程:第1,2行的顺序可以重排,但第3行不能\n\t重排序不会给单线程带来内存可见性问题.\n\t多线程中程序交错执行时,重排序可能会造成内存可见性问题\n\n\n\n可见性的实现方式\n\n\tJava语言层面(不包括jdk1.5之后的concurrent包下的高级特性)支持的可见性实现方式:\n\t> synchronized\n\t> voatile\n\n---\t\n\n# synchronized实现可见性\n\t\n\tsynchronized能够实现:\n\t\t> 原子性(同步)\n\t\t> 可见性\n\n\tJMM关于synchronized的两条规定:\n\t\t> 线程解锁前,(离开synchronized代码块前),必须把共享变量的最新值刷新到主内存中.\n\t\t> 线程加锁时,(进入synchronized代码块前),将清空工作内存中共享变量的值,    \n\t\t\t从而使用共享变量时需要从主内存中重新读取最新的值.\n\t\t(注意:加锁,解锁需要同一把锁)\n\t\t线程解锁前对共享变量的修改在下次加锁时对其他线程可见.\n\n\tsynchronized实现可见性\n\t\t线程执行互斥代码的过程:\n\t\t1.获得互斥锁\n\t\t2.清空工作内存\n\t\t3.从主内存拷贝变量的最新副本到工作内存\n\t\t4.执行代码\n\t\t5.将更改后的共享变量的值刷新到主内存\n\t\t6.释放互斥锁\n\t\n<pre class=\"brush: java; ruler: true; first-line: 0; highlight: [] ; auto-links: true ; collapse: true ; gutter: true; \">\t\n\tpackage com.tu.test.visibility;\n\n\tpublic class SynchronizedDemo {\n\t\t// 共享变量\n\t\tprivate boolean ready = false;\n\t\tprivate int result = 0;\n\t\tprivate int number = 1;\n\n\t\t// 写操作\n\t\tpublic void write() {\n\t\t\tready = true; // 1.1\n\t\t\ttry {//为了得到结果一\n\t\t\t\tThread.sleep(100);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t}\n\t\t\tnumber = 2; // 1.2\n\t\t}\n\n\t\t// 读操作\n\t\tpublic void read() {\n\t\t\tif (ready) {// 2.1\n\t\t\t\tresult = number * 3;// 2.2\n\t\t\t}\n\t\t\tSystem.out.println(\"result的值为：\" + result );\n\t\t}\n\n\t\t// 内部线程类\n\t\tprivate class ReadWriteThread extends Thread {\n\t\t\t// 根据构造方法中传入的flag参数,确定线程执行读操作还是写操作\n\t\t\tprivate boolean flag;\n\n\t\t\tpublic ReadWriteThread(boolean flag) {\n\t\t\t\tthis.flag = flag;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tif (flag) {\n\t\t\t\t\twrite();\n\t\t\t\t} else\n\t\t\t\t\tread();\n\t\t\t}\n\t\t}\n\n\t\tpublic static void main(String[] args) {\n\t\t\tfor (int i = 0; i < 100; i++) {\n\t\t\t\tSynchronizedDemo synDemo = new SynchronizedDemo();\n\t\t\t\tsynDemo.new ReadWriteThread(true).start();\n\t\t\t\tsynDemo.new ReadWriteThread(false).start();\n\t\t\t\t// 结果有可能会出现如下情况\n\t\t\t\t//结果一: 1.1->2.1->2.2->1.2 结果:result = 3  <-交错\n\t\t\t\t//结果二: 1.1->2.1->1.2->2.2 结果:result = 6  <-交错\n\t\t\t\t//结果三: 1.1->1.2->2.1->2.2 结果:result = 6\n\t\t\t\t//结果四: 2.1->1.1->1.2 结果:result = 0\n\t\t\t}\n\t\t}\n\t}\n\n</pre>\n\n可见性分析\n\n\t导致共享变量在线程间不可见的原因:\n\t\t1.线程的交叉执行\n\t\t2.重排序结合线程交叉执行\n\t\t3.共享变量更新后的值没有在工作内存与主内存间及时更新\n\n\tsynchronized解决方案:\n\t\t1.原子性()\n\t\t2.原子性\n\t\t3.可见性\n\n\n<pre class=\"brush: java; ruler: true; first-line: 0; highlight: [] ; auto-links: true ; collapse: true ; gutter: true; \">\t\n\t// 写操作\n\tpublic synchronized void write() {\n\t\tready = true; // 1.1\n\t\tnumber = 2; // 1.2\n\t}\n\n\t// 读操作\n\tpublic synchronized void read() {\n\t\tif (ready) {// 2.1\n\t\t\tresult = number * 3;// 2.2\n\t\t}\n\t\tSystem.out.println(\"result的值为：\" + result );\n\t}\n\t//给代码加锁后结果就不同了.`\n\t// 结果有可能会出现如下情况\n\t//结果三: 1.1->1.2->2.1->2.2 结果:result = 6\n\t//结果四: 2.1->1.1->1.2 结果:result = 0\n\t//这两种结果是由线程间谁先争取到CPU的使用权而得出来的不同结果.\n</pre>\n\t\n---\n\n# volatile实现可见性\n\n\t深入来说:通过加入内存屏障和禁止重排序优化来实现的.\n\t> 对volatile变量执行写操作时,会在写操作后加入一条store屏障指令\n\t> 对volatile变量执行读操作时,会在读操作前加入一条load屏障指令\n\t(Java提供了8条屏障指令)\n\t\n\t通俗地讲: volatile变量在第次被线程访问时,都强迫从主内存中重读该变量的值,\n\t而当该变量发生变化时,又会强迫线程将最新的值刷新到主内存.\n\t这样任何时刻,不同的线程总能看到该变量的最新值.\n\n\t线程写volatile变量的过程:\n\t1.改变线程工作内存中volatile变量副本的值\n\t2.将改变后的副本的值从工作内存刷新到主内存\n\n\t线程读volatile变量的过程\n\t1.从主内存中读取volatile变量的最新值到线程在工作内存中.\n\t2.从工作内存中读取volatile变量的副本\n\n\t\n\tvolatile不能保证volatile变量复合操作的原子性:\n\tprivate int number = 0;\n\tnumber++; //不是原子操作, 多线程时有可能会交叉执行或重排序.\n\t1.读取number的值\n\t2.将number的值加1\n\t3.写入最新的number的值\n\t----\n\tsynchronized(this){\n\t\tnumber++;\n\t}\n\t加入synchronized,变为原子操作\n\t1.读取number的值\n\t2.将number的值加1\n\t3.写入最新的number的值\n\t以上3步骤不会被交错执行不会被重排序\n\t----\n\tprivate volatile int number = 0;\n\t变为volatile变量,无法保证原子性\n\n\n<pre class=\"brush: java; ruler: true; first-line: 0; highlight: [] ; auto-links: true ; collapse: true ; gutter: true; \">\n\tpackage com.tu.test.visibility;\n\n\tpublic class VolatileDemo {\n\t\tprivate volatile int number = 0;\n\n\t\tpublic int getNumber() {\n\t\t\treturn this.number;\n\t\t}\n\n\t\tpublic void increase() {\n\t\t\ttry {\n\t\t\t\tThread.sleep(100);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tthis.number++;\n\t\t}\n\n\t\tpublic static void main(String[] args) {\n\t\t\tfinal VolatileDemo volMemo = new VolatileDemo();\n\t\t\tfor (int i = 0; i < 500; i++) {\n\t\t\t\tnew Thread() {\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tvolMemo.increase();\n\t\t\t\t\t};\n\t\t\t\t}.start();\n\t\t\t}\n\n\t\t\t// 如果还有子线程在运行,主线程就让出CPU资源\n\t\t\t// 直到所有的子线程都运行完了,主线程再继续往下执行\n\t\t\twhile (Thread.activeCount() > 1) {\n\t\t\t\tThread.yield();\n\t\t\t}\n\n\t\t\t//正常应该打印number的值为500.但因为number++不是原子\n\t\t\t//操作所以值变的不确定,有可能会小于500的值\n\t\t\tSystem.out.println(\"number\" + volMemo.getNumber());\n\t\t}\n\t}\n\n</pre>\n\n程序分析:\n\n\t假设number=5;\n\t1.线程A读取number的值\n\t2.线程B读取number的值\n\t3.线程B执行加1操作\n\t4.线程B写入最新的number的值\n\t5.线程A执行加1操作\n\t6.线程A写入最新的number的值.把线程B的值覆盖了.\n\t7.两次number++只增加了1\n\t这是因为number自增操作的原子性的原因.\n\n解决方案有:\n\n\t> 保证number自增操作的原子性:\n\t> 使用synchronized关键字   \n\t> 使用JDK1.5后推出的 ReentrantLock (java.until.concurrent.locks包下)   \n\t> 使用JDK1.5后推出的 AtomicInterger (java.util.concurrent.atomic包下)   \n\n\n<pre class=\"brush: java; ruler: true; first-line: 0; highlight: [] ; auto-links: true ; collapse: true ; gutter: true; \">\n\n//原\n//private volatile int number = 0;\n//修改\nprivate int number = 0;\n\n//原\n//public void increase() {\n//\ttry {\n//\t\tThread.sleep(100);\n//\t} catch (InterruptedException e) {\n//\t\t// TODO Auto-generated catch block\n//\t\te.printStackTrace();\n//\t}\n//\tthis.number++;\n//}\n//修改 使用 synchronized 实现原子性\npublic void increase() {\n\ttry {\n\t\tThread.sleep(100);\n\t} catch (InterruptedException e) {\n\t\te.printStackTrace();\n\t}\n\tsynchronized (this) {\n\t\tthis.number++;\n\t}\n}\n\n//修改使用 ReentrantLock 实现原子性\nprivate Lock lock = new ReentrantLock();\npublic void increase() {\n\ttry {\n\t\tThread.sleep(100);\n\t} catch (InterruptedException e) {\n\t\te.printStackTrace();\n\t}\n\tlock.lock();//加锁\n\ttry {\n\t\tthis.number++;\n\t} finally {\n\t\tlock.unlock();//解锁 .防止try有异常.JDK推荐写法try..finally\n\t}\n}\n\n</pre>\n\n\n\n## volatile适用场景\n\t\n\t因volatile只能保证变量的可见性,不能保证操作的原子性.\n\t\n\t要在多线程中安全的使用volatile变量,必须同时满足:\n\t> 1.对变量的写入操作不依赖其当前值(即改变后的volatile的值与改变前的值不要有关系)\n\t\t不满足: number++ , count = count*5等这类操作.\n\t\t满足: boolean变量,记录温度变化的变量等.\n\t> 2.该变量没有包含在具有其他变量的不变式中.   \n\t\t(即程序中有多个volatile变量,那么,每个volatile变量的状态要独立其它volatile变量)\n\t\t例如:\n\t\t程序中有两个volatile变量low 与up\n\t\t不满足: 不变式low<up\n\t\t\n---\n\n# synchronized和volatile比较\n\n\t> volatile不需要加锁,比synchronized更轻量级,不会阻塞线程.\n\t> 从内存可见性角度讲,volatile读相当于加锁,volatile写相当于解释锁\n\t> synchronized即能保证可见性,又能保证原子性,而volatile只能保证可见性,无法保证原子性.\n\n---\n\n问题补充:\n\n\t即使没有保证可见性的措施,很多时候共享变量依然能够在主内存和工作内存见得到及时更新:\n\t\t一般只有在短时间内高并发的情况下才会出现变量得不到及时更新的情况,因为\n\t\tCPU在执行时会很快地刷新缓存,所以一般情况下很难看到这种问题.\n\n\n\t对64位(long,double)变量的读写可能不是原子操作:\n\t\t>Java内存模型允许JVM将没有被volatile修饰的64位数据类型的读写操作\n\t\t划分为两次32位的读写操作来进行.\n\n\t\t导致问题: 有可能会出现读取到\" 半个变量 \"的情况\n\t\t解决方法: 加volatile关键字 \n\t\t实际上很多商用JVM已经为long,double作为原子性来进行操作处理\n\n\n---\n\n# Demo下载\n\n[本文案例Demo](/res/file/blog/2014/12/15/Java_Throad_Visibility/ThreadTheVisibility.rar)\n\n","slug":"Java_Throad_Visibility","published":1,"updated":"2016-04-27T03:15:42.141Z","comments":1,"photos":[],"link":"","_id":"cinu3etym001oxoj0hbsgzkrh","content":"<p>目录:</p>\n<pre><code>1. 共享变量在线程间的可见性\n    1.1 Java内存模型(JMM)\n    1.2 共享变量可见性实现的原理\n    1.3 重排序\n    1.4 as-if-serial语义\n\n2. synchronized实现可见性\n\n3. volatile实现可见性\n    3.1 volatile适用场景\n4. synchoronized和volatile比较\n</code></pre><a id=\"more\"></a>\n<hr>\n<h1 id=\"共享变量在线程间的可见性\"><a href=\"#共享变量在线程间的可见性\" class=\"headerlink\" title=\"共享变量在线程间的可见性\"></a>共享变量在线程间的可见性</h1><pre><code>可见性:一个线程对共享变量值的修改,能够及时地被其他线程看到.\n共享变量: 如果一个变量在多个线程的工作中都存在副本,那么这个变量就是这个几个线程的共享变量.\n</code></pre><h2 id=\"Java内存模型-JMM\"><a href=\"#Java内存模型-JMM\" class=\"headerlink\" title=\"Java内存模型(JMM)\"></a>Java内存模型(JMM)</h2><pre><code>Java内存模型(Java Memory Model)描述了Java程序中各种变量(线程共享变量)的访问规则,   \n以及在JVM中将变量存储到内存和从内存中读取出变量这样的底层细节.\n&gt; 所有的变量都存储在主内存中\n&gt; 每个线程都有自己独立的工作内存,里面保存该线程使用到的变量的副本(主内存中该变量的一份拷贝)\n\n\n\n线程1         线程2     线程3    \n↑↓             ↑↓         ↑↓    \n-------------------------------------    \n工作内存1  工作内存2   工作内存3    \nx的副本1   x的副本2    x的副本3    \n↑↓              ↑↓        ↑↓    \n-------------------------------------    \n        主内存   \n       共享变量x    \n\n两条规定\n\n    &gt; 线程对共享变量的所有操作都必须在自己的工作内存中进行,不能直接从主内存中读写\n    &gt; 不同线程之间无法直接访问其他线程工作内存中的变量,线程间变量值的传递需要通过主内存来完成.\n</code></pre><h2 id=\"共享变量可见性实现的原理\"><a href=\"#共享变量可见性实现的原理\" class=\"headerlink\" title=\"共享变量可见性实现的原理\"></a>共享变量可见性实现的原理</h2><pre><code>线程1对共享变量的修改要想被线程2及时看到,必须要经过如下2个步骤:\n&gt; 把工作内存1中更新过的共享变量刷新到主内存中\n&gt; 将主内存中读取共享变量的值工作内存2中.\n</code></pre><p>要实现共享变量的可见性,必须保证两点:</p>\n<pre><code>&gt; 线程修改后的共享变量值能够及时从工作内存刷新到主内存中\n&gt; 其他线程能够及时把共享变量的最新值从主内存更新到自己的工作内存中.\n</code></pre><h2 id=\"重排序\"><a href=\"#重排序\" class=\"headerlink\" title=\"重排序\"></a>重排序</h2><pre><code>&gt; 重排序:代码书写的顺序与实际执行的顺序不同,指令重排序是编译器或者处理器为了提高程序性能而做的优化\n    1.编译器优化的重排序(编译器优化)\n    2.指令级并行重排序(处理器优化)\n    3.内存系统的重排序(处理器优化)\n\n\n例如:\n    代码顺序:\n    int number = 1\n    int result = 0\n\n    有可能执行顺序:\n    int result = 0\n    int number = 1\n</code></pre><h2 id=\"as-if-serial\"><a href=\"#as-if-serial\" class=\"headerlink\" title=\"as-if-serial\"></a>as-if-serial</h2><pre><code>无论如何重排序,程序执行的结果应该与代码顺序执行结果一致\n(Java编译器,运行时和处理器都会保证Java在单线程下遵循as-if-serial语义\n\n例如:\nint num1 = 1;//第1行代码\nint num2 = 2;//第2行代码\nint sum = num1+num2;//第3行代码 \n\n单线程:第1,2行的顺序可以重排,但第3行不能\n重排序不会给单线程带来内存可见性问题.\n多线程中程序交错执行时,重排序可能会造成内存可见性问题\n</code></pre><p>可见性的实现方式</p>\n<pre><code>Java语言层面(不包括jdk1.5之后的concurrent包下的高级特性)支持的可见性实现方式:\n&gt; synchronized\n&gt; voatile\n</code></pre><hr>\n<h1 id=\"synchronized实现可见性\"><a href=\"#synchronized实现可见性\" class=\"headerlink\" title=\"synchronized实现可见性\"></a>synchronized实现可见性</h1><pre><code>synchronized能够实现:\n    &gt; 原子性(同步)\n    &gt; 可见性\n\nJMM关于synchronized的两条规定:\n    &gt; 线程解锁前,(离开synchronized代码块前),必须把共享变量的最新值刷新到主内存中.\n    &gt; 线程加锁时,(进入synchronized代码块前),将清空工作内存中共享变量的值,    \n        从而使用共享变量时需要从主内存中重新读取最新的值.\n    (注意:加锁,解锁需要同一把锁)\n    线程解锁前对共享变量的修改在下次加锁时对其他线程可见.\n\nsynchronized实现可见性\n    线程执行互斥代码的过程:\n    1.获得互斥锁\n    2.清空工作内存\n    3.从主内存拷贝变量的最新副本到工作内存\n    4.执行代码\n    5.将更改后的共享变量的值刷新到主内存\n    6.释放互斥锁\n</code></pre><pre class=\"brush: java; ruler: true; first-line: 0; highlight: [] ; auto-links: true ; collapse: true ; gutter: true; \">    \n    package com.tu.test.visibility;\n\n    public class SynchronizedDemo {\n        // 共享变量\n        private boolean ready = false;\n        private int result = 0;\n        private int number = 1;\n\n        // 写操作\n        public void write() {\n            ready = true; // 1.1\n            try {//为了得到结果一\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n            }\n            number = 2; // 1.2\n        }\n\n        // 读操作\n        public void read() {\n            if (ready) {// 2.1\n                result = number * 3;// 2.2\n            }\n            System.out.println(\"result的值为：\" + result );\n        }\n\n        // 内部线程类\n        private class ReadWriteThread extends Thread {\n            // 根据构造方法中传入的flag参数,确定线程执行读操作还是写操作\n            private boolean flag;\n\n            public ReadWriteThread(boolean flag) {\n                this.flag = flag;\n            }\n\n            @Override\n            public void run() {\n                if (flag) {\n                    write();\n                } else\n                    read();\n            }\n        }\n\n        public static void main(String[] args) {\n            for (int i = 0; i < 100; i++) {\n                SynchronizedDemo synDemo = new SynchronizedDemo();\n                synDemo.new ReadWriteThread(true).start();\n                synDemo.new ReadWriteThread(false).start();\n                // 结果有可能会出现如下情况\n                //结果一: 1.1->2.1->2.2->1.2 结果:result = 3  <-交错 结果二:=\"\" 1.1-=\"\">2.1->1.2->2.2 结果:result = 6  <-交错 结果三:=\"\" 1.1-=\"\">1.2->2.1->2.2 结果:result = 6\n                //结果四: 2.1->1.1->1.2 结果:result = 0\n            }\n        }\n    }\n\n</-交错></-交错></pre>\n\n<p>可见性分析</p>\n<pre><code>导致共享变量在线程间不可见的原因:\n    1.线程的交叉执行\n    2.重排序结合线程交叉执行\n    3.共享变量更新后的值没有在工作内存与主内存间及时更新\n\nsynchronized解决方案:\n    1.原子性()\n    2.原子性\n    3.可见性\n</code></pre><pre class=\"brush: java; ruler: true; first-line: 0; highlight: [] ; auto-links: true ; collapse: true ; gutter: true; \">    \n    // 写操作\n    public synchronized void write() {\n        ready = true; // 1.1\n        number = 2; // 1.2\n    }\n\n    // 读操作\n    public synchronized void read() {\n        if (ready) {// 2.1\n            result = number * 3;// 2.2\n        }\n        System.out.println(\"result的值为：\" + result );\n    }\n    //给代码加锁后结果就不同了.`\n    // 结果有可能会出现如下情况\n    //结果三: 1.1->1.2->2.1->2.2 结果:result = 6\n    //结果四: 2.1->1.1->1.2 结果:result = 0\n    //这两种结果是由线程间谁先争取到CPU的使用权而得出来的不同结果.\n</pre>\n\n<hr>\n<h1 id=\"volatile实现可见性\"><a href=\"#volatile实现可见性\" class=\"headerlink\" title=\"volatile实现可见性\"></a>volatile实现可见性</h1><pre><code>深入来说:通过加入内存屏障和禁止重排序优化来实现的.\n&gt; 对volatile变量执行写操作时,会在写操作后加入一条store屏障指令\n&gt; 对volatile变量执行读操作时,会在读操作前加入一条load屏障指令\n(Java提供了8条屏障指令)\n\n通俗地讲: volatile变量在第次被线程访问时,都强迫从主内存中重读该变量的值,\n而当该变量发生变化时,又会强迫线程将最新的值刷新到主内存.\n这样任何时刻,不同的线程总能看到该变量的最新值.\n\n线程写volatile变量的过程:\n1.改变线程工作内存中volatile变量副本的值\n2.将改变后的副本的值从工作内存刷新到主内存\n\n线程读volatile变量的过程\n1.从主内存中读取volatile变量的最新值到线程在工作内存中.\n2.从工作内存中读取volatile变量的副本\n\n\nvolatile不能保证volatile变量复合操作的原子性:\nprivate int number = 0;\nnumber++; //不是原子操作, 多线程时有可能会交叉执行或重排序.\n1.读取number的值\n2.将number的值加1\n3.写入最新的number的值\n----\nsynchronized(this){\n    number++;\n}\n加入synchronized,变为原子操作\n1.读取number的值\n2.将number的值加1\n3.写入最新的number的值\n以上3步骤不会被交错执行不会被重排序\n----\nprivate volatile int number = 0;\n变为volatile变量,无法保证原子性\n</code></pre><pre class=\"brush: java; ruler: true; first-line: 0; highlight: [] ; auto-links: true ; collapse: true ; gutter: true; \">\n    package com.tu.test.visibility;\n\n    public class VolatileDemo {\n        private volatile int number = 0;\n\n        public int getNumber() {\n            return this.number;\n        }\n\n        public void increase() {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n            this.number++;\n        }\n\n        public static void main(String[] args) {\n            final VolatileDemo volMemo = new VolatileDemo();\n            for (int i = 0; i < 500; i++) {\n                new Thread() {\n                    public void run() {\n                        volMemo.increase();\n                    };\n                }.start();\n            }\n\n            // 如果还有子线程在运行,主线程就让出CPU资源\n            // 直到所有的子线程都运行完了,主线程再继续往下执行\n            while (Thread.activeCount() > 1) {\n                Thread.yield();\n            }\n\n            //正常应该打印number的值为500.但因为number++不是原子\n            //操作所以值变的不确定,有可能会小于500的值\n            System.out.println(\"number\" + volMemo.getNumber());\n        }\n    }\n\n</pre>\n\n<p>程序分析:</p>\n<pre><code>假设number=5;\n1.线程A读取number的值\n2.线程B读取number的值\n3.线程B执行加1操作\n4.线程B写入最新的number的值\n5.线程A执行加1操作\n6.线程A写入最新的number的值.把线程B的值覆盖了.\n7.两次number++只增加了1\n这是因为number自增操作的原子性的原因.\n</code></pre><p>解决方案有:</p>\n<pre><code>&gt; 保证number自增操作的原子性:\n&gt; 使用synchronized关键字   \n&gt; 使用JDK1.5后推出的 ReentrantLock (java.until.concurrent.locks包下)   \n&gt; 使用JDK1.5后推出的 AtomicInterger (java.util.concurrent.atomic包下)   \n</code></pre><pre class=\"brush: java; ruler: true; first-line: 0; highlight: [] ; auto-links: true ; collapse: true ; gutter: true; \">\n\n//原\n//private volatile int number = 0;\n//修改\nprivate int number = 0;\n\n//原\n//public void increase() {\n//    try {\n//        Thread.sleep(100);\n//    } catch (InterruptedException e) {\n//        // TODO Auto-generated catch block\n//        e.printStackTrace();\n//    }\n//    this.number++;\n//}\n//修改 使用 synchronized 实现原子性\npublic void increase() {\n    try {\n        Thread.sleep(100);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    synchronized (this) {\n        this.number++;\n    }\n}\n\n//修改使用 ReentrantLock 实现原子性\nprivate Lock lock = new ReentrantLock();\npublic void increase() {\n    try {\n        Thread.sleep(100);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    lock.lock();//加锁\n    try {\n        this.number++;\n    } finally {\n        lock.unlock();//解锁 .防止try有异常.JDK推荐写法try..finally\n    }\n}\n\n</pre>\n\n\n\n<h2 id=\"volatile适用场景\"><a href=\"#volatile适用场景\" class=\"headerlink\" title=\"volatile适用场景\"></a>volatile适用场景</h2><pre><code>因volatile只能保证变量的可见性,不能保证操作的原子性.\n\n要在多线程中安全的使用volatile变量,必须同时满足:\n&gt; 1.对变量的写入操作不依赖其当前值(即改变后的volatile的值与改变前的值不要有关系)\n    不满足: number++ , count = count*5等这类操作.\n    满足: boolean变量,记录温度变化的变量等.\n&gt; 2.该变量没有包含在具有其他变量的不变式中.   \n    (即程序中有多个volatile变量,那么,每个volatile变量的状态要独立其它volatile变量)\n    例如:\n    程序中有两个volatile变量low 与up\n    不满足: 不变式low&lt;up\n</code></pre><hr>\n<h1 id=\"synchronized和volatile比较\"><a href=\"#synchronized和volatile比较\" class=\"headerlink\" title=\"synchronized和volatile比较\"></a>synchronized和volatile比较</h1><pre><code>&gt; volatile不需要加锁,比synchronized更轻量级,不会阻塞线程.\n&gt; 从内存可见性角度讲,volatile读相当于加锁,volatile写相当于解释锁\n&gt; synchronized即能保证可见性,又能保证原子性,而volatile只能保证可见性,无法保证原子性.\n</code></pre><hr>\n<p>问题补充:</p>\n<pre><code>即使没有保证可见性的措施,很多时候共享变量依然能够在主内存和工作内存见得到及时更新:\n    一般只有在短时间内高并发的情况下才会出现变量得不到及时更新的情况,因为\n    CPU在执行时会很快地刷新缓存,所以一般情况下很难看到这种问题.\n\n\n对64位(long,double)变量的读写可能不是原子操作:\n    &gt;Java内存模型允许JVM将没有被volatile修饰的64位数据类型的读写操作\n    划分为两次32位的读写操作来进行.\n\n    导致问题: 有可能会出现读取到&quot; 半个变量 &quot;的情况\n    解决方法: 加volatile关键字 \n    实际上很多商用JVM已经为long,double作为原子性来进行操作处理\n</code></pre><hr>\n<h1 id=\"Demo下载\"><a href=\"#Demo下载\" class=\"headerlink\" title=\"Demo下载\"></a>Demo下载</h1><p><a href=\"/res/file/blog/2014/12/15/Java_Throad_Visibility/ThreadTheVisibility.rar\">本文案例Demo</a></p>\n","excerpt":"<p>目录:</p>\n<pre><code>1. 共享变量在线程间的可见性\n    1.1 Java内存模型(JMM)\n    1.2 共享变量可见性实现的原理\n    1.3 重排序\n    1.4 as-if-serial语义\n\n2. synchronized实现可见性\n\n3. volatile实现可见性\n    3.1 volatile适用场景\n4. synchoronized和volatile比较\n</code></pre>","more":"<hr>\n<h1 id=\"共享变量在线程间的可见性\"><a href=\"#共享变量在线程间的可见性\" class=\"headerlink\" title=\"共享变量在线程间的可见性\"></a>共享变量在线程间的可见性</h1><pre><code>可见性:一个线程对共享变量值的修改,能够及时地被其他线程看到.\n共享变量: 如果一个变量在多个线程的工作中都存在副本,那么这个变量就是这个几个线程的共享变量.\n</code></pre><h2 id=\"Java内存模型-JMM\"><a href=\"#Java内存模型-JMM\" class=\"headerlink\" title=\"Java内存模型(JMM)\"></a>Java内存模型(JMM)</h2><pre><code>Java内存模型(Java Memory Model)描述了Java程序中各种变量(线程共享变量)的访问规则,   \n以及在JVM中将变量存储到内存和从内存中读取出变量这样的底层细节.\n&gt; 所有的变量都存储在主内存中\n&gt; 每个线程都有自己独立的工作内存,里面保存该线程使用到的变量的副本(主内存中该变量的一份拷贝)\n\n\n\n线程1         线程2     线程3    \n↑↓             ↑↓         ↑↓    \n-------------------------------------    \n工作内存1  工作内存2   工作内存3    \nx的副本1   x的副本2    x的副本3    \n↑↓              ↑↓        ↑↓    \n-------------------------------------    \n        主内存   \n       共享变量x    \n\n两条规定\n\n    &gt; 线程对共享变量的所有操作都必须在自己的工作内存中进行,不能直接从主内存中读写\n    &gt; 不同线程之间无法直接访问其他线程工作内存中的变量,线程间变量值的传递需要通过主内存来完成.\n</code></pre><h2 id=\"共享变量可见性实现的原理\"><a href=\"#共享变量可见性实现的原理\" class=\"headerlink\" title=\"共享变量可见性实现的原理\"></a>共享变量可见性实现的原理</h2><pre><code>线程1对共享变量的修改要想被线程2及时看到,必须要经过如下2个步骤:\n&gt; 把工作内存1中更新过的共享变量刷新到主内存中\n&gt; 将主内存中读取共享变量的值工作内存2中.\n</code></pre><p>要实现共享变量的可见性,必须保证两点:</p>\n<pre><code>&gt; 线程修改后的共享变量值能够及时从工作内存刷新到主内存中\n&gt; 其他线程能够及时把共享变量的最新值从主内存更新到自己的工作内存中.\n</code></pre><h2 id=\"重排序\"><a href=\"#重排序\" class=\"headerlink\" title=\"重排序\"></a>重排序</h2><pre><code>&gt; 重排序:代码书写的顺序与实际执行的顺序不同,指令重排序是编译器或者处理器为了提高程序性能而做的优化\n    1.编译器优化的重排序(编译器优化)\n    2.指令级并行重排序(处理器优化)\n    3.内存系统的重排序(处理器优化)\n\n\n例如:\n    代码顺序:\n    int number = 1\n    int result = 0\n\n    有可能执行顺序:\n    int result = 0\n    int number = 1\n</code></pre><h2 id=\"as-if-serial\"><a href=\"#as-if-serial\" class=\"headerlink\" title=\"as-if-serial\"></a>as-if-serial</h2><pre><code>无论如何重排序,程序执行的结果应该与代码顺序执行结果一致\n(Java编译器,运行时和处理器都会保证Java在单线程下遵循as-if-serial语义\n\n例如:\nint num1 = 1;//第1行代码\nint num2 = 2;//第2行代码\nint sum = num1+num2;//第3行代码 \n\n单线程:第1,2行的顺序可以重排,但第3行不能\n重排序不会给单线程带来内存可见性问题.\n多线程中程序交错执行时,重排序可能会造成内存可见性问题\n</code></pre><p>可见性的实现方式</p>\n<pre><code>Java语言层面(不包括jdk1.5之后的concurrent包下的高级特性)支持的可见性实现方式:\n&gt; synchronized\n&gt; voatile\n</code></pre><hr>\n<h1 id=\"synchronized实现可见性\"><a href=\"#synchronized实现可见性\" class=\"headerlink\" title=\"synchronized实现可见性\"></a>synchronized实现可见性</h1><pre><code>synchronized能够实现:\n    &gt; 原子性(同步)\n    &gt; 可见性\n\nJMM关于synchronized的两条规定:\n    &gt; 线程解锁前,(离开synchronized代码块前),必须把共享变量的最新值刷新到主内存中.\n    &gt; 线程加锁时,(进入synchronized代码块前),将清空工作内存中共享变量的值,    \n        从而使用共享变量时需要从主内存中重新读取最新的值.\n    (注意:加锁,解锁需要同一把锁)\n    线程解锁前对共享变量的修改在下次加锁时对其他线程可见.\n\nsynchronized实现可见性\n    线程执行互斥代码的过程:\n    1.获得互斥锁\n    2.清空工作内存\n    3.从主内存拷贝变量的最新副本到工作内存\n    4.执行代码\n    5.将更改后的共享变量的值刷新到主内存\n    6.释放互斥锁\n</code></pre><pre class=\"brush: java; ruler: true; first-line: 0; highlight: [] ; auto-links: true ; collapse: true ; gutter: true; \">    \n    package com.tu.test.visibility;\n\n    public class SynchronizedDemo {\n        // 共享变量\n        private boolean ready = false;\n        private int result = 0;\n        private int number = 1;\n\n        // 写操作\n        public void write() {\n            ready = true; // 1.1\n            try {//为了得到结果一\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n            }\n            number = 2; // 1.2\n        }\n\n        // 读操作\n        public void read() {\n            if (ready) {// 2.1\n                result = number * 3;// 2.2\n            }\n            System.out.println(\"result的值为：\" + result );\n        }\n\n        // 内部线程类\n        private class ReadWriteThread extends Thread {\n            // 根据构造方法中传入的flag参数,确定线程执行读操作还是写操作\n            private boolean flag;\n\n            public ReadWriteThread(boolean flag) {\n                this.flag = flag;\n            }\n\n            @Override\n            public void run() {\n                if (flag) {\n                    write();\n                } else\n                    read();\n            }\n        }\n\n        public static void main(String[] args) {\n            for (int i = 0; i < 100; i++) {\n                SynchronizedDemo synDemo = new SynchronizedDemo();\n                synDemo.new ReadWriteThread(true).start();\n                synDemo.new ReadWriteThread(false).start();\n                // 结果有可能会出现如下情况\n                //结果一: 1.1->2.1->2.2->1.2 结果:result = 3  <-交错\n                //结果二: 1.1->2.1->1.2->2.2 结果:result = 6  <-交错\n                //结果三: 1.1->1.2->2.1->2.2 结果:result = 6\n                //结果四: 2.1->1.1->1.2 结果:result = 0\n            }\n        }\n    }\n\n</pre>\n\n<p>可见性分析</p>\n<pre><code>导致共享变量在线程间不可见的原因:\n    1.线程的交叉执行\n    2.重排序结合线程交叉执行\n    3.共享变量更新后的值没有在工作内存与主内存间及时更新\n\nsynchronized解决方案:\n    1.原子性()\n    2.原子性\n    3.可见性\n</code></pre><pre class=\"brush: java; ruler: true; first-line: 0; highlight: [] ; auto-links: true ; collapse: true ; gutter: true; \">    \n    // 写操作\n    public synchronized void write() {\n        ready = true; // 1.1\n        number = 2; // 1.2\n    }\n\n    // 读操作\n    public synchronized void read() {\n        if (ready) {// 2.1\n            result = number * 3;// 2.2\n        }\n        System.out.println(\"result的值为：\" + result );\n    }\n    //给代码加锁后结果就不同了.`\n    // 结果有可能会出现如下情况\n    //结果三: 1.1->1.2->2.1->2.2 结果:result = 6\n    //结果四: 2.1->1.1->1.2 结果:result = 0\n    //这两种结果是由线程间谁先争取到CPU的使用权而得出来的不同结果.\n</pre>\n\n<hr>\n<h1 id=\"volatile实现可见性\"><a href=\"#volatile实现可见性\" class=\"headerlink\" title=\"volatile实现可见性\"></a>volatile实现可见性</h1><pre><code>深入来说:通过加入内存屏障和禁止重排序优化来实现的.\n&gt; 对volatile变量执行写操作时,会在写操作后加入一条store屏障指令\n&gt; 对volatile变量执行读操作时,会在读操作前加入一条load屏障指令\n(Java提供了8条屏障指令)\n\n通俗地讲: volatile变量在第次被线程访问时,都强迫从主内存中重读该变量的值,\n而当该变量发生变化时,又会强迫线程将最新的值刷新到主内存.\n这样任何时刻,不同的线程总能看到该变量的最新值.\n\n线程写volatile变量的过程:\n1.改变线程工作内存中volatile变量副本的值\n2.将改变后的副本的值从工作内存刷新到主内存\n\n线程读volatile变量的过程\n1.从主内存中读取volatile变量的最新值到线程在工作内存中.\n2.从工作内存中读取volatile变量的副本\n\n\nvolatile不能保证volatile变量复合操作的原子性:\nprivate int number = 0;\nnumber++; //不是原子操作, 多线程时有可能会交叉执行或重排序.\n1.读取number的值\n2.将number的值加1\n3.写入最新的number的值\n----\nsynchronized(this){\n    number++;\n}\n加入synchronized,变为原子操作\n1.读取number的值\n2.将number的值加1\n3.写入最新的number的值\n以上3步骤不会被交错执行不会被重排序\n----\nprivate volatile int number = 0;\n变为volatile变量,无法保证原子性\n</code></pre><pre class=\"brush: java; ruler: true; first-line: 0; highlight: [] ; auto-links: true ; collapse: true ; gutter: true; \">\n    package com.tu.test.visibility;\n\n    public class VolatileDemo {\n        private volatile int number = 0;\n\n        public int getNumber() {\n            return this.number;\n        }\n\n        public void increase() {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n            this.number++;\n        }\n\n        public static void main(String[] args) {\n            final VolatileDemo volMemo = new VolatileDemo();\n            for (int i = 0; i < 500; i++) {\n                new Thread() {\n                    public void run() {\n                        volMemo.increase();\n                    };\n                }.start();\n            }\n\n            // 如果还有子线程在运行,主线程就让出CPU资源\n            // 直到所有的子线程都运行完了,主线程再继续往下执行\n            while (Thread.activeCount() > 1) {\n                Thread.yield();\n            }\n\n            //正常应该打印number的值为500.但因为number++不是原子\n            //操作所以值变的不确定,有可能会小于500的值\n            System.out.println(\"number\" + volMemo.getNumber());\n        }\n    }\n\n</pre>\n\n<p>程序分析:</p>\n<pre><code>假设number=5;\n1.线程A读取number的值\n2.线程B读取number的值\n3.线程B执行加1操作\n4.线程B写入最新的number的值\n5.线程A执行加1操作\n6.线程A写入最新的number的值.把线程B的值覆盖了.\n7.两次number++只增加了1\n这是因为number自增操作的原子性的原因.\n</code></pre><p>解决方案有:</p>\n<pre><code>&gt; 保证number自增操作的原子性:\n&gt; 使用synchronized关键字   \n&gt; 使用JDK1.5后推出的 ReentrantLock (java.until.concurrent.locks包下)   \n&gt; 使用JDK1.5后推出的 AtomicInterger (java.util.concurrent.atomic包下)   \n</code></pre><pre class=\"brush: java; ruler: true; first-line: 0; highlight: [] ; auto-links: true ; collapse: true ; gutter: true; \">\n\n//原\n//private volatile int number = 0;\n//修改\nprivate int number = 0;\n\n//原\n//public void increase() {\n//    try {\n//        Thread.sleep(100);\n//    } catch (InterruptedException e) {\n//        // TODO Auto-generated catch block\n//        e.printStackTrace();\n//    }\n//    this.number++;\n//}\n//修改 使用 synchronized 实现原子性\npublic void increase() {\n    try {\n        Thread.sleep(100);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    synchronized (this) {\n        this.number++;\n    }\n}\n\n//修改使用 ReentrantLock 实现原子性\nprivate Lock lock = new ReentrantLock();\npublic void increase() {\n    try {\n        Thread.sleep(100);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    lock.lock();//加锁\n    try {\n        this.number++;\n    } finally {\n        lock.unlock();//解锁 .防止try有异常.JDK推荐写法try..finally\n    }\n}\n\n</pre>\n\n\n\n<h2 id=\"volatile适用场景\"><a href=\"#volatile适用场景\" class=\"headerlink\" title=\"volatile适用场景\"></a>volatile适用场景</h2><pre><code>因volatile只能保证变量的可见性,不能保证操作的原子性.\n\n要在多线程中安全的使用volatile变量,必须同时满足:\n&gt; 1.对变量的写入操作不依赖其当前值(即改变后的volatile的值与改变前的值不要有关系)\n    不满足: number++ , count = count*5等这类操作.\n    满足: boolean变量,记录温度变化的变量等.\n&gt; 2.该变量没有包含在具有其他变量的不变式中.   \n    (即程序中有多个volatile变量,那么,每个volatile变量的状态要独立其它volatile变量)\n    例如:\n    程序中有两个volatile变量low 与up\n    不满足: 不变式low&lt;up\n</code></pre><hr>\n<h1 id=\"synchronized和volatile比较\"><a href=\"#synchronized和volatile比较\" class=\"headerlink\" title=\"synchronized和volatile比较\"></a>synchronized和volatile比较</h1><pre><code>&gt; volatile不需要加锁,比synchronized更轻量级,不会阻塞线程.\n&gt; 从内存可见性角度讲,volatile读相当于加锁,volatile写相当于解释锁\n&gt; synchronized即能保证可见性,又能保证原子性,而volatile只能保证可见性,无法保证原子性.\n</code></pre><hr>\n<p>问题补充:</p>\n<pre><code>即使没有保证可见性的措施,很多时候共享变量依然能够在主内存和工作内存见得到及时更新:\n    一般只有在短时间内高并发的情况下才会出现变量得不到及时更新的情况,因为\n    CPU在执行时会很快地刷新缓存,所以一般情况下很难看到这种问题.\n\n\n对64位(long,double)变量的读写可能不是原子操作:\n    &gt;Java内存模型允许JVM将没有被volatile修饰的64位数据类型的读写操作\n    划分为两次32位的读写操作来进行.\n\n    导致问题: 有可能会出现读取到&quot; 半个变量 &quot;的情况\n    解决方法: 加volatile关键字 \n    实际上很多商用JVM已经为long,double作为原子性来进行操作处理\n</code></pre><hr>\n<h1 id=\"Demo下载\"><a href=\"#Demo下载\" class=\"headerlink\" title=\"Demo下载\"></a>Demo下载</h1><p><a href=\"/res/file/blog/2014/12/15/Java_Throad_Visibility/ThreadTheVisibility.rar\">本文案例Demo</a></p>"},{"layout":"post","title":"Android Studio 笔记","date":"2014-12-31T16:00:00.000Z","_content":"\nAndroid studio 使用笔记.    \n其中内容包括AS基本设置,创建项目,引用第三方类库,导入Eclipse项目,   \nGradle,加速AS运行速度,Eclipse中使用Gradle,以及一些AS的常见错误.   \n\n<!-- more --> \n\n目录\n\n* [基本设置](#基本设置)\n* [创建工程](#创建工程)\n* [引用第三方类库(模块)](#引用第三方类库(模块))\n* [导入Eclipse项目](#导入Eclipse项目) \n* [Android-Studio目录结构(Project视图)](# <android-Studio目录结构(Project视图))\n* [Gradle](#Gradle)\n* [settings.gradle](#settings.gradle)\n* [项目根节点下的build.gradle](#项目根节点下的build.gradle)\n* [模块根节点下的build.gradle](#模块根节点下的build.gradle)\n* [Gradle命令行](#Gradle命令行)\n* [加速Android-Studio/Gradle构建](#加速Android-Studio/Gradle构建)\n* [Eclipse-中使用-Gradle](#Eclipse-中使用-Gradle)\n* [一些常见错误](#一些常见错误)\n\nAndroid Studio下载   \n\n[http://www.androiddevtools.cn/](http://www.androiddevtools.cn/)\n\n安装完AS后第一次运行会自动下载一些组建,建议进行翻墙. \n\n---\n\n# <a id=\"基本设置\"></a>基本设置\n\t\n\t一些常用设置项罗列\n\n\t  File --> Settings  \n\t\t\t|-->Appearance & Behavior \n\t\t\t|\t|---> Appearance \n\t\t\t|\t|\t|---> UI Options \n\t\t\t|\t|\t|\t|----> Threme: 有三种IDE主题供选择.\n\t\t\t|\t|\t|\t|----> * Override default fonts by (not recomended)一整个软件的字体\n\t\t\t|\t|\t|\t|----> Cyclic scrolling in list 内勾选后内容滚动支持滚动尾部跳顶部,顶部跳尾部.\n\t\t\t|\t|\t|---> Window Options \n\t\t\t|\t|\t|\t|----> Allow merging buttons on dialogs (勾选合并相类似的按钮到一个按钮中.) \n\t\t\t|\t|---> Menus and Toolbars --> 自定义增减菜单内容.\n\t\t\t|\t|---> System Settings \n\t\t\t|\t|\t|\t|----> Startup/Shutdown\n\t\t\t|\t|\t|\t|\t\t|-----> Reopen last project on startup (勾选打开IED时是否直接进入到上一次关闭时的项目工程)\n\t\t\t|\t|\t|\t|\t\t|-----> Confirm application exit (退出提示两次)\n\t\t\t|\t|\t|\t|----> project opening 项目工程的打开方式.\n\t\t\t|\t|\t|\t|\t\t|-----> 打开新的窗口,在相同的窗口打开,经过确定打开窗口\n\t\t\t|\t|\t|\t|----> Synchronization \n\t\t\t|\t|\t|\t\t\t|-----> Synchronize files on frame activation (勾选,自动同步文件到项目中,\n\t\t\t|\t|\t|\t\t\t|\t例如,当IDE切换到后台,项目过程中有某个文件被其它方式修改了,切换到IDE时自动更新.)\n\t\t\t|\t|\t|\t\t\t|-----> Save files on frame deactivation (勾选,IDE切换到后台时自动保存文件)\n\t\t\t|\t|\t|\t\t\t|-----> Save files automatically if application is ide for 15 sec \n\t\t\t|\t|\t|\t\t\t|\t当ide在15秒内无操作时,自动保存文件.\n\t\t\t|\t|\t|\t\t\t|-----> Use \"safe write\" (save changes to a temporary file first) 保存时保存临时文件.\n\t\t\t|\t|\t|---> Passwords --> Password storage policy\n\t\t\t|\t|\t|\t\t\t|-----> Do not remember passwords 每次都需要输入密码\n\t\t\t|\t|\t|\t\t\t|-----> Remember passwords until the application is closed \n\t\t\t|\t|\t|\t\t\t|\t打开过一IDE输入过一次密码后,直到关闭IDE都无需再输入密码.\n\t\t\t|\t|\t|\t\t\t|-----> Save on disk with master password protection 保存磁盘,无需要再输入 .\n\t\t\t|\t|\t|---> * Http Proxy 代理 (红杏有免费提供AS的代理) 主机名为: hx.gy 端口为:1080 \n\t\t\t|\t|\t|---> Updates 软件更新,有自动更新,可选择版本类型,等.\n\t\t\t|\t|---> File Colors 文件颜色\n\t\t\t|\t|---> Scopes 定义范围\n\t\t\t|\t|\t|---> 点击 + 新创建 --> 输入名称如App --> 窗口中间的结构中选择不需要的范围可以进行,Exclude 排除\n\t\t\t|\t|\t\t|--> 使用时.在编程界面ctrl+shift+F弹出搜索框\n\t\t\t|\t|\t\t|\t|--> Scope --> 选择Custom: App . 搜索的内容就是经过自定义筛选的.\n\t\t\t|\t|\t\t|--> Analyze --> Inspect Code --> 也可以选择Custom scope  ,在指定范围内做代码检查. \n\t\t\t|\t|---> Notifications 通知栏气泡. 定义提示不提示通知项.\n\t\t\t|\t|---> Quick Lists 宏 \n\t\t\t|---> Keymap 快捷键设置 --> Keymaps: 中有很多种选择.,下面的栏目则可以修改快捷键的按键.\n\t\t\t|\t|---> 常用的快捷键:\n\t\t\t|\t|---> * 快速输入多行内容 ctrl+shift+alt+鼠标点击多行 , 出现多个光标,然后输入内容. \n\t\t\t|\t|---> * 删除整行 Ctrl+Y\n\t\t\t|\t|---> * 复制当前行 Ctrl+D\n\t\t\t|\t|---> * 剪切当前行 Ctrl+X\n\t\t\t|\t|---> * 交换位置 Ctrl+Shift+箭头 如果是方法体内,上下交换代码,方法则交换方法位置\n\t\t\t|\t|---> * 呼出大纲 Ctrl+F12 \n\t\t\t|\t|---> * 查找引用 Alt+F7 查找出来的结果会分为读与写\n\t\t\t|\t|---> * 重命名 Shift+F6 会重名名引用的名称\n\t\t\t|\t|---> * 格式化代码 Ctrl+Alt+L \n\t\t\t|\t|---> 移动鼠标,单词间跳跃 Ctrl +箭头 \n\t\t\t|\t|---> 快速定义常量 Ctrl+Alt+C 如: int i = 100; 选中100后使用快捷键\n\t\t\t|\t|---> 其它更多\n\t\t\t|---> Editor 编辑器设置 \n\t\t\t|\t|--> General --> 子内容\n\t\t\t|\t|\t|\t|--> mouse \n\t\t\t|\t|\t|\t|\t|--> Honor\"CamelHumps\"words settings when selecting on 双击选择的是一个变量,还是变量中的一个单词 . \n\t\t\t|\t|\t|\t|\t|\t支持此功能需要在General/Smark Keys中Rus\"camelHumps\"words打勾,默认没勾选\n\t\t\t|\t|\t|\t|\t|--> Change font size (Zoom) with Ctrl+Mouse Wheel 通过Ctrl加鼠标滚轮放大缩小字体\n\t\t\t|\t|\t|\t|\t|--> Enable Drag'n'Drop functionality in editor 拖拽模式,鼠标选中的内容用鼠标点中后拖拽到其它地方. \n\t\t\t|\t|\t|\t|--> Soft Wraps\n\t\t\t|\t|\t|\t|\t|--> Use soft wraps in Editor 软回车\n\t\t\t|\t|\t|\t|--> Other \n\t\t\t|\t|\t|\t|\t|--> Strip trailing spaces on Save: ... 保存时删除行尾的空格\n\t\t\t|\t|\t|\t|\t|--> Show quick doc on mouse move Delay(ms)500 勾选后通过鼠标悬浮到内容上显示文档(默认关闭)\n\t\t\t|\t|\t|\t|--> * Highlight on Caret Movement 高亮显示\n\t\t\t|\t|\t|\t|\t|--> * Highlight matched brace 高亮显示括号\n\t\t\t|\t|\t|\t|\t|--> * Highlight current scope 选中的范围是否高亮显示\n\t\t\t|\t|\t|\t|\t|--> * Highlight usages of element at caret 选中的元素是否高亮显示\n\t\t\t|\t|\t|\t|--> Formatting  格式化代码时是否显示通知\n\t\t\t|\t|\t|\t|--> Refactorings 重构相关\n\t\t\t|\t|\t|\t|\t|--> Enable in-Place mode 启动重构模式 Ctrl+Alt+C\n\t\t\t|\t|\t|\t|--> Limits\n\t\t\t|\t|\t|\t|\t|--> Maximum number of contents to keep in clipboard: 5 粘贴板的数量. 可以同时拷贝的数据. \n\t\t\t|\t|\t|\t|\t|\t使用方法: 多次拷贝内容后,需要粘贴指定次内容时,Ctrl+Shift+V 在呼出的对话框中选择粘贴内容\n\t\t\t|\t|\t|\t|\t|--> Recent files limit 50 最近打开的文件限制个数\n\t\t\t|\t|\t|\t|\t|-->　console commands history size: 300 命令行面板上下键切换使用过的命令\n\t\t\t|\t|\t|\t|--> Rich-text copy 拷贝内容样式 默认激活,用处是拷贝一些代码到Word文档的时候保持原有的字体颜色样式.\n\t\t\t|\t|\t|--> Smart Keys \n\t\t\t|\t|\t|\t|----> Home 键 定位 尝试点多几次Home键\n\t\t\t|\t|\t|\t|----> End 键 定位\n\t\t\t|\t|\t|\t|----> Insert pair bracket 自动补全括号\n\t\t\t|\t|\t|\t|----> Insert pair quote 自动补全引号\n\t\t\t|\t|\t|\t|----> Reformat block on typing\"}\" 当我们输入括号}结尾时,格式化代码\n\t\t\t|\t|\t|\t|----> Use \"camelHumps\" words 见上面mouse\n\t\t\t|\t|\t|\t|----> Surround selection on typing quote or brace \n\t\t\t|\t|\t|\t|\t勾选后, 选择代码后,输入一个{括号可以把所选择的代码加入到{里面} ,也可以使用\"号 把内容\"引起来\"\n\t\t\t|\t|\t|\t|----> Enter 回车键功能\n\t\t\t|\t|\t|\t|----> Smart indent  缩进\n\t\t\t|\t|\t|\t|----> Insert pair \"}\" 补全大括号\n\t\t\t|\t|\t|\t|----> Insert documentation comment stub 自动生成注释文档\n\t\t\t|\t|\t|\t|----> 后面对于Xml/Html/Css等的配置\n\t\t\t|\t|\t|--> Appearance 编辑器外观的一些设置\n\t\t\t|\t|\t|\t|----> Use anti-aliased font 是否启用抗锯齿字体\n\t\t\t|\t|\t|\t|----> Caret blinking(ms) 500 光标闪烁速度\n\t\t\t|\t|\t|\t|----> * Show line numbers 显示代码行数(默认未勾选) \n\t\t\t|\t|\t|--> Editor Tabs 编辑器Tab的\n\t\t\t|\t|\t|\t|----> Tab Appearance 外观\n\t\t\t|\t|\t|\t|\t|-----> Placement: 标签Tab显示位置\n\t\t\t|\t|\t|\t|\t|-----> Show Tabs in single row 显示单行 Hide tabs if there is no space 没有空间,隐藏标签\n\t\t\t|\t|\t|\t|\t|-----> Hide file extension in editor tabs 隐藏文件后缀\n\t\t\t|\t|\t|\t|\t|-----> Show directory in editor tabs for non-unique filenames 文件名相同显示文件路径\n\t\t\t|\t|\t|\t|\t|-----> mark modified tabs with asterisk 用星号标记修改标签(未保存显示*,可结合不自动保存)\n\t\t\t|\t|\t|\t|----> Tab Closing Policy 标签关闭策略\n\t\t\t|\t|\t|\t|\t|-----> Tab limit 10 标签最大上限 ,后面的选项为优先关闭选项\n\t\t\t|\t|\t|--> Code Folding 代码的折叠 设置\n\t\t\t|\t|\t|--> Code Completion \n\t\t\t|\t|\t|\t|----> code Completion\n\t\t\t|\t|\t|\t|\t|-----> Case sensitive completion : All / None / First letter 代码提示对大小写的要求\n\t\t\t|\t|\t|\t|\t|\t三种选项, 意思是编辑器在输入代码时代码提示的内容要求.其中None最为宽松 , \n\t\t\t|\t|\t|\t|\t|-----> Auto-insert when only one choice on : \n\t\t\t|\t|\t|\t|\t|\t|--> Basic Completion(Ctrl+Space), 重新唤醒代码提示框  \n\t\t\t|\t|\t|\t|\t|-----> 自动弹出时间等设置\n\t\t\t|\t|\t|--> Auto Import 自动导入设置\n\t\t\t|\t|\t|--> Postfix Completion 代码完成的快捷方式\n\t\t\t|\t|\t|\t|----> Expend templates with : Tab / Space / Enter\n\t\t\t|\t|\t|--> Console Folding 控制台代码折叠 设置\n\t\t\t|\t|--> *Colors & Fonts 编辑器主题颜色字体设置 Scheme\t\n\t\t\t|\t|\t|--> Font 设置编辑器字体大小\n\t\t\t|\t|\t|--> Android Logcat 设置Logcat的颜色,默认比较单调.可在些处进行修改\n\t\t\t|\t|--> Code Style 代码风格 一般由整个项目组决定\n\t\t\t|\t|--> Inspections 代码检查配置\n\t\t\t|\t|\t|--> 例如: Android Lint / addJavasriptInterface Called 很常见的开启WebView的JavaScript的一个报警 \n\t\t\t|\t|\t|\t勾选则如果编写此代码警告 Severity: 可自定义选择错误级别.以及检查范围 \n\t\t\t|\t|--> * File and Code Templates 文件代码模板\n\t\t\t|\t|\t|---> Templates / Includes / Code / Other 四种 \n\t\t\t|\t|--> * File Encodings 文件编码方式 通常设置成UTF-8\n\t\t\t|\t|\t|--> IDE Encoding : UTF-8  \n\t\t\t|\t|\t|--> Project Encoding : UTF-8（默认GBK）\n\t\t\t|\t|\t|--> Default encoding for properties files: UTF-8 (默认<System Default> (now GBK))\n\t\t\t|\t|--> * Live Templates 动态模板 快速创建模板 如geti 快速编写出getInstance()方法\n\t\t\t|\t|--> File Types 打开文件类型\n\t\t\t|---> Plugins 插件 可在线下载或使用本地插件\n\t\t\t|\t|--> 介绍几个插件 : JsonFormat 插件 快速把Json字符串生成一个对象类 ; 使用步骤:\n\t\t\t|\t|\t1. 拷贝需要生成对象的Json字符串,\n\t\t\t|\t|\t2.在已创建的一个类中点击右键>Generate>JsonFormat>粘贴到弹出框中>ok>自动创建代码.\n\t\t\t|---> Version control 版本控制配置\n\t\t\t|---> Build,Execution,Deployment 构建、执行部署 Gradle配置 等\n\t\t\t|---> Languages&Frameworks 语言与框架\n\t\t\t|---> Tools 工具\n\t\t\t|\t|--> 外部工具的配置等\n\tEdit \n\t\t|--> Copy Reference 拷贝包含包名类名的字符串 \n\t\t|\t例如: 一个Activity类,全选类名,使用些种拷贝方式,粘贴到AndroidManifest.xml时,内容为包名.类名\n\t\t|--> Copy from History 粘贴历史拷贝\n\t\t|--> * Column Selection Mode 列选择模式 可进行多行部分选择.批量处理. \n\t\t|--> Toggle Case 转换大小写\n\tNavigate\n\t\t|--> 导航 , 跳转 也可以使用Ctrl+鼠标点击对应方法,或属性\n\tCode \n\t\t|--> Override Methods 实现父类方法\n\t\t|--> Generate...  生成方法. 如 hashCode equals 等方法,并会自动实现方法\n\t\t|--> Surround With.. 生成代码 , 如if,try catch 语句等\n\n\t编辑器右击选项中:\n\t\t|--> refactor --> Encapsulap Fields  生成get set方法\n\t\t|--> Lacal History 自带版本控制,可查看历史修改记录等\n\n其它快捷键:     \nAlt+Enter 万能键 / 如导入包, 错误解决方案提示等.     \nCtrl+Q 查看代码中的图片   \n双击Shift 会弹出搜索框   \n\n泛型 @StringRes @ColorRes 要求参数类似   \n例: private void showToast(@StringRes int stringId){...}   \n\n\n代码扫描查找代码潜在错误\n\n\tAnalyze  --> Inspect Code --> 选择扫描对象 --> ok \n\n\n---\n\n# <a id=\"创建工程\"></a>创建工程\n\nFile-->New-->New Project-->输入项目名,包名,项目存放地址等信息-->   \n选择开发的设备,并选择支持最小SDK版本-->点击\"Help me choose\"可查看版本目前支持的版本占用情况     \n-->Next-->选择模板-->Next-->输入Activity与Layout的名称-->Finish-->一个新的项目工程就创建完毕.      \n\n---\n\n# <a id=\"引用第三方类库(模块)\"></a>引用第三方类库(模块)\n\n\t创建一个类库\n\t\tFile->New-->New Module-->其中可以选择多种类型,    \n\t\t如果Android Library新创建一个,Import Existing Project导入Eclipse或者Gradle项目 等-->    \n\t\t假设新创建一个类库-->与创建项目一个,输入项目包等-->选择模板-->Finish\n\n\t引入类库(远程,jar,本地库)\n\t\t选择需要引用类库的项目-->右击-->Open Module Settings 或者使用快捷键(F4)\n\t\t-->Project Structure窗口-->选择需要引入类库的项目-->右边点击 Dependencies   \n\t\t-->点击右边的+号-->三种选择 Lrbrary(远程) , File(jar) , module(本地) ,\n\t\t--> 选择最后一种 module dependencies 引入本地库   \n\t\t-->选择上面新创建的类库-->OK-->这样就关联了一个第三方模块,类库了.   \n\n---\n\n# <a id=\"导入Eclipse项目\"></a>导入Eclipse项目\n\n\tFile-->New-->Import Project-->选择Eclipse项目工程-->提示导入的项目存放地址(建议不要与原项目使用相同的目录\n\t,因为会重新拷贝一份代码并修改成Android Studio的环境)-->弹出一提示,说之前引用的jar包以及一些引用的类库,\n\t都会被替换成dependencies ,如果能找到源.-->Finish-->引入完成会弹出一个导入报告-->报告里面有说明一些没有导入进来的文件名称\n\t-->因为这些文件不是工程项目的文件.项目外的文件.-->如果有重要的文件需要自己手动拷贝到项目中.\n\n---\n\n# <a id=\"Android-Studio目录结构(Project视图)\"></a>Android Studio目录结构(Project视图)\n\n\t目录结构视图\n\tAndroid studio project 相当于 eclipse workspace   \n\tAndroid studio module 相当于 eclipse project \n\n\n\t∨MyApplication  --> 项目根节点\n\t\t|＞ .gradle -->Gradle的临时文件\n\t\t|＞ .idea --> \n\t\t|∨* app --> 主要的模块,如果配置正常时字体为粗体 \n\t\t|\t|＞ build  --> 模块的临时文件与最终的apk文件\n\t\t|\t|\t|＞outputs ＞apk ＞目录下生成apk文件\n\t\t|\t|＞* libs --> 存放jar包, 不能存so文件\n\t\t|\t|∨* src --> 源代码目录\n\t\t|\t\t|＞ androidTest --> 测试源代码\n\t\t|\t\t|∨ main --> 源代码\n\t\t|\t\t|\t|＞ aidl --> 是aidl文件源代码目录,AIDL:即Android接口定义语言。\n\t\t|\t\t|\t|＞ assets --> 资源目录\n\t\t|\t\t|\t|＞ java --> 源代码\n\t\t|\t\t|\t|＞ jni --> 存放C语言文件\n\t\t|\t\t|\t|＞* jniLibs --> 存放so文件\n\t\t|\t\t|\t|＞ res --> 资源文件\n\t\t|\t\t|\t|AndroidManifest.xml \n\t\t|\t\t|.gitignore\n\t\t|\t\t|app.iml\n\t\t|\t\t|* build.gradle --> Gradle构建脚本,对当前模块设置的Gradle文件\n\t\t|\t\t|proguard-rules.pro --> 代码混淆配置文件\n\t\t|＞ build --> 编译过程中的一些临时文件\n\t\t|＞ gradle --> 默认生成的一个本地的Gradle引导语,如果机器没有Gradle环境,会通过下载\n\t\t|＞ library --> 如果项目中有多个模块,官方建议创建一个目录library目录下存放其它模块\n\t\t|\t＞ myLibrary --> 其它第三方模块 .\n\t\t|.gitignore\n\t\t|*build.gradle --> Gradle构建脚本,全局Gradle\n\t\t|build.gradle.bk\n\t\t|gradle.properties --> Gradle属性文件\n\t\t|gradlew\n\t\t|gradlew.bat --> gradle批处理文件\n\t\t|local.properties --> Android ADT bundle SDK目录配置文件\n\t\t|MyApplication.iml\n\t\t|*settings.gradle --> 项目模块配置文件\n\n---\n\n# <a id=\"Gradle\"></a>Gradle \n\t\nGradle是一种动态脚本语言, 基于Groovy  [http://www.groovy-lang.org/](http://www.groovy-lang.org/)   \n能够很方便的通过Maven/lvy管理依赖   \n使用非常灵活,一种效果可以有多种实现   \n\n[http://gradle.org/](http://gradle.org/)   \n\n\n---\n\n# <a id=\"settings.gradle\"></a>settings.gradle\n\n案例: \n\n<pre class=\"brush: shell;\">\n\tinclude ':app', ':library:mylibrary'  \n</pre>\n\n\t\":\"是一个路径的分割线\n\n\t注意: 当 Open Module Settings  --> Project Structure \n\t\t--> Dependencies 有配置过库 :mylibrary 直接修改settings.gradle成:library:mylibrary会编译异常\n\n\tError:(25, 0) Project with path ':mylibrary' could not be found in project ':app'.\n\n\t这时,需要在Open Module Settings  -- > Project Structure --> app \n\t\t--> Dependencies --> + module Dependencies 中的:mylibrary删除 即可,并重新增加:library:mylibrary\n\n---\n\n# <a id=\"项目根节点下的build.gradle\"></a>项目根节点下的build.gradle\n\n案例: \n\n<pre class=\"brush: java;\">\n\n\t// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\tbuildscript { //\n\t    repositories {\n\t\tjcenter() //依赖库\n\t    }\n\t    dependencies { \n\t\tclasspath 'com.android.tools.build:gradle:1.2.2'//当前工程需要依赖的插件\n\n\t\t// NOTE: Do not place your application dependencies here; they belong\n\t\t// in the individual module build.gradle files\n\t    }\n\t}\n\n\tallprojects { //所有工程 \n\t    repositories {\n\t\tjcenter()//依赖库 --> 默认使用的是https加密库,当使用代理时,有可能不支持https ,则有可能出错\n\t    }\n\t}\n</pre>\n\n---\n\n# <a id=\"模块根节点下的build.gradle\"></a>模块根节点下的build.gradle\n\n案例: \n\n<pre class=\"brush: java;\">\t\n\t//声明是一个Application 最终会生成一个apk\n\t//如果是一个库 'com.android.library' 这样就不会输出apk,\n\t//只会输出 jar 包或者 aar (aar是包含文件与资源的一个包,Eclipse不支持)\n\tapply plugin: 'com.android.application'  \n\n\tandroid { //安卓编译环境设置\n\t\tcompileSdkVersion 22 //需要与自己的已下载的Build版本对应\n\t\tbuildToolsVersion \"22.0.1\" \n\t\t//注意,如果是网络下载下来的项目,需要查看自己的AS是否有相同Build的版本,没有则修改,否则报错\n\n\t\tsourceSets{ //配置不同版本原代码不同.与productFlavors对应\n\t\t\tphone{\n\t\t\t\tmanifest.srcFile 'src/phone/AndroidManifest.xml'\n\t\t\t\tassets.srcDirs = ['src/phone/assets']\n\t\t\t\t//java.srcDirs = ['src']\n\t\t\t\t//resources.srcDirs = ['src']\n\t\t\t\t//aidl.srcDirs = ['src']\n\t\t\t\t//renderscript.srcDirs = ['src']\n\t\t\t\t//res.srcDirs = ['src']\n\t\t\t}\n\n\t\t\tpad{\n\t\t\t\tmanifest.srcFile 'src/pad/AndroidManifest.xml'\n\t\t\t\tassets.srcDirs = ['src/pad/assets']\n\t\t\t}\n\n\t\t}\n\n\t\tsigningConfigs{ //签名配置\n\t\t\treleasekey{ //名称自定义\n\t\t\t\tstoreFile file('MyKey.keystore') //文件名\n\t\t\t\tstorePassword 'android' // key密码\n\t\t\t\tkeyAlias 'androiddebugkey' //别名\n\t\t\t\tkeyPassword 'android' //密钥\n\t\t\t}\n\n\t\t\tdebugkey{\n\t\t\t\tstoreFile file('debug.keystore')\n\t\t\t\tstorePassword 'android'\n\t\t\t\tkeyAlias 'androiddebugkey'\n\t\t\t\tkeyPassword 'android'\n\t\t\t}\n\t\t}\n\n\t\tdefaultConfig { //生成的apk的更多信息配置 ,会覆盖AndroidManifest.xml的信息\n\t\t\tapplicationId \"com.tu.myapplication\" //包名 会覆盖AndroidManifest.xml的包名\n\t\t\tminSdkVersion 8\n\t\t\ttargetSdkVersion 22\n\t\t\tversionCode 1\n\t\t\tversionName \"1.0\"\n\n\t\t\tsigningConfig signingConfigs.releasekey //签名配置  指定签名\n\t\t}\n\n\t\tproductFlavors { //产品配置\n\t\t\t//与buildTypes的每一项结合生成包,会在build/outputs/apk/生\n\t\t\t//成 (productFlavors项*buildTypes的项*2)个apk\n\t\t\tphone {\n\t\t\t\tapplicationId 'com.tu.myapplication' //不同包名\n\t\t\t\tsigningConfig signingConfigs.debugkey //不同签名\n\t\t\t}\n\t\t\tpad {\n\t\t\t\tapplicationId 'com.tu.myapplication.hd'\n\t\t\t\tsigningConfig signingConfigs.debugkey\n\t\t\t}\n\t\t}\n\n\t\tbuildTypes { //编译类型, 主要用于你这个包编译出来是做什么用的.\n\t\t\t//通常系统默认有两种,一种是release 二种是debug 生成4个apk包  , \n\t\t\t//如果 productFlavors 有配置项如2个,buildTypes默认的2个则会生成2*2*2=8个apk包\n\n\t\t\trelease { //为默认项配置混淆文件\n\t\t\t    minifyEnabled false\n\t\t\t    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n\t\t\t}\n\n\t\t\t//        //会生成两个包 app-fordebug.apk , app-fordebug-unaligned.apk\n\t\t\t//        fordebug {\n\t\t\t//            applicationIdSuffix '.debug'\n\t\t\t//\t\t//包名会加.debug后缀即: com.tu.myapplication.debug\n\t\t\t//        }\n\t\t\t//\n\t\t\t//        //会生成两个包 app-fordailybuild.apk , app-fordailybuild-unaligned.apk\n\t\t\t//        fordailybuild{\n\t\t\t//            applicationIdSuffix '.db'//包名会加.db后缀\n\t\t\t//        }\n\t\t\t//\n\t\t\t//        //会生成两个包 app-formonkeytest.apk , app-formonkeytest-unaligned.apk\n\t\t\t//        formonkeytest{\n\t\t\t//            applicationIdSuffix '.monkey'\n\t\t\t//        }\n\t\t}\n\t}\n\n\tdependencies {\t//依赖关系\n\t\t//单独引入jar包 --> Open Module Settings  -- > Project Structure -->\n\t\t//app --> Dependencies --> + File Dependencies -->选择jar包\n\t\t//compile files('libs/gson-2.2.4.jar') //使用单独引入jar包的方式\n\n\t\t//动态引入包\n\t\t//表示引入libs目录下的所有jar包 , 并且是动态的.\n\t\tcompile fileTree(include: ['*.jar'], dir: 'libs') \n\n\t\t//引入Libaray v7包 Open Module Settings  -- > Project Structure --> \n\t\t//app --> Dependencies --> + Library Dependencies\n\t\tcompile 'com.android.support:appcompat-v7:22.1.1' //这种方式表示引入单个包.\n\n\t\t//引入 本地包 Open Module Settings  -- > Project Structure --> app --> \n\t\t//Dependencies --> + module Dependencies\n\t\tcompile project(':library:mylibrary') //这种方式表示引入一个本地库(本地模块)\n\n\t\t//引入远程库 Open Module Settings  -- > Project Structure --> app --> \n\t\t//Dependencies --> + Library Dependencies 搜索框内直接搜索\n\t\t//搜索 httpmime 后选择库即可. Gradle会后台下载jar包. 但如果你没有代理\n\t\tcompile 'org.apache.httpcomponents:httpmime:4.5' \n\n\t\t//红杏有提供给开发都一个免费代理,主机名为: hx.gy 端口为:1080\n\t\t//File--> settings --> Appearance & Behavior --> \n\t\t//System Settings --> HTTP Proxy --> 勾选manual proxy configuration \n\t\t//--> HTTP --> Host name:输入 hx.gy --> Port number:输入 1080 -->ok\n\t}\n</pre>\n\n---\n\n# <a id=\"Gradle命令行\"></a>Gradle命令行\n\t\n\t> gradle命令行运行需要下载一个gradle 并把gradle目录下的bin目录配置到环境变量中. 然后使用cmd\n\n\t> Android Studio目录下一般也会有个gradle / gradle-x.x/ 也可以配置这个bin目录 然后使用cmd\n\t\n\t> 也可以定位到项目目录下有 gradlew.bat 文件是 gradle批处理文件 定位后cmd中运行 gradlew命令\n\n\t> Android studio中有Terminal 窗口 也可以直接使用命令,而不用进入到cmd \n\t\n\t常用命令: \n\tgradle tasks 罗列可执行的任务   \n\tgradle build 编译全部脚本   \n\tgradle clean 清除项目\n\tgradle 加tasks列出的名称,指定编译内容 如: gradle assembleDebug   \n\n---\n\n# <a id=\"加速Android-Studio/Gradle构建\"></a>加速Android Studio/Gradle构建\n\t\n\t优化对电脑配置要求比较高.\n\t\n\t1> 开启gradle单独的守护进程\n\t\t在下面的目录下面创建gradle.properties文件：\n\t\t/home/<username>/.gradle/ (Linux)\n\t\t/Users/<username>/.gradle/ (Mac)\n\t\tC:\\Users\\<username>\\.gradle (Windows)\n\t\t并在文件中增加:\n\n<pre class=\"brush: java;\">\norg.gradle.daemon=true\n</pre>\n\t\n\t2> 同时修改项目下的 gradle.properties 文件也可以优化(也可以在步骤1>里面直接加入,变成全局,针对所有项目生效)：\n\t\n<pre class=\"brush: java;\">\norg.gradle.daemon=true\n\norg.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\n\norg.gradle.parallel=true\n\norg.gradle.configureondemand=true\n</pre>\t\n\n\t3> 对Android Studio构建优化\n\n\t> File --> settings \n\t\t\t|--> Build,Execution,Deployment \n\t\t\t\t|--> Build Tools \n\t\t\t\t\t|--> Gradle --> 项中勾选 Offline work  (离线工作模式)\n\t\t\t\t\t|\t\t|--> Gradle VM options :  -Xmx2048m -XX:MaxPermSize=512m\n\t\t\t\t\t|--> Compiler \n\t\t\t\t\t\t|--> 勾选 Compile independent modules in parallel (may require larger heap size)\n\t\t\t\t\t\t|--> VM Options:输入 -Xmx2048m -XX:MaxPermSize=512m\n\t\t\t\t\t\t|--> Command-line Options:输入 --offline\n\n\t4> 命令行构建\n\t\t\n\t\t在构建命令后面加 --daemon --parallel --offline \n\t\t例如\n\t\tgradle build --daemon --parallel --offline\n\t\t1) Total time: 34.133 secs 第一次构建\n\t\t3) Total time: 12.748 secs 未修改任何内容第三次构建\n\t\t5) Total time: 12.639 secs\n\t\t7) Total time: 12.201 secs\n\n\t\tgradle build\n\t\t2) Total time: 21.371 secs 未修改任何内容第二次构建\n\t\t4) Total time: 18.891 secs\n\t\t6) Total time: 18.823 secs\n\t\t8) Total time: 18.79 secs\n\n\t5> 引入依赖库时使用aar\n\t\t如果库项目工程为 apply plugin: 'com.android.library' 的,则会在目录\n\t\t库/build/outputs/arr/xxxx.aar 生成文件\n\n---\n\n# <a id=\"Eclipse-中使用-Gradle\"></a>Eclipse 中使用 Gradle\n\n在Eclipse项目根目录下创建build.gradle文件\n\n<pre class=\"brush: java;\">\t\n\tapply plugin: 'com.android.application'\n\t//让Eclipse的项目使用gradle进行编译, cmd 定位到项目根目录,\n\t//使用gradle build进行编译 . \n\t//生成到build目录中, \n\tandroid{\n\t\tcompildSdkVersion 21\n\t\tbuildToolsVersion \"21.1.2\"\n\t\t\n\t\tsourceSets{\n\t\t\tmain{\n\t\t\t\tmanifest.srcFile 'AndroidManifest.xml'\n\t\t\t\tjava.srcDirs = ['src']\n\t\t\t\tresources.srcDirs = ['src']\n\t\t\t\taidl.srcDirs = ['src']\n\t\t\t\trenderscript.srcDirs = ['src']\n\t\t\t\tres.srcDirs = ['src']\n\t\t\t\tassets.srcDirs = ['src']\n\t\t\t}\n\t\t}\n\t}\n\n\tdependencies{\n\t\t//...一些引入包\n\t}\n</pre>\n\n---\n\n# <a id=\"一些常见错误\"></a>一些常见错误\n\n出现gradle无法下载等时可以尝试修改一些代码如: \n\n\t修改MyApplication/gradle/wrapper/gradle-wrpper.properties文件\n\tdistributionUrl=https\\://services.gradle.org/distributions/gradle-2.2.1-all.zip\n\t修改https为http: distributionUrl=http\\://services.gradle.org/distributions/gradle-2.2.1-all.zip\n\n代理下载错误\n\n<pre class=\"brush: java;\">\t\n\tappcenter\n\tbuildscript{\n\t\trepositories{\n\t\t\tmaven{url \"http://repo1.maven.org/maven2\"}\n\t\t\tjcenter{\n\t\t\t\turl \"http://jcenter.bintray.com\"\n\t\t\t}\n\t\t}\n\t\tdependencies {classpath 'com.android.tools.build:gradle:1.1.0+'}\n\t}\n</pre>\n\n安卓ADT的目录错误 修改local.properties \n\n---\n\n更多内容后续补上.\n\n[本文案例Demo](/res/file/blog/2015/01/01/Java_Android_Studio_IDE/MyApplication.rar)\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n","source":"_posts/2015-01-01-Java_Android_Studio_IDE.md","raw":"---\nlayout : post\ntitle : \"Android Studio 笔记\"\ncategory : Android\ndate : 2015-01-01\ntags : [Android,Android studio,IDE]\n\n---\n\nAndroid studio 使用笔记.    \n其中内容包括AS基本设置,创建项目,引用第三方类库,导入Eclipse项目,   \nGradle,加速AS运行速度,Eclipse中使用Gradle,以及一些AS的常见错误.   \n\n<!-- more --> \n\n目录\n\n* [基本设置](#基本设置)\n* [创建工程](#创建工程)\n* [引用第三方类库(模块)](#引用第三方类库(模块))\n* [导入Eclipse项目](#导入Eclipse项目) \n* [Android-Studio目录结构(Project视图)](# <android-Studio目录结构(Project视图))\n* [Gradle](#Gradle)\n* [settings.gradle](#settings.gradle)\n* [项目根节点下的build.gradle](#项目根节点下的build.gradle)\n* [模块根节点下的build.gradle](#模块根节点下的build.gradle)\n* [Gradle命令行](#Gradle命令行)\n* [加速Android-Studio/Gradle构建](#加速Android-Studio/Gradle构建)\n* [Eclipse-中使用-Gradle](#Eclipse-中使用-Gradle)\n* [一些常见错误](#一些常见错误)\n\nAndroid Studio下载   \n\n[http://www.androiddevtools.cn/](http://www.androiddevtools.cn/)\n\n安装完AS后第一次运行会自动下载一些组建,建议进行翻墙. \n\n---\n\n# <a id=\"基本设置\"></a>基本设置\n\t\n\t一些常用设置项罗列\n\n\t  File --> Settings  \n\t\t\t|-->Appearance & Behavior \n\t\t\t|\t|---> Appearance \n\t\t\t|\t|\t|---> UI Options \n\t\t\t|\t|\t|\t|----> Threme: 有三种IDE主题供选择.\n\t\t\t|\t|\t|\t|----> * Override default fonts by (not recomended)一整个软件的字体\n\t\t\t|\t|\t|\t|----> Cyclic scrolling in list 内勾选后内容滚动支持滚动尾部跳顶部,顶部跳尾部.\n\t\t\t|\t|\t|---> Window Options \n\t\t\t|\t|\t|\t|----> Allow merging buttons on dialogs (勾选合并相类似的按钮到一个按钮中.) \n\t\t\t|\t|---> Menus and Toolbars --> 自定义增减菜单内容.\n\t\t\t|\t|---> System Settings \n\t\t\t|\t|\t|\t|----> Startup/Shutdown\n\t\t\t|\t|\t|\t|\t\t|-----> Reopen last project on startup (勾选打开IED时是否直接进入到上一次关闭时的项目工程)\n\t\t\t|\t|\t|\t|\t\t|-----> Confirm application exit (退出提示两次)\n\t\t\t|\t|\t|\t|----> project opening 项目工程的打开方式.\n\t\t\t|\t|\t|\t|\t\t|-----> 打开新的窗口,在相同的窗口打开,经过确定打开窗口\n\t\t\t|\t|\t|\t|----> Synchronization \n\t\t\t|\t|\t|\t\t\t|-----> Synchronize files on frame activation (勾选,自动同步文件到项目中,\n\t\t\t|\t|\t|\t\t\t|\t例如,当IDE切换到后台,项目过程中有某个文件被其它方式修改了,切换到IDE时自动更新.)\n\t\t\t|\t|\t|\t\t\t|-----> Save files on frame deactivation (勾选,IDE切换到后台时自动保存文件)\n\t\t\t|\t|\t|\t\t\t|-----> Save files automatically if application is ide for 15 sec \n\t\t\t|\t|\t|\t\t\t|\t当ide在15秒内无操作时,自动保存文件.\n\t\t\t|\t|\t|\t\t\t|-----> Use \"safe write\" (save changes to a temporary file first) 保存时保存临时文件.\n\t\t\t|\t|\t|---> Passwords --> Password storage policy\n\t\t\t|\t|\t|\t\t\t|-----> Do not remember passwords 每次都需要输入密码\n\t\t\t|\t|\t|\t\t\t|-----> Remember passwords until the application is closed \n\t\t\t|\t|\t|\t\t\t|\t打开过一IDE输入过一次密码后,直到关闭IDE都无需再输入密码.\n\t\t\t|\t|\t|\t\t\t|-----> Save on disk with master password protection 保存磁盘,无需要再输入 .\n\t\t\t|\t|\t|---> * Http Proxy 代理 (红杏有免费提供AS的代理) 主机名为: hx.gy 端口为:1080 \n\t\t\t|\t|\t|---> Updates 软件更新,有自动更新,可选择版本类型,等.\n\t\t\t|\t|---> File Colors 文件颜色\n\t\t\t|\t|---> Scopes 定义范围\n\t\t\t|\t|\t|---> 点击 + 新创建 --> 输入名称如App --> 窗口中间的结构中选择不需要的范围可以进行,Exclude 排除\n\t\t\t|\t|\t\t|--> 使用时.在编程界面ctrl+shift+F弹出搜索框\n\t\t\t|\t|\t\t|\t|--> Scope --> 选择Custom: App . 搜索的内容就是经过自定义筛选的.\n\t\t\t|\t|\t\t|--> Analyze --> Inspect Code --> 也可以选择Custom scope  ,在指定范围内做代码检查. \n\t\t\t|\t|---> Notifications 通知栏气泡. 定义提示不提示通知项.\n\t\t\t|\t|---> Quick Lists 宏 \n\t\t\t|---> Keymap 快捷键设置 --> Keymaps: 中有很多种选择.,下面的栏目则可以修改快捷键的按键.\n\t\t\t|\t|---> 常用的快捷键:\n\t\t\t|\t|---> * 快速输入多行内容 ctrl+shift+alt+鼠标点击多行 , 出现多个光标,然后输入内容. \n\t\t\t|\t|---> * 删除整行 Ctrl+Y\n\t\t\t|\t|---> * 复制当前行 Ctrl+D\n\t\t\t|\t|---> * 剪切当前行 Ctrl+X\n\t\t\t|\t|---> * 交换位置 Ctrl+Shift+箭头 如果是方法体内,上下交换代码,方法则交换方法位置\n\t\t\t|\t|---> * 呼出大纲 Ctrl+F12 \n\t\t\t|\t|---> * 查找引用 Alt+F7 查找出来的结果会分为读与写\n\t\t\t|\t|---> * 重命名 Shift+F6 会重名名引用的名称\n\t\t\t|\t|---> * 格式化代码 Ctrl+Alt+L \n\t\t\t|\t|---> 移动鼠标,单词间跳跃 Ctrl +箭头 \n\t\t\t|\t|---> 快速定义常量 Ctrl+Alt+C 如: int i = 100; 选中100后使用快捷键\n\t\t\t|\t|---> 其它更多\n\t\t\t|---> Editor 编辑器设置 \n\t\t\t|\t|--> General --> 子内容\n\t\t\t|\t|\t|\t|--> mouse \n\t\t\t|\t|\t|\t|\t|--> Honor\"CamelHumps\"words settings when selecting on 双击选择的是一个变量,还是变量中的一个单词 . \n\t\t\t|\t|\t|\t|\t|\t支持此功能需要在General/Smark Keys中Rus\"camelHumps\"words打勾,默认没勾选\n\t\t\t|\t|\t|\t|\t|--> Change font size (Zoom) with Ctrl+Mouse Wheel 通过Ctrl加鼠标滚轮放大缩小字体\n\t\t\t|\t|\t|\t|\t|--> Enable Drag'n'Drop functionality in editor 拖拽模式,鼠标选中的内容用鼠标点中后拖拽到其它地方. \n\t\t\t|\t|\t|\t|--> Soft Wraps\n\t\t\t|\t|\t|\t|\t|--> Use soft wraps in Editor 软回车\n\t\t\t|\t|\t|\t|--> Other \n\t\t\t|\t|\t|\t|\t|--> Strip trailing spaces on Save: ... 保存时删除行尾的空格\n\t\t\t|\t|\t|\t|\t|--> Show quick doc on mouse move Delay(ms)500 勾选后通过鼠标悬浮到内容上显示文档(默认关闭)\n\t\t\t|\t|\t|\t|--> * Highlight on Caret Movement 高亮显示\n\t\t\t|\t|\t|\t|\t|--> * Highlight matched brace 高亮显示括号\n\t\t\t|\t|\t|\t|\t|--> * Highlight current scope 选中的范围是否高亮显示\n\t\t\t|\t|\t|\t|\t|--> * Highlight usages of element at caret 选中的元素是否高亮显示\n\t\t\t|\t|\t|\t|--> Formatting  格式化代码时是否显示通知\n\t\t\t|\t|\t|\t|--> Refactorings 重构相关\n\t\t\t|\t|\t|\t|\t|--> Enable in-Place mode 启动重构模式 Ctrl+Alt+C\n\t\t\t|\t|\t|\t|--> Limits\n\t\t\t|\t|\t|\t|\t|--> Maximum number of contents to keep in clipboard: 5 粘贴板的数量. 可以同时拷贝的数据. \n\t\t\t|\t|\t|\t|\t|\t使用方法: 多次拷贝内容后,需要粘贴指定次内容时,Ctrl+Shift+V 在呼出的对话框中选择粘贴内容\n\t\t\t|\t|\t|\t|\t|--> Recent files limit 50 最近打开的文件限制个数\n\t\t\t|\t|\t|\t|\t|-->　console commands history size: 300 命令行面板上下键切换使用过的命令\n\t\t\t|\t|\t|\t|--> Rich-text copy 拷贝内容样式 默认激活,用处是拷贝一些代码到Word文档的时候保持原有的字体颜色样式.\n\t\t\t|\t|\t|--> Smart Keys \n\t\t\t|\t|\t|\t|----> Home 键 定位 尝试点多几次Home键\n\t\t\t|\t|\t|\t|----> End 键 定位\n\t\t\t|\t|\t|\t|----> Insert pair bracket 自动补全括号\n\t\t\t|\t|\t|\t|----> Insert pair quote 自动补全引号\n\t\t\t|\t|\t|\t|----> Reformat block on typing\"}\" 当我们输入括号}结尾时,格式化代码\n\t\t\t|\t|\t|\t|----> Use \"camelHumps\" words 见上面mouse\n\t\t\t|\t|\t|\t|----> Surround selection on typing quote or brace \n\t\t\t|\t|\t|\t|\t勾选后, 选择代码后,输入一个{括号可以把所选择的代码加入到{里面} ,也可以使用\"号 把内容\"引起来\"\n\t\t\t|\t|\t|\t|----> Enter 回车键功能\n\t\t\t|\t|\t|\t|----> Smart indent  缩进\n\t\t\t|\t|\t|\t|----> Insert pair \"}\" 补全大括号\n\t\t\t|\t|\t|\t|----> Insert documentation comment stub 自动生成注释文档\n\t\t\t|\t|\t|\t|----> 后面对于Xml/Html/Css等的配置\n\t\t\t|\t|\t|--> Appearance 编辑器外观的一些设置\n\t\t\t|\t|\t|\t|----> Use anti-aliased font 是否启用抗锯齿字体\n\t\t\t|\t|\t|\t|----> Caret blinking(ms) 500 光标闪烁速度\n\t\t\t|\t|\t|\t|----> * Show line numbers 显示代码行数(默认未勾选) \n\t\t\t|\t|\t|--> Editor Tabs 编辑器Tab的\n\t\t\t|\t|\t|\t|----> Tab Appearance 外观\n\t\t\t|\t|\t|\t|\t|-----> Placement: 标签Tab显示位置\n\t\t\t|\t|\t|\t|\t|-----> Show Tabs in single row 显示单行 Hide tabs if there is no space 没有空间,隐藏标签\n\t\t\t|\t|\t|\t|\t|-----> Hide file extension in editor tabs 隐藏文件后缀\n\t\t\t|\t|\t|\t|\t|-----> Show directory in editor tabs for non-unique filenames 文件名相同显示文件路径\n\t\t\t|\t|\t|\t|\t|-----> mark modified tabs with asterisk 用星号标记修改标签(未保存显示*,可结合不自动保存)\n\t\t\t|\t|\t|\t|----> Tab Closing Policy 标签关闭策略\n\t\t\t|\t|\t|\t|\t|-----> Tab limit 10 标签最大上限 ,后面的选项为优先关闭选项\n\t\t\t|\t|\t|--> Code Folding 代码的折叠 设置\n\t\t\t|\t|\t|--> Code Completion \n\t\t\t|\t|\t|\t|----> code Completion\n\t\t\t|\t|\t|\t|\t|-----> Case sensitive completion : All / None / First letter 代码提示对大小写的要求\n\t\t\t|\t|\t|\t|\t|\t三种选项, 意思是编辑器在输入代码时代码提示的内容要求.其中None最为宽松 , \n\t\t\t|\t|\t|\t|\t|-----> Auto-insert when only one choice on : \n\t\t\t|\t|\t|\t|\t|\t|--> Basic Completion(Ctrl+Space), 重新唤醒代码提示框  \n\t\t\t|\t|\t|\t|\t|-----> 自动弹出时间等设置\n\t\t\t|\t|\t|--> Auto Import 自动导入设置\n\t\t\t|\t|\t|--> Postfix Completion 代码完成的快捷方式\n\t\t\t|\t|\t|\t|----> Expend templates with : Tab / Space / Enter\n\t\t\t|\t|\t|--> Console Folding 控制台代码折叠 设置\n\t\t\t|\t|--> *Colors & Fonts 编辑器主题颜色字体设置 Scheme\t\n\t\t\t|\t|\t|--> Font 设置编辑器字体大小\n\t\t\t|\t|\t|--> Android Logcat 设置Logcat的颜色,默认比较单调.可在些处进行修改\n\t\t\t|\t|--> Code Style 代码风格 一般由整个项目组决定\n\t\t\t|\t|--> Inspections 代码检查配置\n\t\t\t|\t|\t|--> 例如: Android Lint / addJavasriptInterface Called 很常见的开启WebView的JavaScript的一个报警 \n\t\t\t|\t|\t|\t勾选则如果编写此代码警告 Severity: 可自定义选择错误级别.以及检查范围 \n\t\t\t|\t|--> * File and Code Templates 文件代码模板\n\t\t\t|\t|\t|---> Templates / Includes / Code / Other 四种 \n\t\t\t|\t|--> * File Encodings 文件编码方式 通常设置成UTF-8\n\t\t\t|\t|\t|--> IDE Encoding : UTF-8  \n\t\t\t|\t|\t|--> Project Encoding : UTF-8（默认GBK）\n\t\t\t|\t|\t|--> Default encoding for properties files: UTF-8 (默认<System Default> (now GBK))\n\t\t\t|\t|--> * Live Templates 动态模板 快速创建模板 如geti 快速编写出getInstance()方法\n\t\t\t|\t|--> File Types 打开文件类型\n\t\t\t|---> Plugins 插件 可在线下载或使用本地插件\n\t\t\t|\t|--> 介绍几个插件 : JsonFormat 插件 快速把Json字符串生成一个对象类 ; 使用步骤:\n\t\t\t|\t|\t1. 拷贝需要生成对象的Json字符串,\n\t\t\t|\t|\t2.在已创建的一个类中点击右键>Generate>JsonFormat>粘贴到弹出框中>ok>自动创建代码.\n\t\t\t|---> Version control 版本控制配置\n\t\t\t|---> Build,Execution,Deployment 构建、执行部署 Gradle配置 等\n\t\t\t|---> Languages&Frameworks 语言与框架\n\t\t\t|---> Tools 工具\n\t\t\t|\t|--> 外部工具的配置等\n\tEdit \n\t\t|--> Copy Reference 拷贝包含包名类名的字符串 \n\t\t|\t例如: 一个Activity类,全选类名,使用些种拷贝方式,粘贴到AndroidManifest.xml时,内容为包名.类名\n\t\t|--> Copy from History 粘贴历史拷贝\n\t\t|--> * Column Selection Mode 列选择模式 可进行多行部分选择.批量处理. \n\t\t|--> Toggle Case 转换大小写\n\tNavigate\n\t\t|--> 导航 , 跳转 也可以使用Ctrl+鼠标点击对应方法,或属性\n\tCode \n\t\t|--> Override Methods 实现父类方法\n\t\t|--> Generate...  生成方法. 如 hashCode equals 等方法,并会自动实现方法\n\t\t|--> Surround With.. 生成代码 , 如if,try catch 语句等\n\n\t编辑器右击选项中:\n\t\t|--> refactor --> Encapsulap Fields  生成get set方法\n\t\t|--> Lacal History 自带版本控制,可查看历史修改记录等\n\n其它快捷键:     \nAlt+Enter 万能键 / 如导入包, 错误解决方案提示等.     \nCtrl+Q 查看代码中的图片   \n双击Shift 会弹出搜索框   \n\n泛型 @StringRes @ColorRes 要求参数类似   \n例: private void showToast(@StringRes int stringId){...}   \n\n\n代码扫描查找代码潜在错误\n\n\tAnalyze  --> Inspect Code --> 选择扫描对象 --> ok \n\n\n---\n\n# <a id=\"创建工程\"></a>创建工程\n\nFile-->New-->New Project-->输入项目名,包名,项目存放地址等信息-->   \n选择开发的设备,并选择支持最小SDK版本-->点击\"Help me choose\"可查看版本目前支持的版本占用情况     \n-->Next-->选择模板-->Next-->输入Activity与Layout的名称-->Finish-->一个新的项目工程就创建完毕.      \n\n---\n\n# <a id=\"引用第三方类库(模块)\"></a>引用第三方类库(模块)\n\n\t创建一个类库\n\t\tFile->New-->New Module-->其中可以选择多种类型,    \n\t\t如果Android Library新创建一个,Import Existing Project导入Eclipse或者Gradle项目 等-->    \n\t\t假设新创建一个类库-->与创建项目一个,输入项目包等-->选择模板-->Finish\n\n\t引入类库(远程,jar,本地库)\n\t\t选择需要引用类库的项目-->右击-->Open Module Settings 或者使用快捷键(F4)\n\t\t-->Project Structure窗口-->选择需要引入类库的项目-->右边点击 Dependencies   \n\t\t-->点击右边的+号-->三种选择 Lrbrary(远程) , File(jar) , module(本地) ,\n\t\t--> 选择最后一种 module dependencies 引入本地库   \n\t\t-->选择上面新创建的类库-->OK-->这样就关联了一个第三方模块,类库了.   \n\n---\n\n# <a id=\"导入Eclipse项目\"></a>导入Eclipse项目\n\n\tFile-->New-->Import Project-->选择Eclipse项目工程-->提示导入的项目存放地址(建议不要与原项目使用相同的目录\n\t,因为会重新拷贝一份代码并修改成Android Studio的环境)-->弹出一提示,说之前引用的jar包以及一些引用的类库,\n\t都会被替换成dependencies ,如果能找到源.-->Finish-->引入完成会弹出一个导入报告-->报告里面有说明一些没有导入进来的文件名称\n\t-->因为这些文件不是工程项目的文件.项目外的文件.-->如果有重要的文件需要自己手动拷贝到项目中.\n\n---\n\n# <a id=\"Android-Studio目录结构(Project视图)\"></a>Android Studio目录结构(Project视图)\n\n\t目录结构视图\n\tAndroid studio project 相当于 eclipse workspace   \n\tAndroid studio module 相当于 eclipse project \n\n\n\t∨MyApplication  --> 项目根节点\n\t\t|＞ .gradle -->Gradle的临时文件\n\t\t|＞ .idea --> \n\t\t|∨* app --> 主要的模块,如果配置正常时字体为粗体 \n\t\t|\t|＞ build  --> 模块的临时文件与最终的apk文件\n\t\t|\t|\t|＞outputs ＞apk ＞目录下生成apk文件\n\t\t|\t|＞* libs --> 存放jar包, 不能存so文件\n\t\t|\t|∨* src --> 源代码目录\n\t\t|\t\t|＞ androidTest --> 测试源代码\n\t\t|\t\t|∨ main --> 源代码\n\t\t|\t\t|\t|＞ aidl --> 是aidl文件源代码目录,AIDL:即Android接口定义语言。\n\t\t|\t\t|\t|＞ assets --> 资源目录\n\t\t|\t\t|\t|＞ java --> 源代码\n\t\t|\t\t|\t|＞ jni --> 存放C语言文件\n\t\t|\t\t|\t|＞* jniLibs --> 存放so文件\n\t\t|\t\t|\t|＞ res --> 资源文件\n\t\t|\t\t|\t|AndroidManifest.xml \n\t\t|\t\t|.gitignore\n\t\t|\t\t|app.iml\n\t\t|\t\t|* build.gradle --> Gradle构建脚本,对当前模块设置的Gradle文件\n\t\t|\t\t|proguard-rules.pro --> 代码混淆配置文件\n\t\t|＞ build --> 编译过程中的一些临时文件\n\t\t|＞ gradle --> 默认生成的一个本地的Gradle引导语,如果机器没有Gradle环境,会通过下载\n\t\t|＞ library --> 如果项目中有多个模块,官方建议创建一个目录library目录下存放其它模块\n\t\t|\t＞ myLibrary --> 其它第三方模块 .\n\t\t|.gitignore\n\t\t|*build.gradle --> Gradle构建脚本,全局Gradle\n\t\t|build.gradle.bk\n\t\t|gradle.properties --> Gradle属性文件\n\t\t|gradlew\n\t\t|gradlew.bat --> gradle批处理文件\n\t\t|local.properties --> Android ADT bundle SDK目录配置文件\n\t\t|MyApplication.iml\n\t\t|*settings.gradle --> 项目模块配置文件\n\n---\n\n# <a id=\"Gradle\"></a>Gradle \n\t\nGradle是一种动态脚本语言, 基于Groovy  [http://www.groovy-lang.org/](http://www.groovy-lang.org/)   \n能够很方便的通过Maven/lvy管理依赖   \n使用非常灵活,一种效果可以有多种实现   \n\n[http://gradle.org/](http://gradle.org/)   \n\n\n---\n\n# <a id=\"settings.gradle\"></a>settings.gradle\n\n案例: \n\n<pre class=\"brush: shell;\">\n\tinclude ':app', ':library:mylibrary'  \n</pre>\n\n\t\":\"是一个路径的分割线\n\n\t注意: 当 Open Module Settings  --> Project Structure \n\t\t--> Dependencies 有配置过库 :mylibrary 直接修改settings.gradle成:library:mylibrary会编译异常\n\n\tError:(25, 0) Project with path ':mylibrary' could not be found in project ':app'.\n\n\t这时,需要在Open Module Settings  -- > Project Structure --> app \n\t\t--> Dependencies --> + module Dependencies 中的:mylibrary删除 即可,并重新增加:library:mylibrary\n\n---\n\n# <a id=\"项目根节点下的build.gradle\"></a>项目根节点下的build.gradle\n\n案例: \n\n<pre class=\"brush: java;\">\n\n\t// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\tbuildscript { //\n\t    repositories {\n\t\tjcenter() //依赖库\n\t    }\n\t    dependencies { \n\t\tclasspath 'com.android.tools.build:gradle:1.2.2'//当前工程需要依赖的插件\n\n\t\t// NOTE: Do not place your application dependencies here; they belong\n\t\t// in the individual module build.gradle files\n\t    }\n\t}\n\n\tallprojects { //所有工程 \n\t    repositories {\n\t\tjcenter()//依赖库 --> 默认使用的是https加密库,当使用代理时,有可能不支持https ,则有可能出错\n\t    }\n\t}\n</pre>\n\n---\n\n# <a id=\"模块根节点下的build.gradle\"></a>模块根节点下的build.gradle\n\n案例: \n\n<pre class=\"brush: java;\">\t\n\t//声明是一个Application 最终会生成一个apk\n\t//如果是一个库 'com.android.library' 这样就不会输出apk,\n\t//只会输出 jar 包或者 aar (aar是包含文件与资源的一个包,Eclipse不支持)\n\tapply plugin: 'com.android.application'  \n\n\tandroid { //安卓编译环境设置\n\t\tcompileSdkVersion 22 //需要与自己的已下载的Build版本对应\n\t\tbuildToolsVersion \"22.0.1\" \n\t\t//注意,如果是网络下载下来的项目,需要查看自己的AS是否有相同Build的版本,没有则修改,否则报错\n\n\t\tsourceSets{ //配置不同版本原代码不同.与productFlavors对应\n\t\t\tphone{\n\t\t\t\tmanifest.srcFile 'src/phone/AndroidManifest.xml'\n\t\t\t\tassets.srcDirs = ['src/phone/assets']\n\t\t\t\t//java.srcDirs = ['src']\n\t\t\t\t//resources.srcDirs = ['src']\n\t\t\t\t//aidl.srcDirs = ['src']\n\t\t\t\t//renderscript.srcDirs = ['src']\n\t\t\t\t//res.srcDirs = ['src']\n\t\t\t}\n\n\t\t\tpad{\n\t\t\t\tmanifest.srcFile 'src/pad/AndroidManifest.xml'\n\t\t\t\tassets.srcDirs = ['src/pad/assets']\n\t\t\t}\n\n\t\t}\n\n\t\tsigningConfigs{ //签名配置\n\t\t\treleasekey{ //名称自定义\n\t\t\t\tstoreFile file('MyKey.keystore') //文件名\n\t\t\t\tstorePassword 'android' // key密码\n\t\t\t\tkeyAlias 'androiddebugkey' //别名\n\t\t\t\tkeyPassword 'android' //密钥\n\t\t\t}\n\n\t\t\tdebugkey{\n\t\t\t\tstoreFile file('debug.keystore')\n\t\t\t\tstorePassword 'android'\n\t\t\t\tkeyAlias 'androiddebugkey'\n\t\t\t\tkeyPassword 'android'\n\t\t\t}\n\t\t}\n\n\t\tdefaultConfig { //生成的apk的更多信息配置 ,会覆盖AndroidManifest.xml的信息\n\t\t\tapplicationId \"com.tu.myapplication\" //包名 会覆盖AndroidManifest.xml的包名\n\t\t\tminSdkVersion 8\n\t\t\ttargetSdkVersion 22\n\t\t\tversionCode 1\n\t\t\tversionName \"1.0\"\n\n\t\t\tsigningConfig signingConfigs.releasekey //签名配置  指定签名\n\t\t}\n\n\t\tproductFlavors { //产品配置\n\t\t\t//与buildTypes的每一项结合生成包,会在build/outputs/apk/生\n\t\t\t//成 (productFlavors项*buildTypes的项*2)个apk\n\t\t\tphone {\n\t\t\t\tapplicationId 'com.tu.myapplication' //不同包名\n\t\t\t\tsigningConfig signingConfigs.debugkey //不同签名\n\t\t\t}\n\t\t\tpad {\n\t\t\t\tapplicationId 'com.tu.myapplication.hd'\n\t\t\t\tsigningConfig signingConfigs.debugkey\n\t\t\t}\n\t\t}\n\n\t\tbuildTypes { //编译类型, 主要用于你这个包编译出来是做什么用的.\n\t\t\t//通常系统默认有两种,一种是release 二种是debug 生成4个apk包  , \n\t\t\t//如果 productFlavors 有配置项如2个,buildTypes默认的2个则会生成2*2*2=8个apk包\n\n\t\t\trelease { //为默认项配置混淆文件\n\t\t\t    minifyEnabled false\n\t\t\t    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n\t\t\t}\n\n\t\t\t//        //会生成两个包 app-fordebug.apk , app-fordebug-unaligned.apk\n\t\t\t//        fordebug {\n\t\t\t//            applicationIdSuffix '.debug'\n\t\t\t//\t\t//包名会加.debug后缀即: com.tu.myapplication.debug\n\t\t\t//        }\n\t\t\t//\n\t\t\t//        //会生成两个包 app-fordailybuild.apk , app-fordailybuild-unaligned.apk\n\t\t\t//        fordailybuild{\n\t\t\t//            applicationIdSuffix '.db'//包名会加.db后缀\n\t\t\t//        }\n\t\t\t//\n\t\t\t//        //会生成两个包 app-formonkeytest.apk , app-formonkeytest-unaligned.apk\n\t\t\t//        formonkeytest{\n\t\t\t//            applicationIdSuffix '.monkey'\n\t\t\t//        }\n\t\t}\n\t}\n\n\tdependencies {\t//依赖关系\n\t\t//单独引入jar包 --> Open Module Settings  -- > Project Structure -->\n\t\t//app --> Dependencies --> + File Dependencies -->选择jar包\n\t\t//compile files('libs/gson-2.2.4.jar') //使用单独引入jar包的方式\n\n\t\t//动态引入包\n\t\t//表示引入libs目录下的所有jar包 , 并且是动态的.\n\t\tcompile fileTree(include: ['*.jar'], dir: 'libs') \n\n\t\t//引入Libaray v7包 Open Module Settings  -- > Project Structure --> \n\t\t//app --> Dependencies --> + Library Dependencies\n\t\tcompile 'com.android.support:appcompat-v7:22.1.1' //这种方式表示引入单个包.\n\n\t\t//引入 本地包 Open Module Settings  -- > Project Structure --> app --> \n\t\t//Dependencies --> + module Dependencies\n\t\tcompile project(':library:mylibrary') //这种方式表示引入一个本地库(本地模块)\n\n\t\t//引入远程库 Open Module Settings  -- > Project Structure --> app --> \n\t\t//Dependencies --> + Library Dependencies 搜索框内直接搜索\n\t\t//搜索 httpmime 后选择库即可. Gradle会后台下载jar包. 但如果你没有代理\n\t\tcompile 'org.apache.httpcomponents:httpmime:4.5' \n\n\t\t//红杏有提供给开发都一个免费代理,主机名为: hx.gy 端口为:1080\n\t\t//File--> settings --> Appearance & Behavior --> \n\t\t//System Settings --> HTTP Proxy --> 勾选manual proxy configuration \n\t\t//--> HTTP --> Host name:输入 hx.gy --> Port number:输入 1080 -->ok\n\t}\n</pre>\n\n---\n\n# <a id=\"Gradle命令行\"></a>Gradle命令行\n\t\n\t> gradle命令行运行需要下载一个gradle 并把gradle目录下的bin目录配置到环境变量中. 然后使用cmd\n\n\t> Android Studio目录下一般也会有个gradle / gradle-x.x/ 也可以配置这个bin目录 然后使用cmd\n\t\n\t> 也可以定位到项目目录下有 gradlew.bat 文件是 gradle批处理文件 定位后cmd中运行 gradlew命令\n\n\t> Android studio中有Terminal 窗口 也可以直接使用命令,而不用进入到cmd \n\t\n\t常用命令: \n\tgradle tasks 罗列可执行的任务   \n\tgradle build 编译全部脚本   \n\tgradle clean 清除项目\n\tgradle 加tasks列出的名称,指定编译内容 如: gradle assembleDebug   \n\n---\n\n# <a id=\"加速Android-Studio/Gradle构建\"></a>加速Android Studio/Gradle构建\n\t\n\t优化对电脑配置要求比较高.\n\t\n\t1> 开启gradle单独的守护进程\n\t\t在下面的目录下面创建gradle.properties文件：\n\t\t/home/<username>/.gradle/ (Linux)\n\t\t/Users/<username>/.gradle/ (Mac)\n\t\tC:\\Users\\<username>\\.gradle (Windows)\n\t\t并在文件中增加:\n\n<pre class=\"brush: java;\">\norg.gradle.daemon=true\n</pre>\n\t\n\t2> 同时修改项目下的 gradle.properties 文件也可以优化(也可以在步骤1>里面直接加入,变成全局,针对所有项目生效)：\n\t\n<pre class=\"brush: java;\">\norg.gradle.daemon=true\n\norg.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\n\norg.gradle.parallel=true\n\norg.gradle.configureondemand=true\n</pre>\t\n\n\t3> 对Android Studio构建优化\n\n\t> File --> settings \n\t\t\t|--> Build,Execution,Deployment \n\t\t\t\t|--> Build Tools \n\t\t\t\t\t|--> Gradle --> 项中勾选 Offline work  (离线工作模式)\n\t\t\t\t\t|\t\t|--> Gradle VM options :  -Xmx2048m -XX:MaxPermSize=512m\n\t\t\t\t\t|--> Compiler \n\t\t\t\t\t\t|--> 勾选 Compile independent modules in parallel (may require larger heap size)\n\t\t\t\t\t\t|--> VM Options:输入 -Xmx2048m -XX:MaxPermSize=512m\n\t\t\t\t\t\t|--> Command-line Options:输入 --offline\n\n\t4> 命令行构建\n\t\t\n\t\t在构建命令后面加 --daemon --parallel --offline \n\t\t例如\n\t\tgradle build --daemon --parallel --offline\n\t\t1) Total time: 34.133 secs 第一次构建\n\t\t3) Total time: 12.748 secs 未修改任何内容第三次构建\n\t\t5) Total time: 12.639 secs\n\t\t7) Total time: 12.201 secs\n\n\t\tgradle build\n\t\t2) Total time: 21.371 secs 未修改任何内容第二次构建\n\t\t4) Total time: 18.891 secs\n\t\t6) Total time: 18.823 secs\n\t\t8) Total time: 18.79 secs\n\n\t5> 引入依赖库时使用aar\n\t\t如果库项目工程为 apply plugin: 'com.android.library' 的,则会在目录\n\t\t库/build/outputs/arr/xxxx.aar 生成文件\n\n---\n\n# <a id=\"Eclipse-中使用-Gradle\"></a>Eclipse 中使用 Gradle\n\n在Eclipse项目根目录下创建build.gradle文件\n\n<pre class=\"brush: java;\">\t\n\tapply plugin: 'com.android.application'\n\t//让Eclipse的项目使用gradle进行编译, cmd 定位到项目根目录,\n\t//使用gradle build进行编译 . \n\t//生成到build目录中, \n\tandroid{\n\t\tcompildSdkVersion 21\n\t\tbuildToolsVersion \"21.1.2\"\n\t\t\n\t\tsourceSets{\n\t\t\tmain{\n\t\t\t\tmanifest.srcFile 'AndroidManifest.xml'\n\t\t\t\tjava.srcDirs = ['src']\n\t\t\t\tresources.srcDirs = ['src']\n\t\t\t\taidl.srcDirs = ['src']\n\t\t\t\trenderscript.srcDirs = ['src']\n\t\t\t\tres.srcDirs = ['src']\n\t\t\t\tassets.srcDirs = ['src']\n\t\t\t}\n\t\t}\n\t}\n\n\tdependencies{\n\t\t//...一些引入包\n\t}\n</pre>\n\n---\n\n# <a id=\"一些常见错误\"></a>一些常见错误\n\n出现gradle无法下载等时可以尝试修改一些代码如: \n\n\t修改MyApplication/gradle/wrapper/gradle-wrpper.properties文件\n\tdistributionUrl=https\\://services.gradle.org/distributions/gradle-2.2.1-all.zip\n\t修改https为http: distributionUrl=http\\://services.gradle.org/distributions/gradle-2.2.1-all.zip\n\n代理下载错误\n\n<pre class=\"brush: java;\">\t\n\tappcenter\n\tbuildscript{\n\t\trepositories{\n\t\t\tmaven{url \"http://repo1.maven.org/maven2\"}\n\t\t\tjcenter{\n\t\t\t\turl \"http://jcenter.bintray.com\"\n\t\t\t}\n\t\t}\n\t\tdependencies {classpath 'com.android.tools.build:gradle:1.1.0+'}\n\t}\n</pre>\n\n安卓ADT的目录错误 修改local.properties \n\n---\n\n更多内容后续补上.\n\n[本文案例Demo](/res/file/blog/2015/01/01/Java_Android_Studio_IDE/MyApplication.rar)\n\n\n\n\t\n\n\n\n\n\n\n\n\n\n","slug":"Java_Android_Studio_IDE","published":1,"updated":"2016-04-27T03:01:13.340Z","comments":1,"photos":[],"link":"","_id":"cinu3etyt001rxoj0i2xpqi15","content":"<p>Android studio 使用笔记.<br>其中内容包括AS基本设置,创建项目,引用第三方类库,导入Eclipse项目,<br>Gradle,加速AS运行速度,Eclipse中使用Gradle,以及一些AS的常见错误.   </p>\n<a id=\"more\"></a> \n<p>目录</p>\n<ul>\n<li><a href=\"#基本设置\">基本设置</a></li>\n<li><a href=\"#创建工程\">创建工程</a></li>\n<li><a href=\"#引用第三方类库(模块\">引用第三方类库(模块)</a>)</li>\n<li><a href=\"#导入Eclipse项目\">导入Eclipse项目</a> </li>\n<li><a href=\"# &lt;android-Studio目录结构(Project视图\">Android-Studio目录结构(Project视图)</a>)</li>\n<li><a href=\"#Gradle\">Gradle</a></li>\n<li><a href=\"#settings.gradle\">settings.gradle</a></li>\n<li><a href=\"#项目根节点下的build.gradle\">项目根节点下的build.gradle</a></li>\n<li><a href=\"#模块根节点下的build.gradle\">模块根节点下的build.gradle</a></li>\n<li><a href=\"#Gradle命令行\">Gradle命令行</a></li>\n<li><a href=\"#加速Android-Studio/Gradle构建\">加速Android-Studio/Gradle构建</a></li>\n<li><a href=\"#Eclipse-中使用-Gradle\">Eclipse-中使用-Gradle</a></li>\n<li><a href=\"#一些常见错误\">一些常见错误</a></li>\n</ul>\n<p>Android Studio下载   </p>\n<p><a href=\"http://www.androiddevtools.cn/\" target=\"_blank\" rel=\"external\">http://www.androiddevtools.cn/</a></p>\n<p>安装完AS后第一次运行会自动下载一些组建,建议进行翻墙. </p>\n<hr>\n<h1 id=\"基本设置\"><a href=\"#基本设置\" class=\"headerlink\" title=\"基本设置\"></a><a id=\"基本设置\"></a>基本设置</h1><pre><code>一些常用设置项罗列\n\n  File --&gt; Settings  \n        |--&gt;Appearance &amp; Behavior \n        |    |---&gt; Appearance \n        |    |    |---&gt; UI Options \n        |    |    |    |----&gt; Threme: 有三种IDE主题供选择.\n        |    |    |    |----&gt; * Override default fonts by (not recomended)一整个软件的字体\n        |    |    |    |----&gt; Cyclic scrolling in list 内勾选后内容滚动支持滚动尾部跳顶部,顶部跳尾部.\n        |    |    |---&gt; Window Options \n        |    |    |    |----&gt; Allow merging buttons on dialogs (勾选合并相类似的按钮到一个按钮中.) \n        |    |---&gt; Menus and Toolbars --&gt; 自定义增减菜单内容.\n        |    |---&gt; System Settings \n        |    |    |    |----&gt; Startup/Shutdown\n        |    |    |    |        |-----&gt; Reopen last project on startup (勾选打开IED时是否直接进入到上一次关闭时的项目工程)\n        |    |    |    |        |-----&gt; Confirm application exit (退出提示两次)\n        |    |    |    |----&gt; project opening 项目工程的打开方式.\n        |    |    |    |        |-----&gt; 打开新的窗口,在相同的窗口打开,经过确定打开窗口\n        |    |    |    |----&gt; Synchronization \n        |    |    |            |-----&gt; Synchronize files on frame activation (勾选,自动同步文件到项目中,\n        |    |    |            |    例如,当IDE切换到后台,项目过程中有某个文件被其它方式修改了,切换到IDE时自动更新.)\n        |    |    |            |-----&gt; Save files on frame deactivation (勾选,IDE切换到后台时自动保存文件)\n        |    |    |            |-----&gt; Save files automatically if application is ide for 15 sec \n        |    |    |            |    当ide在15秒内无操作时,自动保存文件.\n        |    |    |            |-----&gt; Use &quot;safe write&quot; (save changes to a temporary file first) 保存时保存临时文件.\n        |    |    |---&gt; Passwords --&gt; Password storage policy\n        |    |    |            |-----&gt; Do not remember passwords 每次都需要输入密码\n        |    |    |            |-----&gt; Remember passwords until the application is closed \n        |    |    |            |    打开过一IDE输入过一次密码后,直到关闭IDE都无需再输入密码.\n        |    |    |            |-----&gt; Save on disk with master password protection 保存磁盘,无需要再输入 .\n        |    |    |---&gt; * Http Proxy 代理 (红杏有免费提供AS的代理) 主机名为: hx.gy 端口为:1080 \n        |    |    |---&gt; Updates 软件更新,有自动更新,可选择版本类型,等.\n        |    |---&gt; File Colors 文件颜色\n        |    |---&gt; Scopes 定义范围\n        |    |    |---&gt; 点击 + 新创建 --&gt; 输入名称如App --&gt; 窗口中间的结构中选择不需要的范围可以进行,Exclude 排除\n        |    |        |--&gt; 使用时.在编程界面ctrl+shift+F弹出搜索框\n        |    |        |    |--&gt; Scope --&gt; 选择Custom: App . 搜索的内容就是经过自定义筛选的.\n        |    |        |--&gt; Analyze --&gt; Inspect Code --&gt; 也可以选择Custom scope  ,在指定范围内做代码检查. \n        |    |---&gt; Notifications 通知栏气泡. 定义提示不提示通知项.\n        |    |---&gt; Quick Lists 宏 \n        |---&gt; Keymap 快捷键设置 --&gt; Keymaps: 中有很多种选择.,下面的栏目则可以修改快捷键的按键.\n        |    |---&gt; 常用的快捷键:\n        |    |---&gt; * 快速输入多行内容 ctrl+shift+alt+鼠标点击多行 , 出现多个光标,然后输入内容. \n        |    |---&gt; * 删除整行 Ctrl+Y\n        |    |---&gt; * 复制当前行 Ctrl+D\n        |    |---&gt; * 剪切当前行 Ctrl+X\n        |    |---&gt; * 交换位置 Ctrl+Shift+箭头 如果是方法体内,上下交换代码,方法则交换方法位置\n        |    |---&gt; * 呼出大纲 Ctrl+F12 \n        |    |---&gt; * 查找引用 Alt+F7 查找出来的结果会分为读与写\n        |    |---&gt; * 重命名 Shift+F6 会重名名引用的名称\n        |    |---&gt; * 格式化代码 Ctrl+Alt+L \n        |    |---&gt; 移动鼠标,单词间跳跃 Ctrl +箭头 \n        |    |---&gt; 快速定义常量 Ctrl+Alt+C 如: int i = 100; 选中100后使用快捷键\n        |    |---&gt; 其它更多\n        |---&gt; Editor 编辑器设置 \n        |    |--&gt; General --&gt; 子内容\n        |    |    |    |--&gt; mouse \n        |    |    |    |    |--&gt; Honor&quot;CamelHumps&quot;words settings when selecting on 双击选择的是一个变量,还是变量中的一个单词 . \n        |    |    |    |    |    支持此功能需要在General/Smark Keys中Rus&quot;camelHumps&quot;words打勾,默认没勾选\n        |    |    |    |    |--&gt; Change font size (Zoom) with Ctrl+Mouse Wheel 通过Ctrl加鼠标滚轮放大缩小字体\n        |    |    |    |    |--&gt; Enable Drag&apos;n&apos;Drop functionality in editor 拖拽模式,鼠标选中的内容用鼠标点中后拖拽到其它地方. \n        |    |    |    |--&gt; Soft Wraps\n        |    |    |    |    |--&gt; Use soft wraps in Editor 软回车\n        |    |    |    |--&gt; Other \n        |    |    |    |    |--&gt; Strip trailing spaces on Save: ... 保存时删除行尾的空格\n        |    |    |    |    |--&gt; Show quick doc on mouse move Delay(ms)500 勾选后通过鼠标悬浮到内容上显示文档(默认关闭)\n        |    |    |    |--&gt; * Highlight on Caret Movement 高亮显示\n        |    |    |    |    |--&gt; * Highlight matched brace 高亮显示括号\n        |    |    |    |    |--&gt; * Highlight current scope 选中的范围是否高亮显示\n        |    |    |    |    |--&gt; * Highlight usages of element at caret 选中的元素是否高亮显示\n        |    |    |    |--&gt; Formatting  格式化代码时是否显示通知\n        |    |    |    |--&gt; Refactorings 重构相关\n        |    |    |    |    |--&gt; Enable in-Place mode 启动重构模式 Ctrl+Alt+C\n        |    |    |    |--&gt; Limits\n        |    |    |    |    |--&gt; Maximum number of contents to keep in clipboard: 5 粘贴板的数量. 可以同时拷贝的数据. \n        |    |    |    |    |    使用方法: 多次拷贝内容后,需要粘贴指定次内容时,Ctrl+Shift+V 在呼出的对话框中选择粘贴内容\n        |    |    |    |    |--&gt; Recent files limit 50 最近打开的文件限制个数\n        |    |    |    |    |--&gt;　console commands history size: 300 命令行面板上下键切换使用过的命令\n        |    |    |    |--&gt; Rich-text copy 拷贝内容样式 默认激活,用处是拷贝一些代码到Word文档的时候保持原有的字体颜色样式.\n        |    |    |--&gt; Smart Keys \n        |    |    |    |----&gt; Home 键 定位 尝试点多几次Home键\n        |    |    |    |----&gt; End 键 定位\n        |    |    |    |----&gt; Insert pair bracket 自动补全括号\n        |    |    |    |----&gt; Insert pair quote 自动补全引号\n        |    |    |    |----&gt; Reformat block on typing&quot;}&quot; 当我们输入括号}结尾时,格式化代码\n        |    |    |    |----&gt; Use &quot;camelHumps&quot; words 见上面mouse\n        |    |    |    |----&gt; Surround selection on typing quote or brace \n        |    |    |    |    勾选后, 选择代码后,输入一个{括号可以把所选择的代码加入到{里面} ,也可以使用&quot;号 把内容&quot;引起来&quot;\n        |    |    |    |----&gt; Enter 回车键功能\n        |    |    |    |----&gt; Smart indent  缩进\n        |    |    |    |----&gt; Insert pair &quot;}&quot; 补全大括号\n        |    |    |    |----&gt; Insert documentation comment stub 自动生成注释文档\n        |    |    |    |----&gt; 后面对于Xml/Html/Css等的配置\n        |    |    |--&gt; Appearance 编辑器外观的一些设置\n        |    |    |    |----&gt; Use anti-aliased font 是否启用抗锯齿字体\n        |    |    |    |----&gt; Caret blinking(ms) 500 光标闪烁速度\n        |    |    |    |----&gt; * Show line numbers 显示代码行数(默认未勾选) \n        |    |    |--&gt; Editor Tabs 编辑器Tab的\n        |    |    |    |----&gt; Tab Appearance 外观\n        |    |    |    |    |-----&gt; Placement: 标签Tab显示位置\n        |    |    |    |    |-----&gt; Show Tabs in single row 显示单行 Hide tabs if there is no space 没有空间,隐藏标签\n        |    |    |    |    |-----&gt; Hide file extension in editor tabs 隐藏文件后缀\n        |    |    |    |    |-----&gt; Show directory in editor tabs for non-unique filenames 文件名相同显示文件路径\n        |    |    |    |    |-----&gt; mark modified tabs with asterisk 用星号标记修改标签(未保存显示*,可结合不自动保存)\n        |    |    |    |----&gt; Tab Closing Policy 标签关闭策略\n        |    |    |    |    |-----&gt; Tab limit 10 标签最大上限 ,后面的选项为优先关闭选项\n        |    |    |--&gt; Code Folding 代码的折叠 设置\n        |    |    |--&gt; Code Completion \n        |    |    |    |----&gt; code Completion\n        |    |    |    |    |-----&gt; Case sensitive completion : All / None / First letter 代码提示对大小写的要求\n        |    |    |    |    |    三种选项, 意思是编辑器在输入代码时代码提示的内容要求.其中None最为宽松 , \n        |    |    |    |    |-----&gt; Auto-insert when only one choice on : \n        |    |    |    |    |    |--&gt; Basic Completion(Ctrl+Space), 重新唤醒代码提示框  \n        |    |    |    |    |-----&gt; 自动弹出时间等设置\n        |    |    |--&gt; Auto Import 自动导入设置\n        |    |    |--&gt; Postfix Completion 代码完成的快捷方式\n        |    |    |    |----&gt; Expend templates with : Tab / Space / Enter\n        |    |    |--&gt; Console Folding 控制台代码折叠 设置\n        |    |--&gt; *Colors &amp; Fonts 编辑器主题颜色字体设置 Scheme    \n        |    |    |--&gt; Font 设置编辑器字体大小\n        |    |    |--&gt; Android Logcat 设置Logcat的颜色,默认比较单调.可在些处进行修改\n        |    |--&gt; Code Style 代码风格 一般由整个项目组决定\n        |    |--&gt; Inspections 代码检查配置\n        |    |    |--&gt; 例如: Android Lint / addJavasriptInterface Called 很常见的开启WebView的JavaScript的一个报警 \n        |    |    |    勾选则如果编写此代码警告 Severity: 可自定义选择错误级别.以及检查范围 \n        |    |--&gt; * File and Code Templates 文件代码模板\n        |    |    |---&gt; Templates / Includes / Code / Other 四种 \n        |    |--&gt; * File Encodings 文件编码方式 通常设置成UTF-8\n        |    |    |--&gt; IDE Encoding : UTF-8  \n        |    |    |--&gt; Project Encoding : UTF-8（默认GBK）\n        |    |    |--&gt; Default encoding for properties files: UTF-8 (默认&lt;System Default&gt; (now GBK))\n        |    |--&gt; * Live Templates 动态模板 快速创建模板 如geti 快速编写出getInstance()方法\n        |    |--&gt; File Types 打开文件类型\n        |---&gt; Plugins 插件 可在线下载或使用本地插件\n        |    |--&gt; 介绍几个插件 : JsonFormat 插件 快速把Json字符串生成一个对象类 ; 使用步骤:\n        |    |    1. 拷贝需要生成对象的Json字符串,\n        |    |    2.在已创建的一个类中点击右键&gt;Generate&gt;JsonFormat&gt;粘贴到弹出框中&gt;ok&gt;自动创建代码.\n        |---&gt; Version control 版本控制配置\n        |---&gt; Build,Execution,Deployment 构建、执行部署 Gradle配置 等\n        |---&gt; Languages&amp;Frameworks 语言与框架\n        |---&gt; Tools 工具\n        |    |--&gt; 外部工具的配置等\nEdit \n    |--&gt; Copy Reference 拷贝包含包名类名的字符串 \n    |    例如: 一个Activity类,全选类名,使用些种拷贝方式,粘贴到AndroidManifest.xml时,内容为包名.类名\n    |--&gt; Copy from History 粘贴历史拷贝\n    |--&gt; * Column Selection Mode 列选择模式 可进行多行部分选择.批量处理. \n    |--&gt; Toggle Case 转换大小写\nNavigate\n    |--&gt; 导航 , 跳转 也可以使用Ctrl+鼠标点击对应方法,或属性\nCode \n    |--&gt; Override Methods 实现父类方法\n    |--&gt; Generate...  生成方法. 如 hashCode equals 等方法,并会自动实现方法\n    |--&gt; Surround With.. 生成代码 , 如if,try catch 语句等\n\n编辑器右击选项中:\n    |--&gt; refactor --&gt; Encapsulap Fields  生成get set方法\n    |--&gt; Lacal History 自带版本控制,可查看历史修改记录等\n</code></pre><p>其它快捷键:<br>Alt+Enter 万能键 / 如导入包, 错误解决方案提示等.<br>Ctrl+Q 查看代码中的图片<br>双击Shift 会弹出搜索框   </p>\n<p>泛型 @StringRes @ColorRes 要求参数类似<br>例: private void showToast(@StringRes int stringId){…}   </p>\n<p>代码扫描查找代码潜在错误</p>\n<pre><code>Analyze  --&gt; Inspect Code --&gt; 选择扫描对象 --&gt; ok \n</code></pre><hr>\n<h1 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a><a id=\"创建工程\"></a>创建工程</h1><p>File–&gt;New–&gt;New Project–&gt;输入项目名,包名,项目存放地址等信息–&gt;<br>选择开发的设备,并选择支持最小SDK版本–&gt;点击”Help me choose”可查看版本目前支持的版本占用情况<br>–&gt;Next–&gt;选择模板–&gt;Next–&gt;输入Activity与Layout的名称–&gt;Finish–&gt;一个新的项目工程就创建完毕.      </p>\n<hr>\n<h1 id=\"引用第三方类库-模块\"><a href=\"#引用第三方类库-模块\" class=\"headerlink\" title=\"引用第三方类库(模块)\"></a><a id=\"引用第三方类库(模块)\"></a>引用第三方类库(模块)</h1><pre><code>创建一个类库\n    File-&gt;New--&gt;New Module--&gt;其中可以选择多种类型,    \n    如果Android Library新创建一个,Import Existing Project导入Eclipse或者Gradle项目 等--&gt;    \n    假设新创建一个类库--&gt;与创建项目一个,输入项目包等--&gt;选择模板--&gt;Finish\n\n引入类库(远程,jar,本地库)\n    选择需要引用类库的项目--&gt;右击--&gt;Open Module Settings 或者使用快捷键(F4)\n    --&gt;Project Structure窗口--&gt;选择需要引入类库的项目--&gt;右边点击 Dependencies   \n    --&gt;点击右边的+号--&gt;三种选择 Lrbrary(远程) , File(jar) , module(本地) ,\n    --&gt; 选择最后一种 module dependencies 引入本地库   \n    --&gt;选择上面新创建的类库--&gt;OK--&gt;这样就关联了一个第三方模块,类库了.   \n</code></pre><hr>\n<h1 id=\"导入Eclipse项目\"><a href=\"#导入Eclipse项目\" class=\"headerlink\" title=\"导入Eclipse项目\"></a><a id=\"导入Eclipse项目\"></a>导入Eclipse项目</h1><pre><code>File--&gt;New--&gt;Import Project--&gt;选择Eclipse项目工程--&gt;提示导入的项目存放地址(建议不要与原项目使用相同的目录\n,因为会重新拷贝一份代码并修改成Android Studio的环境)--&gt;弹出一提示,说之前引用的jar包以及一些引用的类库,\n都会被替换成dependencies ,如果能找到源.--&gt;Finish--&gt;引入完成会弹出一个导入报告--&gt;报告里面有说明一些没有导入进来的文件名称\n--&gt;因为这些文件不是工程项目的文件.项目外的文件.--&gt;如果有重要的文件需要自己手动拷贝到项目中.\n</code></pre><hr>\n<h1 id=\"Android-Studio目录结构-Project视图\"><a href=\"#Android-Studio目录结构-Project视图\" class=\"headerlink\" title=\"Android Studio目录结构(Project视图)\"></a><a id=\"Android-Studio目录结构(Project视图)\"></a>Android Studio目录结构(Project视图)</h1><pre><code>目录结构视图\nAndroid studio project 相当于 eclipse workspace   \nAndroid studio module 相当于 eclipse project \n\n\n∨MyApplication  --&gt; 项目根节点\n    |＞ .gradle --&gt;Gradle的临时文件\n    |＞ .idea --&gt; \n    |∨* app --&gt; 主要的模块,如果配置正常时字体为粗体 \n    |    |＞ build  --&gt; 模块的临时文件与最终的apk文件\n    |    |    |＞outputs ＞apk ＞目录下生成apk文件\n    |    |＞* libs --&gt; 存放jar包, 不能存so文件\n    |    |∨* src --&gt; 源代码目录\n    |        |＞ androidTest --&gt; 测试源代码\n    |        |∨ main --&gt; 源代码\n    |        |    |＞ aidl --&gt; 是aidl文件源代码目录,AIDL:即Android接口定义语言。\n    |        |    |＞ assets --&gt; 资源目录\n    |        |    |＞ java --&gt; 源代码\n    |        |    |＞ jni --&gt; 存放C语言文件\n    |        |    |＞* jniLibs --&gt; 存放so文件\n    |        |    |＞ res --&gt; 资源文件\n    |        |    |AndroidManifest.xml \n    |        |.gitignore\n    |        |app.iml\n    |        |* build.gradle --&gt; Gradle构建脚本,对当前模块设置的Gradle文件\n    |        |proguard-rules.pro --&gt; 代码混淆配置文件\n    |＞ build --&gt; 编译过程中的一些临时文件\n    |＞ gradle --&gt; 默认生成的一个本地的Gradle引导语,如果机器没有Gradle环境,会通过下载\n    |＞ library --&gt; 如果项目中有多个模块,官方建议创建一个目录library目录下存放其它模块\n    |    ＞ myLibrary --&gt; 其它第三方模块 .\n    |.gitignore\n    |*build.gradle --&gt; Gradle构建脚本,全局Gradle\n    |build.gradle.bk\n    |gradle.properties --&gt; Gradle属性文件\n    |gradlew\n    |gradlew.bat --&gt; gradle批处理文件\n    |local.properties --&gt; Android ADT bundle SDK目录配置文件\n    |MyApplication.iml\n    |*settings.gradle --&gt; 项目模块配置文件\n</code></pre><hr>\n<h1 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a><a id=\"Gradle\"></a>Gradle</h1><p>Gradle是一种动态脚本语言, 基于Groovy  <a href=\"http://www.groovy-lang.org/\" target=\"_blank\" rel=\"external\">http://www.groovy-lang.org/</a><br>能够很方便的通过Maven/lvy管理依赖<br>使用非常灵活,一种效果可以有多种实现   </p>\n<p><a href=\"http://gradle.org/\" target=\"_blank\" rel=\"external\">http://gradle.org/</a>   </p>\n<hr>\n<h1 id=\"settings-gradle\"><a href=\"#settings-gradle\" class=\"headerlink\" title=\"settings.gradle\"></a><a id=\"settings.gradle\"></a>settings.gradle</h1><p>案例: </p>\n<pre class=\"brush: shell;\">\n    include ':app', ':library:mylibrary'  \n</pre>\n\n<pre><code>&quot;:&quot;是一个路径的分割线\n\n注意: 当 Open Module Settings  --&gt; Project Structure \n    --&gt; Dependencies 有配置过库 :mylibrary 直接修改settings.gradle成:library:mylibrary会编译异常\n\nError:(25, 0) Project with path &apos;:mylibrary&apos; could not be found in project &apos;:app&apos;.\n\n这时,需要在Open Module Settings  -- &gt; Project Structure --&gt; app \n    --&gt; Dependencies --&gt; + module Dependencies 中的:mylibrary删除 即可,并重新增加:library:mylibrary\n</code></pre><hr>\n<h1 id=\"项目根节点下的build-gradle\"><a href=\"#项目根节点下的build-gradle\" class=\"headerlink\" title=\"项目根节点下的build.gradle\"></a><a id=\"项目根节点下的build.gradle\"></a>项目根节点下的build.gradle</h1><p>案例: </p>\n<pre class=\"brush: java;\">\n\n    // Top-level build file where you can add configuration options common to all sub-projects/modules.\n    buildscript { //\n        repositories {\n        jcenter() //依赖库\n        }\n        dependencies { \n        classpath 'com.android.tools.build:gradle:1.2.2'//当前工程需要依赖的插件\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n        }\n    }\n\n    allprojects { //所有工程 \n        repositories {\n        jcenter()//依赖库 --> 默认使用的是https加密库,当使用代理时,有可能不支持https ,则有可能出错\n        }\n    }\n</pre>\n\n<hr>\n<h1 id=\"模块根节点下的build-gradle\"><a href=\"#模块根节点下的build-gradle\" class=\"headerlink\" title=\"模块根节点下的build.gradle\"></a><a id=\"模块根节点下的build.gradle\"></a>模块根节点下的build.gradle</h1><p>案例: </p>\n<pre class=\"brush: java;\">    \n    //声明是一个Application 最终会生成一个apk\n    //如果是一个库 'com.android.library' 这样就不会输出apk,\n    //只会输出 jar 包或者 aar (aar是包含文件与资源的一个包,Eclipse不支持)\n    apply plugin: 'com.android.application'  \n\n    android { //安卓编译环境设置\n        compileSdkVersion 22 //需要与自己的已下载的Build版本对应\n        buildToolsVersion \"22.0.1\" \n        //注意,如果是网络下载下来的项目,需要查看自己的AS是否有相同Build的版本,没有则修改,否则报错\n\n        sourceSets{ //配置不同版本原代码不同.与productFlavors对应\n            phone{\n                manifest.srcFile 'src/phone/AndroidManifest.xml'\n                assets.srcDirs = ['src/phone/assets']\n                //java.srcDirs = ['src']\n                //resources.srcDirs = ['src']\n                //aidl.srcDirs = ['src']\n                //renderscript.srcDirs = ['src']\n                //res.srcDirs = ['src']\n            }\n\n            pad{\n                manifest.srcFile 'src/pad/AndroidManifest.xml'\n                assets.srcDirs = ['src/pad/assets']\n            }\n\n        }\n\n        signingConfigs{ //签名配置\n            releasekey{ //名称自定义\n                storeFile file('MyKey.keystore') //文件名\n                storePassword 'android' // key密码\n                keyAlias 'androiddebugkey' //别名\n                keyPassword 'android' //密钥\n            }\n\n            debugkey{\n                storeFile file('debug.keystore')\n                storePassword 'android'\n                keyAlias 'androiddebugkey'\n                keyPassword 'android'\n            }\n        }\n\n        defaultConfig { //生成的apk的更多信息配置 ,会覆盖AndroidManifest.xml的信息\n            applicationId \"com.tu.myapplication\" //包名 会覆盖AndroidManifest.xml的包名\n            minSdkVersion 8\n            targetSdkVersion 22\n            versionCode 1\n            versionName \"1.0\"\n\n            signingConfig signingConfigs.releasekey //签名配置  指定签名\n        }\n\n        productFlavors { //产品配置\n            //与buildTypes的每一项结合生成包,会在build/outputs/apk/生\n            //成 (productFlavors项*buildTypes的项*2)个apk\n            phone {\n                applicationId 'com.tu.myapplication' //不同包名\n                signingConfig signingConfigs.debugkey //不同签名\n            }\n            pad {\n                applicationId 'com.tu.myapplication.hd'\n                signingConfig signingConfigs.debugkey\n            }\n        }\n\n        buildTypes { //编译类型, 主要用于你这个包编译出来是做什么用的.\n            //通常系统默认有两种,一种是release 二种是debug 生成4个apk包  , \n            //如果 productFlavors 有配置项如2个,buildTypes默认的2个则会生成2*2*2=8个apk包\n\n            release { //为默认项配置混淆文件\n                minifyEnabled false\n                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n            }\n\n            //        //会生成两个包 app-fordebug.apk , app-fordebug-unaligned.apk\n            //        fordebug {\n            //            applicationIdSuffix '.debug'\n            //        //包名会加.debug后缀即: com.tu.myapplication.debug\n            //        }\n            //\n            //        //会生成两个包 app-fordailybuild.apk , app-fordailybuild-unaligned.apk\n            //        fordailybuild{\n            //            applicationIdSuffix '.db'//包名会加.db后缀\n            //        }\n            //\n            //        //会生成两个包 app-formonkeytest.apk , app-formonkeytest-unaligned.apk\n            //        formonkeytest{\n            //            applicationIdSuffix '.monkey'\n            //        }\n        }\n    }\n\n    dependencies {    //依赖关系\n        //单独引入jar包 --> Open Module Settings  -- > Project Structure -->\n        //app --> Dependencies --> + File Dependencies -->选择jar包\n        //compile files('libs/gson-2.2.4.jar') //使用单独引入jar包的方式\n\n        //动态引入包\n        //表示引入libs目录下的所有jar包 , 并且是动态的.\n        compile fileTree(include: ['*.jar'], dir: 'libs') \n\n        //引入Libaray v7包 Open Module Settings  -- > Project Structure --> \n        //app --> Dependencies --> + Library Dependencies\n        compile 'com.android.support:appcompat-v7:22.1.1' //这种方式表示引入单个包.\n\n        //引入 本地包 Open Module Settings  -- > Project Structure --> app --> \n        //Dependencies --> + module Dependencies\n        compile project(':library:mylibrary') //这种方式表示引入一个本地库(本地模块)\n\n        //引入远程库 Open Module Settings  -- > Project Structure --> app --> \n        //Dependencies --> + Library Dependencies 搜索框内直接搜索\n        //搜索 httpmime 后选择库即可. Gradle会后台下载jar包. 但如果你没有代理\n        compile 'org.apache.httpcomponents:httpmime:4.5' \n\n        //红杏有提供给开发都一个免费代理,主机名为: hx.gy 端口为:1080\n        //File--> settings --> Appearance & Behavior --> \n        //System Settings --> HTTP Proxy --> 勾选manual proxy configuration \n        //--> HTTP --> Host name:输入 hx.gy --> Port number:输入 1080 -->ok\n    }\n</pre>\n\n<hr>\n<h1 id=\"Gradle命令行\"><a href=\"#Gradle命令行\" class=\"headerlink\" title=\"Gradle命令行\"></a><a id=\"Gradle命令行\"></a>Gradle命令行</h1><pre><code>&gt; gradle命令行运行需要下载一个gradle 并把gradle目录下的bin目录配置到环境变量中. 然后使用cmd\n\n&gt; Android Studio目录下一般也会有个gradle / gradle-x.x/ 也可以配置这个bin目录 然后使用cmd\n\n&gt; 也可以定位到项目目录下有 gradlew.bat 文件是 gradle批处理文件 定位后cmd中运行 gradlew命令\n\n&gt; Android studio中有Terminal 窗口 也可以直接使用命令,而不用进入到cmd \n\n常用命令: \ngradle tasks 罗列可执行的任务   \ngradle build 编译全部脚本   \ngradle clean 清除项目\ngradle 加tasks列出的名称,指定编译内容 如: gradle assembleDebug   \n</code></pre><hr>\n<h1 id=\"加速Android-Studio-Gradle构建\"><a href=\"#加速Android-Studio-Gradle构建\" class=\"headerlink\" title=\"加速Android Studio/Gradle构建\"></a><a id=\"加速Android-Studio/Gradle构建\"></a>加速Android Studio/Gradle构建</h1><pre><code>优化对电脑配置要求比较高.\n\n1&gt; 开启gradle单独的守护进程\n    在下面的目录下面创建gradle.properties文件：\n    /home/&lt;username&gt;/.gradle/ (Linux)\n    /Users/&lt;username&gt;/.gradle/ (Mac)\n    C:\\Users\\&lt;username&gt;\\.gradle (Windows)\n    并在文件中增加:\n</code></pre><pre class=\"brush: java;\">\norg.gradle.daemon=true\n</pre>\n\n<pre><code>2&gt; 同时修改项目下的 gradle.properties 文件也可以优化(也可以在步骤1&gt;里面直接加入,变成全局,针对所有项目生效)：\n</code></pre><pre class=\"brush: java;\">\norg.gradle.daemon=true\n\norg.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\n\norg.gradle.parallel=true\n\norg.gradle.configureondemand=true\n</pre>    \n\n<pre><code>3&gt; 对Android Studio构建优化\n\n&gt; File --&gt; settings \n        |--&gt; Build,Execution,Deployment \n            |--&gt; Build Tools \n                |--&gt; Gradle --&gt; 项中勾选 Offline work  (离线工作模式)\n                |        |--&gt; Gradle VM options :  -Xmx2048m -XX:MaxPermSize=512m\n                |--&gt; Compiler \n                    |--&gt; 勾选 Compile independent modules in parallel (may require larger heap size)\n                    |--&gt; VM Options:输入 -Xmx2048m -XX:MaxPermSize=512m\n                    |--&gt; Command-line Options:输入 --offline\n\n4&gt; 命令行构建\n\n    在构建命令后面加 --daemon --parallel --offline \n    例如\n    gradle build --daemon --parallel --offline\n    1) Total time: 34.133 secs 第一次构建\n    3) Total time: 12.748 secs 未修改任何内容第三次构建\n    5) Total time: 12.639 secs\n    7) Total time: 12.201 secs\n\n    gradle build\n    2) Total time: 21.371 secs 未修改任何内容第二次构建\n    4) Total time: 18.891 secs\n    6) Total time: 18.823 secs\n    8) Total time: 18.79 secs\n\n5&gt; 引入依赖库时使用aar\n    如果库项目工程为 apply plugin: &apos;com.android.library&apos; 的,则会在目录\n    库/build/outputs/arr/xxxx.aar 生成文件\n</code></pre><hr>\n<h1 id=\"Eclipse-中使用-Gradle\"><a href=\"#Eclipse-中使用-Gradle\" class=\"headerlink\" title=\"Eclipse 中使用 Gradle\"></a><a id=\"Eclipse-中使用-Gradle\"></a>Eclipse 中使用 Gradle</h1><p>在Eclipse项目根目录下创建build.gradle文件</p>\n<pre class=\"brush: java;\">    \n    apply plugin: 'com.android.application'\n    //让Eclipse的项目使用gradle进行编译, cmd 定位到项目根目录,\n    //使用gradle build进行编译 . \n    //生成到build目录中, \n    android{\n        compildSdkVersion 21\n        buildToolsVersion \"21.1.2\"\n\n        sourceSets{\n            main{\n                manifest.srcFile 'AndroidManifest.xml'\n                java.srcDirs = ['src']\n                resources.srcDirs = ['src']\n                aidl.srcDirs = ['src']\n                renderscript.srcDirs = ['src']\n                res.srcDirs = ['src']\n                assets.srcDirs = ['src']\n            }\n        }\n    }\n\n    dependencies{\n        //...一些引入包\n    }\n</pre>\n\n<hr>\n<h1 id=\"一些常见错误\"><a href=\"#一些常见错误\" class=\"headerlink\" title=\"一些常见错误\"></a><a id=\"一些常见错误\"></a>一些常见错误</h1><p>出现gradle无法下载等时可以尝试修改一些代码如: </p>\n<pre><code>修改MyApplication/gradle/wrapper/gradle-wrpper.properties文件\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-2.2.1-all.zip\n修改https为http: distributionUrl=http\\://services.gradle.org/distributions/gradle-2.2.1-all.zip\n</code></pre><p>代理下载错误</p>\n<pre class=\"brush: java;\">    \n    appcenter\n    buildscript{\n        repositories{\n            maven{url \"http://repo1.maven.org/maven2\"}\n            jcenter{\n                url \"http://jcenter.bintray.com\"\n            }\n        }\n        dependencies {classpath 'com.android.tools.build:gradle:1.1.0+'}\n    }\n</pre>\n\n<p>安卓ADT的目录错误 修改local.properties </p>\n<hr>\n<p>更多内容后续补上.</p>\n<p><a href=\"/res/file/blog/2015/01/01/Java_Android_Studio_IDE/MyApplication.rar\">本文案例Demo</a></p>\n","excerpt":"<p>Android studio 使用笔记.<br>其中内容包括AS基本设置,创建项目,引用第三方类库,导入Eclipse项目,<br>Gradle,加速AS运行速度,Eclipse中使用Gradle,以及一些AS的常见错误.   </p>","more":"<p>目录</p>\n<ul>\n<li><a href=\"#基本设置\">基本设置</a></li>\n<li><a href=\"#创建工程\">创建工程</a></li>\n<li><a href=\"#引用第三方类库(模块\">引用第三方类库(模块)</a>)</li>\n<li><a href=\"#导入Eclipse项目\">导入Eclipse项目</a> </li>\n<li><a href=\"# &lt;android-Studio目录结构(Project视图\">Android-Studio目录结构(Project视图)</a>)</li>\n<li><a href=\"#Gradle\">Gradle</a></li>\n<li><a href=\"#settings.gradle\">settings.gradle</a></li>\n<li><a href=\"#项目根节点下的build.gradle\">项目根节点下的build.gradle</a></li>\n<li><a href=\"#模块根节点下的build.gradle\">模块根节点下的build.gradle</a></li>\n<li><a href=\"#Gradle命令行\">Gradle命令行</a></li>\n<li><a href=\"#加速Android-Studio/Gradle构建\">加速Android-Studio/Gradle构建</a></li>\n<li><a href=\"#Eclipse-中使用-Gradle\">Eclipse-中使用-Gradle</a></li>\n<li><a href=\"#一些常见错误\">一些常见错误</a></li>\n</ul>\n<p>Android Studio下载   </p>\n<p><a href=\"http://www.androiddevtools.cn/\">http://www.androiddevtools.cn/</a></p>\n<p>安装完AS后第一次运行会自动下载一些组建,建议进行翻墙. </p>\n<hr>\n<h1 id=\"基本设置\"><a href=\"#基本设置\" class=\"headerlink\" title=\"基本设置\"></a><a id=\"基本设置\"></a>基本设置</h1><pre><code>一些常用设置项罗列\n\n  File --&gt; Settings  \n        |--&gt;Appearance &amp; Behavior \n        |    |---&gt; Appearance \n        |    |    |---&gt; UI Options \n        |    |    |    |----&gt; Threme: 有三种IDE主题供选择.\n        |    |    |    |----&gt; * Override default fonts by (not recomended)一整个软件的字体\n        |    |    |    |----&gt; Cyclic scrolling in list 内勾选后内容滚动支持滚动尾部跳顶部,顶部跳尾部.\n        |    |    |---&gt; Window Options \n        |    |    |    |----&gt; Allow merging buttons on dialogs (勾选合并相类似的按钮到一个按钮中.) \n        |    |---&gt; Menus and Toolbars --&gt; 自定义增减菜单内容.\n        |    |---&gt; System Settings \n        |    |    |    |----&gt; Startup/Shutdown\n        |    |    |    |        |-----&gt; Reopen last project on startup (勾选打开IED时是否直接进入到上一次关闭时的项目工程)\n        |    |    |    |        |-----&gt; Confirm application exit (退出提示两次)\n        |    |    |    |----&gt; project opening 项目工程的打开方式.\n        |    |    |    |        |-----&gt; 打开新的窗口,在相同的窗口打开,经过确定打开窗口\n        |    |    |    |----&gt; Synchronization \n        |    |    |            |-----&gt; Synchronize files on frame activation (勾选,自动同步文件到项目中,\n        |    |    |            |    例如,当IDE切换到后台,项目过程中有某个文件被其它方式修改了,切换到IDE时自动更新.)\n        |    |    |            |-----&gt; Save files on frame deactivation (勾选,IDE切换到后台时自动保存文件)\n        |    |    |            |-----&gt; Save files automatically if application is ide for 15 sec \n        |    |    |            |    当ide在15秒内无操作时,自动保存文件.\n        |    |    |            |-----&gt; Use &quot;safe write&quot; (save changes to a temporary file first) 保存时保存临时文件.\n        |    |    |---&gt; Passwords --&gt; Password storage policy\n        |    |    |            |-----&gt; Do not remember passwords 每次都需要输入密码\n        |    |    |            |-----&gt; Remember passwords until the application is closed \n        |    |    |            |    打开过一IDE输入过一次密码后,直到关闭IDE都无需再输入密码.\n        |    |    |            |-----&gt; Save on disk with master password protection 保存磁盘,无需要再输入 .\n        |    |    |---&gt; * Http Proxy 代理 (红杏有免费提供AS的代理) 主机名为: hx.gy 端口为:1080 \n        |    |    |---&gt; Updates 软件更新,有自动更新,可选择版本类型,等.\n        |    |---&gt; File Colors 文件颜色\n        |    |---&gt; Scopes 定义范围\n        |    |    |---&gt; 点击 + 新创建 --&gt; 输入名称如App --&gt; 窗口中间的结构中选择不需要的范围可以进行,Exclude 排除\n        |    |        |--&gt; 使用时.在编程界面ctrl+shift+F弹出搜索框\n        |    |        |    |--&gt; Scope --&gt; 选择Custom: App . 搜索的内容就是经过自定义筛选的.\n        |    |        |--&gt; Analyze --&gt; Inspect Code --&gt; 也可以选择Custom scope  ,在指定范围内做代码检查. \n        |    |---&gt; Notifications 通知栏气泡. 定义提示不提示通知项.\n        |    |---&gt; Quick Lists 宏 \n        |---&gt; Keymap 快捷键设置 --&gt; Keymaps: 中有很多种选择.,下面的栏目则可以修改快捷键的按键.\n        |    |---&gt; 常用的快捷键:\n        |    |---&gt; * 快速输入多行内容 ctrl+shift+alt+鼠标点击多行 , 出现多个光标,然后输入内容. \n        |    |---&gt; * 删除整行 Ctrl+Y\n        |    |---&gt; * 复制当前行 Ctrl+D\n        |    |---&gt; * 剪切当前行 Ctrl+X\n        |    |---&gt; * 交换位置 Ctrl+Shift+箭头 如果是方法体内,上下交换代码,方法则交换方法位置\n        |    |---&gt; * 呼出大纲 Ctrl+F12 \n        |    |---&gt; * 查找引用 Alt+F7 查找出来的结果会分为读与写\n        |    |---&gt; * 重命名 Shift+F6 会重名名引用的名称\n        |    |---&gt; * 格式化代码 Ctrl+Alt+L \n        |    |---&gt; 移动鼠标,单词间跳跃 Ctrl +箭头 \n        |    |---&gt; 快速定义常量 Ctrl+Alt+C 如: int i = 100; 选中100后使用快捷键\n        |    |---&gt; 其它更多\n        |---&gt; Editor 编辑器设置 \n        |    |--&gt; General --&gt; 子内容\n        |    |    |    |--&gt; mouse \n        |    |    |    |    |--&gt; Honor&quot;CamelHumps&quot;words settings when selecting on 双击选择的是一个变量,还是变量中的一个单词 . \n        |    |    |    |    |    支持此功能需要在General/Smark Keys中Rus&quot;camelHumps&quot;words打勾,默认没勾选\n        |    |    |    |    |--&gt; Change font size (Zoom) with Ctrl+Mouse Wheel 通过Ctrl加鼠标滚轮放大缩小字体\n        |    |    |    |    |--&gt; Enable Drag&apos;n&apos;Drop functionality in editor 拖拽模式,鼠标选中的内容用鼠标点中后拖拽到其它地方. \n        |    |    |    |--&gt; Soft Wraps\n        |    |    |    |    |--&gt; Use soft wraps in Editor 软回车\n        |    |    |    |--&gt; Other \n        |    |    |    |    |--&gt; Strip trailing spaces on Save: ... 保存时删除行尾的空格\n        |    |    |    |    |--&gt; Show quick doc on mouse move Delay(ms)500 勾选后通过鼠标悬浮到内容上显示文档(默认关闭)\n        |    |    |    |--&gt; * Highlight on Caret Movement 高亮显示\n        |    |    |    |    |--&gt; * Highlight matched brace 高亮显示括号\n        |    |    |    |    |--&gt; * Highlight current scope 选中的范围是否高亮显示\n        |    |    |    |    |--&gt; * Highlight usages of element at caret 选中的元素是否高亮显示\n        |    |    |    |--&gt; Formatting  格式化代码时是否显示通知\n        |    |    |    |--&gt; Refactorings 重构相关\n        |    |    |    |    |--&gt; Enable in-Place mode 启动重构模式 Ctrl+Alt+C\n        |    |    |    |--&gt; Limits\n        |    |    |    |    |--&gt; Maximum number of contents to keep in clipboard: 5 粘贴板的数量. 可以同时拷贝的数据. \n        |    |    |    |    |    使用方法: 多次拷贝内容后,需要粘贴指定次内容时,Ctrl+Shift+V 在呼出的对话框中选择粘贴内容\n        |    |    |    |    |--&gt; Recent files limit 50 最近打开的文件限制个数\n        |    |    |    |    |--&gt;　console commands history size: 300 命令行面板上下键切换使用过的命令\n        |    |    |    |--&gt; Rich-text copy 拷贝内容样式 默认激活,用处是拷贝一些代码到Word文档的时候保持原有的字体颜色样式.\n        |    |    |--&gt; Smart Keys \n        |    |    |    |----&gt; Home 键 定位 尝试点多几次Home键\n        |    |    |    |----&gt; End 键 定位\n        |    |    |    |----&gt; Insert pair bracket 自动补全括号\n        |    |    |    |----&gt; Insert pair quote 自动补全引号\n        |    |    |    |----&gt; Reformat block on typing&quot;}&quot; 当我们输入括号}结尾时,格式化代码\n        |    |    |    |----&gt; Use &quot;camelHumps&quot; words 见上面mouse\n        |    |    |    |----&gt; Surround selection on typing quote or brace \n        |    |    |    |    勾选后, 选择代码后,输入一个{括号可以把所选择的代码加入到{里面} ,也可以使用&quot;号 把内容&quot;引起来&quot;\n        |    |    |    |----&gt; Enter 回车键功能\n        |    |    |    |----&gt; Smart indent  缩进\n        |    |    |    |----&gt; Insert pair &quot;}&quot; 补全大括号\n        |    |    |    |----&gt; Insert documentation comment stub 自动生成注释文档\n        |    |    |    |----&gt; 后面对于Xml/Html/Css等的配置\n        |    |    |--&gt; Appearance 编辑器外观的一些设置\n        |    |    |    |----&gt; Use anti-aliased font 是否启用抗锯齿字体\n        |    |    |    |----&gt; Caret blinking(ms) 500 光标闪烁速度\n        |    |    |    |----&gt; * Show line numbers 显示代码行数(默认未勾选) \n        |    |    |--&gt; Editor Tabs 编辑器Tab的\n        |    |    |    |----&gt; Tab Appearance 外观\n        |    |    |    |    |-----&gt; Placement: 标签Tab显示位置\n        |    |    |    |    |-----&gt; Show Tabs in single row 显示单行 Hide tabs if there is no space 没有空间,隐藏标签\n        |    |    |    |    |-----&gt; Hide file extension in editor tabs 隐藏文件后缀\n        |    |    |    |    |-----&gt; Show directory in editor tabs for non-unique filenames 文件名相同显示文件路径\n        |    |    |    |    |-----&gt; mark modified tabs with asterisk 用星号标记修改标签(未保存显示*,可结合不自动保存)\n        |    |    |    |----&gt; Tab Closing Policy 标签关闭策略\n        |    |    |    |    |-----&gt; Tab limit 10 标签最大上限 ,后面的选项为优先关闭选项\n        |    |    |--&gt; Code Folding 代码的折叠 设置\n        |    |    |--&gt; Code Completion \n        |    |    |    |----&gt; code Completion\n        |    |    |    |    |-----&gt; Case sensitive completion : All / None / First letter 代码提示对大小写的要求\n        |    |    |    |    |    三种选项, 意思是编辑器在输入代码时代码提示的内容要求.其中None最为宽松 , \n        |    |    |    |    |-----&gt; Auto-insert when only one choice on : \n        |    |    |    |    |    |--&gt; Basic Completion(Ctrl+Space), 重新唤醒代码提示框  \n        |    |    |    |    |-----&gt; 自动弹出时间等设置\n        |    |    |--&gt; Auto Import 自动导入设置\n        |    |    |--&gt; Postfix Completion 代码完成的快捷方式\n        |    |    |    |----&gt; Expend templates with : Tab / Space / Enter\n        |    |    |--&gt; Console Folding 控制台代码折叠 设置\n        |    |--&gt; *Colors &amp; Fonts 编辑器主题颜色字体设置 Scheme    \n        |    |    |--&gt; Font 设置编辑器字体大小\n        |    |    |--&gt; Android Logcat 设置Logcat的颜色,默认比较单调.可在些处进行修改\n        |    |--&gt; Code Style 代码风格 一般由整个项目组决定\n        |    |--&gt; Inspections 代码检查配置\n        |    |    |--&gt; 例如: Android Lint / addJavasriptInterface Called 很常见的开启WebView的JavaScript的一个报警 \n        |    |    |    勾选则如果编写此代码警告 Severity: 可自定义选择错误级别.以及检查范围 \n        |    |--&gt; * File and Code Templates 文件代码模板\n        |    |    |---&gt; Templates / Includes / Code / Other 四种 \n        |    |--&gt; * File Encodings 文件编码方式 通常设置成UTF-8\n        |    |    |--&gt; IDE Encoding : UTF-8  \n        |    |    |--&gt; Project Encoding : UTF-8（默认GBK）\n        |    |    |--&gt; Default encoding for properties files: UTF-8 (默认&lt;System Default&gt; (now GBK))\n        |    |--&gt; * Live Templates 动态模板 快速创建模板 如geti 快速编写出getInstance()方法\n        |    |--&gt; File Types 打开文件类型\n        |---&gt; Plugins 插件 可在线下载或使用本地插件\n        |    |--&gt; 介绍几个插件 : JsonFormat 插件 快速把Json字符串生成一个对象类 ; 使用步骤:\n        |    |    1. 拷贝需要生成对象的Json字符串,\n        |    |    2.在已创建的一个类中点击右键&gt;Generate&gt;JsonFormat&gt;粘贴到弹出框中&gt;ok&gt;自动创建代码.\n        |---&gt; Version control 版本控制配置\n        |---&gt; Build,Execution,Deployment 构建、执行部署 Gradle配置 等\n        |---&gt; Languages&amp;Frameworks 语言与框架\n        |---&gt; Tools 工具\n        |    |--&gt; 外部工具的配置等\nEdit \n    |--&gt; Copy Reference 拷贝包含包名类名的字符串 \n    |    例如: 一个Activity类,全选类名,使用些种拷贝方式,粘贴到AndroidManifest.xml时,内容为包名.类名\n    |--&gt; Copy from History 粘贴历史拷贝\n    |--&gt; * Column Selection Mode 列选择模式 可进行多行部分选择.批量处理. \n    |--&gt; Toggle Case 转换大小写\nNavigate\n    |--&gt; 导航 , 跳转 也可以使用Ctrl+鼠标点击对应方法,或属性\nCode \n    |--&gt; Override Methods 实现父类方法\n    |--&gt; Generate...  生成方法. 如 hashCode equals 等方法,并会自动实现方法\n    |--&gt; Surround With.. 生成代码 , 如if,try catch 语句等\n\n编辑器右击选项中:\n    |--&gt; refactor --&gt; Encapsulap Fields  生成get set方法\n    |--&gt; Lacal History 自带版本控制,可查看历史修改记录等\n</code></pre><p>其它快捷键:<br>Alt+Enter 万能键 / 如导入包, 错误解决方案提示等.<br>Ctrl+Q 查看代码中的图片<br>双击Shift 会弹出搜索框   </p>\n<p>泛型 @StringRes @ColorRes 要求参数类似<br>例: private void showToast(@StringRes int stringId){…}   </p>\n<p>代码扫描查找代码潜在错误</p>\n<pre><code>Analyze  --&gt; Inspect Code --&gt; 选择扫描对象 --&gt; ok \n</code></pre><hr>\n<h1 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a><a id=\"创建工程\"></a>创建工程</h1><p>File–&gt;New–&gt;New Project–&gt;输入项目名,包名,项目存放地址等信息–&gt;<br>选择开发的设备,并选择支持最小SDK版本–&gt;点击”Help me choose”可查看版本目前支持的版本占用情况<br>–&gt;Next–&gt;选择模板–&gt;Next–&gt;输入Activity与Layout的名称–&gt;Finish–&gt;一个新的项目工程就创建完毕.      </p>\n<hr>\n<h1 id=\"引用第三方类库-模块\"><a href=\"#引用第三方类库-模块\" class=\"headerlink\" title=\"引用第三方类库(模块)\"></a><a id=\"引用第三方类库(模块)\"></a>引用第三方类库(模块)</h1><pre><code>创建一个类库\n    File-&gt;New--&gt;New Module--&gt;其中可以选择多种类型,    \n    如果Android Library新创建一个,Import Existing Project导入Eclipse或者Gradle项目 等--&gt;    \n    假设新创建一个类库--&gt;与创建项目一个,输入项目包等--&gt;选择模板--&gt;Finish\n\n引入类库(远程,jar,本地库)\n    选择需要引用类库的项目--&gt;右击--&gt;Open Module Settings 或者使用快捷键(F4)\n    --&gt;Project Structure窗口--&gt;选择需要引入类库的项目--&gt;右边点击 Dependencies   \n    --&gt;点击右边的+号--&gt;三种选择 Lrbrary(远程) , File(jar) , module(本地) ,\n    --&gt; 选择最后一种 module dependencies 引入本地库   \n    --&gt;选择上面新创建的类库--&gt;OK--&gt;这样就关联了一个第三方模块,类库了.   \n</code></pre><hr>\n<h1 id=\"导入Eclipse项目\"><a href=\"#导入Eclipse项目\" class=\"headerlink\" title=\"导入Eclipse项目\"></a><a id=\"导入Eclipse项目\"></a>导入Eclipse项目</h1><pre><code>File--&gt;New--&gt;Import Project--&gt;选择Eclipse项目工程--&gt;提示导入的项目存放地址(建议不要与原项目使用相同的目录\n,因为会重新拷贝一份代码并修改成Android Studio的环境)--&gt;弹出一提示,说之前引用的jar包以及一些引用的类库,\n都会被替换成dependencies ,如果能找到源.--&gt;Finish--&gt;引入完成会弹出一个导入报告--&gt;报告里面有说明一些没有导入进来的文件名称\n--&gt;因为这些文件不是工程项目的文件.项目外的文件.--&gt;如果有重要的文件需要自己手动拷贝到项目中.\n</code></pre><hr>\n<h1 id=\"Android-Studio目录结构-Project视图\"><a href=\"#Android-Studio目录结构-Project视图\" class=\"headerlink\" title=\"Android Studio目录结构(Project视图)\"></a><a id=\"Android-Studio目录结构(Project视图)\"></a>Android Studio目录结构(Project视图)</h1><pre><code>目录结构视图\nAndroid studio project 相当于 eclipse workspace   \nAndroid studio module 相当于 eclipse project \n\n\n∨MyApplication  --&gt; 项目根节点\n    |＞ .gradle --&gt;Gradle的临时文件\n    |＞ .idea --&gt; \n    |∨* app --&gt; 主要的模块,如果配置正常时字体为粗体 \n    |    |＞ build  --&gt; 模块的临时文件与最终的apk文件\n    |    |    |＞outputs ＞apk ＞目录下生成apk文件\n    |    |＞* libs --&gt; 存放jar包, 不能存so文件\n    |    |∨* src --&gt; 源代码目录\n    |        |＞ androidTest --&gt; 测试源代码\n    |        |∨ main --&gt; 源代码\n    |        |    |＞ aidl --&gt; 是aidl文件源代码目录,AIDL:即Android接口定义语言。\n    |        |    |＞ assets --&gt; 资源目录\n    |        |    |＞ java --&gt; 源代码\n    |        |    |＞ jni --&gt; 存放C语言文件\n    |        |    |＞* jniLibs --&gt; 存放so文件\n    |        |    |＞ res --&gt; 资源文件\n    |        |    |AndroidManifest.xml \n    |        |.gitignore\n    |        |app.iml\n    |        |* build.gradle --&gt; Gradle构建脚本,对当前模块设置的Gradle文件\n    |        |proguard-rules.pro --&gt; 代码混淆配置文件\n    |＞ build --&gt; 编译过程中的一些临时文件\n    |＞ gradle --&gt; 默认生成的一个本地的Gradle引导语,如果机器没有Gradle环境,会通过下载\n    |＞ library --&gt; 如果项目中有多个模块,官方建议创建一个目录library目录下存放其它模块\n    |    ＞ myLibrary --&gt; 其它第三方模块 .\n    |.gitignore\n    |*build.gradle --&gt; Gradle构建脚本,全局Gradle\n    |build.gradle.bk\n    |gradle.properties --&gt; Gradle属性文件\n    |gradlew\n    |gradlew.bat --&gt; gradle批处理文件\n    |local.properties --&gt; Android ADT bundle SDK目录配置文件\n    |MyApplication.iml\n    |*settings.gradle --&gt; 项目模块配置文件\n</code></pre><hr>\n<h1 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a><a id=\"Gradle\"></a>Gradle</h1><p>Gradle是一种动态脚本语言, 基于Groovy  <a href=\"http://www.groovy-lang.org/\">http://www.groovy-lang.org/</a><br>能够很方便的通过Maven/lvy管理依赖<br>使用非常灵活,一种效果可以有多种实现   </p>\n<p><a href=\"http://gradle.org/\">http://gradle.org/</a>   </p>\n<hr>\n<h1 id=\"settings-gradle\"><a href=\"#settings-gradle\" class=\"headerlink\" title=\"settings.gradle\"></a><a id=\"settings.gradle\"></a>settings.gradle</h1><p>案例: </p>\n<pre class=\"brush: shell;\">\n    include ':app', ':library:mylibrary'  \n</pre>\n\n<pre><code>&quot;:&quot;是一个路径的分割线\n\n注意: 当 Open Module Settings  --&gt; Project Structure \n    --&gt; Dependencies 有配置过库 :mylibrary 直接修改settings.gradle成:library:mylibrary会编译异常\n\nError:(25, 0) Project with path &apos;:mylibrary&apos; could not be found in project &apos;:app&apos;.\n\n这时,需要在Open Module Settings  -- &gt; Project Structure --&gt; app \n    --&gt; Dependencies --&gt; + module Dependencies 中的:mylibrary删除 即可,并重新增加:library:mylibrary\n</code></pre><hr>\n<h1 id=\"项目根节点下的build-gradle\"><a href=\"#项目根节点下的build-gradle\" class=\"headerlink\" title=\"项目根节点下的build.gradle\"></a><a id=\"项目根节点下的build.gradle\"></a>项目根节点下的build.gradle</h1><p>案例: </p>\n<pre class=\"brush: java;\">\n\n    // Top-level build file where you can add configuration options common to all sub-projects/modules.\n    buildscript { //\n        repositories {\n        jcenter() //依赖库\n        }\n        dependencies { \n        classpath 'com.android.tools.build:gradle:1.2.2'//当前工程需要依赖的插件\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n        }\n    }\n\n    allprojects { //所有工程 \n        repositories {\n        jcenter()//依赖库 --> 默认使用的是https加密库,当使用代理时,有可能不支持https ,则有可能出错\n        }\n    }\n</pre>\n\n<hr>\n<h1 id=\"模块根节点下的build-gradle\"><a href=\"#模块根节点下的build-gradle\" class=\"headerlink\" title=\"模块根节点下的build.gradle\"></a><a id=\"模块根节点下的build.gradle\"></a>模块根节点下的build.gradle</h1><p>案例: </p>\n<pre class=\"brush: java;\">    \n    //声明是一个Application 最终会生成一个apk\n    //如果是一个库 'com.android.library' 这样就不会输出apk,\n    //只会输出 jar 包或者 aar (aar是包含文件与资源的一个包,Eclipse不支持)\n    apply plugin: 'com.android.application'  \n\n    android { //安卓编译环境设置\n        compileSdkVersion 22 //需要与自己的已下载的Build版本对应\n        buildToolsVersion \"22.0.1\" \n        //注意,如果是网络下载下来的项目,需要查看自己的AS是否有相同Build的版本,没有则修改,否则报错\n\n        sourceSets{ //配置不同版本原代码不同.与productFlavors对应\n            phone{\n                manifest.srcFile 'src/phone/AndroidManifest.xml'\n                assets.srcDirs = ['src/phone/assets']\n                //java.srcDirs = ['src']\n                //resources.srcDirs = ['src']\n                //aidl.srcDirs = ['src']\n                //renderscript.srcDirs = ['src']\n                //res.srcDirs = ['src']\n            }\n\n            pad{\n                manifest.srcFile 'src/pad/AndroidManifest.xml'\n                assets.srcDirs = ['src/pad/assets']\n            }\n\n        }\n\n        signingConfigs{ //签名配置\n            releasekey{ //名称自定义\n                storeFile file('MyKey.keystore') //文件名\n                storePassword 'android' // key密码\n                keyAlias 'androiddebugkey' //别名\n                keyPassword 'android' //密钥\n            }\n\n            debugkey{\n                storeFile file('debug.keystore')\n                storePassword 'android'\n                keyAlias 'androiddebugkey'\n                keyPassword 'android'\n            }\n        }\n\n        defaultConfig { //生成的apk的更多信息配置 ,会覆盖AndroidManifest.xml的信息\n            applicationId \"com.tu.myapplication\" //包名 会覆盖AndroidManifest.xml的包名\n            minSdkVersion 8\n            targetSdkVersion 22\n            versionCode 1\n            versionName \"1.0\"\n\n            signingConfig signingConfigs.releasekey //签名配置  指定签名\n        }\n\n        productFlavors { //产品配置\n            //与buildTypes的每一项结合生成包,会在build/outputs/apk/生\n            //成 (productFlavors项*buildTypes的项*2)个apk\n            phone {\n                applicationId 'com.tu.myapplication' //不同包名\n                signingConfig signingConfigs.debugkey //不同签名\n            }\n            pad {\n                applicationId 'com.tu.myapplication.hd'\n                signingConfig signingConfigs.debugkey\n            }\n        }\n\n        buildTypes { //编译类型, 主要用于你这个包编译出来是做什么用的.\n            //通常系统默认有两种,一种是release 二种是debug 生成4个apk包  , \n            //如果 productFlavors 有配置项如2个,buildTypes默认的2个则会生成2*2*2=8个apk包\n\n            release { //为默认项配置混淆文件\n                minifyEnabled false\n                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n            }\n\n            //        //会生成两个包 app-fordebug.apk , app-fordebug-unaligned.apk\n            //        fordebug {\n            //            applicationIdSuffix '.debug'\n            //        //包名会加.debug后缀即: com.tu.myapplication.debug\n            //        }\n            //\n            //        //会生成两个包 app-fordailybuild.apk , app-fordailybuild-unaligned.apk\n            //        fordailybuild{\n            //            applicationIdSuffix '.db'//包名会加.db后缀\n            //        }\n            //\n            //        //会生成两个包 app-formonkeytest.apk , app-formonkeytest-unaligned.apk\n            //        formonkeytest{\n            //            applicationIdSuffix '.monkey'\n            //        }\n        }\n    }\n\n    dependencies {    //依赖关系\n        //单独引入jar包 --> Open Module Settings  -- > Project Structure -->\n        //app --> Dependencies --> + File Dependencies -->选择jar包\n        //compile files('libs/gson-2.2.4.jar') //使用单独引入jar包的方式\n\n        //动态引入包\n        //表示引入libs目录下的所有jar包 , 并且是动态的.\n        compile fileTree(include: ['*.jar'], dir: 'libs') \n\n        //引入Libaray v7包 Open Module Settings  -- > Project Structure --> \n        //app --> Dependencies --> + Library Dependencies\n        compile 'com.android.support:appcompat-v7:22.1.1' //这种方式表示引入单个包.\n\n        //引入 本地包 Open Module Settings  -- > Project Structure --> app --> \n        //Dependencies --> + module Dependencies\n        compile project(':library:mylibrary') //这种方式表示引入一个本地库(本地模块)\n\n        //引入远程库 Open Module Settings  -- > Project Structure --> app --> \n        //Dependencies --> + Library Dependencies 搜索框内直接搜索\n        //搜索 httpmime 后选择库即可. Gradle会后台下载jar包. 但如果你没有代理\n        compile 'org.apache.httpcomponents:httpmime:4.5' \n\n        //红杏有提供给开发都一个免费代理,主机名为: hx.gy 端口为:1080\n        //File--> settings --> Appearance & Behavior --> \n        //System Settings --> HTTP Proxy --> 勾选manual proxy configuration \n        //--> HTTP --> Host name:输入 hx.gy --> Port number:输入 1080 -->ok\n    }\n</pre>\n\n<hr>\n<h1 id=\"Gradle命令行\"><a href=\"#Gradle命令行\" class=\"headerlink\" title=\"Gradle命令行\"></a><a id=\"Gradle命令行\"></a>Gradle命令行</h1><pre><code>&gt; gradle命令行运行需要下载一个gradle 并把gradle目录下的bin目录配置到环境变量中. 然后使用cmd\n\n&gt; Android Studio目录下一般也会有个gradle / gradle-x.x/ 也可以配置这个bin目录 然后使用cmd\n\n&gt; 也可以定位到项目目录下有 gradlew.bat 文件是 gradle批处理文件 定位后cmd中运行 gradlew命令\n\n&gt; Android studio中有Terminal 窗口 也可以直接使用命令,而不用进入到cmd \n\n常用命令: \ngradle tasks 罗列可执行的任务   \ngradle build 编译全部脚本   \ngradle clean 清除项目\ngradle 加tasks列出的名称,指定编译内容 如: gradle assembleDebug   \n</code></pre><hr>\n<h1 id=\"加速Android-Studio-Gradle构建\"><a href=\"#加速Android-Studio-Gradle构建\" class=\"headerlink\" title=\"加速Android Studio/Gradle构建\"></a><a id=\"加速Android-Studio/Gradle构建\"></a>加速Android Studio/Gradle构建</h1><pre><code>优化对电脑配置要求比较高.\n\n1&gt; 开启gradle单独的守护进程\n    在下面的目录下面创建gradle.properties文件：\n    /home/&lt;username&gt;/.gradle/ (Linux)\n    /Users/&lt;username&gt;/.gradle/ (Mac)\n    C:\\Users\\&lt;username&gt;\\.gradle (Windows)\n    并在文件中增加:\n</code></pre><pre class=\"brush: java;\">\norg.gradle.daemon=true\n</pre>\n\n<pre><code>2&gt; 同时修改项目下的 gradle.properties 文件也可以优化(也可以在步骤1&gt;里面直接加入,变成全局,针对所有项目生效)：\n</code></pre><pre class=\"brush: java;\">\norg.gradle.daemon=true\n\norg.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\n\norg.gradle.parallel=true\n\norg.gradle.configureondemand=true\n</pre>    \n\n<pre><code>3&gt; 对Android Studio构建优化\n\n&gt; File --&gt; settings \n        |--&gt; Build,Execution,Deployment \n            |--&gt; Build Tools \n                |--&gt; Gradle --&gt; 项中勾选 Offline work  (离线工作模式)\n                |        |--&gt; Gradle VM options :  -Xmx2048m -XX:MaxPermSize=512m\n                |--&gt; Compiler \n                    |--&gt; 勾选 Compile independent modules in parallel (may require larger heap size)\n                    |--&gt; VM Options:输入 -Xmx2048m -XX:MaxPermSize=512m\n                    |--&gt; Command-line Options:输入 --offline\n\n4&gt; 命令行构建\n\n    在构建命令后面加 --daemon --parallel --offline \n    例如\n    gradle build --daemon --parallel --offline\n    1) Total time: 34.133 secs 第一次构建\n    3) Total time: 12.748 secs 未修改任何内容第三次构建\n    5) Total time: 12.639 secs\n    7) Total time: 12.201 secs\n\n    gradle build\n    2) Total time: 21.371 secs 未修改任何内容第二次构建\n    4) Total time: 18.891 secs\n    6) Total time: 18.823 secs\n    8) Total time: 18.79 secs\n\n5&gt; 引入依赖库时使用aar\n    如果库项目工程为 apply plugin: &apos;com.android.library&apos; 的,则会在目录\n    库/build/outputs/arr/xxxx.aar 生成文件\n</code></pre><hr>\n<h1 id=\"Eclipse-中使用-Gradle\"><a href=\"#Eclipse-中使用-Gradle\" class=\"headerlink\" title=\"Eclipse 中使用 Gradle\"></a><a id=\"Eclipse-中使用-Gradle\"></a>Eclipse 中使用 Gradle</h1><p>在Eclipse项目根目录下创建build.gradle文件</p>\n<pre class=\"brush: java;\">    \n    apply plugin: 'com.android.application'\n    //让Eclipse的项目使用gradle进行编译, cmd 定位到项目根目录,\n    //使用gradle build进行编译 . \n    //生成到build目录中, \n    android{\n        compildSdkVersion 21\n        buildToolsVersion \"21.1.2\"\n\n        sourceSets{\n            main{\n                manifest.srcFile 'AndroidManifest.xml'\n                java.srcDirs = ['src']\n                resources.srcDirs = ['src']\n                aidl.srcDirs = ['src']\n                renderscript.srcDirs = ['src']\n                res.srcDirs = ['src']\n                assets.srcDirs = ['src']\n            }\n        }\n    }\n\n    dependencies{\n        //...一些引入包\n    }\n</pre>\n\n<hr>\n<h1 id=\"一些常见错误\"><a href=\"#一些常见错误\" class=\"headerlink\" title=\"一些常见错误\"></a><a id=\"一些常见错误\"></a>一些常见错误</h1><p>出现gradle无法下载等时可以尝试修改一些代码如: </p>\n<pre><code>修改MyApplication/gradle/wrapper/gradle-wrpper.properties文件\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-2.2.1-all.zip\n修改https为http: distributionUrl=http\\://services.gradle.org/distributions/gradle-2.2.1-all.zip\n</code></pre><p>代理下载错误</p>\n<pre class=\"brush: java;\">    \n    appcenter\n    buildscript{\n        repositories{\n            maven{url \"http://repo1.maven.org/maven2\"}\n            jcenter{\n                url \"http://jcenter.bintray.com\"\n            }\n        }\n        dependencies {classpath 'com.android.tools.build:gradle:1.1.0+'}\n    }\n</pre>\n\n<p>安卓ADT的目录错误 修改local.properties </p>\n<hr>\n<p>更多内容后续补上.</p>\n<p><a href=\"/res/file/blog/2015/01/01/Java_Android_Studio_IDE/MyApplication.rar\">本文案例Demo</a></p>"},{"layout":"post","title":"PHP学习笔记-CI框架","date":"2015-09-09T16:00:00.000Z","_content":"\n本人因公司需求.学习PHP的CI框架.本博文为学习笔记.   \nCodeIgniter 是一套给 PHP 网站开发者使用的应用程序开发框架和工具包。   \n它提供一套丰富的标准库以及简单的接口和逻辑结构，其目的是使开发人员更快速地进行项目开发。   \n使用 CodeIgniter 可以减少代码的编写量，并将你的精力投入到项目的创造性开发上。\n\n其中内容包括,CI_Controller对象 , 数据库访问 , AR模型(QB模型) , CI类库扩展 ,     \nUrl相关函数 , 设置路由 , 隐藏入口文件, 分页 , 文件上传 , Session , 验证码 , 语言包 , CI框架内部解析等内容.\n\n<!-- more -->\n\n\n目录\n\n* [CodeIgniter框架简介](#CodeIgniter框架简介)\n* [MVC](#MVC)\n\t* [控制器-controllers](#控制器-controllers)\n\t* [视图-views](#视图-views) \n\t* [模型-model](#模型-model)\n* [CI的超级对象-(CI的控制器对象CI_Controller)](#CI的超级对象-(CI的控制器对象CI_Controller))\n* [数据库访问](#数据库访问)\n* [AR模型操作数据库增删改查 active_record (CI3.0之后改名 query_builder QB模型)](#AR模型操作数据库)\n* [CI类库扩展](#CI类库扩展)\n\t* [为网站设计不同的主题.前台,后台(扩展控制器CI_Controller,装载器Loader)](#扩展控制器CI_Controller-装载器Loader)\n\t* [扩展CI的captcha_helper.php实现_验证码](#扩展CI的captcha_helper.php实现_验证码)\n\t* [扩展_修改分页生成的代码](#扩展_修改分页生成的代码)\n* [url相关函数](#url相关函数)\n* [设置路由](#设置路由)\n* [隐藏入口文件-index.php](#隐藏入口文件-index.php)\n* [分页](#分页)\n* [文件上传](#文件上传)\n* [图片处理类](#图片处理类)\n* [Session](#Session)\n* [验证码](#验证码)\n* [表单验证](#表单验证)\n* [语言包](#语言包)\n* [购物车类库](#购物车类库)\n* [CI框架内部解析](#CI框架内部解析)\n\n\n------------------------------------------\n  \n\n注:测试版本为CodeIgniter3.0.0框架 与CI2.x的有些不同.   \n但都有标注不同点以及处理方法.笔记理论上基本适用于3.0.0(当前最新)之前的版本.  \n\n中文教程地址:    \n[http://codeigniter.org.cn/user_guide/index.html](http://codeigniter.org.cn/user_guide/index.html)\n\n# <a id=\"CodeIgniter框架简介\"></a>CodeIgniter框架简介 ( CI框架 ) \n\n\tCodeIgniter是一个轻量级但功能强大的PHP框架是基于MVC设计模式.\n\n\t框架开发和二次开发\n\t\t打个比方:买房子\n\t\t买二手房,直接拎包入住 , 好比二次开发,如:dedecms,PHPCMS(内容管理系统),ECShop(开源免费的网上商店系统)\n\t\t买毛坯房,不能住人,自己去买各种装修材料,请人装修,才能入住.好比框架开发.只提供\n\t\t基础功能和项目结构.\n\n\t\tCI是框架,用于框架开发.\n\n\t目录结构说明:\n\t    license.txt许可协议\n\t    user_guide 用户手册(一般删除)\n\t    index.php 入口文件\n\t    system 框架核心代码,通常不动的.\n\t    application 应用目录\n\t\t|-- cache        缓存目录\n\t\t|-- config       配置文件目录\n\t\t|-- controllers  控制器文件夹\n\t\t|-- core         核心库扩展目录\n\t\t|-- errors       错误页面\n\t\t|-- helpers      自定义辅助函数文件夹\n\t\t|-- hooks        勾子文件夹\n\t\t|-- language     语言包\n\t\t|-- libraries    自定义库文件夹,通常是一些类文件\n\t\t|-- logs         日志\n\t\t|-- models       模型文件夹\n\t\t|-- third_party  第三方库目录,如smarty\n\t\t|-- views        视图文件夹\n\n# <a id=\"MVC\"></a>MVC \n\n\t1. 入口文件 \n\t\t唯一一个让浏览器直接请求的脚本文件\n\n\t2. 控制器 controller\n\t\t协调模型和视图\n\n\t3. 模型 model \n\t\t提供数据,保存数据,数据有效性认证\n\n\t4. 视图 view\n\t\t只负责显示,以及表单...\n\n\t5. 动作 action \n\t\t是控制器中方法,用户被浏览器直接请求\n\n\t访问url使用的是pathinfo //http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/welcome/test  test是welcome的一个方法\n\t\n\t入口文件.php/控制器/动作\n\n\tapplication 应用目录\n\t\tcontrollers 控制器\n\t\tmodels 模型\n\t\tviews 视图\n\n\t默认控制器是welcome\n\t默认动作是index \n\n## <a id=\"控制器-controllers\"></a>控制器-controllers\n\n\t1.不需要加后缀 , 直接是类名.php (自己编写的控制器需要UserController.php)\n\t2.文件名全部小写 \n\t3.所有的控制器,直接或者间接继承自 CI_Controller 类\n\t4.尽量不要使用Index名作为控制器类名,因为与方法index与类名相同的,会被PHP当作构造方法void __construct(){}\n\t5.控制器中, 动作(函数,方法)要求:\n\t\tpublic \n\t\t不能以_开头\n\t\t\n\t\t//不能被浏览器范围\n\t\tprotected function test() {\n\t\t\techo 'test';\n\t\t}\n\t\t\n\t\t//以下划线开头的方法,不能被浏览器请求\n\t\tpublic function _test1() {\n\t\t\techo 'test1';\n\t\t}\n\t\t\n\t\tpublic function test2(){\n\t\t\t$this->_test1();\n\t\t}\n\n## <a id=\"视图-views\"></a>视图-views \n\n\t\n\t1.在控制器中如果加载视图\n\t\t//直接写试图名字,不写扩展名,如果有子目录,则写上目录名\n\t\t$this->load->view ( 'user/index' ); //表示user目录下的index.php文件\n\t\t可以多次调用$this->load->view (视图); \n\n\t2.试图中,直接使用原生PHP代码\n\t3.推荐使用\n\t\t<?php foreach ($list as $item):?>\n\t\t<?=$item[\"email\"]?>\n\t\t<?php endforeach;?>\n\n\t\t<?php if(empty($carts)):?>\n\t\t<?php else:?>\n\t\t<?php endif;?>\n\n## <a id=\"模型-model\"></a>模型-model\n\t\n\t模型文件名全部使用小写,建议使用_model为后缀,防止与控制器类名冲突,但里面的类名首字母大写\n\t在模型中,可以直接使用超级对象中的属性\n\t\n\t\\application\\models\\user_model.php 模型\n\t\t<?php\n\t\t\tclass User_model extends CI_Model{//继承自 CI_Model\n\t\t\t\t//返回所有用户\n\t\t\t\tpublic function getAll(){\n\t\t\t\t\t$res = $this->db->get('user');//在模型中,可以直接使用超级对象中的属性\n\t\t\t\t\treturn $res;\n\t\t\t\t}\n\t\t\t}\n\t\\application\\controllers\\my_model_demo.php 控制器\n\t\t<?php\n\t\t\tclass My_model_demo extends CI_Controller {\n\t\t\t\t// http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/my_model_demo\n\t\t\t\tpublic function index() {\n\t\t\t\t\t// 加载模型,加载后将自动成为超级对象的属性\n\t\t\t\t\t// $this->load->model ( 'User_model' );\n\t\t\t\t\t$this->load->model ( 'User_model', 'user' ); // 起个别名\n\t\t\t\t\t\t\t\t\t\t     \n\t\t\t\t\t// 调用模型获取数据\n\t\t\t\t\t// $list = $this->User_model->getAll();\n\t\t\t\t\t$list = $this->user->getAll (); // 使用别名\n\n\t\t\t\t\t// 加载视图\n\t\t\t\t\t$this->load->view ( 'user/my_model_view_demo', array ('list' => $list ) );\n\t\t\t\t}\n\t\t\t}\n\t\\application\\views\\user\\my_model_view_demo.php 视图\n\t\t<!DOCTYPE html>\n\t\t<html>\n\t\t<head>\n\t\t\t<title>View</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<?php \n\t\t\t//CI它使用了一个 extract 函数,将数组变量导入到当前的符号表,所以直接使用键名作为变量来访问\n\t\t\t\tvar_dump( $list); \n\t\t\t?>\n\t\t</body>\n\t\t</html>\n\t\n\t建议使用这种这种MVC架构来编写代码,可维护性高一些.\n\n# <a id=\"CI的超级对象-(CI的控制器对象CI_Controller)\"></a>CI的超级对象-(CI的控制器对象CI_Controller)\n\t当前的控制器对象\n\t属性\n\t$this->load //  --> system/core/CI_Loader类装载器,类的加载,如视图,控制器等\n\t\t装载器类的实例system/core/CI_Loader.php\n\t\t装载器CI_Loader提供方法:\n\t\t\tview()\t装载视图\n\t\t\tvars()  分配变量到视图\n\t\t\tdatabase()  装载数据库操作对象\n\t\t\tmodel()  装载模型\n\t\t\thelper() 一些辅助函数\n\n\t$this->uri // 获取url参数等功能\n\t\t是CI_URI类的实例 --> system/core/CI_URI.php \n\t\tCI_URI类提供方法:\n\t\t\tsegment(n) 用于获取url中的第几个参数(值）\n\t\t\t传统的: 入口文件.php/控制器/动作/参数1/值1/参数2/值2\n\t\t\tCI的  : 入口文件.php/控制器/动作/值1/值2\n\t\t\t\n\t\t\techo $this->segment(3);//值1\n\t\t\techo $this->segment(4);//值2\n\n\t\t\t方式一: \n\t\t\t// 使用CI的pathinfo\n\t\t\t// http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/user/testURI/4\n\t\t\techo $this->uri->segment(3); // 获取URI第几段的参数 可取得4 , 从user开始计算1,2,3\n\t\t\t\n\t\t\t方式一: \n\t\t\t直接写在方法里面\n\t\t\thttp://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/user/testURI2/1/jack\n\t\t\tpublic function index($id = 0,$name=''){ //可以直接获取到id=1 ; name= jack ,如果id没有输入默认为0,默认name为空\n\t\t\t\techo $id;//1\n\t\t\t\techo $name; // jack\n\t\t\t}\n\n\t$this->input 获取用户输入信息 如,get put cookie等\n\t\t是CI_Input类的实例 --> system/core/CI_Input.php\n\t\tCI_Input类提供方法:\n\t\t\t$this->input->post('username');         //$_POST['username']\n\t\t\t$this->input->post('username',true);    //跨站脚本（XSS）过滤\n\t\t\t$this->input->server('DOCUMENT_ROOT');\t//$_SERVER['DOCUMENT_ROOT']\n\t\t\t$this->input->cookie();\n\t\t\t$this->input->server()\n\t\t\t...\n\n\t在视图(view)中,直接使用$this来访问超级对象中的属性\n\n\tCI支持控制器在子目录中.\n\t\t如果你在建立一个大型的应用程序，你会发现 CodeIgniter 可以很方便的将控制器放到一些子文件夹中。\n\n\t\t只要在 application/controllers 目录下创建文件夹并放入你的控制器就可以了。\n\n\t\t注意：  如果你要使用某个子文件夹下的功能，就要保证 URI 的第一个片段是用于描述这个文件夹的。例如说你有一个控制器在这里：\n\n\t\tapplication/controllers/products/shoes.php\n\n\t\t调用这个控制器的时候你的 URI 要这么写：\n\n\t\texample.com/index.php/products/shoes/show/123\n\t\t \n\t\t你的每个子文件夹中需要包含一个默认的控制器，这样如果 URI 中只有子文件夹而没有具体功能的时候它将被调用。\n\t\t只要将你作为默认的控制器名称在 application/config/routes.php 文件中指定就可以了。\n\n\t\tCodeIgniter 也允许你使用 URI 路由 功能来重新定向 URI。\n\n\n# <a id=\"数据库访问\"></a>数据库访问\n\n\t配置数据库文件\n\t\t可在 \\system\\database\\drivers\\目录下查看可被支持的数据库驱动\n\t\tapplication/config/database.php 数据库配置文件\n\t\t$db['default']= array(\t//'default'表示默认数据库,当一个项目需要连接多个数据库的时候,可以增加多一个$db['新数据库别名']= array(....\n\t\t\t'hostname' => 'localhost',\n\t\t\t'username' => 'root',\n\t\t\t'password' => 'root',\n\t\t\t'database' => 'test',\t//database数据库名\n\t\t\t'dbdriver' => 'mysql', //数据库驱动\n\t\t\t'dbprefix' => 'blog_', //表前缀 \n\t\t\t'swap_pre' => 'swap_', //表前缀 假设代码里面的都是使用swap_的前缀,而表是使用blog_前缀,则会自动替换成dbprefix的前缀,而无需修改源代码\n\t\t);\n\t\t\n\t\t表前缀\n\t\t\t'dbprefix' => 'blog_', \n\t\t\t'swap_pre' => 'blog_', \n\t\t\t配置为一样,代码中,直接硬编码表前缀就行了,如果以后项目数据库表前缀发生变化,\n\t\t\t只需要修改'dbprefix' => 'new_',  代码中的blog_会自动替换为new_\n\n\t\t/////数据库附件/////\n\n\t将数据库访问对象,装载到超级对象的属性中 $this->db\n\t\t方式一(PHP代码手动加载): \n\t\t\t// 装载一个数据库操作类\n\t\t\t$this->load->database();//表示连接默认数据库\n\t\t\t//一个项目多个数据库时,表示连接其它数据库,配置文件\\application\\config\\database.php中配置相对应别名\n\t\t\t//$this->load->database('新数据库别名');\n\t\t方式二(配置文件,自动加载):\n\t\t\t//因为每次使用数据库的时候都需要装载数据库操作类,所以在配置文件\\application\\config\\autoload.php中配\n\t\t\t//置Auto-load Libraries 自动加载项,以后就可以不再需要手动加载,但对于多个数据库的还是需要指定数据库.\n\t\t\t//$autoload['libraries'] = array('database');//自动加载配置\n\t\t\t//$this->load->database();//以后编写都不需要这行代码.\n\t\t\n\t\t使用: \n\t\t\t//装载成功后,会放入超级对象的属性中, 默认属性名是db\n\t\t\t// var_dump($this->db);//$this->db 返回的是 CI_DB_mysql_driver 对象 继承自 CI_DB\n\t\t\t\n\t\tCI_DB_mysql_driver 对象 --> \\system\\database\\drivers\\mysql\\mysql_driver.php  \n\n\t$this->db->query()方法 增删改查\n\t\t查询数据 返回的是一个对象\n\t\t\t$sql = 'select * from blog_user';\n\t\t\t// 返回的是CI_DB_mysql_result 对象 - mysql_query()\n\t\t\t$res = $this->db->query ( $sql ); //返回的是 CI_DB_mysql_result 对象 继承自 CI_DB_result\n\t\t\t$res->result();//返回数组,数组中是一个一个的对象\n\t\t\t$res->result_array();//返回二维数组,里面是关联数组\n\t\t\t$res->row();//返回第一条数据,直接是一个对象\n\t\t\t\n\t\t\t//帮助文档中--> 数据库类-->查询-->query \n\t\t\t//帮助文档中--> 数据库类-->生成查询结果集--> result_array() 等等的一些方法. 调用方法就如上所示\n\t\t\t//以上可取得如下php原生函数类似的结果\n\t\t\t//mysql_fetch_assoc()//关联数组 //http://www.w3school.com.cn/php/func_mysql_fetch_assoc.asp\n\t\t\t//mysql_fetch_object()//返回对象 //http://www.w3school.com.cn/php/func_mysql_fetch_object.asp\n\n\t\t\tCI_DB_mysql_result 对象 --> \\system\\database\\drivers\\mysql\\mysql_result.php\n\t\t\t\n\t\t增删改数据 返回一个 boolean 布尔值\n\t\n\t\t\t// 插入数据\n\t\t\t// $name=$this->input->post('name');//假如获取用户post过来的数据.\n\t\t\t// $name = 'lili';\n\t\t\t// $pass = 'lili';\n\t\t\t\n\t\t\t// $data [0] = $name;\n\t\t\t// $data [1] = $pass;\n\t\t\t////参数绑定:\n\t\t\t// $sql = \"insert into blog_user (name,password) values (?,me5(?))\";\n\t\t\t// $bool = $this->db->query ( $sql, $data );//多个问号?参数时,需要传入一个索引数组\n\t\t\t\n\t\t\t// 删除数据\n\t\t\t// $sql = \"delete from blog_user where id=?\";\n\t\t\t// $bool = $this->db->query ( $sql, 2 );\n\t\t\t\n\t\t\t// 修改数据\n\t\t\t$data [0] = 'mary@gmail.com';\n\t\t\t$data [1] = 3;\n\t\t\t$sql = \"update blog_user set email = ? where id=? \";\n\t\t\t$bool = $this->db->query ( $sql, $data );\n\t\t\t\n\t\t\tif ($bool) {\n\t\t\t\t// mysql_affected_rows\n\t\t\t\techo '受影响行数:' . $this->db->affected_rows ();\n\t\t\t\techo '自增ID:' . $this->db->insert_id ();\n\t\t\t}\n\t\t使用CI的db增加改查都是使用$this->db->query()来进行处理.\n\n# <a id=\"AR模型操作数据库\"></a>AR模型操作数据库 active_record (CI3.0之后改名 query_builder QB模型)\n\t\n\t配置\n\t\t\\application\\config\\database.php 配置开启AR/QB模型(默认TRUE)\n\t\t\t$active_record = TRUE; 配置为TRUE表示开启这项功能. (AR模型_2.2.0)\n\t\t\t$query_builder = TRUE; 配置为TRUE表示开启这项功能. (QB模型_3.0.0)\n\n\t\t\t\\system\\database\\DB_active_rec.php (为AR模型原代码_2.2.0)\n\t\t\t\\system\\database\\DB_query_builder.php (为QB模型的原代码_2.2.0)\n\n\t\t\\application\\config\\autoload.php 配置自动加载\n\t\t\t$autoload['libraries'] = array('database');\n\t\n\t使用增删改查\n\t\t在配置文件中,配置表前缀后,会自动添加前缀.\n\t\t\n\t\t插入:\n\t\t\t$bool = $this->db->insert('表名',关联数组);\n\n\t\t\t//TODO 通过AR/QB模型增加数据内容 insert 增加\n\t\t\t$data  = array(\n\t\t\t\t'name'=>'lili',\n\t\t\t\t'password'=>md5('lili')\t\t\t\n\t\t\t);\n\t\t\tconst TBL = 'user';//表名,常量\n\t\t\t$bool = $this->db->insert(self::TBL,$data);\n\t\t\tvar_dump($bool);\n\t\t\techo '<hr>';\n\n\t\t更新:\n\t\t\t$bool = $this->db->update('表名',关联数组,条件);\n\n\t\t\t//TODO 通过AR/QB模型更新数据 update 更新\n\t\t\t$data = array(\n\t\t\t\t\t'email'=>'lili@gmail.com',\n\t\t\t\t\t'password'=>md5('123456'),\n\t\t\t);\n\t\t\t$bool =$this->db->update('user',$data,array('id'=>4));\n\t\t\tvar_dump($bool);\n\n\t\t删除:\n\t\t\t$bool = $this->db->delete('表名',条件);\n\t\t\t\n\t\t\t//TODO 通过AR/QB模型删除数据 delete 删除\n\t\t\t$bool = $this->db->delete('user',array('id'=>4));\n\t\t\tvar_dump($bool);\n\t\t\n\t\t查询:\n\t\t\t$res = $this->db->get('表名',['条件']);//返回结果集对象. '表名'会自动增加为'blog_表名'\n\t\t\t$res->result();//结合返回获取数据\n\n\t\t\t//TODO 通过AR/QB模型获取数据表内容-查询\n\t\t\t$res = $this->db->get ( 'user' );//AR模型可以自动处理表前缀.并直接获取bolg_user表的数据\n\t\t\t\n\t\t\tvar_dump($res);\n\t\t\techo '<hr>';\n\t\t\tforeach ($res->result() as $item){\n\t\t\t\techo $item->name;\n\t\t\t\techo '  ';\n\t\t\t\techo $item->password;\n\t\t\t\techo '  ';\n\t\t\t\techo $item->email;\n\t\t\t\techo '<br>';\n\t\t\t}\n\n\t\t连贯查询\n\t\t\t//TODO 连贯查询\n\t\t\t//SELECT `id`, `name` FROM `blog_user` WHERE `id` >= 3 ORDER BY `id` desc LIMIT 2, 3\n\t\t\t$res = $this->db->select('id,name')//\n\t\t\t->from('user')//表名\n\t\t\t->where('id >=' , 3)//'id >=' 符号前面需要一个空格,如果符号不写默认'='等于\n\t\t\t->limit(3,2)//跳过2条,取后3条数据\n\t\t\t->order_by('id desc')//通过id倒序\n\t\t\t->get();//获取数据\n\t\t\t\n\t\t\tvar_dump($res->result());\n\t\t\techo '<br>';\n\t\t\techo $this->db->last_query();//显示最后一条执行的SQL语句\n\t\t\t//SELECT `id`, `name` FROM `blog_user` WHERE `id` >= 3 ORDER BY `id` desc LIMIT 2, 3\n\t\t\n\t\t\t更多where查询条件 \n\t\t\t\t//SELECT * FROM `blog_user` WHERE `name` = 'mary'\n\t\t\t\t$res = $this->db->where('name','mary')->get ('user');\n\t\t\t\t//SELECT * FROM `blog_user` WHERE `name` != 'mary'\n\t\t\t\t$res = $this->db->where('name !=','mary')->get ('user');\n\t\t\t\t//SELECT * FROM `blog_user` WHERE `name` = 'mary'\n\t\t\t\t$res = $this->db->where(array('name'=>'mary'))->get ('user');\n\t\t\t\t//SELECT * FROM `blog_user` WHERE `name` = 'mary' AND `id` > 3\n\t\t\t\t$res = $this->db->where(array('name'=>'mary','id >'=>3))->get ('user');\n\t\t\t\techo $this->db->last_query();\n\n\t\t\t\t复杂的查询,则建议用$this->db->query($sql,$data);//使用问题?绑定参数的方式查询\n\n# <a id=\"CI类库扩展\"></a>CI类库扩展\n\t\n\t在system目录下的是CI框架的核心文件.如果需要进行扩展,只需要在对应的application目录下对应着system目录下的文件编写对应的类,即可扩展.\n\t例如: application 目录下有core helpers language libraries 目录均于system目录下的文件夹相一一对应.\n\n\t子类名前缀\n\t\t\\application\\config\\config.php 子类名前缀\n\t\t$config['subclass_prefix'] = 'MY_';\n\t\t\n\t例如:扩展控制器\n\t\t在application/core/MY_Controller.php 创建自定义的类继承自application/core/Controller.php  (CI_Controller 类名与文件名不同)\n\n\t\t<?php\n\t\t\tclass MY_Controller extends CI_Controller{\n\t\t\t\t//构造方法\n\t\t\t\tpublic function __construct(){\n\t\t\t\t\tparent::__construct();//调用父类的构造方法\n\t\t\t\t\techo 'aaaaaaaaaaaaa';\n\t\t\t\t\t//登录验证\n\t\t\t\t\t//权限验证...等等\n\t\t\t\t}\n\t\t\t}\n\t\t然后在application/controllers/目录下的控制器中使用继承自My_Controller的类即可使用,自定义的控制器.\n\t其它类库均类似的扩展.\n\t\n<a id=\"扩展控制器CI_Controller-装载器Loader\"></a>案例:为网站设计不同的主题.前台,后台(扩展控制器CI_Controller,装载器Loader)\n\t\t\n\t\t第一步，指定不同的视图View路径 . 在网站根目录下创建 themes 文件夹和 里面再创建default目录\n\t\t第二步，定义一个常量，在config/costants.php,如下\n\t\t\t在application/config/constants.php 常量配置文件中配置常量.\n\t\t\t#自定义系统相当常量 (主题目录)\n\t\t\tdefine('THEMES_DIR','themes/'); //指明视图路径地址.\n\t\t\t\n\t\t第三步，扩展CI类\n\t\t\t视图的加载由loader类完成，(\\system\\core\\Loader.php)如下\n\t\t\t\n\t\t\t\tCI 2.2.0\n\t\t\t\t\tpublic function __construct()\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->_ci_ob_level  = ob_get_level();\n\t\t\t\t\t\t$this->_ci_library_paths = array(APPPATH, BASEPATH);\n\t\t\t\t\t\t$this->_ci_helper_paths = array(APPPATH, BASEPATH);\n\t\t\t\t\t\t$this->_ci_model_paths = array(APPPATH);\n\t\t\t\t\t\t$this->_ci_view_paths = array(APPPATH.'views/'\t=> TRUE);\n\t\t\t\t\t}\n\t\t\t\tCI 3.0.0\n\t\t\t\t\tprotected $_ci_view_paths = array(VIEWPATH => TRUE);\n\t\t\t\n\t\t\t扩展 Loader 类 (\\application\\core\\MY_Loader.php)\n\t\t\t\t<?PHP\n\t\t\t\t\tdefined('BASEPATH') OR exit('No direct script access allowed');\n\n\t\t\t\t\tclass MY_Loader extends CI_Loader{\n\t\t\t\t\t\t//被开启的主题目录\n\t\t\t\t\t\tprotected $_theme = 'default/';\n\n\t\t\t\t\t\tpublic function switch_themes_on(){\n\t\t\t\t\t\t\t$this->_ci_view_paths = array(FCPATH,THEMES_DIR,$this->_theme => TRUE);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpublic function switch_themes_off(){\n\t\t\t\t\t\t\t#just do nothing\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t扩展控制器\n\t\t\t\t<?PHP\n\t\t\t\t\tdefined('BASEPATH') OR exit('No direct script access allowed');\n\n\t\t\t\t\t//前台控制器\n\t\t\t\t\tclass HomeController extends CI_Controller{\n\t\t\t\t\t\tpublic function __construct(){\n\t\t\t\t\t\t\tparent::__construct();\n\t\t\t\t\t\t\t#开启皮肤功能\n\t\t\t\t\t\t\t$this->load->switch_themes_on();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//后台控制器\n\t\t\t\t\tclass AdminController extends CI_Controller{\n\t\t\t\t\t\tpublic function __construct(){\n\t\t\t\t\t\t\tparent::__construct();\n\t\t\t\t\t\t\t#关闭皮肤功能\n\t\t\t\t\t\t\t$this->load->switch_themes_off();\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\n\t\t第四步: 编写不同的控制器\n\t\t\tapplication/controllers 下编写前台控制器 并继承 HomeController \n\t\t\tapplication/controllers/admin 编写后台控制器 并继承 AdminController\n\n\n\t\t第五步: 编写不同的视图文件.\n\t\t\t themes/default/ 目录下编写前台视图View \n\t\t\t application/views 目录下编写后台试图View\n\n\t\t而模型 model 是共用的.\t\n\n案例:[扩展CI的captcha_helper.php实现_验证码](#扩展CI的captcha_helper.php实现_验证码)\t\t\n\n\n# <a id=\"url相关函数\"></a>url相关函数\n\t\n\thttp://codeigniter.org.cn/user_guide/helpers/url_helper.html\n\n\t//加载url帮助类 //默认在辅助函数/URL辅助函数中,默认不加载.\n\t$this->load->helper('url');//使用前需要加载标准类,或者配置自动加载\n\t\t\\application\\config\\autoload.php 文件中配置\n\t\t$autoload['helper'] = array('url');\n\n\tbase_url();//返回网站根目录 application\\config\\config.php中: $config['base_url']=''; 中配置的目录\n\t//http://127.0.0.1:8000/CodeIgniter-3.0.0\n\n\tsite_url('控制器/方法') //返回 base_url/index_page/控制器/方法 ($config['index_page'] = 'index.php';)\n\t//如 http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php\n\t\n\t案例:\n\t\\application\\controllers\\url_demo_controllers.php\n\t<?php\n\t\tclass Url_demo_controllers extends CI_Controller{\n\t\t\t//http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/Url_demo_controllers\n\t\t\tpublic function index(){\n\t\t\t\t//加载url帮助类\n\t\t\t\t$this->load->helper('url');\n\t\t\t\t$this->load->view('user/url_demo');\n\t\t\t}\n\t\t\t\n\t\t\tpublic function insert(){\n\t\t\t\tvar_dump($this->input->post('name'));\n\t\t\t}\n\t\t}\n\n\t\\application\\views\\user\\url_demo.php \n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t\t<title>403 Forbidden</title>\n\t</head>\n\t<body>\n\n\t<!-- <form action=\"/CodeIgniter-3.0.0/index.php/Url_demo_controllers/insert\" method=\"post\"> -->\n\t<form action=\"<?php echo site_url('Url_demo_controllers/insert');?>\" method=\"post\">\n\t\tname<input type=\"text\" name=\"name\" /><br>\n\t\tpassword<input type=\"password\" name=\"password\" /><br>\n\t\temail<input type=\"text\" name=\"email\" /><br>\n\t\t<button type=\"submit\">submit</button>\n\t</form>\n\t\t\n\t<!-- \t<img alt=\"\" src=\"/CodeIgniter-3.0.0/uploads/logo.jpg\"/> -->\n\t\t<img alt=\"\" src=\"<?php echo base_url();?>uploads/logo.jpg\" width=\"100\"/>\n\t</body>\n\t</html>\n\n# <a id=\"设置路由\"></a>设置路由\n\t\n\t路由配置文件\n\t\tapplication/config/routes.php\n\t\n\t默认控制器 配置\n\t\t$route['default_controller'] = 'welcome';\n\t\n\t实现伪静态\n\t\t$route['news/[\\d]{6}/([\\d]+)/([^\\s]+)']='routes_demo/showTwice/$1/$2';\n\t\t//URL中的地址=对应的控制器/方法/参数 --  第一个() 对应$1 以此类推\n\t\t\n\t\t案例: \n\n\t\t<?php\n\t\t\tclass Routes_demo extends CI_Controller {\n\t\t\t\t// http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/routes_demo\n\t\t\t\tpublic function index() {\n\t\t\t\t\techo 'routes_demo index ';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// 路由配置目录 application/config/routes.php\n\t\t\t\t\n\t\t\t\t// 原地址: http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/routes_demo/show/2\n\t\t\t\t// 路由映射地址:\n\t\t\t\t// http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/news/2.html\n\t\t\t\t// 路由配置: $route['news/([\\d]+)\\.html']='routes_demo/show/$1';\n\t\t\t\t// http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/news/201515/2.html\n\t\t\t\t// 路由配置: $route['news/[\\d]{6}/([\\d]+)\\.html']='routes_demo/show/$1';\n\t\t\t\tpublic function show($id = 0) {\n\t\t\t\t\techo '这是文章' . $id;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// 原地址:\n\t\t\t\t// http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/routes_demo/showTwice/4/.jpg\n\t\t\t\t// 路由映射地址:\n\t\t\t\t// http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/news/201501/4/.jpg\n\t\t\t\t// 路由配置: $route['news/[\\d]{6}/([\\d]+)/([^\\s]+)']='routes_demo/showTwice/$1/$2';\n\t\t\t\tpublic function showTwice($id = 0, $res = '') {\n\t\t\t\t\techo '这是文章' . $id . $res;\n\t\t\t\t}\n\t\t\t}\n\n# <a id=\"隐藏入口文件-index.php\"></a>隐藏入口文件-index.php\n\t\n\t如原地址为:\n\t\thttp://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/routes_demo\n\t隐藏入口文件后只需要把地址写成即可:\n\t\thttp://127.0.0.1:8000/CodeIgniter-3.0.0/routes_demo\n\n\t1.需要开启Apache的 rewrite 功能 Apache2.2\\conf\\httpd.conf 修改如下: \n\t\t修改前:\n\t\t\t#LoadModule rewrite_module modules/mod_rewrite.so\n\t\t\t\n\t\t\t...\n\t\t\t# AllowOverride controls what directives may be placed in .htaccess files.\n\t\t\t# It can be \"All\", \"None\", or any combination of the keywords:\n\t\t\t#   Options FileInfo AuthConfig Limit\n\n\t\t\tAllowOverride None\n\t\t\t...\n\n\t\t修改成:\n\t\t\t# 搜索 mod_rewrite 与 .htaccess 关键字来进行查询修改项\n\t\t\tLoadModule rewrite_module modules/mod_rewrite.so\n\t\t\t\n\t\t\t<Directory \"E:/ComTu_Design/PHP/Apache2.2/htdocs\">\n\t\t\t\tOptions Indexes FollowSymLinks\n\t\t\t\t# AllowOverride controls what directives may be placed in .htaccess files.\n\t\t\t\t# It can be \"All\", \"None\", or any combination of the keywords:\n\t\t\t\t#   Options FileInfo AuthConfig Limit\n\n\t\t\t\tAllowOverride all\n\t\t\t\tOrder allow,deny\n\t\t\t\tAllow from all\n\t\t\t</Directory>\n\n\t\t重启Apache.\n\n\t2.在入口文件同级目录(system/application同级目录)中,放入一个.htaccess 内容如下:\n\t\t(技巧如果自己编写创建一个点.开头的文件可以使用记事本另存为的方式输入双引号\".htaccess\"保存即可)\n\t\t<IfModule mod_rewrite.c>\n\t\t\tRewriteEngine on\n\t\t\tRewriteCond %{REQUEST_FILENAME} !-d\n\t\t\tRewriteCond %{REQUEST_FILENAME} !-f\n\t\t\tRewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]\n\t\t</IfModule>\n\t\n\t3.配置索引页 \\application\\config\\config.php \n\t\t原: \n\t\t\t$config['index_page'] = 'index.php';\n\t\t修改成: \n\t\t\t$config['index_page'] = '';\n\n# <a id=\"分页\"></a>分页\n\thttp://codeigniter.org.cn/user_guide/libraries/pagination.html\n\t直接见源代码:\n\t\n\t\\application\\controllers\\paging_demo.php\n\t<?php\n\t\tclass Paging_demo extends CI_Controller {\n\t\t\tpublic function index() {\n\t\t\t}\n\t\t\t//http://127.0.0.1:8000/CodeIgniter-3.0.0/paging_demo/paging\n\t\t\tpublic function paging() {\n\t\t\t\t// 装载类文件\n\t\t\t\t$this->load->library ( 'pagination' );\n\t\t\t\t// 每页显示10条数据\n\t\t\t\t$page_size = 10;\n\t\t\t\t\n\t\t\t\t$this->load->helper('url');\n\t\t\t\t//配置页面\n\t\t\t\t$config ['base_url'] = site_url('paging_demo/paging');\n\t\t\t\t//一共有多少条数据\n\t\t\t\t$config ['total_rows'] = '200';\n\t\t\t\t//每页显示条数\n\t\t\t\t$config ['per_page'] = $page_size;\n\t\t\t\t\n\t\t\t\t//分页的数据查询偏移量在哪一段上\n\t\t\t\t$config['uri_seqment'] = 3;\n\t\t\t\t\n\t\t\t\t$config['first_link'] = '首页';\n\t\t\t\t$config['next_link'] = '下一页';\n\t\t\t\t$config['last_link'] = '最后一页';\n\t\t\t\t\n\t\t\t\t$this->pagination->initialize ( $config );\n\t\t\t\t\n\t\t\t\t//http://127.0.0.1:8000/CodeIgniter-3.0.0/paging_demo/paging/190\n\t\t\t\t//获取链接地址第三段的参数190 与配置$config['uri_seqment']相对应\n\t\t\t\t$offset = intval($this->uri->segment(3));//intval函数获取数字,无则返回0\n\t\t\t\t\n\t\t\t\t//拼接Sql查询语句\n\t\t\t\t$sql = \"select * from blog_user limit $offset , $page_size\";\n\t\t\t\techo $sql.'<br>';\n\t\t\t\t\n\t\t\t\t//生成链接\n\t\t\t\t$data['links']=$this->pagination->create_links ();\n\t\t\t\t//在页面中显示\n\t\t\t\t$this->load->view('user/paging_view',$data);\n\t\t\t}\n\t\t}\n\n\t\t\\application\\views\\user\\paging_view.php\n\t\t<!DOCTYPE html>\n\t\t<html>\n\t\t<head>\n\t\t\t<meta charset=\"utf-8\">\n\t\t\t<title>分页</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<?=$links ?>\n\t\t</body>\n\t\t</html>\n\n<a id=\"扩展_修改分页生成的代码\"></a>扩展_修改分页生成的代码\n\n\t\t拷贝system/libraries/Pagination.php 到 application/libraries/目录 直接修改如下:\n\t\t\t这样做之后CI会自动查找到application/libraries/Pagination.php 做为分页类.\n\t\tCI 3.0.0\n\t\t\t//Generate the pagination links\n\t\t\tpublic function create_links(){//398行\n\t\t\t\t//省略很多代码.\n\t\t\t\t//原: //650行\n\t\t\t\t//return $this->full_tag_open.$output.$this->full_tag_close;\n\n\t\t\t\t//修改如下: 自定义内容 当然,发挥自己的想象去修改\n\t\t\t\t$baseinfo = \"总共 $this->total_rows 条记录，每页显示 $this->per_page 条，\n\t\t\t\t总计 $num_pages 页，当前是第  $this->cur_page 页\".'&nbsp;&nbsp;&nbsp;';\n\t\t\t\treturn $baseinfo.$this->full_tag_open.$output.$this->full_tag_close;\n\t\t\t}\n\t\tCI 2.2.0\n\t\t\tfunction create_links(){//115行\n\t\t\t\t//省略很多代码.\n\t\t\t\t// Add the wrapper HTML if exists //331行\n\t\t\t\t//$output = $this->full_tag_open.$output.$this->full_tag_close;\n\t\t\t\t//return $output;\n\n\t\t\t\t//修改如下: 自定义内容 当然,发挥自己的想象去修改\n\t\t\t\t$baseinfo = \"总共 $this->total_rows 条记录，每页显示 $this->per_page 条，\n\t\t\t\t总计 $num_pages 页，当前是第  $this->cur_page 页\".'&nbsp;&nbsp;&nbsp;';\n\t\t\t\treturn $baseinfo.$output;\n\t\t\t}\n\n\n# <a id=\"文件上传\"></a>文件上传\n\thttp://codeigniter.org.cn/user_guide/libraries/file_uploading.html\n\t\n\t案例见代码: \n\t\\application\\controllers\\upload_demo.php\n\t<?php\n\tclass Upload_demo extends CI_Controller {\n\t\tpublic function index() {\n\t\t}\n\t\t\n\t\t// http://127.0.0.1:8000/CodeIgniter-3.0.0/upload_demo/file\n\t\tpublic function file() {\n\t\t\t$data ['error'] = '';\n\t\t\t$data ['upload_data'] = '';\n\t\t\t\n\t\t\t$this->load->helper ( 'url' );\n\t\t\t$this->load->view ( 'user/upload_view_demo', $data );\n\t\t}\n\t\tpublic function upload() {\n\t\t\t// 上传目录需要手动创建\n\t\t\t$config ['upload_path'] = './uploads/';\n\t\t\t$config ['allowed_types'] = 'gif|jpg|png';\n\t\t\t$config ['max_size'] = 100;//kb\n\t\t\t$config ['max_width'] = 1024;\n\t\t\t$config ['max_height'] = 768;\n\t\t\t// 上传后的文件名/不设置则默认原文件名,如果文件名冲突,则会在文件名中加入递增数字\n\t\t\t//$config ['file_name'] = uniqid (); \n\t\t\t\n\t\t\t$this->load->library ( 'upload', $config );\n\t\t\t\n\t\t\t$this->upload->do_upload ( 'pic' );//上传的input name\n\t\t\t$this->upload->do_upload ( 'pic2' );//上传的input name\n\t\t\t\n\t\t\t$data = array (\n\t\t\t\t\t'upload_data' => $this->upload->data () ,//上传成功\n\t\t\t\t\t'error' => $this->upload->display_errors ()//错误信息\n\t\t\t);\n\t\t\t$this->load->view ( 'user/upload_view_demo', $data );\n\t\t}\n\t}\n\n\t\\application\\views\\user\\upload_view_demo.php\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>文件上传</title>\n\t</head>\n\t<body>\n\t\t<?php \n\t\tif($error){\techo $error;}\n\t\t?>\n\n\t\t<form action=\"<?php echo site_url('upload_demo/upload')?>\" method=\"post\" enctype=\"multipart/form-data\">\n\t\t\t<input type=\"file\" name=\"pic\" /></br>\n\t\t\t<input type=\"file\" name=\"pic2\" /></br>\n\t\t\t<input type=\"submit\" name=\"上传\" />\n\t\t</form>\n\t\t\n\t\t<?php if ($upload_data):?>\n\t\t\t<?php foreach ($upload_data as $item => $value):?>\n\t\t\t\t<li><?php echo $item;?>: <?php echo $value;?></li>\n\t\t\t<?php endforeach; ?>\n\t\t<?php endif ?>\n\t</body>\n\t</html>\n\n\n# <a id=\"图片处理类\"></a>图片处理类\n\n\t$config['image_library'] = 'gd2';\n\t$config['source_image'] = '/path/to/image/mypic.jpg';\n\t$config['create_thumb'] = TRUE;\n\t$config['maintain_ratio'] = TRUE;\n\t$config['width'] = 75;\n\t$config['height'] = 50;\n\n\t$this->load->library('image_lib', $config); \n\n\t$this->image_lib->resize();  //创建缩略图  \n\t// $this->image_lib->crop() //图像裁剪\n\t// $this->image_lib->rotate() //图像旋转 \n\t// $this->image_lib->watermark() //添加图像水印\n\t// $this->image_lib->clear()  //clear函数重置所有之前用于处理图片的值。当你用循环来处理一批图片时，你可能会想使用它。\n\t\n\t//处理不同的图片有不同的配置,详情见文档\n\thttp://codeigniter.org.cn/user_guide/libraries/image_lib.html\n\n\n\t//获取相应属性\n\t$this->image_lib->thumb_marker; \n\t//错误信息\n\t$this->image_lib->display_errors();\n\n\n# <a id=\"Session\"></a>Session\n\thttp://codeigniter.org.cn/user_guide/libraries/sessions.html\n\tSession 类将每个用户的 session 信息序列化（serialize）后存储到到 cookie 中（并同时进行加密）。\n\t\n\tci的Session是存储到cookie中.PHP原生的session是放到服务器中.\n\t所以需要加密.可查看值,但不能修改.因为提交时会通过密钥校验数据完整性.\n\t\n\t配置 \\application\\config\\config.php\n\t\t\n\t\t配置Session加密(CI2.2可配置,CI3.0.0抛弃了此功能):\n\t\t\t原:\n\t\t\t\t$config['sess_encrypt_cookie']\t= FALSE;\n\t\t\t修改为:\n\t\t\t\t$config['sess_encrypt_cookie']\t= TRUE;\n\n\t\t配置Session关闭浏览器后失效(CI2.2可配置,CI3.0.0无此配置项):\n\t\t\t原:\n\t\t\t\t$config['sess_expire_on_close'] = FALSE;\n\t\t\t修改为:\n\t\t\t\t$config['sess_expire_on_close'] = TRUE;\n\t\t\t\n\t\t\tCI3.0.0 需要如下实现(关闭浏览器销毁session,不关闭或者不退出,则一直有效):\n\t\t\t\t$config['sess_expiration'] = 0; \n\n\t\t配置Session密钥:\n\t\t\t\n\t\t\t原:\n\t\t\t\t$config['encryption_key'] = '';\n\t\t\t修改密钥(可用echo md5(uniqid());生成一个值当密钥):\n\t\t\t\t$config['encryption_key'] = '05c072360c5ac7e19d5b2566a995991c';\n\t\t\n\t\t配置Session文件路径:\n\n\t\t\tCI3.0.0版本需要配置此项,不然会出现 Message: mkdir() [function.mkdir]: Invalid argument 异常\n\t\t\tCI3.0.0之前版本可以不要设置.(CodeIgniter_2.2.0测试查看,无此参数)\n\t\t\t\n\t\t\t原:\n\t\t\t\t$config['sess_save_path'] = NULL;\n\t\t\t新session路径(注意~~些路径需要要使用绝对路径)\n\t\t\t\t创建目录用于存储Session:E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\CodeIgniter-3.0.0\\application\\session\n\t\t\t\t$config['sess_save_path'] = 'E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\CodeIgniter-3.0.0\\application\\session';\n\t\t\t\n\t\t\t可查看 sess_save_path 配置相关文档\n\t\t\t\thttp://codeigniter.org.cn/user_guide/libraries/sessions.html\n\t\t\t\thttp://php.net/manual/en/session.configuration.php#ini.session.save-path\n\t\t\n\t\t//加载模块\n\t\t$this->load->library('session');\n\t\t//存储session\n\t\t$user = $this->session->set_userdata ( 'user', $user );\n\t\t//取session\n\t\t$user = $this->session->userdata('user');\n\t\t//删除session\n\t\t$this->session->unset_userdata('user');\n\t\t$this->session->unset_userdata($array_items);//删除多个session\n\n\nCi的Session实现案例:\n\n\t\t案例见代码: \n\t\t<?php\n\t\tclass Session_demo extends CI_Controller {\n\t\t\tpublic function index(){}\n\t\t\t\n\t\t\tpublic function __construct(){\n\t\t\t\tparent::__construct();\n\t\t\t\t$this->load->library('session');\n\t\t\t}\n\t\t\t\n\t\t\t// 先存储session \n\t\t\t// http://127.0.0.1:8000/CodeIgniter-3.0.0/session_demo/set_session\n\t\t\t// 在取出sesson(刷新演示一次性的数据)\n\t\t\t// http://127.0.0.1:8000/CodeIgniter-3.0.0/session_demo/show_session\n\t\t\tpublic function set_session() {\n\t\t\t\t//echo md5(uniqid());exit;\n\t\t\t\t\n\t\t\t\t$user = array('id'=>3,'name'=>'jack');\n\t\t\t\t\n\t\t\t\t// 相当于原生的:\n\t\t\t\t// session_start();\n\t\t\t\t// $_SESSION[\"user\"] = $user;\n\t\t\t\t\n\t\t\t\t$user = $this->session->set_userdata ( 'user', $user );\n\t\t\t\tvar_dump($user);//取出来NULL\n\t\t\t\techo '<br>';\n\t\t\t\t\n\t\t\t\t//取session\n\t\t\t\t$user = $this->session->userdata('user');\n\t\t\t\tvar_dump($user);\n\t\t\t\t\n\t\t\t\t//一次性的数据,只能读一次\n\t\t\t\t$this->session->set_flashdata('test','testdate-aaaaaaaaaaaa');\n\t\t\t}\n\t\t\t\n\t\t\t//http://127.0.0.1:8000/CodeIgniter-3.0.0/session_demo/show_session\n\t\t\tpublic function show_session(){\n\t\t\t\t//获取CI session中的数据\n\t\t\t\t$user = $this->session->userdata('user');\n\t\t\t\tvar_dump($user);\n\t\t\t\t\n\t\t\t\t//只可以取一次,取完后就会被删除.\n\t\t\t\t$test=$this->session->flashdata('test');\n\t\t\t\tvar_dump($test);\n\t\t\t}\n\n\t\t\tpublic function delete_session(){\n\t\t\t\t//删除单个session\n\t\t\t\t$this->session->unset_userdata('user');\n\n\t\t\t\t// //删除多个session\n\t\t\t\t// $array_items = array('user', 'test');\n\t\t\t\t// $this->session->unset_userdata($array_items);\n\t\t\t}\n\n\t\t\tpublic function originalPHPsession(){\n\t\t\t\t// 原生session\n\t\t\t\tsession_start();\n\t\t\t\t//存储验证码信息到PHP原生的session中.\n\t\t\t\t$_SESSION[\"cap\"] = 'abc';\n\t\t\t\t\n\t\t\t\t//获取Session\n\t\t\t\t$word = $_SESSION['cap'];\n\t\t\t\techo $word;\n\t\t\t\t\n\t\t\t\t//终结 Session\n\t\t\t\tunset($_SESSION['cap']);\n\t\t\t\t//重置session  , 失去所有已存储的 session 数据。\n\t\t\t\t//session_destroy();\n\t\t\t}\n\t\t}\n\t\t\n# <a id=\"验证码\"></a>验证码\n\tci的验证码会创建一个图片文件,所以需要创建文件夹用来存放\n\t\tE:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\CodeIgniter-3.0.0\\captcha\n\n\t使用CI验证码需要开启PHP的 GD 图像库\n\t\t可用PHP代码检测是否开启GD图像库\n\t\t\tif(extension_loaded('gd')){\n\t\t\t\techo '你可以使用gd<br>';\n\t\t\t\tforeach (gd_info() as $cate=>$value)\n\t\t\t\t\techo \"$cate: $value<br>\";\n\t\t\t}else echo '没有安装gd扩展';\n\n\t\t开启 GD 图像库 方法:\n\t\t\tE:\\ComTu_Design\\PHP\\php-5.3.5\\php.ini 配置文件修改如下:\n\t\t\t原: \n\t\t\t\t;extension=php_gd2.dll\n\t\t\t修改成(去除前面的;分号): \n\t\t\t\textension=php_gd2.dll\n\t\t\t修改完后保存,重启apache\n\nCI默认实现:\n\n\t\t//加载模块\n\t\t$this->load->helper('captcha');\n\t\t//创建验证码\n\t\t$cap = create_captcha($vals);\n\t\t//显示验证码\n\t\techo $cap['image'];\n\n\t\t案例见代码: \n\t\t<?php\n\t\tclass Captcha_demo extends CI_Controller{\n\t\t\tpublic function index(){}\n\t\t\t\n\t\t\tpublic function test(){\n\t\t\t\techo 'captcha_demo';\n\t\t\t\t   \n\t\t\t\tif(extension_loaded('gd')){\n\t\t\t\t\techo '你可以使用gd<br>';\n\t\t\t\t\tforeach (gd_info() as $cate=>$value)\n\t\t\t\t\t\techo \"$cate: $value<br>\";\n\t\t\t\t}else echo '没有安装gd扩展';\n\t\t\t\t\n\t\t\t\t$this->load->helper('url');\n\t\t\t\t$this->load->helper('captcha');\n\t\t\t\t$number = rand(1000,9999);//生成随机字符串\n\t\t\t\t$vals = array(\n\t\t\t\t\t\t'word'      => $number,//可指定验证码内容,如果是中文.需要有支持的字体\n\t\t\t\t\t\t'img_path'  => dirname(BASEPATH).'/captcha/',//生成的图片存放目录,手动创建\n\t\t\t\t\t\t'img_url'   => base_url('/captcha/'),//图片链接地址\n\t\t\t\t\t\t//'font_path' => './path/to/fonts/texb.ttf',//指定字体_如果使用中文需要指定字体\n\t\t\t\t\t\t'img_width' => '150',\n\t\t\t\t\t\t'img_height'    => 30,\n\t\t\t\t\t\t'expiration'    => 5,//图片存放时间,如果过期,只有在被再次请求才会删除.单位秒\n\t\t\t\t\t\t'word_length'   => 8,\n\t\t\t\t\t\t'font_size' => 16,\n\t\t\t\t\t\t'img_id'    => 'Imageid',\n\t\t\t\t\t\t'pool'      => '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n\t\t\t\t\n\t\t\t\t\t\t// White background and border, black text and red grid\n\t\t\t\t\t\t'colors'    => array(\n\t\t\t\t\t\t\t\t'background' => array(255, 255, 255),\n\t\t\t\t\t\t\t\t'border' => array(255, 255, 255),\n\t\t\t\t\t\t\t\t'text' => array(0, 0, 0),\n\t\t\t\t\t\t\t\t'grid' => array(255, 40, 40)\n\t\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\t\n\t\t\t\t$cap = create_captcha($vals);\n\t\t\t\techo $cap['word'].\"<br>\";\n\t\t\t\techo $cap['image'];\n\t\t\t\t\n\t\t\t\t$this->load->view('user/captcha_view_demo',array('cap'=>$cap['image']));\n\t\t\t\t\n\t\t\t\t// 原生session\n\t\t\t\tsession_start();\n\t\t\t\t//存储验证码信息到PHP原生的session中.等待校验.\n\t\t\t\t$_SESSION[\"cap\"] = $cap['word'];\n\t\t\t\t\n\t\t\t\t//获取Session\n\t\t\t\t$word = $_SESSION['cap'];\n\t\t\t\techo $word;\n\t\t\t}\n\t\t}\n\n<a id=\"扩展CI的captcha_helper.php实现_验证码\"></a>扩展CI的captcha_helper.php实现_验证码:\n\n\t\t一般而言,对于验证码只需要用一次,没必要创建一张图片保存到本地.\n\t\t所以我对验证码类进行了如下扩展: 不存储验证码图片,并实现点击重新获取验证码.\n\n\t\t步骤一: \n\n\t\t\t把 system/helpers/captcha_helper.php 文件拷贝到 application/helpers/ 目录下并重命名为:MY_captcha_helper.php\n\t\t\n\t\t步骤二:  去除与目录有关的代码\n\n\t\t\t修改 MY_captcha_helper.php 里面的源文件进行如下操作:\n\t\t\t\n\t\t\t(CI 3.0.0)\n\t\t\t\t//处理如果没有设置图片路径而被返回的操作\n\t\t\t\t// \t\tif ($img_path === '' OR $img_url === ''\n\t\t\t\t// \t\t\tOR ! is_dir($img_path) OR ! is_really_writable($img_path)\n\t\t\t\t// \t\t\tOR ! extension_loaded('gd'))\n\t\t\t\t// \t\t{\n\t\t\t\t// \t\t\treturn FALSE;\n\t\t\t\t// \t\t}\n\t\t\t\t// \t\t// -----------------------------------\n\t\t\t\t// \t\t// Remove old images\n\t\t\t\t// \t\t// 删除旧图片\n\t\t\t\t// \t\t// -----------------------------------\n\t\t\t\t// \t\t$now = microtime(TRUE);\n\t\t\t\t// \t\t$current_dir = @opendir($img_path);\n\t\t\t\t// \t\twhile ($filename = @readdir($current_dir))\n\t\t\t\t// \t\t{\n\t\t\t\t// \t\t\tif (substr($filename, -4) === '.jpg' && (str_replace('.jpg', '', $filename) + $expiration) < $now)\n\t\t\t\t// \t\t\t{\n\t\t\t\t// \t\t\t\t@unlink($img_path.$filename);\n\t\t\t\t// \t\t\t}\n\t\t\t\t// \t\t}\n\t\t\t\t// \t\t@closedir($current_dir);\n\n\t\t\t\t// -----------------------------------\n\t\t\t\t//  Generate the image\n\t\t\t\t// 生成图片.\n\t\t\t\t// -----------------------------------\n\t\t\t\t//处理生成图片--start--\n\t\t\t\t// \t\t$img_url = rtrim($img_url, '/').'/';\n\t\t\t\t// \t\tif (function_exists('imagejpeg'))\n\t\t\t\t// \t\t{\n\t\t\t\t// \t\t\t$img_filename = $now.'.jpg';\n\t\t\t\t// \t\t\timagejpeg($im, $img_path.$img_filename);\n\t\t\t\t// \t\t}\n\t\t\t\t// \t\telseif (function_exists('imagepng'))\n\t\t\t\t// \t\t{\n\t\t\t\t// \t\t\t$img_filename = $now.'.png';\n\t\t\t\t// \t\t\timagepng($im, $img_path.$img_filename);\n\t\t\t\t// \t\t}\n\t\t\t\t// \t\telse\n\t\t\t\t// \t\t{\n\t\t\t\t// \t\t\treturn FALSE;\n\t\t\t\t// \t\t}\n\t\t\t\t// \t\t$img = '<img '.($img_id === '' ? '' : 'id=\"'.$img_id.'\"').' src=\"'.$img_url.$img_filename.'\" style=\"width: '.$img_width.'; height: '.$img_height .'; border: 0;\" alt=\" \" />';\n\t\t\t\t// \t\tImageDestroy($im);\n\t\t\t\t// \t\treturn array('word' => $word, 'time' => $now, 'image' => $img, 'filename' => $img_filename);\n\t\t\t\t//处理生成图片--end--\n\t\t\t\t//并在此处 增加如下四行代码,告诉浏览器返回的是一张图片.\n\t\t\t\theader(\"Content-Type:image/jpeg\");  \n\t\t\t\timagejpeg($im);\n\t\t\t\tImageDestroy($im);\n\t\t\t\treturn $word;//返回生成的验证码字符串\n\n\n\t\t\t(CI 2.2.0)\n\t\t\t\t//处理如果没有设置图片路径而被返回的操作\n\t\t\t\t// if ($img_path == '' OR $img_url == ''){\n\t\t\t\t// \treturn FALSE;\n\t\t\t\t// }\n\t\t\t\t// if ( ! @is_dir($img_path)){\n\t\t\t\t// \treturn FALSE;\n\t\t\t\t// }\n\t\t\t\t// if ( ! is_writable($img_path)){\n\t\t\t\t// \treturn FALSE;\n\t\t\t\t// }\n\t\t\t\t// if ( ! extension_loaded('gd')){\n\t\t\t\t// \treturn FALSE;\n\t\t\t\t// }\n\t\t\t\t// // -----------------------------------\n\t\t\t\t// // Remove old images\n\t\t\t\t// // 生成图片.\n\t\t\t\t// // -----------------------------------\n\t\t\t\t// list($usec, $sec) = explode(\" \", microtime());\n\t\t\t\t// $now = ((float)$usec + (float)$sec);\n\t\t\t\t// $current_dir = @opendir($img_path);\n\t\t\t\t// while ($filename = @readdir($current_dir)){\n\t\t\t\t// \tif ($filename != \".\" and $filename != \"..\" and $filename != \"index.html\"){\n\t\t\t\t// \t\t$name = str_replace(\".jpg\", \"\", $filename);\n\t\t\t\t// \t\tif (($name + $expiration) < $now){\n\t\t\t\t// \t\t\t@unlink($img_path.$filename);\n\t\t\t\t// \t\t}\n\t\t\t\t// \t}\n\t\t\t\t// }\n\t\t\t\t// @closedir($current_dir);\n\t\t\t\t\n\t\t\t\t// -----------------------------------\n\t\t\t\t//  Generate the image\n\t\t\t\t// -----------------------------------\n\t\t\t\t// $img_name = $now.'.jpg';\n\t\t\t\t// ImageJPEG($im, $img_path.$img_name);\n\t\t\t\t// $img = \"<img src=\\\"$img_url$img_name\\\" width=\\\"$img_width\\\" height=\\\"$img_height\\\" style=\\\"border:0;\\\" alt=\\\" \\\" />\";\n\t\t\t\t// ImageDestroy($im);\n\t\t\t\t// return array('word' => $word, 'time' => $now, 'image' => $img);\n\t\t\t\t//并在此处 增加如下四行代码,告诉浏览器返回的是一张图片.\n\t\t\t\theader(\"Content-Type:image/jpeg\");  \n\t\t\t\timagejpeg($im);\n\t\t\t\tImageDestroy($im);\n\t\t\t\treturn $word;//返回生成的验证码字符串\n\n\t\t\t\n\t\t步骤三: \n\t\t\t在控制器中使用 captcha\n\t\t\t<?php\n\t\t\tdefined('BASEPATH') OR exit('No direct script access allowed');\n\n\t\t\tclass Privilege extends CI_Controller {\n\t\t\t\tpublic function __construct(){\n\t\t\t\t\tparent::__construct();\n\t\t\t\t\t//载入验证码辅助函数\n\t\t\t\t\t$this->load->helper('captcha');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic function login(){\n\t\t\t\t\t$this->load->view('login');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic function code(){\n\t\t\t\t\t//创建验证码\n\t\t\t\t\t$word = create_captcha();\n\n\t\t\t\t\t//可以在MY_captcha_helper.php直接配置参数也是OK的.\n\t\t\t\t\t//当然同样适用于配置参数.但可以免去了 CI文档中的 img_path 与 img_url 这两个必要参数了.\n\t\t\t\t\t// $vals = array(\n\t\t\t\t\t// \t'word'      => rand(1000,9999),//可指定验证码内容,如果是中文.需要有支持的字体\n\t\t\t\t\t// \t//'font_path' => './path/to/fonts/texb.ttf',//指定字体_如果使用中文需要指定字体\n\t\t\t\t\t// \t'img_width' => '150',\n\t\t\t\t\t// \t'img_height'    => 30,\n\t\t\t\t\t// \t'expiration'    => 5,//图片存放时间,如果过期,只有在被再次请求才会删除.单位秒\n\t\t\t\t\t// \t'word_length'   => 4, //验证码位数\n\t\t\t\t\t// \t'font_size' => 16,\n\t\t\t\t\t// \t'img_id'    => 'Imageid',\n\t\t\t\t\t// \t'pool'      => '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n\t\t\t\t\t// \t// White background and border, black text and red grid\n\t\t\t\t\t// \t'colors'    => array(\n\t\t\t\t\t// \t'background' => array(255, 255, 255),\n\t\t\t\t\t// \t'border' => array(255, 255, 255),\n\t\t\t\t\t// \t'text' => array(0, 0, 0),\n\t\t\t\t\t// \t'grid' => array(255, 40, 40)\n\t\t\t\t\t// )\n\t\t\t\t\t// );\n\t\t\t\t\t//$word = create_captcha($vals);\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t步骤四: view中显示 .并实现点击图片重新加载新图片的功能:\n\t\t\t<img src=\"<?php echo site_url('admin/privilege/code');?>\" width=\"145\" height=\"20\" alt=\"CAPTCHA\" border=\"1\"\n\t\t\tonclick= this.src=\"<?php echo site_url('admin/privilege/code').'/';?>\"+Math.random() style=\"cursor: pointer;\" title=\"看不清？点击更换另一个验证码。\"/>\n\n\n# <a id=\"表单验证\"></a>表单验证\n\n\thttp://codeigniter.org.cn/user_guide/libraries/form_validation.html\n\t\n\t实现: \n\t\t//加载模块\n\t\t$this->load->helper ( array ('form','url') );\n\t\t$this->load->library ( 'form_validation' );\n\t\t//设置校验规则,参数一:表单上的名称,参数二:错误信息显示的名称,参数三:校验的规则见标准文档\n\t\t//http://codeigniter.org.cn/user_guide/libraries/form_validation.html#id25\n\t\t$this->form_validation->set_rules('参数名','用户名','required');\n\t\t//表单校验 返回true表示校验通过\n\t\t$bool = $this->form_validation->run();\n\t\t//表单校验加载校验规则 使用配置文件 application/config/form_validation.php 如果没有自己创建.\n\t\t//$bool = $this->form_validation->run('demo');//参数名与config文件中的相对应.\n\t\t\n\t\tform表单中\n\t\t\t//自动回填内容项\n\t\t\t<?php echo set_value('参数名')?>\n\t\t\t//显示错误信息, 参数一:为form中的表单名,参数二,三:参数样式\n\t\t\t<?php echo form_error('参数名','<span>','</span>')?>\n\t\t\t//显示全部错误信息\n\t\t\t<?php echo validation_errors();?>\n\n案例见代码: \n\n\t\t\\application\\controllers\\form_demo.php\n\t\t\t<?php\n\t\t\tclass Form_demo extends CI_Controller {\n\t\t\t\tpublic function index() {\n\t\t\t\t}\n\t\t\t\t// http://127.0.0.1:8000/CodeIgniter-3.0.0/form_demo/insert\n\t\t\t\tpublic function insert() {\n\t\t\t\t\t$this->load->helper ( array ('form','url') );\n\t\t\t\t\t//加载模块\n\t\t\t\t\t$this->load->library ( 'form_validation' );\n\t\t\t\t\t\n\t\t\t\t\t// 校验如果这样编写会编写很多规则代码.可以在config进行配置验证文件.也可实现重复利用的效果\n\t\t\t\t\t// $this->form_validation->set_rules('name','用户名','required');\n\t\t\t\t\t// $this->form_validation->set_rules('password','密码','required|min_length[6]|max_length[16]|md5');\n\t\t\t\t\t//$this->form_validation->set_rules('repassword','确认密码','trim|required|md5|matches[password]');//重复密码验证\n\t\t\t\t\t// $this->form_validation->set_rules('email','邮箱',array('required','valid_email'));\n\t\t\t\t\t// // 表单验证\n\t\t\t\t\t// $bool = $this->form_validation->run();\n\t\t\t\t\t\n\t\t\t\t\t// 表单验证配置文件 application/config/form_validation.php\n\t\t\t\t\t$bool = $this->form_validation->run('demo');\n\t\t\t\t\tif ($bool) {\n\t\t\t\t\t\t// 调用模型保存数据库\n\t\t\t\t\t\techo 'success';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// 显示错误信息\n\t\t\t\t\t\t$this->load->view ( 'user/form_view_demo' );\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\techo $bool;\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t--------\n\t\t\\application\\views\\user\\form_view_demo.php\n\t\t\t<!DOCTYPE html>\n\t\t\t<html>\n\t\t\t<head>\n\t\t\t\t<meta charset=\"utf-8\">\n\t\t\t\t<title>表单验证</title>\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t<?php echo validation_errors();?>\n\n\t\t\t<form action=\"<?php echo site_url('form_demo/insert');?>\" method=\"post\">\n\t\t\t\tname<input type=\"text\" name=\"name\" value=\"<?php echo set_value('name')?>\"/>\n\t\t\t\t<?php echo form_error('name','<span>','</span>')?>\n\t\t\t\t<br>\n\t\t\t\tpassword<input type=\"password\" name=\"password\" />\n\t\t\t\t<?php echo form_error('password','<span>','</span>')?>\n\t\t\t\t<br>\n\t\t\t\temail<input type=\"text\" name=\"email\" value=\"<?php echo set_value('email')?>\"/>\n\t\t\t\t<?php echo form_error('email','<span>','</span>')?>\n\t\t\t\t<br>\n\t\t\t\t<button type=\"submit\">submit</button>\n\t\t\t</form>\n\t\t\t</body>\n\t\t\t</html>\n\t\t--------\n\t\t\\application/config/form_validation.php\n\t\t\t<?php\n\t\t\t\t$config = array (\n\t\t\t\t\t'demo' => array (\n\t\t\t\t\t\t\tarray (\n\t\t\t\t\t\t\t\t\t'field' => 'name',\n\t\t\t\t\t\t\t\t\t'label' => '用户名',\n\t\t\t\t\t\t\t\t\t'rules' => 'required' \n\t\t\t\t\t\t\t) ,\n\t\t\t\t\t\t\tarray (\n\t\t\t\t\t\t\t\t\t'field' => 'password',\n\t\t\t\t\t\t\t\t\t'label' => '密码',\n\t\t\t\t\t\t\t\t\t'rules' => 'required' \n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tarray (\n\t\t\t\t\t\t\t\t\t'field' => 'email',\n\t\t\t\t\t\t\t\t\t'label' => '邮箱',\n\t\t\t\t\t\t\t\t\t'rules' => 'required|valid_email' \n\t\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t\t'signup'=>array( ....  )\n\t\t\t\t);\n\n# <a id=\"语言包\"></a>语言包\n\t如表单错误信息等语言.\n\t\t将语言包解压到\n\t\t\t\\application\\language\\zh_cn\n\t\t配置语言:\n\t\t\t\\application\\config\\config.php\n\t\t\t原:\n\t\t\t\t$config['language']\t= 'english';\n\t\t\t改成\n\t\t\t\t$config['language']\t= 'zh_cn';\n\n# <a id=\"购物车类库\"></a>购物车类库\n\t\t\n\thttp://codeigniter.org.cn/user_guide/libraries/cart.html\n\n\tCI3.0.0 官方上标注: 之后购物车类已经废弃，请不要使用。目前保留它只是为了向前兼容。\n\n\t引入购物车支持库\n\t$this->load->library('cart');\n\t//$autoload['libraries'] = array('cart');//或者配置 application/config/autoload.php\n\n\t加入购物车\n\t\t//名称有要求\n\t\t$data['id'] = $this->input->post('goods_id',true); //id\n\t\t$data['name'] = $this->input->post('goods_name',true); //商品名称\n\t\t$data['qty'] = $this->input->post('goods_nums',true); //数量\n\t\t$data['price'] = $this->input->post('shop_price',true); //金额\n\t\t\n\t\t$goods_thumb= $this->input->post('goods_thumb',true);\n\t\t$data['options'] = array('goods_thumb'=>$goods_thumb);//更多信息\n\n\t\tif($this->cart->insert($data)){\n\t\t\techo 'ok';\n\t\t}else{\n\t\t\techo 'error';\n\t\t}\n\t\t\n\t//获取购物车数据\n\t$data['carts'] = $this->cart->contents();\n\n\t//view中获取展示数据\n\t<?php foreach ($carts as $v):?>\n\t\t<?php echo base_url('public/uploads').'/'.$v['options']['goods_thumb'];?>\n\t\t<?php echo $v['id'];?>\n\t\t<?php echo $v['name'];?> \n\t\t<?php echo $v['price'];?>\n\t\t<?php echo $v['qty'];?>\n\t\t<!-- 自动生成 -->\n\t\t<?php echo $v['row_id'];?>\n\t\t<!-- 自动生成 $v['subtotal'] 会自动计算出总金额-->\n\t\t<?php echo $v['subtotal']?>\n\t<?php endforeach;?>\n\t\n\t删除/修改购物车\n\t\t$data['rowid'] = $rowid;\n\t\t$data['qty'] = 0;\n\t\t$this->cart->update($data);\n\t\tredirect('cart/show');\n\t\n\t注意事项:\n\t\t\n\t\t1. 中文问题(2.2.0存在,3.0.0不存在)\n\t\t\t$data['name'] = $this->input->post('goods_name',true); //商品名称\n\t\t\t中name项在 CI3.0.0之前是不支持中文内容的. CI3.0.0版本可支持中文.\n\t\t\tCI2.2.0修改cart.php原文件来使name支持中文.\n\t\t\t\t方法: system/library/Cart.php 拷贝到 application/library 中,找到如下代码并注释即可.\n\t\t\t\n\t\t\t\t\t// Validate the product name. It can only be alpha-numeric, dashes, underscores, colons or periods.\n\t\t\t\t\t// Note: These can be user-specified by setting the $this->product_name_rules variable.\n\t\t\t\t\t//CI2.2.0的原代码在186行数\n\t\t\t\t\t//if ( ! preg_match(\"/^[\".$this->product_name_rules.\"]+$/i\", $items['name']))\n\t\t\t\t\t//{\n\t\t\t\t\t//\tlog_message('error', 'An invalid name was submitted as the product name:\n\t\t\t\t\t//\t'.$items['name'].' The name can only contain alpha-numeric\n\t\t\t\t\t//\tcharacters, dashes, underscores, colons, and spaces');\n\t\t\t\t\t//\treturn FALSE;\n\t\t\t\t\t//}\n\t\t2.total_items 问题 (CI2.2.0与CI3.0.0都存在)\n\t\t\t显示购物车中商品数量。 CI框架中默认是显示出商品数量总数\n\t\t\t即:如果存放到购物车2双鞋子+1条裤子 <?php echo $this->cart->total_items();?> 获取出来的数据是3件物品,而不是2种商品\n\t\t\t而如果你的需求是 显示商品种类 .需要修改源代码.\n\t\t\t\t方法: system/library/Cart.php 拷贝到 application/library 中,找到如下代码修改:\n\t\t\t\t\tCI3.0.0\n\t\t\t\t\t\t//代码位置在401行 _save_cart 函数中\n\t\t\t\t\t\t$this->_cart_contents['cart_total'] += ($val['price'] * $val['qty']);\n\t\t\t\t\t\t//$this->_cart_contents['total_items'] += $val['qty'];  //原代码\n\t\t\t\t\t\t$this->_cart_contents['total_items'] ++;  //新代码\n\t\t\t\t\t\t$this->_cart_contents[$key]['subtotal'] = \n\t\t\t\t\t\t($this->_cart_contents[$key]['price'] * $this->_cart_contents[$key]['qty']);\n\t\t\t\t\t\n\t\t\t\t\tCI2.2.0\n\t\t\t\t\t\t//代码位置在386行 _save_cart 函数中\n\t\t\t\t\t\t$total += ($val['price'] * $val['qty']);\n\t\t\t\t\t\t//$items += $val['qty'];//原代码\n\t\t\t\t\t\t$items ++;//新代码\n\n\t\t3.在我们向购物车中添加商品的时候，如果添加了已经存在于购物车中的商品时，会出现逻辑错误。\n\t\t\t理论上应该是累加，但实际上是将原来的商品信息给删除了。所以要相应的处理一下：\t\n\t\t\t\t\n\t\t\t\t// 获取/封装数据....\n\t\t\t\t//在插入之前,需要判断即将要加入的商品是否已经存在于购物车中\n\t\t\t\t$carts = $this->cart->contents();\n\t\t\t\tforeach ($carts as $v){\n\t\t\t\t\tif($v['id'] == $data['id']){\n\t\t\t\t\t\t$data['qty'] += $v['qty'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// 插入数据...\n\n\n# <a id=\"CI框架内部解析\"></a>CI框架内部解析\n\t\n\tCI是一个单入口框架,所有的请求都需要经常index.php文件 . 流程如下:\n                  | --> Routing --> Scourity -->     |-----------------------|\n        index.php |                                  |Application Controller |-->Drivers,Models,Libaies,Helpers,Packages,Scripts\n                  | <-- Caching <--   View   <--     |-----------------------|\t \n\n\t\n分析index.php文件.\n\n\t\t$system_path = 'system';\n\t\t$application_folder = 'application';\n\t\t这个和我们的文件夹结构名称一一对应. 当然这个名称是可以更改.\n\t\t\n\t\t中间加载一些系统目录常量等.\n\t\t在index.php结尾尝试打印里面的内容.\n\t\t\t\n\t\t\t\tvar_dump(SELF , ENVIRONMENT ,BASEPATH ,FCPATH,  SYSDIR);\n\t\t\t\texit();\n\t\t\t结果\n\t\t\t\tstring(9) \"index.php\"\n\t\t\t\tstring(11) \"development\"\n\t\t\t\tstring(62) \"E:/ComTu_Design/PHP/Apache2.2/htdocs/CodeIgniter-3.0.0/system/\"\n\t\t\t\tstring(55) \"E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\CodeIgniter-3.0.0/\"\n\t\t\t\tstring(6) \"system\"\n\n\t\t最后载入\n\t\t\trequire_once BASEPATH.'core/CodeIgniter.php';\n\n分析CodeIgniter.php\n\n\t\t载入Common.php 通用函数库.\t\t\n\t\t\trequire_once(BASEPATH.'core/Common.php');\n\t\t\t\t例如:\tis_php($version) php版本\n\t\t\t\t\tis_really_writable 是否可写\n\t\t\t\t\tload_class 载入类函数\n\t\t\t\t\t等等\n\n\t\t载入配置文件(常量配置)\n\t\t\trequire_once(APPPATH.'config/constants.php');\n\n\t\t载入核心类文件.\n\t\t\t$BM =& load_class('Benchmark', 'core'); \n\t\t\t$EXT =& load_class('Hooks', 'core');  勾子类\n\t\t\t$CFG =& load_class('Config', 'core'); 配置文件类\n\t\t\t$UNI =& load_class('Utf8', 'core'); 编码类\n\t\t\t$URI =& load_class('URI', 'core'); URI类\n\t\t\t$RTR =& load_class('Router', 'core', isset($routing) ? $routing : NULL); 路由类\n\t\t\t$OUT =& load_class('Output', 'core'); 输出类\n\t\t\t$SEC =& load_class('Security', 'core'); 安全类 \n\t\t\t$IN  =& load_class('Input', 'core');输入类\n\t\t\t$LANG =& load_class('Lang', 'core');语言类\n\n\t\t载入CI总控制器.\n\t\t\trequire_once BASEPATH.'core/Controller.php';\n\t\t\n\t\t通过router类对象 $RTR的两个方法获取当前的类名和方法名\n\t\t\t\n\t\t\tCI 2.2.0\n\t\t\t\t$class  = $RTR->fetch_class();\n\t\t\t\t$method = $RTR->fetch_method();\n\t\t\t\n\t\t\tCI 3.0.0\n\t\t\t\t$class = ucfirst($RTR->class);\n\t\t\t\t$method = $RTR->method;\n\t\t\t\n\t\t\t比如:输入 http://127.0.0.1:8000/CodeIgniter-3.0.0/form_demo/insert \n\t\t\t那么上述代码获取的$class就是控制器form_demo,$method就是insert , 如果没\n\t\t\t有方法名,则默认index\n\n\t\tNew了一个对象,叫做CI, 这个就是CI框架中的超级对象(super class)\t\n\t\t\t$CI = new $class(); //此处,就是超级对象的形成过程.\n\t\t\t//var_dump($CI); 可以尝试在此处打印一下$CI的信息 . \n\t\t\n分析CI_Controller类 Controller.php \n\n\t\t\t简单的PHP单例设计模式.\n\t\t\t\tprivate static $instance;\n\t\t\t\tpublic static function &get_instance(){\n\t\t\t\t\treturn self::$instance;\n\t\t\t\t}\n\t\t\t\n\t\t\t构造函数中将前面载入的核心类,作为CI对象的属性.\n\t\t\t\tforeach (is_loaded() as $var => $class){\n\t\t\t\t\t$this->$var =& load_class($class);\n\t\t\t\t}\n\n\t\t\t然后是载入Loader.php 装载类\n\t\t\t\t$this->load =& load_class('Loader', 'core');\n\n\t在控制器中出现的$this就是超级对象.\n\t超级对象形成之后,我们就可以使用超级对象(超级对象的属性)\n\t提供一系列方法完成我们的业务逻辑.如果需要完成其它的功能,可以载入其他的类文件,辅助函数.\n\t这些类文件和辅助函数包括CI已经提供好的.也可以是我们自己定义的.\n\n使用中遇到过的问题\n\tCI 3.0.0使用中\n\t访问 views/目录下的文件时被拦截.如\n\thttp://127.0.0.1:8000/mycishop/application/views/images/ecshop_logo.gif\n\t\n\t提示:\n\t\tForbidden\n\t\tYou don't have permission to access /mycishop/application/views/images/ecshop_logo.gif on this server.\n\t\n\t解决办法:\n\t\t查看与 views 同级的 .htaccess文件 发现是此处招到的拦截.\n\t\t<IfModule authz_core_module>\n\t\t    Require all denied\n\t\t</IfModule>\n\t\t<IfModule !authz_core_module>\n\t\t    #拦截访问.\n\t\t    #Deny from all\n\t\t    #修改成如下代码即可.\n\t\t    Allow from all \n\t\t</IfModule>\n\t配置文件与 [隐藏入口文件-index.php](#隐藏入口文件-index.php) 里面的权限管理类似.\n\n\n\n///////////////////////////////数据库附件////////////////////////////////////////////////\n\n\t/*\n\t 查询数据库\n\t \n\t mysql> show databases;\n\t+--------------------+\n\t| Database           |\n\t+--------------------+\n\t| information_schema |\n\t| discuz             |\n\t| mysql              |\n\t| test               |\n\t| wordpress          |\n\t+--------------------+\n\t5 rows in set (0.00 sec)\n\n\t进入到test数据库\n\n\tmysql> use test   \n\tDatabase changed\n\n\t查看test数据库中的表\n\n\tmysql> show tables;\n\tEmpty set (0.00 sec)\n\n\t创建表\n\n\tmysql> \n\tmysql> CREATE TABLE IF NOT EXISTS bolg_user(\n\t    ->  id INT AUTO_INCREMENT PRIMARY KEY,\n\t    ->  name VARCHAR(255) NOT NULL UNIQUE,\n\t    ->  password CHAR(32) NOT NULL,\n\t    ->  email VARCHAR(255) NOT NULL DEFAULT ''\n\t    -> )ENGINE MyISAM DEFAULT CHARSET=UTF8;\n\tQuery OK, 0 rows affected (0.05 sec)\n\n\t增加数据\n\n\tmysql>\n\tmysql> \n\tmysql> INSERT INTO bolg_user (name,password) VALUES ('admin',md5('admin'));\n\tQuery OK, 1 row affected (0.07 sec)\n\n\t查看数据库的表\n\n\tmysql> show tables;\n\t+----------------+\n\t| Tables_in_test |\n\t+----------------+\n\t| bolg_user      |\n\t+----------------+\n\t1 row in set (0.00 sec)\n\n\t查看数据库结构\n\n\tmysql> desc bolg_user;\n\t+----------+--------------+------+-----+---------+----------------+\n\t| Field    | Type         | Null | Key | Default | Extra          |\n\t+----------+--------------+------+-----+---------+----------------+\n\t| id       | int(11)      | NO   | PRI | NULL    | auto_increment |\n\t| name     | varchar(255) | NO   | UNI | NULL    |                |\n\t| password | char(32)     | NO   |     | NULL    |                |\n\t| email    | varchar(255) | NO   |     | NULL    |                |\n\t+----------+--------------+------+-----+---------+----------------+\n\t4 rows in set (0.02 sec)\n\t\n\t设置编码格式为gbk,解决查看时乱码.\n\tmysql> set names gbk;\n\tQuery OK, 0 rows affected (0.00 sec)\n\n\t查询数据库表中的内容\n\t\n\tmysql> select * from bolg_user;\n\t+----+-------+----------------------------------+-------+\n\t| id | name  | password                         | email |\n\t+----+-------+----------------------------------+-------+\n\t|  1 | admin | 21232f297a57a5a743894a0e4a801fc3 |       |\n\t+----+-------+----------------------------------+-------+\n\t1 row in set (0.00 sec)\n\t * */\n\n\n\n\n[本文案例Demo](/res/file/blog/2015/09/10/PHP_codeigniter/CodeIgniter-3.0.0_Demo.rar)\n\n[本文案例Demo_附加Demo_购物商场](/res/file/blog/2015/09/10/PHP_codeigniter/mycishop.rar)\n","source":"_posts/2015-09-10-PHP_codeigniter.md","raw":"---\nlayout : post\ntitle : \"PHP学习笔记-CI框架\"\ncategory : PHP\ndate : 2015-09-10\ntags : [PHP ,CI, CodeIgniter ]\n---\n\n本人因公司需求.学习PHP的CI框架.本博文为学习笔记.   \nCodeIgniter 是一套给 PHP 网站开发者使用的应用程序开发框架和工具包。   \n它提供一套丰富的标准库以及简单的接口和逻辑结构，其目的是使开发人员更快速地进行项目开发。   \n使用 CodeIgniter 可以减少代码的编写量，并将你的精力投入到项目的创造性开发上。\n\n其中内容包括,CI_Controller对象 , 数据库访问 , AR模型(QB模型) , CI类库扩展 ,     \nUrl相关函数 , 设置路由 , 隐藏入口文件, 分页 , 文件上传 , Session , 验证码 , 语言包 , CI框架内部解析等内容.\n\n<!-- more -->\n\n\n目录\n\n* [CodeIgniter框架简介](#CodeIgniter框架简介)\n* [MVC](#MVC)\n\t* [控制器-controllers](#控制器-controllers)\n\t* [视图-views](#视图-views) \n\t* [模型-model](#模型-model)\n* [CI的超级对象-(CI的控制器对象CI_Controller)](#CI的超级对象-(CI的控制器对象CI_Controller))\n* [数据库访问](#数据库访问)\n* [AR模型操作数据库增删改查 active_record (CI3.0之后改名 query_builder QB模型)](#AR模型操作数据库)\n* [CI类库扩展](#CI类库扩展)\n\t* [为网站设计不同的主题.前台,后台(扩展控制器CI_Controller,装载器Loader)](#扩展控制器CI_Controller-装载器Loader)\n\t* [扩展CI的captcha_helper.php实现_验证码](#扩展CI的captcha_helper.php实现_验证码)\n\t* [扩展_修改分页生成的代码](#扩展_修改分页生成的代码)\n* [url相关函数](#url相关函数)\n* [设置路由](#设置路由)\n* [隐藏入口文件-index.php](#隐藏入口文件-index.php)\n* [分页](#分页)\n* [文件上传](#文件上传)\n* [图片处理类](#图片处理类)\n* [Session](#Session)\n* [验证码](#验证码)\n* [表单验证](#表单验证)\n* [语言包](#语言包)\n* [购物车类库](#购物车类库)\n* [CI框架内部解析](#CI框架内部解析)\n\n\n------------------------------------------\n  \n\n注:测试版本为CodeIgniter3.0.0框架 与CI2.x的有些不同.   \n但都有标注不同点以及处理方法.笔记理论上基本适用于3.0.0(当前最新)之前的版本.  \n\n中文教程地址:    \n[http://codeigniter.org.cn/user_guide/index.html](http://codeigniter.org.cn/user_guide/index.html)\n\n# <a id=\"CodeIgniter框架简介\"></a>CodeIgniter框架简介 ( CI框架 ) \n\n\tCodeIgniter是一个轻量级但功能强大的PHP框架是基于MVC设计模式.\n\n\t框架开发和二次开发\n\t\t打个比方:买房子\n\t\t买二手房,直接拎包入住 , 好比二次开发,如:dedecms,PHPCMS(内容管理系统),ECShop(开源免费的网上商店系统)\n\t\t买毛坯房,不能住人,自己去买各种装修材料,请人装修,才能入住.好比框架开发.只提供\n\t\t基础功能和项目结构.\n\n\t\tCI是框架,用于框架开发.\n\n\t目录结构说明:\n\t    license.txt许可协议\n\t    user_guide 用户手册(一般删除)\n\t    index.php 入口文件\n\t    system 框架核心代码,通常不动的.\n\t    application 应用目录\n\t\t|-- cache        缓存目录\n\t\t|-- config       配置文件目录\n\t\t|-- controllers  控制器文件夹\n\t\t|-- core         核心库扩展目录\n\t\t|-- errors       错误页面\n\t\t|-- helpers      自定义辅助函数文件夹\n\t\t|-- hooks        勾子文件夹\n\t\t|-- language     语言包\n\t\t|-- libraries    自定义库文件夹,通常是一些类文件\n\t\t|-- logs         日志\n\t\t|-- models       模型文件夹\n\t\t|-- third_party  第三方库目录,如smarty\n\t\t|-- views        视图文件夹\n\n# <a id=\"MVC\"></a>MVC \n\n\t1. 入口文件 \n\t\t唯一一个让浏览器直接请求的脚本文件\n\n\t2. 控制器 controller\n\t\t协调模型和视图\n\n\t3. 模型 model \n\t\t提供数据,保存数据,数据有效性认证\n\n\t4. 视图 view\n\t\t只负责显示,以及表单...\n\n\t5. 动作 action \n\t\t是控制器中方法,用户被浏览器直接请求\n\n\t访问url使用的是pathinfo //http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/welcome/test  test是welcome的一个方法\n\t\n\t入口文件.php/控制器/动作\n\n\tapplication 应用目录\n\t\tcontrollers 控制器\n\t\tmodels 模型\n\t\tviews 视图\n\n\t默认控制器是welcome\n\t默认动作是index \n\n## <a id=\"控制器-controllers\"></a>控制器-controllers\n\n\t1.不需要加后缀 , 直接是类名.php (自己编写的控制器需要UserController.php)\n\t2.文件名全部小写 \n\t3.所有的控制器,直接或者间接继承自 CI_Controller 类\n\t4.尽量不要使用Index名作为控制器类名,因为与方法index与类名相同的,会被PHP当作构造方法void __construct(){}\n\t5.控制器中, 动作(函数,方法)要求:\n\t\tpublic \n\t\t不能以_开头\n\t\t\n\t\t//不能被浏览器范围\n\t\tprotected function test() {\n\t\t\techo 'test';\n\t\t}\n\t\t\n\t\t//以下划线开头的方法,不能被浏览器请求\n\t\tpublic function _test1() {\n\t\t\techo 'test1';\n\t\t}\n\t\t\n\t\tpublic function test2(){\n\t\t\t$this->_test1();\n\t\t}\n\n## <a id=\"视图-views\"></a>视图-views \n\n\t\n\t1.在控制器中如果加载视图\n\t\t//直接写试图名字,不写扩展名,如果有子目录,则写上目录名\n\t\t$this->load->view ( 'user/index' ); //表示user目录下的index.php文件\n\t\t可以多次调用$this->load->view (视图); \n\n\t2.试图中,直接使用原生PHP代码\n\t3.推荐使用\n\t\t<?php foreach ($list as $item):?>\n\t\t<?=$item[\"email\"]?>\n\t\t<?php endforeach;?>\n\n\t\t<?php if(empty($carts)):?>\n\t\t<?php else:?>\n\t\t<?php endif;?>\n\n## <a id=\"模型-model\"></a>模型-model\n\t\n\t模型文件名全部使用小写,建议使用_model为后缀,防止与控制器类名冲突,但里面的类名首字母大写\n\t在模型中,可以直接使用超级对象中的属性\n\t\n\t\\application\\models\\user_model.php 模型\n\t\t<?php\n\t\t\tclass User_model extends CI_Model{//继承自 CI_Model\n\t\t\t\t//返回所有用户\n\t\t\t\tpublic function getAll(){\n\t\t\t\t\t$res = $this->db->get('user');//在模型中,可以直接使用超级对象中的属性\n\t\t\t\t\treturn $res;\n\t\t\t\t}\n\t\t\t}\n\t\\application\\controllers\\my_model_demo.php 控制器\n\t\t<?php\n\t\t\tclass My_model_demo extends CI_Controller {\n\t\t\t\t// http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/my_model_demo\n\t\t\t\tpublic function index() {\n\t\t\t\t\t// 加载模型,加载后将自动成为超级对象的属性\n\t\t\t\t\t// $this->load->model ( 'User_model' );\n\t\t\t\t\t$this->load->model ( 'User_model', 'user' ); // 起个别名\n\t\t\t\t\t\t\t\t\t\t     \n\t\t\t\t\t// 调用模型获取数据\n\t\t\t\t\t// $list = $this->User_model->getAll();\n\t\t\t\t\t$list = $this->user->getAll (); // 使用别名\n\n\t\t\t\t\t// 加载视图\n\t\t\t\t\t$this->load->view ( 'user/my_model_view_demo', array ('list' => $list ) );\n\t\t\t\t}\n\t\t\t}\n\t\\application\\views\\user\\my_model_view_demo.php 视图\n\t\t<!DOCTYPE html>\n\t\t<html>\n\t\t<head>\n\t\t\t<title>View</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<?php \n\t\t\t//CI它使用了一个 extract 函数,将数组变量导入到当前的符号表,所以直接使用键名作为变量来访问\n\t\t\t\tvar_dump( $list); \n\t\t\t?>\n\t\t</body>\n\t\t</html>\n\t\n\t建议使用这种这种MVC架构来编写代码,可维护性高一些.\n\n# <a id=\"CI的超级对象-(CI的控制器对象CI_Controller)\"></a>CI的超级对象-(CI的控制器对象CI_Controller)\n\t当前的控制器对象\n\t属性\n\t$this->load //  --> system/core/CI_Loader类装载器,类的加载,如视图,控制器等\n\t\t装载器类的实例system/core/CI_Loader.php\n\t\t装载器CI_Loader提供方法:\n\t\t\tview()\t装载视图\n\t\t\tvars()  分配变量到视图\n\t\t\tdatabase()  装载数据库操作对象\n\t\t\tmodel()  装载模型\n\t\t\thelper() 一些辅助函数\n\n\t$this->uri // 获取url参数等功能\n\t\t是CI_URI类的实例 --> system/core/CI_URI.php \n\t\tCI_URI类提供方法:\n\t\t\tsegment(n) 用于获取url中的第几个参数(值）\n\t\t\t传统的: 入口文件.php/控制器/动作/参数1/值1/参数2/值2\n\t\t\tCI的  : 入口文件.php/控制器/动作/值1/值2\n\t\t\t\n\t\t\techo $this->segment(3);//值1\n\t\t\techo $this->segment(4);//值2\n\n\t\t\t方式一: \n\t\t\t// 使用CI的pathinfo\n\t\t\t// http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/user/testURI/4\n\t\t\techo $this->uri->segment(3); // 获取URI第几段的参数 可取得4 , 从user开始计算1,2,3\n\t\t\t\n\t\t\t方式一: \n\t\t\t直接写在方法里面\n\t\t\thttp://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/user/testURI2/1/jack\n\t\t\tpublic function index($id = 0,$name=''){ //可以直接获取到id=1 ; name= jack ,如果id没有输入默认为0,默认name为空\n\t\t\t\techo $id;//1\n\t\t\t\techo $name; // jack\n\t\t\t}\n\n\t$this->input 获取用户输入信息 如,get put cookie等\n\t\t是CI_Input类的实例 --> system/core/CI_Input.php\n\t\tCI_Input类提供方法:\n\t\t\t$this->input->post('username');         //$_POST['username']\n\t\t\t$this->input->post('username',true);    //跨站脚本（XSS）过滤\n\t\t\t$this->input->server('DOCUMENT_ROOT');\t//$_SERVER['DOCUMENT_ROOT']\n\t\t\t$this->input->cookie();\n\t\t\t$this->input->server()\n\t\t\t...\n\n\t在视图(view)中,直接使用$this来访问超级对象中的属性\n\n\tCI支持控制器在子目录中.\n\t\t如果你在建立一个大型的应用程序，你会发现 CodeIgniter 可以很方便的将控制器放到一些子文件夹中。\n\n\t\t只要在 application/controllers 目录下创建文件夹并放入你的控制器就可以了。\n\n\t\t注意：  如果你要使用某个子文件夹下的功能，就要保证 URI 的第一个片段是用于描述这个文件夹的。例如说你有一个控制器在这里：\n\n\t\tapplication/controllers/products/shoes.php\n\n\t\t调用这个控制器的时候你的 URI 要这么写：\n\n\t\texample.com/index.php/products/shoes/show/123\n\t\t \n\t\t你的每个子文件夹中需要包含一个默认的控制器，这样如果 URI 中只有子文件夹而没有具体功能的时候它将被调用。\n\t\t只要将你作为默认的控制器名称在 application/config/routes.php 文件中指定就可以了。\n\n\t\tCodeIgniter 也允许你使用 URI 路由 功能来重新定向 URI。\n\n\n# <a id=\"数据库访问\"></a>数据库访问\n\n\t配置数据库文件\n\t\t可在 \\system\\database\\drivers\\目录下查看可被支持的数据库驱动\n\t\tapplication/config/database.php 数据库配置文件\n\t\t$db['default']= array(\t//'default'表示默认数据库,当一个项目需要连接多个数据库的时候,可以增加多一个$db['新数据库别名']= array(....\n\t\t\t'hostname' => 'localhost',\n\t\t\t'username' => 'root',\n\t\t\t'password' => 'root',\n\t\t\t'database' => 'test',\t//database数据库名\n\t\t\t'dbdriver' => 'mysql', //数据库驱动\n\t\t\t'dbprefix' => 'blog_', //表前缀 \n\t\t\t'swap_pre' => 'swap_', //表前缀 假设代码里面的都是使用swap_的前缀,而表是使用blog_前缀,则会自动替换成dbprefix的前缀,而无需修改源代码\n\t\t);\n\t\t\n\t\t表前缀\n\t\t\t'dbprefix' => 'blog_', \n\t\t\t'swap_pre' => 'blog_', \n\t\t\t配置为一样,代码中,直接硬编码表前缀就行了,如果以后项目数据库表前缀发生变化,\n\t\t\t只需要修改'dbprefix' => 'new_',  代码中的blog_会自动替换为new_\n\n\t\t/////数据库附件/////\n\n\t将数据库访问对象,装载到超级对象的属性中 $this->db\n\t\t方式一(PHP代码手动加载): \n\t\t\t// 装载一个数据库操作类\n\t\t\t$this->load->database();//表示连接默认数据库\n\t\t\t//一个项目多个数据库时,表示连接其它数据库,配置文件\\application\\config\\database.php中配置相对应别名\n\t\t\t//$this->load->database('新数据库别名');\n\t\t方式二(配置文件,自动加载):\n\t\t\t//因为每次使用数据库的时候都需要装载数据库操作类,所以在配置文件\\application\\config\\autoload.php中配\n\t\t\t//置Auto-load Libraries 自动加载项,以后就可以不再需要手动加载,但对于多个数据库的还是需要指定数据库.\n\t\t\t//$autoload['libraries'] = array('database');//自动加载配置\n\t\t\t//$this->load->database();//以后编写都不需要这行代码.\n\t\t\n\t\t使用: \n\t\t\t//装载成功后,会放入超级对象的属性中, 默认属性名是db\n\t\t\t// var_dump($this->db);//$this->db 返回的是 CI_DB_mysql_driver 对象 继承自 CI_DB\n\t\t\t\n\t\tCI_DB_mysql_driver 对象 --> \\system\\database\\drivers\\mysql\\mysql_driver.php  \n\n\t$this->db->query()方法 增删改查\n\t\t查询数据 返回的是一个对象\n\t\t\t$sql = 'select * from blog_user';\n\t\t\t// 返回的是CI_DB_mysql_result 对象 - mysql_query()\n\t\t\t$res = $this->db->query ( $sql ); //返回的是 CI_DB_mysql_result 对象 继承自 CI_DB_result\n\t\t\t$res->result();//返回数组,数组中是一个一个的对象\n\t\t\t$res->result_array();//返回二维数组,里面是关联数组\n\t\t\t$res->row();//返回第一条数据,直接是一个对象\n\t\t\t\n\t\t\t//帮助文档中--> 数据库类-->查询-->query \n\t\t\t//帮助文档中--> 数据库类-->生成查询结果集--> result_array() 等等的一些方法. 调用方法就如上所示\n\t\t\t//以上可取得如下php原生函数类似的结果\n\t\t\t//mysql_fetch_assoc()//关联数组 //http://www.w3school.com.cn/php/func_mysql_fetch_assoc.asp\n\t\t\t//mysql_fetch_object()//返回对象 //http://www.w3school.com.cn/php/func_mysql_fetch_object.asp\n\n\t\t\tCI_DB_mysql_result 对象 --> \\system\\database\\drivers\\mysql\\mysql_result.php\n\t\t\t\n\t\t增删改数据 返回一个 boolean 布尔值\n\t\n\t\t\t// 插入数据\n\t\t\t// $name=$this->input->post('name');//假如获取用户post过来的数据.\n\t\t\t// $name = 'lili';\n\t\t\t// $pass = 'lili';\n\t\t\t\n\t\t\t// $data [0] = $name;\n\t\t\t// $data [1] = $pass;\n\t\t\t////参数绑定:\n\t\t\t// $sql = \"insert into blog_user (name,password) values (?,me5(?))\";\n\t\t\t// $bool = $this->db->query ( $sql, $data );//多个问号?参数时,需要传入一个索引数组\n\t\t\t\n\t\t\t// 删除数据\n\t\t\t// $sql = \"delete from blog_user where id=?\";\n\t\t\t// $bool = $this->db->query ( $sql, 2 );\n\t\t\t\n\t\t\t// 修改数据\n\t\t\t$data [0] = 'mary@gmail.com';\n\t\t\t$data [1] = 3;\n\t\t\t$sql = \"update blog_user set email = ? where id=? \";\n\t\t\t$bool = $this->db->query ( $sql, $data );\n\t\t\t\n\t\t\tif ($bool) {\n\t\t\t\t// mysql_affected_rows\n\t\t\t\techo '受影响行数:' . $this->db->affected_rows ();\n\t\t\t\techo '自增ID:' . $this->db->insert_id ();\n\t\t\t}\n\t\t使用CI的db增加改查都是使用$this->db->query()来进行处理.\n\n# <a id=\"AR模型操作数据库\"></a>AR模型操作数据库 active_record (CI3.0之后改名 query_builder QB模型)\n\t\n\t配置\n\t\t\\application\\config\\database.php 配置开启AR/QB模型(默认TRUE)\n\t\t\t$active_record = TRUE; 配置为TRUE表示开启这项功能. (AR模型_2.2.0)\n\t\t\t$query_builder = TRUE; 配置为TRUE表示开启这项功能. (QB模型_3.0.0)\n\n\t\t\t\\system\\database\\DB_active_rec.php (为AR模型原代码_2.2.0)\n\t\t\t\\system\\database\\DB_query_builder.php (为QB模型的原代码_2.2.0)\n\n\t\t\\application\\config\\autoload.php 配置自动加载\n\t\t\t$autoload['libraries'] = array('database');\n\t\n\t使用增删改查\n\t\t在配置文件中,配置表前缀后,会自动添加前缀.\n\t\t\n\t\t插入:\n\t\t\t$bool = $this->db->insert('表名',关联数组);\n\n\t\t\t//TODO 通过AR/QB模型增加数据内容 insert 增加\n\t\t\t$data  = array(\n\t\t\t\t'name'=>'lili',\n\t\t\t\t'password'=>md5('lili')\t\t\t\n\t\t\t);\n\t\t\tconst TBL = 'user';//表名,常量\n\t\t\t$bool = $this->db->insert(self::TBL,$data);\n\t\t\tvar_dump($bool);\n\t\t\techo '<hr>';\n\n\t\t更新:\n\t\t\t$bool = $this->db->update('表名',关联数组,条件);\n\n\t\t\t//TODO 通过AR/QB模型更新数据 update 更新\n\t\t\t$data = array(\n\t\t\t\t\t'email'=>'lili@gmail.com',\n\t\t\t\t\t'password'=>md5('123456'),\n\t\t\t);\n\t\t\t$bool =$this->db->update('user',$data,array('id'=>4));\n\t\t\tvar_dump($bool);\n\n\t\t删除:\n\t\t\t$bool = $this->db->delete('表名',条件);\n\t\t\t\n\t\t\t//TODO 通过AR/QB模型删除数据 delete 删除\n\t\t\t$bool = $this->db->delete('user',array('id'=>4));\n\t\t\tvar_dump($bool);\n\t\t\n\t\t查询:\n\t\t\t$res = $this->db->get('表名',['条件']);//返回结果集对象. '表名'会自动增加为'blog_表名'\n\t\t\t$res->result();//结合返回获取数据\n\n\t\t\t//TODO 通过AR/QB模型获取数据表内容-查询\n\t\t\t$res = $this->db->get ( 'user' );//AR模型可以自动处理表前缀.并直接获取bolg_user表的数据\n\t\t\t\n\t\t\tvar_dump($res);\n\t\t\techo '<hr>';\n\t\t\tforeach ($res->result() as $item){\n\t\t\t\techo $item->name;\n\t\t\t\techo '  ';\n\t\t\t\techo $item->password;\n\t\t\t\techo '  ';\n\t\t\t\techo $item->email;\n\t\t\t\techo '<br>';\n\t\t\t}\n\n\t\t连贯查询\n\t\t\t//TODO 连贯查询\n\t\t\t//SELECT `id`, `name` FROM `blog_user` WHERE `id` >= 3 ORDER BY `id` desc LIMIT 2, 3\n\t\t\t$res = $this->db->select('id,name')//\n\t\t\t->from('user')//表名\n\t\t\t->where('id >=' , 3)//'id >=' 符号前面需要一个空格,如果符号不写默认'='等于\n\t\t\t->limit(3,2)//跳过2条,取后3条数据\n\t\t\t->order_by('id desc')//通过id倒序\n\t\t\t->get();//获取数据\n\t\t\t\n\t\t\tvar_dump($res->result());\n\t\t\techo '<br>';\n\t\t\techo $this->db->last_query();//显示最后一条执行的SQL语句\n\t\t\t//SELECT `id`, `name` FROM `blog_user` WHERE `id` >= 3 ORDER BY `id` desc LIMIT 2, 3\n\t\t\n\t\t\t更多where查询条件 \n\t\t\t\t//SELECT * FROM `blog_user` WHERE `name` = 'mary'\n\t\t\t\t$res = $this->db->where('name','mary')->get ('user');\n\t\t\t\t//SELECT * FROM `blog_user` WHERE `name` != 'mary'\n\t\t\t\t$res = $this->db->where('name !=','mary')->get ('user');\n\t\t\t\t//SELECT * FROM `blog_user` WHERE `name` = 'mary'\n\t\t\t\t$res = $this->db->where(array('name'=>'mary'))->get ('user');\n\t\t\t\t//SELECT * FROM `blog_user` WHERE `name` = 'mary' AND `id` > 3\n\t\t\t\t$res = $this->db->where(array('name'=>'mary','id >'=>3))->get ('user');\n\t\t\t\techo $this->db->last_query();\n\n\t\t\t\t复杂的查询,则建议用$this->db->query($sql,$data);//使用问题?绑定参数的方式查询\n\n# <a id=\"CI类库扩展\"></a>CI类库扩展\n\t\n\t在system目录下的是CI框架的核心文件.如果需要进行扩展,只需要在对应的application目录下对应着system目录下的文件编写对应的类,即可扩展.\n\t例如: application 目录下有core helpers language libraries 目录均于system目录下的文件夹相一一对应.\n\n\t子类名前缀\n\t\t\\application\\config\\config.php 子类名前缀\n\t\t$config['subclass_prefix'] = 'MY_';\n\t\t\n\t例如:扩展控制器\n\t\t在application/core/MY_Controller.php 创建自定义的类继承自application/core/Controller.php  (CI_Controller 类名与文件名不同)\n\n\t\t<?php\n\t\t\tclass MY_Controller extends CI_Controller{\n\t\t\t\t//构造方法\n\t\t\t\tpublic function __construct(){\n\t\t\t\t\tparent::__construct();//调用父类的构造方法\n\t\t\t\t\techo 'aaaaaaaaaaaaa';\n\t\t\t\t\t//登录验证\n\t\t\t\t\t//权限验证...等等\n\t\t\t\t}\n\t\t\t}\n\t\t然后在application/controllers/目录下的控制器中使用继承自My_Controller的类即可使用,自定义的控制器.\n\t其它类库均类似的扩展.\n\t\n<a id=\"扩展控制器CI_Controller-装载器Loader\"></a>案例:为网站设计不同的主题.前台,后台(扩展控制器CI_Controller,装载器Loader)\n\t\t\n\t\t第一步，指定不同的视图View路径 . 在网站根目录下创建 themes 文件夹和 里面再创建default目录\n\t\t第二步，定义一个常量，在config/costants.php,如下\n\t\t\t在application/config/constants.php 常量配置文件中配置常量.\n\t\t\t#自定义系统相当常量 (主题目录)\n\t\t\tdefine('THEMES_DIR','themes/'); //指明视图路径地址.\n\t\t\t\n\t\t第三步，扩展CI类\n\t\t\t视图的加载由loader类完成，(\\system\\core\\Loader.php)如下\n\t\t\t\n\t\t\t\tCI 2.2.0\n\t\t\t\t\tpublic function __construct()\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->_ci_ob_level  = ob_get_level();\n\t\t\t\t\t\t$this->_ci_library_paths = array(APPPATH, BASEPATH);\n\t\t\t\t\t\t$this->_ci_helper_paths = array(APPPATH, BASEPATH);\n\t\t\t\t\t\t$this->_ci_model_paths = array(APPPATH);\n\t\t\t\t\t\t$this->_ci_view_paths = array(APPPATH.'views/'\t=> TRUE);\n\t\t\t\t\t}\n\t\t\t\tCI 3.0.0\n\t\t\t\t\tprotected $_ci_view_paths = array(VIEWPATH => TRUE);\n\t\t\t\n\t\t\t扩展 Loader 类 (\\application\\core\\MY_Loader.php)\n\t\t\t\t<?PHP\n\t\t\t\t\tdefined('BASEPATH') OR exit('No direct script access allowed');\n\n\t\t\t\t\tclass MY_Loader extends CI_Loader{\n\t\t\t\t\t\t//被开启的主题目录\n\t\t\t\t\t\tprotected $_theme = 'default/';\n\n\t\t\t\t\t\tpublic function switch_themes_on(){\n\t\t\t\t\t\t\t$this->_ci_view_paths = array(FCPATH,THEMES_DIR,$this->_theme => TRUE);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpublic function switch_themes_off(){\n\t\t\t\t\t\t\t#just do nothing\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t扩展控制器\n\t\t\t\t<?PHP\n\t\t\t\t\tdefined('BASEPATH') OR exit('No direct script access allowed');\n\n\t\t\t\t\t//前台控制器\n\t\t\t\t\tclass HomeController extends CI_Controller{\n\t\t\t\t\t\tpublic function __construct(){\n\t\t\t\t\t\t\tparent::__construct();\n\t\t\t\t\t\t\t#开启皮肤功能\n\t\t\t\t\t\t\t$this->load->switch_themes_on();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//后台控制器\n\t\t\t\t\tclass AdminController extends CI_Controller{\n\t\t\t\t\t\tpublic function __construct(){\n\t\t\t\t\t\t\tparent::__construct();\n\t\t\t\t\t\t\t#关闭皮肤功能\n\t\t\t\t\t\t\t$this->load->switch_themes_off();\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\n\t\t第四步: 编写不同的控制器\n\t\t\tapplication/controllers 下编写前台控制器 并继承 HomeController \n\t\t\tapplication/controllers/admin 编写后台控制器 并继承 AdminController\n\n\n\t\t第五步: 编写不同的视图文件.\n\t\t\t themes/default/ 目录下编写前台视图View \n\t\t\t application/views 目录下编写后台试图View\n\n\t\t而模型 model 是共用的.\t\n\n案例:[扩展CI的captcha_helper.php实现_验证码](#扩展CI的captcha_helper.php实现_验证码)\t\t\n\n\n# <a id=\"url相关函数\"></a>url相关函数\n\t\n\thttp://codeigniter.org.cn/user_guide/helpers/url_helper.html\n\n\t//加载url帮助类 //默认在辅助函数/URL辅助函数中,默认不加载.\n\t$this->load->helper('url');//使用前需要加载标准类,或者配置自动加载\n\t\t\\application\\config\\autoload.php 文件中配置\n\t\t$autoload['helper'] = array('url');\n\n\tbase_url();//返回网站根目录 application\\config\\config.php中: $config['base_url']=''; 中配置的目录\n\t//http://127.0.0.1:8000/CodeIgniter-3.0.0\n\n\tsite_url('控制器/方法') //返回 base_url/index_page/控制器/方法 ($config['index_page'] = 'index.php';)\n\t//如 http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php\n\t\n\t案例:\n\t\\application\\controllers\\url_demo_controllers.php\n\t<?php\n\t\tclass Url_demo_controllers extends CI_Controller{\n\t\t\t//http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/Url_demo_controllers\n\t\t\tpublic function index(){\n\t\t\t\t//加载url帮助类\n\t\t\t\t$this->load->helper('url');\n\t\t\t\t$this->load->view('user/url_demo');\n\t\t\t}\n\t\t\t\n\t\t\tpublic function insert(){\n\t\t\t\tvar_dump($this->input->post('name'));\n\t\t\t}\n\t\t}\n\n\t\\application\\views\\user\\url_demo.php \n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t\t<title>403 Forbidden</title>\n\t</head>\n\t<body>\n\n\t<!-- <form action=\"/CodeIgniter-3.0.0/index.php/Url_demo_controllers/insert\" method=\"post\"> -->\n\t<form action=\"<?php echo site_url('Url_demo_controllers/insert');?>\" method=\"post\">\n\t\tname<input type=\"text\" name=\"name\" /><br>\n\t\tpassword<input type=\"password\" name=\"password\" /><br>\n\t\temail<input type=\"text\" name=\"email\" /><br>\n\t\t<button type=\"submit\">submit</button>\n\t</form>\n\t\t\n\t<!-- \t<img alt=\"\" src=\"/CodeIgniter-3.0.0/uploads/logo.jpg\"/> -->\n\t\t<img alt=\"\" src=\"<?php echo base_url();?>uploads/logo.jpg\" width=\"100\"/>\n\t</body>\n\t</html>\n\n# <a id=\"设置路由\"></a>设置路由\n\t\n\t路由配置文件\n\t\tapplication/config/routes.php\n\t\n\t默认控制器 配置\n\t\t$route['default_controller'] = 'welcome';\n\t\n\t实现伪静态\n\t\t$route['news/[\\d]{6}/([\\d]+)/([^\\s]+)']='routes_demo/showTwice/$1/$2';\n\t\t//URL中的地址=对应的控制器/方法/参数 --  第一个() 对应$1 以此类推\n\t\t\n\t\t案例: \n\n\t\t<?php\n\t\t\tclass Routes_demo extends CI_Controller {\n\t\t\t\t// http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/routes_demo\n\t\t\t\tpublic function index() {\n\t\t\t\t\techo 'routes_demo index ';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// 路由配置目录 application/config/routes.php\n\t\t\t\t\n\t\t\t\t// 原地址: http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/routes_demo/show/2\n\t\t\t\t// 路由映射地址:\n\t\t\t\t// http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/news/2.html\n\t\t\t\t// 路由配置: $route['news/([\\d]+)\\.html']='routes_demo/show/$1';\n\t\t\t\t// http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/news/201515/2.html\n\t\t\t\t// 路由配置: $route['news/[\\d]{6}/([\\d]+)\\.html']='routes_demo/show/$1';\n\t\t\t\tpublic function show($id = 0) {\n\t\t\t\t\techo '这是文章' . $id;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// 原地址:\n\t\t\t\t// http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/routes_demo/showTwice/4/.jpg\n\t\t\t\t// 路由映射地址:\n\t\t\t\t// http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/news/201501/4/.jpg\n\t\t\t\t// 路由配置: $route['news/[\\d]{6}/([\\d]+)/([^\\s]+)']='routes_demo/showTwice/$1/$2';\n\t\t\t\tpublic function showTwice($id = 0, $res = '') {\n\t\t\t\t\techo '这是文章' . $id . $res;\n\t\t\t\t}\n\t\t\t}\n\n# <a id=\"隐藏入口文件-index.php\"></a>隐藏入口文件-index.php\n\t\n\t如原地址为:\n\t\thttp://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/routes_demo\n\t隐藏入口文件后只需要把地址写成即可:\n\t\thttp://127.0.0.1:8000/CodeIgniter-3.0.0/routes_demo\n\n\t1.需要开启Apache的 rewrite 功能 Apache2.2\\conf\\httpd.conf 修改如下: \n\t\t修改前:\n\t\t\t#LoadModule rewrite_module modules/mod_rewrite.so\n\t\t\t\n\t\t\t...\n\t\t\t# AllowOverride controls what directives may be placed in .htaccess files.\n\t\t\t# It can be \"All\", \"None\", or any combination of the keywords:\n\t\t\t#   Options FileInfo AuthConfig Limit\n\n\t\t\tAllowOverride None\n\t\t\t...\n\n\t\t修改成:\n\t\t\t# 搜索 mod_rewrite 与 .htaccess 关键字来进行查询修改项\n\t\t\tLoadModule rewrite_module modules/mod_rewrite.so\n\t\t\t\n\t\t\t<Directory \"E:/ComTu_Design/PHP/Apache2.2/htdocs\">\n\t\t\t\tOptions Indexes FollowSymLinks\n\t\t\t\t# AllowOverride controls what directives may be placed in .htaccess files.\n\t\t\t\t# It can be \"All\", \"None\", or any combination of the keywords:\n\t\t\t\t#   Options FileInfo AuthConfig Limit\n\n\t\t\t\tAllowOverride all\n\t\t\t\tOrder allow,deny\n\t\t\t\tAllow from all\n\t\t\t</Directory>\n\n\t\t重启Apache.\n\n\t2.在入口文件同级目录(system/application同级目录)中,放入一个.htaccess 内容如下:\n\t\t(技巧如果自己编写创建一个点.开头的文件可以使用记事本另存为的方式输入双引号\".htaccess\"保存即可)\n\t\t<IfModule mod_rewrite.c>\n\t\t\tRewriteEngine on\n\t\t\tRewriteCond %{REQUEST_FILENAME} !-d\n\t\t\tRewriteCond %{REQUEST_FILENAME} !-f\n\t\t\tRewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]\n\t\t</IfModule>\n\t\n\t3.配置索引页 \\application\\config\\config.php \n\t\t原: \n\t\t\t$config['index_page'] = 'index.php';\n\t\t修改成: \n\t\t\t$config['index_page'] = '';\n\n# <a id=\"分页\"></a>分页\n\thttp://codeigniter.org.cn/user_guide/libraries/pagination.html\n\t直接见源代码:\n\t\n\t\\application\\controllers\\paging_demo.php\n\t<?php\n\t\tclass Paging_demo extends CI_Controller {\n\t\t\tpublic function index() {\n\t\t\t}\n\t\t\t//http://127.0.0.1:8000/CodeIgniter-3.0.0/paging_demo/paging\n\t\t\tpublic function paging() {\n\t\t\t\t// 装载类文件\n\t\t\t\t$this->load->library ( 'pagination' );\n\t\t\t\t// 每页显示10条数据\n\t\t\t\t$page_size = 10;\n\t\t\t\t\n\t\t\t\t$this->load->helper('url');\n\t\t\t\t//配置页面\n\t\t\t\t$config ['base_url'] = site_url('paging_demo/paging');\n\t\t\t\t//一共有多少条数据\n\t\t\t\t$config ['total_rows'] = '200';\n\t\t\t\t//每页显示条数\n\t\t\t\t$config ['per_page'] = $page_size;\n\t\t\t\t\n\t\t\t\t//分页的数据查询偏移量在哪一段上\n\t\t\t\t$config['uri_seqment'] = 3;\n\t\t\t\t\n\t\t\t\t$config['first_link'] = '首页';\n\t\t\t\t$config['next_link'] = '下一页';\n\t\t\t\t$config['last_link'] = '最后一页';\n\t\t\t\t\n\t\t\t\t$this->pagination->initialize ( $config );\n\t\t\t\t\n\t\t\t\t//http://127.0.0.1:8000/CodeIgniter-3.0.0/paging_demo/paging/190\n\t\t\t\t//获取链接地址第三段的参数190 与配置$config['uri_seqment']相对应\n\t\t\t\t$offset = intval($this->uri->segment(3));//intval函数获取数字,无则返回0\n\t\t\t\t\n\t\t\t\t//拼接Sql查询语句\n\t\t\t\t$sql = \"select * from blog_user limit $offset , $page_size\";\n\t\t\t\techo $sql.'<br>';\n\t\t\t\t\n\t\t\t\t//生成链接\n\t\t\t\t$data['links']=$this->pagination->create_links ();\n\t\t\t\t//在页面中显示\n\t\t\t\t$this->load->view('user/paging_view',$data);\n\t\t\t}\n\t\t}\n\n\t\t\\application\\views\\user\\paging_view.php\n\t\t<!DOCTYPE html>\n\t\t<html>\n\t\t<head>\n\t\t\t<meta charset=\"utf-8\">\n\t\t\t<title>分页</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<?=$links ?>\n\t\t</body>\n\t\t</html>\n\n<a id=\"扩展_修改分页生成的代码\"></a>扩展_修改分页生成的代码\n\n\t\t拷贝system/libraries/Pagination.php 到 application/libraries/目录 直接修改如下:\n\t\t\t这样做之后CI会自动查找到application/libraries/Pagination.php 做为分页类.\n\t\tCI 3.0.0\n\t\t\t//Generate the pagination links\n\t\t\tpublic function create_links(){//398行\n\t\t\t\t//省略很多代码.\n\t\t\t\t//原: //650行\n\t\t\t\t//return $this->full_tag_open.$output.$this->full_tag_close;\n\n\t\t\t\t//修改如下: 自定义内容 当然,发挥自己的想象去修改\n\t\t\t\t$baseinfo = \"总共 $this->total_rows 条记录，每页显示 $this->per_page 条，\n\t\t\t\t总计 $num_pages 页，当前是第  $this->cur_page 页\".'&nbsp;&nbsp;&nbsp;';\n\t\t\t\treturn $baseinfo.$this->full_tag_open.$output.$this->full_tag_close;\n\t\t\t}\n\t\tCI 2.2.0\n\t\t\tfunction create_links(){//115行\n\t\t\t\t//省略很多代码.\n\t\t\t\t// Add the wrapper HTML if exists //331行\n\t\t\t\t//$output = $this->full_tag_open.$output.$this->full_tag_close;\n\t\t\t\t//return $output;\n\n\t\t\t\t//修改如下: 自定义内容 当然,发挥自己的想象去修改\n\t\t\t\t$baseinfo = \"总共 $this->total_rows 条记录，每页显示 $this->per_page 条，\n\t\t\t\t总计 $num_pages 页，当前是第  $this->cur_page 页\".'&nbsp;&nbsp;&nbsp;';\n\t\t\t\treturn $baseinfo.$output;\n\t\t\t}\n\n\n# <a id=\"文件上传\"></a>文件上传\n\thttp://codeigniter.org.cn/user_guide/libraries/file_uploading.html\n\t\n\t案例见代码: \n\t\\application\\controllers\\upload_demo.php\n\t<?php\n\tclass Upload_demo extends CI_Controller {\n\t\tpublic function index() {\n\t\t}\n\t\t\n\t\t// http://127.0.0.1:8000/CodeIgniter-3.0.0/upload_demo/file\n\t\tpublic function file() {\n\t\t\t$data ['error'] = '';\n\t\t\t$data ['upload_data'] = '';\n\t\t\t\n\t\t\t$this->load->helper ( 'url' );\n\t\t\t$this->load->view ( 'user/upload_view_demo', $data );\n\t\t}\n\t\tpublic function upload() {\n\t\t\t// 上传目录需要手动创建\n\t\t\t$config ['upload_path'] = './uploads/';\n\t\t\t$config ['allowed_types'] = 'gif|jpg|png';\n\t\t\t$config ['max_size'] = 100;//kb\n\t\t\t$config ['max_width'] = 1024;\n\t\t\t$config ['max_height'] = 768;\n\t\t\t// 上传后的文件名/不设置则默认原文件名,如果文件名冲突,则会在文件名中加入递增数字\n\t\t\t//$config ['file_name'] = uniqid (); \n\t\t\t\n\t\t\t$this->load->library ( 'upload', $config );\n\t\t\t\n\t\t\t$this->upload->do_upload ( 'pic' );//上传的input name\n\t\t\t$this->upload->do_upload ( 'pic2' );//上传的input name\n\t\t\t\n\t\t\t$data = array (\n\t\t\t\t\t'upload_data' => $this->upload->data () ,//上传成功\n\t\t\t\t\t'error' => $this->upload->display_errors ()//错误信息\n\t\t\t);\n\t\t\t$this->load->view ( 'user/upload_view_demo', $data );\n\t\t}\n\t}\n\n\t\\application\\views\\user\\upload_view_demo.php\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>文件上传</title>\n\t</head>\n\t<body>\n\t\t<?php \n\t\tif($error){\techo $error;}\n\t\t?>\n\n\t\t<form action=\"<?php echo site_url('upload_demo/upload')?>\" method=\"post\" enctype=\"multipart/form-data\">\n\t\t\t<input type=\"file\" name=\"pic\" /></br>\n\t\t\t<input type=\"file\" name=\"pic2\" /></br>\n\t\t\t<input type=\"submit\" name=\"上传\" />\n\t\t</form>\n\t\t\n\t\t<?php if ($upload_data):?>\n\t\t\t<?php foreach ($upload_data as $item => $value):?>\n\t\t\t\t<li><?php echo $item;?>: <?php echo $value;?></li>\n\t\t\t<?php endforeach; ?>\n\t\t<?php endif ?>\n\t</body>\n\t</html>\n\n\n# <a id=\"图片处理类\"></a>图片处理类\n\n\t$config['image_library'] = 'gd2';\n\t$config['source_image'] = '/path/to/image/mypic.jpg';\n\t$config['create_thumb'] = TRUE;\n\t$config['maintain_ratio'] = TRUE;\n\t$config['width'] = 75;\n\t$config['height'] = 50;\n\n\t$this->load->library('image_lib', $config); \n\n\t$this->image_lib->resize();  //创建缩略图  \n\t// $this->image_lib->crop() //图像裁剪\n\t// $this->image_lib->rotate() //图像旋转 \n\t// $this->image_lib->watermark() //添加图像水印\n\t// $this->image_lib->clear()  //clear函数重置所有之前用于处理图片的值。当你用循环来处理一批图片时，你可能会想使用它。\n\t\n\t//处理不同的图片有不同的配置,详情见文档\n\thttp://codeigniter.org.cn/user_guide/libraries/image_lib.html\n\n\n\t//获取相应属性\n\t$this->image_lib->thumb_marker; \n\t//错误信息\n\t$this->image_lib->display_errors();\n\n\n# <a id=\"Session\"></a>Session\n\thttp://codeigniter.org.cn/user_guide/libraries/sessions.html\n\tSession 类将每个用户的 session 信息序列化（serialize）后存储到到 cookie 中（并同时进行加密）。\n\t\n\tci的Session是存储到cookie中.PHP原生的session是放到服务器中.\n\t所以需要加密.可查看值,但不能修改.因为提交时会通过密钥校验数据完整性.\n\t\n\t配置 \\application\\config\\config.php\n\t\t\n\t\t配置Session加密(CI2.2可配置,CI3.0.0抛弃了此功能):\n\t\t\t原:\n\t\t\t\t$config['sess_encrypt_cookie']\t= FALSE;\n\t\t\t修改为:\n\t\t\t\t$config['sess_encrypt_cookie']\t= TRUE;\n\n\t\t配置Session关闭浏览器后失效(CI2.2可配置,CI3.0.0无此配置项):\n\t\t\t原:\n\t\t\t\t$config['sess_expire_on_close'] = FALSE;\n\t\t\t修改为:\n\t\t\t\t$config['sess_expire_on_close'] = TRUE;\n\t\t\t\n\t\t\tCI3.0.0 需要如下实现(关闭浏览器销毁session,不关闭或者不退出,则一直有效):\n\t\t\t\t$config['sess_expiration'] = 0; \n\n\t\t配置Session密钥:\n\t\t\t\n\t\t\t原:\n\t\t\t\t$config['encryption_key'] = '';\n\t\t\t修改密钥(可用echo md5(uniqid());生成一个值当密钥):\n\t\t\t\t$config['encryption_key'] = '05c072360c5ac7e19d5b2566a995991c';\n\t\t\n\t\t配置Session文件路径:\n\n\t\t\tCI3.0.0版本需要配置此项,不然会出现 Message: mkdir() [function.mkdir]: Invalid argument 异常\n\t\t\tCI3.0.0之前版本可以不要设置.(CodeIgniter_2.2.0测试查看,无此参数)\n\t\t\t\n\t\t\t原:\n\t\t\t\t$config['sess_save_path'] = NULL;\n\t\t\t新session路径(注意~~些路径需要要使用绝对路径)\n\t\t\t\t创建目录用于存储Session:E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\CodeIgniter-3.0.0\\application\\session\n\t\t\t\t$config['sess_save_path'] = 'E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\CodeIgniter-3.0.0\\application\\session';\n\t\t\t\n\t\t\t可查看 sess_save_path 配置相关文档\n\t\t\t\thttp://codeigniter.org.cn/user_guide/libraries/sessions.html\n\t\t\t\thttp://php.net/manual/en/session.configuration.php#ini.session.save-path\n\t\t\n\t\t//加载模块\n\t\t$this->load->library('session');\n\t\t//存储session\n\t\t$user = $this->session->set_userdata ( 'user', $user );\n\t\t//取session\n\t\t$user = $this->session->userdata('user');\n\t\t//删除session\n\t\t$this->session->unset_userdata('user');\n\t\t$this->session->unset_userdata($array_items);//删除多个session\n\n\nCi的Session实现案例:\n\n\t\t案例见代码: \n\t\t<?php\n\t\tclass Session_demo extends CI_Controller {\n\t\t\tpublic function index(){}\n\t\t\t\n\t\t\tpublic function __construct(){\n\t\t\t\tparent::__construct();\n\t\t\t\t$this->load->library('session');\n\t\t\t}\n\t\t\t\n\t\t\t// 先存储session \n\t\t\t// http://127.0.0.1:8000/CodeIgniter-3.0.0/session_demo/set_session\n\t\t\t// 在取出sesson(刷新演示一次性的数据)\n\t\t\t// http://127.0.0.1:8000/CodeIgniter-3.0.0/session_demo/show_session\n\t\t\tpublic function set_session() {\n\t\t\t\t//echo md5(uniqid());exit;\n\t\t\t\t\n\t\t\t\t$user = array('id'=>3,'name'=>'jack');\n\t\t\t\t\n\t\t\t\t// 相当于原生的:\n\t\t\t\t// session_start();\n\t\t\t\t// $_SESSION[\"user\"] = $user;\n\t\t\t\t\n\t\t\t\t$user = $this->session->set_userdata ( 'user', $user );\n\t\t\t\tvar_dump($user);//取出来NULL\n\t\t\t\techo '<br>';\n\t\t\t\t\n\t\t\t\t//取session\n\t\t\t\t$user = $this->session->userdata('user');\n\t\t\t\tvar_dump($user);\n\t\t\t\t\n\t\t\t\t//一次性的数据,只能读一次\n\t\t\t\t$this->session->set_flashdata('test','testdate-aaaaaaaaaaaa');\n\t\t\t}\n\t\t\t\n\t\t\t//http://127.0.0.1:8000/CodeIgniter-3.0.0/session_demo/show_session\n\t\t\tpublic function show_session(){\n\t\t\t\t//获取CI session中的数据\n\t\t\t\t$user = $this->session->userdata('user');\n\t\t\t\tvar_dump($user);\n\t\t\t\t\n\t\t\t\t//只可以取一次,取完后就会被删除.\n\t\t\t\t$test=$this->session->flashdata('test');\n\t\t\t\tvar_dump($test);\n\t\t\t}\n\n\t\t\tpublic function delete_session(){\n\t\t\t\t//删除单个session\n\t\t\t\t$this->session->unset_userdata('user');\n\n\t\t\t\t// //删除多个session\n\t\t\t\t// $array_items = array('user', 'test');\n\t\t\t\t// $this->session->unset_userdata($array_items);\n\t\t\t}\n\n\t\t\tpublic function originalPHPsession(){\n\t\t\t\t// 原生session\n\t\t\t\tsession_start();\n\t\t\t\t//存储验证码信息到PHP原生的session中.\n\t\t\t\t$_SESSION[\"cap\"] = 'abc';\n\t\t\t\t\n\t\t\t\t//获取Session\n\t\t\t\t$word = $_SESSION['cap'];\n\t\t\t\techo $word;\n\t\t\t\t\n\t\t\t\t//终结 Session\n\t\t\t\tunset($_SESSION['cap']);\n\t\t\t\t//重置session  , 失去所有已存储的 session 数据。\n\t\t\t\t//session_destroy();\n\t\t\t}\n\t\t}\n\t\t\n# <a id=\"验证码\"></a>验证码\n\tci的验证码会创建一个图片文件,所以需要创建文件夹用来存放\n\t\tE:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\CodeIgniter-3.0.0\\captcha\n\n\t使用CI验证码需要开启PHP的 GD 图像库\n\t\t可用PHP代码检测是否开启GD图像库\n\t\t\tif(extension_loaded('gd')){\n\t\t\t\techo '你可以使用gd<br>';\n\t\t\t\tforeach (gd_info() as $cate=>$value)\n\t\t\t\t\techo \"$cate: $value<br>\";\n\t\t\t}else echo '没有安装gd扩展';\n\n\t\t开启 GD 图像库 方法:\n\t\t\tE:\\ComTu_Design\\PHP\\php-5.3.5\\php.ini 配置文件修改如下:\n\t\t\t原: \n\t\t\t\t;extension=php_gd2.dll\n\t\t\t修改成(去除前面的;分号): \n\t\t\t\textension=php_gd2.dll\n\t\t\t修改完后保存,重启apache\n\nCI默认实现:\n\n\t\t//加载模块\n\t\t$this->load->helper('captcha');\n\t\t//创建验证码\n\t\t$cap = create_captcha($vals);\n\t\t//显示验证码\n\t\techo $cap['image'];\n\n\t\t案例见代码: \n\t\t<?php\n\t\tclass Captcha_demo extends CI_Controller{\n\t\t\tpublic function index(){}\n\t\t\t\n\t\t\tpublic function test(){\n\t\t\t\techo 'captcha_demo';\n\t\t\t\t   \n\t\t\t\tif(extension_loaded('gd')){\n\t\t\t\t\techo '你可以使用gd<br>';\n\t\t\t\t\tforeach (gd_info() as $cate=>$value)\n\t\t\t\t\t\techo \"$cate: $value<br>\";\n\t\t\t\t}else echo '没有安装gd扩展';\n\t\t\t\t\n\t\t\t\t$this->load->helper('url');\n\t\t\t\t$this->load->helper('captcha');\n\t\t\t\t$number = rand(1000,9999);//生成随机字符串\n\t\t\t\t$vals = array(\n\t\t\t\t\t\t'word'      => $number,//可指定验证码内容,如果是中文.需要有支持的字体\n\t\t\t\t\t\t'img_path'  => dirname(BASEPATH).'/captcha/',//生成的图片存放目录,手动创建\n\t\t\t\t\t\t'img_url'   => base_url('/captcha/'),//图片链接地址\n\t\t\t\t\t\t//'font_path' => './path/to/fonts/texb.ttf',//指定字体_如果使用中文需要指定字体\n\t\t\t\t\t\t'img_width' => '150',\n\t\t\t\t\t\t'img_height'    => 30,\n\t\t\t\t\t\t'expiration'    => 5,//图片存放时间,如果过期,只有在被再次请求才会删除.单位秒\n\t\t\t\t\t\t'word_length'   => 8,\n\t\t\t\t\t\t'font_size' => 16,\n\t\t\t\t\t\t'img_id'    => 'Imageid',\n\t\t\t\t\t\t'pool'      => '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n\t\t\t\t\n\t\t\t\t\t\t// White background and border, black text and red grid\n\t\t\t\t\t\t'colors'    => array(\n\t\t\t\t\t\t\t\t'background' => array(255, 255, 255),\n\t\t\t\t\t\t\t\t'border' => array(255, 255, 255),\n\t\t\t\t\t\t\t\t'text' => array(0, 0, 0),\n\t\t\t\t\t\t\t\t'grid' => array(255, 40, 40)\n\t\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\t\n\t\t\t\t$cap = create_captcha($vals);\n\t\t\t\techo $cap['word'].\"<br>\";\n\t\t\t\techo $cap['image'];\n\t\t\t\t\n\t\t\t\t$this->load->view('user/captcha_view_demo',array('cap'=>$cap['image']));\n\t\t\t\t\n\t\t\t\t// 原生session\n\t\t\t\tsession_start();\n\t\t\t\t//存储验证码信息到PHP原生的session中.等待校验.\n\t\t\t\t$_SESSION[\"cap\"] = $cap['word'];\n\t\t\t\t\n\t\t\t\t//获取Session\n\t\t\t\t$word = $_SESSION['cap'];\n\t\t\t\techo $word;\n\t\t\t}\n\t\t}\n\n<a id=\"扩展CI的captcha_helper.php实现_验证码\"></a>扩展CI的captcha_helper.php实现_验证码:\n\n\t\t一般而言,对于验证码只需要用一次,没必要创建一张图片保存到本地.\n\t\t所以我对验证码类进行了如下扩展: 不存储验证码图片,并实现点击重新获取验证码.\n\n\t\t步骤一: \n\n\t\t\t把 system/helpers/captcha_helper.php 文件拷贝到 application/helpers/ 目录下并重命名为:MY_captcha_helper.php\n\t\t\n\t\t步骤二:  去除与目录有关的代码\n\n\t\t\t修改 MY_captcha_helper.php 里面的源文件进行如下操作:\n\t\t\t\n\t\t\t(CI 3.0.0)\n\t\t\t\t//处理如果没有设置图片路径而被返回的操作\n\t\t\t\t// \t\tif ($img_path === '' OR $img_url === ''\n\t\t\t\t// \t\t\tOR ! is_dir($img_path) OR ! is_really_writable($img_path)\n\t\t\t\t// \t\t\tOR ! extension_loaded('gd'))\n\t\t\t\t// \t\t{\n\t\t\t\t// \t\t\treturn FALSE;\n\t\t\t\t// \t\t}\n\t\t\t\t// \t\t// -----------------------------------\n\t\t\t\t// \t\t// Remove old images\n\t\t\t\t// \t\t// 删除旧图片\n\t\t\t\t// \t\t// -----------------------------------\n\t\t\t\t// \t\t$now = microtime(TRUE);\n\t\t\t\t// \t\t$current_dir = @opendir($img_path);\n\t\t\t\t// \t\twhile ($filename = @readdir($current_dir))\n\t\t\t\t// \t\t{\n\t\t\t\t// \t\t\tif (substr($filename, -4) === '.jpg' && (str_replace('.jpg', '', $filename) + $expiration) < $now)\n\t\t\t\t// \t\t\t{\n\t\t\t\t// \t\t\t\t@unlink($img_path.$filename);\n\t\t\t\t// \t\t\t}\n\t\t\t\t// \t\t}\n\t\t\t\t// \t\t@closedir($current_dir);\n\n\t\t\t\t// -----------------------------------\n\t\t\t\t//  Generate the image\n\t\t\t\t// 生成图片.\n\t\t\t\t// -----------------------------------\n\t\t\t\t//处理生成图片--start--\n\t\t\t\t// \t\t$img_url = rtrim($img_url, '/').'/';\n\t\t\t\t// \t\tif (function_exists('imagejpeg'))\n\t\t\t\t// \t\t{\n\t\t\t\t// \t\t\t$img_filename = $now.'.jpg';\n\t\t\t\t// \t\t\timagejpeg($im, $img_path.$img_filename);\n\t\t\t\t// \t\t}\n\t\t\t\t// \t\telseif (function_exists('imagepng'))\n\t\t\t\t// \t\t{\n\t\t\t\t// \t\t\t$img_filename = $now.'.png';\n\t\t\t\t// \t\t\timagepng($im, $img_path.$img_filename);\n\t\t\t\t// \t\t}\n\t\t\t\t// \t\telse\n\t\t\t\t// \t\t{\n\t\t\t\t// \t\t\treturn FALSE;\n\t\t\t\t// \t\t}\n\t\t\t\t// \t\t$img = '<img '.($img_id === '' ? '' : 'id=\"'.$img_id.'\"').' src=\"'.$img_url.$img_filename.'\" style=\"width: '.$img_width.'; height: '.$img_height .'; border: 0;\" alt=\" \" />';\n\t\t\t\t// \t\tImageDestroy($im);\n\t\t\t\t// \t\treturn array('word' => $word, 'time' => $now, 'image' => $img, 'filename' => $img_filename);\n\t\t\t\t//处理生成图片--end--\n\t\t\t\t//并在此处 增加如下四行代码,告诉浏览器返回的是一张图片.\n\t\t\t\theader(\"Content-Type:image/jpeg\");  \n\t\t\t\timagejpeg($im);\n\t\t\t\tImageDestroy($im);\n\t\t\t\treturn $word;//返回生成的验证码字符串\n\n\n\t\t\t(CI 2.2.0)\n\t\t\t\t//处理如果没有设置图片路径而被返回的操作\n\t\t\t\t// if ($img_path == '' OR $img_url == ''){\n\t\t\t\t// \treturn FALSE;\n\t\t\t\t// }\n\t\t\t\t// if ( ! @is_dir($img_path)){\n\t\t\t\t// \treturn FALSE;\n\t\t\t\t// }\n\t\t\t\t// if ( ! is_writable($img_path)){\n\t\t\t\t// \treturn FALSE;\n\t\t\t\t// }\n\t\t\t\t// if ( ! extension_loaded('gd')){\n\t\t\t\t// \treturn FALSE;\n\t\t\t\t// }\n\t\t\t\t// // -----------------------------------\n\t\t\t\t// // Remove old images\n\t\t\t\t// // 生成图片.\n\t\t\t\t// // -----------------------------------\n\t\t\t\t// list($usec, $sec) = explode(\" \", microtime());\n\t\t\t\t// $now = ((float)$usec + (float)$sec);\n\t\t\t\t// $current_dir = @opendir($img_path);\n\t\t\t\t// while ($filename = @readdir($current_dir)){\n\t\t\t\t// \tif ($filename != \".\" and $filename != \"..\" and $filename != \"index.html\"){\n\t\t\t\t// \t\t$name = str_replace(\".jpg\", \"\", $filename);\n\t\t\t\t// \t\tif (($name + $expiration) < $now){\n\t\t\t\t// \t\t\t@unlink($img_path.$filename);\n\t\t\t\t// \t\t}\n\t\t\t\t// \t}\n\t\t\t\t// }\n\t\t\t\t// @closedir($current_dir);\n\t\t\t\t\n\t\t\t\t// -----------------------------------\n\t\t\t\t//  Generate the image\n\t\t\t\t// -----------------------------------\n\t\t\t\t// $img_name = $now.'.jpg';\n\t\t\t\t// ImageJPEG($im, $img_path.$img_name);\n\t\t\t\t// $img = \"<img src=\\\"$img_url$img_name\\\" width=\\\"$img_width\\\" height=\\\"$img_height\\\" style=\\\"border:0;\\\" alt=\\\" \\\" />\";\n\t\t\t\t// ImageDestroy($im);\n\t\t\t\t// return array('word' => $word, 'time' => $now, 'image' => $img);\n\t\t\t\t//并在此处 增加如下四行代码,告诉浏览器返回的是一张图片.\n\t\t\t\theader(\"Content-Type:image/jpeg\");  \n\t\t\t\timagejpeg($im);\n\t\t\t\tImageDestroy($im);\n\t\t\t\treturn $word;//返回生成的验证码字符串\n\n\t\t\t\n\t\t步骤三: \n\t\t\t在控制器中使用 captcha\n\t\t\t<?php\n\t\t\tdefined('BASEPATH') OR exit('No direct script access allowed');\n\n\t\t\tclass Privilege extends CI_Controller {\n\t\t\t\tpublic function __construct(){\n\t\t\t\t\tparent::__construct();\n\t\t\t\t\t//载入验证码辅助函数\n\t\t\t\t\t$this->load->helper('captcha');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic function login(){\n\t\t\t\t\t$this->load->view('login');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic function code(){\n\t\t\t\t\t//创建验证码\n\t\t\t\t\t$word = create_captcha();\n\n\t\t\t\t\t//可以在MY_captcha_helper.php直接配置参数也是OK的.\n\t\t\t\t\t//当然同样适用于配置参数.但可以免去了 CI文档中的 img_path 与 img_url 这两个必要参数了.\n\t\t\t\t\t// $vals = array(\n\t\t\t\t\t// \t'word'      => rand(1000,9999),//可指定验证码内容,如果是中文.需要有支持的字体\n\t\t\t\t\t// \t//'font_path' => './path/to/fonts/texb.ttf',//指定字体_如果使用中文需要指定字体\n\t\t\t\t\t// \t'img_width' => '150',\n\t\t\t\t\t// \t'img_height'    => 30,\n\t\t\t\t\t// \t'expiration'    => 5,//图片存放时间,如果过期,只有在被再次请求才会删除.单位秒\n\t\t\t\t\t// \t'word_length'   => 4, //验证码位数\n\t\t\t\t\t// \t'font_size' => 16,\n\t\t\t\t\t// \t'img_id'    => 'Imageid',\n\t\t\t\t\t// \t'pool'      => '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n\t\t\t\t\t// \t// White background and border, black text and red grid\n\t\t\t\t\t// \t'colors'    => array(\n\t\t\t\t\t// \t'background' => array(255, 255, 255),\n\t\t\t\t\t// \t'border' => array(255, 255, 255),\n\t\t\t\t\t// \t'text' => array(0, 0, 0),\n\t\t\t\t\t// \t'grid' => array(255, 40, 40)\n\t\t\t\t\t// )\n\t\t\t\t\t// );\n\t\t\t\t\t//$word = create_captcha($vals);\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t步骤四: view中显示 .并实现点击图片重新加载新图片的功能:\n\t\t\t<img src=\"<?php echo site_url('admin/privilege/code');?>\" width=\"145\" height=\"20\" alt=\"CAPTCHA\" border=\"1\"\n\t\t\tonclick= this.src=\"<?php echo site_url('admin/privilege/code').'/';?>\"+Math.random() style=\"cursor: pointer;\" title=\"看不清？点击更换另一个验证码。\"/>\n\n\n# <a id=\"表单验证\"></a>表单验证\n\n\thttp://codeigniter.org.cn/user_guide/libraries/form_validation.html\n\t\n\t实现: \n\t\t//加载模块\n\t\t$this->load->helper ( array ('form','url') );\n\t\t$this->load->library ( 'form_validation' );\n\t\t//设置校验规则,参数一:表单上的名称,参数二:错误信息显示的名称,参数三:校验的规则见标准文档\n\t\t//http://codeigniter.org.cn/user_guide/libraries/form_validation.html#id25\n\t\t$this->form_validation->set_rules('参数名','用户名','required');\n\t\t//表单校验 返回true表示校验通过\n\t\t$bool = $this->form_validation->run();\n\t\t//表单校验加载校验规则 使用配置文件 application/config/form_validation.php 如果没有自己创建.\n\t\t//$bool = $this->form_validation->run('demo');//参数名与config文件中的相对应.\n\t\t\n\t\tform表单中\n\t\t\t//自动回填内容项\n\t\t\t<?php echo set_value('参数名')?>\n\t\t\t//显示错误信息, 参数一:为form中的表单名,参数二,三:参数样式\n\t\t\t<?php echo form_error('参数名','<span>','</span>')?>\n\t\t\t//显示全部错误信息\n\t\t\t<?php echo validation_errors();?>\n\n案例见代码: \n\n\t\t\\application\\controllers\\form_demo.php\n\t\t\t<?php\n\t\t\tclass Form_demo extends CI_Controller {\n\t\t\t\tpublic function index() {\n\t\t\t\t}\n\t\t\t\t// http://127.0.0.1:8000/CodeIgniter-3.0.0/form_demo/insert\n\t\t\t\tpublic function insert() {\n\t\t\t\t\t$this->load->helper ( array ('form','url') );\n\t\t\t\t\t//加载模块\n\t\t\t\t\t$this->load->library ( 'form_validation' );\n\t\t\t\t\t\n\t\t\t\t\t// 校验如果这样编写会编写很多规则代码.可以在config进行配置验证文件.也可实现重复利用的效果\n\t\t\t\t\t// $this->form_validation->set_rules('name','用户名','required');\n\t\t\t\t\t// $this->form_validation->set_rules('password','密码','required|min_length[6]|max_length[16]|md5');\n\t\t\t\t\t//$this->form_validation->set_rules('repassword','确认密码','trim|required|md5|matches[password]');//重复密码验证\n\t\t\t\t\t// $this->form_validation->set_rules('email','邮箱',array('required','valid_email'));\n\t\t\t\t\t// // 表单验证\n\t\t\t\t\t// $bool = $this->form_validation->run();\n\t\t\t\t\t\n\t\t\t\t\t// 表单验证配置文件 application/config/form_validation.php\n\t\t\t\t\t$bool = $this->form_validation->run('demo');\n\t\t\t\t\tif ($bool) {\n\t\t\t\t\t\t// 调用模型保存数据库\n\t\t\t\t\t\techo 'success';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// 显示错误信息\n\t\t\t\t\t\t$this->load->view ( 'user/form_view_demo' );\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\techo $bool;\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t--------\n\t\t\\application\\views\\user\\form_view_demo.php\n\t\t\t<!DOCTYPE html>\n\t\t\t<html>\n\t\t\t<head>\n\t\t\t\t<meta charset=\"utf-8\">\n\t\t\t\t<title>表单验证</title>\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t<?php echo validation_errors();?>\n\n\t\t\t<form action=\"<?php echo site_url('form_demo/insert');?>\" method=\"post\">\n\t\t\t\tname<input type=\"text\" name=\"name\" value=\"<?php echo set_value('name')?>\"/>\n\t\t\t\t<?php echo form_error('name','<span>','</span>')?>\n\t\t\t\t<br>\n\t\t\t\tpassword<input type=\"password\" name=\"password\" />\n\t\t\t\t<?php echo form_error('password','<span>','</span>')?>\n\t\t\t\t<br>\n\t\t\t\temail<input type=\"text\" name=\"email\" value=\"<?php echo set_value('email')?>\"/>\n\t\t\t\t<?php echo form_error('email','<span>','</span>')?>\n\t\t\t\t<br>\n\t\t\t\t<button type=\"submit\">submit</button>\n\t\t\t</form>\n\t\t\t</body>\n\t\t\t</html>\n\t\t--------\n\t\t\\application/config/form_validation.php\n\t\t\t<?php\n\t\t\t\t$config = array (\n\t\t\t\t\t'demo' => array (\n\t\t\t\t\t\t\tarray (\n\t\t\t\t\t\t\t\t\t'field' => 'name',\n\t\t\t\t\t\t\t\t\t'label' => '用户名',\n\t\t\t\t\t\t\t\t\t'rules' => 'required' \n\t\t\t\t\t\t\t) ,\n\t\t\t\t\t\t\tarray (\n\t\t\t\t\t\t\t\t\t'field' => 'password',\n\t\t\t\t\t\t\t\t\t'label' => '密码',\n\t\t\t\t\t\t\t\t\t'rules' => 'required' \n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tarray (\n\t\t\t\t\t\t\t\t\t'field' => 'email',\n\t\t\t\t\t\t\t\t\t'label' => '邮箱',\n\t\t\t\t\t\t\t\t\t'rules' => 'required|valid_email' \n\t\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t\t'signup'=>array( ....  )\n\t\t\t\t);\n\n# <a id=\"语言包\"></a>语言包\n\t如表单错误信息等语言.\n\t\t将语言包解压到\n\t\t\t\\application\\language\\zh_cn\n\t\t配置语言:\n\t\t\t\\application\\config\\config.php\n\t\t\t原:\n\t\t\t\t$config['language']\t= 'english';\n\t\t\t改成\n\t\t\t\t$config['language']\t= 'zh_cn';\n\n# <a id=\"购物车类库\"></a>购物车类库\n\t\t\n\thttp://codeigniter.org.cn/user_guide/libraries/cart.html\n\n\tCI3.0.0 官方上标注: 之后购物车类已经废弃，请不要使用。目前保留它只是为了向前兼容。\n\n\t引入购物车支持库\n\t$this->load->library('cart');\n\t//$autoload['libraries'] = array('cart');//或者配置 application/config/autoload.php\n\n\t加入购物车\n\t\t//名称有要求\n\t\t$data['id'] = $this->input->post('goods_id',true); //id\n\t\t$data['name'] = $this->input->post('goods_name',true); //商品名称\n\t\t$data['qty'] = $this->input->post('goods_nums',true); //数量\n\t\t$data['price'] = $this->input->post('shop_price',true); //金额\n\t\t\n\t\t$goods_thumb= $this->input->post('goods_thumb',true);\n\t\t$data['options'] = array('goods_thumb'=>$goods_thumb);//更多信息\n\n\t\tif($this->cart->insert($data)){\n\t\t\techo 'ok';\n\t\t}else{\n\t\t\techo 'error';\n\t\t}\n\t\t\n\t//获取购物车数据\n\t$data['carts'] = $this->cart->contents();\n\n\t//view中获取展示数据\n\t<?php foreach ($carts as $v):?>\n\t\t<?php echo base_url('public/uploads').'/'.$v['options']['goods_thumb'];?>\n\t\t<?php echo $v['id'];?>\n\t\t<?php echo $v['name'];?> \n\t\t<?php echo $v['price'];?>\n\t\t<?php echo $v['qty'];?>\n\t\t<!-- 自动生成 -->\n\t\t<?php echo $v['row_id'];?>\n\t\t<!-- 自动生成 $v['subtotal'] 会自动计算出总金额-->\n\t\t<?php echo $v['subtotal']?>\n\t<?php endforeach;?>\n\t\n\t删除/修改购物车\n\t\t$data['rowid'] = $rowid;\n\t\t$data['qty'] = 0;\n\t\t$this->cart->update($data);\n\t\tredirect('cart/show');\n\t\n\t注意事项:\n\t\t\n\t\t1. 中文问题(2.2.0存在,3.0.0不存在)\n\t\t\t$data['name'] = $this->input->post('goods_name',true); //商品名称\n\t\t\t中name项在 CI3.0.0之前是不支持中文内容的. CI3.0.0版本可支持中文.\n\t\t\tCI2.2.0修改cart.php原文件来使name支持中文.\n\t\t\t\t方法: system/library/Cart.php 拷贝到 application/library 中,找到如下代码并注释即可.\n\t\t\t\n\t\t\t\t\t// Validate the product name. It can only be alpha-numeric, dashes, underscores, colons or periods.\n\t\t\t\t\t// Note: These can be user-specified by setting the $this->product_name_rules variable.\n\t\t\t\t\t//CI2.2.0的原代码在186行数\n\t\t\t\t\t//if ( ! preg_match(\"/^[\".$this->product_name_rules.\"]+$/i\", $items['name']))\n\t\t\t\t\t//{\n\t\t\t\t\t//\tlog_message('error', 'An invalid name was submitted as the product name:\n\t\t\t\t\t//\t'.$items['name'].' The name can only contain alpha-numeric\n\t\t\t\t\t//\tcharacters, dashes, underscores, colons, and spaces');\n\t\t\t\t\t//\treturn FALSE;\n\t\t\t\t\t//}\n\t\t2.total_items 问题 (CI2.2.0与CI3.0.0都存在)\n\t\t\t显示购物车中商品数量。 CI框架中默认是显示出商品数量总数\n\t\t\t即:如果存放到购物车2双鞋子+1条裤子 <?php echo $this->cart->total_items();?> 获取出来的数据是3件物品,而不是2种商品\n\t\t\t而如果你的需求是 显示商品种类 .需要修改源代码.\n\t\t\t\t方法: system/library/Cart.php 拷贝到 application/library 中,找到如下代码修改:\n\t\t\t\t\tCI3.0.0\n\t\t\t\t\t\t//代码位置在401行 _save_cart 函数中\n\t\t\t\t\t\t$this->_cart_contents['cart_total'] += ($val['price'] * $val['qty']);\n\t\t\t\t\t\t//$this->_cart_contents['total_items'] += $val['qty'];  //原代码\n\t\t\t\t\t\t$this->_cart_contents['total_items'] ++;  //新代码\n\t\t\t\t\t\t$this->_cart_contents[$key]['subtotal'] = \n\t\t\t\t\t\t($this->_cart_contents[$key]['price'] * $this->_cart_contents[$key]['qty']);\n\t\t\t\t\t\n\t\t\t\t\tCI2.2.0\n\t\t\t\t\t\t//代码位置在386行 _save_cart 函数中\n\t\t\t\t\t\t$total += ($val['price'] * $val['qty']);\n\t\t\t\t\t\t//$items += $val['qty'];//原代码\n\t\t\t\t\t\t$items ++;//新代码\n\n\t\t3.在我们向购物车中添加商品的时候，如果添加了已经存在于购物车中的商品时，会出现逻辑错误。\n\t\t\t理论上应该是累加，但实际上是将原来的商品信息给删除了。所以要相应的处理一下：\t\n\t\t\t\t\n\t\t\t\t// 获取/封装数据....\n\t\t\t\t//在插入之前,需要判断即将要加入的商品是否已经存在于购物车中\n\t\t\t\t$carts = $this->cart->contents();\n\t\t\t\tforeach ($carts as $v){\n\t\t\t\t\tif($v['id'] == $data['id']){\n\t\t\t\t\t\t$data['qty'] += $v['qty'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// 插入数据...\n\n\n# <a id=\"CI框架内部解析\"></a>CI框架内部解析\n\t\n\tCI是一个单入口框架,所有的请求都需要经常index.php文件 . 流程如下:\n                  | --> Routing --> Scourity -->     |-----------------------|\n        index.php |                                  |Application Controller |-->Drivers,Models,Libaies,Helpers,Packages,Scripts\n                  | <-- Caching <--   View   <--     |-----------------------|\t \n\n\t\n分析index.php文件.\n\n\t\t$system_path = 'system';\n\t\t$application_folder = 'application';\n\t\t这个和我们的文件夹结构名称一一对应. 当然这个名称是可以更改.\n\t\t\n\t\t中间加载一些系统目录常量等.\n\t\t在index.php结尾尝试打印里面的内容.\n\t\t\t\n\t\t\t\tvar_dump(SELF , ENVIRONMENT ,BASEPATH ,FCPATH,  SYSDIR);\n\t\t\t\texit();\n\t\t\t结果\n\t\t\t\tstring(9) \"index.php\"\n\t\t\t\tstring(11) \"development\"\n\t\t\t\tstring(62) \"E:/ComTu_Design/PHP/Apache2.2/htdocs/CodeIgniter-3.0.0/system/\"\n\t\t\t\tstring(55) \"E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\CodeIgniter-3.0.0/\"\n\t\t\t\tstring(6) \"system\"\n\n\t\t最后载入\n\t\t\trequire_once BASEPATH.'core/CodeIgniter.php';\n\n分析CodeIgniter.php\n\n\t\t载入Common.php 通用函数库.\t\t\n\t\t\trequire_once(BASEPATH.'core/Common.php');\n\t\t\t\t例如:\tis_php($version) php版本\n\t\t\t\t\tis_really_writable 是否可写\n\t\t\t\t\tload_class 载入类函数\n\t\t\t\t\t等等\n\n\t\t载入配置文件(常量配置)\n\t\t\trequire_once(APPPATH.'config/constants.php');\n\n\t\t载入核心类文件.\n\t\t\t$BM =& load_class('Benchmark', 'core'); \n\t\t\t$EXT =& load_class('Hooks', 'core');  勾子类\n\t\t\t$CFG =& load_class('Config', 'core'); 配置文件类\n\t\t\t$UNI =& load_class('Utf8', 'core'); 编码类\n\t\t\t$URI =& load_class('URI', 'core'); URI类\n\t\t\t$RTR =& load_class('Router', 'core', isset($routing) ? $routing : NULL); 路由类\n\t\t\t$OUT =& load_class('Output', 'core'); 输出类\n\t\t\t$SEC =& load_class('Security', 'core'); 安全类 \n\t\t\t$IN  =& load_class('Input', 'core');输入类\n\t\t\t$LANG =& load_class('Lang', 'core');语言类\n\n\t\t载入CI总控制器.\n\t\t\trequire_once BASEPATH.'core/Controller.php';\n\t\t\n\t\t通过router类对象 $RTR的两个方法获取当前的类名和方法名\n\t\t\t\n\t\t\tCI 2.2.0\n\t\t\t\t$class  = $RTR->fetch_class();\n\t\t\t\t$method = $RTR->fetch_method();\n\t\t\t\n\t\t\tCI 3.0.0\n\t\t\t\t$class = ucfirst($RTR->class);\n\t\t\t\t$method = $RTR->method;\n\t\t\t\n\t\t\t比如:输入 http://127.0.0.1:8000/CodeIgniter-3.0.0/form_demo/insert \n\t\t\t那么上述代码获取的$class就是控制器form_demo,$method就是insert , 如果没\n\t\t\t有方法名,则默认index\n\n\t\tNew了一个对象,叫做CI, 这个就是CI框架中的超级对象(super class)\t\n\t\t\t$CI = new $class(); //此处,就是超级对象的形成过程.\n\t\t\t//var_dump($CI); 可以尝试在此处打印一下$CI的信息 . \n\t\t\n分析CI_Controller类 Controller.php \n\n\t\t\t简单的PHP单例设计模式.\n\t\t\t\tprivate static $instance;\n\t\t\t\tpublic static function &get_instance(){\n\t\t\t\t\treturn self::$instance;\n\t\t\t\t}\n\t\t\t\n\t\t\t构造函数中将前面载入的核心类,作为CI对象的属性.\n\t\t\t\tforeach (is_loaded() as $var => $class){\n\t\t\t\t\t$this->$var =& load_class($class);\n\t\t\t\t}\n\n\t\t\t然后是载入Loader.php 装载类\n\t\t\t\t$this->load =& load_class('Loader', 'core');\n\n\t在控制器中出现的$this就是超级对象.\n\t超级对象形成之后,我们就可以使用超级对象(超级对象的属性)\n\t提供一系列方法完成我们的业务逻辑.如果需要完成其它的功能,可以载入其他的类文件,辅助函数.\n\t这些类文件和辅助函数包括CI已经提供好的.也可以是我们自己定义的.\n\n使用中遇到过的问题\n\tCI 3.0.0使用中\n\t访问 views/目录下的文件时被拦截.如\n\thttp://127.0.0.1:8000/mycishop/application/views/images/ecshop_logo.gif\n\t\n\t提示:\n\t\tForbidden\n\t\tYou don't have permission to access /mycishop/application/views/images/ecshop_logo.gif on this server.\n\t\n\t解决办法:\n\t\t查看与 views 同级的 .htaccess文件 发现是此处招到的拦截.\n\t\t<IfModule authz_core_module>\n\t\t    Require all denied\n\t\t</IfModule>\n\t\t<IfModule !authz_core_module>\n\t\t    #拦截访问.\n\t\t    #Deny from all\n\t\t    #修改成如下代码即可.\n\t\t    Allow from all \n\t\t</IfModule>\n\t配置文件与 [隐藏入口文件-index.php](#隐藏入口文件-index.php) 里面的权限管理类似.\n\n\n\n///////////////////////////////数据库附件////////////////////////////////////////////////\n\n\t/*\n\t 查询数据库\n\t \n\t mysql> show databases;\n\t+--------------------+\n\t| Database           |\n\t+--------------------+\n\t| information_schema |\n\t| discuz             |\n\t| mysql              |\n\t| test               |\n\t| wordpress          |\n\t+--------------------+\n\t5 rows in set (0.00 sec)\n\n\t进入到test数据库\n\n\tmysql> use test   \n\tDatabase changed\n\n\t查看test数据库中的表\n\n\tmysql> show tables;\n\tEmpty set (0.00 sec)\n\n\t创建表\n\n\tmysql> \n\tmysql> CREATE TABLE IF NOT EXISTS bolg_user(\n\t    ->  id INT AUTO_INCREMENT PRIMARY KEY,\n\t    ->  name VARCHAR(255) NOT NULL UNIQUE,\n\t    ->  password CHAR(32) NOT NULL,\n\t    ->  email VARCHAR(255) NOT NULL DEFAULT ''\n\t    -> )ENGINE MyISAM DEFAULT CHARSET=UTF8;\n\tQuery OK, 0 rows affected (0.05 sec)\n\n\t增加数据\n\n\tmysql>\n\tmysql> \n\tmysql> INSERT INTO bolg_user (name,password) VALUES ('admin',md5('admin'));\n\tQuery OK, 1 row affected (0.07 sec)\n\n\t查看数据库的表\n\n\tmysql> show tables;\n\t+----------------+\n\t| Tables_in_test |\n\t+----------------+\n\t| bolg_user      |\n\t+----------------+\n\t1 row in set (0.00 sec)\n\n\t查看数据库结构\n\n\tmysql> desc bolg_user;\n\t+----------+--------------+------+-----+---------+----------------+\n\t| Field    | Type         | Null | Key | Default | Extra          |\n\t+----------+--------------+------+-----+---------+----------------+\n\t| id       | int(11)      | NO   | PRI | NULL    | auto_increment |\n\t| name     | varchar(255) | NO   | UNI | NULL    |                |\n\t| password | char(32)     | NO   |     | NULL    |                |\n\t| email    | varchar(255) | NO   |     | NULL    |                |\n\t+----------+--------------+------+-----+---------+----------------+\n\t4 rows in set (0.02 sec)\n\t\n\t设置编码格式为gbk,解决查看时乱码.\n\tmysql> set names gbk;\n\tQuery OK, 0 rows affected (0.00 sec)\n\n\t查询数据库表中的内容\n\t\n\tmysql> select * from bolg_user;\n\t+----+-------+----------------------------------+-------+\n\t| id | name  | password                         | email |\n\t+----+-------+----------------------------------+-------+\n\t|  1 | admin | 21232f297a57a5a743894a0e4a801fc3 |       |\n\t+----+-------+----------------------------------+-------+\n\t1 row in set (0.00 sec)\n\t * */\n\n\n\n\n[本文案例Demo](/res/file/blog/2015/09/10/PHP_codeigniter/CodeIgniter-3.0.0_Demo.rar)\n\n[本文案例Demo_附加Demo_购物商场](/res/file/blog/2015/09/10/PHP_codeigniter/mycishop.rar)\n","slug":"PHP_codeigniter","published":1,"updated":"2016-04-27T02:59:01.212Z","comments":1,"photos":[],"link":"","_id":"cinu3etyw001uxoj0hb0uaw0n","content":"<p>本人因公司需求.学习PHP的CI框架.本博文为学习笔记.<br>CodeIgniter 是一套给 PHP 网站开发者使用的应用程序开发框架和工具包。<br>它提供一套丰富的标准库以及简单的接口和逻辑结构，其目的是使开发人员更快速地进行项目开发。<br>使用 CodeIgniter 可以减少代码的编写量，并将你的精力投入到项目的创造性开发上。</p>\n<p>其中内容包括,CI_Controller对象 , 数据库访问 , AR模型(QB模型) , CI类库扩展 ,<br>Url相关函数 , 设置路由 , 隐藏入口文件, 分页 , 文件上传 , Session , 验证码 , 语言包 , CI框架内部解析等内容.</p>\n<a id=\"more\"></a>\n<p>目录</p>\n<ul>\n<li><a href=\"#CodeIgniter框架简介\">CodeIgniter框架简介</a></li>\n<li><a href=\"#MVC\">MVC</a><ul>\n<li><a href=\"#控制器-controllers\">控制器-controllers</a></li>\n<li><a href=\"#视图-views\">视图-views</a> </li>\n<li><a href=\"#模型-model\">模型-model</a></li>\n</ul>\n</li>\n<li><a href=\"#CI的超级对象-(CI的控制器对象CI_Controller\">CI的超级对象-(CI的控制器对象CI_Controller)</a>)</li>\n<li><a href=\"#数据库访问\">数据库访问</a></li>\n<li><a href=\"#AR模型操作数据库\">AR模型操作数据库增删改查 active_record (CI3.0之后改名 query_builder QB模型)</a></li>\n<li><a href=\"#CI类库扩展\">CI类库扩展</a><ul>\n<li><a href=\"#扩展控制器CI_Controller-装载器Loader\">为网站设计不同的主题.前台,后台(扩展控制器CI_Controller,装载器Loader)</a></li>\n<li><a href=\"#扩展CI的captcha_helper.php实现_验证码\">扩展CI的captcha<em>helper.php实现</em>验证码</a></li>\n<li><a href=\"#扩展_修改分页生成的代码\">扩展_修改分页生成的代码</a></li>\n</ul>\n</li>\n<li><a href=\"#url相关函数\">url相关函数</a></li>\n<li><a href=\"#设置路由\">设置路由</a></li>\n<li><a href=\"#隐藏入口文件-index.php\">隐藏入口文件-index.php</a></li>\n<li><a href=\"#分页\">分页</a></li>\n<li><a href=\"#文件上传\">文件上传</a></li>\n<li><a href=\"#图片处理类\">图片处理类</a></li>\n<li><a href=\"#Session\">Session</a></li>\n<li><a href=\"#验证码\">验证码</a></li>\n<li><a href=\"#表单验证\">表单验证</a></li>\n<li><a href=\"#语言包\">语言包</a></li>\n<li><a href=\"#购物车类库\">购物车类库</a></li>\n<li><a href=\"#CI框架内部解析\">CI框架内部解析</a></li>\n</ul>\n<hr>\n<p>注:测试版本为CodeIgniter3.0.0框架 与CI2.x的有些不同.<br>但都有标注不同点以及处理方法.笔记理论上基本适用于3.0.0(当前最新)之前的版本.  </p>\n<p>中文教程地址:<br><a href=\"http://codeigniter.org.cn/user_guide/index.html\" target=\"_blank\" rel=\"external\">http://codeigniter.org.cn/user_guide/index.html</a></p>\n<h1 id=\"CodeIgniter框架简介-CI框架\"><a href=\"#CodeIgniter框架简介-CI框架\" class=\"headerlink\" title=\"CodeIgniter框架简介 ( CI框架 )\"></a><a id=\"CodeIgniter框架简介\"></a>CodeIgniter框架简介 ( CI框架 )</h1><pre><code>CodeIgniter是一个轻量级但功能强大的PHP框架是基于MVC设计模式.\n\n框架开发和二次开发\n    打个比方:买房子\n    买二手房,直接拎包入住 , 好比二次开发,如:dedecms,PHPCMS(内容管理系统),ECShop(开源免费的网上商店系统)\n    买毛坯房,不能住人,自己去买各种装修材料,请人装修,才能入住.好比框架开发.只提供\n    基础功能和项目结构.\n\n    CI是框架,用于框架开发.\n\n目录结构说明:\n    license.txt许可协议\n    user_guide 用户手册(一般删除)\n    index.php 入口文件\n    system 框架核心代码,通常不动的.\n    application 应用目录\n    |-- cache        缓存目录\n    |-- config       配置文件目录\n    |-- controllers  控制器文件夹\n    |-- core         核心库扩展目录\n    |-- errors       错误页面\n    |-- helpers      自定义辅助函数文件夹\n    |-- hooks        勾子文件夹\n    |-- language     语言包\n    |-- libraries    自定义库文件夹,通常是一些类文件\n    |-- logs         日志\n    |-- models       模型文件夹\n    |-- third_party  第三方库目录,如smarty\n    |-- views        视图文件夹\n</code></pre><h1 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a><a id=\"MVC\"></a>MVC</h1><pre><code>1. 入口文件 \n    唯一一个让浏览器直接请求的脚本文件\n\n2. 控制器 controller\n    协调模型和视图\n\n3. 模型 model \n    提供数据,保存数据,数据有效性认证\n\n4. 视图 view\n    只负责显示,以及表单...\n\n5. 动作 action \n    是控制器中方法,用户被浏览器直接请求\n\n访问url使用的是pathinfo //http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/welcome/test  test是welcome的一个方法\n\n入口文件.php/控制器/动作\n\napplication 应用目录\n    controllers 控制器\n    models 模型\n    views 视图\n\n默认控制器是welcome\n默认动作是index \n</code></pre><h2 id=\"控制器-controllers\"><a href=\"#控制器-controllers\" class=\"headerlink\" title=\"控制器-controllers\"></a><a id=\"控制器-controllers\"></a>控制器-controllers</h2><pre><code>1.不需要加后缀 , 直接是类名.php (自己编写的控制器需要UserController.php)\n2.文件名全部小写 \n3.所有的控制器,直接或者间接继承自 CI_Controller 类\n4.尽量不要使用Index名作为控制器类名,因为与方法index与类名相同的,会被PHP当作构造方法void __construct(){}\n5.控制器中, 动作(函数,方法)要求:\n    public \n    不能以_开头\n\n    //不能被浏览器范围\n    protected function test() {\n        echo &apos;test&apos;;\n    }\n\n    //以下划线开头的方法,不能被浏览器请求\n    public function _test1() {\n        echo &apos;test1&apos;;\n    }\n\n    public function test2(){\n        $this-&gt;_test1();\n    }\n</code></pre><h2 id=\"视图-views\"><a href=\"#视图-views\" class=\"headerlink\" title=\"视图-views\"></a><a id=\"视图-views\"></a>视图-views</h2><pre><code>1.在控制器中如果加载视图\n    //直接写试图名字,不写扩展名,如果有子目录,则写上目录名\n    $this-&gt;load-&gt;view ( &apos;user/index&apos; ); //表示user目录下的index.php文件\n    可以多次调用$this-&gt;load-&gt;view (视图); \n\n2.试图中,直接使用原生PHP代码\n3.推荐使用\n    &lt;?php foreach ($list as $item):?&gt;\n    &lt;?=$item[&quot;email&quot;]?&gt;\n    &lt;?php endforeach;?&gt;\n\n    &lt;?php if(empty($carts)):?&gt;\n    &lt;?php else:?&gt;\n    &lt;?php endif;?&gt;\n</code></pre><h2 id=\"模型-model\"><a href=\"#模型-model\" class=\"headerlink\" title=\"模型-model\"></a><a id=\"模型-model\"></a>模型-model</h2><pre><code>模型文件名全部使用小写,建议使用_model为后缀,防止与控制器类名冲突,但里面的类名首字母大写\n在模型中,可以直接使用超级对象中的属性\n\n\\application\\models\\user_model.php 模型\n    &lt;?php\n        class User_model extends CI_Model{//继承自 CI_Model\n            //返回所有用户\n            public function getAll(){\n                $res = $this-&gt;db-&gt;get(&apos;user&apos;);//在模型中,可以直接使用超级对象中的属性\n                return $res;\n            }\n        }\n\\application\\controllers\\my_model_demo.php 控制器\n    &lt;?php\n        class My_model_demo extends CI_Controller {\n            // http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/my_model_demo\n            public function index() {\n                // 加载模型,加载后将自动成为超级对象的属性\n                // $this-&gt;load-&gt;model ( &apos;User_model&apos; );\n                $this-&gt;load-&gt;model ( &apos;User_model&apos;, &apos;user&apos; ); // 起个别名\n\n                // 调用模型获取数据\n                // $list = $this-&gt;User_model-&gt;getAll();\n                $list = $this-&gt;user-&gt;getAll (); // 使用别名\n\n                // 加载视图\n                $this-&gt;load-&gt;view ( &apos;user/my_model_view_demo&apos;, array (&apos;list&apos; =&gt; $list ) );\n            }\n        }\n\\application\\views\\user\\my_model_view_demo.php 视图\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;View&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;?php \n        //CI它使用了一个 extract 函数,将数组变量导入到当前的符号表,所以直接使用键名作为变量来访问\n            var_dump( $list); \n        ?&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n\n建议使用这种这种MVC架构来编写代码,可维护性高一些.\n</code></pre><h1 id=\"CI的超级对象-CI的控制器对象CI-Controller\"><a href=\"#CI的超级对象-CI的控制器对象CI-Controller\" class=\"headerlink\" title=\"CI的超级对象-(CI的控制器对象CI_Controller)\"></a><a id=\"CI的超级对象-(CI的控制器对象CI_Controller)\"></a>CI的超级对象-(CI的控制器对象CI_Controller)</h1><pre><code>当前的控制器对象\n属性\n$this-&gt;load //  --&gt; system/core/CI_Loader类装载器,类的加载,如视图,控制器等\n    装载器类的实例system/core/CI_Loader.php\n    装载器CI_Loader提供方法:\n        view()    装载视图\n        vars()  分配变量到视图\n        database()  装载数据库操作对象\n        model()  装载模型\n        helper() 一些辅助函数\n\n$this-&gt;uri // 获取url参数等功能\n    是CI_URI类的实例 --&gt; system/core/CI_URI.php \n    CI_URI类提供方法:\n        segment(n) 用于获取url中的第几个参数(值）\n        传统的: 入口文件.php/控制器/动作/参数1/值1/参数2/值2\n        CI的  : 入口文件.php/控制器/动作/值1/值2\n\n        echo $this-&gt;segment(3);//值1\n        echo $this-&gt;segment(4);//值2\n\n        方式一: \n        // 使用CI的pathinfo\n        // http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/user/testURI/4\n        echo $this-&gt;uri-&gt;segment(3); // 获取URI第几段的参数 可取得4 , 从user开始计算1,2,3\n\n        方式一: \n        直接写在方法里面\n        http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/user/testURI2/1/jack\n        public function index($id = 0,$name=&apos;&apos;){ //可以直接获取到id=1 ; name= jack ,如果id没有输入默认为0,默认name为空\n            echo $id;//1\n            echo $name; // jack\n        }\n\n$this-&gt;input 获取用户输入信息 如,get put cookie等\n    是CI_Input类的实例 --&gt; system/core/CI_Input.php\n    CI_Input类提供方法:\n        $this-&gt;input-&gt;post(&apos;username&apos;);         //$_POST[&apos;username&apos;]\n        $this-&gt;input-&gt;post(&apos;username&apos;,true);    //跨站脚本（XSS）过滤\n        $this-&gt;input-&gt;server(&apos;DOCUMENT_ROOT&apos;);    //$_SERVER[&apos;DOCUMENT_ROOT&apos;]\n        $this-&gt;input-&gt;cookie();\n        $this-&gt;input-&gt;server()\n        ...\n\n在视图(view)中,直接使用$this来访问超级对象中的属性\n\nCI支持控制器在子目录中.\n    如果你在建立一个大型的应用程序，你会发现 CodeIgniter 可以很方便的将控制器放到一些子文件夹中。\n\n    只要在 application/controllers 目录下创建文件夹并放入你的控制器就可以了。\n\n    注意：  如果你要使用某个子文件夹下的功能，就要保证 URI 的第一个片段是用于描述这个文件夹的。例如说你有一个控制器在这里：\n\n    application/controllers/products/shoes.php\n\n    调用这个控制器的时候你的 URI 要这么写：\n\n    example.com/index.php/products/shoes/show/123\n\n    你的每个子文件夹中需要包含一个默认的控制器，这样如果 URI 中只有子文件夹而没有具体功能的时候它将被调用。\n    只要将你作为默认的控制器名称在 application/config/routes.php 文件中指定就可以了。\n\n    CodeIgniter 也允许你使用 URI 路由 功能来重新定向 URI。\n</code></pre><h1 id=\"数据库访问\"><a href=\"#数据库访问\" class=\"headerlink\" title=\"数据库访问\"></a><a id=\"数据库访问\"></a>数据库访问</h1><pre><code>配置数据库文件\n    可在 \\system\\database\\drivers\\目录下查看可被支持的数据库驱动\n    application/config/database.php 数据库配置文件\n    $db[&apos;default&apos;]= array(    //&apos;default&apos;表示默认数据库,当一个项目需要连接多个数据库的时候,可以增加多一个$db[&apos;新数据库别名&apos;]= array(....\n        &apos;hostname&apos; =&gt; &apos;localhost&apos;,\n        &apos;username&apos; =&gt; &apos;root&apos;,\n        &apos;password&apos; =&gt; &apos;root&apos;,\n        &apos;database&apos; =&gt; &apos;test&apos;,    //database数据库名\n        &apos;dbdriver&apos; =&gt; &apos;mysql&apos;, //数据库驱动\n        &apos;dbprefix&apos; =&gt; &apos;blog_&apos;, //表前缀 \n        &apos;swap_pre&apos; =&gt; &apos;swap_&apos;, //表前缀 假设代码里面的都是使用swap_的前缀,而表是使用blog_前缀,则会自动替换成dbprefix的前缀,而无需修改源代码\n    );\n\n    表前缀\n        &apos;dbprefix&apos; =&gt; &apos;blog_&apos;, \n        &apos;swap_pre&apos; =&gt; &apos;blog_&apos;, \n        配置为一样,代码中,直接硬编码表前缀就行了,如果以后项目数据库表前缀发生变化,\n        只需要修改&apos;dbprefix&apos; =&gt; &apos;new_&apos;,  代码中的blog_会自动替换为new_\n\n    /////数据库附件/////\n\n将数据库访问对象,装载到超级对象的属性中 $this-&gt;db\n    方式一(PHP代码手动加载): \n        // 装载一个数据库操作类\n        $this-&gt;load-&gt;database();//表示连接默认数据库\n        //一个项目多个数据库时,表示连接其它数据库,配置文件\\application\\config\\database.php中配置相对应别名\n        //$this-&gt;load-&gt;database(&apos;新数据库别名&apos;);\n    方式二(配置文件,自动加载):\n        //因为每次使用数据库的时候都需要装载数据库操作类,所以在配置文件\\application\\config\\autoload.php中配\n        //置Auto-load Libraries 自动加载项,以后就可以不再需要手动加载,但对于多个数据库的还是需要指定数据库.\n        //$autoload[&apos;libraries&apos;] = array(&apos;database&apos;);//自动加载配置\n        //$this-&gt;load-&gt;database();//以后编写都不需要这行代码.\n\n    使用: \n        //装载成功后,会放入超级对象的属性中, 默认属性名是db\n        // var_dump($this-&gt;db);//$this-&gt;db 返回的是 CI_DB_mysql_driver 对象 继承自 CI_DB\n\n    CI_DB_mysql_driver 对象 --&gt; \\system\\database\\drivers\\mysql\\mysql_driver.php  \n\n$this-&gt;db-&gt;query()方法 增删改查\n    查询数据 返回的是一个对象\n        $sql = &apos;select * from blog_user&apos;;\n        // 返回的是CI_DB_mysql_result 对象 - mysql_query()\n        $res = $this-&gt;db-&gt;query ( $sql ); //返回的是 CI_DB_mysql_result 对象 继承自 CI_DB_result\n        $res-&gt;result();//返回数组,数组中是一个一个的对象\n        $res-&gt;result_array();//返回二维数组,里面是关联数组\n        $res-&gt;row();//返回第一条数据,直接是一个对象\n\n        //帮助文档中--&gt; 数据库类--&gt;查询--&gt;query \n        //帮助文档中--&gt; 数据库类--&gt;生成查询结果集--&gt; result_array() 等等的一些方法. 调用方法就如上所示\n        //以上可取得如下php原生函数类似的结果\n        //mysql_fetch_assoc()//关联数组 //http://www.w3school.com.cn/php/func_mysql_fetch_assoc.asp\n        //mysql_fetch_object()//返回对象 //http://www.w3school.com.cn/php/func_mysql_fetch_object.asp\n\n        CI_DB_mysql_result 对象 --&gt; \\system\\database\\drivers\\mysql\\mysql_result.php\n\n    增删改数据 返回一个 boolean 布尔值\n\n        // 插入数据\n        // $name=$this-&gt;input-&gt;post(&apos;name&apos;);//假如获取用户post过来的数据.\n        // $name = &apos;lili&apos;;\n        // $pass = &apos;lili&apos;;\n\n        // $data [0] = $name;\n        // $data [1] = $pass;\n        ////参数绑定:\n        // $sql = &quot;insert into blog_user (name,password) values (?,me5(?))&quot;;\n        // $bool = $this-&gt;db-&gt;query ( $sql, $data );//多个问号?参数时,需要传入一个索引数组\n\n        // 删除数据\n        // $sql = &quot;delete from blog_user where id=?&quot;;\n        // $bool = $this-&gt;db-&gt;query ( $sql, 2 );\n\n        // 修改数据\n        $data [0] = &apos;mary@gmail.com&apos;;\n        $data [1] = 3;\n        $sql = &quot;update blog_user set email = ? where id=? &quot;;\n        $bool = $this-&gt;db-&gt;query ( $sql, $data );\n\n        if ($bool) {\n            // mysql_affected_rows\n            echo &apos;受影响行数:&apos; . $this-&gt;db-&gt;affected_rows ();\n            echo &apos;自增ID:&apos; . $this-&gt;db-&gt;insert_id ();\n        }\n    使用CI的db增加改查都是使用$this-&gt;db-&gt;query()来进行处理.\n</code></pre><h1 id=\"AR模型操作数据库-active-record-CI3-0之后改名-query-builder-QB模型\"><a href=\"#AR模型操作数据库-active-record-CI3-0之后改名-query-builder-QB模型\" class=\"headerlink\" title=\"AR模型操作数据库 active_record (CI3.0之后改名 query_builder QB模型)\"></a><a id=\"AR模型操作数据库\"></a>AR模型操作数据库 active_record (CI3.0之后改名 query_builder QB模型)</h1><pre><code>配置\n    \\application\\config\\database.php 配置开启AR/QB模型(默认TRUE)\n        $active_record = TRUE; 配置为TRUE表示开启这项功能. (AR模型_2.2.0)\n        $query_builder = TRUE; 配置为TRUE表示开启这项功能. (QB模型_3.0.0)\n\n        \\system\\database\\DB_active_rec.php (为AR模型原代码_2.2.0)\n        \\system\\database\\DB_query_builder.php (为QB模型的原代码_2.2.0)\n\n    \\application\\config\\autoload.php 配置自动加载\n        $autoload[&apos;libraries&apos;] = array(&apos;database&apos;);\n\n使用增删改查\n    在配置文件中,配置表前缀后,会自动添加前缀.\n\n    插入:\n        $bool = $this-&gt;db-&gt;insert(&apos;表名&apos;,关联数组);\n\n        //TODO 通过AR/QB模型增加数据内容 insert 增加\n        $data  = array(\n            &apos;name&apos;=&gt;&apos;lili&apos;,\n            &apos;password&apos;=&gt;md5(&apos;lili&apos;)            \n        );\n        const TBL = &apos;user&apos;;//表名,常量\n        $bool = $this-&gt;db-&gt;insert(self::TBL,$data);\n        var_dump($bool);\n        echo &apos;&lt;hr&gt;&apos;;\n\n    更新:\n        $bool = $this-&gt;db-&gt;update(&apos;表名&apos;,关联数组,条件);\n\n        //TODO 通过AR/QB模型更新数据 update 更新\n        $data = array(\n                &apos;email&apos;=&gt;&apos;lili@gmail.com&apos;,\n                &apos;password&apos;=&gt;md5(&apos;123456&apos;),\n        );\n        $bool =$this-&gt;db-&gt;update(&apos;user&apos;,$data,array(&apos;id&apos;=&gt;4));\n        var_dump($bool);\n\n    删除:\n        $bool = $this-&gt;db-&gt;delete(&apos;表名&apos;,条件);\n\n        //TODO 通过AR/QB模型删除数据 delete 删除\n        $bool = $this-&gt;db-&gt;delete(&apos;user&apos;,array(&apos;id&apos;=&gt;4));\n        var_dump($bool);\n\n    查询:\n        $res = $this-&gt;db-&gt;get(&apos;表名&apos;,[&apos;条件&apos;]);//返回结果集对象. &apos;表名&apos;会自动增加为&apos;blog_表名&apos;\n        $res-&gt;result();//结合返回获取数据\n\n        //TODO 通过AR/QB模型获取数据表内容-查询\n        $res = $this-&gt;db-&gt;get ( &apos;user&apos; );//AR模型可以自动处理表前缀.并直接获取bolg_user表的数据\n\n        var_dump($res);\n        echo &apos;&lt;hr&gt;&apos;;\n        foreach ($res-&gt;result() as $item){\n            echo $item-&gt;name;\n            echo &apos;  &apos;;\n            echo $item-&gt;password;\n            echo &apos;  &apos;;\n            echo $item-&gt;email;\n            echo &apos;&lt;br&gt;&apos;;\n        }\n\n    连贯查询\n        //TODO 连贯查询\n        //SELECT `id`, `name` FROM `blog_user` WHERE `id` &gt;= 3 ORDER BY `id` desc LIMIT 2, 3\n        $res = $this-&gt;db-&gt;select(&apos;id,name&apos;)//\n        -&gt;from(&apos;user&apos;)//表名\n        -&gt;where(&apos;id &gt;=&apos; , 3)//&apos;id &gt;=&apos; 符号前面需要一个空格,如果符号不写默认&apos;=&apos;等于\n        -&gt;limit(3,2)//跳过2条,取后3条数据\n        -&gt;order_by(&apos;id desc&apos;)//通过id倒序\n        -&gt;get();//获取数据\n\n        var_dump($res-&gt;result());\n        echo &apos;&lt;br&gt;&apos;;\n        echo $this-&gt;db-&gt;last_query();//显示最后一条执行的SQL语句\n        //SELECT `id`, `name` FROM `blog_user` WHERE `id` &gt;= 3 ORDER BY `id` desc LIMIT 2, 3\n\n        更多where查询条件 \n            //SELECT * FROM `blog_user` WHERE `name` = &apos;mary&apos;\n            $res = $this-&gt;db-&gt;where(&apos;name&apos;,&apos;mary&apos;)-&gt;get (&apos;user&apos;);\n            //SELECT * FROM `blog_user` WHERE `name` != &apos;mary&apos;\n            $res = $this-&gt;db-&gt;where(&apos;name !=&apos;,&apos;mary&apos;)-&gt;get (&apos;user&apos;);\n            //SELECT * FROM `blog_user` WHERE `name` = &apos;mary&apos;\n            $res = $this-&gt;db-&gt;where(array(&apos;name&apos;=&gt;&apos;mary&apos;))-&gt;get (&apos;user&apos;);\n            //SELECT * FROM `blog_user` WHERE `name` = &apos;mary&apos; AND `id` &gt; 3\n            $res = $this-&gt;db-&gt;where(array(&apos;name&apos;=&gt;&apos;mary&apos;,&apos;id &gt;&apos;=&gt;3))-&gt;get (&apos;user&apos;);\n            echo $this-&gt;db-&gt;last_query();\n\n            复杂的查询,则建议用$this-&gt;db-&gt;query($sql,$data);//使用问题?绑定参数的方式查询\n</code></pre><h1 id=\"CI类库扩展\"><a href=\"#CI类库扩展\" class=\"headerlink\" title=\"CI类库扩展\"></a><a id=\"CI类库扩展\"></a>CI类库扩展</h1><pre><code>在system目录下的是CI框架的核心文件.如果需要进行扩展,只需要在对应的application目录下对应着system目录下的文件编写对应的类,即可扩展.\n例如: application 目录下有core helpers language libraries 目录均于system目录下的文件夹相一一对应.\n\n子类名前缀\n    \\application\\config\\config.php 子类名前缀\n    $config[&apos;subclass_prefix&apos;] = &apos;MY_&apos;;\n\n例如:扩展控制器\n    在application/core/MY_Controller.php 创建自定义的类继承自application/core/Controller.php  (CI_Controller 类名与文件名不同)\n\n    &lt;?php\n        class MY_Controller extends CI_Controller{\n            //构造方法\n            public function __construct(){\n                parent::__construct();//调用父类的构造方法\n                echo &apos;aaaaaaaaaaaaa&apos;;\n                //登录验证\n                //权限验证...等等\n            }\n        }\n    然后在application/controllers/目录下的控制器中使用继承自My_Controller的类即可使用,自定义的控制器.\n其它类库均类似的扩展.\n</code></pre><p><a id=\"扩展控制器CI_Controller-装载器Loader\"></a>案例:为网站设计不同的主题.前台,后台(扩展控制器CI_Controller,装载器Loader)</p>\n<pre><code>第一步，指定不同的视图View路径 . 在网站根目录下创建 themes 文件夹和 里面再创建default目录\n第二步，定义一个常量，在config/costants.php,如下\n    在application/config/constants.php 常量配置文件中配置常量.\n    #自定义系统相当常量 (主题目录)\n    define(&apos;THEMES_DIR&apos;,&apos;themes/&apos;); //指明视图路径地址.\n\n第三步，扩展CI类\n    视图的加载由loader类完成，(\\system\\core\\Loader.php)如下\n\n        CI 2.2.0\n            public function __construct()\n            {\n                $this-&gt;_ci_ob_level  = ob_get_level();\n                $this-&gt;_ci_library_paths = array(APPPATH, BASEPATH);\n                $this-&gt;_ci_helper_paths = array(APPPATH, BASEPATH);\n                $this-&gt;_ci_model_paths = array(APPPATH);\n                $this-&gt;_ci_view_paths = array(APPPATH.&apos;views/&apos;    =&gt; TRUE);\n            }\n        CI 3.0.0\n            protected $_ci_view_paths = array(VIEWPATH =&gt; TRUE);\n\n    扩展 Loader 类 (\\application\\core\\MY_Loader.php)\n        &lt;?PHP\n            defined(&apos;BASEPATH&apos;) OR exit(&apos;No direct script access allowed&apos;);\n\n            class MY_Loader extends CI_Loader{\n                //被开启的主题目录\n                protected $_theme = &apos;default/&apos;;\n\n                public function switch_themes_on(){\n                    $this-&gt;_ci_view_paths = array(FCPATH,THEMES_DIR,$this-&gt;_theme =&gt; TRUE);\n                }\n\n                public function switch_themes_off(){\n                    #just do nothing\n                }\n            }\n    扩展控制器\n        &lt;?PHP\n            defined(&apos;BASEPATH&apos;) OR exit(&apos;No direct script access allowed&apos;);\n\n            //前台控制器\n            class HomeController extends CI_Controller{\n                public function __construct(){\n                    parent::__construct();\n                    #开启皮肤功能\n                    $this-&gt;load-&gt;switch_themes_on();\n                }\n            }\n\n            //后台控制器\n            class AdminController extends CI_Controller{\n                public function __construct(){\n                    parent::__construct();\n                    #关闭皮肤功能\n                    $this-&gt;load-&gt;switch_themes_off();    \n                }\n            }\n\n第四步: 编写不同的控制器\n    application/controllers 下编写前台控制器 并继承 HomeController \n    application/controllers/admin 编写后台控制器 并继承 AdminController\n\n\n第五步: 编写不同的视图文件.\n     themes/default/ 目录下编写前台视图View \n     application/views 目录下编写后台试图View\n\n而模型 model 是共用的.    \n</code></pre><p>案例:<a href=\"#扩展CI的captcha_helper.php实现_验证码\">扩展CI的captcha<em>helper.php实现</em>验证码</a>        </p>\n<h1 id=\"url相关函数\"><a href=\"#url相关函数\" class=\"headerlink\" title=\"url相关函数\"></a><a id=\"url相关函数\"></a>url相关函数</h1><pre><code>http://codeigniter.org.cn/user_guide/helpers/url_helper.html\n\n//加载url帮助类 //默认在辅助函数/URL辅助函数中,默认不加载.\n$this-&gt;load-&gt;helper(&apos;url&apos;);//使用前需要加载标准类,或者配置自动加载\n    \\application\\config\\autoload.php 文件中配置\n    $autoload[&apos;helper&apos;] = array(&apos;url&apos;);\n\nbase_url();//返回网站根目录 application\\config\\config.php中: $config[&apos;base_url&apos;]=&apos;&apos;; 中配置的目录\n//http://127.0.0.1:8000/CodeIgniter-3.0.0\n\nsite_url(&apos;控制器/方法&apos;) //返回 base_url/index_page/控制器/方法 ($config[&apos;index_page&apos;] = &apos;index.php&apos;;)\n//如 http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php\n\n案例:\n\\application\\controllers\\url_demo_controllers.php\n&lt;?php\n    class Url_demo_controllers extends CI_Controller{\n        //http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/Url_demo_controllers\n        public function index(){\n            //加载url帮助类\n            $this-&gt;load-&gt;helper(&apos;url&apos;);\n            $this-&gt;load-&gt;view(&apos;user/url_demo&apos;);\n        }\n\n        public function insert(){\n            var_dump($this-&gt;input-&gt;post(&apos;name&apos;));\n        }\n    }\n\n\\application\\views\\user\\url_demo.php \n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;403 Forbidden&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;!-- &lt;form action=&quot;/CodeIgniter-3.0.0/index.php/Url_demo_controllers/insert&quot; method=&quot;post&quot;&gt; --&gt;\n&lt;form action=&quot;&lt;?php echo site_url(&apos;Url_demo_controllers/insert&apos;);?&gt;&quot; method=&quot;post&quot;&gt;\n    name&lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;&lt;br&gt;\n    password&lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt;&lt;br&gt;\n    email&lt;input type=&quot;text&quot; name=&quot;email&quot; /&gt;&lt;br&gt;\n    &lt;button type=&quot;submit&quot;&gt;submit&lt;/button&gt;\n&lt;/form&gt;\n\n&lt;!--     &lt;img alt=&quot;&quot; src=&quot;/CodeIgniter-3.0.0/uploads/logo.jpg&quot;/&gt; --&gt;\n    &lt;img alt=&quot;&quot; src=&quot;&lt;?php echo base_url();?&gt;uploads/logo.jpg&quot; width=&quot;100&quot;/&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h1 id=\"设置路由\"><a href=\"#设置路由\" class=\"headerlink\" title=\"设置路由\"></a><a id=\"设置路由\"></a>设置路由</h1><pre><code>路由配置文件\n    application/config/routes.php\n\n默认控制器 配置\n    $route[&apos;default_controller&apos;] = &apos;welcome&apos;;\n\n实现伪静态\n    $route[&apos;news/[\\d]{6}/([\\d]+)/([^\\s]+)&apos;]=&apos;routes_demo/showTwice/$1/$2&apos;;\n    //URL中的地址=对应的控制器/方法/参数 --  第一个() 对应$1 以此类推\n\n    案例: \n\n    &lt;?php\n        class Routes_demo extends CI_Controller {\n            // http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/routes_demo\n            public function index() {\n                echo &apos;routes_demo index &apos;;\n            }\n\n            // 路由配置目录 application/config/routes.php\n\n            // 原地址: http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/routes_demo/show/2\n            // 路由映射地址:\n            // http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/news/2.html\n            // 路由配置: $route[&apos;news/([\\d]+)\\.html&apos;]=&apos;routes_demo/show/$1&apos;;\n            // http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/news/201515/2.html\n            // 路由配置: $route[&apos;news/[\\d]{6}/([\\d]+)\\.html&apos;]=&apos;routes_demo/show/$1&apos;;\n            public function show($id = 0) {\n                echo &apos;这是文章&apos; . $id;\n            }\n\n            // 原地址:\n            // http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/routes_demo/showTwice/4/.jpg\n            // 路由映射地址:\n            // http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/news/201501/4/.jpg\n            // 路由配置: $route[&apos;news/[\\d]{6}/([\\d]+)/([^\\s]+)&apos;]=&apos;routes_demo/showTwice/$1/$2&apos;;\n            public function showTwice($id = 0, $res = &apos;&apos;) {\n                echo &apos;这是文章&apos; . $id . $res;\n            }\n        }\n</code></pre><h1 id=\"隐藏入口文件-index-php\"><a href=\"#隐藏入口文件-index-php\" class=\"headerlink\" title=\"隐藏入口文件-index.php\"></a><a id=\"隐藏入口文件-index.php\"></a>隐藏入口文件-index.php</h1><pre><code>如原地址为:\n    http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/routes_demo\n隐藏入口文件后只需要把地址写成即可:\n    http://127.0.0.1:8000/CodeIgniter-3.0.0/routes_demo\n\n1.需要开启Apache的 rewrite 功能 Apache2.2\\conf\\httpd.conf 修改如下: \n    修改前:\n        #LoadModule rewrite_module modules/mod_rewrite.so\n\n        ...\n        # AllowOverride controls what directives may be placed in .htaccess files.\n        # It can be &quot;All&quot;, &quot;None&quot;, or any combination of the keywords:\n        #   Options FileInfo AuthConfig Limit\n\n        AllowOverride None\n        ...\n\n    修改成:\n        # 搜索 mod_rewrite 与 .htaccess 关键字来进行查询修改项\n        LoadModule rewrite_module modules/mod_rewrite.so\n\n        &lt;Directory &quot;E:/ComTu_Design/PHP/Apache2.2/htdocs&quot;&gt;\n            Options Indexes FollowSymLinks\n            # AllowOverride controls what directives may be placed in .htaccess files.\n            # It can be &quot;All&quot;, &quot;None&quot;, or any combination of the keywords:\n            #   Options FileInfo AuthConfig Limit\n\n            AllowOverride all\n            Order allow,deny\n            Allow from all\n        &lt;/Directory&gt;\n\n    重启Apache.\n\n2.在入口文件同级目录(system/application同级目录)中,放入一个.htaccess 内容如下:\n    (技巧如果自己编写创建一个点.开头的文件可以使用记事本另存为的方式输入双引号&quot;.htaccess&quot;保存即可)\n    &lt;IfModule mod_rewrite.c&gt;\n        RewriteEngine on\n        RewriteCond %{REQUEST_FILENAME} !-d\n        RewriteCond %{REQUEST_FILENAME} !-f\n        RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]\n    &lt;/IfModule&gt;\n\n3.配置索引页 \\application\\config\\config.php \n    原: \n        $config[&apos;index_page&apos;] = &apos;index.php&apos;;\n    修改成: \n        $config[&apos;index_page&apos;] = &apos;&apos;;\n</code></pre><h1 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a><a id=\"分页\"></a>分页</h1><pre><code>http://codeigniter.org.cn/user_guide/libraries/pagination.html\n直接见源代码:\n\n\\application\\controllers\\paging_demo.php\n&lt;?php\n    class Paging_demo extends CI_Controller {\n        public function index() {\n        }\n        //http://127.0.0.1:8000/CodeIgniter-3.0.0/paging_demo/paging\n        public function paging() {\n            // 装载类文件\n            $this-&gt;load-&gt;library ( &apos;pagination&apos; );\n            // 每页显示10条数据\n            $page_size = 10;\n\n            $this-&gt;load-&gt;helper(&apos;url&apos;);\n            //配置页面\n            $config [&apos;base_url&apos;] = site_url(&apos;paging_demo/paging&apos;);\n            //一共有多少条数据\n            $config [&apos;total_rows&apos;] = &apos;200&apos;;\n            //每页显示条数\n            $config [&apos;per_page&apos;] = $page_size;\n\n            //分页的数据查询偏移量在哪一段上\n            $config[&apos;uri_seqment&apos;] = 3;\n\n            $config[&apos;first_link&apos;] = &apos;首页&apos;;\n            $config[&apos;next_link&apos;] = &apos;下一页&apos;;\n            $config[&apos;last_link&apos;] = &apos;最后一页&apos;;\n\n            $this-&gt;pagination-&gt;initialize ( $config );\n\n            //http://127.0.0.1:8000/CodeIgniter-3.0.0/paging_demo/paging/190\n            //获取链接地址第三段的参数190 与配置$config[&apos;uri_seqment&apos;]相对应\n            $offset = intval($this-&gt;uri-&gt;segment(3));//intval函数获取数字,无则返回0\n\n            //拼接Sql查询语句\n            $sql = &quot;select * from blog_user limit $offset , $page_size&quot;;\n            echo $sql.&apos;&lt;br&gt;&apos;;\n\n            //生成链接\n            $data[&apos;links&apos;]=$this-&gt;pagination-&gt;create_links ();\n            //在页面中显示\n            $this-&gt;load-&gt;view(&apos;user/paging_view&apos;,$data);\n        }\n    }\n\n    \\application\\views\\user\\paging_view.php\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot;&gt;\n        &lt;title&gt;分页&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;?=$links ?&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre><p><a id=\"扩展_修改分页生成的代码\"></a>扩展_修改分页生成的代码</p>\n<pre><code>拷贝system/libraries/Pagination.php 到 application/libraries/目录 直接修改如下:\n    这样做之后CI会自动查找到application/libraries/Pagination.php 做为分页类.\nCI 3.0.0\n    //Generate the pagination links\n    public function create_links(){//398行\n        //省略很多代码.\n        //原: //650行\n        //return $this-&gt;full_tag_open.$output.$this-&gt;full_tag_close;\n\n        //修改如下: 自定义内容 当然,发挥自己的想象去修改\n        $baseinfo = &quot;总共 $this-&gt;total_rows 条记录，每页显示 $this-&gt;per_page 条，\n        总计 $num_pages 页，当前是第  $this-&gt;cur_page 页&quot;.&apos;&amp;nbsp;&amp;nbsp;&amp;nbsp;&apos;;\n        return $baseinfo.$this-&gt;full_tag_open.$output.$this-&gt;full_tag_close;\n    }\nCI 2.2.0\n    function create_links(){//115行\n        //省略很多代码.\n        // Add the wrapper HTML if exists //331行\n        //$output = $this-&gt;full_tag_open.$output.$this-&gt;full_tag_close;\n        //return $output;\n\n        //修改如下: 自定义内容 当然,发挥自己的想象去修改\n        $baseinfo = &quot;总共 $this-&gt;total_rows 条记录，每页显示 $this-&gt;per_page 条，\n        总计 $num_pages 页，当前是第  $this-&gt;cur_page 页&quot;.&apos;&amp;nbsp;&amp;nbsp;&amp;nbsp;&apos;;\n        return $baseinfo.$output;\n    }\n</code></pre><h1 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a><a id=\"文件上传\"></a>文件上传</h1><pre><code>http://codeigniter.org.cn/user_guide/libraries/file_uploading.html\n\n案例见代码: \n\\application\\controllers\\upload_demo.php\n&lt;?php\nclass Upload_demo extends CI_Controller {\n    public function index() {\n    }\n\n    // http://127.0.0.1:8000/CodeIgniter-3.0.0/upload_demo/file\n    public function file() {\n        $data [&apos;error&apos;] = &apos;&apos;;\n        $data [&apos;upload_data&apos;] = &apos;&apos;;\n\n        $this-&gt;load-&gt;helper ( &apos;url&apos; );\n        $this-&gt;load-&gt;view ( &apos;user/upload_view_demo&apos;, $data );\n    }\n    public function upload() {\n        // 上传目录需要手动创建\n        $config [&apos;upload_path&apos;] = &apos;./uploads/&apos;;\n        $config [&apos;allowed_types&apos;] = &apos;gif|jpg|png&apos;;\n        $config [&apos;max_size&apos;] = 100;//kb\n        $config [&apos;max_width&apos;] = 1024;\n        $config [&apos;max_height&apos;] = 768;\n        // 上传后的文件名/不设置则默认原文件名,如果文件名冲突,则会在文件名中加入递增数字\n        //$config [&apos;file_name&apos;] = uniqid (); \n\n        $this-&gt;load-&gt;library ( &apos;upload&apos;, $config );\n\n        $this-&gt;upload-&gt;do_upload ( &apos;pic&apos; );//上传的input name\n        $this-&gt;upload-&gt;do_upload ( &apos;pic2&apos; );//上传的input name\n\n        $data = array (\n                &apos;upload_data&apos; =&gt; $this-&gt;upload-&gt;data () ,//上传成功\n                &apos;error&apos; =&gt; $this-&gt;upload-&gt;display_errors ()//错误信息\n        );\n        $this-&gt;load-&gt;view ( &apos;user/upload_view_demo&apos;, $data );\n    }\n}\n\n\\application\\views\\user\\upload_view_demo.php\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;title&gt;文件上传&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;?php \n    if($error){    echo $error;}\n    ?&gt;\n\n    &lt;form action=&quot;&lt;?php echo site_url(&apos;upload_demo/upload&apos;)?&gt;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;\n        &lt;input type=&quot;file&quot; name=&quot;pic&quot; /&gt;&lt;/br&gt;\n        &lt;input type=&quot;file&quot; name=&quot;pic2&quot; /&gt;&lt;/br&gt;\n        &lt;input type=&quot;submit&quot; name=&quot;上传&quot; /&gt;\n    &lt;/form&gt;\n\n    &lt;?php if ($upload_data):?&gt;\n        &lt;?php foreach ($upload_data as $item =&gt; $value):?&gt;\n            &lt;li&gt;&lt;?php echo $item;?&gt;: &lt;?php echo $value;?&gt;&lt;/li&gt;\n        &lt;?php endforeach; ?&gt;\n    &lt;?php endif ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h1 id=\"图片处理类\"><a href=\"#图片处理类\" class=\"headerlink\" title=\"图片处理类\"></a><a id=\"图片处理类\"></a>图片处理类</h1><pre><code>$config[&apos;image_library&apos;] = &apos;gd2&apos;;\n$config[&apos;source_image&apos;] = &apos;/path/to/image/mypic.jpg&apos;;\n$config[&apos;create_thumb&apos;] = TRUE;\n$config[&apos;maintain_ratio&apos;] = TRUE;\n$config[&apos;width&apos;] = 75;\n$config[&apos;height&apos;] = 50;\n\n$this-&gt;load-&gt;library(&apos;image_lib&apos;, $config); \n\n$this-&gt;image_lib-&gt;resize();  //创建缩略图  \n// $this-&gt;image_lib-&gt;crop() //图像裁剪\n// $this-&gt;image_lib-&gt;rotate() //图像旋转 \n// $this-&gt;image_lib-&gt;watermark() //添加图像水印\n// $this-&gt;image_lib-&gt;clear()  //clear函数重置所有之前用于处理图片的值。当你用循环来处理一批图片时，你可能会想使用它。\n\n//处理不同的图片有不同的配置,详情见文档\nhttp://codeigniter.org.cn/user_guide/libraries/image_lib.html\n\n\n//获取相应属性\n$this-&gt;image_lib-&gt;thumb_marker; \n//错误信息\n$this-&gt;image_lib-&gt;display_errors();\n</code></pre><h1 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a><a id=\"Session\"></a>Session</h1><pre><code>http://codeigniter.org.cn/user_guide/libraries/sessions.html\nSession 类将每个用户的 session 信息序列化（serialize）后存储到到 cookie 中（并同时进行加密）。\n\nci的Session是存储到cookie中.PHP原生的session是放到服务器中.\n所以需要加密.可查看值,但不能修改.因为提交时会通过密钥校验数据完整性.\n\n配置 \\application\\config\\config.php\n\n    配置Session加密(CI2.2可配置,CI3.0.0抛弃了此功能):\n        原:\n            $config[&apos;sess_encrypt_cookie&apos;]    = FALSE;\n        修改为:\n            $config[&apos;sess_encrypt_cookie&apos;]    = TRUE;\n\n    配置Session关闭浏览器后失效(CI2.2可配置,CI3.0.0无此配置项):\n        原:\n            $config[&apos;sess_expire_on_close&apos;] = FALSE;\n        修改为:\n            $config[&apos;sess_expire_on_close&apos;] = TRUE;\n\n        CI3.0.0 需要如下实现(关闭浏览器销毁session,不关闭或者不退出,则一直有效):\n            $config[&apos;sess_expiration&apos;] = 0; \n\n    配置Session密钥:\n\n        原:\n            $config[&apos;encryption_key&apos;] = &apos;&apos;;\n        修改密钥(可用echo md5(uniqid());生成一个值当密钥):\n            $config[&apos;encryption_key&apos;] = &apos;05c072360c5ac7e19d5b2566a995991c&apos;;\n\n    配置Session文件路径:\n\n        CI3.0.0版本需要配置此项,不然会出现 Message: mkdir() [function.mkdir]: Invalid argument 异常\n        CI3.0.0之前版本可以不要设置.(CodeIgniter_2.2.0测试查看,无此参数)\n\n        原:\n            $config[&apos;sess_save_path&apos;] = NULL;\n        新session路径(注意~~些路径需要要使用绝对路径)\n            创建目录用于存储Session:E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\CodeIgniter-3.0.0\\application\\session\n            $config[&apos;sess_save_path&apos;] = &apos;E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\CodeIgniter-3.0.0\\application\\session&apos;;\n\n        可查看 sess_save_path 配置相关文档\n            http://codeigniter.org.cn/user_guide/libraries/sessions.html\n            http://php.net/manual/en/session.configuration.php#ini.session.save-path\n\n    //加载模块\n    $this-&gt;load-&gt;library(&apos;session&apos;);\n    //存储session\n    $user = $this-&gt;session-&gt;set_userdata ( &apos;user&apos;, $user );\n    //取session\n    $user = $this-&gt;session-&gt;userdata(&apos;user&apos;);\n    //删除session\n    $this-&gt;session-&gt;unset_userdata(&apos;user&apos;);\n    $this-&gt;session-&gt;unset_userdata($array_items);//删除多个session\n</code></pre><p>Ci的Session实现案例:</p>\n<pre><code>案例见代码: \n&lt;?php\nclass Session_demo extends CI_Controller {\n    public function index(){}\n\n    public function __construct(){\n        parent::__construct();\n        $this-&gt;load-&gt;library(&apos;session&apos;);\n    }\n\n    // 先存储session \n    // http://127.0.0.1:8000/CodeIgniter-3.0.0/session_demo/set_session\n    // 在取出sesson(刷新演示一次性的数据)\n    // http://127.0.0.1:8000/CodeIgniter-3.0.0/session_demo/show_session\n    public function set_session() {\n        //echo md5(uniqid());exit;\n\n        $user = array(&apos;id&apos;=&gt;3,&apos;name&apos;=&gt;&apos;jack&apos;);\n\n        // 相当于原生的:\n        // session_start();\n        // $_SESSION[&quot;user&quot;] = $user;\n\n        $user = $this-&gt;session-&gt;set_userdata ( &apos;user&apos;, $user );\n        var_dump($user);//取出来NULL\n        echo &apos;&lt;br&gt;&apos;;\n\n        //取session\n        $user = $this-&gt;session-&gt;userdata(&apos;user&apos;);\n        var_dump($user);\n\n        //一次性的数据,只能读一次\n        $this-&gt;session-&gt;set_flashdata(&apos;test&apos;,&apos;testdate-aaaaaaaaaaaa&apos;);\n    }\n\n    //http://127.0.0.1:8000/CodeIgniter-3.0.0/session_demo/show_session\n    public function show_session(){\n        //获取CI session中的数据\n        $user = $this-&gt;session-&gt;userdata(&apos;user&apos;);\n        var_dump($user);\n\n        //只可以取一次,取完后就会被删除.\n        $test=$this-&gt;session-&gt;flashdata(&apos;test&apos;);\n        var_dump($test);\n    }\n\n    public function delete_session(){\n        //删除单个session\n        $this-&gt;session-&gt;unset_userdata(&apos;user&apos;);\n\n        // //删除多个session\n        // $array_items = array(&apos;user&apos;, &apos;test&apos;);\n        // $this-&gt;session-&gt;unset_userdata($array_items);\n    }\n\n    public function originalPHPsession(){\n        // 原生session\n        session_start();\n        //存储验证码信息到PHP原生的session中.\n        $_SESSION[&quot;cap&quot;] = &apos;abc&apos;;\n\n        //获取Session\n        $word = $_SESSION[&apos;cap&apos;];\n        echo $word;\n\n        //终结 Session\n        unset($_SESSION[&apos;cap&apos;]);\n        //重置session  , 失去所有已存储的 session 数据。\n        //session_destroy();\n    }\n}\n</code></pre><h1 id=\"验证码\"><a href=\"#验证码\" class=\"headerlink\" title=\"验证码\"></a><a id=\"验证码\"></a>验证码</h1><pre><code>ci的验证码会创建一个图片文件,所以需要创建文件夹用来存放\n    E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\CodeIgniter-3.0.0\\captcha\n\n使用CI验证码需要开启PHP的 GD 图像库\n    可用PHP代码检测是否开启GD图像库\n        if(extension_loaded(&apos;gd&apos;)){\n            echo &apos;你可以使用gd&lt;br&gt;&apos;;\n            foreach (gd_info() as $cate=&gt;$value)\n                echo &quot;$cate: $value&lt;br&gt;&quot;;\n        }else echo &apos;没有安装gd扩展&apos;;\n\n    开启 GD 图像库 方法:\n        E:\\ComTu_Design\\PHP\\php-5.3.5\\php.ini 配置文件修改如下:\n        原: \n            ;extension=php_gd2.dll\n        修改成(去除前面的;分号): \n            extension=php_gd2.dll\n        修改完后保存,重启apache\n</code></pre><p>CI默认实现:</p>\n<pre><code>//加载模块\n$this-&gt;load-&gt;helper(&apos;captcha&apos;);\n//创建验证码\n$cap = create_captcha($vals);\n//显示验证码\necho $cap[&apos;image&apos;];\n\n案例见代码: \n&lt;?php\nclass Captcha_demo extends CI_Controller{\n    public function index(){}\n\n    public function test(){\n        echo &apos;captcha_demo&apos;;\n\n        if(extension_loaded(&apos;gd&apos;)){\n            echo &apos;你可以使用gd&lt;br&gt;&apos;;\n            foreach (gd_info() as $cate=&gt;$value)\n                echo &quot;$cate: $value&lt;br&gt;&quot;;\n        }else echo &apos;没有安装gd扩展&apos;;\n\n        $this-&gt;load-&gt;helper(&apos;url&apos;);\n        $this-&gt;load-&gt;helper(&apos;captcha&apos;);\n        $number = rand(1000,9999);//生成随机字符串\n        $vals = array(\n                &apos;word&apos;      =&gt; $number,//可指定验证码内容,如果是中文.需要有支持的字体\n                &apos;img_path&apos;  =&gt; dirname(BASEPATH).&apos;/captcha/&apos;,//生成的图片存放目录,手动创建\n                &apos;img_url&apos;   =&gt; base_url(&apos;/captcha/&apos;),//图片链接地址\n                //&apos;font_path&apos; =&gt; &apos;./path/to/fonts/texb.ttf&apos;,//指定字体_如果使用中文需要指定字体\n                &apos;img_width&apos; =&gt; &apos;150&apos;,\n                &apos;img_height&apos;    =&gt; 30,\n                &apos;expiration&apos;    =&gt; 5,//图片存放时间,如果过期,只有在被再次请求才会删除.单位秒\n                &apos;word_length&apos;   =&gt; 8,\n                &apos;font_size&apos; =&gt; 16,\n                &apos;img_id&apos;    =&gt; &apos;Imageid&apos;,\n                &apos;pool&apos;      =&gt; &apos;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;,\n\n                // White background and border, black text and red grid\n                &apos;colors&apos;    =&gt; array(\n                        &apos;background&apos; =&gt; array(255, 255, 255),\n                        &apos;border&apos; =&gt; array(255, 255, 255),\n                        &apos;text&apos; =&gt; array(0, 0, 0),\n                        &apos;grid&apos; =&gt; array(255, 40, 40)\n                )\n        );\n\n        $cap = create_captcha($vals);\n        echo $cap[&apos;word&apos;].&quot;&lt;br&gt;&quot;;\n        echo $cap[&apos;image&apos;];\n\n        $this-&gt;load-&gt;view(&apos;user/captcha_view_demo&apos;,array(&apos;cap&apos;=&gt;$cap[&apos;image&apos;]));\n\n        // 原生session\n        session_start();\n        //存储验证码信息到PHP原生的session中.等待校验.\n        $_SESSION[&quot;cap&quot;] = $cap[&apos;word&apos;];\n\n        //获取Session\n        $word = $_SESSION[&apos;cap&apos;];\n        echo $word;\n    }\n}\n</code></pre><p><a id=\"扩展CI的captcha_helper.php实现_验证码\"></a>扩展CI的captcha<em>helper.php实现</em>验证码:</p>\n<pre><code>一般而言,对于验证码只需要用一次,没必要创建一张图片保存到本地.\n所以我对验证码类进行了如下扩展: 不存储验证码图片,并实现点击重新获取验证码.\n\n步骤一: \n\n    把 system/helpers/captcha_helper.php 文件拷贝到 application/helpers/ 目录下并重命名为:MY_captcha_helper.php\n\n步骤二:  去除与目录有关的代码\n\n    修改 MY_captcha_helper.php 里面的源文件进行如下操作:\n\n    (CI 3.0.0)\n        //处理如果没有设置图片路径而被返回的操作\n        //         if ($img_path === &apos;&apos; OR $img_url === &apos;&apos;\n        //             OR ! is_dir($img_path) OR ! is_really_writable($img_path)\n        //             OR ! extension_loaded(&apos;gd&apos;))\n        //         {\n        //             return FALSE;\n        //         }\n        //         // -----------------------------------\n        //         // Remove old images\n        //         // 删除旧图片\n        //         // -----------------------------------\n        //         $now = microtime(TRUE);\n        //         $current_dir = @opendir($img_path);\n        //         while ($filename = @readdir($current_dir))\n        //         {\n        //             if (substr($filename, -4) === &apos;.jpg&apos; &amp;&amp; (str_replace(&apos;.jpg&apos;, &apos;&apos;, $filename) + $expiration) &lt; $now)\n        //             {\n        //                 @unlink($img_path.$filename);\n        //             }\n        //         }\n        //         @closedir($current_dir);\n\n        // -----------------------------------\n        //  Generate the image\n        // 生成图片.\n        // -----------------------------------\n        //处理生成图片--start--\n        //         $img_url = rtrim($img_url, &apos;/&apos;).&apos;/&apos;;\n        //         if (function_exists(&apos;imagejpeg&apos;))\n        //         {\n        //             $img_filename = $now.&apos;.jpg&apos;;\n        //             imagejpeg($im, $img_path.$img_filename);\n        //         }\n        //         elseif (function_exists(&apos;imagepng&apos;))\n        //         {\n        //             $img_filename = $now.&apos;.png&apos;;\n        //             imagepng($im, $img_path.$img_filename);\n        //         }\n        //         else\n        //         {\n        //             return FALSE;\n        //         }\n        //         $img = &apos;&lt;img &apos;.($img_id === &apos;&apos; ? &apos;&apos; : &apos;id=&quot;&apos;.$img_id.&apos;&quot;&apos;).&apos; src=&quot;&apos;.$img_url.$img_filename.&apos;&quot; style=&quot;width: &apos;.$img_width.&apos;; height: &apos;.$img_height .&apos;; border: 0;&quot; alt=&quot; &quot; /&gt;&apos;;\n        //         ImageDestroy($im);\n        //         return array(&apos;word&apos; =&gt; $word, &apos;time&apos; =&gt; $now, &apos;image&apos; =&gt; $img, &apos;filename&apos; =&gt; $img_filename);\n        //处理生成图片--end--\n        //并在此处 增加如下四行代码,告诉浏览器返回的是一张图片.\n        header(&quot;Content-Type:image/jpeg&quot;);  \n        imagejpeg($im);\n        ImageDestroy($im);\n        return $word;//返回生成的验证码字符串\n\n\n    (CI 2.2.0)\n        //处理如果没有设置图片路径而被返回的操作\n        // if ($img_path == &apos;&apos; OR $img_url == &apos;&apos;){\n        //     return FALSE;\n        // }\n        // if ( ! @is_dir($img_path)){\n        //     return FALSE;\n        // }\n        // if ( ! is_writable($img_path)){\n        //     return FALSE;\n        // }\n        // if ( ! extension_loaded(&apos;gd&apos;)){\n        //     return FALSE;\n        // }\n        // // -----------------------------------\n        // // Remove old images\n        // // 生成图片.\n        // // -----------------------------------\n        // list($usec, $sec) = explode(&quot; &quot;, microtime());\n        // $now = ((float)$usec + (float)$sec);\n        // $current_dir = @opendir($img_path);\n        // while ($filename = @readdir($current_dir)){\n        //     if ($filename != &quot;.&quot; and $filename != &quot;..&quot; and $filename != &quot;index.html&quot;){\n        //         $name = str_replace(&quot;.jpg&quot;, &quot;&quot;, $filename);\n        //         if (($name + $expiration) &lt; $now){\n        //             @unlink($img_path.$filename);\n        //         }\n        //     }\n        // }\n        // @closedir($current_dir);\n\n        // -----------------------------------\n        //  Generate the image\n        // -----------------------------------\n        // $img_name = $now.&apos;.jpg&apos;;\n        // ImageJPEG($im, $img_path.$img_name);\n        // $img = &quot;&lt;img src=\\&quot;$img_url$img_name\\&quot; width=\\&quot;$img_width\\&quot; height=\\&quot;$img_height\\&quot; style=\\&quot;border:0;\\&quot; alt=\\&quot; \\&quot; /&gt;&quot;;\n        // ImageDestroy($im);\n        // return array(&apos;word&apos; =&gt; $word, &apos;time&apos; =&gt; $now, &apos;image&apos; =&gt; $img);\n        //并在此处 增加如下四行代码,告诉浏览器返回的是一张图片.\n        header(&quot;Content-Type:image/jpeg&quot;);  \n        imagejpeg($im);\n        ImageDestroy($im);\n        return $word;//返回生成的验证码字符串\n\n\n步骤三: \n    在控制器中使用 captcha\n    &lt;?php\n    defined(&apos;BASEPATH&apos;) OR exit(&apos;No direct script access allowed&apos;);\n\n    class Privilege extends CI_Controller {\n        public function __construct(){\n            parent::__construct();\n            //载入验证码辅助函数\n            $this-&gt;load-&gt;helper(&apos;captcha&apos;);\n        }\n\n        public function login(){\n            $this-&gt;load-&gt;view(&apos;login&apos;);\n        }\n\n        public function code(){\n            //创建验证码\n            $word = create_captcha();\n\n            //可以在MY_captcha_helper.php直接配置参数也是OK的.\n            //当然同样适用于配置参数.但可以免去了 CI文档中的 img_path 与 img_url 这两个必要参数了.\n            // $vals = array(\n            //     &apos;word&apos;      =&gt; rand(1000,9999),//可指定验证码内容,如果是中文.需要有支持的字体\n            //     //&apos;font_path&apos; =&gt; &apos;./path/to/fonts/texb.ttf&apos;,//指定字体_如果使用中文需要指定字体\n            //     &apos;img_width&apos; =&gt; &apos;150&apos;,\n            //     &apos;img_height&apos;    =&gt; 30,\n            //     &apos;expiration&apos;    =&gt; 5,//图片存放时间,如果过期,只有在被再次请求才会删除.单位秒\n            //     &apos;word_length&apos;   =&gt; 4, //验证码位数\n            //     &apos;font_size&apos; =&gt; 16,\n            //     &apos;img_id&apos;    =&gt; &apos;Imageid&apos;,\n            //     &apos;pool&apos;      =&gt; &apos;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;,\n            //     // White background and border, black text and red grid\n            //     &apos;colors&apos;    =&gt; array(\n            //     &apos;background&apos; =&gt; array(255, 255, 255),\n            //     &apos;border&apos; =&gt; array(255, 255, 255),\n            //     &apos;text&apos; =&gt; array(0, 0, 0),\n            //     &apos;grid&apos; =&gt; array(255, 40, 40)\n            // )\n            // );\n            //$word = create_captcha($vals);\n        }\n    }\n\n步骤四: view中显示 .并实现点击图片重新加载新图片的功能:\n    &lt;img src=&quot;&lt;?php echo site_url(&apos;admin/privilege/code&apos;);?&gt;&quot; width=&quot;145&quot; height=&quot;20&quot; alt=&quot;CAPTCHA&quot; border=&quot;1&quot;\n    onclick= this.src=&quot;&lt;?php echo site_url(&apos;admin/privilege/code&apos;).&apos;/&apos;;?&gt;&quot;+Math.random() style=&quot;cursor: pointer;&quot; title=&quot;看不清？点击更换另一个验证码。&quot;/&gt;\n</code></pre><h1 id=\"表单验证\"><a href=\"#表单验证\" class=\"headerlink\" title=\"表单验证\"></a><a id=\"表单验证\"></a>表单验证</h1><pre><code>http://codeigniter.org.cn/user_guide/libraries/form_validation.html\n\n实现: \n    //加载模块\n    $this-&gt;load-&gt;helper ( array (&apos;form&apos;,&apos;url&apos;) );\n    $this-&gt;load-&gt;library ( &apos;form_validation&apos; );\n    //设置校验规则,参数一:表单上的名称,参数二:错误信息显示的名称,参数三:校验的规则见标准文档\n    //http://codeigniter.org.cn/user_guide/libraries/form_validation.html#id25\n    $this-&gt;form_validation-&gt;set_rules(&apos;参数名&apos;,&apos;用户名&apos;,&apos;required&apos;);\n    //表单校验 返回true表示校验通过\n    $bool = $this-&gt;form_validation-&gt;run();\n    //表单校验加载校验规则 使用配置文件 application/config/form_validation.php 如果没有自己创建.\n    //$bool = $this-&gt;form_validation-&gt;run(&apos;demo&apos;);//参数名与config文件中的相对应.\n\n    form表单中\n        //自动回填内容项\n        &lt;?php echo set_value(&apos;参数名&apos;)?&gt;\n        //显示错误信息, 参数一:为form中的表单名,参数二,三:参数样式\n        &lt;?php echo form_error(&apos;参数名&apos;,&apos;&lt;span&gt;&apos;,&apos;&lt;/span&gt;&apos;)?&gt;\n        //显示全部错误信息\n        &lt;?php echo validation_errors();?&gt;\n</code></pre><p>案例见代码: </p>\n<pre><code>\\application\\controllers\\form_demo.php\n    &lt;?php\n    class Form_demo extends CI_Controller {\n        public function index() {\n        }\n        // http://127.0.0.1:8000/CodeIgniter-3.0.0/form_demo/insert\n        public function insert() {\n            $this-&gt;load-&gt;helper ( array (&apos;form&apos;,&apos;url&apos;) );\n            //加载模块\n            $this-&gt;load-&gt;library ( &apos;form_validation&apos; );\n\n            // 校验如果这样编写会编写很多规则代码.可以在config进行配置验证文件.也可实现重复利用的效果\n            // $this-&gt;form_validation-&gt;set_rules(&apos;name&apos;,&apos;用户名&apos;,&apos;required&apos;);\n            // $this-&gt;form_validation-&gt;set_rules(&apos;password&apos;,&apos;密码&apos;,&apos;required|min_length[6]|max_length[16]|md5&apos;);\n            //$this-&gt;form_validation-&gt;set_rules(&apos;repassword&apos;,&apos;确认密码&apos;,&apos;trim|required|md5|matches[password]&apos;);//重复密码验证\n            // $this-&gt;form_validation-&gt;set_rules(&apos;email&apos;,&apos;邮箱&apos;,array(&apos;required&apos;,&apos;valid_email&apos;));\n            // // 表单验证\n            // $bool = $this-&gt;form_validation-&gt;run();\n\n            // 表单验证配置文件 application/config/form_validation.php\n            $bool = $this-&gt;form_validation-&gt;run(&apos;demo&apos;);\n            if ($bool) {\n                // 调用模型保存数据库\n                echo &apos;success&apos;;\n            } else {\n                // 显示错误信息\n                $this-&gt;load-&gt;view ( &apos;user/form_view_demo&apos; );\n            }\n\n            echo $bool;\n        }\n    }\n\n--------\n\\application\\views\\user\\form_view_demo.php\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot;&gt;\n        &lt;title&gt;表单验证&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;?php echo validation_errors();?&gt;\n\n    &lt;form action=&quot;&lt;?php echo site_url(&apos;form_demo/insert&apos;);?&gt;&quot; method=&quot;post&quot;&gt;\n        name&lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;&lt;?php echo set_value(&apos;name&apos;)?&gt;&quot;/&gt;\n        &lt;?php echo form_error(&apos;name&apos;,&apos;&lt;span&gt;&apos;,&apos;&lt;/span&gt;&apos;)?&gt;\n        &lt;br&gt;\n        password&lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt;\n        &lt;?php echo form_error(&apos;password&apos;,&apos;&lt;span&gt;&apos;,&apos;&lt;/span&gt;&apos;)?&gt;\n        &lt;br&gt;\n        email&lt;input type=&quot;text&quot; name=&quot;email&quot; value=&quot;&lt;?php echo set_value(&apos;email&apos;)?&gt;&quot;/&gt;\n        &lt;?php echo form_error(&apos;email&apos;,&apos;&lt;span&gt;&apos;,&apos;&lt;/span&gt;&apos;)?&gt;\n        &lt;br&gt;\n        &lt;button type=&quot;submit&quot;&gt;submit&lt;/button&gt;\n    &lt;/form&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n--------\n\\application/config/form_validation.php\n    &lt;?php\n        $config = array (\n            &apos;demo&apos; =&gt; array (\n                    array (\n                            &apos;field&apos; =&gt; &apos;name&apos;,\n                            &apos;label&apos; =&gt; &apos;用户名&apos;,\n                            &apos;rules&apos; =&gt; &apos;required&apos; \n                    ) ,\n                    array (\n                            &apos;field&apos; =&gt; &apos;password&apos;,\n                            &apos;label&apos; =&gt; &apos;密码&apos;,\n                            &apos;rules&apos; =&gt; &apos;required&apos; \n                    ),\n                    array (\n                            &apos;field&apos; =&gt; &apos;email&apos;,\n                            &apos;label&apos; =&gt; &apos;邮箱&apos;,\n                            &apos;rules&apos; =&gt; &apos;required|valid_email&apos; \n                    )\n            ),\n            &apos;signup&apos;=&gt;array( ....  )\n        );\n</code></pre><h1 id=\"语言包\"><a href=\"#语言包\" class=\"headerlink\" title=\"语言包\"></a><a id=\"语言包\"></a>语言包</h1><pre><code>如表单错误信息等语言.\n    将语言包解压到\n        \\application\\language\\zh_cn\n    配置语言:\n        \\application\\config\\config.php\n        原:\n            $config[&apos;language&apos;]    = &apos;english&apos;;\n        改成\n            $config[&apos;language&apos;]    = &apos;zh_cn&apos;;\n</code></pre><h1 id=\"购物车类库\"><a href=\"#购物车类库\" class=\"headerlink\" title=\"购物车类库\"></a><a id=\"购物车类库\"></a>购物车类库</h1><pre><code>http://codeigniter.org.cn/user_guide/libraries/cart.html\n\nCI3.0.0 官方上标注: 之后购物车类已经废弃，请不要使用。目前保留它只是为了向前兼容。\n\n引入购物车支持库\n$this-&gt;load-&gt;library(&apos;cart&apos;);\n//$autoload[&apos;libraries&apos;] = array(&apos;cart&apos;);//或者配置 application/config/autoload.php\n\n加入购物车\n    //名称有要求\n    $data[&apos;id&apos;] = $this-&gt;input-&gt;post(&apos;goods_id&apos;,true); //id\n    $data[&apos;name&apos;] = $this-&gt;input-&gt;post(&apos;goods_name&apos;,true); //商品名称\n    $data[&apos;qty&apos;] = $this-&gt;input-&gt;post(&apos;goods_nums&apos;,true); //数量\n    $data[&apos;price&apos;] = $this-&gt;input-&gt;post(&apos;shop_price&apos;,true); //金额\n\n    $goods_thumb= $this-&gt;input-&gt;post(&apos;goods_thumb&apos;,true);\n    $data[&apos;options&apos;] = array(&apos;goods_thumb&apos;=&gt;$goods_thumb);//更多信息\n\n    if($this-&gt;cart-&gt;insert($data)){\n        echo &apos;ok&apos;;\n    }else{\n        echo &apos;error&apos;;\n    }\n\n//获取购物车数据\n$data[&apos;carts&apos;] = $this-&gt;cart-&gt;contents();\n\n//view中获取展示数据\n&lt;?php foreach ($carts as $v):?&gt;\n    &lt;?php echo base_url(&apos;public/uploads&apos;).&apos;/&apos;.$v[&apos;options&apos;][&apos;goods_thumb&apos;];?&gt;\n    &lt;?php echo $v[&apos;id&apos;];?&gt;\n    &lt;?php echo $v[&apos;name&apos;];?&gt; \n    &lt;?php echo $v[&apos;price&apos;];?&gt;\n    &lt;?php echo $v[&apos;qty&apos;];?&gt;\n    &lt;!-- 自动生成 --&gt;\n    &lt;?php echo $v[&apos;row_id&apos;];?&gt;\n    &lt;!-- 自动生成 $v[&apos;subtotal&apos;] 会自动计算出总金额--&gt;\n    &lt;?php echo $v[&apos;subtotal&apos;]?&gt;\n&lt;?php endforeach;?&gt;\n\n删除/修改购物车\n    $data[&apos;rowid&apos;] = $rowid;\n    $data[&apos;qty&apos;] = 0;\n    $this-&gt;cart-&gt;update($data);\n    redirect(&apos;cart/show&apos;);\n\n注意事项:\n\n    1. 中文问题(2.2.0存在,3.0.0不存在)\n        $data[&apos;name&apos;] = $this-&gt;input-&gt;post(&apos;goods_name&apos;,true); //商品名称\n        中name项在 CI3.0.0之前是不支持中文内容的. CI3.0.0版本可支持中文.\n        CI2.2.0修改cart.php原文件来使name支持中文.\n            方法: system/library/Cart.php 拷贝到 application/library 中,找到如下代码并注释即可.\n\n                // Validate the product name. It can only be alpha-numeric, dashes, underscores, colons or periods.\n                // Note: These can be user-specified by setting the $this-&gt;product_name_rules variable.\n                //CI2.2.0的原代码在186行数\n                //if ( ! preg_match(&quot;/^[&quot;.$this-&gt;product_name_rules.&quot;]+$/i&quot;, $items[&apos;name&apos;]))\n                //{\n                //    log_message(&apos;error&apos;, &apos;An invalid name was submitted as the product name:\n                //    &apos;.$items[&apos;name&apos;].&apos; The name can only contain alpha-numeric\n                //    characters, dashes, underscores, colons, and spaces&apos;);\n                //    return FALSE;\n                //}\n    2.total_items 问题 (CI2.2.0与CI3.0.0都存在)\n        显示购物车中商品数量。 CI框架中默认是显示出商品数量总数\n        即:如果存放到购物车2双鞋子+1条裤子 &lt;?php echo $this-&gt;cart-&gt;total_items();?&gt; 获取出来的数据是3件物品,而不是2种商品\n        而如果你的需求是 显示商品种类 .需要修改源代码.\n            方法: system/library/Cart.php 拷贝到 application/library 中,找到如下代码修改:\n                CI3.0.0\n                    //代码位置在401行 _save_cart 函数中\n                    $this-&gt;_cart_contents[&apos;cart_total&apos;] += ($val[&apos;price&apos;] * $val[&apos;qty&apos;]);\n                    //$this-&gt;_cart_contents[&apos;total_items&apos;] += $val[&apos;qty&apos;];  //原代码\n                    $this-&gt;_cart_contents[&apos;total_items&apos;] ++;  //新代码\n                    $this-&gt;_cart_contents[$key][&apos;subtotal&apos;] = \n                    ($this-&gt;_cart_contents[$key][&apos;price&apos;] * $this-&gt;_cart_contents[$key][&apos;qty&apos;]);\n\n                CI2.2.0\n                    //代码位置在386行 _save_cart 函数中\n                    $total += ($val[&apos;price&apos;] * $val[&apos;qty&apos;]);\n                    //$items += $val[&apos;qty&apos;];//原代码\n                    $items ++;//新代码\n\n    3.在我们向购物车中添加商品的时候，如果添加了已经存在于购物车中的商品时，会出现逻辑错误。\n        理论上应该是累加，但实际上是将原来的商品信息给删除了。所以要相应的处理一下：    \n\n            // 获取/封装数据....\n            //在插入之前,需要判断即将要加入的商品是否已经存在于购物车中\n            $carts = $this-&gt;cart-&gt;contents();\n            foreach ($carts as $v){\n                if($v[&apos;id&apos;] == $data[&apos;id&apos;]){\n                    $data[&apos;qty&apos;] += $v[&apos;qty&apos;];\n                }\n            }\n            // 插入数据...\n</code></pre><h1 id=\"CI框架内部解析\"><a href=\"#CI框架内部解析\" class=\"headerlink\" title=\"CI框架内部解析\"></a><a id=\"CI框架内部解析\"></a>CI框架内部解析</h1><pre><code>CI是一个单入口框架,所有的请求都需要经常index.php文件 . 流程如下:\n              | --&gt; Routing --&gt; Scourity --&gt;     |-----------------------|\n    index.php |                                  |Application Controller |--&gt;Drivers,Models,Libaies,Helpers,Packages,Scripts\n              | &lt;-- Caching &lt;--   View   &lt;--     |-----------------------|     \n</code></pre><p>分析index.php文件.</p>\n<pre><code>$system_path = &apos;system&apos;;\n$application_folder = &apos;application&apos;;\n这个和我们的文件夹结构名称一一对应. 当然这个名称是可以更改.\n\n中间加载一些系统目录常量等.\n在index.php结尾尝试打印里面的内容.\n\n        var_dump(SELF , ENVIRONMENT ,BASEPATH ,FCPATH,  SYSDIR);\n        exit();\n    结果\n        string(9) &quot;index.php&quot;\n        string(11) &quot;development&quot;\n        string(62) &quot;E:/ComTu_Design/PHP/Apache2.2/htdocs/CodeIgniter-3.0.0/system/&quot;\n        string(55) &quot;E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\CodeIgniter-3.0.0/&quot;\n        string(6) &quot;system&quot;\n\n最后载入\n    require_once BASEPATH.&apos;core/CodeIgniter.php&apos;;\n</code></pre><p>分析CodeIgniter.php</p>\n<pre><code>载入Common.php 通用函数库.        \n    require_once(BASEPATH.&apos;core/Common.php&apos;);\n        例如:    is_php($version) php版本\n            is_really_writable 是否可写\n            load_class 载入类函数\n            等等\n\n载入配置文件(常量配置)\n    require_once(APPPATH.&apos;config/constants.php&apos;);\n\n载入核心类文件.\n    $BM =&amp; load_class(&apos;Benchmark&apos;, &apos;core&apos;); \n    $EXT =&amp; load_class(&apos;Hooks&apos;, &apos;core&apos;);  勾子类\n    $CFG =&amp; load_class(&apos;Config&apos;, &apos;core&apos;); 配置文件类\n    $UNI =&amp; load_class(&apos;Utf8&apos;, &apos;core&apos;); 编码类\n    $URI =&amp; load_class(&apos;URI&apos;, &apos;core&apos;); URI类\n    $RTR =&amp; load_class(&apos;Router&apos;, &apos;core&apos;, isset($routing) ? $routing : NULL); 路由类\n    $OUT =&amp; load_class(&apos;Output&apos;, &apos;core&apos;); 输出类\n    $SEC =&amp; load_class(&apos;Security&apos;, &apos;core&apos;); 安全类 \n    $IN  =&amp; load_class(&apos;Input&apos;, &apos;core&apos;);输入类\n    $LANG =&amp; load_class(&apos;Lang&apos;, &apos;core&apos;);语言类\n\n载入CI总控制器.\n    require_once BASEPATH.&apos;core/Controller.php&apos;;\n\n通过router类对象 $RTR的两个方法获取当前的类名和方法名\n\n    CI 2.2.0\n        $class  = $RTR-&gt;fetch_class();\n        $method = $RTR-&gt;fetch_method();\n\n    CI 3.0.0\n        $class = ucfirst($RTR-&gt;class);\n        $method = $RTR-&gt;method;\n\n    比如:输入 http://127.0.0.1:8000/CodeIgniter-3.0.0/form_demo/insert \n    那么上述代码获取的$class就是控制器form_demo,$method就是insert , 如果没\n    有方法名,则默认index\n\nNew了一个对象,叫做CI, 这个就是CI框架中的超级对象(super class)    \n    $CI = new $class(); //此处,就是超级对象的形成过程.\n    //var_dump($CI); 可以尝试在此处打印一下$CI的信息 . \n</code></pre><p>分析CI_Controller类 Controller.php </p>\n<pre><code>        简单的PHP单例设计模式.\n            private static $instance;\n            public static function &amp;get_instance(){\n                return self::$instance;\n            }\n\n        构造函数中将前面载入的核心类,作为CI对象的属性.\n            foreach (is_loaded() as $var =&gt; $class){\n                $this-&gt;$var =&amp; load_class($class);\n            }\n\n        然后是载入Loader.php 装载类\n            $this-&gt;load =&amp; load_class(&apos;Loader&apos;, &apos;core&apos;);\n\n在控制器中出现的$this就是超级对象.\n超级对象形成之后,我们就可以使用超级对象(超级对象的属性)\n提供一系列方法完成我们的业务逻辑.如果需要完成其它的功能,可以载入其他的类文件,辅助函数.\n这些类文件和辅助函数包括CI已经提供好的.也可以是我们自己定义的.\n</code></pre><p>使用中遇到过的问题<br>    CI 3.0.0使用中<br>    访问 views/目录下的文件时被拦截.如<br>    <a href=\"http://127.0.0.1:8000/mycishop/application/views/images/ecshop_logo.gif\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8000/mycishop/application/views/images/ecshop_logo.gif</a></p>\n<pre><code>提示:\n    Forbidden\n    You don&apos;t have permission to access /mycishop/application/views/images/ecshop_logo.gif on this server.\n\n解决办法:\n    查看与 views 同级的 .htaccess文件 发现是此处招到的拦截.\n    &lt;IfModule authz_core_module&gt;\n        Require all denied\n    &lt;/IfModule&gt;\n    &lt;IfModule !authz_core_module&gt;\n        #拦截访问.\n        #Deny from all\n        #修改成如下代码即可.\n        Allow from all \n    &lt;/IfModule&gt;\n配置文件与 [隐藏入口文件-index.php](#隐藏入口文件-index.php) 里面的权限管理类似.\n</code></pre><p>///////////////////////////////数据库附件////////////////////////////////////////////////</p>\n<pre><code>/*\n 查询数据库\n\n mysql&gt; show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| discuz             |\n| mysql              |\n| test               |\n| wordpress          |\n+--------------------+\n5 rows in set (0.00 sec)\n\n进入到test数据库\n\nmysql&gt; use test   \nDatabase changed\n\n查看test数据库中的表\n\nmysql&gt; show tables;\nEmpty set (0.00 sec)\n\n创建表\n\nmysql&gt; \nmysql&gt; CREATE TABLE IF NOT EXISTS bolg_user(\n    -&gt;  id INT AUTO_INCREMENT PRIMARY KEY,\n    -&gt;  name VARCHAR(255) NOT NULL UNIQUE,\n    -&gt;  password CHAR(32) NOT NULL,\n    -&gt;  email VARCHAR(255) NOT NULL DEFAULT &apos;&apos;\n    -&gt; )ENGINE MyISAM DEFAULT CHARSET=UTF8;\nQuery OK, 0 rows affected (0.05 sec)\n\n增加数据\n\nmysql&gt;\nmysql&gt; \nmysql&gt; INSERT INTO bolg_user (name,password) VALUES (&apos;admin&apos;,md5(&apos;admin&apos;));\nQuery OK, 1 row affected (0.07 sec)\n\n查看数据库的表\n\nmysql&gt; show tables;\n+----------------+\n| Tables_in_test |\n+----------------+\n| bolg_user      |\n+----------------+\n1 row in set (0.00 sec)\n\n查看数据库结构\n\nmysql&gt; desc bolg_user;\n+----------+--------------+------+-----+---------+----------------+\n| Field    | Type         | Null | Key | Default | Extra          |\n+----------+--------------+------+-----+---------+----------------+\n| id       | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name     | varchar(255) | NO   | UNI | NULL    |                |\n| password | char(32)     | NO   |     | NULL    |                |\n| email    | varchar(255) | NO   |     | NULL    |                |\n+----------+--------------+------+-----+---------+----------------+\n4 rows in set (0.02 sec)\n\n设置编码格式为gbk,解决查看时乱码.\nmysql&gt; set names gbk;\nQuery OK, 0 rows affected (0.00 sec)\n\n查询数据库表中的内容\n\nmysql&gt; select * from bolg_user;\n+----+-------+----------------------------------+-------+\n| id | name  | password                         | email |\n+----+-------+----------------------------------+-------+\n|  1 | admin | 21232f297a57a5a743894a0e4a801fc3 |       |\n+----+-------+----------------------------------+-------+\n1 row in set (0.00 sec)\n * */\n</code></pre><p><a href=\"/res/file/blog/2015/09/10/PHP_codeigniter/CodeIgniter-3.0.0_Demo.rar\">本文案例Demo</a></p>\n<p><a href=\"/res/file/blog/2015/09/10/PHP_codeigniter/mycishop.rar\">本文案例Demo<em>附加Demo</em>购物商场</a></p>\n","excerpt":"<p>本人因公司需求.学习PHP的CI框架.本博文为学习笔记.<br>CodeIgniter 是一套给 PHP 网站开发者使用的应用程序开发框架和工具包。<br>它提供一套丰富的标准库以及简单的接口和逻辑结构，其目的是使开发人员更快速地进行项目开发。<br>使用 CodeIgniter 可以减少代码的编写量，并将你的精力投入到项目的创造性开发上。</p>\n<p>其中内容包括,CI_Controller对象 , 数据库访问 , AR模型(QB模型) , CI类库扩展 ,<br>Url相关函数 , 设置路由 , 隐藏入口文件, 分页 , 文件上传 , Session , 验证码 , 语言包 , CI框架内部解析等内容.</p>","more":"<p>目录</p>\n<ul>\n<li><a href=\"#CodeIgniter框架简介\">CodeIgniter框架简介</a></li>\n<li><a href=\"#MVC\">MVC</a><ul>\n<li><a href=\"#控制器-controllers\">控制器-controllers</a></li>\n<li><a href=\"#视图-views\">视图-views</a> </li>\n<li><a href=\"#模型-model\">模型-model</a></li>\n</ul>\n</li>\n<li><a href=\"#CI的超级对象-(CI的控制器对象CI_Controller\">CI的超级对象-(CI的控制器对象CI_Controller)</a>)</li>\n<li><a href=\"#数据库访问\">数据库访问</a></li>\n<li><a href=\"#AR模型操作数据库\">AR模型操作数据库增删改查 active_record (CI3.0之后改名 query_builder QB模型)</a></li>\n<li><a href=\"#CI类库扩展\">CI类库扩展</a><ul>\n<li><a href=\"#扩展控制器CI_Controller-装载器Loader\">为网站设计不同的主题.前台,后台(扩展控制器CI_Controller,装载器Loader)</a></li>\n<li><a href=\"#扩展CI的captcha_helper.php实现_验证码\">扩展CI的captcha<em>helper.php实现</em>验证码</a></li>\n<li><a href=\"#扩展_修改分页生成的代码\">扩展_修改分页生成的代码</a></li>\n</ul>\n</li>\n<li><a href=\"#url相关函数\">url相关函数</a></li>\n<li><a href=\"#设置路由\">设置路由</a></li>\n<li><a href=\"#隐藏入口文件-index.php\">隐藏入口文件-index.php</a></li>\n<li><a href=\"#分页\">分页</a></li>\n<li><a href=\"#文件上传\">文件上传</a></li>\n<li><a href=\"#图片处理类\">图片处理类</a></li>\n<li><a href=\"#Session\">Session</a></li>\n<li><a href=\"#验证码\">验证码</a></li>\n<li><a href=\"#表单验证\">表单验证</a></li>\n<li><a href=\"#语言包\">语言包</a></li>\n<li><a href=\"#购物车类库\">购物车类库</a></li>\n<li><a href=\"#CI框架内部解析\">CI框架内部解析</a></li>\n</ul>\n<hr>\n<p>注:测试版本为CodeIgniter3.0.0框架 与CI2.x的有些不同.<br>但都有标注不同点以及处理方法.笔记理论上基本适用于3.0.0(当前最新)之前的版本.  </p>\n<p>中文教程地址:<br><a href=\"http://codeigniter.org.cn/user_guide/index.html\">http://codeigniter.org.cn/user_guide/index.html</a></p>\n<h1 id=\"CodeIgniter框架简介-CI框架\"><a href=\"#CodeIgniter框架简介-CI框架\" class=\"headerlink\" title=\"CodeIgniter框架简介 ( CI框架 )\"></a><a id=\"CodeIgniter框架简介\"></a>CodeIgniter框架简介 ( CI框架 )</h1><pre><code>CodeIgniter是一个轻量级但功能强大的PHP框架是基于MVC设计模式.\n\n框架开发和二次开发\n    打个比方:买房子\n    买二手房,直接拎包入住 , 好比二次开发,如:dedecms,PHPCMS(内容管理系统),ECShop(开源免费的网上商店系统)\n    买毛坯房,不能住人,自己去买各种装修材料,请人装修,才能入住.好比框架开发.只提供\n    基础功能和项目结构.\n\n    CI是框架,用于框架开发.\n\n目录结构说明:\n    license.txt许可协议\n    user_guide 用户手册(一般删除)\n    index.php 入口文件\n    system 框架核心代码,通常不动的.\n    application 应用目录\n    |-- cache        缓存目录\n    |-- config       配置文件目录\n    |-- controllers  控制器文件夹\n    |-- core         核心库扩展目录\n    |-- errors       错误页面\n    |-- helpers      自定义辅助函数文件夹\n    |-- hooks        勾子文件夹\n    |-- language     语言包\n    |-- libraries    自定义库文件夹,通常是一些类文件\n    |-- logs         日志\n    |-- models       模型文件夹\n    |-- third_party  第三方库目录,如smarty\n    |-- views        视图文件夹\n</code></pre><h1 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a><a id=\"MVC\"></a>MVC</h1><pre><code>1. 入口文件 \n    唯一一个让浏览器直接请求的脚本文件\n\n2. 控制器 controller\n    协调模型和视图\n\n3. 模型 model \n    提供数据,保存数据,数据有效性认证\n\n4. 视图 view\n    只负责显示,以及表单...\n\n5. 动作 action \n    是控制器中方法,用户被浏览器直接请求\n\n访问url使用的是pathinfo //http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/welcome/test  test是welcome的一个方法\n\n入口文件.php/控制器/动作\n\napplication 应用目录\n    controllers 控制器\n    models 模型\n    views 视图\n\n默认控制器是welcome\n默认动作是index \n</code></pre><h2 id=\"控制器-controllers\"><a href=\"#控制器-controllers\" class=\"headerlink\" title=\"控制器-controllers\"></a><a id=\"控制器-controllers\"></a>控制器-controllers</h2><pre><code>1.不需要加后缀 , 直接是类名.php (自己编写的控制器需要UserController.php)\n2.文件名全部小写 \n3.所有的控制器,直接或者间接继承自 CI_Controller 类\n4.尽量不要使用Index名作为控制器类名,因为与方法index与类名相同的,会被PHP当作构造方法void __construct(){}\n5.控制器中, 动作(函数,方法)要求:\n    public \n    不能以_开头\n\n    //不能被浏览器范围\n    protected function test() {\n        echo &apos;test&apos;;\n    }\n\n    //以下划线开头的方法,不能被浏览器请求\n    public function _test1() {\n        echo &apos;test1&apos;;\n    }\n\n    public function test2(){\n        $this-&gt;_test1();\n    }\n</code></pre><h2 id=\"视图-views\"><a href=\"#视图-views\" class=\"headerlink\" title=\"视图-views\"></a><a id=\"视图-views\"></a>视图-views</h2><pre><code>1.在控制器中如果加载视图\n    //直接写试图名字,不写扩展名,如果有子目录,则写上目录名\n    $this-&gt;load-&gt;view ( &apos;user/index&apos; ); //表示user目录下的index.php文件\n    可以多次调用$this-&gt;load-&gt;view (视图); \n\n2.试图中,直接使用原生PHP代码\n3.推荐使用\n    &lt;?php foreach ($list as $item):?&gt;\n    &lt;?=$item[&quot;email&quot;]?&gt;\n    &lt;?php endforeach;?&gt;\n\n    &lt;?php if(empty($carts)):?&gt;\n    &lt;?php else:?&gt;\n    &lt;?php endif;?&gt;\n</code></pre><h2 id=\"模型-model\"><a href=\"#模型-model\" class=\"headerlink\" title=\"模型-model\"></a><a id=\"模型-model\"></a>模型-model</h2><pre><code>模型文件名全部使用小写,建议使用_model为后缀,防止与控制器类名冲突,但里面的类名首字母大写\n在模型中,可以直接使用超级对象中的属性\n\n\\application\\models\\user_model.php 模型\n    &lt;?php\n        class User_model extends CI_Model{//继承自 CI_Model\n            //返回所有用户\n            public function getAll(){\n                $res = $this-&gt;db-&gt;get(&apos;user&apos;);//在模型中,可以直接使用超级对象中的属性\n                return $res;\n            }\n        }\n\\application\\controllers\\my_model_demo.php 控制器\n    &lt;?php\n        class My_model_demo extends CI_Controller {\n            // http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/my_model_demo\n            public function index() {\n                // 加载模型,加载后将自动成为超级对象的属性\n                // $this-&gt;load-&gt;model ( &apos;User_model&apos; );\n                $this-&gt;load-&gt;model ( &apos;User_model&apos;, &apos;user&apos; ); // 起个别名\n\n                // 调用模型获取数据\n                // $list = $this-&gt;User_model-&gt;getAll();\n                $list = $this-&gt;user-&gt;getAll (); // 使用别名\n\n                // 加载视图\n                $this-&gt;load-&gt;view ( &apos;user/my_model_view_demo&apos;, array (&apos;list&apos; =&gt; $list ) );\n            }\n        }\n\\application\\views\\user\\my_model_view_demo.php 视图\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;View&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;?php \n        //CI它使用了一个 extract 函数,将数组变量导入到当前的符号表,所以直接使用键名作为变量来访问\n            var_dump( $list); \n        ?&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n\n建议使用这种这种MVC架构来编写代码,可维护性高一些.\n</code></pre><h1 id=\"CI的超级对象-CI的控制器对象CI-Controller\"><a href=\"#CI的超级对象-CI的控制器对象CI-Controller\" class=\"headerlink\" title=\"CI的超级对象-(CI的控制器对象CI_Controller)\"></a><a id=\"CI的超级对象-(CI的控制器对象CI_Controller)\"></a>CI的超级对象-(CI的控制器对象CI_Controller)</h1><pre><code>当前的控制器对象\n属性\n$this-&gt;load //  --&gt; system/core/CI_Loader类装载器,类的加载,如视图,控制器等\n    装载器类的实例system/core/CI_Loader.php\n    装载器CI_Loader提供方法:\n        view()    装载视图\n        vars()  分配变量到视图\n        database()  装载数据库操作对象\n        model()  装载模型\n        helper() 一些辅助函数\n\n$this-&gt;uri // 获取url参数等功能\n    是CI_URI类的实例 --&gt; system/core/CI_URI.php \n    CI_URI类提供方法:\n        segment(n) 用于获取url中的第几个参数(值）\n        传统的: 入口文件.php/控制器/动作/参数1/值1/参数2/值2\n        CI的  : 入口文件.php/控制器/动作/值1/值2\n\n        echo $this-&gt;segment(3);//值1\n        echo $this-&gt;segment(4);//值2\n\n        方式一: \n        // 使用CI的pathinfo\n        // http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/user/testURI/4\n        echo $this-&gt;uri-&gt;segment(3); // 获取URI第几段的参数 可取得4 , 从user开始计算1,2,3\n\n        方式一: \n        直接写在方法里面\n        http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/user/testURI2/1/jack\n        public function index($id = 0,$name=&apos;&apos;){ //可以直接获取到id=1 ; name= jack ,如果id没有输入默认为0,默认name为空\n            echo $id;//1\n            echo $name; // jack\n        }\n\n$this-&gt;input 获取用户输入信息 如,get put cookie等\n    是CI_Input类的实例 --&gt; system/core/CI_Input.php\n    CI_Input类提供方法:\n        $this-&gt;input-&gt;post(&apos;username&apos;);         //$_POST[&apos;username&apos;]\n        $this-&gt;input-&gt;post(&apos;username&apos;,true);    //跨站脚本（XSS）过滤\n        $this-&gt;input-&gt;server(&apos;DOCUMENT_ROOT&apos;);    //$_SERVER[&apos;DOCUMENT_ROOT&apos;]\n        $this-&gt;input-&gt;cookie();\n        $this-&gt;input-&gt;server()\n        ...\n\n在视图(view)中,直接使用$this来访问超级对象中的属性\n\nCI支持控制器在子目录中.\n    如果你在建立一个大型的应用程序，你会发现 CodeIgniter 可以很方便的将控制器放到一些子文件夹中。\n\n    只要在 application/controllers 目录下创建文件夹并放入你的控制器就可以了。\n\n    注意：  如果你要使用某个子文件夹下的功能，就要保证 URI 的第一个片段是用于描述这个文件夹的。例如说你有一个控制器在这里：\n\n    application/controllers/products/shoes.php\n\n    调用这个控制器的时候你的 URI 要这么写：\n\n    example.com/index.php/products/shoes/show/123\n\n    你的每个子文件夹中需要包含一个默认的控制器，这样如果 URI 中只有子文件夹而没有具体功能的时候它将被调用。\n    只要将你作为默认的控制器名称在 application/config/routes.php 文件中指定就可以了。\n\n    CodeIgniter 也允许你使用 URI 路由 功能来重新定向 URI。\n</code></pre><h1 id=\"数据库访问\"><a href=\"#数据库访问\" class=\"headerlink\" title=\"数据库访问\"></a><a id=\"数据库访问\"></a>数据库访问</h1><pre><code>配置数据库文件\n    可在 \\system\\database\\drivers\\目录下查看可被支持的数据库驱动\n    application/config/database.php 数据库配置文件\n    $db[&apos;default&apos;]= array(    //&apos;default&apos;表示默认数据库,当一个项目需要连接多个数据库的时候,可以增加多一个$db[&apos;新数据库别名&apos;]= array(....\n        &apos;hostname&apos; =&gt; &apos;localhost&apos;,\n        &apos;username&apos; =&gt; &apos;root&apos;,\n        &apos;password&apos; =&gt; &apos;root&apos;,\n        &apos;database&apos; =&gt; &apos;test&apos;,    //database数据库名\n        &apos;dbdriver&apos; =&gt; &apos;mysql&apos;, //数据库驱动\n        &apos;dbprefix&apos; =&gt; &apos;blog_&apos;, //表前缀 \n        &apos;swap_pre&apos; =&gt; &apos;swap_&apos;, //表前缀 假设代码里面的都是使用swap_的前缀,而表是使用blog_前缀,则会自动替换成dbprefix的前缀,而无需修改源代码\n    );\n\n    表前缀\n        &apos;dbprefix&apos; =&gt; &apos;blog_&apos;, \n        &apos;swap_pre&apos; =&gt; &apos;blog_&apos;, \n        配置为一样,代码中,直接硬编码表前缀就行了,如果以后项目数据库表前缀发生变化,\n        只需要修改&apos;dbprefix&apos; =&gt; &apos;new_&apos;,  代码中的blog_会自动替换为new_\n\n    /////数据库附件/////\n\n将数据库访问对象,装载到超级对象的属性中 $this-&gt;db\n    方式一(PHP代码手动加载): \n        // 装载一个数据库操作类\n        $this-&gt;load-&gt;database();//表示连接默认数据库\n        //一个项目多个数据库时,表示连接其它数据库,配置文件\\application\\config\\database.php中配置相对应别名\n        //$this-&gt;load-&gt;database(&apos;新数据库别名&apos;);\n    方式二(配置文件,自动加载):\n        //因为每次使用数据库的时候都需要装载数据库操作类,所以在配置文件\\application\\config\\autoload.php中配\n        //置Auto-load Libraries 自动加载项,以后就可以不再需要手动加载,但对于多个数据库的还是需要指定数据库.\n        //$autoload[&apos;libraries&apos;] = array(&apos;database&apos;);//自动加载配置\n        //$this-&gt;load-&gt;database();//以后编写都不需要这行代码.\n\n    使用: \n        //装载成功后,会放入超级对象的属性中, 默认属性名是db\n        // var_dump($this-&gt;db);//$this-&gt;db 返回的是 CI_DB_mysql_driver 对象 继承自 CI_DB\n\n    CI_DB_mysql_driver 对象 --&gt; \\system\\database\\drivers\\mysql\\mysql_driver.php  \n\n$this-&gt;db-&gt;query()方法 增删改查\n    查询数据 返回的是一个对象\n        $sql = &apos;select * from blog_user&apos;;\n        // 返回的是CI_DB_mysql_result 对象 - mysql_query()\n        $res = $this-&gt;db-&gt;query ( $sql ); //返回的是 CI_DB_mysql_result 对象 继承自 CI_DB_result\n        $res-&gt;result();//返回数组,数组中是一个一个的对象\n        $res-&gt;result_array();//返回二维数组,里面是关联数组\n        $res-&gt;row();//返回第一条数据,直接是一个对象\n\n        //帮助文档中--&gt; 数据库类--&gt;查询--&gt;query \n        //帮助文档中--&gt; 数据库类--&gt;生成查询结果集--&gt; result_array() 等等的一些方法. 调用方法就如上所示\n        //以上可取得如下php原生函数类似的结果\n        //mysql_fetch_assoc()//关联数组 //http://www.w3school.com.cn/php/func_mysql_fetch_assoc.asp\n        //mysql_fetch_object()//返回对象 //http://www.w3school.com.cn/php/func_mysql_fetch_object.asp\n\n        CI_DB_mysql_result 对象 --&gt; \\system\\database\\drivers\\mysql\\mysql_result.php\n\n    增删改数据 返回一个 boolean 布尔值\n\n        // 插入数据\n        // $name=$this-&gt;input-&gt;post(&apos;name&apos;);//假如获取用户post过来的数据.\n        // $name = &apos;lili&apos;;\n        // $pass = &apos;lili&apos;;\n\n        // $data [0] = $name;\n        // $data [1] = $pass;\n        ////参数绑定:\n        // $sql = &quot;insert into blog_user (name,password) values (?,me5(?))&quot;;\n        // $bool = $this-&gt;db-&gt;query ( $sql, $data );//多个问号?参数时,需要传入一个索引数组\n\n        // 删除数据\n        // $sql = &quot;delete from blog_user where id=?&quot;;\n        // $bool = $this-&gt;db-&gt;query ( $sql, 2 );\n\n        // 修改数据\n        $data [0] = &apos;mary@gmail.com&apos;;\n        $data [1] = 3;\n        $sql = &quot;update blog_user set email = ? where id=? &quot;;\n        $bool = $this-&gt;db-&gt;query ( $sql, $data );\n\n        if ($bool) {\n            // mysql_affected_rows\n            echo &apos;受影响行数:&apos; . $this-&gt;db-&gt;affected_rows ();\n            echo &apos;自增ID:&apos; . $this-&gt;db-&gt;insert_id ();\n        }\n    使用CI的db增加改查都是使用$this-&gt;db-&gt;query()来进行处理.\n</code></pre><h1 id=\"AR模型操作数据库-active-record-CI3-0之后改名-query-builder-QB模型\"><a href=\"#AR模型操作数据库-active-record-CI3-0之后改名-query-builder-QB模型\" class=\"headerlink\" title=\"AR模型操作数据库 active_record (CI3.0之后改名 query_builder QB模型)\"></a><a id=\"AR模型操作数据库\"></a>AR模型操作数据库 active_record (CI3.0之后改名 query_builder QB模型)</h1><pre><code>配置\n    \\application\\config\\database.php 配置开启AR/QB模型(默认TRUE)\n        $active_record = TRUE; 配置为TRUE表示开启这项功能. (AR模型_2.2.0)\n        $query_builder = TRUE; 配置为TRUE表示开启这项功能. (QB模型_3.0.0)\n\n        \\system\\database\\DB_active_rec.php (为AR模型原代码_2.2.0)\n        \\system\\database\\DB_query_builder.php (为QB模型的原代码_2.2.0)\n\n    \\application\\config\\autoload.php 配置自动加载\n        $autoload[&apos;libraries&apos;] = array(&apos;database&apos;);\n\n使用增删改查\n    在配置文件中,配置表前缀后,会自动添加前缀.\n\n    插入:\n        $bool = $this-&gt;db-&gt;insert(&apos;表名&apos;,关联数组);\n\n        //TODO 通过AR/QB模型增加数据内容 insert 增加\n        $data  = array(\n            &apos;name&apos;=&gt;&apos;lili&apos;,\n            &apos;password&apos;=&gt;md5(&apos;lili&apos;)            \n        );\n        const TBL = &apos;user&apos;;//表名,常量\n        $bool = $this-&gt;db-&gt;insert(self::TBL,$data);\n        var_dump($bool);\n        echo &apos;&lt;hr&gt;&apos;;\n\n    更新:\n        $bool = $this-&gt;db-&gt;update(&apos;表名&apos;,关联数组,条件);\n\n        //TODO 通过AR/QB模型更新数据 update 更新\n        $data = array(\n                &apos;email&apos;=&gt;&apos;lili@gmail.com&apos;,\n                &apos;password&apos;=&gt;md5(&apos;123456&apos;),\n        );\n        $bool =$this-&gt;db-&gt;update(&apos;user&apos;,$data,array(&apos;id&apos;=&gt;4));\n        var_dump($bool);\n\n    删除:\n        $bool = $this-&gt;db-&gt;delete(&apos;表名&apos;,条件);\n\n        //TODO 通过AR/QB模型删除数据 delete 删除\n        $bool = $this-&gt;db-&gt;delete(&apos;user&apos;,array(&apos;id&apos;=&gt;4));\n        var_dump($bool);\n\n    查询:\n        $res = $this-&gt;db-&gt;get(&apos;表名&apos;,[&apos;条件&apos;]);//返回结果集对象. &apos;表名&apos;会自动增加为&apos;blog_表名&apos;\n        $res-&gt;result();//结合返回获取数据\n\n        //TODO 通过AR/QB模型获取数据表内容-查询\n        $res = $this-&gt;db-&gt;get ( &apos;user&apos; );//AR模型可以自动处理表前缀.并直接获取bolg_user表的数据\n\n        var_dump($res);\n        echo &apos;&lt;hr&gt;&apos;;\n        foreach ($res-&gt;result() as $item){\n            echo $item-&gt;name;\n            echo &apos;  &apos;;\n            echo $item-&gt;password;\n            echo &apos;  &apos;;\n            echo $item-&gt;email;\n            echo &apos;&lt;br&gt;&apos;;\n        }\n\n    连贯查询\n        //TODO 连贯查询\n        //SELECT `id`, `name` FROM `blog_user` WHERE `id` &gt;= 3 ORDER BY `id` desc LIMIT 2, 3\n        $res = $this-&gt;db-&gt;select(&apos;id,name&apos;)//\n        -&gt;from(&apos;user&apos;)//表名\n        -&gt;where(&apos;id &gt;=&apos; , 3)//&apos;id &gt;=&apos; 符号前面需要一个空格,如果符号不写默认&apos;=&apos;等于\n        -&gt;limit(3,2)//跳过2条,取后3条数据\n        -&gt;order_by(&apos;id desc&apos;)//通过id倒序\n        -&gt;get();//获取数据\n\n        var_dump($res-&gt;result());\n        echo &apos;&lt;br&gt;&apos;;\n        echo $this-&gt;db-&gt;last_query();//显示最后一条执行的SQL语句\n        //SELECT `id`, `name` FROM `blog_user` WHERE `id` &gt;= 3 ORDER BY `id` desc LIMIT 2, 3\n\n        更多where查询条件 \n            //SELECT * FROM `blog_user` WHERE `name` = &apos;mary&apos;\n            $res = $this-&gt;db-&gt;where(&apos;name&apos;,&apos;mary&apos;)-&gt;get (&apos;user&apos;);\n            //SELECT * FROM `blog_user` WHERE `name` != &apos;mary&apos;\n            $res = $this-&gt;db-&gt;where(&apos;name !=&apos;,&apos;mary&apos;)-&gt;get (&apos;user&apos;);\n            //SELECT * FROM `blog_user` WHERE `name` = &apos;mary&apos;\n            $res = $this-&gt;db-&gt;where(array(&apos;name&apos;=&gt;&apos;mary&apos;))-&gt;get (&apos;user&apos;);\n            //SELECT * FROM `blog_user` WHERE `name` = &apos;mary&apos; AND `id` &gt; 3\n            $res = $this-&gt;db-&gt;where(array(&apos;name&apos;=&gt;&apos;mary&apos;,&apos;id &gt;&apos;=&gt;3))-&gt;get (&apos;user&apos;);\n            echo $this-&gt;db-&gt;last_query();\n\n            复杂的查询,则建议用$this-&gt;db-&gt;query($sql,$data);//使用问题?绑定参数的方式查询\n</code></pre><h1 id=\"CI类库扩展\"><a href=\"#CI类库扩展\" class=\"headerlink\" title=\"CI类库扩展\"></a><a id=\"CI类库扩展\"></a>CI类库扩展</h1><pre><code>在system目录下的是CI框架的核心文件.如果需要进行扩展,只需要在对应的application目录下对应着system目录下的文件编写对应的类,即可扩展.\n例如: application 目录下有core helpers language libraries 目录均于system目录下的文件夹相一一对应.\n\n子类名前缀\n    \\application\\config\\config.php 子类名前缀\n    $config[&apos;subclass_prefix&apos;] = &apos;MY_&apos;;\n\n例如:扩展控制器\n    在application/core/MY_Controller.php 创建自定义的类继承自application/core/Controller.php  (CI_Controller 类名与文件名不同)\n\n    &lt;?php\n        class MY_Controller extends CI_Controller{\n            //构造方法\n            public function __construct(){\n                parent::__construct();//调用父类的构造方法\n                echo &apos;aaaaaaaaaaaaa&apos;;\n                //登录验证\n                //权限验证...等等\n            }\n        }\n    然后在application/controllers/目录下的控制器中使用继承自My_Controller的类即可使用,自定义的控制器.\n其它类库均类似的扩展.\n</code></pre><p><a id=\"扩展控制器CI_Controller-装载器Loader\"></a>案例:为网站设计不同的主题.前台,后台(扩展控制器CI_Controller,装载器Loader)</p>\n<pre><code>第一步，指定不同的视图View路径 . 在网站根目录下创建 themes 文件夹和 里面再创建default目录\n第二步，定义一个常量，在config/costants.php,如下\n    在application/config/constants.php 常量配置文件中配置常量.\n    #自定义系统相当常量 (主题目录)\n    define(&apos;THEMES_DIR&apos;,&apos;themes/&apos;); //指明视图路径地址.\n\n第三步，扩展CI类\n    视图的加载由loader类完成，(\\system\\core\\Loader.php)如下\n\n        CI 2.2.0\n            public function __construct()\n            {\n                $this-&gt;_ci_ob_level  = ob_get_level();\n                $this-&gt;_ci_library_paths = array(APPPATH, BASEPATH);\n                $this-&gt;_ci_helper_paths = array(APPPATH, BASEPATH);\n                $this-&gt;_ci_model_paths = array(APPPATH);\n                $this-&gt;_ci_view_paths = array(APPPATH.&apos;views/&apos;    =&gt; TRUE);\n            }\n        CI 3.0.0\n            protected $_ci_view_paths = array(VIEWPATH =&gt; TRUE);\n\n    扩展 Loader 类 (\\application\\core\\MY_Loader.php)\n        &lt;?PHP\n            defined(&apos;BASEPATH&apos;) OR exit(&apos;No direct script access allowed&apos;);\n\n            class MY_Loader extends CI_Loader{\n                //被开启的主题目录\n                protected $_theme = &apos;default/&apos;;\n\n                public function switch_themes_on(){\n                    $this-&gt;_ci_view_paths = array(FCPATH,THEMES_DIR,$this-&gt;_theme =&gt; TRUE);\n                }\n\n                public function switch_themes_off(){\n                    #just do nothing\n                }\n            }\n    扩展控制器\n        &lt;?PHP\n            defined(&apos;BASEPATH&apos;) OR exit(&apos;No direct script access allowed&apos;);\n\n            //前台控制器\n            class HomeController extends CI_Controller{\n                public function __construct(){\n                    parent::__construct();\n                    #开启皮肤功能\n                    $this-&gt;load-&gt;switch_themes_on();\n                }\n            }\n\n            //后台控制器\n            class AdminController extends CI_Controller{\n                public function __construct(){\n                    parent::__construct();\n                    #关闭皮肤功能\n                    $this-&gt;load-&gt;switch_themes_off();    \n                }\n            }\n\n第四步: 编写不同的控制器\n    application/controllers 下编写前台控制器 并继承 HomeController \n    application/controllers/admin 编写后台控制器 并继承 AdminController\n\n\n第五步: 编写不同的视图文件.\n     themes/default/ 目录下编写前台视图View \n     application/views 目录下编写后台试图View\n\n而模型 model 是共用的.    \n</code></pre><p>案例:<a href=\"#扩展CI的captcha_helper.php实现_验证码\">扩展CI的captcha<em>helper.php实现</em>验证码</a>        </p>\n<h1 id=\"url相关函数\"><a href=\"#url相关函数\" class=\"headerlink\" title=\"url相关函数\"></a><a id=\"url相关函数\"></a>url相关函数</h1><pre><code>http://codeigniter.org.cn/user_guide/helpers/url_helper.html\n\n//加载url帮助类 //默认在辅助函数/URL辅助函数中,默认不加载.\n$this-&gt;load-&gt;helper(&apos;url&apos;);//使用前需要加载标准类,或者配置自动加载\n    \\application\\config\\autoload.php 文件中配置\n    $autoload[&apos;helper&apos;] = array(&apos;url&apos;);\n\nbase_url();//返回网站根目录 application\\config\\config.php中: $config[&apos;base_url&apos;]=&apos;&apos;; 中配置的目录\n//http://127.0.0.1:8000/CodeIgniter-3.0.0\n\nsite_url(&apos;控制器/方法&apos;) //返回 base_url/index_page/控制器/方法 ($config[&apos;index_page&apos;] = &apos;index.php&apos;;)\n//如 http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php\n\n案例:\n\\application\\controllers\\url_demo_controllers.php\n&lt;?php\n    class Url_demo_controllers extends CI_Controller{\n        //http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/Url_demo_controllers\n        public function index(){\n            //加载url帮助类\n            $this-&gt;load-&gt;helper(&apos;url&apos;);\n            $this-&gt;load-&gt;view(&apos;user/url_demo&apos;);\n        }\n\n        public function insert(){\n            var_dump($this-&gt;input-&gt;post(&apos;name&apos;));\n        }\n    }\n\n\\application\\views\\user\\url_demo.php \n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;403 Forbidden&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;!-- &lt;form action=&quot;/CodeIgniter-3.0.0/index.php/Url_demo_controllers/insert&quot; method=&quot;post&quot;&gt; --&gt;\n&lt;form action=&quot;&lt;?php echo site_url(&apos;Url_demo_controllers/insert&apos;);?&gt;&quot; method=&quot;post&quot;&gt;\n    name&lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;&lt;br&gt;\n    password&lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt;&lt;br&gt;\n    email&lt;input type=&quot;text&quot; name=&quot;email&quot; /&gt;&lt;br&gt;\n    &lt;button type=&quot;submit&quot;&gt;submit&lt;/button&gt;\n&lt;/form&gt;\n\n&lt;!--     &lt;img alt=&quot;&quot; src=&quot;/CodeIgniter-3.0.0/uploads/logo.jpg&quot;/&gt; --&gt;\n    &lt;img alt=&quot;&quot; src=&quot;&lt;?php echo base_url();?&gt;uploads/logo.jpg&quot; width=&quot;100&quot;/&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h1 id=\"设置路由\"><a href=\"#设置路由\" class=\"headerlink\" title=\"设置路由\"></a><a id=\"设置路由\"></a>设置路由</h1><pre><code>路由配置文件\n    application/config/routes.php\n\n默认控制器 配置\n    $route[&apos;default_controller&apos;] = &apos;welcome&apos;;\n\n实现伪静态\n    $route[&apos;news/[\\d]{6}/([\\d]+)/([^\\s]+)&apos;]=&apos;routes_demo/showTwice/$1/$2&apos;;\n    //URL中的地址=对应的控制器/方法/参数 --  第一个() 对应$1 以此类推\n\n    案例: \n\n    &lt;?php\n        class Routes_demo extends CI_Controller {\n            // http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/routes_demo\n            public function index() {\n                echo &apos;routes_demo index &apos;;\n            }\n\n            // 路由配置目录 application/config/routes.php\n\n            // 原地址: http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/routes_demo/show/2\n            // 路由映射地址:\n            // http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/news/2.html\n            // 路由配置: $route[&apos;news/([\\d]+)\\.html&apos;]=&apos;routes_demo/show/$1&apos;;\n            // http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/news/201515/2.html\n            // 路由配置: $route[&apos;news/[\\d]{6}/([\\d]+)\\.html&apos;]=&apos;routes_demo/show/$1&apos;;\n            public function show($id = 0) {\n                echo &apos;这是文章&apos; . $id;\n            }\n\n            // 原地址:\n            // http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/routes_demo/showTwice/4/.jpg\n            // 路由映射地址:\n            // http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/news/201501/4/.jpg\n            // 路由配置: $route[&apos;news/[\\d]{6}/([\\d]+)/([^\\s]+)&apos;]=&apos;routes_demo/showTwice/$1/$2&apos;;\n            public function showTwice($id = 0, $res = &apos;&apos;) {\n                echo &apos;这是文章&apos; . $id . $res;\n            }\n        }\n</code></pre><h1 id=\"隐藏入口文件-index-php\"><a href=\"#隐藏入口文件-index-php\" class=\"headerlink\" title=\"隐藏入口文件-index.php\"></a><a id=\"隐藏入口文件-index.php\"></a>隐藏入口文件-index.php</h1><pre><code>如原地址为:\n    http://127.0.0.1:8000/CodeIgniter-3.0.0/index.php/routes_demo\n隐藏入口文件后只需要把地址写成即可:\n    http://127.0.0.1:8000/CodeIgniter-3.0.0/routes_demo\n\n1.需要开启Apache的 rewrite 功能 Apache2.2\\conf\\httpd.conf 修改如下: \n    修改前:\n        #LoadModule rewrite_module modules/mod_rewrite.so\n\n        ...\n        # AllowOverride controls what directives may be placed in .htaccess files.\n        # It can be &quot;All&quot;, &quot;None&quot;, or any combination of the keywords:\n        #   Options FileInfo AuthConfig Limit\n\n        AllowOverride None\n        ...\n\n    修改成:\n        # 搜索 mod_rewrite 与 .htaccess 关键字来进行查询修改项\n        LoadModule rewrite_module modules/mod_rewrite.so\n\n        &lt;Directory &quot;E:/ComTu_Design/PHP/Apache2.2/htdocs&quot;&gt;\n            Options Indexes FollowSymLinks\n            # AllowOverride controls what directives may be placed in .htaccess files.\n            # It can be &quot;All&quot;, &quot;None&quot;, or any combination of the keywords:\n            #   Options FileInfo AuthConfig Limit\n\n            AllowOverride all\n            Order allow,deny\n            Allow from all\n        &lt;/Directory&gt;\n\n    重启Apache.\n\n2.在入口文件同级目录(system/application同级目录)中,放入一个.htaccess 内容如下:\n    (技巧如果自己编写创建一个点.开头的文件可以使用记事本另存为的方式输入双引号&quot;.htaccess&quot;保存即可)\n    &lt;IfModule mod_rewrite.c&gt;\n        RewriteEngine on\n        RewriteCond %{REQUEST_FILENAME} !-d\n        RewriteCond %{REQUEST_FILENAME} !-f\n        RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]\n    &lt;/IfModule&gt;\n\n3.配置索引页 \\application\\config\\config.php \n    原: \n        $config[&apos;index_page&apos;] = &apos;index.php&apos;;\n    修改成: \n        $config[&apos;index_page&apos;] = &apos;&apos;;\n</code></pre><h1 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a><a id=\"分页\"></a>分页</h1><pre><code>http://codeigniter.org.cn/user_guide/libraries/pagination.html\n直接见源代码:\n\n\\application\\controllers\\paging_demo.php\n&lt;?php\n    class Paging_demo extends CI_Controller {\n        public function index() {\n        }\n        //http://127.0.0.1:8000/CodeIgniter-3.0.0/paging_demo/paging\n        public function paging() {\n            // 装载类文件\n            $this-&gt;load-&gt;library ( &apos;pagination&apos; );\n            // 每页显示10条数据\n            $page_size = 10;\n\n            $this-&gt;load-&gt;helper(&apos;url&apos;);\n            //配置页面\n            $config [&apos;base_url&apos;] = site_url(&apos;paging_demo/paging&apos;);\n            //一共有多少条数据\n            $config [&apos;total_rows&apos;] = &apos;200&apos;;\n            //每页显示条数\n            $config [&apos;per_page&apos;] = $page_size;\n\n            //分页的数据查询偏移量在哪一段上\n            $config[&apos;uri_seqment&apos;] = 3;\n\n            $config[&apos;first_link&apos;] = &apos;首页&apos;;\n            $config[&apos;next_link&apos;] = &apos;下一页&apos;;\n            $config[&apos;last_link&apos;] = &apos;最后一页&apos;;\n\n            $this-&gt;pagination-&gt;initialize ( $config );\n\n            //http://127.0.0.1:8000/CodeIgniter-3.0.0/paging_demo/paging/190\n            //获取链接地址第三段的参数190 与配置$config[&apos;uri_seqment&apos;]相对应\n            $offset = intval($this-&gt;uri-&gt;segment(3));//intval函数获取数字,无则返回0\n\n            //拼接Sql查询语句\n            $sql = &quot;select * from blog_user limit $offset , $page_size&quot;;\n            echo $sql.&apos;&lt;br&gt;&apos;;\n\n            //生成链接\n            $data[&apos;links&apos;]=$this-&gt;pagination-&gt;create_links ();\n            //在页面中显示\n            $this-&gt;load-&gt;view(&apos;user/paging_view&apos;,$data);\n        }\n    }\n\n    \\application\\views\\user\\paging_view.php\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot;&gt;\n        &lt;title&gt;分页&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;?=$links ?&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre><p><a id=\"扩展_修改分页生成的代码\"></a>扩展_修改分页生成的代码</p>\n<pre><code>拷贝system/libraries/Pagination.php 到 application/libraries/目录 直接修改如下:\n    这样做之后CI会自动查找到application/libraries/Pagination.php 做为分页类.\nCI 3.0.0\n    //Generate the pagination links\n    public function create_links(){//398行\n        //省略很多代码.\n        //原: //650行\n        //return $this-&gt;full_tag_open.$output.$this-&gt;full_tag_close;\n\n        //修改如下: 自定义内容 当然,发挥自己的想象去修改\n        $baseinfo = &quot;总共 $this-&gt;total_rows 条记录，每页显示 $this-&gt;per_page 条，\n        总计 $num_pages 页，当前是第  $this-&gt;cur_page 页&quot;.&apos;&amp;nbsp;&amp;nbsp;&amp;nbsp;&apos;;\n        return $baseinfo.$this-&gt;full_tag_open.$output.$this-&gt;full_tag_close;\n    }\nCI 2.2.0\n    function create_links(){//115行\n        //省略很多代码.\n        // Add the wrapper HTML if exists //331行\n        //$output = $this-&gt;full_tag_open.$output.$this-&gt;full_tag_close;\n        //return $output;\n\n        //修改如下: 自定义内容 当然,发挥自己的想象去修改\n        $baseinfo = &quot;总共 $this-&gt;total_rows 条记录，每页显示 $this-&gt;per_page 条，\n        总计 $num_pages 页，当前是第  $this-&gt;cur_page 页&quot;.&apos;&amp;nbsp;&amp;nbsp;&amp;nbsp;&apos;;\n        return $baseinfo.$output;\n    }\n</code></pre><h1 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a><a id=\"文件上传\"></a>文件上传</h1><pre><code>http://codeigniter.org.cn/user_guide/libraries/file_uploading.html\n\n案例见代码: \n\\application\\controllers\\upload_demo.php\n&lt;?php\nclass Upload_demo extends CI_Controller {\n    public function index() {\n    }\n\n    // http://127.0.0.1:8000/CodeIgniter-3.0.0/upload_demo/file\n    public function file() {\n        $data [&apos;error&apos;] = &apos;&apos;;\n        $data [&apos;upload_data&apos;] = &apos;&apos;;\n\n        $this-&gt;load-&gt;helper ( &apos;url&apos; );\n        $this-&gt;load-&gt;view ( &apos;user/upload_view_demo&apos;, $data );\n    }\n    public function upload() {\n        // 上传目录需要手动创建\n        $config [&apos;upload_path&apos;] = &apos;./uploads/&apos;;\n        $config [&apos;allowed_types&apos;] = &apos;gif|jpg|png&apos;;\n        $config [&apos;max_size&apos;] = 100;//kb\n        $config [&apos;max_width&apos;] = 1024;\n        $config [&apos;max_height&apos;] = 768;\n        // 上传后的文件名/不设置则默认原文件名,如果文件名冲突,则会在文件名中加入递增数字\n        //$config [&apos;file_name&apos;] = uniqid (); \n\n        $this-&gt;load-&gt;library ( &apos;upload&apos;, $config );\n\n        $this-&gt;upload-&gt;do_upload ( &apos;pic&apos; );//上传的input name\n        $this-&gt;upload-&gt;do_upload ( &apos;pic2&apos; );//上传的input name\n\n        $data = array (\n                &apos;upload_data&apos; =&gt; $this-&gt;upload-&gt;data () ,//上传成功\n                &apos;error&apos; =&gt; $this-&gt;upload-&gt;display_errors ()//错误信息\n        );\n        $this-&gt;load-&gt;view ( &apos;user/upload_view_demo&apos;, $data );\n    }\n}\n\n\\application\\views\\user\\upload_view_demo.php\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;title&gt;文件上传&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;?php \n    if($error){    echo $error;}\n    ?&gt;\n\n    &lt;form action=&quot;&lt;?php echo site_url(&apos;upload_demo/upload&apos;)?&gt;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;\n        &lt;input type=&quot;file&quot; name=&quot;pic&quot; /&gt;&lt;/br&gt;\n        &lt;input type=&quot;file&quot; name=&quot;pic2&quot; /&gt;&lt;/br&gt;\n        &lt;input type=&quot;submit&quot; name=&quot;上传&quot; /&gt;\n    &lt;/form&gt;\n\n    &lt;?php if ($upload_data):?&gt;\n        &lt;?php foreach ($upload_data as $item =&gt; $value):?&gt;\n            &lt;li&gt;&lt;?php echo $item;?&gt;: &lt;?php echo $value;?&gt;&lt;/li&gt;\n        &lt;?php endforeach; ?&gt;\n    &lt;?php endif ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h1 id=\"图片处理类\"><a href=\"#图片处理类\" class=\"headerlink\" title=\"图片处理类\"></a><a id=\"图片处理类\"></a>图片处理类</h1><pre><code>$config[&apos;image_library&apos;] = &apos;gd2&apos;;\n$config[&apos;source_image&apos;] = &apos;/path/to/image/mypic.jpg&apos;;\n$config[&apos;create_thumb&apos;] = TRUE;\n$config[&apos;maintain_ratio&apos;] = TRUE;\n$config[&apos;width&apos;] = 75;\n$config[&apos;height&apos;] = 50;\n\n$this-&gt;load-&gt;library(&apos;image_lib&apos;, $config); \n\n$this-&gt;image_lib-&gt;resize();  //创建缩略图  \n// $this-&gt;image_lib-&gt;crop() //图像裁剪\n// $this-&gt;image_lib-&gt;rotate() //图像旋转 \n// $this-&gt;image_lib-&gt;watermark() //添加图像水印\n// $this-&gt;image_lib-&gt;clear()  //clear函数重置所有之前用于处理图片的值。当你用循环来处理一批图片时，你可能会想使用它。\n\n//处理不同的图片有不同的配置,详情见文档\nhttp://codeigniter.org.cn/user_guide/libraries/image_lib.html\n\n\n//获取相应属性\n$this-&gt;image_lib-&gt;thumb_marker; \n//错误信息\n$this-&gt;image_lib-&gt;display_errors();\n</code></pre><h1 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a><a id=\"Session\"></a>Session</h1><pre><code>http://codeigniter.org.cn/user_guide/libraries/sessions.html\nSession 类将每个用户的 session 信息序列化（serialize）后存储到到 cookie 中（并同时进行加密）。\n\nci的Session是存储到cookie中.PHP原生的session是放到服务器中.\n所以需要加密.可查看值,但不能修改.因为提交时会通过密钥校验数据完整性.\n\n配置 \\application\\config\\config.php\n\n    配置Session加密(CI2.2可配置,CI3.0.0抛弃了此功能):\n        原:\n            $config[&apos;sess_encrypt_cookie&apos;]    = FALSE;\n        修改为:\n            $config[&apos;sess_encrypt_cookie&apos;]    = TRUE;\n\n    配置Session关闭浏览器后失效(CI2.2可配置,CI3.0.0无此配置项):\n        原:\n            $config[&apos;sess_expire_on_close&apos;] = FALSE;\n        修改为:\n            $config[&apos;sess_expire_on_close&apos;] = TRUE;\n\n        CI3.0.0 需要如下实现(关闭浏览器销毁session,不关闭或者不退出,则一直有效):\n            $config[&apos;sess_expiration&apos;] = 0; \n\n    配置Session密钥:\n\n        原:\n            $config[&apos;encryption_key&apos;] = &apos;&apos;;\n        修改密钥(可用echo md5(uniqid());生成一个值当密钥):\n            $config[&apos;encryption_key&apos;] = &apos;05c072360c5ac7e19d5b2566a995991c&apos;;\n\n    配置Session文件路径:\n\n        CI3.0.0版本需要配置此项,不然会出现 Message: mkdir() [function.mkdir]: Invalid argument 异常\n        CI3.0.0之前版本可以不要设置.(CodeIgniter_2.2.0测试查看,无此参数)\n\n        原:\n            $config[&apos;sess_save_path&apos;] = NULL;\n        新session路径(注意~~些路径需要要使用绝对路径)\n            创建目录用于存储Session:E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\CodeIgniter-3.0.0\\application\\session\n            $config[&apos;sess_save_path&apos;] = &apos;E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\CodeIgniter-3.0.0\\application\\session&apos;;\n\n        可查看 sess_save_path 配置相关文档\n            http://codeigniter.org.cn/user_guide/libraries/sessions.html\n            http://php.net/manual/en/session.configuration.php#ini.session.save-path\n\n    //加载模块\n    $this-&gt;load-&gt;library(&apos;session&apos;);\n    //存储session\n    $user = $this-&gt;session-&gt;set_userdata ( &apos;user&apos;, $user );\n    //取session\n    $user = $this-&gt;session-&gt;userdata(&apos;user&apos;);\n    //删除session\n    $this-&gt;session-&gt;unset_userdata(&apos;user&apos;);\n    $this-&gt;session-&gt;unset_userdata($array_items);//删除多个session\n</code></pre><p>Ci的Session实现案例:</p>\n<pre><code>案例见代码: \n&lt;?php\nclass Session_demo extends CI_Controller {\n    public function index(){}\n\n    public function __construct(){\n        parent::__construct();\n        $this-&gt;load-&gt;library(&apos;session&apos;);\n    }\n\n    // 先存储session \n    // http://127.0.0.1:8000/CodeIgniter-3.0.0/session_demo/set_session\n    // 在取出sesson(刷新演示一次性的数据)\n    // http://127.0.0.1:8000/CodeIgniter-3.0.0/session_demo/show_session\n    public function set_session() {\n        //echo md5(uniqid());exit;\n\n        $user = array(&apos;id&apos;=&gt;3,&apos;name&apos;=&gt;&apos;jack&apos;);\n\n        // 相当于原生的:\n        // session_start();\n        // $_SESSION[&quot;user&quot;] = $user;\n\n        $user = $this-&gt;session-&gt;set_userdata ( &apos;user&apos;, $user );\n        var_dump($user);//取出来NULL\n        echo &apos;&lt;br&gt;&apos;;\n\n        //取session\n        $user = $this-&gt;session-&gt;userdata(&apos;user&apos;);\n        var_dump($user);\n\n        //一次性的数据,只能读一次\n        $this-&gt;session-&gt;set_flashdata(&apos;test&apos;,&apos;testdate-aaaaaaaaaaaa&apos;);\n    }\n\n    //http://127.0.0.1:8000/CodeIgniter-3.0.0/session_demo/show_session\n    public function show_session(){\n        //获取CI session中的数据\n        $user = $this-&gt;session-&gt;userdata(&apos;user&apos;);\n        var_dump($user);\n\n        //只可以取一次,取完后就会被删除.\n        $test=$this-&gt;session-&gt;flashdata(&apos;test&apos;);\n        var_dump($test);\n    }\n\n    public function delete_session(){\n        //删除单个session\n        $this-&gt;session-&gt;unset_userdata(&apos;user&apos;);\n\n        // //删除多个session\n        // $array_items = array(&apos;user&apos;, &apos;test&apos;);\n        // $this-&gt;session-&gt;unset_userdata($array_items);\n    }\n\n    public function originalPHPsession(){\n        // 原生session\n        session_start();\n        //存储验证码信息到PHP原生的session中.\n        $_SESSION[&quot;cap&quot;] = &apos;abc&apos;;\n\n        //获取Session\n        $word = $_SESSION[&apos;cap&apos;];\n        echo $word;\n\n        //终结 Session\n        unset($_SESSION[&apos;cap&apos;]);\n        //重置session  , 失去所有已存储的 session 数据。\n        //session_destroy();\n    }\n}\n</code></pre><h1 id=\"验证码\"><a href=\"#验证码\" class=\"headerlink\" title=\"验证码\"></a><a id=\"验证码\"></a>验证码</h1><pre><code>ci的验证码会创建一个图片文件,所以需要创建文件夹用来存放\n    E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\CodeIgniter-3.0.0\\captcha\n\n使用CI验证码需要开启PHP的 GD 图像库\n    可用PHP代码检测是否开启GD图像库\n        if(extension_loaded(&apos;gd&apos;)){\n            echo &apos;你可以使用gd&lt;br&gt;&apos;;\n            foreach (gd_info() as $cate=&gt;$value)\n                echo &quot;$cate: $value&lt;br&gt;&quot;;\n        }else echo &apos;没有安装gd扩展&apos;;\n\n    开启 GD 图像库 方法:\n        E:\\ComTu_Design\\PHP\\php-5.3.5\\php.ini 配置文件修改如下:\n        原: \n            ;extension=php_gd2.dll\n        修改成(去除前面的;分号): \n            extension=php_gd2.dll\n        修改完后保存,重启apache\n</code></pre><p>CI默认实现:</p>\n<pre><code>//加载模块\n$this-&gt;load-&gt;helper(&apos;captcha&apos;);\n//创建验证码\n$cap = create_captcha($vals);\n//显示验证码\necho $cap[&apos;image&apos;];\n\n案例见代码: \n&lt;?php\nclass Captcha_demo extends CI_Controller{\n    public function index(){}\n\n    public function test(){\n        echo &apos;captcha_demo&apos;;\n\n        if(extension_loaded(&apos;gd&apos;)){\n            echo &apos;你可以使用gd&lt;br&gt;&apos;;\n            foreach (gd_info() as $cate=&gt;$value)\n                echo &quot;$cate: $value&lt;br&gt;&quot;;\n        }else echo &apos;没有安装gd扩展&apos;;\n\n        $this-&gt;load-&gt;helper(&apos;url&apos;);\n        $this-&gt;load-&gt;helper(&apos;captcha&apos;);\n        $number = rand(1000,9999);//生成随机字符串\n        $vals = array(\n                &apos;word&apos;      =&gt; $number,//可指定验证码内容,如果是中文.需要有支持的字体\n                &apos;img_path&apos;  =&gt; dirname(BASEPATH).&apos;/captcha/&apos;,//生成的图片存放目录,手动创建\n                &apos;img_url&apos;   =&gt; base_url(&apos;/captcha/&apos;),//图片链接地址\n                //&apos;font_path&apos; =&gt; &apos;./path/to/fonts/texb.ttf&apos;,//指定字体_如果使用中文需要指定字体\n                &apos;img_width&apos; =&gt; &apos;150&apos;,\n                &apos;img_height&apos;    =&gt; 30,\n                &apos;expiration&apos;    =&gt; 5,//图片存放时间,如果过期,只有在被再次请求才会删除.单位秒\n                &apos;word_length&apos;   =&gt; 8,\n                &apos;font_size&apos; =&gt; 16,\n                &apos;img_id&apos;    =&gt; &apos;Imageid&apos;,\n                &apos;pool&apos;      =&gt; &apos;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;,\n\n                // White background and border, black text and red grid\n                &apos;colors&apos;    =&gt; array(\n                        &apos;background&apos; =&gt; array(255, 255, 255),\n                        &apos;border&apos; =&gt; array(255, 255, 255),\n                        &apos;text&apos; =&gt; array(0, 0, 0),\n                        &apos;grid&apos; =&gt; array(255, 40, 40)\n                )\n        );\n\n        $cap = create_captcha($vals);\n        echo $cap[&apos;word&apos;].&quot;&lt;br&gt;&quot;;\n        echo $cap[&apos;image&apos;];\n\n        $this-&gt;load-&gt;view(&apos;user/captcha_view_demo&apos;,array(&apos;cap&apos;=&gt;$cap[&apos;image&apos;]));\n\n        // 原生session\n        session_start();\n        //存储验证码信息到PHP原生的session中.等待校验.\n        $_SESSION[&quot;cap&quot;] = $cap[&apos;word&apos;];\n\n        //获取Session\n        $word = $_SESSION[&apos;cap&apos;];\n        echo $word;\n    }\n}\n</code></pre><p><a id=\"扩展CI的captcha_helper.php实现_验证码\"></a>扩展CI的captcha<em>helper.php实现</em>验证码:</p>\n<pre><code>一般而言,对于验证码只需要用一次,没必要创建一张图片保存到本地.\n所以我对验证码类进行了如下扩展: 不存储验证码图片,并实现点击重新获取验证码.\n\n步骤一: \n\n    把 system/helpers/captcha_helper.php 文件拷贝到 application/helpers/ 目录下并重命名为:MY_captcha_helper.php\n\n步骤二:  去除与目录有关的代码\n\n    修改 MY_captcha_helper.php 里面的源文件进行如下操作:\n\n    (CI 3.0.0)\n        //处理如果没有设置图片路径而被返回的操作\n        //         if ($img_path === &apos;&apos; OR $img_url === &apos;&apos;\n        //             OR ! is_dir($img_path) OR ! is_really_writable($img_path)\n        //             OR ! extension_loaded(&apos;gd&apos;))\n        //         {\n        //             return FALSE;\n        //         }\n        //         // -----------------------------------\n        //         // Remove old images\n        //         // 删除旧图片\n        //         // -----------------------------------\n        //         $now = microtime(TRUE);\n        //         $current_dir = @opendir($img_path);\n        //         while ($filename = @readdir($current_dir))\n        //         {\n        //             if (substr($filename, -4) === &apos;.jpg&apos; &amp;&amp; (str_replace(&apos;.jpg&apos;, &apos;&apos;, $filename) + $expiration) &lt; $now)\n        //             {\n        //                 @unlink($img_path.$filename);\n        //             }\n        //         }\n        //         @closedir($current_dir);\n\n        // -----------------------------------\n        //  Generate the image\n        // 生成图片.\n        // -----------------------------------\n        //处理生成图片--start--\n        //         $img_url = rtrim($img_url, &apos;/&apos;).&apos;/&apos;;\n        //         if (function_exists(&apos;imagejpeg&apos;))\n        //         {\n        //             $img_filename = $now.&apos;.jpg&apos;;\n        //             imagejpeg($im, $img_path.$img_filename);\n        //         }\n        //         elseif (function_exists(&apos;imagepng&apos;))\n        //         {\n        //             $img_filename = $now.&apos;.png&apos;;\n        //             imagepng($im, $img_path.$img_filename);\n        //         }\n        //         else\n        //         {\n        //             return FALSE;\n        //         }\n        //         $img = &apos;&lt;img &apos;.($img_id === &apos;&apos; ? &apos;&apos; : &apos;id=&quot;&apos;.$img_id.&apos;&quot;&apos;).&apos; src=&quot;&apos;.$img_url.$img_filename.&apos;&quot; style=&quot;width: &apos;.$img_width.&apos;; height: &apos;.$img_height .&apos;; border: 0;&quot; alt=&quot; &quot; /&gt;&apos;;\n        //         ImageDestroy($im);\n        //         return array(&apos;word&apos; =&gt; $word, &apos;time&apos; =&gt; $now, &apos;image&apos; =&gt; $img, &apos;filename&apos; =&gt; $img_filename);\n        //处理生成图片--end--\n        //并在此处 增加如下四行代码,告诉浏览器返回的是一张图片.\n        header(&quot;Content-Type:image/jpeg&quot;);  \n        imagejpeg($im);\n        ImageDestroy($im);\n        return $word;//返回生成的验证码字符串\n\n\n    (CI 2.2.0)\n        //处理如果没有设置图片路径而被返回的操作\n        // if ($img_path == &apos;&apos; OR $img_url == &apos;&apos;){\n        //     return FALSE;\n        // }\n        // if ( ! @is_dir($img_path)){\n        //     return FALSE;\n        // }\n        // if ( ! is_writable($img_path)){\n        //     return FALSE;\n        // }\n        // if ( ! extension_loaded(&apos;gd&apos;)){\n        //     return FALSE;\n        // }\n        // // -----------------------------------\n        // // Remove old images\n        // // 生成图片.\n        // // -----------------------------------\n        // list($usec, $sec) = explode(&quot; &quot;, microtime());\n        // $now = ((float)$usec + (float)$sec);\n        // $current_dir = @opendir($img_path);\n        // while ($filename = @readdir($current_dir)){\n        //     if ($filename != &quot;.&quot; and $filename != &quot;..&quot; and $filename != &quot;index.html&quot;){\n        //         $name = str_replace(&quot;.jpg&quot;, &quot;&quot;, $filename);\n        //         if (($name + $expiration) &lt; $now){\n        //             @unlink($img_path.$filename);\n        //         }\n        //     }\n        // }\n        // @closedir($current_dir);\n\n        // -----------------------------------\n        //  Generate the image\n        // -----------------------------------\n        // $img_name = $now.&apos;.jpg&apos;;\n        // ImageJPEG($im, $img_path.$img_name);\n        // $img = &quot;&lt;img src=\\&quot;$img_url$img_name\\&quot; width=\\&quot;$img_width\\&quot; height=\\&quot;$img_height\\&quot; style=\\&quot;border:0;\\&quot; alt=\\&quot; \\&quot; /&gt;&quot;;\n        // ImageDestroy($im);\n        // return array(&apos;word&apos; =&gt; $word, &apos;time&apos; =&gt; $now, &apos;image&apos; =&gt; $img);\n        //并在此处 增加如下四行代码,告诉浏览器返回的是一张图片.\n        header(&quot;Content-Type:image/jpeg&quot;);  \n        imagejpeg($im);\n        ImageDestroy($im);\n        return $word;//返回生成的验证码字符串\n\n\n步骤三: \n    在控制器中使用 captcha\n    &lt;?php\n    defined(&apos;BASEPATH&apos;) OR exit(&apos;No direct script access allowed&apos;);\n\n    class Privilege extends CI_Controller {\n        public function __construct(){\n            parent::__construct();\n            //载入验证码辅助函数\n            $this-&gt;load-&gt;helper(&apos;captcha&apos;);\n        }\n\n        public function login(){\n            $this-&gt;load-&gt;view(&apos;login&apos;);\n        }\n\n        public function code(){\n            //创建验证码\n            $word = create_captcha();\n\n            //可以在MY_captcha_helper.php直接配置参数也是OK的.\n            //当然同样适用于配置参数.但可以免去了 CI文档中的 img_path 与 img_url 这两个必要参数了.\n            // $vals = array(\n            //     &apos;word&apos;      =&gt; rand(1000,9999),//可指定验证码内容,如果是中文.需要有支持的字体\n            //     //&apos;font_path&apos; =&gt; &apos;./path/to/fonts/texb.ttf&apos;,//指定字体_如果使用中文需要指定字体\n            //     &apos;img_width&apos; =&gt; &apos;150&apos;,\n            //     &apos;img_height&apos;    =&gt; 30,\n            //     &apos;expiration&apos;    =&gt; 5,//图片存放时间,如果过期,只有在被再次请求才会删除.单位秒\n            //     &apos;word_length&apos;   =&gt; 4, //验证码位数\n            //     &apos;font_size&apos; =&gt; 16,\n            //     &apos;img_id&apos;    =&gt; &apos;Imageid&apos;,\n            //     &apos;pool&apos;      =&gt; &apos;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;,\n            //     // White background and border, black text and red grid\n            //     &apos;colors&apos;    =&gt; array(\n            //     &apos;background&apos; =&gt; array(255, 255, 255),\n            //     &apos;border&apos; =&gt; array(255, 255, 255),\n            //     &apos;text&apos; =&gt; array(0, 0, 0),\n            //     &apos;grid&apos; =&gt; array(255, 40, 40)\n            // )\n            // );\n            //$word = create_captcha($vals);\n        }\n    }\n\n步骤四: view中显示 .并实现点击图片重新加载新图片的功能:\n    &lt;img src=&quot;&lt;?php echo site_url(&apos;admin/privilege/code&apos;);?&gt;&quot; width=&quot;145&quot; height=&quot;20&quot; alt=&quot;CAPTCHA&quot; border=&quot;1&quot;\n    onclick= this.src=&quot;&lt;?php echo site_url(&apos;admin/privilege/code&apos;).&apos;/&apos;;?&gt;&quot;+Math.random() style=&quot;cursor: pointer;&quot; title=&quot;看不清？点击更换另一个验证码。&quot;/&gt;\n</code></pre><h1 id=\"表单验证\"><a href=\"#表单验证\" class=\"headerlink\" title=\"表单验证\"></a><a id=\"表单验证\"></a>表单验证</h1><pre><code>http://codeigniter.org.cn/user_guide/libraries/form_validation.html\n\n实现: \n    //加载模块\n    $this-&gt;load-&gt;helper ( array (&apos;form&apos;,&apos;url&apos;) );\n    $this-&gt;load-&gt;library ( &apos;form_validation&apos; );\n    //设置校验规则,参数一:表单上的名称,参数二:错误信息显示的名称,参数三:校验的规则见标准文档\n    //http://codeigniter.org.cn/user_guide/libraries/form_validation.html#id25\n    $this-&gt;form_validation-&gt;set_rules(&apos;参数名&apos;,&apos;用户名&apos;,&apos;required&apos;);\n    //表单校验 返回true表示校验通过\n    $bool = $this-&gt;form_validation-&gt;run();\n    //表单校验加载校验规则 使用配置文件 application/config/form_validation.php 如果没有自己创建.\n    //$bool = $this-&gt;form_validation-&gt;run(&apos;demo&apos;);//参数名与config文件中的相对应.\n\n    form表单中\n        //自动回填内容项\n        &lt;?php echo set_value(&apos;参数名&apos;)?&gt;\n        //显示错误信息, 参数一:为form中的表单名,参数二,三:参数样式\n        &lt;?php echo form_error(&apos;参数名&apos;,&apos;&lt;span&gt;&apos;,&apos;&lt;/span&gt;&apos;)?&gt;\n        //显示全部错误信息\n        &lt;?php echo validation_errors();?&gt;\n</code></pre><p>案例见代码: </p>\n<pre><code>\\application\\controllers\\form_demo.php\n    &lt;?php\n    class Form_demo extends CI_Controller {\n        public function index() {\n        }\n        // http://127.0.0.1:8000/CodeIgniter-3.0.0/form_demo/insert\n        public function insert() {\n            $this-&gt;load-&gt;helper ( array (&apos;form&apos;,&apos;url&apos;) );\n            //加载模块\n            $this-&gt;load-&gt;library ( &apos;form_validation&apos; );\n\n            // 校验如果这样编写会编写很多规则代码.可以在config进行配置验证文件.也可实现重复利用的效果\n            // $this-&gt;form_validation-&gt;set_rules(&apos;name&apos;,&apos;用户名&apos;,&apos;required&apos;);\n            // $this-&gt;form_validation-&gt;set_rules(&apos;password&apos;,&apos;密码&apos;,&apos;required|min_length[6]|max_length[16]|md5&apos;);\n            //$this-&gt;form_validation-&gt;set_rules(&apos;repassword&apos;,&apos;确认密码&apos;,&apos;trim|required|md5|matches[password]&apos;);//重复密码验证\n            // $this-&gt;form_validation-&gt;set_rules(&apos;email&apos;,&apos;邮箱&apos;,array(&apos;required&apos;,&apos;valid_email&apos;));\n            // // 表单验证\n            // $bool = $this-&gt;form_validation-&gt;run();\n\n            // 表单验证配置文件 application/config/form_validation.php\n            $bool = $this-&gt;form_validation-&gt;run(&apos;demo&apos;);\n            if ($bool) {\n                // 调用模型保存数据库\n                echo &apos;success&apos;;\n            } else {\n                // 显示错误信息\n                $this-&gt;load-&gt;view ( &apos;user/form_view_demo&apos; );\n            }\n\n            echo $bool;\n        }\n    }\n\n--------\n\\application\\views\\user\\form_view_demo.php\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot;&gt;\n        &lt;title&gt;表单验证&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;?php echo validation_errors();?&gt;\n\n    &lt;form action=&quot;&lt;?php echo site_url(&apos;form_demo/insert&apos;);?&gt;&quot; method=&quot;post&quot;&gt;\n        name&lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;&lt;?php echo set_value(&apos;name&apos;)?&gt;&quot;/&gt;\n        &lt;?php echo form_error(&apos;name&apos;,&apos;&lt;span&gt;&apos;,&apos;&lt;/span&gt;&apos;)?&gt;\n        &lt;br&gt;\n        password&lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt;\n        &lt;?php echo form_error(&apos;password&apos;,&apos;&lt;span&gt;&apos;,&apos;&lt;/span&gt;&apos;)?&gt;\n        &lt;br&gt;\n        email&lt;input type=&quot;text&quot; name=&quot;email&quot; value=&quot;&lt;?php echo set_value(&apos;email&apos;)?&gt;&quot;/&gt;\n        &lt;?php echo form_error(&apos;email&apos;,&apos;&lt;span&gt;&apos;,&apos;&lt;/span&gt;&apos;)?&gt;\n        &lt;br&gt;\n        &lt;button type=&quot;submit&quot;&gt;submit&lt;/button&gt;\n    &lt;/form&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n--------\n\\application/config/form_validation.php\n    &lt;?php\n        $config = array (\n            &apos;demo&apos; =&gt; array (\n                    array (\n                            &apos;field&apos; =&gt; &apos;name&apos;,\n                            &apos;label&apos; =&gt; &apos;用户名&apos;,\n                            &apos;rules&apos; =&gt; &apos;required&apos; \n                    ) ,\n                    array (\n                            &apos;field&apos; =&gt; &apos;password&apos;,\n                            &apos;label&apos; =&gt; &apos;密码&apos;,\n                            &apos;rules&apos; =&gt; &apos;required&apos; \n                    ),\n                    array (\n                            &apos;field&apos; =&gt; &apos;email&apos;,\n                            &apos;label&apos; =&gt; &apos;邮箱&apos;,\n                            &apos;rules&apos; =&gt; &apos;required|valid_email&apos; \n                    )\n            ),\n            &apos;signup&apos;=&gt;array( ....  )\n        );\n</code></pre><h1 id=\"语言包\"><a href=\"#语言包\" class=\"headerlink\" title=\"语言包\"></a><a id=\"语言包\"></a>语言包</h1><pre><code>如表单错误信息等语言.\n    将语言包解压到\n        \\application\\language\\zh_cn\n    配置语言:\n        \\application\\config\\config.php\n        原:\n            $config[&apos;language&apos;]    = &apos;english&apos;;\n        改成\n            $config[&apos;language&apos;]    = &apos;zh_cn&apos;;\n</code></pre><h1 id=\"购物车类库\"><a href=\"#购物车类库\" class=\"headerlink\" title=\"购物车类库\"></a><a id=\"购物车类库\"></a>购物车类库</h1><pre><code>http://codeigniter.org.cn/user_guide/libraries/cart.html\n\nCI3.0.0 官方上标注: 之后购物车类已经废弃，请不要使用。目前保留它只是为了向前兼容。\n\n引入购物车支持库\n$this-&gt;load-&gt;library(&apos;cart&apos;);\n//$autoload[&apos;libraries&apos;] = array(&apos;cart&apos;);//或者配置 application/config/autoload.php\n\n加入购物车\n    //名称有要求\n    $data[&apos;id&apos;] = $this-&gt;input-&gt;post(&apos;goods_id&apos;,true); //id\n    $data[&apos;name&apos;] = $this-&gt;input-&gt;post(&apos;goods_name&apos;,true); //商品名称\n    $data[&apos;qty&apos;] = $this-&gt;input-&gt;post(&apos;goods_nums&apos;,true); //数量\n    $data[&apos;price&apos;] = $this-&gt;input-&gt;post(&apos;shop_price&apos;,true); //金额\n\n    $goods_thumb= $this-&gt;input-&gt;post(&apos;goods_thumb&apos;,true);\n    $data[&apos;options&apos;] = array(&apos;goods_thumb&apos;=&gt;$goods_thumb);//更多信息\n\n    if($this-&gt;cart-&gt;insert($data)){\n        echo &apos;ok&apos;;\n    }else{\n        echo &apos;error&apos;;\n    }\n\n//获取购物车数据\n$data[&apos;carts&apos;] = $this-&gt;cart-&gt;contents();\n\n//view中获取展示数据\n&lt;?php foreach ($carts as $v):?&gt;\n    &lt;?php echo base_url(&apos;public/uploads&apos;).&apos;/&apos;.$v[&apos;options&apos;][&apos;goods_thumb&apos;];?&gt;\n    &lt;?php echo $v[&apos;id&apos;];?&gt;\n    &lt;?php echo $v[&apos;name&apos;];?&gt; \n    &lt;?php echo $v[&apos;price&apos;];?&gt;\n    &lt;?php echo $v[&apos;qty&apos;];?&gt;\n    &lt;!-- 自动生成 --&gt;\n    &lt;?php echo $v[&apos;row_id&apos;];?&gt;\n    &lt;!-- 自动生成 $v[&apos;subtotal&apos;] 会自动计算出总金额--&gt;\n    &lt;?php echo $v[&apos;subtotal&apos;]?&gt;\n&lt;?php endforeach;?&gt;\n\n删除/修改购物车\n    $data[&apos;rowid&apos;] = $rowid;\n    $data[&apos;qty&apos;] = 0;\n    $this-&gt;cart-&gt;update($data);\n    redirect(&apos;cart/show&apos;);\n\n注意事项:\n\n    1. 中文问题(2.2.0存在,3.0.0不存在)\n        $data[&apos;name&apos;] = $this-&gt;input-&gt;post(&apos;goods_name&apos;,true); //商品名称\n        中name项在 CI3.0.0之前是不支持中文内容的. CI3.0.0版本可支持中文.\n        CI2.2.0修改cart.php原文件来使name支持中文.\n            方法: system/library/Cart.php 拷贝到 application/library 中,找到如下代码并注释即可.\n\n                // Validate the product name. It can only be alpha-numeric, dashes, underscores, colons or periods.\n                // Note: These can be user-specified by setting the $this-&gt;product_name_rules variable.\n                //CI2.2.0的原代码在186行数\n                //if ( ! preg_match(&quot;/^[&quot;.$this-&gt;product_name_rules.&quot;]+$/i&quot;, $items[&apos;name&apos;]))\n                //{\n                //    log_message(&apos;error&apos;, &apos;An invalid name was submitted as the product name:\n                //    &apos;.$items[&apos;name&apos;].&apos; The name can only contain alpha-numeric\n                //    characters, dashes, underscores, colons, and spaces&apos;);\n                //    return FALSE;\n                //}\n    2.total_items 问题 (CI2.2.0与CI3.0.0都存在)\n        显示购物车中商品数量。 CI框架中默认是显示出商品数量总数\n        即:如果存放到购物车2双鞋子+1条裤子 &lt;?php echo $this-&gt;cart-&gt;total_items();?&gt; 获取出来的数据是3件物品,而不是2种商品\n        而如果你的需求是 显示商品种类 .需要修改源代码.\n            方法: system/library/Cart.php 拷贝到 application/library 中,找到如下代码修改:\n                CI3.0.0\n                    //代码位置在401行 _save_cart 函数中\n                    $this-&gt;_cart_contents[&apos;cart_total&apos;] += ($val[&apos;price&apos;] * $val[&apos;qty&apos;]);\n                    //$this-&gt;_cart_contents[&apos;total_items&apos;] += $val[&apos;qty&apos;];  //原代码\n                    $this-&gt;_cart_contents[&apos;total_items&apos;] ++;  //新代码\n                    $this-&gt;_cart_contents[$key][&apos;subtotal&apos;] = \n                    ($this-&gt;_cart_contents[$key][&apos;price&apos;] * $this-&gt;_cart_contents[$key][&apos;qty&apos;]);\n\n                CI2.2.0\n                    //代码位置在386行 _save_cart 函数中\n                    $total += ($val[&apos;price&apos;] * $val[&apos;qty&apos;]);\n                    //$items += $val[&apos;qty&apos;];//原代码\n                    $items ++;//新代码\n\n    3.在我们向购物车中添加商品的时候，如果添加了已经存在于购物车中的商品时，会出现逻辑错误。\n        理论上应该是累加，但实际上是将原来的商品信息给删除了。所以要相应的处理一下：    \n\n            // 获取/封装数据....\n            //在插入之前,需要判断即将要加入的商品是否已经存在于购物车中\n            $carts = $this-&gt;cart-&gt;contents();\n            foreach ($carts as $v){\n                if($v[&apos;id&apos;] == $data[&apos;id&apos;]){\n                    $data[&apos;qty&apos;] += $v[&apos;qty&apos;];\n                }\n            }\n            // 插入数据...\n</code></pre><h1 id=\"CI框架内部解析\"><a href=\"#CI框架内部解析\" class=\"headerlink\" title=\"CI框架内部解析\"></a><a id=\"CI框架内部解析\"></a>CI框架内部解析</h1><pre><code>CI是一个单入口框架,所有的请求都需要经常index.php文件 . 流程如下:\n              | --&gt; Routing --&gt; Scourity --&gt;     |-----------------------|\n    index.php |                                  |Application Controller |--&gt;Drivers,Models,Libaies,Helpers,Packages,Scripts\n              | &lt;-- Caching &lt;--   View   &lt;--     |-----------------------|     \n</code></pre><p>分析index.php文件.</p>\n<pre><code>$system_path = &apos;system&apos;;\n$application_folder = &apos;application&apos;;\n这个和我们的文件夹结构名称一一对应. 当然这个名称是可以更改.\n\n中间加载一些系统目录常量等.\n在index.php结尾尝试打印里面的内容.\n\n        var_dump(SELF , ENVIRONMENT ,BASEPATH ,FCPATH,  SYSDIR);\n        exit();\n    结果\n        string(9) &quot;index.php&quot;\n        string(11) &quot;development&quot;\n        string(62) &quot;E:/ComTu_Design/PHP/Apache2.2/htdocs/CodeIgniter-3.0.0/system/&quot;\n        string(55) &quot;E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\CodeIgniter-3.0.0/&quot;\n        string(6) &quot;system&quot;\n\n最后载入\n    require_once BASEPATH.&apos;core/CodeIgniter.php&apos;;\n</code></pre><p>分析CodeIgniter.php</p>\n<pre><code>载入Common.php 通用函数库.        \n    require_once(BASEPATH.&apos;core/Common.php&apos;);\n        例如:    is_php($version) php版本\n            is_really_writable 是否可写\n            load_class 载入类函数\n            等等\n\n载入配置文件(常量配置)\n    require_once(APPPATH.&apos;config/constants.php&apos;);\n\n载入核心类文件.\n    $BM =&amp; load_class(&apos;Benchmark&apos;, &apos;core&apos;); \n    $EXT =&amp; load_class(&apos;Hooks&apos;, &apos;core&apos;);  勾子类\n    $CFG =&amp; load_class(&apos;Config&apos;, &apos;core&apos;); 配置文件类\n    $UNI =&amp; load_class(&apos;Utf8&apos;, &apos;core&apos;); 编码类\n    $URI =&amp; load_class(&apos;URI&apos;, &apos;core&apos;); URI类\n    $RTR =&amp; load_class(&apos;Router&apos;, &apos;core&apos;, isset($routing) ? $routing : NULL); 路由类\n    $OUT =&amp; load_class(&apos;Output&apos;, &apos;core&apos;); 输出类\n    $SEC =&amp; load_class(&apos;Security&apos;, &apos;core&apos;); 安全类 \n    $IN  =&amp; load_class(&apos;Input&apos;, &apos;core&apos;);输入类\n    $LANG =&amp; load_class(&apos;Lang&apos;, &apos;core&apos;);语言类\n\n载入CI总控制器.\n    require_once BASEPATH.&apos;core/Controller.php&apos;;\n\n通过router类对象 $RTR的两个方法获取当前的类名和方法名\n\n    CI 2.2.0\n        $class  = $RTR-&gt;fetch_class();\n        $method = $RTR-&gt;fetch_method();\n\n    CI 3.0.0\n        $class = ucfirst($RTR-&gt;class);\n        $method = $RTR-&gt;method;\n\n    比如:输入 http://127.0.0.1:8000/CodeIgniter-3.0.0/form_demo/insert \n    那么上述代码获取的$class就是控制器form_demo,$method就是insert , 如果没\n    有方法名,则默认index\n\nNew了一个对象,叫做CI, 这个就是CI框架中的超级对象(super class)    \n    $CI = new $class(); //此处,就是超级对象的形成过程.\n    //var_dump($CI); 可以尝试在此处打印一下$CI的信息 . \n</code></pre><p>分析CI_Controller类 Controller.php </p>\n<pre><code>        简单的PHP单例设计模式.\n            private static $instance;\n            public static function &amp;get_instance(){\n                return self::$instance;\n            }\n\n        构造函数中将前面载入的核心类,作为CI对象的属性.\n            foreach (is_loaded() as $var =&gt; $class){\n                $this-&gt;$var =&amp; load_class($class);\n            }\n\n        然后是载入Loader.php 装载类\n            $this-&gt;load =&amp; load_class(&apos;Loader&apos;, &apos;core&apos;);\n\n在控制器中出现的$this就是超级对象.\n超级对象形成之后,我们就可以使用超级对象(超级对象的属性)\n提供一系列方法完成我们的业务逻辑.如果需要完成其它的功能,可以载入其他的类文件,辅助函数.\n这些类文件和辅助函数包括CI已经提供好的.也可以是我们自己定义的.\n</code></pre><p>使用中遇到过的问题<br>    CI 3.0.0使用中<br>    访问 views/目录下的文件时被拦截.如<br>    <a href=\"http://127.0.0.1:8000/mycishop/application/views/images/ecshop_logo.gif\">http://127.0.0.1:8000/mycishop/application/views/images/ecshop_logo.gif</a></p>\n<pre><code>提示:\n    Forbidden\n    You don&apos;t have permission to access /mycishop/application/views/images/ecshop_logo.gif on this server.\n\n解决办法:\n    查看与 views 同级的 .htaccess文件 发现是此处招到的拦截.\n    &lt;IfModule authz_core_module&gt;\n        Require all denied\n    &lt;/IfModule&gt;\n    &lt;IfModule !authz_core_module&gt;\n        #拦截访问.\n        #Deny from all\n        #修改成如下代码即可.\n        Allow from all \n    &lt;/IfModule&gt;\n配置文件与 [隐藏入口文件-index.php](#隐藏入口文件-index.php) 里面的权限管理类似.\n</code></pre><p>///////////////////////////////数据库附件////////////////////////////////////////////////</p>\n<pre><code>/*\n 查询数据库\n\n mysql&gt; show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| discuz             |\n| mysql              |\n| test               |\n| wordpress          |\n+--------------------+\n5 rows in set (0.00 sec)\n\n进入到test数据库\n\nmysql&gt; use test   \nDatabase changed\n\n查看test数据库中的表\n\nmysql&gt; show tables;\nEmpty set (0.00 sec)\n\n创建表\n\nmysql&gt; \nmysql&gt; CREATE TABLE IF NOT EXISTS bolg_user(\n    -&gt;  id INT AUTO_INCREMENT PRIMARY KEY,\n    -&gt;  name VARCHAR(255) NOT NULL UNIQUE,\n    -&gt;  password CHAR(32) NOT NULL,\n    -&gt;  email VARCHAR(255) NOT NULL DEFAULT &apos;&apos;\n    -&gt; )ENGINE MyISAM DEFAULT CHARSET=UTF8;\nQuery OK, 0 rows affected (0.05 sec)\n\n增加数据\n\nmysql&gt;\nmysql&gt; \nmysql&gt; INSERT INTO bolg_user (name,password) VALUES (&apos;admin&apos;,md5(&apos;admin&apos;));\nQuery OK, 1 row affected (0.07 sec)\n\n查看数据库的表\n\nmysql&gt; show tables;\n+----------------+\n| Tables_in_test |\n+----------------+\n| bolg_user      |\n+----------------+\n1 row in set (0.00 sec)\n\n查看数据库结构\n\nmysql&gt; desc bolg_user;\n+----------+--------------+------+-----+---------+----------------+\n| Field    | Type         | Null | Key | Default | Extra          |\n+----------+--------------+------+-----+---------+----------------+\n| id       | int(11)      | NO   | PRI | NULL    | auto_increment |\n| name     | varchar(255) | NO   | UNI | NULL    |                |\n| password | char(32)     | NO   |     | NULL    |                |\n| email    | varchar(255) | NO   |     | NULL    |                |\n+----------+--------------+------+-----+---------+----------------+\n4 rows in set (0.02 sec)\n\n设置编码格式为gbk,解决查看时乱码.\nmysql&gt; set names gbk;\nQuery OK, 0 rows affected (0.00 sec)\n\n查询数据库表中的内容\n\nmysql&gt; select * from bolg_user;\n+----+-------+----------------------------------+-------+\n| id | name  | password                         | email |\n+----+-------+----------------------------------+-------+\n|  1 | admin | 21232f297a57a5a743894a0e4a801fc3 |       |\n+----+-------+----------------------------------+-------+\n1 row in set (0.00 sec)\n * */\n</code></pre><p><a href=\"/res/file/blog/2015/09/10/PHP_codeigniter/CodeIgniter-3.0.0_Demo.rar\">本文案例Demo</a></p>\n<p><a href=\"/res/file/blog/2015/09/10/PHP_codeigniter/mycishop.rar\">本文案例Demo<em>附加Demo</em>购物商场</a></p>"},{"layout":"post","title":"PHP学习笔记-Laravel框架","duoshuo":true,"date":"2015-10-09T16:00:00.000Z","_content":"\n本人因公司的需要.学习PHP的Laravel框架.本博文为学习笔记.     \n本博文中包含有 `Laravel安装配置环境部署`,`路由`,`控制器`,`视图`,`模型`,`MVC` ,`数据库`,`请求`,`Session`,`表单研制`,   \n`中间件`,`哈希`,`辅助函数`,以及`图片处理库Integration/Image`的使用.`artisan`常用命令等内容.   \n\n<!-- more -->\n\n目录:\n\n* [安装Laravel](#安装Laravel)\n* [Laravel目录结构](#Laravel目录结构)\n* [路由](#路由)\n* [控制器(Controller)](#控制器(Controller))\n* [视图(Views)](#视图(Views))\n* [模型(model)](#模型(model))\n* [环境与部署](#环境与部署)\n* [数据库](#数据库)\n* [请求](#请求)\n* [Session](#Session)\n* [表单验证](#表单验证)\n* [中间件](#中间件)\n* [哈希](#哈希)\n* [辅助函数](#辅助函数)\n* [在 Laravel 中使用图片处理库 Integration/Image](#图片处理库Integration/Image)\n* [我遇到的错误](#我遇到的错误)\n* [artisan命令](#artisan命令)\n* [Demo](#Demo)\n\n# <a id=\"安装Laravel\"></a>安装Laravel\n\n\t1.1.下载安装PHP\n\n\t\thttp://windows.php.net/download/\n\n\t\tIDE (https://www.jetbrains.com/phpstorm/)\n\n\t\t本人使用的PHP版本为:php-5.5.28-nts\n\t\tLaravel框架要求PHP 版本 >= 5.4\n\n\t1.2.安装Composer \n\n\t\tComposer  \n\t\t官网: https://getcomposer.org/\n\t\tGitHub: https://github.com/composer/composer\n\t\t中文: http://www.phpcomposer.com/ 中国镜像\n\n\t\tComposert官方下载地址: https://getcomposer.org/Composer-Setup.exe\n\n\t\t如果出现如下安装错误:\n\n\t\t\tSome settings on your machine make Composer unable to work properly.\n\t\t\tMake sure that you fix the issues listed below and run this script again:\n\t\t\tThe openssl extension is missing, which means that secure HTTPS transfers are impossible.\n\t\t\tIf possible you should enable it or recompile php with --with-openssl\n\n\t\t\t缺失openssl扩展\n\t\t\t\n\t\t\t处理方式: \n\t\t\t\t找到php目录下的php.ini文件(如果没有则把php.ini-development拷贝重命名为php.ini)\n\t\t\t\t用编辑器打开 php.ini 文件，修改以下配置： \n\t\t\t\t去掉 extension=php_mbstring.dll 前面的分号（888 行左右） \n\t\t\t\t去掉 extension=php_openssl.dll 前面的分号（893 行左右） \n\t\t\t\t去掉 extension_dir = \"ext\" 前面的分号（736 行左右）\n\t\t\t然后重试即可.安装完全成后使用cmd输入composer显示如下内容表示安装成功.\n\n\t\tC:\\Users\\comtu>composer\n\t\t   ______\n\t\t  / ____/___  ____ ___  ____  ____  ________  _____\n\t\t / /   / __ \\/ __ `__ \\/ __ \\/ __ \\/ ___/ _ \\/ ___/\n\t\t/ /___/ /_/ / / / / / / /_/ / /_/ (__  )  __/ /\n\t\t\\____/\\____/_/ /_/ /_/ .___/\\____/____/\\___/_/\n\t\t\t\t    /_/\n\n\t\t....省略.....\n\n\t1.3.在项目中创建 Composer \n\n\t\t使用cmd定位到项目目录下.如:\n\t\t\tE:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm>\n\n\t\t使用命令:\n\t\t\tcmd(或者使用PHPStorm的Terminal本人使用的IDE就是PHPStorm)\t\n\n\t\t\tcomposer create-project laravel/laravel --prefer-dist my_laravel\n\t\t\n\t\t\t回车后会自动下载laravel框架.下载目录生成在firstPHPStorm目录下.\n\t\t\t\tlaravel/laravel 指下载laravel目录下的laravel\n\t\t\t\t--prefer-dist下载的文件为压缩过的.\n\t\t\t\tmy_laravel 为安装到的文件目录名(自定义).\n\n\t\t\t如果没有代理下载速度就呵呵了.(本人大概花费15分钟左右时间.)\n\t\t\t最后提示如下内容表示下载成功:\n\t\t\t\tApplication key [xxxxxxxxxxxxxxxxxxxx] set successfully. \n\n\t\t一键安装包\n\t\t\t故有了一键安装包.rar里面的内容就是通过命令下载下来的文件.免去了再龟速的下载.\n\n\t\t\tLaravel一键安装包下载地址: http://www.golaravel.com/download/\n\t\t\n\t1.4.测试运行Laravel\n\n\t测试运行方式1:\n\n\t\tcmd(或者使用PHPStorm的Terminal本人使用的IDE就是PHPStorm)\n\t\t\n\t\tphp -S localhost:80 -t my_laravel\\public\n\n\t\t提示出现:\n\t\t\tPHP 5.5.28 Development Server started at Sat Oct 10 10:20:28 2015\n\t\t\tListening on http://localhost:80\n\t\t\tDocument root is E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel\\public\n\t\t\tPress Ctrl-C to quit.\n\t\t\n\t\t打开浏览器:\n\t\t地址栏输入:localhost\n\t\t界面中显示出\"Laravel 5\"大字表示运行成功.\n\t\t\n\t\t但如果你的是使用linux或者其它系统.如果出现浏览器显示出白屏或者其它内容.则可能是因为有两个文件夹的权限的原因\n\t\t需要为 my_laravel/storage (日志,session,等目录)  与 my_laravel/vendor (Composer下载的支持库,或者自己的第三方库目录)\n\t\t有写入的权限\n\n\t\tLinux设置对应的权限命令如下:\n\n\t\t\tchown -R apache:apache /var/www/my_laravel/storage\n\t\t\tchown -R apache:apache /var/www/my_laravel/vendor\n\n\n\t测试运行方式2(PHP版本5.4之后的版本):\n\t\n\t\tartisan 的 serve 命令还支持两个参数：\n\n\t\thost 设置主机地址\n\t\tport 设置 web server 监听的端口号\n\t\t例如：php artisan serve --port=8888\n\n\n\t\tcmd 定位目录到my_laravel 输入 php artisan serve (PHP5.4之后开始支持内置web Server 同时Laravel也支持)\n\t\tE:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel>php artisan serve 回车(默认8000接口可指定)\n\t\tLaravel development server started on http://localhost:8000/ 提示\n\n\t\t打开浏览器，在地址栏输入 localhost:8000 于方式1运行出相同的效果.\n\t\t\n\t\t如你电脑上有运行Apache 并且端口也是8000那么会出现如下提示,需要关闭Apache或者指定其它接口后再试.\n\t\t[Sat Oct 10 10:39:21 2015] Failed to listen on localhost:8000 \n\t\t(reason: 以一种访问权限不允许的方式做了一个访问套接字的尝试。)\n\n# <a id=\"Laravel目录结构\"></a>Laravel目录结构\n\n\t本学习笔记使用到的文件目录\n\n\tmy_laravel\n\t\t|-->app\n\t\t|    |--->Http \n\t\t|    |     |---->Controllers 控制器目录\n\t\t|    |     |       |-----> 控制器文件\n\t\t|    |     |---->Middleware\n\t\t|    |     |       |-----> 中间件文件\n\t\t|    |     |---->routes.php 路由配置文件\n\t\t|    |     |---->Kernel.php 中间件配置文件\n\t\t|    |---> 根目录Model默认目录\n\t\t|-->bootstrap\n\t\t|-->config  配置文件\n\t\t|    |--> app.php\n\t\t|    |--> database.php\n\t\t|    |--> ....\n\t\t|-->database 数据库\n\t\t|-->public 对外开放目录\n\t\t|-->resources\n\t\t|    |--->views 视图View目录\n\t\t|          |---->xxxx.blade.php 视图文件\n\t\t|          |---->errors 目录\n\t\t|                  |-----> 503.blade.php 文件当artisan命令使用 php artisan down 时会网站全部连接转向此文件.\n\t\t|-->storage 日志,session等缓存目录\n\t\t|-->tests \n\t\t|-->vendor 自己的第三方库目录与Composer下载的支持库\n\t\t|    |--->laravel 框架目录\n\t\t|    |--->intervention 图片处理库,需要下载\n\t\t|-->.env 文件 环境配置文件.\n\t\t|-->Composer.json 环境库配置文件 \n\n# <a id=\"路由\"></a>路由\n\t\n\t路由作用是宏观的分发和限制请求\n\n\thttp://laravel-china.org/docs/5.0/routing 中文文档\n\n\thttp://laravel.com/docs/5.0/routing 原版文档\n\thttp://laravel.com/docs/5.1/routing 原版文档\n\n\t3.1 配置基本路由\n\t\t文件目录:my_laravel/app/Http/routes.php\t\n\t\t\n\t\t选择get/post/any 等等\n\t\t\t一般get是向服务器要数据\n\t\t\tpost是向服务器发数据\n\t\t\tany就是通过全部请求类型\n\n\t\t//get\n\t\t\tRoute::get('/','WelcomeController@index');\n\t\t\t//意思是如果通过get访问/域名就交给WelcomeController控制器的index方法进行处理.\n\n\t\t\t//通过 http://localhost/home 访问.可进入到登录页面\n\t\t\tRoute::get('home', 'HomeController@index');\n\n\t\t\t也可以使用函数的方式直接返回视图(可加快测试速度)\n\n\t\t\tRoute::get('/',\tfunction () {\n\t\t\t\t\treturn view('welcome');\n\t\t\t\t\t//视图文件目录位于:my_laravel/resources/views/welcome.blade.php\n\t\t\t\t}\n\t\t\t);\n\t\t\t//意思是如果访问/域名 显示视图welcome\n\t\t\t\t\n\t\t//post方式 路由使用函数\n\t\t\tRoute::post('test',function (){\n\t\t\t\treturn view('welcome');\n\t\t\t});\n\t\t\n\t\t//any(不管用什么方式get/post等请求都通过),对于不敏感的信息都可以使用这种模式.\n\t\t\tRoute::any('testAny',function (){\n\t\t\t\treturn 'any请求,注册路由响应所有 HTTP 请求';\n\t\t\t});\n\t\t\n\t\t//match 为多种请求注册路由\n\t\t\tRoute::match(['get', 'post'], '/', function()\n\t\t\t{\n\t\t\t    return 'Hello World';\n\t\t\t});\n\n\t\t//resource 请求控制器中的所有方法\n\t\t\t//http://localhost/user\n\t\t\t//http://localhost/user/create\n\t\t\t//http://localhost/user/destroy\n\t\t\t//http://localhost/user/update\n\t\t\t//http://localhost/user/show\n\t\t\t//资源 不用像WelcomeController@index指定方法,直接可以调用. 但在项目中不够灵活.\n\t\t\tRoute::resource('user','UserController');\n\n\t3.2 CSRF保护\n\t\t跨站攻击保护机制(跨网站请求伪造))\n\t\t例如:原本一个post请求的链接,用户使用第三方工具(如chrome浏览器的Postman插件)伪造post请求\n\t\t有CSRF则会对这种请求进行拦截.\n\t\n\t3.3 路由传参\n\t\t基础路由参数\n\t\t\tRoute::get('user/{id}', function($id){\n\t\t\t    return 'User '.$id;\n\t\t\t});\n\n\t\t可选择的路由参数\n\t\t\tRoute::get('user/{name?}', function($name = null){\n\t\t\t    return $name;\n\t\t\t});\n\n\t\t带默认值的路由参数\t\n\t\t\tRoute::get('user/{name?}', function($name = 'John'){\n\t\t\t    return $name;\n\t\t\t});\n\n\t\t使用正则表达式限制参数\n\t\t\tRoute::get('user/{name}', function($name){\n\t\t\t    //\n\t\t\t})\n\t\t\t->where('name', '[A-Za-z]+');\n\n\t\t\tRoute::get('user/{id}', function($id){\n\t\t\t    //\n\t\t\t})\n\t\t\t->where('id', '[0-9]+');\n\n\t\t使用条件限制数组\n\t\t\tRoute::get('user/{id}/{name}', function($id, $name){\n\t\t\t    //\n\t\t\t})\n\t\t\t->where(['id' => '[0-9]+', 'name' => '[a-z]+']);\n\t\t\n\t\t定义全局模式\n\t\t\t如果你想让特定路由参数总是遵询特定的正则表达式，可以使用 pattern 方法。在 RouteServiceProvider 的 boot 方法里定义模式：\n\n\t\t\t$router->pattern('id', '[0-9]+');\n\t\t\t定义模式之后，会作用在所有使用这个特定参数的路由上：\n\n\t\t\tRoute::get('user/{id}', function($id)\n\t\t\t{\n\t\t\t    // 只有 {id} 是数字才被调用。\n\t\t\t});\n\n\t\t取得路由参数\n\n\t\t\t如果需要在路由外部取得其参数，使用 input 方法：\n\n\t\t\tif ($route->input('id') == 1){\n\t\t\t    //\n\t\t\t}\n\t\t\t你也可以使用 Illuminate\\Http\\Request 实体取得路由参数。\n\t\t\t当前请求的实例可以通过 Request facade 取得，或透过类型提示 Illuminate\\Http\\Request 注入依赖：\n\n\t\t\tuse Illuminate\\Http\\Request;\n\n\t\t\tRoute::get('user/{id}', function(Request $request, $id){\n\t\t\t    if ($request->route('id')){\n\t\t\t\t//\n\t\t\t    }\n\t\t\t});\n\t\n\t\n\t还有如:\t方法欺骗 , 命名路由 , 路由群组 , 路由模型绑定 , 抛出 404 错误 等内容 ,见官方文档.\n\n# <a id=\"控制器(Controller)\"></a>控制器(Controller)\n\t\n\t控制器的作用是请求二级分发者\n\n\t控制器目录\n\t\tmy_laravel/app/Http/Controllers/目录下\n\n\t创建控制器\n\t\t手动模式创建:\n\t\t\t例如新创建: my_laravel/app/Http/Controllers/MyController1.php 内容如下\n\t\t\t\t<?php namespace App\\Http\\Controllers;\n\t\t\t\tclass MyController1 extends Controller {\n\t\t\t\t    public function getAbout(){\n\t\t\t\t\treturn 'MyController1@ABOUT gogogo';\n\n\t\t\t\t\t//到视图\n\t\t\t\t\t//return view('my_welcome');//跳转到my_welcome.blade.php视图View中.\n\t\t\t\t\t//传参数方式1 //跳转到my_welcome.blade.php视图View中并带一个参数$name = 'comtu'.\n\t\t\t\t\t//return view('my_welcome')->with('name','comtu');\n\t\t\t\t\t//传参数方式2 //跳转到my_welcome.blade.php视图View中并带一个参数$name = 'name'.\n\t\t\t\t\t//$name = 'lala';\n\t\t\t\t\t//return view('my_welcome',compact('name'/*['name'->'lala']*/);\n\t\t\t\t\t//传参数方式3\n\t\t\t\t\t//$data=[\n\t\t\t\t\t//\t'name' => 'comtu',\n\t\t\t\t\t//\t'age' => 128\n\t\t\t\t\t//];\n\t\t\t\t\t//return view('my_welcome',$data);//传多参数.视图View中直接使用$name , $age即可.\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t配置路由\n\t\t\t\t//http://localhost/myController1\n\t\t\t\tRoute::get('myController1','MyController1@getAbout');\n\t\n\t\t命令模型创建(推荐,更准确):\n\n\t\t\t使用Terminal定位(cmd)目录文件到 my_laravel 目录下 使用artisan命令\n\t\t\t使用命令:\n\t\t\t\tE:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel>\n\t\t\t\tphp artisan make:controller MyController\n\t\t\t\n\t\t\t提示:Controller created successfully. 创建成功.\n\t\t\t查看my_laravel/app/Http/Controllers/MyController.php\n\t\t\t发现会生成生成MyController.php文件 文件里会自动生成类,以及一些方法:\n\t\t\t如:index() , create() , store() , show($id) , edit($id) , update($id) , destroy($id)\n\t\t\t但都是空实现.\n\t\n# <a id=\"视图(Views)\"></a>视图(Views)\n\t\n\tMVC显示层\n\n\tmy_laravel/resources/views/xxxx.blade.php\n\t\n\t创建View视图\n\t\t一般流程为: 创建控制器-->配置路由-->创建视图.\n\t\t\n\t\t1.在创建的控制器 MyController.php 中增加如下方法:\n\t\t\t<?php namespace App\\Http\\Controllers;\n\t\t\tclass MyController1 extends Controller {\n\t\t\t\tpublic function index(){\n\t\t\t\t\t//到视图\n\t\t\t\t\treturn view('my_welcome');//跳转到my_welcome.blade.php视图View中.\n\t\t\t\t}\n\n\t\t\t\t//传参数方式1\n\t\t\t\tpublic function parameter(){\n\t\t\t\t\t$data=[\n\t\t\t\t\t\t'name' => 'comtu',\n\t\t\t\t\t\t'age' => 128,\n\t\t\t\t\t        'people'=>['张三','李四','王五']\n\t\t\t\t\t];\n\t\t\t\t\treturn view('my_welcome',$data);//传多参数.视图View中直接使用$name , $age即可.\n\t\t\t\t}\n\t\t\t\t//传参数方式2\n\t\t\t\tpublic function parameter1(){\n\t\t\t\t\t$name = 'lala';\n\t\t\t\t\t//跳转到my_welcome.blade.php视图View中并带一个参数$name = 'lala'.\n\t\t\t\t\treturn view('my_welcome',compact('name')/*等同于['name'->'lala']*/);\n\t\t\t\t}\n\t\t\t\t//传参数方式3\n\t\t\t\tpublic function parameter2(){\n\t\t\t\t\t//跳转到my_welcome.blade.php视图View中并带一个参数$name = 'comtu'.\n\t\t\t\t\treturn view('my_welcome')->with('name','comtu');\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t2.配置路由:\n\t\t\t//http://localhost/my_home\n\t\t\tRoute::get('my_home','MyController@index');\n\t\t\tRoute::get('my_home1','MyController@parameter');\n\t\t\tRoute::get('my_home2','MyController@parameter1');\n\t\t\tRoute::get('my_home3','MyController@parameter2');\n\n\t\t3.创建视图文件 \n\t\t\t目录结构为my_laravel/resources/views/my_welcome.blade.php\n\t\t\t<html>\n\t\t\t\t<head>\n\t\t\t\t\t<title>my_welcome</title>\n\t\t\t\t</head>\n\t\t\t\t<body>\n\t\t\t\t\t<div class=\"title\">my_welcome-->\n\t\t\t\t\t\t<?php if(!empty($name)):?>\n\t\t\t\t\t\t\t<?php echo $name;?>\n\t\t\t\t\t\t<?php endif;?>\n\t\t\t\t\t</div>\n\t\t\t\t\t<?php if(!empty($age)):?>\n\t\t\t\t\t\t<div class=\"title\">age:<?php echo $age;?></div>\n\t\t\t\t\t<?php endif;?>\n\t\t\t\t</body>\n\t\t\t</html>\n\n\tBlade模板\n\n\t\t官方文档: http://laravel.com/docs/5.1/blade\n\t\t中文文档: http://www.golaravel.com/laravel/docs/5.0/templates/\n\t\t\n\t\t模板:\n\n\t\t\t{{ }} \n\t\t\t{!! !!}\n\t\t\t{{{ }}}\n\t\t\t@include\n\t\t\t@if()\n\t\t\t@else\n\t\t\t@endif\n\t\t\t@foreach\n\t\t\t@endforeach\n\t\t\t@for\n\t\t\t@endfor\n\t\t\t@while\n\t\t\t@endwhile\n\t\t\t等\n\t\t\n\t\t案例:\n\n\t\t新创建 my_laravel/resources/views/compontents/myHead.blade.php 文件.(用于演示 @include('components.myHead'))\n\t\t\t<html>\n\t\t\t\t<body>\n\t\t\t\t\t<!--头部文件使用 include 在其它地方引用 -->\n\t\t\t\t\t<h1>高大上的头Head</h1>\n\t\t\t\t\t<hr>\n\n\t\t\t\t</body>\n\t\t\t</html>\n\n\t\t演示代码 my_laravel/resources/views/my_view.blade.php\n\t\t\t<html>\n\t\t\t\t<head>\n\t\t\t\t\t<meta charset=\"utf-8\">\n\t\t\t\t\t<title>MyView</title>\n\t\t\t\t</head>\n\t\t\t\t<body>\n\t\t\t\t\t<!--引用包含其它文件.-->\n\t\t\t\t\t@include('components.myHead')\n\t\t\t\t\tMyView-->\n\n\t\t\t\t\t<!--调用函数 跨站点请求伪造保护码-->\n\t\t\t\t\t{{csrf_token()}} 等同于 <?php echo csrf_token();?>\n\n\t\t\t\t\t<h1>{{ $name or 'Default' }}</h1>\n\n\t\t\t\t\t<h1>{{ $name or '无名英雄1' }}</h1>\n\n\t\t\t\t\t<h1>{{ $name or '无名英雄2'}} - {{$age or 0}}</h1>\n\n\t\t\t\t\t以上等同于\n\t\t\t\t\t<h1><?php echo !empty($name)?$name:'无名英雄3'?></h1>\n\n\n\t\t\t\t\t<!--不解析,原样输出-->\n\t\t\t\t\t@{{$name}}\n\t\t\t\t\t\t\t\n\t\t\t\t\t<!--加载代码-->\n\t\t\t\t\t{!! '<script>var g = \"comtu\";document.write(\"<br />加载代码\"+g+\"<br />\");</script>' !!}\n\t\t\t\t\t{!! '<h1>h1</h1>' !!}\n\n\t\t\t\t\t\t\t<!--代码转义-->\n\t\t\t\t\t{{{'<html lang=\"en\">打印HTML comtu</html>'}}}\n\n\t\t\t\t\t\n\t\t\t\t\t<!--Blade的if判断,如果$name未定义会抛错误-->\n\t\t\t\t\t<h1>\n\t\t\t\t\t@if($name)\n\t\t\t\t\t\t你好{{$name}}\n\t\t\t\t\t@else\n\t\t\t\t\t\t未登录\n\t\t\t\t\t@endif\n\t\t\t\t\t</h1>\n\n\t\t\t\t\t\n\t\t\t\t\t@foreach($people as $person)\n\t\t\t\t\t\t<li>{{$person}}</li>\n\t\t\t\t\t@endforeach\n\n\t\t\t\t\t@for($i = 0 ; $i<3; $i++)\n\t\t\t\t\txx\n\t\t\t\t\t@endfor\n\n\t\t\t\t\t@while(false)\n\t\t\t\t\txxx\n\t\t\t\t\t@endwhile\n\n\t\t\t\t</body>\n\t\t\t</html>\n\t\n\t\t以上在浏览器中输出\n\t\t\t高大上的头Head\n\n\t\t\tMyView--> YNJhQ4GgCCuZ5qyPNhTwvFvWfYLduxUOFvEz0vnZ 等同于 YNJhQ4GgCCuZ5qyPNhTwvFvWfYLduxUOFvEz0vnZ\n\t\t\tDefault\n\n\t\t\t无名英雄1\n\n\t\t\t无名英雄2 - 0\n\n\t\t\t以上等同于\n\t\t\t无名英雄3\n\n\t\t\t{{$name}} \n\t\t\t加载代码comtu\n\t\t\th1\n\n\t\t\t<html lang=\"en\">打印HTML comtu</html>\n\n\t\t\t未登录\n\n\t\t\t张三\n\t\t\t李四\n\t\t\t王五\n\t\t\txx xx xx\n\n# <a id=\"模型(model)\"></a>模型(model)\n\t\n\t模型层\n\t\t一般model在 my_laravel/app/目录下\n\t\t直接或间接继承Model;\n\t\t原代码目录:\n\t\t//my_laravel/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Model.php\n\t\tLaravel的Model比CI的Model内容可多很多.里面包含了查询数据库等等的函数实现.\n\t\t8.Eloguent里面有Demo\n\n\n\t创建模型\n\t\t手动模式创建:\n\t\t\t例如新创建: my_laravel/app/Demo.php内容如下:\t\t\n\n\t\t\t修改Model的文件目录,新创建 my_laravel/app/Model 在Model里面创建Model文件.\n\t\t\t并在 文件头<?php namespace App\\Model;//指定目录即可\t\t\t\n\n\t\t\t<?php namespace App;\n\t\t\t\tuse Illuminate\\Database\\Eloquent\\Model;\n\t\t\t\tclass Demo extends Model {\n\t\t\t\t    use Authenticatable, CanResetPassword;\n\t\t\t\t    /**使用的数据库表模式。*/\n\t\t\t\t    protected $table = 'demo';\n\n\t\t\t\t    /**属性可分配。*/\n\t\t\t\t    //表示那些字段是可以被laravel填写的.\n\t\t\t\t    protected $fillable = ['name', 'email', 'password'];\n\n\t\t\t\t    //表示这些字段是被保护的,存储数据库时不填写此数据\n\t\t\t\t    protected $guarded = ['demo_id'];\n\n\t\t\t\t    /** 排除在模型的JSON形式的属性。*/\n\t\t\t\t    protected $hidden = ['password', 'remember_token'];\n\n\t\t\t\t     //修改默认的 id 主键\n\t\t\t\t    protected $primaryKey = 'demo_id';\n\t\t\t\t\t\n\t\t\t\t    //不使用时间戳_见下面创建模型\n\t\t\t\t    public $timestamps = false;\n\t\t\t\t}\n\t\t\n\t\t命令模型创建:\n\t\t\t使用Terminal定位(cmd)目录文件到 my_laravel 目录下 使用artisan命令\n\t\t\t\tphp artisan make:model Demo\n\t\t\t\t创建在 my_laravel/app/Demo.php 文件如下:\n\n\t\t\t\t<?php namespace App;\n\t\t\t\tuse Illuminate\\Database\\Eloquent\\Model;\n\t\t\t\tclass Demo extends Model {\n\t\t\t\t\t//....\n\t\t\t\t}\n\t\n# <a id=\"环境与部署\"></a>环境与部署\n\n\t.env 环境配置文件.\n\t\t\n\t\t文件目录 my_laravel/.env\n\n\t\t作用到全局的一些参数\n\t\t例如:\n\t\tAPP_ENV=local   全称APP_Envirment 程序环境=local表示环境在本地.server表示运行在服务器.debug需要改成0或false\n\t\tAPP_DEBUG=true  是否在开发模式下.如果true,则是开发模式,出错时会报错,并会尽量多打印信息.0或false表示正式模式.\n\t\tAPP_KEY=asdf    应用的加密key,标记唯一性,例如框架需要加密时,有可能会使用到,当做参数使用.\n\t\t\n\t\tDB_HOST=localhost 数据库地址 这些参数会被 database.php 等配置文件调用.\n\t\tDB_DATABASE=my_laravel 数据库名\n\t\tDB_USERNAME=root  数据库用户名\n\t\tDB_PASSWORD=root  数据库密码\n\n\t\tCACHE_DRIVER=file   缓存使用文件形式\n\t\tSESSION_DRIVER=file Session使用文件形式\n\t\tQUEUE_DRIVER=sync   队列使用同步\n\n\t\tMAIL_DRIVER=smtp      邮件配置\n\t\tMAIL_HOST=mailtrap.io\n\t\tMAIL_PORT=2525\n\t\tMAIL_USERNAME=null\n\t\tMAIL_PASSWORD=null\n\t\t\n\n\t\t先创建数据库 见下面的\"数据库CMD\"\n\t\t//路由中,尝试连接数据库\n\t\tRoute::get('myDatabase',function(){\n\t\t    $name = DB::connection()->getDatabaseName();\n\t\t    echo $name; //打印出 数据库名 my_laravel 表示成功 如果遇见PDOException错误见\"我遇到的错误\"中的解决方法\n\t\t});\n\t\n\t数据库\n\t\tmy_laravel/config/database.php\n\t\t\n\t\t一般不用配置当前文件,配置 my_laravel/.env 文件即可.\n\n\t\t'default' => 'mysql' 默认使用的数据库\n\t\t'connections' => [\n\t\t\t'mysql' => [\n\t\t\t\t'driver'    => 'mysql',\n\t\t\t\t//引用my_laravel/.env 环境配置文件的配置,如果没有找到则使用默认的'localhost'.\n\t\t\t\t'host'      => env('DB_HOST', 'localhost'), \n\t\t\t\t'database'  => env('DB_DATABASE', 'forge'),\n\t\t\t\t'username'  => env('DB_USERNAME', 'forge'),\n\t\t\t\t'password'  => env('DB_PASSWORD', ''),\n\t\t\t\t'charset'   => 'utf8',\n\t\t\t\t'collation' => 'utf8_unicode_ci',\n\t\t\t\t'prefix'    => '', //前缀\n\t\t\t\t'strict'    => false,\n\t\t\t],\n\t\t]\n\n\tSession\n\n\t\t配置文件 my_laravel/config/session.php 一般此文件不需要配置\n\n\t\t\t//可支持配置 \"file\", \"cookie\", \"database\", \"apc\",\"memcached\", \"redis\", \"array\"\n\t\t\t'driver' => env('SESSION_DRIVER', 'file'),\n\t\t\n\tdown/up\n\t\t一整个程序停止解析(使用场景如,网站遇到攻击,网站需要维护等)\n\t\t配置后访问网站的所有地址都会被跳转到 my_laravel/resources/views/errors/503.blade.php 网站全部连接转向此文件.\n\n\t\t\t//停止服务,\n\t\t\tphp artisan down \n\t\t\t\n\t\t\t//恢复服务\n\t\t\tpup artisan up \n\t\n\t自定义配置属性\n\t\t1.在.env中增加属性\n\t\t\tMY_DIY_CONFIG='test_env'\n\t\t2.在config/app.php内容里增加属性(参数1为.env文件下的配置名,如果未配置.则使用参数2默认值)\n\t\t\t'my_diy_config' =>env('MY_DIY_CONFIG','test_app'),\n\t\t3.使用 例如在Controllers中使用:\n\t\t\tuse Illuminate\\Support\\Facades\\Config;//引入包\n\t\t\t//code...\n\t\t\t$diyConfig = Config::get('app.my_diy_config');//使用\n\t\t\t//code...\n\t\n\t自动加载类\n\t\t使用场景:当某一个方法函数经常会被多个不同的类调用时.可做成自动加载的类,减少代码编写量\n\t\t1.创建文件 例如:在app/Libraries/function/functions.php (自定义)里面有如下代码:\n\t\t\t<?php \n\t\t\tfuncion abc(){\n\t\t\t\treturn 'abc';\n\t\t\t}\n\t\t2.在工程 /bootstrap/autoload.php 中增加如下代码(对应自定义的文件目录):\n\t\t\trequire __DIR__.'/../app/Libraries/function/functions.php';\n\t\t3.使用 例如在Controllers中使用\n\t\t\t直接使用方法名调用: $data = abc();\n\t\t\n\t\t\n# <a id=\"数据库\"></a>数据库\n\n\t与数据库交互的机制.\n\t\thttp://www.golaravel.com/laravel/docs/5.0/eloquent/\n\t\n\t目录my_laravel/vendor/laravel/framework/src/Illuminate/Database/Eloquent/包含多文件,Model属于此包\n\t\n\t\n\tEloguent 使用(增删改查):\n\t\t配置数据库信息\n\t\t\tmy_laravel/.env\n\t\t\t\tDB_HOST=localhost\n\t\t\t\tDB_DATABASE=my_laravel\n\t\t\t\tDB_USERNAME=root\n\t\t\t\tDB_PASSWORD=root\n\n\t\t配置路由: \n\t\t\t//http://localhost:8888/myDatabase 查看连接数据库是否成功\n\t\t\tRoute::get('myDatabase',function(){\n\t\t\t    $name = DB::connection()->getDatabaseName();\n\t\t\t    echo $name;\n\t\t\t});\n\n\t\t\t//http://localhost:8888/myDatabase/add 增\n\t\t\tRoute::get('myDatabase/add',function(){\n\t\t\t    $user = new App\\User();\n\t\t\t    $user->userAdd();\n\t\t\t    return $user->userRead();\n\t\t\t});\n\n\t\t\t//http://localhost:8888/myDatabase/delete 删\n\t\t\tRoute::get('myDatabase/delete',function(){\n\t\t\t    $user = new App\\User();\n\t\t\t    $user->userDelete();\n\t\t\t    return $user->userRead();\n\t\t\t});\n\n\t\t\t//http://localhost:8888/myDatabase/update 改\n\t\t\tRoute::get('myDatabase/update',function(){\n\t\t\t    $user = new App\\User();\n\t\t\t    $user->userDelete();\n\t\t\t    return $user->userRead();\n\t\t\t});\n\n\t\t\t//http://localhost:8888/myDatabase/read 查\n\t\t\tRoute::get('myDatabase/read',function(){\n\t\t\t    $user = new App\\User();\n\t\t\t    return $user->userRead();\n\t\t\t});\n\n\t\t\t//http://localhost:8888/myDatabase/read_dd 查\n\t\t\tRoute::get('myDatabase/read_dd',function(){\n\t\t\t    $user = new App\\User();\n\t\t\t    $users = $user->all();\n\t\t\t    dd($users); // dd=> var_dump() ; and die(); 打印出数据类型与信息.\n\t\t\t    // $users->toArray();//转成数组\n\t\t\t    // $users->all();//返回数据库原型 , 默认调用了tojson();\n\t\t\t    // return $user->userRead();\n\n\t\t\t    //数组\n\t\t\t    $arr = ['one','two','three'];\n\t\t\t    $collection = collect($arr);\n\t\t\t    //查找数组是否包含对应的值\n\t\t\t    $bool = $collection->contains('one');\n\t\t\t    //取数组的前2个数据\n\t\t\t    $res = $collection->take(2);\n\t\t\t    //取后面两个数据\n\t\t\t    $res = $collection->take(-2);\n\n\t\t\t    //键值对\n\t\t\t    $arr = ['one'=>1,'two'=>2,'three'=>3];\n\t\t\t    $collection = collect($arr);\n\t\t\t    //查找是否有对应的键key\n\t\t\t    $bool = $collection->has('one');\n\n\t\t\t    return $collection->all();\n\t\t\t});\n\n\t\t创建模型:\n\n\t\t\t<?php namespace App;\n\n\t\t\tuse Illuminate\\Auth\\Authenticatable;\n\t\t\tuse Illuminate\\Database\\Eloquent\\Model;\n\t\t\tuse Illuminate\\Auth\\Passwords\\CanResetPassword;\n\t\t\tuse Illuminate\\Contracts\\Auth\\Authenticatable as AuthenticatableContract;\n\t\t\tuse Illuminate\\Contracts\\Auth\\CanResetPassword as CanResetPasswordContract;\n\n\t\t\t//Laravel的Model已经实现了一些对数据库的操作,如增删改查.\n\t\t\tclass User extends Model implements AuthenticatableContract, CanResetPasswordContract {\n\t\t\t\tuse Authenticatable, CanResetPassword;\n\t\t\t\t\n\t\t\t\t//数据库名 重写Model的数据库名\n\t\t\t\tprotected $table = 'users';\n\n\t\t\t\t//表示那些数据库字段是可以被laravel填写.\n\t\t\t\tprotected $fillable = ['username', 'age'];\n\n\t\t\t\t//表示这些字段是被保护的,存储数据库时不填写此数据(主键自动增长)\n\t\t\t\tprotected $guarded = ['demo_id'];\n\t\t\t\t\n\t\t\t\t// 排除在模型的JSON形式的属性。如调用$this->all()生成的Json不生成在Json中的字段名\n\t\t\t\tprotected $hidden = [];\n\n\t\t\t\t//修改默认的 id 主键名称\n\t\t\t\tprotected $primaryKey = 'user_id';\n\n\t\t\t\t////model自带的方法 public static function all($columns = array('*')) 函数\n\t\t\t\t//详情见 my_laravel/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Model.php\n\t\t\t\t//查询数据《-----------------------\n\t\t\t\tpublic function userRead(){\n\t\t\t\t\t//查询出所有数据\n\t\t\t\t\t//return $this->all();\n\n\t\t\t\t\t//查找user_id为1的数据 如果没有打到数据,返回的空数据\n\t\t\t\t\t//return $this->find(1);\n\t\t\t\t\t//如没有找到数据直接抛异常.查id为4的数据\n\t\t\t\t\t//return $this->findOrFail(4);\n\n\t\t\t\t\t//返回对应条件的数据 select * from users where username='comtu';\n\t\t\t\t\t//return $this->where('username','comtu')->get();\n\n\t\t\t\t\t//返回对应条件的数据 select * from users where user_id>1; \n\t\t\t\t\t// return $this->where('user_id','>',1)->get();\n\n\t\t\t\t\t//查询出所有数据 等同于 $this->all();\n\t\t\t\t\treturn $this->get();\n\t\t\t\t}\n\n\t\t\t\t//insert数据时model基类默认数据库中有时间戳字段,更新时间,创建时间\n\t\t\t\t//处理方式有两种,一种是为数据库中增加这两个字段`updated_at`, `created_at`\n\t\t\t\t//另一种是取消Model中的数据库时间戳字段如下:\n\t\t\t\tpublic $timestamps = false;\n\n\t\t\t\t//增加数据《-----------------------\n\t\t\t\tpublic function userAdd(){\n\n\t\t\t\t\t//增加数据方式1 \n\t\t\t\t\t//$this->username = 'user00000';\n\t\t\t\t\t//$this->age = 1;\n\t\t\t\t\t//$this->save();\n\t\t\t\t\t//增加数据后如果表是自动增长的可获取到增加后的id\n\t\t\t\t\t$id = $this->user_id;//新增加后的id值\n\n\t\t\t\t\t//增加数据方式2  批量赋值 \n\t\t\t\t\t//protected $fillable = ['username', 'age']; //需要有配置自动填充的字段\n\t\t\t\t\t$user_data = ['username'=>'user111','age'=>256];\n\t\t\t\t\t$this->fill($user_data);\n\t\t\t\t\t$this->save();\n\t\t\t\t}\n\n\t\t\t\t//更新数据《-----------------------\n\t\t\t\tpublic function userUpdate(){\n\t\t\t\t\t//修改对应的数据 方式一\n\t\t\t\t\t//$user = $this->find(1);//查询-》保存\n\t\t\t\t\t//$user->username = 'comtu0000';\n\t\t\t\t\t//$user->age = '512';\n\t\t\t\t\t//$user->save();\n\n\t\t\t\t\t//修改对应的数据 方式二\n\t\t\t\t\t$users = $this->where('user_id','<','3'); //查询-》更新\n\t\t\t\t\t//更新不需要调用save()\n\t\t\t\t\t$users->update(['username'=>'comtu1111','age'=>1024]);\n\t\t\t\t}\n\n\t\t\t\t//删除数据《-----------------------\n\t\t\t\tpublic function userDelete(){\n\t\t\t\t\t$user = $this->find(3);//查询-》删除\n\t\t\t\t\t$user->dalete();\n\t\t\t\t}\n\t\t\t}\n\t\n\t\tDemo:\n\t\t\t模型:\n\t\t\t\t<?php namespace App\\Model;\n\t\t\t\tuse Illuminate\\Database\\Eloquent\\Model;\n\n\t\t\t\tclass Person extends Model  {\n\n\t\t\t\t     //数据库表\n\t\t\t\t    protected $table = 'person';\n\t\t\t\t    //修改默认的 id 主键\n\t\t\t\t    protected $primaryKey = 'pid';\n\n\t\t\t\t    //表示那些字段是可以被laravel填写的.fill()\n\t\t\t\t    protected $fillable = ['name', 'sex','age','salary','occ_id','dep_id'];\n\n\t\t\t\t    //表示这些字段是被保护的,存储数据库时不填写此数据\n\t\t\t\t    protected $guarded = ['pid'];\n\n\t\t\t\t    //生成JSON时隐藏的字段\n\t\t\t\t    protected $hidden = [];\n\n\t\t\t\t    //insert数据时model基类默认数据库中有时间戳字段,更新时间,创建时间\n\t\t\t\t    //处理方式有两种,一种是为数据库中增加这两个字段`updated_at`, `created_at`\n\t\t\t\t    //另一种是取消Model中的数据库时间戳字段如下:\n\t\t\t\t    public $timestamps = false;\n\n\t\t\t\t    //表结构对应关系 occupation另外一张表app/model/occupation.php\n\t\t\t\t    public function occupation(){\n\t\t\t\t\treturn $this->hasOne('App\\Model\\occupation', 'occ_id', 'occ_id');\n\t\t\t\t    }\n\n\t\t\t\t    //表结构对应关系\n\t\t\t\t    public function department(){\n\t\t\t\t\treturn $this->hasOne('App\\Model\\department', 'dep_id', 'dep_id');\n\t\t\t\t    }\n\t\t\t\t}\n\n\t\t\t控制器:\n\t\t\t\tapp/Http/Controllers/DemoDataBaseController.php\n\t\t\t\t\t<?php namespace App\\Http\\Controllers;\n\t\t\t\t\tuse App\\Http\\Requests;\n\t\t\t\t\tuse App\\Http\\Controllers\\Controller;\n\n\t\t\t\t\tuse App\\Model\\Occupation;\n\t\t\t\t\tuse App\\Model\\Department;\n\t\t\t\t\tuse App\\Model\\Person;\n\t\t\t\t\tuse Illuminate\\Support\\Facades\\Input;\n\t\t\t\t\tuse Illuminate\\Support\\Facades\\Request;\n\t\t\t\t\tuse Illuminate\\Support\\Facades\\Session;\n\n\n\t\t\t\t\tclass DemoDataBaseController extends Controller{\n\n\t\t\t\t\t    public function index() {\n\t\t\t\t\t\t//$data['person'] = Person::find(array('1'));//简单条件查询 select * from person where id = 1;\n\t\t\t\t\t\t//$data['person'] = Person::whereRaw('pid > 1 and salary > 1700')->get();//条件查询全部\n\n\t\t\t\t\t\t//连表查询~~需要在Person里面配置表的关系\n\t\t\t\t\t\t$data['person'] = Person::with('occupation', 'department')->paginate(10);//连表查询并 paginate分页功能,每页10条.\n\t\t\t\t\t\t//$data['person'] = Person::with('occupation','department')->get();//连表查询 //只能使用get,all获取不到数据\n\t\t\t\t\t\t//<?php foreach ($person as $v):?>//视图中获取连表的数据\n\t\t\t\t\t\t//<?php echo $v['occupation']->name;?> \n\t\t\t\t\t\t//<?php endforeach;?>\n\t\t\t\t\t\t$data['count']  =  Person::all()->count();\n\t\t\t\t\t\t$data['occupation'] = Occupation::get();//查询全部\n\t\t\t\t\t\t$data['department'] = Department::all();//查询全部\n\n\t\t\t\t\t\treturn view('demo.demo_index_database',$data);\n\t\t\t\t\t    }\n\n\t\t\t\t\t    public function addPerson(){\n\t\t\t\t\t\t$data['occupation'] = Occupation::get();//查询全部\n\t\t\t\t\t\t$data['department'] = Department::all();//查询全部\n\t\t\t\t\t\treturn view('demo.demo_add_update_database',$data);\n\t\t\t\t\t    }\n\n\t\t\t\t\t    public function postAddPerson(){\n\t\t\t\t\t\t$person = new Person();\n\t\t\t\t\t\t//增加数据方式2\n\t\t\t\t\t\t$person->name = Request::input('name', 'default');//获取Post请求的数据\n\t\t\t\t\t\t$person->age = Request::input('age', 20);\n\t\t\t\t\t\t$person->sex = Request::input('sex', 0);\n\t\t\t\t\t\t$person->salary = Request::input('salary', 1800);\n\t\t\t\t\t\t$person->occ_id = Request::input('occ_id');\n\t\t\t\t\t\t$person->dep_id = Request::input('dep_id');\n\t\t\t\t\t\t$person->save();\n\t\t\t\t\t\t//$person->pid; 可获取到增加后的自动增长id.\n\t\t\t\t\t\treturn redirect('myDatabase/Demo');\n\t\t\t\t\t    }\n\n\t\t\t\t\t    public function deletePerson($rid,$_token = ''){\n\t\t\t\t\t\tif(Session::token() !== $_token) {\n\t\t\t\t\t\t    echo '非法请求';\n\t\t\t\t\t\t    return;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$person = Person::find($rid);\n\t\t\t\t\t\t$person->delete();\n\t\t\t\t\t\treturn redirect('myDatabase/Demo');\n\t\t\t\t\t    }\n\n\t\t\t\t\t    //http://localhost/myDatabase/DemoUpdatePerson?pid=6&_token=7jcZiP2wv0nIpxrA4KUqn9sBRaU7YXpcc8M0zrue\n\t\t\t\t\t    public function updatePerson(){\n\t\t\t\t\t\t$_token = Input::get('_token');//获取get请求的数据\n\t\t\t\t\t\tif(Session::token()!=$_token){\n\t\t\t\t\t\t    echo '非法请求';\n\t\t\t\t\t\t    return ;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$pid = Input::get('pid');\n\n\t\t\t\t\t\t$data['person'] = Person::find($pid);\n\t\t\t\t\t\t$data['occupation'] = Occupation::all();//查询全部\n\t\t\t\t\t\t$data['department'] = Department::get();//查询全部\n\t\t\t\t\t\treturn view('demo.demo_add_update_database',$data);\n\t\t\t\t\t    }\n\n\t\t\t\t\t    public function postUpdatePerson(){\n\t\t\t\t\t\t$person = Person::find(Request::input('pid'));\n\t\t\t\t\t\tif(!$person){\n\t\t\t\t\t\t    echo '修改错误';\n\t\t\t\t\t\t    return;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//修改数据方式\n\t\t\t\t\t\t$person->name = Request::input('name');\n\t\t\t\t\t\t$person->age = Request::input('age');\n\t\t\t\t\t\t$person->sex = Request::input('sex');\n\t\t\t\t\t\t$person->salary = Request::input('salary');\n\t\t\t\t\t\t$person->occ_id = Request::input('occ_id');\n\t\t\t\t\t\t$person->dep_id = Request::input('dep_id');\n\t\t\t\t\t\t$person->save();\n\t\t\t\t\t\treturn redirect('myDatabase/Demo');\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\t\t\t\n\t\t\t路由:\n\t\t\t\tapp/Http/routes.php\n\n\t\t\t\t\t//显示列表 http://localhost/myDatabase/Demo\n\t\t\t\t\tRoute::get('myDatabase/Demo','DemoDataBaseController@index');\n\t\t\t\t\t//增加数据\n\t\t\t\t\tRoute::get('myDatabase/DemoAddPerson','DemoDataBaseController@addPerson');\n\t\t\t\t\tRoute::post('myDatabase/DemoAddPerson','DemoDataBaseController@postAddPerson');\n\t\t\t\t\t//删除数据 使用函数参数方式并参数使用正则匹配.\n\t\t\t\t\tRoute::get('myDatabase/DemoDeletePerson/{pid}/{_token}','DemoDataBaseController@deletePerson')->where(['pid' => '[0-9]+']);\n\t\t\t\t\t//更新数据 此处使用获取get请求的方式获取数据\n\t\t\t\t\tRoute::get('myDatabase/DemoUpdatePerson','DemoDataBaseController@updatePerson');\n\t\t\t\t\tRoute::post('myDatabase/DemoUpdatePerson','DemoDataBaseController@postUpdatePerson');\n\n\t\t\t\t\t//scrf验证\n\t\t\t\t\tRoute::filter('csrf',function(){\n\t\t\t\t\t    if (Session::token() !== Input::get('_token')) {\n\t\t\t\t\t\tthrow new Illuminate\\Session\\TokenMismatchException;\n\t\t\t\t\t    }\n\t\t\t\t\t});\n\n\t\t\t视图:\n\t\t\t\tresources/views/demo/demo_index_database.blade.php 显示列表\n\t\t\t\t\t<html>\n\t\t\t\t\t<head>\n\t\t\t\t\t    <meta charset=\"utf-8\">\n\t\t\t\t\t    <title>MyView</title>\n\t\t\t\t\t    <link rel=\"stylesheet\" href=\"/css/style.css\">\n\t\t\t\t\t</head>\n\t\t\t\t\t<body>\n\t\t\t\t\t@include('components.myHead')\n\n\t\t\t\t\t<h1>resources/views/demo_database.blade.php</h1>\n\n\t\t\t\t\t调用函数@{{csrf_token}} 跨站点请求伪造保护码\n\t\t\t\t\t{{csrf_token()}} 等同于 <?php echo csrf_token();?>\n\n\t\t\t\t\t<table   border=\"1px\" cellpadding=\"2px\"  cellspacing=\"1px\" bgcolor=\"#FFFFF0\">\n\t\t\t\t\t    <tr align=\"center\">\n\t\t\t\t\t\t<td>pid(count:{{$count}})</td>\n\t\t\t\t\t\t<td>name</td>\n\t\t\t\t\t\t<td>age</td>\n\t\t\t\t\t\t<td>sex</td>\n\t\t\t\t\t\t<td>salary</td>\n\t\t\t\t\t\t<td>occ_id</td>\n\t\t\t\t\t\t<td>dep_id</td>\n\t\t\t\t\t\t<td>操作</td>\n\t\t\t\t\t    </tr>\n\t\t\t\t\t    @foreach($person as $p)\n\t\t\t\t\t    <tr align=\"center\">\n\t\t\t\t\t\t<td>{{$p->pid}}</td>\n\t\t\t\t\t\t<td>{{$p->name}}</td>\n\t\t\t\t\t\t<td><?php echo $p->age?></td>\n\t\t\t\t\t\t<td>{{$p->sex==0?'男':'女'}}</td>\n\t\t\t\t\t\t<td>{{$p->salary}}</td>\n\t\t\t\t\t\t<td>{{$p->occupation->name}}</td><!--连表查询,预载入的关联对象-->\n\t\t\t\t\t\t<td>{{$p->department->name}}</td>\n\t\t\t\t\t\t<td><a href=\"{{url('myDatabase/DemoUpdatePerson?pid='.$p->pid.'&_token='.csrf_token())}}\">修改</a> &nbsp <a href=\"{{url('myDatabase/DemoDeletePerson').'/'.$p->pid .'/'.csrf_token()}}\">删除</a></td>\n\t\t\t\t\t    </tr>\n\t\t\t\t\t    @endforeach\n\n\t\t\t\t\t    @if($person->render())\n\t\t\t\t\t    <tr ><td colspan=\"9\" align=\"center\" width=\"100%\"><?php echo $person->render(); ?><!--分页--></td></tr>\n\t\t\t\t\t    @endif\n\t\t\t\t\t</table>\n\n\t\t\t\t\t<div style=\"clear: both\"></div>\n\n\t\t\t\t\t<a href=\"{{url('myDatabase/DemoAddPerson')}}\">增加</a>\n\n\t\t\t\t\t<hr>\n\n\t\t\t\t\t</body>\n\t\t\t\t\t</html>\n\t\t\t\t\n\t\t\t\tresources/views/demo/demo_add_update_database.blade.php 增加/修改页\n\t\t\t\t\t<html>\n\t\t\t\t\t<head>\n\t\t\t\t\t    <meta charset=\"utf-8\">\n\t\t\t\t\t    <title>{{empty($person)?'增加':'更新'}}数据</title>\n\t\t\t\t\t    <link rel=\"stylesheet\" href=\"/css/style.css\">\n\t\t\t\t\t</head>\n\t\t\t\t\t<body>\n\n\t\t\t\t\t<form action=\"{{empty($person)?url('myDatabase/DemoAddPerson'):url('myDatabase/DemoUpdatePerson')}}\" method=\"post\" >\n\t\t\t\t\t    <input type=\"hidden\" name=\"_token\" value=\"{{csrf_token()}}\">\n\t\t\t\t\t    <?php echo empty($person)?'':'<input type=\"hidden\" name=\"pid\" value=\"'.$person->pid.'\">' ;?>\n\t\t\t\t\t    <table border=\"1px\" cellpadding=\"2px\"  cellspacing=\"1px\" bgcolor=\"#FFFFF0\">\n\t\t\t\t\t\t<tr><td>名称</td><td><input type=\"text\" name=\"name\" value=\"{{empty($person)?'':$person->name}}\"/></td></tr>\n\t\t\t\t\t\t<tr><td>年龄</td><td>\n\t\t\t\t\t\t\t<select name=\"age\" >\n\t\t\t\t\t\t\t    @for ($i = 1; $i <= 110; $i++)\n\t\t\t\t\t\t\t\t<option value=\"{{ $i }}\" <?php echo $i==(empty($person)?24:$person->age) ?'selected=\"selected\"':''?>>{{ $i }}</option>\n\t\t\t\t\t\t\t    @endfor\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t    </td></tr>\n\t\t\t\t\t\t<tr><td>性别</td><td>\n\t\t\t\t\t\t\t<select name=\"sex\">\n\t\t\t\t\t\t\t    <option value=\"0\" <?php echo empty($person)?'selected=\"selected\"':$person->sex==0?'selected=\"selected\"':''?>>男</option>\n\t\t\t\t\t\t\t    <option value=\"1\" <?php echo empty($person)?'':$person->sex==1?'selected=\"selected\"':''?>>女</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t    </td></tr>\n\t\t\t\t\t\t<tr><td>薪资</td><td><input type=\"text\" name=\"salary\" value=\"{{empty($person)?'':$person->salary}}\" /></td></tr>\n\t\t\t\t\t\t<tr><td>职业</td><td>\n\t\t\t\t\t\t\t<select name=\"occ_id\">\n\t\t\t\t\t\t\t    @for($i = 0 ; $i< count($occupation);$i++)\n\t\t\t\t\t\t\t\t<option value=\"{{$occupation[$i]->occ_id}}\" <?php echo empty($person)?'':$occupation[$i]->occ_id==($person->occ_id)?'selected=\"selected\"':''?>>{{$occupation[$i]->name}}</option>\n\t\t\t\t\t\t\t    @endfor\n\t\t\t\t\t\t\t\t{{--@foreach($occupation as $occ)--}}\n\t\t\t\t\t\t\t\t{{--<option   value=\"{{$occ->occ_id}}\" >{{$occ->name}}</option>--}}\n\t\t\t\t\t\t\t\t{{--@endforeach--}}\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t    </td></tr>\n\t\t\t\t\t\t<tr><td>部门</td><td>\n\t\t\t\t\t\t\t<select name=\"dep_id\" >\n\t\t\t\t\t\t\t    @for($i = 0 ; $i< count($department);$i++)\n\t\t\t\t\t\t\t\t<option value=\"{{$department[$i]->dep_id}}\" <?php echo empty($person)?'':$department[$i]->dep_id==($person->dep_id)?'selected=\"selected\"':''?>>{{$department[$i]->name}}</option>\n\t\t\t\t\t\t\t    @endfor\n\t\t\t\t\t\t\t    {{--@foreach($department as $dep)--}}\n\t\t\t\t\t\t\t\t{{--<option value=\"{{$dep->dep_id}}\" >{{$dep->name}}</option>--}}\n\t\t\t\t\t\t\t    {{--@endforeach--}}\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t    </td></tr>\n\t\t\t\t\t\t<tr><td colspan=\"2\" align=\"center\"><input type=\"submit\" value=\"{{empty($person)?'增加':'更新'}}\">&nbsp<input type=\"reset\" value=\"重置\"></td></tr>\n\t\t\t\t\t    </table>\n\t\t\t\t\t</form>\n\n\t\t\t\t\t</body>\n\t\t\t\t\t</html>\n\n# <a id=\"请求\"></a>请求\n\n\tDemo:\n\t\t控制器:\n\t\t\tapp/Http/Controlers/DemoMyRequestController.php \n\t\t\t\t<?php namespace App\\Http\\Controllers;\n\n\t\t\t\tuse App\\Http\\Requests;\n\t\t\t\tuse App\\Http\\Controllers\\Controller;\n\n\t\t\t\tuse Illuminate\\Support\\Facades\\Input;\n\t\t\t\tuse Illuminate\\Support\\Facades\\Request;\n\t\t\t\tuse Illuminate\\Support\\Facades\\Session;\n\n\t\t\t\tclass DemoMyRequestController extends Controller{\n\n\t\t\t\t    //请求\n\t\t\t\t    public function myrequest(){\n\t\t\t\t\t//获取表单发送过来的所有数据,不管是get,post还是其它请求的数据.\n\t\t\t\t\t$input = Request::all();//返回json数据\n\t\t\t\t\tvar_dump($input);\n\t\t\t\t\techo '<br>';\n\n\t\t\t\t\t$value = Request::query();//获取get请求?后面的所有参数\n\t\t\t\t\tvar_dump($value);\n\t\t\t\t\techo '<br>';\n\t\t\t\t\t$value = Request::query('name');//获取get请求后面的指定参数\n\t\t\t\t\tvar_dump($value);\n\t\t\t\t\techo '<br>';\n\n\t\t\t\t\t//get请求方式,如果没有name键则取默认值comtu\n\t\t\t\t\t$value = Request::get('name','comtu');\n\t\t\t\t\tvar_dump($value);\n\t\t\t\t\techo '<br>';\n\n\t\t\t\t\t//-----判断-------\n\t\t\t\t\t//判断参数是否存在返回布尔值\n\t\t\t\t\t$bool = Request::has('name');\n\t\t\t\t\tvar_dump($bool);\n\t\t\t\t\techo '<br>';\n\n\t\t\t\t\t//http://localhost/myrequest?name=&age=11\n\t\t\t\t\t//检查是否存在键,有则返回true,不检查键对应的值是否存在.\n\t\t\t\t\t$bool = Request::exists('name');\n\t\t\t\t\tvar_dump($bool);\n\t\t\t\t\techo '<br>';\n\n\t\t\t\t\t//-------请求检索-------\n\t\t\t\t\t//过滤值,只取对应的键值\n\t\t\t\t\t$value = Request::only('name');\n\t\t\t\t\tvar_dump($value);\n\t\t\t\t\techo '<br>';\n\t\t\t\t\t$value = Request::only('name','age');//如果有多个参数,则只取这两个值\n\t\t\t\t\tvar_dump($value);\n\t\t\t\t\techo '<br>';\n\n\t\t\t\t\t//过滤值,除了对应的键不取,其它数据获取,用法与only类似\n\t\t\t\t\t$value = Request::except('name');\n\t\t\t\t\tvar_dump($value);\n\t\t\t\t\techo '<br>';\n\n\t\t\t\t\t//-----------url---------\n\t\t\t\t\t//返回请求的url前缀_不包括参数\n\t\t\t\t\t$url = Request::url();\n\t\t\t\t\tvar_dump($url);\n\t\t\t\t\techo '<br>';\n\n\t\t\t\t\t//返回请求的全部url_包含参数\n\t\t\t\t\t$url = Request::fullUrl();\n\t\t\t\t\tvar_dump($url);\n\t\t\t\t\techo '<br>';\n\n\t\t\t\t\t//----------请求历史----------\n\t\t\t\t\t//将请求的所有数据存储到session数据中.\n\t\t\t\t\tRequest::flash();\n\t\t\t\t\t//Request::flashOnly('name');//只存储指定的键值\n\t\t\t\t\t//Request::flashExcept('name');//除了指定的键值,其它都存储\n\n\t\t\t\t\t//返回上一次请求的数据,可在不同页面中获取,前提是需要调用了Request::flash()\n\t\t\t\t\t$value = Request::old();//可用于保存用户提交失败时恢复历史数据的功能\n\t\t\t\t\tvar_dump($value);\n\n\t\t\t\t\t/*\n\t\t\t\t\t请求: http://localhost/myrequest?name=comtu&age=11\n\n\t\t\t\t\tarray(2) { [\"name\"]=> string(5) \"comtu\" [\"age\"]=> string(2) \"11\" }\n\t\t\t\t\tarray(2) { [\"name\"]=> string(5) \"comtu\" [\"age\"]=> string(2) \"11\" }\n\t\t\t\t\tstring(5) \"comtu\"\n\t\t\t\t\tstring(5) \"comtu\"\n\t\t\t\t\tbool(true)\n\t\t\t\t\tbool(true)\n\t\t\t\t\tarray(1) { [\"name\"]=> string(5) \"comtu\" }\n\t\t\t\t\tarray(2) { [\"name\"]=> string(5) \"comtu\" [\"age\"]=> string(2) \"11\" }\n\t\t\t\t\tarray(1) { [\"age\"]=> string(2) \"11\" }\n\t\t\t\t\tstring(26) \"http://localhost/myrequest\"\n\t\t\t\t\tstring(44) \"http://localhost/myrequest?age=11&name=comtu\"\n\t\t\t\t\tarray(2) { [\"name\"]=> string(5) \"comtu\" [\"age\"]=> string(2) \"11\" }\n\t\t\t\t\t*/\n\n\t\t\t\t\t/*\n\t\t\t\t\t  请求http://localhost/myrequest?nae=comtu&age=11\n\t\t\t\t\tarray(2) { [\"nae\"]=> string(5) \"comtu\" [\"age\"]=> string(2) \"11\" }\n\t\t\t\t\tarray(2) { [\"nae\"]=> string(5) \"comtu\" [\"age\"]=> string(2) \"11\" }\n\t\t\t\t\tNULL\n\t\t\t\t\tstring(5) \"comtu\"\n\t\t\t\t\tbool(false)\n\t\t\t\t\tbool(false)\n\t\t\t\t\tarray(1) { [\"name\"]=> NULL }\n\t\t\t\t\tarray(2) { [\"name\"]=> NULL [\"age\"]=> string(2) \"11\" }\n\t\t\t\t\tarray(2) { [\"nae\"]=> string(5) \"comtu\" [\"age\"]=> string(2) \"11\" }\n\t\t\t\t\tstring(26) \"http://localhost/myrequest\"\n\t\t\t\t\tstring(43) \"http://localhost/myrequest?age=11&nae=comtu\"\n\t\t\t\t\tarray(2) { [\"name\"]=> string(5) \"comtu\" [\"age\"]=> string(2) \"11\" }\n\t\t\t\t\t*/\n\t\t\t\t    }\n\n\t\t\t\t    //显示上传页面\n\t\t\t\t    public function uploadFile(){\n\t\t\t\t\treturn view('demo.demo_index_MyRequest');\n\t\t\t\t    }\n\n\t\t\t\t    //提交上传数据\n\t\t\t\t    public function postUploadFile(){\n\t\t\t\t\t//返回post上来的数据 返回数组\n\t\t\t\t\tvar_dump(Request::file());\n\t\t\t\t\techo '<br>'; echo '<br>';\n\n\t\t\t\t\t//返回对象\n\t\t\t\t\tvar_dump(Request::file('my_file'));\n\t\t\t\t\techo '<br>'; echo '<br>';\n\n\t\t\t\t\t//返回布尔值,是否包含文件\n\t\t\t\t\t$bool = Request::hasFile('my_file');\n\t\t\t\t\tvar_dump($bool);\n\t\t\t\t\techo '<br>'; echo '<br>';\n\n\t\t\t\t\t//返回文件大小\n\t\t\t\t\t$size = Request::file('my_file')->getClientSize();\n\t\t\t\t\tvar_dump($size);\n\t\t\t\t\techo '<br>'; echo '<br>';\n\n\t\t\t\t\t//返回上传时的文件名\n\t\t\t\t\t$name = Request::file('my_file')->getClientOriginalName();\n\t\t\t\t\tvar_dump($name);\n\t\t\t\t\techo '<br>'; echo '<br>';\n\n\t\t\t\t\t//返回文件格式\n\t\t\t\t\t$extension = Request::file('my_file')->getClientOriginalExtension();\n\t\t\t\t\tvar_dump($extension);\n\t\t\t\t\techo '<br>'; echo '<br>';\n\n\t\t\t\t\t//判断上传的文件是否有效\n\t\t\t\t\tif (Request::file('my_file')->isValid()){\n\t\t\t\t\t    //移动上传的文件到指定目录 人在public目录下自动创建uploads目录并把文件存储到当前目录中.\n\t\t\t\t\t    $destinationPath = 'uploads/';\n\t\t\t\t\t    Request::file('my_file')->move($destinationPath, uniqid().'.'.$extension); //md5 uniqid 唯一标识\n\t\t\t\t\t}\n\t\t\t\t    }\n\n\n\t\t\t\t}\n\t\t\n\t\t路由:\n\t\t\tapp/Http/routes.php\t\n\n\t\t\t\t//http://localhost/myrequest\n\t\t\t\t//http://localhost/myrequest?name=&age=11\n\t\t\t\t//http://localhost/myrequest?name=comtu&age=11\n\t\t\t\t//http://localhost/myrequest?na2me=comtu&age=11\n\t\t\t\tRoute::any('myrequest','DemoMyRequestController@myrequest');\n\n\t\t\t\t//文件上传\n\t\t\t\tRoute::any('uploadFile','DemoMyRequestController@uploadFile');\n\t\t\t\tRoute::post('uploadFile','DemoMyRequestController@postUploadFile');\n\n\t\t视图:\n\t\t\tresources/views/demo/demo_index_MyRequest.blade.php\n\t\t\t\t<html>\n\t\t\t\t<head>\n\t\t\t\t    <meta charset=\"utf-8\">\n\t\t\t\t    <title>MyView</title>\n\t\t\t\t    <link rel=\"stylesheet\" href=\"/css/style.css\">\n\t\t\t\t</head>\n\t\t\t\t<body>\n\t\t\t\t{{--<form action=\"uploadFile\" method=\"post\" enctype=\"application/x-www-form-urlencoded\">--}}\n\t\t\t\t    <form action=\"uploadFile\" method=\"post\" enctype=\"multipart/form-data\">\n\t\t\t\t    <input type=\"hidden\" name=\"_token\" value=\"{{csrf_token()}}\">\n\t\t\t\t    <fieldset style=\"width:230px\" >\n\t\t\t\t\t<legend>上传文件</legend>\n\t\t\t\t\t选择文件:<input type=\"file\" name=\"my_file\" multiple />  <br />\n\t\t\t\t\t{{--选择文件:<input type=\"file\" name=\"my_file\" />  <br />--}}\n\t\t\t\t\t<input type=\"submit\" value=\"提交\" />\n\t\t\t\t    </fieldset>\n\t\t\t\t</form>\n\t\t\t\t</body>\n\t\t\t\t</html>\n\n# <a id=\"Session\"></a>Session\n\t\n\t方式一:使用文件.(默认)\n\t\t.env文件中配置Session存储方式\n\t\t\tCACHE_DRIVER=file\n\t\t\tSESSION_DRIVER=file\n\t\t\tQUEUE_DRIVER=sync\n\n\t方式二:使用数据库\n\t\t.env文件中配置Session存储方式\n\t\t\tCACHE_DRIVER=file\n\t\t\tSESSION_DRIVER=database\n\t\t\tQUEUE_DRIVER=sync\n\t\t使用PHPStorm自带的lerminal工具或者计算机命令行cmd定位到项目目录下.\n\t\t\n\t\t使用命令生成数据库表:\n\t\t\tphp artisan session:table\n\t\t\t\n\t\t\tE:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel>php artisan session:table\n\n\t\t\t当输出 Migration created successfully!时 \n\t\t\t可查看到database/migrations目录下会新创建一个PHP文件类名为CreateSessionTable\n\n\t\t\t再输入 composer dump-autoload\n\t\t\t\t当输出 Generating autoload files 表示成功.\n\n\t\t\t再输入 php artisan migrate\t\n\t\t\t\t当输出如下表示成功\n\t\t\t\tMigrated: 2015_11_02_092311_create_session_table\n\n\t\t\t查看数据库表多了一个sessions表\n\t\t\t\t里面有id , payload , last_activity 三个字段\n\t\t\t注: 执行php artisan migrate时有异常可查看\"我遇到的错误解决问题\"\n\n\t\t\t\n\t\t\t生成表之后就可以使用Session了`~增删改查都无需要人工控制.\n\n\t控制器\n\t\tapp/Http/Controlers/DemoSessionController.php\n\t\t\t<?php namespace App\\Http\\Controllers;\n\t\t\tuse App\\Http\\Controllers\\Controller;\n\t\t\tuse Illuminate\\Support\\Facades\\Session;\n\t\t\tclass DemoSessionController extends Controller{\n\n\t\t\t    public function session(){\n\t\t\t\t//查看全部Session数据\n\t\t\t\tvar_dump(Session::all());\n\n\t\t\t\t/*\n\t\t\t\t 起初Session就有默认值\n\t\t\t\t_previous : 上一次请求的地址\n\t\t\t\tflash: 保存的数据\n\t\t\t\told:历史数据\n\t\t\t\tnew:新数据\n\t\t\t\t例:\n\t\t\t\t array:3 [▼\n\t\t\t\t  \"_token\" => \"7jcZiP2wv0nIpxrA4KUqn9sBRaU7YXpcc8M0zrue\"\n\t\t\t\t  \"_previous\" => array:1 [▼\n\t\t\t\t    \"url\" => \"http://localhost/uploadFile\"\n\t\t\t\t  ]\n\t\t\t\t  \"flash\" => array:2 [▼\n\t\t\t\t    \"old\" => []\n\t\t\t\t    \"new\" => []\n\t\t\t\t  ]\n\t\t\t\t]\n\t\t\t\t */\n\t\t\t\techo '<br>'; echo '<br>';\n\n\t\t\t\t//增加/修改Session _ 方式一\n\t\t\t\tSession::put('username','comtu');\n\n\t\t\t\t//增加Session _ 方式二\n\t\t\t\tsession(['username'=>'comtu1']);\n\n\t\t\t\t//获取值_不删除\n\t\t\t\t$username = Session::get('username');\n\t\t\t\t//获取值_后删除_只用一次\n\t\t\t\t$username = Session::pull('username');\n\t\t\t\tvar_dump($username);\n\t\t\t\techo '<br>'; echo '<br>';\n\n\t\t\t\t//判断是否存在\n\t\t\t\t$bool = Session::has('username');\n\t\t\t\tvar_dump($bool);\n\n\t\t\t\t//删除Session值\n\t\t\t\t$value = Session::forget('username');\n\t\t\t\tvar_dump($value);\n\t\t\t    }\n\t\t\t}\n\n\t路由\n\t\tapp/Http/routes.php\t\n\t\t\tRoute::any('session','DemoSessionController@session');\n\n# <a id=\"表单验证\"></a>表单验证\n\n\t需要引入use Request,Validator; 包\n\t$validator = Validator::make(数据,规则,自定义错误信息);\n\t$validator->fails();验证表单\n\t$validator->errors();//获取错误信息\n\n\t例:修改8.数据库中的Demo\n\t    public function postAddPerson(){\n\t\t//存储提交数据到Session\n\t\tRequest::flash(); //见9.请求\n\n\t\t//必填 required\n\t\t//长度 between:最小,最大\n\t\t//最小长度 min:4\n\t\t//最大长度 max:16\n\t\t//数字 numeric\n\t\t//唯一性 unique:表名 会自动查询表对应字段是否存在有当前值\n\t\t//检查值是否在table表中column字段中存在 exists:table,column 自动查询table表column字段是否包含值\n\t\t//更多配置 http://laravel-china.org/docs/5.0/validation\n\n\t\t//表单验证请求\n\t\t$rq = Request::all();\n\t\t$rules = [//规则\n\t\t    'name' => 'required|between:4,16|unique:person' ,\n\t\t    'age' => 'required|numeric',\n\t\t    'sex' => 'required|numeric',\n\t\t    'salary' => 'required|numeric',\n\t\t   'occ_id' => 'required|numeric|exists:occupation,occ_id',\n\t\t\t'dep_id' => 'required|numeric|exists:department,dep_id',\n\t\t];\n\t\t$messages = [//自定义错误信息\n\t\t    'required' => 'The :attribute field is required.',\n\t\t    'between' => 'The :attribute must be between :min - :max.'\n\t\t];\n\t\t$validator = Validator::make($rq,$rules,$messages);//可三个参数\n\t\t//$validator = Validator::make($rq,$rules);//可两个参数\n\n\t\tif($validator->fails()){//表单验证\n\t\t    $person = new Person();//重新封装历史数据\n\t\t    $person->name = Request::old()['name'];//表单验证失败,返回用户之前输入的信息\n\t\t    $person->age = Request::old()['age'];\n\t\t    $person->sex = Request::old()['sex'];\n\t\t    $person->salary = Request::old()['salary'];\n\t\t    $person->occ_id = Request::old()['occ_id'];\n\t\t    $person->dep_id = Request::old()['dep_id'];\n\n\t\t    $data ['person'] = $person;\n\t\t    $data['occupation'] = Occupation::get();\n\t\t    $data['department'] = Department::all();\n\t\t    //错误信息 Illuminate\\Support\\MessageBag 对象类型 head($validator->get('key'))获取键值\n\t\t    $data['validator'] = $validator->errors();\n\t\t    return view('demo.demo_add_update_database',$data);\n\t\t}\n\n\t\t$person = new Person();\n\t\t//增加数据方式2\n\t\t$person->name = Request::input('name', 'default');//获取Post请求的数据\n\t\t$person->age = Request::input('age', 20);\n\t\t$person->sex = Request::input('sex', 0);\n\t\t$person->salary = Request::input('salary', 1800);\n\t\t$person->occ_id = Request::input('occ_id');\n\t\t$person->dep_id = Request::input('dep_id');\n\t\t$person->save();\n\t\treturn redirect('myDatabase/Demo');\n\t    }\n\n# <a id=\"中间件\"></a>中间件\n\n\tHTTP 中间件提供一个方便的机制来过滤进入应用程序的 HTTP 请求，\n\t例如，Laravel 默认包含了一个中间件来检验用户身份验证，如果用户没有经过身份验证，\n\t中间件会将用户导向登录页面，然而，如果用户通过身份验证，中间件将会允许这个请求进一步继续前进。\n\n\t当然，除了身份验证之外，中间件也可以被用来执行各式各样的任务，CORS 中间件负责替所\n\t有即将离开程序的响应加入适当的响应头，一个日志中间件可以记录所有传入应用程序的请求。 \n\tLaravel 框架已经内置一些中间件，包括维护、身份验证、CSRF 保护，等等。\n\t所有的中间件都位于 app/Http/Middleware 目录内。\n\n\t使用步骤\n\t\t1.创建中间件\n\t\t\t使用命令: php artisan make:middleware AdminPrivilegeMiddleware\n\t\t\t在app/Http/Middleware文件夹中创建中间件文件\n\t\t\t如:AdminPrivilegeMiddleware.php\n\t\t\t\t<?php\n\t\t\t\tnamespace App\\Http\\Middleware;\n\t\t\t\tuse Closure;\n\t\t\t\tuse Illuminate\\Support\\Facades\\Session;\n\t\t\t\tclass AdminPrivilegeMiddleware\n\t\t\t\t{\n\t\t\t\t    /**\n\t\t\t\t     * Handle an incoming request.\n\t\t\t\t     * @param  \\Illuminate\\Http\\Request  $request\n\t\t\t\t     * @param  \\Closure  $next\n\t\t\t\t     * @return mixed\n\t\t\t\t     */\n\t\t\t\t    public function handle($request, Closure $next)\n\t\t\t\t    {\n\t\t\t\t\t//权限认证\n\t\t\t\t\t$bool = Session::has('admin_user');\n\t\t\t\t\tif(!$bool)\n\t\t\t\t\t    return redirect('admin/privilege/login');\n\t\t\t\t\treturn $next($request);\n\t\t\t\t    }\n\t\t\t\t}\n\t\t2.注册中间件 \n\t\t\t在app/Http目录下的Kernel.php增加如下内容\n\t\t\t protected $routeMiddleware = [\n\t\t\t\t//注册中间件\n\t\t\t\t'auth.admin' => \\App\\Http\\Middleware\\AdminPrivilegeMiddleware::class,\n\t\t\t ];\n\t\t3.使用中间件\n\t\t\t在app/Http目录下的routes.php使用:\n\t\t\t//中间件,权限控制\n\t\t\tRoute::group(['middleware' => 'auth.admin'], function() {\n\t\t\t\tRoute::get('admin/main/index','admin\\MainController@index');\n\t\t\t\tRoute::get('admin/categroy/index','admin\\CategroyController@index');\n\t\t\t}\n\n# <a id=\"哈希\"></a>哈希\n\n\t可用于加密用户的敏感信息或者密码\n\t需要导入 use Illuminate\\Support\\Facades\\Hash; 包\n\t使用方法: \n\t\t$password = '123';\n\t\t$pass = Hash::make($password);//加密\n\t\t$password2 = '123';\n\t\t$bool = Hash:check($pass,$password2);检查是否相同\n\n# <a id=\"辅助函数\"></a>辅助函数\n\n\tarray 数组相关\n\n\t\thead\n\t\t\t$arr = [1,2,3];\n\t\t\t$value = head($arr);//打印1 返回数组第一个元素\n\t\t\n\t\tlast \n\t\t\t$arr = [1,2,3];\n\t\t\t$value = last($arr);//打印3 返回数组第一个元素\n\n\t\tarray_only\n\t\t\t$arr = ['name'=>'comtu','age'=>10,'job'=>'manager'];\n\t\t\t$value = array_only($arr,['name','age']);//返回数组中指定的数据\n\t\t\t//打印 array(2) { [\"name\"]=> string(5) \"comtu\" [\"age\"]=> int(10) } \n\n\t\tarray_first //返回满足条件的第一条数据\n\t\t\t$arr = [10,20,30];\n\t\t\t$value = array_first($arr,function($key,$v){\n\t\t\t\treturn $v >10; \n\t\t\t});\n\t\t\t//打印 20\n\n\t\tarray_add\n\t\t\t$arr = ['name'=>'comtu','age'=>10];\n\t\t\t$value = array_add($arr,'job','manager');//给数组增加字段 \n\t\t\t// 返回 ['name'=>'comtu','age'=>10,'job'=>'manager']\n\n\t\tarray_set //修改数组中对应的值\n\t\t\t$arr = ['start_time'=>'2009-06-01','end_time'=>'2014-11-30'];\n\t\t\tarray_set($rq,'start_time',strtotime(Request::input('start_time')));  //strtotime时间转时间戳\n\t\t\t//返回 ['start_time'=>1243814400,'end_time'=>'2014-11-30'];;\n\n\t\tarray_except\n\t\t\t$arr = ['name'=>'comtu','age'=>10,'job'=>'manager'];\n\t\t\t$value = array_except($arr,'job');//返回数组中除指定键后的数据 \n\t\t\t//返回 ['name'=>'comtu','age'=>10]\n\n\t\tarray_flatten\n\t\t\t$arr = [\n\t\t\t\t'a' =>1,\n\t\t\t\t'b' =>[\n\t\t\t\t\t'a'=>2,\n\t\t\t\t\t'b'=>3\n\t\t\t\t\t]\n\t\t\t\t];\n\t\t\t$value = aray_flatten($arr);//返回$arr内的所有值 \n\t\t\t//返回 array(3) { [0]=> int(1) [1]=> int(2) [2]=> int(3) } \n\n\t\tarray_where\n\t\t\t$arr = ['name' => 'comtu','age'=>18,'job'=>'manager'];\n\t\t\t$value = array_where($arr,function($k,$v){\n\t\t\t\treturn is_string($v);\n\t\t\t});//返回满足条件的新数组 返回全是String类型的数据\n\t\t\t//返回 ['name' => 'comtu','job'=>'manager']\n\t\n\tPath 辅助函数\n\t\techo app_path();// 项目绝对路径 项目绝对路径\n\t\t\tE:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel\\app\n\n\t\techo config_path(); 项目下的配置目录的绝对路径\n\t\t\tE:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel\\config\n\n\t\techo public_path(); 项目下的public目录的绝对路径\n\t\t\tE:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel\\public\n\n\t\techo storage_path(); 项目下的storage目录的绝对路径\n\t\t\tE:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel\\storage\n\n\n\t字符串 辅助函数\n\t\tstr_plural 单词单数变复数\n\t\t\t例如 $value = str_plural('apple'); //返回apples\n\t\t\t     $value = str_plural('sheep');// 返回sheep \n\t\t\t     $value = str_plural('ability');// 返回abilities\n\n\t\tstarts_with\n\t\t\t//字符串是否是与指定的内容开头\n\t\t\tvar_dump( starts_with('abcd','ab'));//返回true\n\n\t\tends_with\n\t\t\t//字符串是否是与指定的内容结束\n\t\t\tvar_dump( ends_with('abcd','b'));//返回false\n\n\t\tcamel_case\n\t\t\t//将字符串替换成驼峰命名法\n\t\t\techo camel_case('hello_world');//返回helloWorld\n\n\t\tclass_basename\n\t\t\t//返回 命名空间的类名\n\t\t\techo class_basename('App\\Controller\\DemoDataBaseController');//返回DemoDataBaseController\n\n\t\tstr_limit\n\t\t\t//限制字符串的长度_返回指定长度的字符串\n\t\t\techo str_limit('abcdefg',3);//返回abc... 后面有省略号\n\t\t\t\n\t\tstr_is\n\t\t\t//判断字符串是否满足条件 是否是与ab开头e结尾_参数一是条件,参数二是判断的值\n\t\t\tvar_dump(str_is('ab*e','abcde')); //返回true\n\n# <a id=\"图片处理库Integration/Image\"></a>在 Laravel 中使用图片处理库 Integration/Image \n\n\t系统需求\n\n\t\t PHP >= 5.3\n\t\t Fileinfo Extension\n\t\t GD Library (>=2.0) … or …\n\t\t Imagick PHP extension (>=6.5.7)\n\n\t安装部署 Integration/image\n\n\t\t在 composer.json [require] 节增加\"\"intervention/image\": \"2.*\"\"，之后执行 composer update 我当时下载的是2.3.2\n\t\t\n\t\t如果出现错误信息: (PHP版本5.5.28)\n\t\t\t\tE:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\myLaravelShop>composer update\n\t\t\t\t> php artisan clear-compiled\n\t\t\t\tLoading composer repositories with package information\n\t\t\t\tUpdating dependencies (including require-dev)\n\t\t\t\tYour requirements could not be resolved to an installable set of packages.\n\n\t\t\t\t  Problem 1\n\t\t\t\t    - Installation request for intervention/image 2.0.17 -> \n\t\t\t\t\t\tsatisfiable by intervention/image[2.0.17].\n\t\t\t\t    - intervention/image 2.0.17 requires ext-fileinfo * -> \n\t\t\t\t\t\tthe requested PHP extension fileinfo is missing from your system.\n\t\t\t解决方法:\n\t\t\t\t找到PHP环境目录 --> 打开 php.ini 文件 找到 ;extension=php_fileinfo.dll (PHP5.5.28-nts 862行) \n\t\t\t\t去除前面的;号~~重新运行即可. 会在后台下载,等待.\n\n\tLaravel 配置\n\n\t\t安装部署 Integration/image 完成后，打开配置文件 config/app.php 在相应位置添加代码，\n\t\t然后 Image 类就能自动加载并可供使用了。其功能强大到可以处理你的几乎所有图片处理需求。\n\t\t\t//服务提供器 Laravel 5.1.23 \t在 providers  中配置\n\t\t\t Intervention\\Image\\ImageServiceProvider::class,\n\n\t\t\t//别名配置 Laravel 5.1.23  在 aliases 中配置 \n\t\t\t'Image'     => Intervention\\Image\\Facades\\Image::class,\n\n\t配置设置\n\t\t默认情况下， Integration/Image 使用PHP的GD库扩展。\n\t\t如果你想切换到 imagick，你可以使用 php artisan 创建一个配置文件以添加相应的配置。\n\t\t$ php artisan config:publish intervention/imag\n\n\t基本使用\n\n\t\t这里列出几个基本功能，更详细使用说明请查看相关接口文档。\n\t\t文档地址: http://image.intervention.io/  墙\n\t\t\n\t\t\tDemo\n\t\t\t//1、显示一张图片\n\t\t\tRoute::get('imageRead',function(){\n\t\t\t    $img = Image::make(public_path().'/uploads/43195301.jpg');//读取图片\n\t\t\t    return $img->response();//返回图片资源在浏览器中显示\n\t\t\t});\n\n\t\t\t//2、创建缩略图\n\t\t\tRoute::get('imageThumbnail',function(){\n\t\t\t    if (!file_exists(public_path().'/uploads/thumbnail')){ //创建文件夹\n\t\t\t\tmkdir (public_path().\"/uploads/thumbnail\");\n\t\t\t    }\n\n\t\t\t    $rawFilePath = public_path().'/uploads/43195301.jpg';\n\t\t\t    $thumbnailFilePath = public_path().'/uploads/thumbnail/'.uniqid().'.jpg';\n\n\t\t\t    //生成缩略图\n\t\t\t    $img = Image::make($rawFilePath);//读取图片文件\n\t\t\t    $img->resize(120,120);//缩略图大小 宽/高\n\t\t\t    $img->save($thumbnailFilePath);//需要保存在已有的目录中\n\t\t\t    echo $rawFilePath.'生成缩略图到'.$thumbnailFilePath;\n\t\t\t});\n\n\t\t\t//3、绘制一张图片\n\t\t\tRoute::get('imageCanvas',function(){\n\t\t\t    $img = Image::canvas(800, 600, '#ccc');\n\t\t\t    return $img->response();\n\t\t\t});\n\n\t\t\t//4.插入一个水印\n\t\t\tRoute::get('imageInsert',function(){\n\t\t\t    $rawFilePath = public_path().'/uploads/43195301.jpg';\n\t\t\t    $watermark = public_path().'/uploads/563b24c067472.jpg';//水印\n\t\t\t    //top-left (default)\n\t\t\t    //top\n\t\t\t    //top-right\n\t\t\t    //left\n\t\t\t    //center\n\t\t\t    //right\n\t\t\t    //bottom-left\n\t\t\t    //bottom\n\t\t\t    //bottom-right\n\t\t\t    // $img->insert($watermark, 'bottom-right', 10, 10);//其它位置\n\t\t\t    // $img->insert($watermark, 'center');//中间\n\t\t\t    $img = Image::make($rawFilePath)->resize(800, 600)->insert($watermark);//打水印,默认左上角\n\n\t\t\t    return $img->response();\n\t\t\t});\n\t\t\n\t\n\t\t如果运行时页面中出现如下错误:\n\t\t\tNotSupportedException in Driver.php line 18:\n\t\t\tGD Library extension not available with this PHP installation.\n\t\t\tin Driver.php line 18\n\t\t\tat Driver->__construct() in ImageManager.php line 107\n\t\t\tat ImageManager->createDriver() in ImageManager.php line 50\n\t\t\tat ImageManager->make('/public/uploads/43195301.jpg') in Facade.php line 214\n\t\t\t....\n\t\t解决方案\n\t\t\t开启PHP的GD功能\n\t\t\t找到PHP环境目录 --> 打开 php.ini (PHP5.5.28-nts 863行) 文件 \n\t\t\t找到 ;extension=php_gd2.dll 去除前面的;号~~重新启动服务运行即可. \n\n# <a id=\"我遇到的错误\"></a>我遇到的错误\n\t\n\t链接数据库时异常.\n\t\t//路由中,尝试连接数据库\n\t\tRoute::get('myDatabase',function(){\n\t\t    $name = DB::connection()->getDatabaseName();\n\t\t    echo $name; //打印出 数据库名 my_laravel 表示成功\n\t\t});\n\n\t\tPDOException in Connector.php line 47:\n\t\tcould not find driver\n\t\tin Connector.php line 47\n\t\tat PDO->__construct('mysql:host=localhost;dbname=my_laravel',\n\t\t'root', 'root', array('0', '2', '0', false, false)) in Connector.php line 47\n\t\t.....\n\n\t\t解决办法:\n\t\tphp环境中找到 php.ini文件并找到 ;extension=php_pdo_mysql.dll \n\t\t并去除前面的;号.然后重启服务器.如apache 或者 关闭服务重新启动服务 php -S localhost:80 -t my_laravel\\public\n\n\tSession生成数据库表异常\n\t\t错误原因1.可能存在冲突的表原因.\n\t\t\tdatabase/migrations 目录下的文件是需要生成的表.\n\t\t\t如果出现错误警告,可查看当前目录下的文件是否是自己需求要创建的表.\n\t\t\t如果里面存在冲突的表,如我当时有两个users表\n\t\t\t查打开查看文件是否是自己的内容.如果不是.~~可删除文件,需要注意的是\n\t\t\t删除后需要在\tmy_laravel/vendor/composer/autoload_classmap.php \n\t\t\t文件中找到相同的一条记录一并删除重新执行即可.\n\n\t还有遇到的一些错误见功能模块,有解决方案\n\n# <a id=\"artisan命令\"></a>artisan命令\n\t\n\t谨慎操作还原回清静 php artisan fresh\n\t\t\n\t创建控制器\n\t\tphp artisan make:controller MyController\n\t\n\t创建model\n\t\tphp artisan make:model User\n\n\t查看当前所有路由列表\n\t\tphp artisan route:list\n\n\t一整个程序停止解析(使用场景如,网站遇到攻击,网站需要维护等)\n\t\t配置后访问网站的所有地址都会被跳转到Beright back\n\t\tphp artisan down \n\t\tphp artisan up\n\n\t生成Session数据库表\n\t\tphp artisan session:table  //1\n\t\tcomposer dump-autoload     //2\n\t\tphp artisan migrate        //3\n\t\n\t创建中间件\n\t\tphp artisan make:middleware MyMiddleware\n\n\n\n英文文档   \n[http://laravel.com/docs/5.1](http://laravel.com/docs/5.1)   \n\n中文文档:     \n[http://www.golaravel.com/](http://www.golaravel.com/)   \n[http://laravel-china.org/docs/5.0/middleware](http://laravel-china.org/docs/5.0/middleware)   \n[http://www.golaravel.com/post/install-and-run-laravel-5-x-on-windows/](http://www.golaravel.com/post/install-and-run-laravel-5-x-on-windows/)   \n\n# <a id=\"Demo\"></a>Demo下载\n\n本博文的案例Demo下载地址如下:\n\n[本文案例Demo](/res/file/blog/2015/10/10/PHP_Laravel/laravel-v5.0.22_Demo.rar)\n\n[本文案例Demo_购物商场](/res/file/blog/2015/10/10/PHP_Laravel/myLaravelShop_Demo.rar)\n\n刚学PHP的两个框架Laravel与CI,个人对这两个框架的感觉如下~\n\n| |Laravel|Codeigniter\n|---|:---|---:|:---:|\n|开发效率|★★★★|★★★\n|运行效率|★★★|★★★★\n|学习成本|★★☆|★\n\n\n","source":"_posts/2015-10-10-PHP_Laravel.md","raw":"---\nlayout : post\ntitle : \"PHP学习笔记-Laravel框架\"\ncategory : PHP\nduoshuo: true\ndate : 2015-10-10\ntags : [PHP ,Laravel ,artisan,Integration/Image]\n---\n\n本人因公司的需要.学习PHP的Laravel框架.本博文为学习笔记.     \n本博文中包含有 `Laravel安装配置环境部署`,`路由`,`控制器`,`视图`,`模型`,`MVC` ,`数据库`,`请求`,`Session`,`表单研制`,   \n`中间件`,`哈希`,`辅助函数`,以及`图片处理库Integration/Image`的使用.`artisan`常用命令等内容.   \n\n<!-- more -->\n\n目录:\n\n* [安装Laravel](#安装Laravel)\n* [Laravel目录结构](#Laravel目录结构)\n* [路由](#路由)\n* [控制器(Controller)](#控制器(Controller))\n* [视图(Views)](#视图(Views))\n* [模型(model)](#模型(model))\n* [环境与部署](#环境与部署)\n* [数据库](#数据库)\n* [请求](#请求)\n* [Session](#Session)\n* [表单验证](#表单验证)\n* [中间件](#中间件)\n* [哈希](#哈希)\n* [辅助函数](#辅助函数)\n* [在 Laravel 中使用图片处理库 Integration/Image](#图片处理库Integration/Image)\n* [我遇到的错误](#我遇到的错误)\n* [artisan命令](#artisan命令)\n* [Demo](#Demo)\n\n# <a id=\"安装Laravel\"></a>安装Laravel\n\n\t1.1.下载安装PHP\n\n\t\thttp://windows.php.net/download/\n\n\t\tIDE (https://www.jetbrains.com/phpstorm/)\n\n\t\t本人使用的PHP版本为:php-5.5.28-nts\n\t\tLaravel框架要求PHP 版本 >= 5.4\n\n\t1.2.安装Composer \n\n\t\tComposer  \n\t\t官网: https://getcomposer.org/\n\t\tGitHub: https://github.com/composer/composer\n\t\t中文: http://www.phpcomposer.com/ 中国镜像\n\n\t\tComposert官方下载地址: https://getcomposer.org/Composer-Setup.exe\n\n\t\t如果出现如下安装错误:\n\n\t\t\tSome settings on your machine make Composer unable to work properly.\n\t\t\tMake sure that you fix the issues listed below and run this script again:\n\t\t\tThe openssl extension is missing, which means that secure HTTPS transfers are impossible.\n\t\t\tIf possible you should enable it or recompile php with --with-openssl\n\n\t\t\t缺失openssl扩展\n\t\t\t\n\t\t\t处理方式: \n\t\t\t\t找到php目录下的php.ini文件(如果没有则把php.ini-development拷贝重命名为php.ini)\n\t\t\t\t用编辑器打开 php.ini 文件，修改以下配置： \n\t\t\t\t去掉 extension=php_mbstring.dll 前面的分号（888 行左右） \n\t\t\t\t去掉 extension=php_openssl.dll 前面的分号（893 行左右） \n\t\t\t\t去掉 extension_dir = \"ext\" 前面的分号（736 行左右）\n\t\t\t然后重试即可.安装完全成后使用cmd输入composer显示如下内容表示安装成功.\n\n\t\tC:\\Users\\comtu>composer\n\t\t   ______\n\t\t  / ____/___  ____ ___  ____  ____  ________  _____\n\t\t / /   / __ \\/ __ `__ \\/ __ \\/ __ \\/ ___/ _ \\/ ___/\n\t\t/ /___/ /_/ / / / / / / /_/ / /_/ (__  )  __/ /\n\t\t\\____/\\____/_/ /_/ /_/ .___/\\____/____/\\___/_/\n\t\t\t\t    /_/\n\n\t\t....省略.....\n\n\t1.3.在项目中创建 Composer \n\n\t\t使用cmd定位到项目目录下.如:\n\t\t\tE:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm>\n\n\t\t使用命令:\n\t\t\tcmd(或者使用PHPStorm的Terminal本人使用的IDE就是PHPStorm)\t\n\n\t\t\tcomposer create-project laravel/laravel --prefer-dist my_laravel\n\t\t\n\t\t\t回车后会自动下载laravel框架.下载目录生成在firstPHPStorm目录下.\n\t\t\t\tlaravel/laravel 指下载laravel目录下的laravel\n\t\t\t\t--prefer-dist下载的文件为压缩过的.\n\t\t\t\tmy_laravel 为安装到的文件目录名(自定义).\n\n\t\t\t如果没有代理下载速度就呵呵了.(本人大概花费15分钟左右时间.)\n\t\t\t最后提示如下内容表示下载成功:\n\t\t\t\tApplication key [xxxxxxxxxxxxxxxxxxxx] set successfully. \n\n\t\t一键安装包\n\t\t\t故有了一键安装包.rar里面的内容就是通过命令下载下来的文件.免去了再龟速的下载.\n\n\t\t\tLaravel一键安装包下载地址: http://www.golaravel.com/download/\n\t\t\n\t1.4.测试运行Laravel\n\n\t测试运行方式1:\n\n\t\tcmd(或者使用PHPStorm的Terminal本人使用的IDE就是PHPStorm)\n\t\t\n\t\tphp -S localhost:80 -t my_laravel\\public\n\n\t\t提示出现:\n\t\t\tPHP 5.5.28 Development Server started at Sat Oct 10 10:20:28 2015\n\t\t\tListening on http://localhost:80\n\t\t\tDocument root is E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel\\public\n\t\t\tPress Ctrl-C to quit.\n\t\t\n\t\t打开浏览器:\n\t\t地址栏输入:localhost\n\t\t界面中显示出\"Laravel 5\"大字表示运行成功.\n\t\t\n\t\t但如果你的是使用linux或者其它系统.如果出现浏览器显示出白屏或者其它内容.则可能是因为有两个文件夹的权限的原因\n\t\t需要为 my_laravel/storage (日志,session,等目录)  与 my_laravel/vendor (Composer下载的支持库,或者自己的第三方库目录)\n\t\t有写入的权限\n\n\t\tLinux设置对应的权限命令如下:\n\n\t\t\tchown -R apache:apache /var/www/my_laravel/storage\n\t\t\tchown -R apache:apache /var/www/my_laravel/vendor\n\n\n\t测试运行方式2(PHP版本5.4之后的版本):\n\t\n\t\tartisan 的 serve 命令还支持两个参数：\n\n\t\thost 设置主机地址\n\t\tport 设置 web server 监听的端口号\n\t\t例如：php artisan serve --port=8888\n\n\n\t\tcmd 定位目录到my_laravel 输入 php artisan serve (PHP5.4之后开始支持内置web Server 同时Laravel也支持)\n\t\tE:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel>php artisan serve 回车(默认8000接口可指定)\n\t\tLaravel development server started on http://localhost:8000/ 提示\n\n\t\t打开浏览器，在地址栏输入 localhost:8000 于方式1运行出相同的效果.\n\t\t\n\t\t如你电脑上有运行Apache 并且端口也是8000那么会出现如下提示,需要关闭Apache或者指定其它接口后再试.\n\t\t[Sat Oct 10 10:39:21 2015] Failed to listen on localhost:8000 \n\t\t(reason: 以一种访问权限不允许的方式做了一个访问套接字的尝试。)\n\n# <a id=\"Laravel目录结构\"></a>Laravel目录结构\n\n\t本学习笔记使用到的文件目录\n\n\tmy_laravel\n\t\t|-->app\n\t\t|    |--->Http \n\t\t|    |     |---->Controllers 控制器目录\n\t\t|    |     |       |-----> 控制器文件\n\t\t|    |     |---->Middleware\n\t\t|    |     |       |-----> 中间件文件\n\t\t|    |     |---->routes.php 路由配置文件\n\t\t|    |     |---->Kernel.php 中间件配置文件\n\t\t|    |---> 根目录Model默认目录\n\t\t|-->bootstrap\n\t\t|-->config  配置文件\n\t\t|    |--> app.php\n\t\t|    |--> database.php\n\t\t|    |--> ....\n\t\t|-->database 数据库\n\t\t|-->public 对外开放目录\n\t\t|-->resources\n\t\t|    |--->views 视图View目录\n\t\t|          |---->xxxx.blade.php 视图文件\n\t\t|          |---->errors 目录\n\t\t|                  |-----> 503.blade.php 文件当artisan命令使用 php artisan down 时会网站全部连接转向此文件.\n\t\t|-->storage 日志,session等缓存目录\n\t\t|-->tests \n\t\t|-->vendor 自己的第三方库目录与Composer下载的支持库\n\t\t|    |--->laravel 框架目录\n\t\t|    |--->intervention 图片处理库,需要下载\n\t\t|-->.env 文件 环境配置文件.\n\t\t|-->Composer.json 环境库配置文件 \n\n# <a id=\"路由\"></a>路由\n\t\n\t路由作用是宏观的分发和限制请求\n\n\thttp://laravel-china.org/docs/5.0/routing 中文文档\n\n\thttp://laravel.com/docs/5.0/routing 原版文档\n\thttp://laravel.com/docs/5.1/routing 原版文档\n\n\t3.1 配置基本路由\n\t\t文件目录:my_laravel/app/Http/routes.php\t\n\t\t\n\t\t选择get/post/any 等等\n\t\t\t一般get是向服务器要数据\n\t\t\tpost是向服务器发数据\n\t\t\tany就是通过全部请求类型\n\n\t\t//get\n\t\t\tRoute::get('/','WelcomeController@index');\n\t\t\t//意思是如果通过get访问/域名就交给WelcomeController控制器的index方法进行处理.\n\n\t\t\t//通过 http://localhost/home 访问.可进入到登录页面\n\t\t\tRoute::get('home', 'HomeController@index');\n\n\t\t\t也可以使用函数的方式直接返回视图(可加快测试速度)\n\n\t\t\tRoute::get('/',\tfunction () {\n\t\t\t\t\treturn view('welcome');\n\t\t\t\t\t//视图文件目录位于:my_laravel/resources/views/welcome.blade.php\n\t\t\t\t}\n\t\t\t);\n\t\t\t//意思是如果访问/域名 显示视图welcome\n\t\t\t\t\n\t\t//post方式 路由使用函数\n\t\t\tRoute::post('test',function (){\n\t\t\t\treturn view('welcome');\n\t\t\t});\n\t\t\n\t\t//any(不管用什么方式get/post等请求都通过),对于不敏感的信息都可以使用这种模式.\n\t\t\tRoute::any('testAny',function (){\n\t\t\t\treturn 'any请求,注册路由响应所有 HTTP 请求';\n\t\t\t});\n\t\t\n\t\t//match 为多种请求注册路由\n\t\t\tRoute::match(['get', 'post'], '/', function()\n\t\t\t{\n\t\t\t    return 'Hello World';\n\t\t\t});\n\n\t\t//resource 请求控制器中的所有方法\n\t\t\t//http://localhost/user\n\t\t\t//http://localhost/user/create\n\t\t\t//http://localhost/user/destroy\n\t\t\t//http://localhost/user/update\n\t\t\t//http://localhost/user/show\n\t\t\t//资源 不用像WelcomeController@index指定方法,直接可以调用. 但在项目中不够灵活.\n\t\t\tRoute::resource('user','UserController');\n\n\t3.2 CSRF保护\n\t\t跨站攻击保护机制(跨网站请求伪造))\n\t\t例如:原本一个post请求的链接,用户使用第三方工具(如chrome浏览器的Postman插件)伪造post请求\n\t\t有CSRF则会对这种请求进行拦截.\n\t\n\t3.3 路由传参\n\t\t基础路由参数\n\t\t\tRoute::get('user/{id}', function($id){\n\t\t\t    return 'User '.$id;\n\t\t\t});\n\n\t\t可选择的路由参数\n\t\t\tRoute::get('user/{name?}', function($name = null){\n\t\t\t    return $name;\n\t\t\t});\n\n\t\t带默认值的路由参数\t\n\t\t\tRoute::get('user/{name?}', function($name = 'John'){\n\t\t\t    return $name;\n\t\t\t});\n\n\t\t使用正则表达式限制参数\n\t\t\tRoute::get('user/{name}', function($name){\n\t\t\t    //\n\t\t\t})\n\t\t\t->where('name', '[A-Za-z]+');\n\n\t\t\tRoute::get('user/{id}', function($id){\n\t\t\t    //\n\t\t\t})\n\t\t\t->where('id', '[0-9]+');\n\n\t\t使用条件限制数组\n\t\t\tRoute::get('user/{id}/{name}', function($id, $name){\n\t\t\t    //\n\t\t\t})\n\t\t\t->where(['id' => '[0-9]+', 'name' => '[a-z]+']);\n\t\t\n\t\t定义全局模式\n\t\t\t如果你想让特定路由参数总是遵询特定的正则表达式，可以使用 pattern 方法。在 RouteServiceProvider 的 boot 方法里定义模式：\n\n\t\t\t$router->pattern('id', '[0-9]+');\n\t\t\t定义模式之后，会作用在所有使用这个特定参数的路由上：\n\n\t\t\tRoute::get('user/{id}', function($id)\n\t\t\t{\n\t\t\t    // 只有 {id} 是数字才被调用。\n\t\t\t});\n\n\t\t取得路由参数\n\n\t\t\t如果需要在路由外部取得其参数，使用 input 方法：\n\n\t\t\tif ($route->input('id') == 1){\n\t\t\t    //\n\t\t\t}\n\t\t\t你也可以使用 Illuminate\\Http\\Request 实体取得路由参数。\n\t\t\t当前请求的实例可以通过 Request facade 取得，或透过类型提示 Illuminate\\Http\\Request 注入依赖：\n\n\t\t\tuse Illuminate\\Http\\Request;\n\n\t\t\tRoute::get('user/{id}', function(Request $request, $id){\n\t\t\t    if ($request->route('id')){\n\t\t\t\t//\n\t\t\t    }\n\t\t\t});\n\t\n\t\n\t还有如:\t方法欺骗 , 命名路由 , 路由群组 , 路由模型绑定 , 抛出 404 错误 等内容 ,见官方文档.\n\n# <a id=\"控制器(Controller)\"></a>控制器(Controller)\n\t\n\t控制器的作用是请求二级分发者\n\n\t控制器目录\n\t\tmy_laravel/app/Http/Controllers/目录下\n\n\t创建控制器\n\t\t手动模式创建:\n\t\t\t例如新创建: my_laravel/app/Http/Controllers/MyController1.php 内容如下\n\t\t\t\t<?php namespace App\\Http\\Controllers;\n\t\t\t\tclass MyController1 extends Controller {\n\t\t\t\t    public function getAbout(){\n\t\t\t\t\treturn 'MyController1@ABOUT gogogo';\n\n\t\t\t\t\t//到视图\n\t\t\t\t\t//return view('my_welcome');//跳转到my_welcome.blade.php视图View中.\n\t\t\t\t\t//传参数方式1 //跳转到my_welcome.blade.php视图View中并带一个参数$name = 'comtu'.\n\t\t\t\t\t//return view('my_welcome')->with('name','comtu');\n\t\t\t\t\t//传参数方式2 //跳转到my_welcome.blade.php视图View中并带一个参数$name = 'name'.\n\t\t\t\t\t//$name = 'lala';\n\t\t\t\t\t//return view('my_welcome',compact('name'/*['name'->'lala']*/);\n\t\t\t\t\t//传参数方式3\n\t\t\t\t\t//$data=[\n\t\t\t\t\t//\t'name' => 'comtu',\n\t\t\t\t\t//\t'age' => 128\n\t\t\t\t\t//];\n\t\t\t\t\t//return view('my_welcome',$data);//传多参数.视图View中直接使用$name , $age即可.\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t配置路由\n\t\t\t\t//http://localhost/myController1\n\t\t\t\tRoute::get('myController1','MyController1@getAbout');\n\t\n\t\t命令模型创建(推荐,更准确):\n\n\t\t\t使用Terminal定位(cmd)目录文件到 my_laravel 目录下 使用artisan命令\n\t\t\t使用命令:\n\t\t\t\tE:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel>\n\t\t\t\tphp artisan make:controller MyController\n\t\t\t\n\t\t\t提示:Controller created successfully. 创建成功.\n\t\t\t查看my_laravel/app/Http/Controllers/MyController.php\n\t\t\t发现会生成生成MyController.php文件 文件里会自动生成类,以及一些方法:\n\t\t\t如:index() , create() , store() , show($id) , edit($id) , update($id) , destroy($id)\n\t\t\t但都是空实现.\n\t\n# <a id=\"视图(Views)\"></a>视图(Views)\n\t\n\tMVC显示层\n\n\tmy_laravel/resources/views/xxxx.blade.php\n\t\n\t创建View视图\n\t\t一般流程为: 创建控制器-->配置路由-->创建视图.\n\t\t\n\t\t1.在创建的控制器 MyController.php 中增加如下方法:\n\t\t\t<?php namespace App\\Http\\Controllers;\n\t\t\tclass MyController1 extends Controller {\n\t\t\t\tpublic function index(){\n\t\t\t\t\t//到视图\n\t\t\t\t\treturn view('my_welcome');//跳转到my_welcome.blade.php视图View中.\n\t\t\t\t}\n\n\t\t\t\t//传参数方式1\n\t\t\t\tpublic function parameter(){\n\t\t\t\t\t$data=[\n\t\t\t\t\t\t'name' => 'comtu',\n\t\t\t\t\t\t'age' => 128,\n\t\t\t\t\t        'people'=>['张三','李四','王五']\n\t\t\t\t\t];\n\t\t\t\t\treturn view('my_welcome',$data);//传多参数.视图View中直接使用$name , $age即可.\n\t\t\t\t}\n\t\t\t\t//传参数方式2\n\t\t\t\tpublic function parameter1(){\n\t\t\t\t\t$name = 'lala';\n\t\t\t\t\t//跳转到my_welcome.blade.php视图View中并带一个参数$name = 'lala'.\n\t\t\t\t\treturn view('my_welcome',compact('name')/*等同于['name'->'lala']*/);\n\t\t\t\t}\n\t\t\t\t//传参数方式3\n\t\t\t\tpublic function parameter2(){\n\t\t\t\t\t//跳转到my_welcome.blade.php视图View中并带一个参数$name = 'comtu'.\n\t\t\t\t\treturn view('my_welcome')->with('name','comtu');\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t2.配置路由:\n\t\t\t//http://localhost/my_home\n\t\t\tRoute::get('my_home','MyController@index');\n\t\t\tRoute::get('my_home1','MyController@parameter');\n\t\t\tRoute::get('my_home2','MyController@parameter1');\n\t\t\tRoute::get('my_home3','MyController@parameter2');\n\n\t\t3.创建视图文件 \n\t\t\t目录结构为my_laravel/resources/views/my_welcome.blade.php\n\t\t\t<html>\n\t\t\t\t<head>\n\t\t\t\t\t<title>my_welcome</title>\n\t\t\t\t</head>\n\t\t\t\t<body>\n\t\t\t\t\t<div class=\"title\">my_welcome-->\n\t\t\t\t\t\t<?php if(!empty($name)):?>\n\t\t\t\t\t\t\t<?php echo $name;?>\n\t\t\t\t\t\t<?php endif;?>\n\t\t\t\t\t</div>\n\t\t\t\t\t<?php if(!empty($age)):?>\n\t\t\t\t\t\t<div class=\"title\">age:<?php echo $age;?></div>\n\t\t\t\t\t<?php endif;?>\n\t\t\t\t</body>\n\t\t\t</html>\n\n\tBlade模板\n\n\t\t官方文档: http://laravel.com/docs/5.1/blade\n\t\t中文文档: http://www.golaravel.com/laravel/docs/5.0/templates/\n\t\t\n\t\t模板:\n\n\t\t\t{{ }} \n\t\t\t{!! !!}\n\t\t\t{{{ }}}\n\t\t\t@include\n\t\t\t@if()\n\t\t\t@else\n\t\t\t@endif\n\t\t\t@foreach\n\t\t\t@endforeach\n\t\t\t@for\n\t\t\t@endfor\n\t\t\t@while\n\t\t\t@endwhile\n\t\t\t等\n\t\t\n\t\t案例:\n\n\t\t新创建 my_laravel/resources/views/compontents/myHead.blade.php 文件.(用于演示 @include('components.myHead'))\n\t\t\t<html>\n\t\t\t\t<body>\n\t\t\t\t\t<!--头部文件使用 include 在其它地方引用 -->\n\t\t\t\t\t<h1>高大上的头Head</h1>\n\t\t\t\t\t<hr>\n\n\t\t\t\t</body>\n\t\t\t</html>\n\n\t\t演示代码 my_laravel/resources/views/my_view.blade.php\n\t\t\t<html>\n\t\t\t\t<head>\n\t\t\t\t\t<meta charset=\"utf-8\">\n\t\t\t\t\t<title>MyView</title>\n\t\t\t\t</head>\n\t\t\t\t<body>\n\t\t\t\t\t<!--引用包含其它文件.-->\n\t\t\t\t\t@include('components.myHead')\n\t\t\t\t\tMyView-->\n\n\t\t\t\t\t<!--调用函数 跨站点请求伪造保护码-->\n\t\t\t\t\t{{csrf_token()}} 等同于 <?php echo csrf_token();?>\n\n\t\t\t\t\t<h1>{{ $name or 'Default' }}</h1>\n\n\t\t\t\t\t<h1>{{ $name or '无名英雄1' }}</h1>\n\n\t\t\t\t\t<h1>{{ $name or '无名英雄2'}} - {{$age or 0}}</h1>\n\n\t\t\t\t\t以上等同于\n\t\t\t\t\t<h1><?php echo !empty($name)?$name:'无名英雄3'?></h1>\n\n\n\t\t\t\t\t<!--不解析,原样输出-->\n\t\t\t\t\t@{{$name}}\n\t\t\t\t\t\t\t\n\t\t\t\t\t<!--加载代码-->\n\t\t\t\t\t{!! '<script>var g = \"comtu\";document.write(\"<br />加载代码\"+g+\"<br />\");</script>' !!}\n\t\t\t\t\t{!! '<h1>h1</h1>' !!}\n\n\t\t\t\t\t\t\t<!--代码转义-->\n\t\t\t\t\t{{{'<html lang=\"en\">打印HTML comtu</html>'}}}\n\n\t\t\t\t\t\n\t\t\t\t\t<!--Blade的if判断,如果$name未定义会抛错误-->\n\t\t\t\t\t<h1>\n\t\t\t\t\t@if($name)\n\t\t\t\t\t\t你好{{$name}}\n\t\t\t\t\t@else\n\t\t\t\t\t\t未登录\n\t\t\t\t\t@endif\n\t\t\t\t\t</h1>\n\n\t\t\t\t\t\n\t\t\t\t\t@foreach($people as $person)\n\t\t\t\t\t\t<li>{{$person}}</li>\n\t\t\t\t\t@endforeach\n\n\t\t\t\t\t@for($i = 0 ; $i<3; $i++)\n\t\t\t\t\txx\n\t\t\t\t\t@endfor\n\n\t\t\t\t\t@while(false)\n\t\t\t\t\txxx\n\t\t\t\t\t@endwhile\n\n\t\t\t\t</body>\n\t\t\t</html>\n\t\n\t\t以上在浏览器中输出\n\t\t\t高大上的头Head\n\n\t\t\tMyView--> YNJhQ4GgCCuZ5qyPNhTwvFvWfYLduxUOFvEz0vnZ 等同于 YNJhQ4GgCCuZ5qyPNhTwvFvWfYLduxUOFvEz0vnZ\n\t\t\tDefault\n\n\t\t\t无名英雄1\n\n\t\t\t无名英雄2 - 0\n\n\t\t\t以上等同于\n\t\t\t无名英雄3\n\n\t\t\t{{$name}} \n\t\t\t加载代码comtu\n\t\t\th1\n\n\t\t\t<html lang=\"en\">打印HTML comtu</html>\n\n\t\t\t未登录\n\n\t\t\t张三\n\t\t\t李四\n\t\t\t王五\n\t\t\txx xx xx\n\n# <a id=\"模型(model)\"></a>模型(model)\n\t\n\t模型层\n\t\t一般model在 my_laravel/app/目录下\n\t\t直接或间接继承Model;\n\t\t原代码目录:\n\t\t//my_laravel/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Model.php\n\t\tLaravel的Model比CI的Model内容可多很多.里面包含了查询数据库等等的函数实现.\n\t\t8.Eloguent里面有Demo\n\n\n\t创建模型\n\t\t手动模式创建:\n\t\t\t例如新创建: my_laravel/app/Demo.php内容如下:\t\t\n\n\t\t\t修改Model的文件目录,新创建 my_laravel/app/Model 在Model里面创建Model文件.\n\t\t\t并在 文件头<?php namespace App\\Model;//指定目录即可\t\t\t\n\n\t\t\t<?php namespace App;\n\t\t\t\tuse Illuminate\\Database\\Eloquent\\Model;\n\t\t\t\tclass Demo extends Model {\n\t\t\t\t    use Authenticatable, CanResetPassword;\n\t\t\t\t    /**使用的数据库表模式。*/\n\t\t\t\t    protected $table = 'demo';\n\n\t\t\t\t    /**属性可分配。*/\n\t\t\t\t    //表示那些字段是可以被laravel填写的.\n\t\t\t\t    protected $fillable = ['name', 'email', 'password'];\n\n\t\t\t\t    //表示这些字段是被保护的,存储数据库时不填写此数据\n\t\t\t\t    protected $guarded = ['demo_id'];\n\n\t\t\t\t    /** 排除在模型的JSON形式的属性。*/\n\t\t\t\t    protected $hidden = ['password', 'remember_token'];\n\n\t\t\t\t     //修改默认的 id 主键\n\t\t\t\t    protected $primaryKey = 'demo_id';\n\t\t\t\t\t\n\t\t\t\t    //不使用时间戳_见下面创建模型\n\t\t\t\t    public $timestamps = false;\n\t\t\t\t}\n\t\t\n\t\t命令模型创建:\n\t\t\t使用Terminal定位(cmd)目录文件到 my_laravel 目录下 使用artisan命令\n\t\t\t\tphp artisan make:model Demo\n\t\t\t\t创建在 my_laravel/app/Demo.php 文件如下:\n\n\t\t\t\t<?php namespace App;\n\t\t\t\tuse Illuminate\\Database\\Eloquent\\Model;\n\t\t\t\tclass Demo extends Model {\n\t\t\t\t\t//....\n\t\t\t\t}\n\t\n# <a id=\"环境与部署\"></a>环境与部署\n\n\t.env 环境配置文件.\n\t\t\n\t\t文件目录 my_laravel/.env\n\n\t\t作用到全局的一些参数\n\t\t例如:\n\t\tAPP_ENV=local   全称APP_Envirment 程序环境=local表示环境在本地.server表示运行在服务器.debug需要改成0或false\n\t\tAPP_DEBUG=true  是否在开发模式下.如果true,则是开发模式,出错时会报错,并会尽量多打印信息.0或false表示正式模式.\n\t\tAPP_KEY=asdf    应用的加密key,标记唯一性,例如框架需要加密时,有可能会使用到,当做参数使用.\n\t\t\n\t\tDB_HOST=localhost 数据库地址 这些参数会被 database.php 等配置文件调用.\n\t\tDB_DATABASE=my_laravel 数据库名\n\t\tDB_USERNAME=root  数据库用户名\n\t\tDB_PASSWORD=root  数据库密码\n\n\t\tCACHE_DRIVER=file   缓存使用文件形式\n\t\tSESSION_DRIVER=file Session使用文件形式\n\t\tQUEUE_DRIVER=sync   队列使用同步\n\n\t\tMAIL_DRIVER=smtp      邮件配置\n\t\tMAIL_HOST=mailtrap.io\n\t\tMAIL_PORT=2525\n\t\tMAIL_USERNAME=null\n\t\tMAIL_PASSWORD=null\n\t\t\n\n\t\t先创建数据库 见下面的\"数据库CMD\"\n\t\t//路由中,尝试连接数据库\n\t\tRoute::get('myDatabase',function(){\n\t\t    $name = DB::connection()->getDatabaseName();\n\t\t    echo $name; //打印出 数据库名 my_laravel 表示成功 如果遇见PDOException错误见\"我遇到的错误\"中的解决方法\n\t\t});\n\t\n\t数据库\n\t\tmy_laravel/config/database.php\n\t\t\n\t\t一般不用配置当前文件,配置 my_laravel/.env 文件即可.\n\n\t\t'default' => 'mysql' 默认使用的数据库\n\t\t'connections' => [\n\t\t\t'mysql' => [\n\t\t\t\t'driver'    => 'mysql',\n\t\t\t\t//引用my_laravel/.env 环境配置文件的配置,如果没有找到则使用默认的'localhost'.\n\t\t\t\t'host'      => env('DB_HOST', 'localhost'), \n\t\t\t\t'database'  => env('DB_DATABASE', 'forge'),\n\t\t\t\t'username'  => env('DB_USERNAME', 'forge'),\n\t\t\t\t'password'  => env('DB_PASSWORD', ''),\n\t\t\t\t'charset'   => 'utf8',\n\t\t\t\t'collation' => 'utf8_unicode_ci',\n\t\t\t\t'prefix'    => '', //前缀\n\t\t\t\t'strict'    => false,\n\t\t\t],\n\t\t]\n\n\tSession\n\n\t\t配置文件 my_laravel/config/session.php 一般此文件不需要配置\n\n\t\t\t//可支持配置 \"file\", \"cookie\", \"database\", \"apc\",\"memcached\", \"redis\", \"array\"\n\t\t\t'driver' => env('SESSION_DRIVER', 'file'),\n\t\t\n\tdown/up\n\t\t一整个程序停止解析(使用场景如,网站遇到攻击,网站需要维护等)\n\t\t配置后访问网站的所有地址都会被跳转到 my_laravel/resources/views/errors/503.blade.php 网站全部连接转向此文件.\n\n\t\t\t//停止服务,\n\t\t\tphp artisan down \n\t\t\t\n\t\t\t//恢复服务\n\t\t\tpup artisan up \n\t\n\t自定义配置属性\n\t\t1.在.env中增加属性\n\t\t\tMY_DIY_CONFIG='test_env'\n\t\t2.在config/app.php内容里增加属性(参数1为.env文件下的配置名,如果未配置.则使用参数2默认值)\n\t\t\t'my_diy_config' =>env('MY_DIY_CONFIG','test_app'),\n\t\t3.使用 例如在Controllers中使用:\n\t\t\tuse Illuminate\\Support\\Facades\\Config;//引入包\n\t\t\t//code...\n\t\t\t$diyConfig = Config::get('app.my_diy_config');//使用\n\t\t\t//code...\n\t\n\t自动加载类\n\t\t使用场景:当某一个方法函数经常会被多个不同的类调用时.可做成自动加载的类,减少代码编写量\n\t\t1.创建文件 例如:在app/Libraries/function/functions.php (自定义)里面有如下代码:\n\t\t\t<?php \n\t\t\tfuncion abc(){\n\t\t\t\treturn 'abc';\n\t\t\t}\n\t\t2.在工程 /bootstrap/autoload.php 中增加如下代码(对应自定义的文件目录):\n\t\t\trequire __DIR__.'/../app/Libraries/function/functions.php';\n\t\t3.使用 例如在Controllers中使用\n\t\t\t直接使用方法名调用: $data = abc();\n\t\t\n\t\t\n# <a id=\"数据库\"></a>数据库\n\n\t与数据库交互的机制.\n\t\thttp://www.golaravel.com/laravel/docs/5.0/eloquent/\n\t\n\t目录my_laravel/vendor/laravel/framework/src/Illuminate/Database/Eloquent/包含多文件,Model属于此包\n\t\n\t\n\tEloguent 使用(增删改查):\n\t\t配置数据库信息\n\t\t\tmy_laravel/.env\n\t\t\t\tDB_HOST=localhost\n\t\t\t\tDB_DATABASE=my_laravel\n\t\t\t\tDB_USERNAME=root\n\t\t\t\tDB_PASSWORD=root\n\n\t\t配置路由: \n\t\t\t//http://localhost:8888/myDatabase 查看连接数据库是否成功\n\t\t\tRoute::get('myDatabase',function(){\n\t\t\t    $name = DB::connection()->getDatabaseName();\n\t\t\t    echo $name;\n\t\t\t});\n\n\t\t\t//http://localhost:8888/myDatabase/add 增\n\t\t\tRoute::get('myDatabase/add',function(){\n\t\t\t    $user = new App\\User();\n\t\t\t    $user->userAdd();\n\t\t\t    return $user->userRead();\n\t\t\t});\n\n\t\t\t//http://localhost:8888/myDatabase/delete 删\n\t\t\tRoute::get('myDatabase/delete',function(){\n\t\t\t    $user = new App\\User();\n\t\t\t    $user->userDelete();\n\t\t\t    return $user->userRead();\n\t\t\t});\n\n\t\t\t//http://localhost:8888/myDatabase/update 改\n\t\t\tRoute::get('myDatabase/update',function(){\n\t\t\t    $user = new App\\User();\n\t\t\t    $user->userDelete();\n\t\t\t    return $user->userRead();\n\t\t\t});\n\n\t\t\t//http://localhost:8888/myDatabase/read 查\n\t\t\tRoute::get('myDatabase/read',function(){\n\t\t\t    $user = new App\\User();\n\t\t\t    return $user->userRead();\n\t\t\t});\n\n\t\t\t//http://localhost:8888/myDatabase/read_dd 查\n\t\t\tRoute::get('myDatabase/read_dd',function(){\n\t\t\t    $user = new App\\User();\n\t\t\t    $users = $user->all();\n\t\t\t    dd($users); // dd=> var_dump() ; and die(); 打印出数据类型与信息.\n\t\t\t    // $users->toArray();//转成数组\n\t\t\t    // $users->all();//返回数据库原型 , 默认调用了tojson();\n\t\t\t    // return $user->userRead();\n\n\t\t\t    //数组\n\t\t\t    $arr = ['one','two','three'];\n\t\t\t    $collection = collect($arr);\n\t\t\t    //查找数组是否包含对应的值\n\t\t\t    $bool = $collection->contains('one');\n\t\t\t    //取数组的前2个数据\n\t\t\t    $res = $collection->take(2);\n\t\t\t    //取后面两个数据\n\t\t\t    $res = $collection->take(-2);\n\n\t\t\t    //键值对\n\t\t\t    $arr = ['one'=>1,'two'=>2,'three'=>3];\n\t\t\t    $collection = collect($arr);\n\t\t\t    //查找是否有对应的键key\n\t\t\t    $bool = $collection->has('one');\n\n\t\t\t    return $collection->all();\n\t\t\t});\n\n\t\t创建模型:\n\n\t\t\t<?php namespace App;\n\n\t\t\tuse Illuminate\\Auth\\Authenticatable;\n\t\t\tuse Illuminate\\Database\\Eloquent\\Model;\n\t\t\tuse Illuminate\\Auth\\Passwords\\CanResetPassword;\n\t\t\tuse Illuminate\\Contracts\\Auth\\Authenticatable as AuthenticatableContract;\n\t\t\tuse Illuminate\\Contracts\\Auth\\CanResetPassword as CanResetPasswordContract;\n\n\t\t\t//Laravel的Model已经实现了一些对数据库的操作,如增删改查.\n\t\t\tclass User extends Model implements AuthenticatableContract, CanResetPasswordContract {\n\t\t\t\tuse Authenticatable, CanResetPassword;\n\t\t\t\t\n\t\t\t\t//数据库名 重写Model的数据库名\n\t\t\t\tprotected $table = 'users';\n\n\t\t\t\t//表示那些数据库字段是可以被laravel填写.\n\t\t\t\tprotected $fillable = ['username', 'age'];\n\n\t\t\t\t//表示这些字段是被保护的,存储数据库时不填写此数据(主键自动增长)\n\t\t\t\tprotected $guarded = ['demo_id'];\n\t\t\t\t\n\t\t\t\t// 排除在模型的JSON形式的属性。如调用$this->all()生成的Json不生成在Json中的字段名\n\t\t\t\tprotected $hidden = [];\n\n\t\t\t\t//修改默认的 id 主键名称\n\t\t\t\tprotected $primaryKey = 'user_id';\n\n\t\t\t\t////model自带的方法 public static function all($columns = array('*')) 函数\n\t\t\t\t//详情见 my_laravel/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Model.php\n\t\t\t\t//查询数据《-----------------------\n\t\t\t\tpublic function userRead(){\n\t\t\t\t\t//查询出所有数据\n\t\t\t\t\t//return $this->all();\n\n\t\t\t\t\t//查找user_id为1的数据 如果没有打到数据,返回的空数据\n\t\t\t\t\t//return $this->find(1);\n\t\t\t\t\t//如没有找到数据直接抛异常.查id为4的数据\n\t\t\t\t\t//return $this->findOrFail(4);\n\n\t\t\t\t\t//返回对应条件的数据 select * from users where username='comtu';\n\t\t\t\t\t//return $this->where('username','comtu')->get();\n\n\t\t\t\t\t//返回对应条件的数据 select * from users where user_id>1; \n\t\t\t\t\t// return $this->where('user_id','>',1)->get();\n\n\t\t\t\t\t//查询出所有数据 等同于 $this->all();\n\t\t\t\t\treturn $this->get();\n\t\t\t\t}\n\n\t\t\t\t//insert数据时model基类默认数据库中有时间戳字段,更新时间,创建时间\n\t\t\t\t//处理方式有两种,一种是为数据库中增加这两个字段`updated_at`, `created_at`\n\t\t\t\t//另一种是取消Model中的数据库时间戳字段如下:\n\t\t\t\tpublic $timestamps = false;\n\n\t\t\t\t//增加数据《-----------------------\n\t\t\t\tpublic function userAdd(){\n\n\t\t\t\t\t//增加数据方式1 \n\t\t\t\t\t//$this->username = 'user00000';\n\t\t\t\t\t//$this->age = 1;\n\t\t\t\t\t//$this->save();\n\t\t\t\t\t//增加数据后如果表是自动增长的可获取到增加后的id\n\t\t\t\t\t$id = $this->user_id;//新增加后的id值\n\n\t\t\t\t\t//增加数据方式2  批量赋值 \n\t\t\t\t\t//protected $fillable = ['username', 'age']; //需要有配置自动填充的字段\n\t\t\t\t\t$user_data = ['username'=>'user111','age'=>256];\n\t\t\t\t\t$this->fill($user_data);\n\t\t\t\t\t$this->save();\n\t\t\t\t}\n\n\t\t\t\t//更新数据《-----------------------\n\t\t\t\tpublic function userUpdate(){\n\t\t\t\t\t//修改对应的数据 方式一\n\t\t\t\t\t//$user = $this->find(1);//查询-》保存\n\t\t\t\t\t//$user->username = 'comtu0000';\n\t\t\t\t\t//$user->age = '512';\n\t\t\t\t\t//$user->save();\n\n\t\t\t\t\t//修改对应的数据 方式二\n\t\t\t\t\t$users = $this->where('user_id','<','3'); //查询-》更新\n\t\t\t\t\t//更新不需要调用save()\n\t\t\t\t\t$users->update(['username'=>'comtu1111','age'=>1024]);\n\t\t\t\t}\n\n\t\t\t\t//删除数据《-----------------------\n\t\t\t\tpublic function userDelete(){\n\t\t\t\t\t$user = $this->find(3);//查询-》删除\n\t\t\t\t\t$user->dalete();\n\t\t\t\t}\n\t\t\t}\n\t\n\t\tDemo:\n\t\t\t模型:\n\t\t\t\t<?php namespace App\\Model;\n\t\t\t\tuse Illuminate\\Database\\Eloquent\\Model;\n\n\t\t\t\tclass Person extends Model  {\n\n\t\t\t\t     //数据库表\n\t\t\t\t    protected $table = 'person';\n\t\t\t\t    //修改默认的 id 主键\n\t\t\t\t    protected $primaryKey = 'pid';\n\n\t\t\t\t    //表示那些字段是可以被laravel填写的.fill()\n\t\t\t\t    protected $fillable = ['name', 'sex','age','salary','occ_id','dep_id'];\n\n\t\t\t\t    //表示这些字段是被保护的,存储数据库时不填写此数据\n\t\t\t\t    protected $guarded = ['pid'];\n\n\t\t\t\t    //生成JSON时隐藏的字段\n\t\t\t\t    protected $hidden = [];\n\n\t\t\t\t    //insert数据时model基类默认数据库中有时间戳字段,更新时间,创建时间\n\t\t\t\t    //处理方式有两种,一种是为数据库中增加这两个字段`updated_at`, `created_at`\n\t\t\t\t    //另一种是取消Model中的数据库时间戳字段如下:\n\t\t\t\t    public $timestamps = false;\n\n\t\t\t\t    //表结构对应关系 occupation另外一张表app/model/occupation.php\n\t\t\t\t    public function occupation(){\n\t\t\t\t\treturn $this->hasOne('App\\Model\\occupation', 'occ_id', 'occ_id');\n\t\t\t\t    }\n\n\t\t\t\t    //表结构对应关系\n\t\t\t\t    public function department(){\n\t\t\t\t\treturn $this->hasOne('App\\Model\\department', 'dep_id', 'dep_id');\n\t\t\t\t    }\n\t\t\t\t}\n\n\t\t\t控制器:\n\t\t\t\tapp/Http/Controllers/DemoDataBaseController.php\n\t\t\t\t\t<?php namespace App\\Http\\Controllers;\n\t\t\t\t\tuse App\\Http\\Requests;\n\t\t\t\t\tuse App\\Http\\Controllers\\Controller;\n\n\t\t\t\t\tuse App\\Model\\Occupation;\n\t\t\t\t\tuse App\\Model\\Department;\n\t\t\t\t\tuse App\\Model\\Person;\n\t\t\t\t\tuse Illuminate\\Support\\Facades\\Input;\n\t\t\t\t\tuse Illuminate\\Support\\Facades\\Request;\n\t\t\t\t\tuse Illuminate\\Support\\Facades\\Session;\n\n\n\t\t\t\t\tclass DemoDataBaseController extends Controller{\n\n\t\t\t\t\t    public function index() {\n\t\t\t\t\t\t//$data['person'] = Person::find(array('1'));//简单条件查询 select * from person where id = 1;\n\t\t\t\t\t\t//$data['person'] = Person::whereRaw('pid > 1 and salary > 1700')->get();//条件查询全部\n\n\t\t\t\t\t\t//连表查询~~需要在Person里面配置表的关系\n\t\t\t\t\t\t$data['person'] = Person::with('occupation', 'department')->paginate(10);//连表查询并 paginate分页功能,每页10条.\n\t\t\t\t\t\t//$data['person'] = Person::with('occupation','department')->get();//连表查询 //只能使用get,all获取不到数据\n\t\t\t\t\t\t//<?php foreach ($person as $v):?>//视图中获取连表的数据\n\t\t\t\t\t\t//<?php echo $v['occupation']->name;?> \n\t\t\t\t\t\t//<?php endforeach;?>\n\t\t\t\t\t\t$data['count']  =  Person::all()->count();\n\t\t\t\t\t\t$data['occupation'] = Occupation::get();//查询全部\n\t\t\t\t\t\t$data['department'] = Department::all();//查询全部\n\n\t\t\t\t\t\treturn view('demo.demo_index_database',$data);\n\t\t\t\t\t    }\n\n\t\t\t\t\t    public function addPerson(){\n\t\t\t\t\t\t$data['occupation'] = Occupation::get();//查询全部\n\t\t\t\t\t\t$data['department'] = Department::all();//查询全部\n\t\t\t\t\t\treturn view('demo.demo_add_update_database',$data);\n\t\t\t\t\t    }\n\n\t\t\t\t\t    public function postAddPerson(){\n\t\t\t\t\t\t$person = new Person();\n\t\t\t\t\t\t//增加数据方式2\n\t\t\t\t\t\t$person->name = Request::input('name', 'default');//获取Post请求的数据\n\t\t\t\t\t\t$person->age = Request::input('age', 20);\n\t\t\t\t\t\t$person->sex = Request::input('sex', 0);\n\t\t\t\t\t\t$person->salary = Request::input('salary', 1800);\n\t\t\t\t\t\t$person->occ_id = Request::input('occ_id');\n\t\t\t\t\t\t$person->dep_id = Request::input('dep_id');\n\t\t\t\t\t\t$person->save();\n\t\t\t\t\t\t//$person->pid; 可获取到增加后的自动增长id.\n\t\t\t\t\t\treturn redirect('myDatabase/Demo');\n\t\t\t\t\t    }\n\n\t\t\t\t\t    public function deletePerson($rid,$_token = ''){\n\t\t\t\t\t\tif(Session::token() !== $_token) {\n\t\t\t\t\t\t    echo '非法请求';\n\t\t\t\t\t\t    return;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$person = Person::find($rid);\n\t\t\t\t\t\t$person->delete();\n\t\t\t\t\t\treturn redirect('myDatabase/Demo');\n\t\t\t\t\t    }\n\n\t\t\t\t\t    //http://localhost/myDatabase/DemoUpdatePerson?pid=6&_token=7jcZiP2wv0nIpxrA4KUqn9sBRaU7YXpcc8M0zrue\n\t\t\t\t\t    public function updatePerson(){\n\t\t\t\t\t\t$_token = Input::get('_token');//获取get请求的数据\n\t\t\t\t\t\tif(Session::token()!=$_token){\n\t\t\t\t\t\t    echo '非法请求';\n\t\t\t\t\t\t    return ;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$pid = Input::get('pid');\n\n\t\t\t\t\t\t$data['person'] = Person::find($pid);\n\t\t\t\t\t\t$data['occupation'] = Occupation::all();//查询全部\n\t\t\t\t\t\t$data['department'] = Department::get();//查询全部\n\t\t\t\t\t\treturn view('demo.demo_add_update_database',$data);\n\t\t\t\t\t    }\n\n\t\t\t\t\t    public function postUpdatePerson(){\n\t\t\t\t\t\t$person = Person::find(Request::input('pid'));\n\t\t\t\t\t\tif(!$person){\n\t\t\t\t\t\t    echo '修改错误';\n\t\t\t\t\t\t    return;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//修改数据方式\n\t\t\t\t\t\t$person->name = Request::input('name');\n\t\t\t\t\t\t$person->age = Request::input('age');\n\t\t\t\t\t\t$person->sex = Request::input('sex');\n\t\t\t\t\t\t$person->salary = Request::input('salary');\n\t\t\t\t\t\t$person->occ_id = Request::input('occ_id');\n\t\t\t\t\t\t$person->dep_id = Request::input('dep_id');\n\t\t\t\t\t\t$person->save();\n\t\t\t\t\t\treturn redirect('myDatabase/Demo');\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\t\t\t\n\t\t\t路由:\n\t\t\t\tapp/Http/routes.php\n\n\t\t\t\t\t//显示列表 http://localhost/myDatabase/Demo\n\t\t\t\t\tRoute::get('myDatabase/Demo','DemoDataBaseController@index');\n\t\t\t\t\t//增加数据\n\t\t\t\t\tRoute::get('myDatabase/DemoAddPerson','DemoDataBaseController@addPerson');\n\t\t\t\t\tRoute::post('myDatabase/DemoAddPerson','DemoDataBaseController@postAddPerson');\n\t\t\t\t\t//删除数据 使用函数参数方式并参数使用正则匹配.\n\t\t\t\t\tRoute::get('myDatabase/DemoDeletePerson/{pid}/{_token}','DemoDataBaseController@deletePerson')->where(['pid' => '[0-9]+']);\n\t\t\t\t\t//更新数据 此处使用获取get请求的方式获取数据\n\t\t\t\t\tRoute::get('myDatabase/DemoUpdatePerson','DemoDataBaseController@updatePerson');\n\t\t\t\t\tRoute::post('myDatabase/DemoUpdatePerson','DemoDataBaseController@postUpdatePerson');\n\n\t\t\t\t\t//scrf验证\n\t\t\t\t\tRoute::filter('csrf',function(){\n\t\t\t\t\t    if (Session::token() !== Input::get('_token')) {\n\t\t\t\t\t\tthrow new Illuminate\\Session\\TokenMismatchException;\n\t\t\t\t\t    }\n\t\t\t\t\t});\n\n\t\t\t视图:\n\t\t\t\tresources/views/demo/demo_index_database.blade.php 显示列表\n\t\t\t\t\t<html>\n\t\t\t\t\t<head>\n\t\t\t\t\t    <meta charset=\"utf-8\">\n\t\t\t\t\t    <title>MyView</title>\n\t\t\t\t\t    <link rel=\"stylesheet\" href=\"/css/style.css\">\n\t\t\t\t\t</head>\n\t\t\t\t\t<body>\n\t\t\t\t\t@include('components.myHead')\n\n\t\t\t\t\t<h1>resources/views/demo_database.blade.php</h1>\n\n\t\t\t\t\t调用函数@{{csrf_token}} 跨站点请求伪造保护码\n\t\t\t\t\t{{csrf_token()}} 等同于 <?php echo csrf_token();?>\n\n\t\t\t\t\t<table   border=\"1px\" cellpadding=\"2px\"  cellspacing=\"1px\" bgcolor=\"#FFFFF0\">\n\t\t\t\t\t    <tr align=\"center\">\n\t\t\t\t\t\t<td>pid(count:{{$count}})</td>\n\t\t\t\t\t\t<td>name</td>\n\t\t\t\t\t\t<td>age</td>\n\t\t\t\t\t\t<td>sex</td>\n\t\t\t\t\t\t<td>salary</td>\n\t\t\t\t\t\t<td>occ_id</td>\n\t\t\t\t\t\t<td>dep_id</td>\n\t\t\t\t\t\t<td>操作</td>\n\t\t\t\t\t    </tr>\n\t\t\t\t\t    @foreach($person as $p)\n\t\t\t\t\t    <tr align=\"center\">\n\t\t\t\t\t\t<td>{{$p->pid}}</td>\n\t\t\t\t\t\t<td>{{$p->name}}</td>\n\t\t\t\t\t\t<td><?php echo $p->age?></td>\n\t\t\t\t\t\t<td>{{$p->sex==0?'男':'女'}}</td>\n\t\t\t\t\t\t<td>{{$p->salary}}</td>\n\t\t\t\t\t\t<td>{{$p->occupation->name}}</td><!--连表查询,预载入的关联对象-->\n\t\t\t\t\t\t<td>{{$p->department->name}}</td>\n\t\t\t\t\t\t<td><a href=\"{{url('myDatabase/DemoUpdatePerson?pid='.$p->pid.'&_token='.csrf_token())}}\">修改</a> &nbsp <a href=\"{{url('myDatabase/DemoDeletePerson').'/'.$p->pid .'/'.csrf_token()}}\">删除</a></td>\n\t\t\t\t\t    </tr>\n\t\t\t\t\t    @endforeach\n\n\t\t\t\t\t    @if($person->render())\n\t\t\t\t\t    <tr ><td colspan=\"9\" align=\"center\" width=\"100%\"><?php echo $person->render(); ?><!--分页--></td></tr>\n\t\t\t\t\t    @endif\n\t\t\t\t\t</table>\n\n\t\t\t\t\t<div style=\"clear: both\"></div>\n\n\t\t\t\t\t<a href=\"{{url('myDatabase/DemoAddPerson')}}\">增加</a>\n\n\t\t\t\t\t<hr>\n\n\t\t\t\t\t</body>\n\t\t\t\t\t</html>\n\t\t\t\t\n\t\t\t\tresources/views/demo/demo_add_update_database.blade.php 增加/修改页\n\t\t\t\t\t<html>\n\t\t\t\t\t<head>\n\t\t\t\t\t    <meta charset=\"utf-8\">\n\t\t\t\t\t    <title>{{empty($person)?'增加':'更新'}}数据</title>\n\t\t\t\t\t    <link rel=\"stylesheet\" href=\"/css/style.css\">\n\t\t\t\t\t</head>\n\t\t\t\t\t<body>\n\n\t\t\t\t\t<form action=\"{{empty($person)?url('myDatabase/DemoAddPerson'):url('myDatabase/DemoUpdatePerson')}}\" method=\"post\" >\n\t\t\t\t\t    <input type=\"hidden\" name=\"_token\" value=\"{{csrf_token()}}\">\n\t\t\t\t\t    <?php echo empty($person)?'':'<input type=\"hidden\" name=\"pid\" value=\"'.$person->pid.'\">' ;?>\n\t\t\t\t\t    <table border=\"1px\" cellpadding=\"2px\"  cellspacing=\"1px\" bgcolor=\"#FFFFF0\">\n\t\t\t\t\t\t<tr><td>名称</td><td><input type=\"text\" name=\"name\" value=\"{{empty($person)?'':$person->name}}\"/></td></tr>\n\t\t\t\t\t\t<tr><td>年龄</td><td>\n\t\t\t\t\t\t\t<select name=\"age\" >\n\t\t\t\t\t\t\t    @for ($i = 1; $i <= 110; $i++)\n\t\t\t\t\t\t\t\t<option value=\"{{ $i }}\" <?php echo $i==(empty($person)?24:$person->age) ?'selected=\"selected\"':''?>>{{ $i }}</option>\n\t\t\t\t\t\t\t    @endfor\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t    </td></tr>\n\t\t\t\t\t\t<tr><td>性别</td><td>\n\t\t\t\t\t\t\t<select name=\"sex\">\n\t\t\t\t\t\t\t    <option value=\"0\" <?php echo empty($person)?'selected=\"selected\"':$person->sex==0?'selected=\"selected\"':''?>>男</option>\n\t\t\t\t\t\t\t    <option value=\"1\" <?php echo empty($person)?'':$person->sex==1?'selected=\"selected\"':''?>>女</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t    </td></tr>\n\t\t\t\t\t\t<tr><td>薪资</td><td><input type=\"text\" name=\"salary\" value=\"{{empty($person)?'':$person->salary}}\" /></td></tr>\n\t\t\t\t\t\t<tr><td>职业</td><td>\n\t\t\t\t\t\t\t<select name=\"occ_id\">\n\t\t\t\t\t\t\t    @for($i = 0 ; $i< count($occupation);$i++)\n\t\t\t\t\t\t\t\t<option value=\"{{$occupation[$i]->occ_id}}\" <?php echo empty($person)?'':$occupation[$i]->occ_id==($person->occ_id)?'selected=\"selected\"':''?>>{{$occupation[$i]->name}}</option>\n\t\t\t\t\t\t\t    @endfor\n\t\t\t\t\t\t\t\t{{--@foreach($occupation as $occ)--}}\n\t\t\t\t\t\t\t\t{{--<option   value=\"{{$occ->occ_id}}\" >{{$occ->name}}</option>--}}\n\t\t\t\t\t\t\t\t{{--@endforeach--}}\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t    </td></tr>\n\t\t\t\t\t\t<tr><td>部门</td><td>\n\t\t\t\t\t\t\t<select name=\"dep_id\" >\n\t\t\t\t\t\t\t    @for($i = 0 ; $i< count($department);$i++)\n\t\t\t\t\t\t\t\t<option value=\"{{$department[$i]->dep_id}}\" <?php echo empty($person)?'':$department[$i]->dep_id==($person->dep_id)?'selected=\"selected\"':''?>>{{$department[$i]->name}}</option>\n\t\t\t\t\t\t\t    @endfor\n\t\t\t\t\t\t\t    {{--@foreach($department as $dep)--}}\n\t\t\t\t\t\t\t\t{{--<option value=\"{{$dep->dep_id}}\" >{{$dep->name}}</option>--}}\n\t\t\t\t\t\t\t    {{--@endforeach--}}\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t    </td></tr>\n\t\t\t\t\t\t<tr><td colspan=\"2\" align=\"center\"><input type=\"submit\" value=\"{{empty($person)?'增加':'更新'}}\">&nbsp<input type=\"reset\" value=\"重置\"></td></tr>\n\t\t\t\t\t    </table>\n\t\t\t\t\t</form>\n\n\t\t\t\t\t</body>\n\t\t\t\t\t</html>\n\n# <a id=\"请求\"></a>请求\n\n\tDemo:\n\t\t控制器:\n\t\t\tapp/Http/Controlers/DemoMyRequestController.php \n\t\t\t\t<?php namespace App\\Http\\Controllers;\n\n\t\t\t\tuse App\\Http\\Requests;\n\t\t\t\tuse App\\Http\\Controllers\\Controller;\n\n\t\t\t\tuse Illuminate\\Support\\Facades\\Input;\n\t\t\t\tuse Illuminate\\Support\\Facades\\Request;\n\t\t\t\tuse Illuminate\\Support\\Facades\\Session;\n\n\t\t\t\tclass DemoMyRequestController extends Controller{\n\n\t\t\t\t    //请求\n\t\t\t\t    public function myrequest(){\n\t\t\t\t\t//获取表单发送过来的所有数据,不管是get,post还是其它请求的数据.\n\t\t\t\t\t$input = Request::all();//返回json数据\n\t\t\t\t\tvar_dump($input);\n\t\t\t\t\techo '<br>';\n\n\t\t\t\t\t$value = Request::query();//获取get请求?后面的所有参数\n\t\t\t\t\tvar_dump($value);\n\t\t\t\t\techo '<br>';\n\t\t\t\t\t$value = Request::query('name');//获取get请求后面的指定参数\n\t\t\t\t\tvar_dump($value);\n\t\t\t\t\techo '<br>';\n\n\t\t\t\t\t//get请求方式,如果没有name键则取默认值comtu\n\t\t\t\t\t$value = Request::get('name','comtu');\n\t\t\t\t\tvar_dump($value);\n\t\t\t\t\techo '<br>';\n\n\t\t\t\t\t//-----判断-------\n\t\t\t\t\t//判断参数是否存在返回布尔值\n\t\t\t\t\t$bool = Request::has('name');\n\t\t\t\t\tvar_dump($bool);\n\t\t\t\t\techo '<br>';\n\n\t\t\t\t\t//http://localhost/myrequest?name=&age=11\n\t\t\t\t\t//检查是否存在键,有则返回true,不检查键对应的值是否存在.\n\t\t\t\t\t$bool = Request::exists('name');\n\t\t\t\t\tvar_dump($bool);\n\t\t\t\t\techo '<br>';\n\n\t\t\t\t\t//-------请求检索-------\n\t\t\t\t\t//过滤值,只取对应的键值\n\t\t\t\t\t$value = Request::only('name');\n\t\t\t\t\tvar_dump($value);\n\t\t\t\t\techo '<br>';\n\t\t\t\t\t$value = Request::only('name','age');//如果有多个参数,则只取这两个值\n\t\t\t\t\tvar_dump($value);\n\t\t\t\t\techo '<br>';\n\n\t\t\t\t\t//过滤值,除了对应的键不取,其它数据获取,用法与only类似\n\t\t\t\t\t$value = Request::except('name');\n\t\t\t\t\tvar_dump($value);\n\t\t\t\t\techo '<br>';\n\n\t\t\t\t\t//-----------url---------\n\t\t\t\t\t//返回请求的url前缀_不包括参数\n\t\t\t\t\t$url = Request::url();\n\t\t\t\t\tvar_dump($url);\n\t\t\t\t\techo '<br>';\n\n\t\t\t\t\t//返回请求的全部url_包含参数\n\t\t\t\t\t$url = Request::fullUrl();\n\t\t\t\t\tvar_dump($url);\n\t\t\t\t\techo '<br>';\n\n\t\t\t\t\t//----------请求历史----------\n\t\t\t\t\t//将请求的所有数据存储到session数据中.\n\t\t\t\t\tRequest::flash();\n\t\t\t\t\t//Request::flashOnly('name');//只存储指定的键值\n\t\t\t\t\t//Request::flashExcept('name');//除了指定的键值,其它都存储\n\n\t\t\t\t\t//返回上一次请求的数据,可在不同页面中获取,前提是需要调用了Request::flash()\n\t\t\t\t\t$value = Request::old();//可用于保存用户提交失败时恢复历史数据的功能\n\t\t\t\t\tvar_dump($value);\n\n\t\t\t\t\t/*\n\t\t\t\t\t请求: http://localhost/myrequest?name=comtu&age=11\n\n\t\t\t\t\tarray(2) { [\"name\"]=> string(5) \"comtu\" [\"age\"]=> string(2) \"11\" }\n\t\t\t\t\tarray(2) { [\"name\"]=> string(5) \"comtu\" [\"age\"]=> string(2) \"11\" }\n\t\t\t\t\tstring(5) \"comtu\"\n\t\t\t\t\tstring(5) \"comtu\"\n\t\t\t\t\tbool(true)\n\t\t\t\t\tbool(true)\n\t\t\t\t\tarray(1) { [\"name\"]=> string(5) \"comtu\" }\n\t\t\t\t\tarray(2) { [\"name\"]=> string(5) \"comtu\" [\"age\"]=> string(2) \"11\" }\n\t\t\t\t\tarray(1) { [\"age\"]=> string(2) \"11\" }\n\t\t\t\t\tstring(26) \"http://localhost/myrequest\"\n\t\t\t\t\tstring(44) \"http://localhost/myrequest?age=11&name=comtu\"\n\t\t\t\t\tarray(2) { [\"name\"]=> string(5) \"comtu\" [\"age\"]=> string(2) \"11\" }\n\t\t\t\t\t*/\n\n\t\t\t\t\t/*\n\t\t\t\t\t  请求http://localhost/myrequest?nae=comtu&age=11\n\t\t\t\t\tarray(2) { [\"nae\"]=> string(5) \"comtu\" [\"age\"]=> string(2) \"11\" }\n\t\t\t\t\tarray(2) { [\"nae\"]=> string(5) \"comtu\" [\"age\"]=> string(2) \"11\" }\n\t\t\t\t\tNULL\n\t\t\t\t\tstring(5) \"comtu\"\n\t\t\t\t\tbool(false)\n\t\t\t\t\tbool(false)\n\t\t\t\t\tarray(1) { [\"name\"]=> NULL }\n\t\t\t\t\tarray(2) { [\"name\"]=> NULL [\"age\"]=> string(2) \"11\" }\n\t\t\t\t\tarray(2) { [\"nae\"]=> string(5) \"comtu\" [\"age\"]=> string(2) \"11\" }\n\t\t\t\t\tstring(26) \"http://localhost/myrequest\"\n\t\t\t\t\tstring(43) \"http://localhost/myrequest?age=11&nae=comtu\"\n\t\t\t\t\tarray(2) { [\"name\"]=> string(5) \"comtu\" [\"age\"]=> string(2) \"11\" }\n\t\t\t\t\t*/\n\t\t\t\t    }\n\n\t\t\t\t    //显示上传页面\n\t\t\t\t    public function uploadFile(){\n\t\t\t\t\treturn view('demo.demo_index_MyRequest');\n\t\t\t\t    }\n\n\t\t\t\t    //提交上传数据\n\t\t\t\t    public function postUploadFile(){\n\t\t\t\t\t//返回post上来的数据 返回数组\n\t\t\t\t\tvar_dump(Request::file());\n\t\t\t\t\techo '<br>'; echo '<br>';\n\n\t\t\t\t\t//返回对象\n\t\t\t\t\tvar_dump(Request::file('my_file'));\n\t\t\t\t\techo '<br>'; echo '<br>';\n\n\t\t\t\t\t//返回布尔值,是否包含文件\n\t\t\t\t\t$bool = Request::hasFile('my_file');\n\t\t\t\t\tvar_dump($bool);\n\t\t\t\t\techo '<br>'; echo '<br>';\n\n\t\t\t\t\t//返回文件大小\n\t\t\t\t\t$size = Request::file('my_file')->getClientSize();\n\t\t\t\t\tvar_dump($size);\n\t\t\t\t\techo '<br>'; echo '<br>';\n\n\t\t\t\t\t//返回上传时的文件名\n\t\t\t\t\t$name = Request::file('my_file')->getClientOriginalName();\n\t\t\t\t\tvar_dump($name);\n\t\t\t\t\techo '<br>'; echo '<br>';\n\n\t\t\t\t\t//返回文件格式\n\t\t\t\t\t$extension = Request::file('my_file')->getClientOriginalExtension();\n\t\t\t\t\tvar_dump($extension);\n\t\t\t\t\techo '<br>'; echo '<br>';\n\n\t\t\t\t\t//判断上传的文件是否有效\n\t\t\t\t\tif (Request::file('my_file')->isValid()){\n\t\t\t\t\t    //移动上传的文件到指定目录 人在public目录下自动创建uploads目录并把文件存储到当前目录中.\n\t\t\t\t\t    $destinationPath = 'uploads/';\n\t\t\t\t\t    Request::file('my_file')->move($destinationPath, uniqid().'.'.$extension); //md5 uniqid 唯一标识\n\t\t\t\t\t}\n\t\t\t\t    }\n\n\n\t\t\t\t}\n\t\t\n\t\t路由:\n\t\t\tapp/Http/routes.php\t\n\n\t\t\t\t//http://localhost/myrequest\n\t\t\t\t//http://localhost/myrequest?name=&age=11\n\t\t\t\t//http://localhost/myrequest?name=comtu&age=11\n\t\t\t\t//http://localhost/myrequest?na2me=comtu&age=11\n\t\t\t\tRoute::any('myrequest','DemoMyRequestController@myrequest');\n\n\t\t\t\t//文件上传\n\t\t\t\tRoute::any('uploadFile','DemoMyRequestController@uploadFile');\n\t\t\t\tRoute::post('uploadFile','DemoMyRequestController@postUploadFile');\n\n\t\t视图:\n\t\t\tresources/views/demo/demo_index_MyRequest.blade.php\n\t\t\t\t<html>\n\t\t\t\t<head>\n\t\t\t\t    <meta charset=\"utf-8\">\n\t\t\t\t    <title>MyView</title>\n\t\t\t\t    <link rel=\"stylesheet\" href=\"/css/style.css\">\n\t\t\t\t</head>\n\t\t\t\t<body>\n\t\t\t\t{{--<form action=\"uploadFile\" method=\"post\" enctype=\"application/x-www-form-urlencoded\">--}}\n\t\t\t\t    <form action=\"uploadFile\" method=\"post\" enctype=\"multipart/form-data\">\n\t\t\t\t    <input type=\"hidden\" name=\"_token\" value=\"{{csrf_token()}}\">\n\t\t\t\t    <fieldset style=\"width:230px\" >\n\t\t\t\t\t<legend>上传文件</legend>\n\t\t\t\t\t选择文件:<input type=\"file\" name=\"my_file\" multiple />  <br />\n\t\t\t\t\t{{--选择文件:<input type=\"file\" name=\"my_file\" />  <br />--}}\n\t\t\t\t\t<input type=\"submit\" value=\"提交\" />\n\t\t\t\t    </fieldset>\n\t\t\t\t</form>\n\t\t\t\t</body>\n\t\t\t\t</html>\n\n# <a id=\"Session\"></a>Session\n\t\n\t方式一:使用文件.(默认)\n\t\t.env文件中配置Session存储方式\n\t\t\tCACHE_DRIVER=file\n\t\t\tSESSION_DRIVER=file\n\t\t\tQUEUE_DRIVER=sync\n\n\t方式二:使用数据库\n\t\t.env文件中配置Session存储方式\n\t\t\tCACHE_DRIVER=file\n\t\t\tSESSION_DRIVER=database\n\t\t\tQUEUE_DRIVER=sync\n\t\t使用PHPStorm自带的lerminal工具或者计算机命令行cmd定位到项目目录下.\n\t\t\n\t\t使用命令生成数据库表:\n\t\t\tphp artisan session:table\n\t\t\t\n\t\t\tE:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel>php artisan session:table\n\n\t\t\t当输出 Migration created successfully!时 \n\t\t\t可查看到database/migrations目录下会新创建一个PHP文件类名为CreateSessionTable\n\n\t\t\t再输入 composer dump-autoload\n\t\t\t\t当输出 Generating autoload files 表示成功.\n\n\t\t\t再输入 php artisan migrate\t\n\t\t\t\t当输出如下表示成功\n\t\t\t\tMigrated: 2015_11_02_092311_create_session_table\n\n\t\t\t查看数据库表多了一个sessions表\n\t\t\t\t里面有id , payload , last_activity 三个字段\n\t\t\t注: 执行php artisan migrate时有异常可查看\"我遇到的错误解决问题\"\n\n\t\t\t\n\t\t\t生成表之后就可以使用Session了`~增删改查都无需要人工控制.\n\n\t控制器\n\t\tapp/Http/Controlers/DemoSessionController.php\n\t\t\t<?php namespace App\\Http\\Controllers;\n\t\t\tuse App\\Http\\Controllers\\Controller;\n\t\t\tuse Illuminate\\Support\\Facades\\Session;\n\t\t\tclass DemoSessionController extends Controller{\n\n\t\t\t    public function session(){\n\t\t\t\t//查看全部Session数据\n\t\t\t\tvar_dump(Session::all());\n\n\t\t\t\t/*\n\t\t\t\t 起初Session就有默认值\n\t\t\t\t_previous : 上一次请求的地址\n\t\t\t\tflash: 保存的数据\n\t\t\t\told:历史数据\n\t\t\t\tnew:新数据\n\t\t\t\t例:\n\t\t\t\t array:3 [▼\n\t\t\t\t  \"_token\" => \"7jcZiP2wv0nIpxrA4KUqn9sBRaU7YXpcc8M0zrue\"\n\t\t\t\t  \"_previous\" => array:1 [▼\n\t\t\t\t    \"url\" => \"http://localhost/uploadFile\"\n\t\t\t\t  ]\n\t\t\t\t  \"flash\" => array:2 [▼\n\t\t\t\t    \"old\" => []\n\t\t\t\t    \"new\" => []\n\t\t\t\t  ]\n\t\t\t\t]\n\t\t\t\t */\n\t\t\t\techo '<br>'; echo '<br>';\n\n\t\t\t\t//增加/修改Session _ 方式一\n\t\t\t\tSession::put('username','comtu');\n\n\t\t\t\t//增加Session _ 方式二\n\t\t\t\tsession(['username'=>'comtu1']);\n\n\t\t\t\t//获取值_不删除\n\t\t\t\t$username = Session::get('username');\n\t\t\t\t//获取值_后删除_只用一次\n\t\t\t\t$username = Session::pull('username');\n\t\t\t\tvar_dump($username);\n\t\t\t\techo '<br>'; echo '<br>';\n\n\t\t\t\t//判断是否存在\n\t\t\t\t$bool = Session::has('username');\n\t\t\t\tvar_dump($bool);\n\n\t\t\t\t//删除Session值\n\t\t\t\t$value = Session::forget('username');\n\t\t\t\tvar_dump($value);\n\t\t\t    }\n\t\t\t}\n\n\t路由\n\t\tapp/Http/routes.php\t\n\t\t\tRoute::any('session','DemoSessionController@session');\n\n# <a id=\"表单验证\"></a>表单验证\n\n\t需要引入use Request,Validator; 包\n\t$validator = Validator::make(数据,规则,自定义错误信息);\n\t$validator->fails();验证表单\n\t$validator->errors();//获取错误信息\n\n\t例:修改8.数据库中的Demo\n\t    public function postAddPerson(){\n\t\t//存储提交数据到Session\n\t\tRequest::flash(); //见9.请求\n\n\t\t//必填 required\n\t\t//长度 between:最小,最大\n\t\t//最小长度 min:4\n\t\t//最大长度 max:16\n\t\t//数字 numeric\n\t\t//唯一性 unique:表名 会自动查询表对应字段是否存在有当前值\n\t\t//检查值是否在table表中column字段中存在 exists:table,column 自动查询table表column字段是否包含值\n\t\t//更多配置 http://laravel-china.org/docs/5.0/validation\n\n\t\t//表单验证请求\n\t\t$rq = Request::all();\n\t\t$rules = [//规则\n\t\t    'name' => 'required|between:4,16|unique:person' ,\n\t\t    'age' => 'required|numeric',\n\t\t    'sex' => 'required|numeric',\n\t\t    'salary' => 'required|numeric',\n\t\t   'occ_id' => 'required|numeric|exists:occupation,occ_id',\n\t\t\t'dep_id' => 'required|numeric|exists:department,dep_id',\n\t\t];\n\t\t$messages = [//自定义错误信息\n\t\t    'required' => 'The :attribute field is required.',\n\t\t    'between' => 'The :attribute must be between :min - :max.'\n\t\t];\n\t\t$validator = Validator::make($rq,$rules,$messages);//可三个参数\n\t\t//$validator = Validator::make($rq,$rules);//可两个参数\n\n\t\tif($validator->fails()){//表单验证\n\t\t    $person = new Person();//重新封装历史数据\n\t\t    $person->name = Request::old()['name'];//表单验证失败,返回用户之前输入的信息\n\t\t    $person->age = Request::old()['age'];\n\t\t    $person->sex = Request::old()['sex'];\n\t\t    $person->salary = Request::old()['salary'];\n\t\t    $person->occ_id = Request::old()['occ_id'];\n\t\t    $person->dep_id = Request::old()['dep_id'];\n\n\t\t    $data ['person'] = $person;\n\t\t    $data['occupation'] = Occupation::get();\n\t\t    $data['department'] = Department::all();\n\t\t    //错误信息 Illuminate\\Support\\MessageBag 对象类型 head($validator->get('key'))获取键值\n\t\t    $data['validator'] = $validator->errors();\n\t\t    return view('demo.demo_add_update_database',$data);\n\t\t}\n\n\t\t$person = new Person();\n\t\t//增加数据方式2\n\t\t$person->name = Request::input('name', 'default');//获取Post请求的数据\n\t\t$person->age = Request::input('age', 20);\n\t\t$person->sex = Request::input('sex', 0);\n\t\t$person->salary = Request::input('salary', 1800);\n\t\t$person->occ_id = Request::input('occ_id');\n\t\t$person->dep_id = Request::input('dep_id');\n\t\t$person->save();\n\t\treturn redirect('myDatabase/Demo');\n\t    }\n\n# <a id=\"中间件\"></a>中间件\n\n\tHTTP 中间件提供一个方便的机制来过滤进入应用程序的 HTTP 请求，\n\t例如，Laravel 默认包含了一个中间件来检验用户身份验证，如果用户没有经过身份验证，\n\t中间件会将用户导向登录页面，然而，如果用户通过身份验证，中间件将会允许这个请求进一步继续前进。\n\n\t当然，除了身份验证之外，中间件也可以被用来执行各式各样的任务，CORS 中间件负责替所\n\t有即将离开程序的响应加入适当的响应头，一个日志中间件可以记录所有传入应用程序的请求。 \n\tLaravel 框架已经内置一些中间件，包括维护、身份验证、CSRF 保护，等等。\n\t所有的中间件都位于 app/Http/Middleware 目录内。\n\n\t使用步骤\n\t\t1.创建中间件\n\t\t\t使用命令: php artisan make:middleware AdminPrivilegeMiddleware\n\t\t\t在app/Http/Middleware文件夹中创建中间件文件\n\t\t\t如:AdminPrivilegeMiddleware.php\n\t\t\t\t<?php\n\t\t\t\tnamespace App\\Http\\Middleware;\n\t\t\t\tuse Closure;\n\t\t\t\tuse Illuminate\\Support\\Facades\\Session;\n\t\t\t\tclass AdminPrivilegeMiddleware\n\t\t\t\t{\n\t\t\t\t    /**\n\t\t\t\t     * Handle an incoming request.\n\t\t\t\t     * @param  \\Illuminate\\Http\\Request  $request\n\t\t\t\t     * @param  \\Closure  $next\n\t\t\t\t     * @return mixed\n\t\t\t\t     */\n\t\t\t\t    public function handle($request, Closure $next)\n\t\t\t\t    {\n\t\t\t\t\t//权限认证\n\t\t\t\t\t$bool = Session::has('admin_user');\n\t\t\t\t\tif(!$bool)\n\t\t\t\t\t    return redirect('admin/privilege/login');\n\t\t\t\t\treturn $next($request);\n\t\t\t\t    }\n\t\t\t\t}\n\t\t2.注册中间件 \n\t\t\t在app/Http目录下的Kernel.php增加如下内容\n\t\t\t protected $routeMiddleware = [\n\t\t\t\t//注册中间件\n\t\t\t\t'auth.admin' => \\App\\Http\\Middleware\\AdminPrivilegeMiddleware::class,\n\t\t\t ];\n\t\t3.使用中间件\n\t\t\t在app/Http目录下的routes.php使用:\n\t\t\t//中间件,权限控制\n\t\t\tRoute::group(['middleware' => 'auth.admin'], function() {\n\t\t\t\tRoute::get('admin/main/index','admin\\MainController@index');\n\t\t\t\tRoute::get('admin/categroy/index','admin\\CategroyController@index');\n\t\t\t}\n\n# <a id=\"哈希\"></a>哈希\n\n\t可用于加密用户的敏感信息或者密码\n\t需要导入 use Illuminate\\Support\\Facades\\Hash; 包\n\t使用方法: \n\t\t$password = '123';\n\t\t$pass = Hash::make($password);//加密\n\t\t$password2 = '123';\n\t\t$bool = Hash:check($pass,$password2);检查是否相同\n\n# <a id=\"辅助函数\"></a>辅助函数\n\n\tarray 数组相关\n\n\t\thead\n\t\t\t$arr = [1,2,3];\n\t\t\t$value = head($arr);//打印1 返回数组第一个元素\n\t\t\n\t\tlast \n\t\t\t$arr = [1,2,3];\n\t\t\t$value = last($arr);//打印3 返回数组第一个元素\n\n\t\tarray_only\n\t\t\t$arr = ['name'=>'comtu','age'=>10,'job'=>'manager'];\n\t\t\t$value = array_only($arr,['name','age']);//返回数组中指定的数据\n\t\t\t//打印 array(2) { [\"name\"]=> string(5) \"comtu\" [\"age\"]=> int(10) } \n\n\t\tarray_first //返回满足条件的第一条数据\n\t\t\t$arr = [10,20,30];\n\t\t\t$value = array_first($arr,function($key,$v){\n\t\t\t\treturn $v >10; \n\t\t\t});\n\t\t\t//打印 20\n\n\t\tarray_add\n\t\t\t$arr = ['name'=>'comtu','age'=>10];\n\t\t\t$value = array_add($arr,'job','manager');//给数组增加字段 \n\t\t\t// 返回 ['name'=>'comtu','age'=>10,'job'=>'manager']\n\n\t\tarray_set //修改数组中对应的值\n\t\t\t$arr = ['start_time'=>'2009-06-01','end_time'=>'2014-11-30'];\n\t\t\tarray_set($rq,'start_time',strtotime(Request::input('start_time')));  //strtotime时间转时间戳\n\t\t\t//返回 ['start_time'=>1243814400,'end_time'=>'2014-11-30'];;\n\n\t\tarray_except\n\t\t\t$arr = ['name'=>'comtu','age'=>10,'job'=>'manager'];\n\t\t\t$value = array_except($arr,'job');//返回数组中除指定键后的数据 \n\t\t\t//返回 ['name'=>'comtu','age'=>10]\n\n\t\tarray_flatten\n\t\t\t$arr = [\n\t\t\t\t'a' =>1,\n\t\t\t\t'b' =>[\n\t\t\t\t\t'a'=>2,\n\t\t\t\t\t'b'=>3\n\t\t\t\t\t]\n\t\t\t\t];\n\t\t\t$value = aray_flatten($arr);//返回$arr内的所有值 \n\t\t\t//返回 array(3) { [0]=> int(1) [1]=> int(2) [2]=> int(3) } \n\n\t\tarray_where\n\t\t\t$arr = ['name' => 'comtu','age'=>18,'job'=>'manager'];\n\t\t\t$value = array_where($arr,function($k,$v){\n\t\t\t\treturn is_string($v);\n\t\t\t});//返回满足条件的新数组 返回全是String类型的数据\n\t\t\t//返回 ['name' => 'comtu','job'=>'manager']\n\t\n\tPath 辅助函数\n\t\techo app_path();// 项目绝对路径 项目绝对路径\n\t\t\tE:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel\\app\n\n\t\techo config_path(); 项目下的配置目录的绝对路径\n\t\t\tE:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel\\config\n\n\t\techo public_path(); 项目下的public目录的绝对路径\n\t\t\tE:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel\\public\n\n\t\techo storage_path(); 项目下的storage目录的绝对路径\n\t\t\tE:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel\\storage\n\n\n\t字符串 辅助函数\n\t\tstr_plural 单词单数变复数\n\t\t\t例如 $value = str_plural('apple'); //返回apples\n\t\t\t     $value = str_plural('sheep');// 返回sheep \n\t\t\t     $value = str_plural('ability');// 返回abilities\n\n\t\tstarts_with\n\t\t\t//字符串是否是与指定的内容开头\n\t\t\tvar_dump( starts_with('abcd','ab'));//返回true\n\n\t\tends_with\n\t\t\t//字符串是否是与指定的内容结束\n\t\t\tvar_dump( ends_with('abcd','b'));//返回false\n\n\t\tcamel_case\n\t\t\t//将字符串替换成驼峰命名法\n\t\t\techo camel_case('hello_world');//返回helloWorld\n\n\t\tclass_basename\n\t\t\t//返回 命名空间的类名\n\t\t\techo class_basename('App\\Controller\\DemoDataBaseController');//返回DemoDataBaseController\n\n\t\tstr_limit\n\t\t\t//限制字符串的长度_返回指定长度的字符串\n\t\t\techo str_limit('abcdefg',3);//返回abc... 后面有省略号\n\t\t\t\n\t\tstr_is\n\t\t\t//判断字符串是否满足条件 是否是与ab开头e结尾_参数一是条件,参数二是判断的值\n\t\t\tvar_dump(str_is('ab*e','abcde')); //返回true\n\n# <a id=\"图片处理库Integration/Image\"></a>在 Laravel 中使用图片处理库 Integration/Image \n\n\t系统需求\n\n\t\t PHP >= 5.3\n\t\t Fileinfo Extension\n\t\t GD Library (>=2.0) … or …\n\t\t Imagick PHP extension (>=6.5.7)\n\n\t安装部署 Integration/image\n\n\t\t在 composer.json [require] 节增加\"\"intervention/image\": \"2.*\"\"，之后执行 composer update 我当时下载的是2.3.2\n\t\t\n\t\t如果出现错误信息: (PHP版本5.5.28)\n\t\t\t\tE:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\myLaravelShop>composer update\n\t\t\t\t> php artisan clear-compiled\n\t\t\t\tLoading composer repositories with package information\n\t\t\t\tUpdating dependencies (including require-dev)\n\t\t\t\tYour requirements could not be resolved to an installable set of packages.\n\n\t\t\t\t  Problem 1\n\t\t\t\t    - Installation request for intervention/image 2.0.17 -> \n\t\t\t\t\t\tsatisfiable by intervention/image[2.0.17].\n\t\t\t\t    - intervention/image 2.0.17 requires ext-fileinfo * -> \n\t\t\t\t\t\tthe requested PHP extension fileinfo is missing from your system.\n\t\t\t解决方法:\n\t\t\t\t找到PHP环境目录 --> 打开 php.ini 文件 找到 ;extension=php_fileinfo.dll (PHP5.5.28-nts 862行) \n\t\t\t\t去除前面的;号~~重新运行即可. 会在后台下载,等待.\n\n\tLaravel 配置\n\n\t\t安装部署 Integration/image 完成后，打开配置文件 config/app.php 在相应位置添加代码，\n\t\t然后 Image 类就能自动加载并可供使用了。其功能强大到可以处理你的几乎所有图片处理需求。\n\t\t\t//服务提供器 Laravel 5.1.23 \t在 providers  中配置\n\t\t\t Intervention\\Image\\ImageServiceProvider::class,\n\n\t\t\t//别名配置 Laravel 5.1.23  在 aliases 中配置 \n\t\t\t'Image'     => Intervention\\Image\\Facades\\Image::class,\n\n\t配置设置\n\t\t默认情况下， Integration/Image 使用PHP的GD库扩展。\n\t\t如果你想切换到 imagick，你可以使用 php artisan 创建一个配置文件以添加相应的配置。\n\t\t$ php artisan config:publish intervention/imag\n\n\t基本使用\n\n\t\t这里列出几个基本功能，更详细使用说明请查看相关接口文档。\n\t\t文档地址: http://image.intervention.io/  墙\n\t\t\n\t\t\tDemo\n\t\t\t//1、显示一张图片\n\t\t\tRoute::get('imageRead',function(){\n\t\t\t    $img = Image::make(public_path().'/uploads/43195301.jpg');//读取图片\n\t\t\t    return $img->response();//返回图片资源在浏览器中显示\n\t\t\t});\n\n\t\t\t//2、创建缩略图\n\t\t\tRoute::get('imageThumbnail',function(){\n\t\t\t    if (!file_exists(public_path().'/uploads/thumbnail')){ //创建文件夹\n\t\t\t\tmkdir (public_path().\"/uploads/thumbnail\");\n\t\t\t    }\n\n\t\t\t    $rawFilePath = public_path().'/uploads/43195301.jpg';\n\t\t\t    $thumbnailFilePath = public_path().'/uploads/thumbnail/'.uniqid().'.jpg';\n\n\t\t\t    //生成缩略图\n\t\t\t    $img = Image::make($rawFilePath);//读取图片文件\n\t\t\t    $img->resize(120,120);//缩略图大小 宽/高\n\t\t\t    $img->save($thumbnailFilePath);//需要保存在已有的目录中\n\t\t\t    echo $rawFilePath.'生成缩略图到'.$thumbnailFilePath;\n\t\t\t});\n\n\t\t\t//3、绘制一张图片\n\t\t\tRoute::get('imageCanvas',function(){\n\t\t\t    $img = Image::canvas(800, 600, '#ccc');\n\t\t\t    return $img->response();\n\t\t\t});\n\n\t\t\t//4.插入一个水印\n\t\t\tRoute::get('imageInsert',function(){\n\t\t\t    $rawFilePath = public_path().'/uploads/43195301.jpg';\n\t\t\t    $watermark = public_path().'/uploads/563b24c067472.jpg';//水印\n\t\t\t    //top-left (default)\n\t\t\t    //top\n\t\t\t    //top-right\n\t\t\t    //left\n\t\t\t    //center\n\t\t\t    //right\n\t\t\t    //bottom-left\n\t\t\t    //bottom\n\t\t\t    //bottom-right\n\t\t\t    // $img->insert($watermark, 'bottom-right', 10, 10);//其它位置\n\t\t\t    // $img->insert($watermark, 'center');//中间\n\t\t\t    $img = Image::make($rawFilePath)->resize(800, 600)->insert($watermark);//打水印,默认左上角\n\n\t\t\t    return $img->response();\n\t\t\t});\n\t\t\n\t\n\t\t如果运行时页面中出现如下错误:\n\t\t\tNotSupportedException in Driver.php line 18:\n\t\t\tGD Library extension not available with this PHP installation.\n\t\t\tin Driver.php line 18\n\t\t\tat Driver->__construct() in ImageManager.php line 107\n\t\t\tat ImageManager->createDriver() in ImageManager.php line 50\n\t\t\tat ImageManager->make('/public/uploads/43195301.jpg') in Facade.php line 214\n\t\t\t....\n\t\t解决方案\n\t\t\t开启PHP的GD功能\n\t\t\t找到PHP环境目录 --> 打开 php.ini (PHP5.5.28-nts 863行) 文件 \n\t\t\t找到 ;extension=php_gd2.dll 去除前面的;号~~重新启动服务运行即可. \n\n# <a id=\"我遇到的错误\"></a>我遇到的错误\n\t\n\t链接数据库时异常.\n\t\t//路由中,尝试连接数据库\n\t\tRoute::get('myDatabase',function(){\n\t\t    $name = DB::connection()->getDatabaseName();\n\t\t    echo $name; //打印出 数据库名 my_laravel 表示成功\n\t\t});\n\n\t\tPDOException in Connector.php line 47:\n\t\tcould not find driver\n\t\tin Connector.php line 47\n\t\tat PDO->__construct('mysql:host=localhost;dbname=my_laravel',\n\t\t'root', 'root', array('0', '2', '0', false, false)) in Connector.php line 47\n\t\t.....\n\n\t\t解决办法:\n\t\tphp环境中找到 php.ini文件并找到 ;extension=php_pdo_mysql.dll \n\t\t并去除前面的;号.然后重启服务器.如apache 或者 关闭服务重新启动服务 php -S localhost:80 -t my_laravel\\public\n\n\tSession生成数据库表异常\n\t\t错误原因1.可能存在冲突的表原因.\n\t\t\tdatabase/migrations 目录下的文件是需要生成的表.\n\t\t\t如果出现错误警告,可查看当前目录下的文件是否是自己需求要创建的表.\n\t\t\t如果里面存在冲突的表,如我当时有两个users表\n\t\t\t查打开查看文件是否是自己的内容.如果不是.~~可删除文件,需要注意的是\n\t\t\t删除后需要在\tmy_laravel/vendor/composer/autoload_classmap.php \n\t\t\t文件中找到相同的一条记录一并删除重新执行即可.\n\n\t还有遇到的一些错误见功能模块,有解决方案\n\n# <a id=\"artisan命令\"></a>artisan命令\n\t\n\t谨慎操作还原回清静 php artisan fresh\n\t\t\n\t创建控制器\n\t\tphp artisan make:controller MyController\n\t\n\t创建model\n\t\tphp artisan make:model User\n\n\t查看当前所有路由列表\n\t\tphp artisan route:list\n\n\t一整个程序停止解析(使用场景如,网站遇到攻击,网站需要维护等)\n\t\t配置后访问网站的所有地址都会被跳转到Beright back\n\t\tphp artisan down \n\t\tphp artisan up\n\n\t生成Session数据库表\n\t\tphp artisan session:table  //1\n\t\tcomposer dump-autoload     //2\n\t\tphp artisan migrate        //3\n\t\n\t创建中间件\n\t\tphp artisan make:middleware MyMiddleware\n\n\n\n英文文档   \n[http://laravel.com/docs/5.1](http://laravel.com/docs/5.1)   \n\n中文文档:     \n[http://www.golaravel.com/](http://www.golaravel.com/)   \n[http://laravel-china.org/docs/5.0/middleware](http://laravel-china.org/docs/5.0/middleware)   \n[http://www.golaravel.com/post/install-and-run-laravel-5-x-on-windows/](http://www.golaravel.com/post/install-and-run-laravel-5-x-on-windows/)   \n\n# <a id=\"Demo\"></a>Demo下载\n\n本博文的案例Demo下载地址如下:\n\n[本文案例Demo](/res/file/blog/2015/10/10/PHP_Laravel/laravel-v5.0.22_Demo.rar)\n\n[本文案例Demo_购物商场](/res/file/blog/2015/10/10/PHP_Laravel/myLaravelShop_Demo.rar)\n\n刚学PHP的两个框架Laravel与CI,个人对这两个框架的感觉如下~\n\n| |Laravel|Codeigniter\n|---|:---|---:|:---:|\n|开发效率|★★★★|★★★\n|运行效率|★★★|★★★★\n|学习成本|★★☆|★\n\n\n","slug":"PHP_Laravel","published":1,"updated":"2016-05-05T06:45:59.208Z","comments":1,"photos":[],"link":"","_id":"cinu3etyz001zxoj0ayp39j74","content":"<p>本人因公司的需要.学习PHP的Laravel框架.本博文为学习笔记.<br>本博文中包含有 <code>Laravel安装配置环境部署</code>,<code>路由</code>,<code>控制器</code>,<code>视图</code>,<code>模型</code>,<code>MVC</code> ,<code>数据库</code>,<code>请求</code>,<code>Session</code>,<code>表单研制</code>,<br><code>中间件</code>,<code>哈希</code>,<code>辅助函数</code>,以及<code>图片处理库Integration/Image</code>的使用.<code>artisan</code>常用命令等内容.   </p>\n<a id=\"more\"></a>\n<p>目录:</p>\n<ul>\n<li><a href=\"#安装Laravel\">安装Laravel</a></li>\n<li><a href=\"#Laravel目录结构\">Laravel目录结构</a></li>\n<li><a href=\"#路由\">路由</a></li>\n<li><a href=\"#控制器(Controller\">控制器(Controller)</a>)</li>\n<li><a href=\"#视图(Views\">视图(Views)</a>)</li>\n<li><a href=\"#模型(model\">模型(model)</a>)</li>\n<li><a href=\"#环境与部署\">环境与部署</a></li>\n<li><a href=\"#数据库\">数据库</a></li>\n<li><a href=\"#请求\">请求</a></li>\n<li><a href=\"#Session\">Session</a></li>\n<li><a href=\"#表单验证\">表单验证</a></li>\n<li><a href=\"#中间件\">中间件</a></li>\n<li><a href=\"#哈希\">哈希</a></li>\n<li><a href=\"#辅助函数\">辅助函数</a></li>\n<li><a href=\"#图片处理库Integration/Image\">在 Laravel 中使用图片处理库 Integration/Image</a></li>\n<li><a href=\"#我遇到的错误\">我遇到的错误</a></li>\n<li><a href=\"#artisan命令\">artisan命令</a></li>\n<li><a href=\"#Demo\">Demo</a></li>\n</ul>\n<h1 id=\"安装Laravel\"><a href=\"#安装Laravel\" class=\"headerlink\" title=\"安装Laravel\"></a><a id=\"安装Laravel\"></a>安装Laravel</h1><pre><code>1.1.下载安装PHP\n\n    http://windows.php.net/download/\n\n    IDE (https://www.jetbrains.com/phpstorm/)\n\n    本人使用的PHP版本为:php-5.5.28-nts\n    Laravel框架要求PHP 版本 &gt;= 5.4\n\n1.2.安装Composer \n\n    Composer  \n    官网: https://getcomposer.org/\n    GitHub: https://github.com/composer/composer\n    中文: http://www.phpcomposer.com/ 中国镜像\n\n    Composert官方下载地址: https://getcomposer.org/Composer-Setup.exe\n\n    如果出现如下安装错误:\n\n        Some settings on your machine make Composer unable to work properly.\n        Make sure that you fix the issues listed below and run this script again:\n        The openssl extension is missing, which means that secure HTTPS transfers are impossible.\n        If possible you should enable it or recompile php with --with-openssl\n\n        缺失openssl扩展\n\n        处理方式: \n            找到php目录下的php.ini文件(如果没有则把php.ini-development拷贝重命名为php.ini)\n            用编辑器打开 php.ini 文件，修改以下配置： \n            去掉 extension=php_mbstring.dll 前面的分号（888 行左右） \n            去掉 extension=php_openssl.dll 前面的分号（893 行左右） \n            去掉 extension_dir = &quot;ext&quot; 前面的分号（736 行左右）\n        然后重试即可.安装完全成后使用cmd输入composer显示如下内容表示安装成功.\n\n    C:\\Users\\comtu&gt;composer\n       ______\n      / ____/___  ____ ___  ____  ____  ________  _____\n     / /   / __ \\/ __ `__ \\/ __ \\/ __ \\/ ___/ _ \\/ ___/\n    / /___/ /_/ / / / / / / /_/ / /_/ (__  )  __/ /\n    \\____/\\____/_/ /_/ /_/ .___/\\____/____/\\___/_/\n                /_/\n\n    ....省略.....\n\n1.3.在项目中创建 Composer \n\n    使用cmd定位到项目目录下.如:\n        E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm&gt;\n\n    使用命令:\n        cmd(或者使用PHPStorm的Terminal本人使用的IDE就是PHPStorm)    \n\n        composer create-project laravel/laravel --prefer-dist my_laravel\n\n        回车后会自动下载laravel框架.下载目录生成在firstPHPStorm目录下.\n            laravel/laravel 指下载laravel目录下的laravel\n            --prefer-dist下载的文件为压缩过的.\n            my_laravel 为安装到的文件目录名(自定义).\n\n        如果没有代理下载速度就呵呵了.(本人大概花费15分钟左右时间.)\n        最后提示如下内容表示下载成功:\n            Application key [xxxxxxxxxxxxxxxxxxxx] set successfully. \n\n    一键安装包\n        故有了一键安装包.rar里面的内容就是通过命令下载下来的文件.免去了再龟速的下载.\n\n        Laravel一键安装包下载地址: http://www.golaravel.com/download/\n\n1.4.测试运行Laravel\n\n测试运行方式1:\n\n    cmd(或者使用PHPStorm的Terminal本人使用的IDE就是PHPStorm)\n\n    php -S localhost:80 -t my_laravel\\public\n\n    提示出现:\n        PHP 5.5.28 Development Server started at Sat Oct 10 10:20:28 2015\n        Listening on http://localhost:80\n        Document root is E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel\\public\n        Press Ctrl-C to quit.\n\n    打开浏览器:\n    地址栏输入:localhost\n    界面中显示出&quot;Laravel 5&quot;大字表示运行成功.\n\n    但如果你的是使用linux或者其它系统.如果出现浏览器显示出白屏或者其它内容.则可能是因为有两个文件夹的权限的原因\n    需要为 my_laravel/storage (日志,session,等目录)  与 my_laravel/vendor (Composer下载的支持库,或者自己的第三方库目录)\n    有写入的权限\n\n    Linux设置对应的权限命令如下:\n\n        chown -R apache:apache /var/www/my_laravel/storage\n        chown -R apache:apache /var/www/my_laravel/vendor\n\n\n测试运行方式2(PHP版本5.4之后的版本):\n\n    artisan 的 serve 命令还支持两个参数：\n\n    host 设置主机地址\n    port 设置 web server 监听的端口号\n    例如：php artisan serve --port=8888\n\n\n    cmd 定位目录到my_laravel 输入 php artisan serve (PHP5.4之后开始支持内置web Server 同时Laravel也支持)\n    E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel&gt;php artisan serve 回车(默认8000接口可指定)\n    Laravel development server started on http://localhost:8000/ 提示\n\n    打开浏览器，在地址栏输入 localhost:8000 于方式1运行出相同的效果.\n\n    如你电脑上有运行Apache 并且端口也是8000那么会出现如下提示,需要关闭Apache或者指定其它接口后再试.\n    [Sat Oct 10 10:39:21 2015] Failed to listen on localhost:8000 \n    (reason: 以一种访问权限不允许的方式做了一个访问套接字的尝试。)\n</code></pre><h1 id=\"Laravel目录结构\"><a href=\"#Laravel目录结构\" class=\"headerlink\" title=\"Laravel目录结构\"></a><a id=\"Laravel目录结构\"></a>Laravel目录结构</h1><pre><code>本学习笔记使用到的文件目录\n\nmy_laravel\n    |--&gt;app\n    |    |---&gt;Http \n    |    |     |----&gt;Controllers 控制器目录\n    |    |     |       |-----&gt; 控制器文件\n    |    |     |----&gt;Middleware\n    |    |     |       |-----&gt; 中间件文件\n    |    |     |----&gt;routes.php 路由配置文件\n    |    |     |----&gt;Kernel.php 中间件配置文件\n    |    |---&gt; 根目录Model默认目录\n    |--&gt;bootstrap\n    |--&gt;config  配置文件\n    |    |--&gt; app.php\n    |    |--&gt; database.php\n    |    |--&gt; ....\n    |--&gt;database 数据库\n    |--&gt;public 对外开放目录\n    |--&gt;resources\n    |    |---&gt;views 视图View目录\n    |          |----&gt;xxxx.blade.php 视图文件\n    |          |----&gt;errors 目录\n    |                  |-----&gt; 503.blade.php 文件当artisan命令使用 php artisan down 时会网站全部连接转向此文件.\n    |--&gt;storage 日志,session等缓存目录\n    |--&gt;tests \n    |--&gt;vendor 自己的第三方库目录与Composer下载的支持库\n    |    |---&gt;laravel 框架目录\n    |    |---&gt;intervention 图片处理库,需要下载\n    |--&gt;.env 文件 环境配置文件.\n    |--&gt;Composer.json 环境库配置文件 \n</code></pre><h1 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a><a id=\"路由\"></a>路由</h1><pre><code>路由作用是宏观的分发和限制请求\n\nhttp://laravel-china.org/docs/5.0/routing 中文文档\n\nhttp://laravel.com/docs/5.0/routing 原版文档\nhttp://laravel.com/docs/5.1/routing 原版文档\n\n3.1 配置基本路由\n    文件目录:my_laravel/app/Http/routes.php    \n\n    选择get/post/any 等等\n        一般get是向服务器要数据\n        post是向服务器发数据\n        any就是通过全部请求类型\n\n    //get\n        Route::get(&apos;/&apos;,&apos;WelcomeController@index&apos;);\n        //意思是如果通过get访问/域名就交给WelcomeController控制器的index方法进行处理.\n\n        //通过 http://localhost/home 访问.可进入到登录页面\n        Route::get(&apos;home&apos;, &apos;HomeController@index&apos;);\n\n        也可以使用函数的方式直接返回视图(可加快测试速度)\n\n        Route::get(&apos;/&apos;,    function () {\n                return view(&apos;welcome&apos;);\n                //视图文件目录位于:my_laravel/resources/views/welcome.blade.php\n            }\n        );\n        //意思是如果访问/域名 显示视图welcome\n\n    //post方式 路由使用函数\n        Route::post(&apos;test&apos;,function (){\n            return view(&apos;welcome&apos;);\n        });\n\n    //any(不管用什么方式get/post等请求都通过),对于不敏感的信息都可以使用这种模式.\n        Route::any(&apos;testAny&apos;,function (){\n            return &apos;any请求,注册路由响应所有 HTTP 请求&apos;;\n        });\n\n    //match 为多种请求注册路由\n        Route::match([&apos;get&apos;, &apos;post&apos;], &apos;/&apos;, function()\n        {\n            return &apos;Hello World&apos;;\n        });\n\n    //resource 请求控制器中的所有方法\n        //http://localhost/user\n        //http://localhost/user/create\n        //http://localhost/user/destroy\n        //http://localhost/user/update\n        //http://localhost/user/show\n        //资源 不用像WelcomeController@index指定方法,直接可以调用. 但在项目中不够灵活.\n        Route::resource(&apos;user&apos;,&apos;UserController&apos;);\n\n3.2 CSRF保护\n    跨站攻击保护机制(跨网站请求伪造))\n    例如:原本一个post请求的链接,用户使用第三方工具(如chrome浏览器的Postman插件)伪造post请求\n    有CSRF则会对这种请求进行拦截.\n\n3.3 路由传参\n    基础路由参数\n        Route::get(&apos;user/{id}&apos;, function($id){\n            return &apos;User &apos;.$id;\n        });\n\n    可选择的路由参数\n        Route::get(&apos;user/{name?}&apos;, function($name = null){\n            return $name;\n        });\n\n    带默认值的路由参数    \n        Route::get(&apos;user/{name?}&apos;, function($name = &apos;John&apos;){\n            return $name;\n        });\n\n    使用正则表达式限制参数\n        Route::get(&apos;user/{name}&apos;, function($name){\n            //\n        })\n        -&gt;where(&apos;name&apos;, &apos;[A-Za-z]+&apos;);\n\n        Route::get(&apos;user/{id}&apos;, function($id){\n            //\n        })\n        -&gt;where(&apos;id&apos;, &apos;[0-9]+&apos;);\n\n    使用条件限制数组\n        Route::get(&apos;user/{id}/{name}&apos;, function($id, $name){\n            //\n        })\n        -&gt;where([&apos;id&apos; =&gt; &apos;[0-9]+&apos;, &apos;name&apos; =&gt; &apos;[a-z]+&apos;]);\n\n    定义全局模式\n        如果你想让特定路由参数总是遵询特定的正则表达式，可以使用 pattern 方法。在 RouteServiceProvider 的 boot 方法里定义模式：\n\n        $router-&gt;pattern(&apos;id&apos;, &apos;[0-9]+&apos;);\n        定义模式之后，会作用在所有使用这个特定参数的路由上：\n\n        Route::get(&apos;user/{id}&apos;, function($id)\n        {\n            // 只有 {id} 是数字才被调用。\n        });\n\n    取得路由参数\n\n        如果需要在路由外部取得其参数，使用 input 方法：\n\n        if ($route-&gt;input(&apos;id&apos;) == 1){\n            //\n        }\n        你也可以使用 Illuminate\\Http\\Request 实体取得路由参数。\n        当前请求的实例可以通过 Request facade 取得，或透过类型提示 Illuminate\\Http\\Request 注入依赖：\n\n        use Illuminate\\Http\\Request;\n\n        Route::get(&apos;user/{id}&apos;, function(Request $request, $id){\n            if ($request-&gt;route(&apos;id&apos;)){\n            //\n            }\n        });\n\n\n还有如:    方法欺骗 , 命名路由 , 路由群组 , 路由模型绑定 , 抛出 404 错误 等内容 ,见官方文档.\n</code></pre><h1 id=\"控制器-Controller\"><a href=\"#控制器-Controller\" class=\"headerlink\" title=\"控制器(Controller)\"></a><a id=\"控制器(Controller)\"></a>控制器(Controller)</h1><pre><code>控制器的作用是请求二级分发者\n\n控制器目录\n    my_laravel/app/Http/Controllers/目录下\n\n创建控制器\n    手动模式创建:\n        例如新创建: my_laravel/app/Http/Controllers/MyController1.php 内容如下\n            &lt;?php namespace App\\Http\\Controllers;\n            class MyController1 extends Controller {\n                public function getAbout(){\n                return &apos;MyController1@ABOUT gogogo&apos;;\n\n                //到视图\n                //return view(&apos;my_welcome&apos;);//跳转到my_welcome.blade.php视图View中.\n                //传参数方式1 //跳转到my_welcome.blade.php视图View中并带一个参数$name = &apos;comtu&apos;.\n                //return view(&apos;my_welcome&apos;)-&gt;with(&apos;name&apos;,&apos;comtu&apos;);\n                //传参数方式2 //跳转到my_welcome.blade.php视图View中并带一个参数$name = &apos;name&apos;.\n                //$name = &apos;lala&apos;;\n                //return view(&apos;my_welcome&apos;,compact(&apos;name&apos;/*[&apos;name&apos;-&gt;&apos;lala&apos;]*/);\n                //传参数方式3\n                //$data=[\n                //    &apos;name&apos; =&gt; &apos;comtu&apos;,\n                //    &apos;age&apos; =&gt; 128\n                //];\n                //return view(&apos;my_welcome&apos;,$data);//传多参数.视图View中直接使用$name , $age即可.\n                }\n            }\n        配置路由\n            //http://localhost/myController1\n            Route::get(&apos;myController1&apos;,&apos;MyController1@getAbout&apos;);\n\n    命令模型创建(推荐,更准确):\n\n        使用Terminal定位(cmd)目录文件到 my_laravel 目录下 使用artisan命令\n        使用命令:\n            E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel&gt;\n            php artisan make:controller MyController\n\n        提示:Controller created successfully. 创建成功.\n        查看my_laravel/app/Http/Controllers/MyController.php\n        发现会生成生成MyController.php文件 文件里会自动生成类,以及一些方法:\n        如:index() , create() , store() , show($id) , edit($id) , update($id) , destroy($id)\n        但都是空实现.\n</code></pre><h1 id=\"视图-Views\"><a href=\"#视图-Views\" class=\"headerlink\" title=\"视图(Views)\"></a><a id=\"视图(Views)\"></a>视图(Views)</h1><pre><code>MVC显示层\n\nmy_laravel/resources/views/xxxx.blade.php\n\n创建View视图\n    一般流程为: 创建控制器--&gt;配置路由--&gt;创建视图.\n\n    1.在创建的控制器 MyController.php 中增加如下方法:\n        &lt;?php namespace App\\Http\\Controllers;\n        class MyController1 extends Controller {\n            public function index(){\n                //到视图\n                return view(&apos;my_welcome&apos;);//跳转到my_welcome.blade.php视图View中.\n            }\n\n            //传参数方式1\n            public function parameter(){\n                $data=[\n                    &apos;name&apos; =&gt; &apos;comtu&apos;,\n                    &apos;age&apos; =&gt; 128,\n                        &apos;people&apos;=&gt;[&apos;张三&apos;,&apos;李四&apos;,&apos;王五&apos;]\n                ];\n                return view(&apos;my_welcome&apos;,$data);//传多参数.视图View中直接使用$name , $age即可.\n            }\n            //传参数方式2\n            public function parameter1(){\n                $name = &apos;lala&apos;;\n                //跳转到my_welcome.blade.php视图View中并带一个参数$name = &apos;lala&apos;.\n                return view(&apos;my_welcome&apos;,compact(&apos;name&apos;)/*等同于[&apos;name&apos;-&gt;&apos;lala&apos;]*/);\n            }\n            //传参数方式3\n            public function parameter2(){\n                //跳转到my_welcome.blade.php视图View中并带一个参数$name = &apos;comtu&apos;.\n                return view(&apos;my_welcome&apos;)-&gt;with(&apos;name&apos;,&apos;comtu&apos;);\n            }\n        }\n\n    2.配置路由:\n        //http://localhost/my_home\n        Route::get(&apos;my_home&apos;,&apos;MyController@index&apos;);\n        Route::get(&apos;my_home1&apos;,&apos;MyController@parameter&apos;);\n        Route::get(&apos;my_home2&apos;,&apos;MyController@parameter1&apos;);\n        Route::get(&apos;my_home3&apos;,&apos;MyController@parameter2&apos;);\n\n    3.创建视图文件 \n        目录结构为my_laravel/resources/views/my_welcome.blade.php\n        &lt;html&gt;\n            &lt;head&gt;\n                &lt;title&gt;my_welcome&lt;/title&gt;\n            &lt;/head&gt;\n            &lt;body&gt;\n                &lt;div class=&quot;title&quot;&gt;my_welcome--&gt;\n                    &lt;?php if(!empty($name)):?&gt;\n                        &lt;?php echo $name;?&gt;\n                    &lt;?php endif;?&gt;\n                &lt;/div&gt;\n                &lt;?php if(!empty($age)):?&gt;\n                    &lt;div class=&quot;title&quot;&gt;age:&lt;?php echo $age;?&gt;&lt;/div&gt;\n                &lt;?php endif;?&gt;\n            &lt;/body&gt;\n        &lt;/html&gt;\n\nBlade模板\n\n    官方文档: http://laravel.com/docs/5.1/blade\n    中文文档: http://www.golaravel.com/laravel/docs/5.0/templates/\n\n    模板:\n\n        {{ }} \n        {!! !!}\n        {{{ }}}\n        @include\n        @if()\n        @else\n        @endif\n        @foreach\n        @endforeach\n        @for\n        @endfor\n        @while\n        @endwhile\n        等\n\n    案例:\n\n    新创建 my_laravel/resources/views/compontents/myHead.blade.php 文件.(用于演示 @include(&apos;components.myHead&apos;))\n        &lt;html&gt;\n            &lt;body&gt;\n                &lt;!--头部文件使用 include 在其它地方引用 --&gt;\n                &lt;h1&gt;高大上的头Head&lt;/h1&gt;\n                &lt;hr&gt;\n\n            &lt;/body&gt;\n        &lt;/html&gt;\n\n    演示代码 my_laravel/resources/views/my_view.blade.php\n        &lt;html&gt;\n            &lt;head&gt;\n                &lt;meta charset=&quot;utf-8&quot;&gt;\n                &lt;title&gt;MyView&lt;/title&gt;\n            &lt;/head&gt;\n            &lt;body&gt;\n                &lt;!--引用包含其它文件.--&gt;\n                @include(&apos;components.myHead&apos;)\n                MyView--&gt;\n\n                &lt;!--调用函数 跨站点请求伪造保护码--&gt;\n                {{csrf_token()}} 等同于 &lt;?php echo csrf_token();?&gt;\n\n                &lt;h1&gt;{{ $name or 'Default' }}&lt;/h1&gt;\n\n                &lt;h1&gt;{{ $name or '无名英雄1' }}&lt;/h1&gt;\n\n                &lt;h1&gt;{{ $name or '无名英雄2'}} - {{$age or 0}}&lt;/h1&gt;\n\n                以上等同于\n                &lt;h1&gt;&lt;?php echo !empty($name)?$name:&apos;无名英雄3&apos;?&gt;&lt;/h1&gt;\n\n\n                &lt;!--不解析,原样输出--&gt;\n                @{{$name}}\n\n                &lt;!--加载代码--&gt;\n                {!! &apos;&lt;script&gt;var g = &quot;comtu&quot;;document.write(&quot;&lt;br /&gt;加载代码&quot;+g+&quot;&lt;br /&gt;&quot;);&lt;/script&gt;&apos; !!}\n                {!! &apos;&lt;h1&gt;h1&lt;/h1&gt;&apos; !!}\n\n                        &lt;!--代码转义--&gt;\n                {{{'<html lang=\"en\">打印HTML comtu</html>'}}}\n\n\n                &lt;!--Blade的if判断,如果$name未定义会抛错误--&gt;\n                &lt;h1&gt;\n                @if($name)\n                    你好{{$name}}\n                @else\n                    未登录\n                @endif\n                &lt;/h1&gt;\n\n\n                @foreach($people as $person)\n                    &lt;li&gt;{{$person}}&lt;/li&gt;\n                @endforeach\n\n                @for($i = 0 ; $i&lt;3; $i++)\n                xx\n                @endfor\n\n                @while(false)\n                xxx\n                @endwhile\n\n            &lt;/body&gt;\n        &lt;/html&gt;\n\n    以上在浏览器中输出\n        高大上的头Head\n\n        MyView--&gt; YNJhQ4GgCCuZ5qyPNhTwvFvWfYLduxUOFvEz0vnZ 等同于 YNJhQ4GgCCuZ5qyPNhTwvFvWfYLduxUOFvEz0vnZ\n        Default\n\n        无名英雄1\n\n        无名英雄2 - 0\n\n        以上等同于\n        无名英雄3\n\n        {{$name}} \n        加载代码comtu\n        h1\n\n        &lt;html lang=&quot;en&quot;&gt;打印HTML comtu&lt;/html&gt;\n\n        未登录\n\n        张三\n        李四\n        王五\n        xx xx xx\n</code></pre><h1 id=\"模型-model\"><a href=\"#模型-model\" class=\"headerlink\" title=\"模型(model)\"></a><a id=\"模型(model)\"></a>模型(model)</h1><pre><code>模型层\n    一般model在 my_laravel/app/目录下\n    直接或间接继承Model;\n    原代码目录:\n    //my_laravel/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Model.php\n    Laravel的Model比CI的Model内容可多很多.里面包含了查询数据库等等的函数实现.\n    8.Eloguent里面有Demo\n\n\n创建模型\n    手动模式创建:\n        例如新创建: my_laravel/app/Demo.php内容如下:        \n\n        修改Model的文件目录,新创建 my_laravel/app/Model 在Model里面创建Model文件.\n        并在 文件头&lt;?php namespace App\\Model;//指定目录即可            \n\n        &lt;?php namespace App;\n            use Illuminate\\Database\\Eloquent\\Model;\n            class Demo extends Model {\n                use Authenticatable, CanResetPassword;\n                /**使用的数据库表模式。*/\n                protected $table = &apos;demo&apos;;\n\n                /**属性可分配。*/\n                //表示那些字段是可以被laravel填写的.\n                protected $fillable = [&apos;name&apos;, &apos;email&apos;, &apos;password&apos;];\n\n                //表示这些字段是被保护的,存储数据库时不填写此数据\n                protected $guarded = [&apos;demo_id&apos;];\n\n                /** 排除在模型的JSON形式的属性。*/\n                protected $hidden = [&apos;password&apos;, &apos;remember_token&apos;];\n\n                 //修改默认的 id 主键\n                protected $primaryKey = &apos;demo_id&apos;;\n\n                //不使用时间戳_见下面创建模型\n                public $timestamps = false;\n            }\n\n    命令模型创建:\n        使用Terminal定位(cmd)目录文件到 my_laravel 目录下 使用artisan命令\n            php artisan make:model Demo\n            创建在 my_laravel/app/Demo.php 文件如下:\n\n            &lt;?php namespace App;\n            use Illuminate\\Database\\Eloquent\\Model;\n            class Demo extends Model {\n                //....\n            }\n</code></pre><h1 id=\"环境与部署\"><a href=\"#环境与部署\" class=\"headerlink\" title=\"环境与部署\"></a><a id=\"环境与部署\"></a>环境与部署</h1><pre><code>.env 环境配置文件.\n\n    文件目录 my_laravel/.env\n\n    作用到全局的一些参数\n    例如:\n    APP_ENV=local   全称APP_Envirment 程序环境=local表示环境在本地.server表示运行在服务器.debug需要改成0或false\n    APP_DEBUG=true  是否在开发模式下.如果true,则是开发模式,出错时会报错,并会尽量多打印信息.0或false表示正式模式.\n    APP_KEY=asdf    应用的加密key,标记唯一性,例如框架需要加密时,有可能会使用到,当做参数使用.\n\n    DB_HOST=localhost 数据库地址 这些参数会被 database.php 等配置文件调用.\n    DB_DATABASE=my_laravel 数据库名\n    DB_USERNAME=root  数据库用户名\n    DB_PASSWORD=root  数据库密码\n\n    CACHE_DRIVER=file   缓存使用文件形式\n    SESSION_DRIVER=file Session使用文件形式\n    QUEUE_DRIVER=sync   队列使用同步\n\n    MAIL_DRIVER=smtp      邮件配置\n    MAIL_HOST=mailtrap.io\n    MAIL_PORT=2525\n    MAIL_USERNAME=null\n    MAIL_PASSWORD=null\n\n\n    先创建数据库 见下面的&quot;数据库CMD&quot;\n    //路由中,尝试连接数据库\n    Route::get(&apos;myDatabase&apos;,function(){\n        $name = DB::connection()-&gt;getDatabaseName();\n        echo $name; //打印出 数据库名 my_laravel 表示成功 如果遇见PDOException错误见&quot;我遇到的错误&quot;中的解决方法\n    });\n\n数据库\n    my_laravel/config/database.php\n\n    一般不用配置当前文件,配置 my_laravel/.env 文件即可.\n\n    &apos;default&apos; =&gt; &apos;mysql&apos; 默认使用的数据库\n    &apos;connections&apos; =&gt; [\n        &apos;mysql&apos; =&gt; [\n            &apos;driver&apos;    =&gt; &apos;mysql&apos;,\n            //引用my_laravel/.env 环境配置文件的配置,如果没有找到则使用默认的&apos;localhost&apos;.\n            &apos;host&apos;      =&gt; env(&apos;DB_HOST&apos;, &apos;localhost&apos;), \n            &apos;database&apos;  =&gt; env(&apos;DB_DATABASE&apos;, &apos;forge&apos;),\n            &apos;username&apos;  =&gt; env(&apos;DB_USERNAME&apos;, &apos;forge&apos;),\n            &apos;password&apos;  =&gt; env(&apos;DB_PASSWORD&apos;, &apos;&apos;),\n            &apos;charset&apos;   =&gt; &apos;utf8&apos;,\n            &apos;collation&apos; =&gt; &apos;utf8_unicode_ci&apos;,\n            &apos;prefix&apos;    =&gt; &apos;&apos;, //前缀\n            &apos;strict&apos;    =&gt; false,\n        ],\n    ]\n\nSession\n\n    配置文件 my_laravel/config/session.php 一般此文件不需要配置\n\n        //可支持配置 &quot;file&quot;, &quot;cookie&quot;, &quot;database&quot;, &quot;apc&quot;,&quot;memcached&quot;, &quot;redis&quot;, &quot;array&quot;\n        &apos;driver&apos; =&gt; env(&apos;SESSION_DRIVER&apos;, &apos;file&apos;),\n\ndown/up\n    一整个程序停止解析(使用场景如,网站遇到攻击,网站需要维护等)\n    配置后访问网站的所有地址都会被跳转到 my_laravel/resources/views/errors/503.blade.php 网站全部连接转向此文件.\n\n        //停止服务,\n        php artisan down \n\n        //恢复服务\n        pup artisan up \n\n自定义配置属性\n    1.在.env中增加属性\n        MY_DIY_CONFIG=&apos;test_env&apos;\n    2.在config/app.php内容里增加属性(参数1为.env文件下的配置名,如果未配置.则使用参数2默认值)\n        &apos;my_diy_config&apos; =&gt;env(&apos;MY_DIY_CONFIG&apos;,&apos;test_app&apos;),\n    3.使用 例如在Controllers中使用:\n        use Illuminate\\Support\\Facades\\Config;//引入包\n        //code...\n        $diyConfig = Config::get(&apos;app.my_diy_config&apos;);//使用\n        //code...\n\n自动加载类\n    使用场景:当某一个方法函数经常会被多个不同的类调用时.可做成自动加载的类,减少代码编写量\n    1.创建文件 例如:在app/Libraries/function/functions.php (自定义)里面有如下代码:\n        &lt;?php \n        funcion abc(){\n            return &apos;abc&apos;;\n        }\n    2.在工程 /bootstrap/autoload.php 中增加如下代码(对应自定义的文件目录):\n        require __DIR__.&apos;/../app/Libraries/function/functions.php&apos;;\n    3.使用 例如在Controllers中使用\n        直接使用方法名调用: $data = abc();\n</code></pre><h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a><a id=\"数据库\"></a>数据库</h1><pre><code>与数据库交互的机制.\n    http://www.golaravel.com/laravel/docs/5.0/eloquent/\n\n目录my_laravel/vendor/laravel/framework/src/Illuminate/Database/Eloquent/包含多文件,Model属于此包\n\n\nEloguent 使用(增删改查):\n    配置数据库信息\n        my_laravel/.env\n            DB_HOST=localhost\n            DB_DATABASE=my_laravel\n            DB_USERNAME=root\n            DB_PASSWORD=root\n\n    配置路由: \n        //http://localhost:8888/myDatabase 查看连接数据库是否成功\n        Route::get(&apos;myDatabase&apos;,function(){\n            $name = DB::connection()-&gt;getDatabaseName();\n            echo $name;\n        });\n\n        //http://localhost:8888/myDatabase/add 增\n        Route::get(&apos;myDatabase/add&apos;,function(){\n            $user = new App\\User();\n            $user-&gt;userAdd();\n            return $user-&gt;userRead();\n        });\n\n        //http://localhost:8888/myDatabase/delete 删\n        Route::get(&apos;myDatabase/delete&apos;,function(){\n            $user = new App\\User();\n            $user-&gt;userDelete();\n            return $user-&gt;userRead();\n        });\n\n        //http://localhost:8888/myDatabase/update 改\n        Route::get(&apos;myDatabase/update&apos;,function(){\n            $user = new App\\User();\n            $user-&gt;userDelete();\n            return $user-&gt;userRead();\n        });\n\n        //http://localhost:8888/myDatabase/read 查\n        Route::get(&apos;myDatabase/read&apos;,function(){\n            $user = new App\\User();\n            return $user-&gt;userRead();\n        });\n\n        //http://localhost:8888/myDatabase/read_dd 查\n        Route::get(&apos;myDatabase/read_dd&apos;,function(){\n            $user = new App\\User();\n            $users = $user-&gt;all();\n            dd($users); // dd=&gt; var_dump() ; and die(); 打印出数据类型与信息.\n            // $users-&gt;toArray();//转成数组\n            // $users-&gt;all();//返回数据库原型 , 默认调用了tojson();\n            // return $user-&gt;userRead();\n\n            //数组\n            $arr = [&apos;one&apos;,&apos;two&apos;,&apos;three&apos;];\n            $collection = collect($arr);\n            //查找数组是否包含对应的值\n            $bool = $collection-&gt;contains(&apos;one&apos;);\n            //取数组的前2个数据\n            $res = $collection-&gt;take(2);\n            //取后面两个数据\n            $res = $collection-&gt;take(-2);\n\n            //键值对\n            $arr = [&apos;one&apos;=&gt;1,&apos;two&apos;=&gt;2,&apos;three&apos;=&gt;3];\n            $collection = collect($arr);\n            //查找是否有对应的键key\n            $bool = $collection-&gt;has(&apos;one&apos;);\n\n            return $collection-&gt;all();\n        });\n\n    创建模型:\n\n        &lt;?php namespace App;\n\n        use Illuminate\\Auth\\Authenticatable;\n        use Illuminate\\Database\\Eloquent\\Model;\n        use Illuminate\\Auth\\Passwords\\CanResetPassword;\n        use Illuminate\\Contracts\\Auth\\Authenticatable as AuthenticatableContract;\n        use Illuminate\\Contracts\\Auth\\CanResetPassword as CanResetPasswordContract;\n\n        //Laravel的Model已经实现了一些对数据库的操作,如增删改查.\n        class User extends Model implements AuthenticatableContract, CanResetPasswordContract {\n            use Authenticatable, CanResetPassword;\n\n            //数据库名 重写Model的数据库名\n            protected $table = &apos;users&apos;;\n\n            //表示那些数据库字段是可以被laravel填写.\n            protected $fillable = [&apos;username&apos;, &apos;age&apos;];\n\n            //表示这些字段是被保护的,存储数据库时不填写此数据(主键自动增长)\n            protected $guarded = [&apos;demo_id&apos;];\n\n            // 排除在模型的JSON形式的属性。如调用$this-&gt;all()生成的Json不生成在Json中的字段名\n            protected $hidden = [];\n\n            //修改默认的 id 主键名称\n            protected $primaryKey = &apos;user_id&apos;;\n\n            ////model自带的方法 public static function all($columns = array(&apos;*&apos;)) 函数\n            //详情见 my_laravel/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Model.php\n            //查询数据《-----------------------\n            public function userRead(){\n                //查询出所有数据\n                //return $this-&gt;all();\n\n                //查找user_id为1的数据 如果没有打到数据,返回的空数据\n                //return $this-&gt;find(1);\n                //如没有找到数据直接抛异常.查id为4的数据\n                //return $this-&gt;findOrFail(4);\n\n                //返回对应条件的数据 select * from users where username=&apos;comtu&apos;;\n                //return $this-&gt;where(&apos;username&apos;,&apos;comtu&apos;)-&gt;get();\n\n                //返回对应条件的数据 select * from users where user_id&gt;1; \n                // return $this-&gt;where(&apos;user_id&apos;,&apos;&gt;&apos;,1)-&gt;get();\n\n                //查询出所有数据 等同于 $this-&gt;all();\n                return $this-&gt;get();\n            }\n\n            //insert数据时model基类默认数据库中有时间戳字段,更新时间,创建时间\n            //处理方式有两种,一种是为数据库中增加这两个字段`updated_at`, `created_at`\n            //另一种是取消Model中的数据库时间戳字段如下:\n            public $timestamps = false;\n\n            //增加数据《-----------------------\n            public function userAdd(){\n\n                //增加数据方式1 \n                //$this-&gt;username = &apos;user00000&apos;;\n                //$this-&gt;age = 1;\n                //$this-&gt;save();\n                //增加数据后如果表是自动增长的可获取到增加后的id\n                $id = $this-&gt;user_id;//新增加后的id值\n\n                //增加数据方式2  批量赋值 \n                //protected $fillable = [&apos;username&apos;, &apos;age&apos;]; //需要有配置自动填充的字段\n                $user_data = [&apos;username&apos;=&gt;&apos;user111&apos;,&apos;age&apos;=&gt;256];\n                $this-&gt;fill($user_data);\n                $this-&gt;save();\n            }\n\n            //更新数据《-----------------------\n            public function userUpdate(){\n                //修改对应的数据 方式一\n                //$user = $this-&gt;find(1);//查询-》保存\n                //$user-&gt;username = &apos;comtu0000&apos;;\n                //$user-&gt;age = &apos;512&apos;;\n                //$user-&gt;save();\n\n                //修改对应的数据 方式二\n                $users = $this-&gt;where(&apos;user_id&apos;,&apos;&lt;&apos;,&apos;3&apos;); //查询-》更新\n                //更新不需要调用save()\n                $users-&gt;update([&apos;username&apos;=&gt;&apos;comtu1111&apos;,&apos;age&apos;=&gt;1024]);\n            }\n\n            //删除数据《-----------------------\n            public function userDelete(){\n                $user = $this-&gt;find(3);//查询-》删除\n                $user-&gt;dalete();\n            }\n        }\n\n    Demo:\n        模型:\n            &lt;?php namespace App\\Model;\n            use Illuminate\\Database\\Eloquent\\Model;\n\n            class Person extends Model  {\n\n                 //数据库表\n                protected $table = &apos;person&apos;;\n                //修改默认的 id 主键\n                protected $primaryKey = &apos;pid&apos;;\n\n                //表示那些字段是可以被laravel填写的.fill()\n                protected $fillable = [&apos;name&apos;, &apos;sex&apos;,&apos;age&apos;,&apos;salary&apos;,&apos;occ_id&apos;,&apos;dep_id&apos;];\n\n                //表示这些字段是被保护的,存储数据库时不填写此数据\n                protected $guarded = [&apos;pid&apos;];\n\n                //生成JSON时隐藏的字段\n                protected $hidden = [];\n\n                //insert数据时model基类默认数据库中有时间戳字段,更新时间,创建时间\n                //处理方式有两种,一种是为数据库中增加这两个字段`updated_at`, `created_at`\n                //另一种是取消Model中的数据库时间戳字段如下:\n                public $timestamps = false;\n\n                //表结构对应关系 occupation另外一张表app/model/occupation.php\n                public function occupation(){\n                return $this-&gt;hasOne(&apos;App\\Model\\occupation&apos;, &apos;occ_id&apos;, &apos;occ_id&apos;);\n                }\n\n                //表结构对应关系\n                public function department(){\n                return $this-&gt;hasOne(&apos;App\\Model\\department&apos;, &apos;dep_id&apos;, &apos;dep_id&apos;);\n                }\n            }\n\n        控制器:\n            app/Http/Controllers/DemoDataBaseController.php\n                &lt;?php namespace App\\Http\\Controllers;\n                use App\\Http\\Requests;\n                use App\\Http\\Controllers\\Controller;\n\n                use App\\Model\\Occupation;\n                use App\\Model\\Department;\n                use App\\Model\\Person;\n                use Illuminate\\Support\\Facades\\Input;\n                use Illuminate\\Support\\Facades\\Request;\n                use Illuminate\\Support\\Facades\\Session;\n\n\n                class DemoDataBaseController extends Controller{\n\n                    public function index() {\n                    //$data[&apos;person&apos;] = Person::find(array(&apos;1&apos;));//简单条件查询 select * from person where id = 1;\n                    //$data[&apos;person&apos;] = Person::whereRaw(&apos;pid &gt; 1 and salary &gt; 1700&apos;)-&gt;get();//条件查询全部\n\n                    //连表查询~~需要在Person里面配置表的关系\n                    $data[&apos;person&apos;] = Person::with(&apos;occupation&apos;, &apos;department&apos;)-&gt;paginate(10);//连表查询并 paginate分页功能,每页10条.\n                    //$data[&apos;person&apos;] = Person::with(&apos;occupation&apos;,&apos;department&apos;)-&gt;get();//连表查询 //只能使用get,all获取不到数据\n                    //&lt;?php foreach ($person as $v):?&gt;//视图中获取连表的数据\n                    //&lt;?php echo $v[&apos;occupation&apos;]-&gt;name;?&gt; \n                    //&lt;?php endforeach;?&gt;\n                    $data[&apos;count&apos;]  =  Person::all()-&gt;count();\n                    $data[&apos;occupation&apos;] = Occupation::get();//查询全部\n                    $data[&apos;department&apos;] = Department::all();//查询全部\n\n                    return view(&apos;demo.demo_index_database&apos;,$data);\n                    }\n\n                    public function addPerson(){\n                    $data[&apos;occupation&apos;] = Occupation::get();//查询全部\n                    $data[&apos;department&apos;] = Department::all();//查询全部\n                    return view(&apos;demo.demo_add_update_database&apos;,$data);\n                    }\n\n                    public function postAddPerson(){\n                    $person = new Person();\n                    //增加数据方式2\n                    $person-&gt;name = Request::input(&apos;name&apos;, &apos;default&apos;);//获取Post请求的数据\n                    $person-&gt;age = Request::input(&apos;age&apos;, 20);\n                    $person-&gt;sex = Request::input(&apos;sex&apos;, 0);\n                    $person-&gt;salary = Request::input(&apos;salary&apos;, 1800);\n                    $person-&gt;occ_id = Request::input(&apos;occ_id&apos;);\n                    $person-&gt;dep_id = Request::input(&apos;dep_id&apos;);\n                    $person-&gt;save();\n                    //$person-&gt;pid; 可获取到增加后的自动增长id.\n                    return redirect(&apos;myDatabase/Demo&apos;);\n                    }\n\n                    public function deletePerson($rid,$_token = &apos;&apos;){\n                    if(Session::token() !== $_token) {\n                        echo &apos;非法请求&apos;;\n                        return;\n                    }\n\n                    $person = Person::find($rid);\n                    $person-&gt;delete();\n                    return redirect(&apos;myDatabase/Demo&apos;);\n                    }\n\n                    //http://localhost/myDatabase/DemoUpdatePerson?pid=6&amp;_token=7jcZiP2wv0nIpxrA4KUqn9sBRaU7YXpcc8M0zrue\n                    public function updatePerson(){\n                    $_token = Input::get(&apos;_token&apos;);//获取get请求的数据\n                    if(Session::token()!=$_token){\n                        echo &apos;非法请求&apos;;\n                        return ;\n                    }\n                    $pid = Input::get(&apos;pid&apos;);\n\n                    $data[&apos;person&apos;] = Person::find($pid);\n                    $data[&apos;occupation&apos;] = Occupation::all();//查询全部\n                    $data[&apos;department&apos;] = Department::get();//查询全部\n                    return view(&apos;demo.demo_add_update_database&apos;,$data);\n                    }\n\n                    public function postUpdatePerson(){\n                    $person = Person::find(Request::input(&apos;pid&apos;));\n                    if(!$person){\n                        echo &apos;修改错误&apos;;\n                        return;\n                    }\n\n                    //修改数据方式\n                    $person-&gt;name = Request::input(&apos;name&apos;);\n                    $person-&gt;age = Request::input(&apos;age&apos;);\n                    $person-&gt;sex = Request::input(&apos;sex&apos;);\n                    $person-&gt;salary = Request::input(&apos;salary&apos;);\n                    $person-&gt;occ_id = Request::input(&apos;occ_id&apos;);\n                    $person-&gt;dep_id = Request::input(&apos;dep_id&apos;);\n                    $person-&gt;save();\n                    return redirect(&apos;myDatabase/Demo&apos;);\n                    }\n                }\n\n        路由:\n            app/Http/routes.php\n\n                //显示列表 http://localhost/myDatabase/Demo\n                Route::get(&apos;myDatabase/Demo&apos;,&apos;DemoDataBaseController@index&apos;);\n                //增加数据\n                Route::get(&apos;myDatabase/DemoAddPerson&apos;,&apos;DemoDataBaseController@addPerson&apos;);\n                Route::post(&apos;myDatabase/DemoAddPerson&apos;,&apos;DemoDataBaseController@postAddPerson&apos;);\n                //删除数据 使用函数参数方式并参数使用正则匹配.\n                Route::get(&apos;myDatabase/DemoDeletePerson/{pid}/{_token}&apos;,&apos;DemoDataBaseController@deletePerson&apos;)-&gt;where([&apos;pid&apos; =&gt; &apos;[0-9]+&apos;]);\n                //更新数据 此处使用获取get请求的方式获取数据\n                Route::get(&apos;myDatabase/DemoUpdatePerson&apos;,&apos;DemoDataBaseController@updatePerson&apos;);\n                Route::post(&apos;myDatabase/DemoUpdatePerson&apos;,&apos;DemoDataBaseController@postUpdatePerson&apos;);\n\n                //scrf验证\n                Route::filter(&apos;csrf&apos;,function(){\n                    if (Session::token() !== Input::get(&apos;_token&apos;)) {\n                    throw new Illuminate\\Session\\TokenMismatchException;\n                    }\n                });\n\n        视图:\n            resources/views/demo/demo_index_database.blade.php 显示列表\n                &lt;html&gt;\n                &lt;head&gt;\n                    &lt;meta charset=&quot;utf-8&quot;&gt;\n                    &lt;title&gt;MyView&lt;/title&gt;\n                    &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/style.css&quot;&gt;\n                &lt;/head&gt;\n                &lt;body&gt;\n                @include(&apos;components.myHead&apos;)\n\n                &lt;h1&gt;resources/views/demo_database.blade.php&lt;/h1&gt;\n\n                调用函数@{{csrf_token}} 跨站点请求伪造保护码\n                {{csrf_token()}} 等同于 &lt;?php echo csrf_token();?&gt;\n\n                &lt;table   border=&quot;1px&quot; cellpadding=&quot;2px&quot;  cellspacing=&quot;1px&quot; bgcolor=&quot;#FFFFF0&quot;&gt;\n                    &lt;tr align=&quot;center&quot;&gt;\n                    &lt;td&gt;pid(count:{{$count}})&lt;/td&gt;\n                    &lt;td&gt;name&lt;/td&gt;\n                    &lt;td&gt;age&lt;/td&gt;\n                    &lt;td&gt;sex&lt;/td&gt;\n                    &lt;td&gt;salary&lt;/td&gt;\n                    &lt;td&gt;occ_id&lt;/td&gt;\n                    &lt;td&gt;dep_id&lt;/td&gt;\n                    &lt;td&gt;操作&lt;/td&gt;\n                    &lt;/tr&gt;\n                    @foreach($person as $p)\n                    &lt;tr align=&quot;center&quot;&gt;\n                    &lt;td&gt;{{$p->pid}}&lt;/td&gt;\n                    &lt;td&gt;{{$p->name}}&lt;/td&gt;\n                    &lt;td&gt;&lt;?php echo $p-&gt;age?&gt;&lt;/td&gt;\n                    &lt;td&gt;{{$p->sex==0?'男':'女'}}&lt;/td&gt;\n                    &lt;td&gt;{{$p->salary}}&lt;/td&gt;\n                    &lt;td&gt;{{$p->occupation->name}}&lt;/td&gt;&lt;!--连表查询,预载入的关联对象--&gt;\n                    &lt;td&gt;{{$p->department->name}}&lt;/td&gt;\n                    &lt;td&gt;&lt;a href=&quot;{{url('myDatabase/DemoUpdatePerson?pid='.$p->pid.'&_token='.csrf_token())}}&quot;&gt;修改&lt;/a&gt; &amp;nbsp &lt;a href=&quot;{{url('myDatabase/DemoDeletePerson').'/'.$p->pid .'/'.csrf_token()}}&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;\n                    &lt;/tr&gt;\n                    @endforeach\n\n                    @if($person-&gt;render())\n                    &lt;tr &gt;&lt;td colspan=&quot;9&quot; align=&quot;center&quot; width=&quot;100%&quot;&gt;&lt;?php echo $person-&gt;render(); ?&gt;&lt;!--分页--&gt;&lt;/td&gt;&lt;/tr&gt;\n                    @endif\n                &lt;/table&gt;\n\n                &lt;div style=&quot;clear: both&quot;&gt;&lt;/div&gt;\n\n                &lt;a href=&quot;{{url('myDatabase/DemoAddPerson')}}&quot;&gt;增加&lt;/a&gt;\n\n                &lt;hr&gt;\n\n                &lt;/body&gt;\n                &lt;/html&gt;\n\n            resources/views/demo/demo_add_update_database.blade.php 增加/修改页\n                &lt;html&gt;\n                &lt;head&gt;\n                    &lt;meta charset=&quot;utf-8&quot;&gt;\n                    &lt;title&gt;{{empty($person)?'增加':'更新'}}数据&lt;/title&gt;\n                    &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/style.css&quot;&gt;\n                &lt;/head&gt;\n                &lt;body&gt;\n\n                &lt;form action=&quot;{{empty($person)?url('myDatabase/DemoAddPerson'):url('myDatabase/DemoUpdatePerson')}}&quot; method=&quot;post&quot; &gt;\n                    &lt;input type=&quot;hidden&quot; name=&quot;_token&quot; value=&quot;{{csrf_token()}}&quot;&gt;\n                    &lt;?php echo empty($person)?&apos;&apos;:&apos;&lt;input type=&quot;hidden&quot; name=&quot;pid&quot; value=&quot;&apos;.$person-&gt;pid.&apos;&quot;&gt;&apos; ;?&gt;\n                    &lt;table border=&quot;1px&quot; cellpadding=&quot;2px&quot;  cellspacing=&quot;1px&quot; bgcolor=&quot;#FFFFF0&quot;&gt;\n                    &lt;tr&gt;&lt;td&gt;名称&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;{{empty($person)?'':$person->name}}&quot;/&gt;&lt;/td&gt;&lt;/tr&gt;\n                    &lt;tr&gt;&lt;td&gt;年龄&lt;/td&gt;&lt;td&gt;\n                        &lt;select name=&quot;age&quot; &gt;\n                            @for ($i = 1; $i &lt;= 110; $i++)\n                            &lt;option value=&quot;{{ $i }}&quot; &lt;?php echo $i==(empty($person)?24:$person-&gt;age) ?&apos;selected=&quot;selected&quot;&apos;:&apos;&apos;?&gt;&gt;{{ $i }}&lt;/option&gt;\n                            @endfor\n                        &lt;/select&gt;\n                        &lt;/td&gt;&lt;/tr&gt;\n                    &lt;tr&gt;&lt;td&gt;性别&lt;/td&gt;&lt;td&gt;\n                        &lt;select name=&quot;sex&quot;&gt;\n                            &lt;option value=&quot;0&quot; &lt;?php echo empty($person)?&apos;selected=&quot;selected&quot;&apos;:$person-&gt;sex==0?&apos;selected=&quot;selected&quot;&apos;:&apos;&apos;?&gt;&gt;男&lt;/option&gt;\n                            &lt;option value=&quot;1&quot; &lt;?php echo empty($person)?&apos;&apos;:$person-&gt;sex==1?&apos;selected=&quot;selected&quot;&apos;:&apos;&apos;?&gt;&gt;女&lt;/option&gt;\n                        &lt;/select&gt;\n                        &lt;/td&gt;&lt;/tr&gt;\n                    &lt;tr&gt;&lt;td&gt;薪资&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;salary&quot; value=&quot;{{empty($person)?'':$person->salary}}&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;\n                    &lt;tr&gt;&lt;td&gt;职业&lt;/td&gt;&lt;td&gt;\n                        &lt;select name=&quot;occ_id&quot;&gt;\n                            @for($i = 0 ; $i&lt; count($occupation);$i++)\n                            &lt;option value=&quot;{{$occupation[$i]->occ_id}}&quot; &lt;?php echo empty($person)?&apos;&apos;:$occupation[$i]-&gt;occ_id==($person-&gt;occ_id)?&apos;selected=&quot;selected&quot;&apos;:&apos;&apos;?&gt;&gt;{{$occupation[$i]->name}}&lt;/option&gt;\n                            @endfor\n                            {{--@foreach($occupation as $occ)--}}\n                            {{--<option value=\"{{$occ->occ_id}}&quot; &gt;{{$occ->name}}&lt;/option&gt;--}}\n                            {{--@endforeach--}}\n                        &lt;/select&gt;\n                        &lt;/td&gt;&lt;/tr&gt;\n                    &lt;tr&gt;&lt;td&gt;部门&lt;/td&gt;&lt;td&gt;\n                        &lt;select name=&quot;dep_id&quot; &gt;\n                            @for($i = 0 ; $i&lt; count($department);$i++)\n                            &lt;option value=&quot;{{$department[$i]->dep_id}}&quot; &lt;?php echo empty($person)?&apos;&apos;:$department[$i]-&gt;dep_id==($person-&gt;dep_id)?&apos;selected=&quot;selected&quot;&apos;:&apos;&apos;?&gt;&gt;{{$department[$i]->name}}&lt;/option&gt;\n                            @endfor\n                            {{--@foreach($department as $dep)--}}\n                            {{--<option value=\" {{$dep-=\"\">dep_id}}&quot; &gt;{{$dep->name}}&lt;/option&gt;--}}\n                            {{--@endforeach--}}\n                        &lt;/select&gt;\n                        &lt;/td&gt;&lt;/tr&gt;\n                    &lt;tr&gt;&lt;td colspan=&quot;2&quot; align=&quot;center&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;{{empty($person)?'增加':'更新'}}&quot;&gt;&amp;nbsp&lt;input type=&quot;reset&quot; value=&quot;重置&quot;&gt;&lt;/td&gt;&lt;/tr&gt;\n                    &lt;/table&gt;\n                &lt;/form&gt;\n\n                &lt;/body&gt;\n                &lt;/html&gt;\n</option></code></pre><h1 id=\"请求\"><a href=\"#请求\" class=\"headerlink\" title=\"请求\"></a><a id=\"请求\"></a>请求</h1><pre><code>Demo:\n    控制器:\n        app/Http/Controlers/DemoMyRequestController.php \n            &lt;?php namespace App\\Http\\Controllers;\n\n            use App\\Http\\Requests;\n            use App\\Http\\Controllers\\Controller;\n\n            use Illuminate\\Support\\Facades\\Input;\n            use Illuminate\\Support\\Facades\\Request;\n            use Illuminate\\Support\\Facades\\Session;\n\n            class DemoMyRequestController extends Controller{\n\n                //请求\n                public function myrequest(){\n                //获取表单发送过来的所有数据,不管是get,post还是其它请求的数据.\n                $input = Request::all();//返回json数据\n                var_dump($input);\n                echo &apos;&lt;br&gt;&apos;;\n\n                $value = Request::query();//获取get请求?后面的所有参数\n                var_dump($value);\n                echo &apos;&lt;br&gt;&apos;;\n                $value = Request::query(&apos;name&apos;);//获取get请求后面的指定参数\n                var_dump($value);\n                echo &apos;&lt;br&gt;&apos;;\n\n                //get请求方式,如果没有name键则取默认值comtu\n                $value = Request::get(&apos;name&apos;,&apos;comtu&apos;);\n                var_dump($value);\n                echo &apos;&lt;br&gt;&apos;;\n\n                //-----判断-------\n                //判断参数是否存在返回布尔值\n                $bool = Request::has(&apos;name&apos;);\n                var_dump($bool);\n                echo &apos;&lt;br&gt;&apos;;\n\n                //http://localhost/myrequest?name=&amp;age=11\n                //检查是否存在键,有则返回true,不检查键对应的值是否存在.\n                $bool = Request::exists(&apos;name&apos;);\n                var_dump($bool);\n                echo &apos;&lt;br&gt;&apos;;\n\n                //-------请求检索-------\n                //过滤值,只取对应的键值\n                $value = Request::only(&apos;name&apos;);\n                var_dump($value);\n                echo &apos;&lt;br&gt;&apos;;\n                $value = Request::only(&apos;name&apos;,&apos;age&apos;);//如果有多个参数,则只取这两个值\n                var_dump($value);\n                echo &apos;&lt;br&gt;&apos;;\n\n                //过滤值,除了对应的键不取,其它数据获取,用法与only类似\n                $value = Request::except(&apos;name&apos;);\n                var_dump($value);\n                echo &apos;&lt;br&gt;&apos;;\n\n                //-----------url---------\n                //返回请求的url前缀_不包括参数\n                $url = Request::url();\n                var_dump($url);\n                echo &apos;&lt;br&gt;&apos;;\n\n                //返回请求的全部url_包含参数\n                $url = Request::fullUrl();\n                var_dump($url);\n                echo &apos;&lt;br&gt;&apos;;\n\n                //----------请求历史----------\n                //将请求的所有数据存储到session数据中.\n                Request::flash();\n                //Request::flashOnly(&apos;name&apos;);//只存储指定的键值\n                //Request::flashExcept(&apos;name&apos;);//除了指定的键值,其它都存储\n\n                //返回上一次请求的数据,可在不同页面中获取,前提是需要调用了Request::flash()\n                $value = Request::old();//可用于保存用户提交失败时恢复历史数据的功能\n                var_dump($value);\n\n                /*\n                请求: http://localhost/myrequest?name=comtu&amp;age=11\n\n                array(2) { [&quot;name&quot;]=&gt; string(5) &quot;comtu&quot; [&quot;age&quot;]=&gt; string(2) &quot;11&quot; }\n                array(2) { [&quot;name&quot;]=&gt; string(5) &quot;comtu&quot; [&quot;age&quot;]=&gt; string(2) &quot;11&quot; }\n                string(5) &quot;comtu&quot;\n                string(5) &quot;comtu&quot;\n                bool(true)\n                bool(true)\n                array(1) { [&quot;name&quot;]=&gt; string(5) &quot;comtu&quot; }\n                array(2) { [&quot;name&quot;]=&gt; string(5) &quot;comtu&quot; [&quot;age&quot;]=&gt; string(2) &quot;11&quot; }\n                array(1) { [&quot;age&quot;]=&gt; string(2) &quot;11&quot; }\n                string(26) &quot;http://localhost/myrequest&quot;\n                string(44) &quot;http://localhost/myrequest?age=11&amp;name=comtu&quot;\n                array(2) { [&quot;name&quot;]=&gt; string(5) &quot;comtu&quot; [&quot;age&quot;]=&gt; string(2) &quot;11&quot; }\n                */\n\n                /*\n                  请求http://localhost/myrequest?nae=comtu&amp;age=11\n                array(2) { [&quot;nae&quot;]=&gt; string(5) &quot;comtu&quot; [&quot;age&quot;]=&gt; string(2) &quot;11&quot; }\n                array(2) { [&quot;nae&quot;]=&gt; string(5) &quot;comtu&quot; [&quot;age&quot;]=&gt; string(2) &quot;11&quot; }\n                NULL\n                string(5) &quot;comtu&quot;\n                bool(false)\n                bool(false)\n                array(1) { [&quot;name&quot;]=&gt; NULL }\n                array(2) { [&quot;name&quot;]=&gt; NULL [&quot;age&quot;]=&gt; string(2) &quot;11&quot; }\n                array(2) { [&quot;nae&quot;]=&gt; string(5) &quot;comtu&quot; [&quot;age&quot;]=&gt; string(2) &quot;11&quot; }\n                string(26) &quot;http://localhost/myrequest&quot;\n                string(43) &quot;http://localhost/myrequest?age=11&amp;nae=comtu&quot;\n                array(2) { [&quot;name&quot;]=&gt; string(5) &quot;comtu&quot; [&quot;age&quot;]=&gt; string(2) &quot;11&quot; }\n                */\n                }\n\n                //显示上传页面\n                public function uploadFile(){\n                return view(&apos;demo.demo_index_MyRequest&apos;);\n                }\n\n                //提交上传数据\n                public function postUploadFile(){\n                //返回post上来的数据 返回数组\n                var_dump(Request::file());\n                echo &apos;&lt;br&gt;&apos;; echo &apos;&lt;br&gt;&apos;;\n\n                //返回对象\n                var_dump(Request::file(&apos;my_file&apos;));\n                echo &apos;&lt;br&gt;&apos;; echo &apos;&lt;br&gt;&apos;;\n\n                //返回布尔值,是否包含文件\n                $bool = Request::hasFile(&apos;my_file&apos;);\n                var_dump($bool);\n                echo &apos;&lt;br&gt;&apos;; echo &apos;&lt;br&gt;&apos;;\n\n                //返回文件大小\n                $size = Request::file(&apos;my_file&apos;)-&gt;getClientSize();\n                var_dump($size);\n                echo &apos;&lt;br&gt;&apos;; echo &apos;&lt;br&gt;&apos;;\n\n                //返回上传时的文件名\n                $name = Request::file(&apos;my_file&apos;)-&gt;getClientOriginalName();\n                var_dump($name);\n                echo &apos;&lt;br&gt;&apos;; echo &apos;&lt;br&gt;&apos;;\n\n                //返回文件格式\n                $extension = Request::file(&apos;my_file&apos;)-&gt;getClientOriginalExtension();\n                var_dump($extension);\n                echo &apos;&lt;br&gt;&apos;; echo &apos;&lt;br&gt;&apos;;\n\n                //判断上传的文件是否有效\n                if (Request::file(&apos;my_file&apos;)-&gt;isValid()){\n                    //移动上传的文件到指定目录 人在public目录下自动创建uploads目录并把文件存储到当前目录中.\n                    $destinationPath = &apos;uploads/&apos;;\n                    Request::file(&apos;my_file&apos;)-&gt;move($destinationPath, uniqid().&apos;.&apos;.$extension); //md5 uniqid 唯一标识\n                }\n                }\n\n\n            }\n\n    路由:\n        app/Http/routes.php    \n\n            //http://localhost/myrequest\n            //http://localhost/myrequest?name=&amp;age=11\n            //http://localhost/myrequest?name=comtu&amp;age=11\n            //http://localhost/myrequest?na2me=comtu&amp;age=11\n            Route::any(&apos;myrequest&apos;,&apos;DemoMyRequestController@myrequest&apos;);\n\n            //文件上传\n            Route::any(&apos;uploadFile&apos;,&apos;DemoMyRequestController@uploadFile&apos;);\n            Route::post(&apos;uploadFile&apos;,&apos;DemoMyRequestController@postUploadFile&apos;);\n\n    视图:\n        resources/views/demo/demo_index_MyRequest.blade.php\n            &lt;html&gt;\n            &lt;head&gt;\n                &lt;meta charset=&quot;utf-8&quot;&gt;\n                &lt;title&gt;MyView&lt;/title&gt;\n                &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/style.css&quot;&gt;\n            &lt;/head&gt;\n            &lt;body&gt;\n            {{--<form action=\"uploadFile\" method=\"post\" enctype=\"application/x-www-form-urlencoded\">--}}\n                &lt;form action=&quot;uploadFile&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;\n                &lt;input type=&quot;hidden&quot; name=&quot;_token&quot; value=&quot;{{csrf_token()}}&quot;&gt;\n                &lt;fieldset style=&quot;width:230px&quot; &gt;\n                &lt;legend&gt;上传文件&lt;/legend&gt;\n                选择文件:&lt;input type=&quot;file&quot; name=&quot;my_file&quot; multiple /&gt;  &lt;br /&gt;\n                {{--选择文件:<input type=\"file\" name=\"my_file\">  <br>--}}\n                &lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;\n                &lt;/fieldset&gt;\n            &lt;/form&gt;\n            &lt;/body&gt;\n            &lt;/html&gt;\n</form></code></pre><h1 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a><a id=\"Session\"></a>Session</h1><pre><code>方式一:使用文件.(默认)\n    .env文件中配置Session存储方式\n        CACHE_DRIVER=file\n        SESSION_DRIVER=file\n        QUEUE_DRIVER=sync\n\n方式二:使用数据库\n    .env文件中配置Session存储方式\n        CACHE_DRIVER=file\n        SESSION_DRIVER=database\n        QUEUE_DRIVER=sync\n    使用PHPStorm自带的lerminal工具或者计算机命令行cmd定位到项目目录下.\n\n    使用命令生成数据库表:\n        php artisan session:table\n\n        E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel&gt;php artisan session:table\n\n        当输出 Migration created successfully!时 \n        可查看到database/migrations目录下会新创建一个PHP文件类名为CreateSessionTable\n\n        再输入 composer dump-autoload\n            当输出 Generating autoload files 表示成功.\n\n        再输入 php artisan migrate    \n            当输出如下表示成功\n            Migrated: 2015_11_02_092311_create_session_table\n\n        查看数据库表多了一个sessions表\n            里面有id , payload , last_activity 三个字段\n        注: 执行php artisan migrate时有异常可查看&quot;我遇到的错误解决问题&quot;\n\n\n        生成表之后就可以使用Session了`~增删改查都无需要人工控制.\n\n控制器\n    app/Http/Controlers/DemoSessionController.php\n        &lt;?php namespace App\\Http\\Controllers;\n        use App\\Http\\Controllers\\Controller;\n        use Illuminate\\Support\\Facades\\Session;\n        class DemoSessionController extends Controller{\n\n            public function session(){\n            //查看全部Session数据\n            var_dump(Session::all());\n\n            /*\n             起初Session就有默认值\n            _previous : 上一次请求的地址\n            flash: 保存的数据\n            old:历史数据\n            new:新数据\n            例:\n             array:3 [▼\n              &quot;_token&quot; =&gt; &quot;7jcZiP2wv0nIpxrA4KUqn9sBRaU7YXpcc8M0zrue&quot;\n              &quot;_previous&quot; =&gt; array:1 [▼\n                &quot;url&quot; =&gt; &quot;http://localhost/uploadFile&quot;\n              ]\n              &quot;flash&quot; =&gt; array:2 [▼\n                &quot;old&quot; =&gt; []\n                &quot;new&quot; =&gt; []\n              ]\n            ]\n             */\n            echo &apos;&lt;br&gt;&apos;; echo &apos;&lt;br&gt;&apos;;\n\n            //增加/修改Session _ 方式一\n            Session::put(&apos;username&apos;,&apos;comtu&apos;);\n\n            //增加Session _ 方式二\n            session([&apos;username&apos;=&gt;&apos;comtu1&apos;]);\n\n            //获取值_不删除\n            $username = Session::get(&apos;username&apos;);\n            //获取值_后删除_只用一次\n            $username = Session::pull(&apos;username&apos;);\n            var_dump($username);\n            echo &apos;&lt;br&gt;&apos;; echo &apos;&lt;br&gt;&apos;;\n\n            //判断是否存在\n            $bool = Session::has(&apos;username&apos;);\n            var_dump($bool);\n\n            //删除Session值\n            $value = Session::forget(&apos;username&apos;);\n            var_dump($value);\n            }\n        }\n\n路由\n    app/Http/routes.php    \n        Route::any(&apos;session&apos;,&apos;DemoSessionController@session&apos;);\n</code></pre><h1 id=\"表单验证\"><a href=\"#表单验证\" class=\"headerlink\" title=\"表单验证\"></a><a id=\"表单验证\"></a>表单验证</h1><pre><code>需要引入use Request,Validator; 包\n$validator = Validator::make(数据,规则,自定义错误信息);\n$validator-&gt;fails();验证表单\n$validator-&gt;errors();//获取错误信息\n\n例:修改8.数据库中的Demo\n    public function postAddPerson(){\n    //存储提交数据到Session\n    Request::flash(); //见9.请求\n\n    //必填 required\n    //长度 between:最小,最大\n    //最小长度 min:4\n    //最大长度 max:16\n    //数字 numeric\n    //唯一性 unique:表名 会自动查询表对应字段是否存在有当前值\n    //检查值是否在table表中column字段中存在 exists:table,column 自动查询table表column字段是否包含值\n    //更多配置 http://laravel-china.org/docs/5.0/validation\n\n    //表单验证请求\n    $rq = Request::all();\n    $rules = [//规则\n        &apos;name&apos; =&gt; &apos;required|between:4,16|unique:person&apos; ,\n        &apos;age&apos; =&gt; &apos;required|numeric&apos;,\n        &apos;sex&apos; =&gt; &apos;required|numeric&apos;,\n        &apos;salary&apos; =&gt; &apos;required|numeric&apos;,\n       &apos;occ_id&apos; =&gt; &apos;required|numeric|exists:occupation,occ_id&apos;,\n        &apos;dep_id&apos; =&gt; &apos;required|numeric|exists:department,dep_id&apos;,\n    ];\n    $messages = [//自定义错误信息\n        &apos;required&apos; =&gt; &apos;The :attribute field is required.&apos;,\n        &apos;between&apos; =&gt; &apos;The :attribute must be between :min - :max.&apos;\n    ];\n    $validator = Validator::make($rq,$rules,$messages);//可三个参数\n    //$validator = Validator::make($rq,$rules);//可两个参数\n\n    if($validator-&gt;fails()){//表单验证\n        $person = new Person();//重新封装历史数据\n        $person-&gt;name = Request::old()[&apos;name&apos;];//表单验证失败,返回用户之前输入的信息\n        $person-&gt;age = Request::old()[&apos;age&apos;];\n        $person-&gt;sex = Request::old()[&apos;sex&apos;];\n        $person-&gt;salary = Request::old()[&apos;salary&apos;];\n        $person-&gt;occ_id = Request::old()[&apos;occ_id&apos;];\n        $person-&gt;dep_id = Request::old()[&apos;dep_id&apos;];\n\n        $data [&apos;person&apos;] = $person;\n        $data[&apos;occupation&apos;] = Occupation::get();\n        $data[&apos;department&apos;] = Department::all();\n        //错误信息 Illuminate\\Support\\MessageBag 对象类型 head($validator-&gt;get(&apos;key&apos;))获取键值\n        $data[&apos;validator&apos;] = $validator-&gt;errors();\n        return view(&apos;demo.demo_add_update_database&apos;,$data);\n    }\n\n    $person = new Person();\n    //增加数据方式2\n    $person-&gt;name = Request::input(&apos;name&apos;, &apos;default&apos;);//获取Post请求的数据\n    $person-&gt;age = Request::input(&apos;age&apos;, 20);\n    $person-&gt;sex = Request::input(&apos;sex&apos;, 0);\n    $person-&gt;salary = Request::input(&apos;salary&apos;, 1800);\n    $person-&gt;occ_id = Request::input(&apos;occ_id&apos;);\n    $person-&gt;dep_id = Request::input(&apos;dep_id&apos;);\n    $person-&gt;save();\n    return redirect(&apos;myDatabase/Demo&apos;);\n    }\n</code></pre><h1 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a><a id=\"中间件\"></a>中间件</h1><pre><code>HTTP 中间件提供一个方便的机制来过滤进入应用程序的 HTTP 请求，\n例如，Laravel 默认包含了一个中间件来检验用户身份验证，如果用户没有经过身份验证，\n中间件会将用户导向登录页面，然而，如果用户通过身份验证，中间件将会允许这个请求进一步继续前进。\n\n当然，除了身份验证之外，中间件也可以被用来执行各式各样的任务，CORS 中间件负责替所\n有即将离开程序的响应加入适当的响应头，一个日志中间件可以记录所有传入应用程序的请求。 \nLaravel 框架已经内置一些中间件，包括维护、身份验证、CSRF 保护，等等。\n所有的中间件都位于 app/Http/Middleware 目录内。\n\n使用步骤\n    1.创建中间件\n        使用命令: php artisan make:middleware AdminPrivilegeMiddleware\n        在app/Http/Middleware文件夹中创建中间件文件\n        如:AdminPrivilegeMiddleware.php\n            &lt;?php\n            namespace App\\Http\\Middleware;\n            use Closure;\n            use Illuminate\\Support\\Facades\\Session;\n            class AdminPrivilegeMiddleware\n            {\n                /**\n                 * Handle an incoming request.\n                 * @param  \\Illuminate\\Http\\Request  $request\n                 * @param  \\Closure  $next\n                 * @return mixed\n                 */\n                public function handle($request, Closure $next)\n                {\n                //权限认证\n                $bool = Session::has(&apos;admin_user&apos;);\n                if(!$bool)\n                    return redirect(&apos;admin/privilege/login&apos;);\n                return $next($request);\n                }\n            }\n    2.注册中间件 \n        在app/Http目录下的Kernel.php增加如下内容\n         protected $routeMiddleware = [\n            //注册中间件\n            &apos;auth.admin&apos; =&gt; \\App\\Http\\Middleware\\AdminPrivilegeMiddleware::class,\n         ];\n    3.使用中间件\n        在app/Http目录下的routes.php使用:\n        //中间件,权限控制\n        Route::group([&apos;middleware&apos; =&gt; &apos;auth.admin&apos;], function() {\n            Route::get(&apos;admin/main/index&apos;,&apos;admin\\MainController@index&apos;);\n            Route::get(&apos;admin/categroy/index&apos;,&apos;admin\\CategroyController@index&apos;);\n        }\n</code></pre><h1 id=\"哈希\"><a href=\"#哈希\" class=\"headerlink\" title=\"哈希\"></a><a id=\"哈希\"></a>哈希</h1><pre><code>可用于加密用户的敏感信息或者密码\n需要导入 use Illuminate\\Support\\Facades\\Hash; 包\n使用方法: \n    $password = &apos;123&apos;;\n    $pass = Hash::make($password);//加密\n    $password2 = &apos;123&apos;;\n    $bool = Hash:check($pass,$password2);检查是否相同\n</code></pre><h1 id=\"辅助函数\"><a href=\"#辅助函数\" class=\"headerlink\" title=\"辅助函数\"></a><a id=\"辅助函数\"></a>辅助函数</h1><pre><code>array 数组相关\n\n    head\n        $arr = [1,2,3];\n        $value = head($arr);//打印1 返回数组第一个元素\n\n    last \n        $arr = [1,2,3];\n        $value = last($arr);//打印3 返回数组第一个元素\n\n    array_only\n        $arr = [&apos;name&apos;=&gt;&apos;comtu&apos;,&apos;age&apos;=&gt;10,&apos;job&apos;=&gt;&apos;manager&apos;];\n        $value = array_only($arr,[&apos;name&apos;,&apos;age&apos;]);//返回数组中指定的数据\n        //打印 array(2) { [&quot;name&quot;]=&gt; string(5) &quot;comtu&quot; [&quot;age&quot;]=&gt; int(10) } \n\n    array_first //返回满足条件的第一条数据\n        $arr = [10,20,30];\n        $value = array_first($arr,function($key,$v){\n            return $v &gt;10; \n        });\n        //打印 20\n\n    array_add\n        $arr = [&apos;name&apos;=&gt;&apos;comtu&apos;,&apos;age&apos;=&gt;10];\n        $value = array_add($arr,&apos;job&apos;,&apos;manager&apos;);//给数组增加字段 \n        // 返回 [&apos;name&apos;=&gt;&apos;comtu&apos;,&apos;age&apos;=&gt;10,&apos;job&apos;=&gt;&apos;manager&apos;]\n\n    array_set //修改数组中对应的值\n        $arr = [&apos;start_time&apos;=&gt;&apos;2009-06-01&apos;,&apos;end_time&apos;=&gt;&apos;2014-11-30&apos;];\n        array_set($rq,&apos;start_time&apos;,strtotime(Request::input(&apos;start_time&apos;)));  //strtotime时间转时间戳\n        //返回 [&apos;start_time&apos;=&gt;1243814400,&apos;end_time&apos;=&gt;&apos;2014-11-30&apos;];;\n\n    array_except\n        $arr = [&apos;name&apos;=&gt;&apos;comtu&apos;,&apos;age&apos;=&gt;10,&apos;job&apos;=&gt;&apos;manager&apos;];\n        $value = array_except($arr,&apos;job&apos;);//返回数组中除指定键后的数据 \n        //返回 [&apos;name&apos;=&gt;&apos;comtu&apos;,&apos;age&apos;=&gt;10]\n\n    array_flatten\n        $arr = [\n            &apos;a&apos; =&gt;1,\n            &apos;b&apos; =&gt;[\n                &apos;a&apos;=&gt;2,\n                &apos;b&apos;=&gt;3\n                ]\n            ];\n        $value = aray_flatten($arr);//返回$arr内的所有值 \n        //返回 array(3) { [0]=&gt; int(1) [1]=&gt; int(2) [2]=&gt; int(3) } \n\n    array_where\n        $arr = [&apos;name&apos; =&gt; &apos;comtu&apos;,&apos;age&apos;=&gt;18,&apos;job&apos;=&gt;&apos;manager&apos;];\n        $value = array_where($arr,function($k,$v){\n            return is_string($v);\n        });//返回满足条件的新数组 返回全是String类型的数据\n        //返回 [&apos;name&apos; =&gt; &apos;comtu&apos;,&apos;job&apos;=&gt;&apos;manager&apos;]\n\nPath 辅助函数\n    echo app_path();// 项目绝对路径 项目绝对路径\n        E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel\\app\n\n    echo config_path(); 项目下的配置目录的绝对路径\n        E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel\\config\n\n    echo public_path(); 项目下的public目录的绝对路径\n        E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel\\public\n\n    echo storage_path(); 项目下的storage目录的绝对路径\n        E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel\\storage\n\n\n字符串 辅助函数\n    str_plural 单词单数变复数\n        例如 $value = str_plural(&apos;apple&apos;); //返回apples\n             $value = str_plural(&apos;sheep&apos;);// 返回sheep \n             $value = str_plural(&apos;ability&apos;);// 返回abilities\n\n    starts_with\n        //字符串是否是与指定的内容开头\n        var_dump( starts_with(&apos;abcd&apos;,&apos;ab&apos;));//返回true\n\n    ends_with\n        //字符串是否是与指定的内容结束\n        var_dump( ends_with(&apos;abcd&apos;,&apos;b&apos;));//返回false\n\n    camel_case\n        //将字符串替换成驼峰命名法\n        echo camel_case(&apos;hello_world&apos;);//返回helloWorld\n\n    class_basename\n        //返回 命名空间的类名\n        echo class_basename(&apos;App\\Controller\\DemoDataBaseController&apos;);//返回DemoDataBaseController\n\n    str_limit\n        //限制字符串的长度_返回指定长度的字符串\n        echo str_limit(&apos;abcdefg&apos;,3);//返回abc... 后面有省略号\n\n    str_is\n        //判断字符串是否满足条件 是否是与ab开头e结尾_参数一是条件,参数二是判断的值\n        var_dump(str_is(&apos;ab*e&apos;,&apos;abcde&apos;)); //返回true\n</code></pre><h1 id=\"在-Laravel-中使用图片处理库-Integration-Image\"><a href=\"#在-Laravel-中使用图片处理库-Integration-Image\" class=\"headerlink\" title=\"在 Laravel 中使用图片处理库 Integration/Image\"></a><a id=\"图片处理库Integration/Image\"></a>在 Laravel 中使用图片处理库 Integration/Image</h1><pre><code>系统需求\n\n     PHP &gt;= 5.3\n     Fileinfo Extension\n     GD Library (&gt;=2.0) … or …\n     Imagick PHP extension (&gt;=6.5.7)\n\n安装部署 Integration/image\n\n    在 composer.json [require] 节增加&quot;&quot;intervention/image&quot;: &quot;2.*&quot;&quot;，之后执行 composer update 我当时下载的是2.3.2\n\n    如果出现错误信息: (PHP版本5.5.28)\n            E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\myLaravelShop&gt;composer update\n            &gt; php artisan clear-compiled\n            Loading composer repositories with package information\n            Updating dependencies (including require-dev)\n            Your requirements could not be resolved to an installable set of packages.\n\n              Problem 1\n                - Installation request for intervention/image 2.0.17 -&gt; \n                    satisfiable by intervention/image[2.0.17].\n                - intervention/image 2.0.17 requires ext-fileinfo * -&gt; \n                    the requested PHP extension fileinfo is missing from your system.\n        解决方法:\n            找到PHP环境目录 --&gt; 打开 php.ini 文件 找到 ;extension=php_fileinfo.dll (PHP5.5.28-nts 862行) \n            去除前面的;号~~重新运行即可. 会在后台下载,等待.\n\nLaravel 配置\n\n    安装部署 Integration/image 完成后，打开配置文件 config/app.php 在相应位置添加代码，\n    然后 Image 类就能自动加载并可供使用了。其功能强大到可以处理你的几乎所有图片处理需求。\n        //服务提供器 Laravel 5.1.23     在 providers  中配置\n         Intervention\\Image\\ImageServiceProvider::class,\n\n        //别名配置 Laravel 5.1.23  在 aliases 中配置 \n        &apos;Image&apos;     =&gt; Intervention\\Image\\Facades\\Image::class,\n\n配置设置\n    默认情况下， Integration/Image 使用PHP的GD库扩展。\n    如果你想切换到 imagick，你可以使用 php artisan 创建一个配置文件以添加相应的配置。\n    $ php artisan config:publish intervention/imag\n\n基本使用\n\n    这里列出几个基本功能，更详细使用说明请查看相关接口文档。\n    文档地址: http://image.intervention.io/  墙\n\n        Demo\n        //1、显示一张图片\n        Route::get(&apos;imageRead&apos;,function(){\n            $img = Image::make(public_path().&apos;/uploads/43195301.jpg&apos;);//读取图片\n            return $img-&gt;response();//返回图片资源在浏览器中显示\n        });\n\n        //2、创建缩略图\n        Route::get(&apos;imageThumbnail&apos;,function(){\n            if (!file_exists(public_path().&apos;/uploads/thumbnail&apos;)){ //创建文件夹\n            mkdir (public_path().&quot;/uploads/thumbnail&quot;);\n            }\n\n            $rawFilePath = public_path().&apos;/uploads/43195301.jpg&apos;;\n            $thumbnailFilePath = public_path().&apos;/uploads/thumbnail/&apos;.uniqid().&apos;.jpg&apos;;\n\n            //生成缩略图\n            $img = Image::make($rawFilePath);//读取图片文件\n            $img-&gt;resize(120,120);//缩略图大小 宽/高\n            $img-&gt;save($thumbnailFilePath);//需要保存在已有的目录中\n            echo $rawFilePath.&apos;生成缩略图到&apos;.$thumbnailFilePath;\n        });\n\n        //3、绘制一张图片\n        Route::get(&apos;imageCanvas&apos;,function(){\n            $img = Image::canvas(800, 600, &apos;#ccc&apos;);\n            return $img-&gt;response();\n        });\n\n        //4.插入一个水印\n        Route::get(&apos;imageInsert&apos;,function(){\n            $rawFilePath = public_path().&apos;/uploads/43195301.jpg&apos;;\n            $watermark = public_path().&apos;/uploads/563b24c067472.jpg&apos;;//水印\n            //top-left (default)\n            //top\n            //top-right\n            //left\n            //center\n            //right\n            //bottom-left\n            //bottom\n            //bottom-right\n            // $img-&gt;insert($watermark, &apos;bottom-right&apos;, 10, 10);//其它位置\n            // $img-&gt;insert($watermark, &apos;center&apos;);//中间\n            $img = Image::make($rawFilePath)-&gt;resize(800, 600)-&gt;insert($watermark);//打水印,默认左上角\n\n            return $img-&gt;response();\n        });\n\n\n    如果运行时页面中出现如下错误:\n        NotSupportedException in Driver.php line 18:\n        GD Library extension not available with this PHP installation.\n        in Driver.php line 18\n        at Driver-&gt;__construct() in ImageManager.php line 107\n        at ImageManager-&gt;createDriver() in ImageManager.php line 50\n        at ImageManager-&gt;make(&apos;/public/uploads/43195301.jpg&apos;) in Facade.php line 214\n        ....\n    解决方案\n        开启PHP的GD功能\n        找到PHP环境目录 --&gt; 打开 php.ini (PHP5.5.28-nts 863行) 文件 \n        找到 ;extension=php_gd2.dll 去除前面的;号~~重新启动服务运行即可. \n</code></pre><h1 id=\"我遇到的错误\"><a href=\"#我遇到的错误\" class=\"headerlink\" title=\"我遇到的错误\"></a><a id=\"我遇到的错误\"></a>我遇到的错误</h1><pre><code>链接数据库时异常.\n    //路由中,尝试连接数据库\n    Route::get(&apos;myDatabase&apos;,function(){\n        $name = DB::connection()-&gt;getDatabaseName();\n        echo $name; //打印出 数据库名 my_laravel 表示成功\n    });\n\n    PDOException in Connector.php line 47:\n    could not find driver\n    in Connector.php line 47\n    at PDO-&gt;__construct(&apos;mysql:host=localhost;dbname=my_laravel&apos;,\n    &apos;root&apos;, &apos;root&apos;, array(&apos;0&apos;, &apos;2&apos;, &apos;0&apos;, false, false)) in Connector.php line 47\n    .....\n\n    解决办法:\n    php环境中找到 php.ini文件并找到 ;extension=php_pdo_mysql.dll \n    并去除前面的;号.然后重启服务器.如apache 或者 关闭服务重新启动服务 php -S localhost:80 -t my_laravel\\public\n\nSession生成数据库表异常\n    错误原因1.可能存在冲突的表原因.\n        database/migrations 目录下的文件是需要生成的表.\n        如果出现错误警告,可查看当前目录下的文件是否是自己需求要创建的表.\n        如果里面存在冲突的表,如我当时有两个users表\n        查打开查看文件是否是自己的内容.如果不是.~~可删除文件,需要注意的是\n        删除后需要在    my_laravel/vendor/composer/autoload_classmap.php \n        文件中找到相同的一条记录一并删除重新执行即可.\n\n还有遇到的一些错误见功能模块,有解决方案\n</code></pre><h1 id=\"artisan命令\"><a href=\"#artisan命令\" class=\"headerlink\" title=\"artisan命令\"></a><a id=\"artisan命令\"></a>artisan命令</h1><pre><code>谨慎操作还原回清静 php artisan fresh\n\n创建控制器\n    php artisan make:controller MyController\n\n创建model\n    php artisan make:model User\n\n查看当前所有路由列表\n    php artisan route:list\n\n一整个程序停止解析(使用场景如,网站遇到攻击,网站需要维护等)\n    配置后访问网站的所有地址都会被跳转到Beright back\n    php artisan down \n    php artisan up\n\n生成Session数据库表\n    php artisan session:table  //1\n    composer dump-autoload     //2\n    php artisan migrate        //3\n\n创建中间件\n    php artisan make:middleware MyMiddleware\n</code></pre><p>英文文档<br><a href=\"http://laravel.com/docs/5.1\" target=\"_blank\" rel=\"external\">http://laravel.com/docs/5.1</a>   </p>\n<p>中文文档:<br><a href=\"http://www.golaravel.com/\" target=\"_blank\" rel=\"external\">http://www.golaravel.com/</a><br><a href=\"http://laravel-china.org/docs/5.0/middleware\" target=\"_blank\" rel=\"external\">http://laravel-china.org/docs/5.0/middleware</a><br><a href=\"http://www.golaravel.com/post/install-and-run-laravel-5-x-on-windows/\" target=\"_blank\" rel=\"external\">http://www.golaravel.com/post/install-and-run-laravel-5-x-on-windows/</a>   </p>\n<h1 id=\"Demo下载\"><a href=\"#Demo下载\" class=\"headerlink\" title=\"Demo下载\"></a><a id=\"Demo\"></a>Demo下载</h1><p>本博文的案例Demo下载地址如下:</p>\n<p><a href=\"/res/file/blog/2015/10/10/PHP_Laravel/laravel-v5.0.22_Demo.rar\">本文案例Demo</a></p>\n<p><a href=\"/res/file/blog/2015/10/10/PHP_Laravel/myLaravelShop_Demo.rar\">本文案例Demo_购物商场</a></p>\n<p>刚学PHP的两个框架Laravel与CI,个人对这两个框架的感觉如下~</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:left\">Laravel</th>\n<th style=\"text-align:right\">Codeigniter</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>开发效率</td>\n<td style=\"text-align:left\">★★★★</td>\n<td style=\"text-align:right\">★★★</td>\n</tr>\n<tr>\n<td>运行效率</td>\n<td style=\"text-align:left\">★★★</td>\n<td style=\"text-align:right\">★★★★</td>\n</tr>\n<tr>\n<td>学习成本</td>\n<td style=\"text-align:left\">★★☆</td>\n<td style=\"text-align:right\">★</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"<p>本人因公司的需要.学习PHP的Laravel框架.本博文为学习笔记.<br>本博文中包含有 <code>Laravel安装配置环境部署</code>,<code>路由</code>,<code>控制器</code>,<code>视图</code>,<code>模型</code>,<code>MVC</code> ,<code>数据库</code>,<code>请求</code>,<code>Session</code>,<code>表单研制</code>,<br><code>中间件</code>,<code>哈希</code>,<code>辅助函数</code>,以及<code>图片处理库Integration/Image</code>的使用.<code>artisan</code>常用命令等内容.   </p>","more":"<p>目录:</p>\n<ul>\n<li><a href=\"#安装Laravel\">安装Laravel</a></li>\n<li><a href=\"#Laravel目录结构\">Laravel目录结构</a></li>\n<li><a href=\"#路由\">路由</a></li>\n<li><a href=\"#控制器(Controller\">控制器(Controller)</a>)</li>\n<li><a href=\"#视图(Views\">视图(Views)</a>)</li>\n<li><a href=\"#模型(model\">模型(model)</a>)</li>\n<li><a href=\"#环境与部署\">环境与部署</a></li>\n<li><a href=\"#数据库\">数据库</a></li>\n<li><a href=\"#请求\">请求</a></li>\n<li><a href=\"#Session\">Session</a></li>\n<li><a href=\"#表单验证\">表单验证</a></li>\n<li><a href=\"#中间件\">中间件</a></li>\n<li><a href=\"#哈希\">哈希</a></li>\n<li><a href=\"#辅助函数\">辅助函数</a></li>\n<li><a href=\"#图片处理库Integration/Image\">在 Laravel 中使用图片处理库 Integration/Image</a></li>\n<li><a href=\"#我遇到的错误\">我遇到的错误</a></li>\n<li><a href=\"#artisan命令\">artisan命令</a></li>\n<li><a href=\"#Demo\">Demo</a></li>\n</ul>\n<h1 id=\"安装Laravel\"><a href=\"#安装Laravel\" class=\"headerlink\" title=\"安装Laravel\"></a><a id=\"安装Laravel\"></a>安装Laravel</h1><pre><code>1.1.下载安装PHP\n\n    http://windows.php.net/download/\n\n    IDE (https://www.jetbrains.com/phpstorm/)\n\n    本人使用的PHP版本为:php-5.5.28-nts\n    Laravel框架要求PHP 版本 &gt;= 5.4\n\n1.2.安装Composer \n\n    Composer  \n    官网: https://getcomposer.org/\n    GitHub: https://github.com/composer/composer\n    中文: http://www.phpcomposer.com/ 中国镜像\n\n    Composert官方下载地址: https://getcomposer.org/Composer-Setup.exe\n\n    如果出现如下安装错误:\n\n        Some settings on your machine make Composer unable to work properly.\n        Make sure that you fix the issues listed below and run this script again:\n        The openssl extension is missing, which means that secure HTTPS transfers are impossible.\n        If possible you should enable it or recompile php with --with-openssl\n\n        缺失openssl扩展\n\n        处理方式: \n            找到php目录下的php.ini文件(如果没有则把php.ini-development拷贝重命名为php.ini)\n            用编辑器打开 php.ini 文件，修改以下配置： \n            去掉 extension=php_mbstring.dll 前面的分号（888 行左右） \n            去掉 extension=php_openssl.dll 前面的分号（893 行左右） \n            去掉 extension_dir = &quot;ext&quot; 前面的分号（736 行左右）\n        然后重试即可.安装完全成后使用cmd输入composer显示如下内容表示安装成功.\n\n    C:\\Users\\comtu&gt;composer\n       ______\n      / ____/___  ____ ___  ____  ____  ________  _____\n     / /   / __ \\/ __ `__ \\/ __ \\/ __ \\/ ___/ _ \\/ ___/\n    / /___/ /_/ / / / / / / /_/ / /_/ (__  )  __/ /\n    \\____/\\____/_/ /_/ /_/ .___/\\____/____/\\___/_/\n                /_/\n\n    ....省略.....\n\n1.3.在项目中创建 Composer \n\n    使用cmd定位到项目目录下.如:\n        E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm&gt;\n\n    使用命令:\n        cmd(或者使用PHPStorm的Terminal本人使用的IDE就是PHPStorm)    \n\n        composer create-project laravel/laravel --prefer-dist my_laravel\n\n        回车后会自动下载laravel框架.下载目录生成在firstPHPStorm目录下.\n            laravel/laravel 指下载laravel目录下的laravel\n            --prefer-dist下载的文件为压缩过的.\n            my_laravel 为安装到的文件目录名(自定义).\n\n        如果没有代理下载速度就呵呵了.(本人大概花费15分钟左右时间.)\n        最后提示如下内容表示下载成功:\n            Application key [xxxxxxxxxxxxxxxxxxxx] set successfully. \n\n    一键安装包\n        故有了一键安装包.rar里面的内容就是通过命令下载下来的文件.免去了再龟速的下载.\n\n        Laravel一键安装包下载地址: http://www.golaravel.com/download/\n\n1.4.测试运行Laravel\n\n测试运行方式1:\n\n    cmd(或者使用PHPStorm的Terminal本人使用的IDE就是PHPStorm)\n\n    php -S localhost:80 -t my_laravel\\public\n\n    提示出现:\n        PHP 5.5.28 Development Server started at Sat Oct 10 10:20:28 2015\n        Listening on http://localhost:80\n        Document root is E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel\\public\n        Press Ctrl-C to quit.\n\n    打开浏览器:\n    地址栏输入:localhost\n    界面中显示出&quot;Laravel 5&quot;大字表示运行成功.\n\n    但如果你的是使用linux或者其它系统.如果出现浏览器显示出白屏或者其它内容.则可能是因为有两个文件夹的权限的原因\n    需要为 my_laravel/storage (日志,session,等目录)  与 my_laravel/vendor (Composer下载的支持库,或者自己的第三方库目录)\n    有写入的权限\n\n    Linux设置对应的权限命令如下:\n\n        chown -R apache:apache /var/www/my_laravel/storage\n        chown -R apache:apache /var/www/my_laravel/vendor\n\n\n测试运行方式2(PHP版本5.4之后的版本):\n\n    artisan 的 serve 命令还支持两个参数：\n\n    host 设置主机地址\n    port 设置 web server 监听的端口号\n    例如：php artisan serve --port=8888\n\n\n    cmd 定位目录到my_laravel 输入 php artisan serve (PHP5.4之后开始支持内置web Server 同时Laravel也支持)\n    E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel&gt;php artisan serve 回车(默认8000接口可指定)\n    Laravel development server started on http://localhost:8000/ 提示\n\n    打开浏览器，在地址栏输入 localhost:8000 于方式1运行出相同的效果.\n\n    如你电脑上有运行Apache 并且端口也是8000那么会出现如下提示,需要关闭Apache或者指定其它接口后再试.\n    [Sat Oct 10 10:39:21 2015] Failed to listen on localhost:8000 \n    (reason: 以一种访问权限不允许的方式做了一个访问套接字的尝试。)\n</code></pre><h1 id=\"Laravel目录结构\"><a href=\"#Laravel目录结构\" class=\"headerlink\" title=\"Laravel目录结构\"></a><a id=\"Laravel目录结构\"></a>Laravel目录结构</h1><pre><code>本学习笔记使用到的文件目录\n\nmy_laravel\n    |--&gt;app\n    |    |---&gt;Http \n    |    |     |----&gt;Controllers 控制器目录\n    |    |     |       |-----&gt; 控制器文件\n    |    |     |----&gt;Middleware\n    |    |     |       |-----&gt; 中间件文件\n    |    |     |----&gt;routes.php 路由配置文件\n    |    |     |----&gt;Kernel.php 中间件配置文件\n    |    |---&gt; 根目录Model默认目录\n    |--&gt;bootstrap\n    |--&gt;config  配置文件\n    |    |--&gt; app.php\n    |    |--&gt; database.php\n    |    |--&gt; ....\n    |--&gt;database 数据库\n    |--&gt;public 对外开放目录\n    |--&gt;resources\n    |    |---&gt;views 视图View目录\n    |          |----&gt;xxxx.blade.php 视图文件\n    |          |----&gt;errors 目录\n    |                  |-----&gt; 503.blade.php 文件当artisan命令使用 php artisan down 时会网站全部连接转向此文件.\n    |--&gt;storage 日志,session等缓存目录\n    |--&gt;tests \n    |--&gt;vendor 自己的第三方库目录与Composer下载的支持库\n    |    |---&gt;laravel 框架目录\n    |    |---&gt;intervention 图片处理库,需要下载\n    |--&gt;.env 文件 环境配置文件.\n    |--&gt;Composer.json 环境库配置文件 \n</code></pre><h1 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a><a id=\"路由\"></a>路由</h1><pre><code>路由作用是宏观的分发和限制请求\n\nhttp://laravel-china.org/docs/5.0/routing 中文文档\n\nhttp://laravel.com/docs/5.0/routing 原版文档\nhttp://laravel.com/docs/5.1/routing 原版文档\n\n3.1 配置基本路由\n    文件目录:my_laravel/app/Http/routes.php    \n\n    选择get/post/any 等等\n        一般get是向服务器要数据\n        post是向服务器发数据\n        any就是通过全部请求类型\n\n    //get\n        Route::get(&apos;/&apos;,&apos;WelcomeController@index&apos;);\n        //意思是如果通过get访问/域名就交给WelcomeController控制器的index方法进行处理.\n\n        //通过 http://localhost/home 访问.可进入到登录页面\n        Route::get(&apos;home&apos;, &apos;HomeController@index&apos;);\n\n        也可以使用函数的方式直接返回视图(可加快测试速度)\n\n        Route::get(&apos;/&apos;,    function () {\n                return view(&apos;welcome&apos;);\n                //视图文件目录位于:my_laravel/resources/views/welcome.blade.php\n            }\n        );\n        //意思是如果访问/域名 显示视图welcome\n\n    //post方式 路由使用函数\n        Route::post(&apos;test&apos;,function (){\n            return view(&apos;welcome&apos;);\n        });\n\n    //any(不管用什么方式get/post等请求都通过),对于不敏感的信息都可以使用这种模式.\n        Route::any(&apos;testAny&apos;,function (){\n            return &apos;any请求,注册路由响应所有 HTTP 请求&apos;;\n        });\n\n    //match 为多种请求注册路由\n        Route::match([&apos;get&apos;, &apos;post&apos;], &apos;/&apos;, function()\n        {\n            return &apos;Hello World&apos;;\n        });\n\n    //resource 请求控制器中的所有方法\n        //http://localhost/user\n        //http://localhost/user/create\n        //http://localhost/user/destroy\n        //http://localhost/user/update\n        //http://localhost/user/show\n        //资源 不用像WelcomeController@index指定方法,直接可以调用. 但在项目中不够灵活.\n        Route::resource(&apos;user&apos;,&apos;UserController&apos;);\n\n3.2 CSRF保护\n    跨站攻击保护机制(跨网站请求伪造))\n    例如:原本一个post请求的链接,用户使用第三方工具(如chrome浏览器的Postman插件)伪造post请求\n    有CSRF则会对这种请求进行拦截.\n\n3.3 路由传参\n    基础路由参数\n        Route::get(&apos;user/{id}&apos;, function($id){\n            return &apos;User &apos;.$id;\n        });\n\n    可选择的路由参数\n        Route::get(&apos;user/{name?}&apos;, function($name = null){\n            return $name;\n        });\n\n    带默认值的路由参数    \n        Route::get(&apos;user/{name?}&apos;, function($name = &apos;John&apos;){\n            return $name;\n        });\n\n    使用正则表达式限制参数\n        Route::get(&apos;user/{name}&apos;, function($name){\n            //\n        })\n        -&gt;where(&apos;name&apos;, &apos;[A-Za-z]+&apos;);\n\n        Route::get(&apos;user/{id}&apos;, function($id){\n            //\n        })\n        -&gt;where(&apos;id&apos;, &apos;[0-9]+&apos;);\n\n    使用条件限制数组\n        Route::get(&apos;user/{id}/{name}&apos;, function($id, $name){\n            //\n        })\n        -&gt;where([&apos;id&apos; =&gt; &apos;[0-9]+&apos;, &apos;name&apos; =&gt; &apos;[a-z]+&apos;]);\n\n    定义全局模式\n        如果你想让特定路由参数总是遵询特定的正则表达式，可以使用 pattern 方法。在 RouteServiceProvider 的 boot 方法里定义模式：\n\n        $router-&gt;pattern(&apos;id&apos;, &apos;[0-9]+&apos;);\n        定义模式之后，会作用在所有使用这个特定参数的路由上：\n\n        Route::get(&apos;user/{id}&apos;, function($id)\n        {\n            // 只有 {id} 是数字才被调用。\n        });\n\n    取得路由参数\n\n        如果需要在路由外部取得其参数，使用 input 方法：\n\n        if ($route-&gt;input(&apos;id&apos;) == 1){\n            //\n        }\n        你也可以使用 Illuminate\\Http\\Request 实体取得路由参数。\n        当前请求的实例可以通过 Request facade 取得，或透过类型提示 Illuminate\\Http\\Request 注入依赖：\n\n        use Illuminate\\Http\\Request;\n\n        Route::get(&apos;user/{id}&apos;, function(Request $request, $id){\n            if ($request-&gt;route(&apos;id&apos;)){\n            //\n            }\n        });\n\n\n还有如:    方法欺骗 , 命名路由 , 路由群组 , 路由模型绑定 , 抛出 404 错误 等内容 ,见官方文档.\n</code></pre><h1 id=\"控制器-Controller\"><a href=\"#控制器-Controller\" class=\"headerlink\" title=\"控制器(Controller)\"></a><a id=\"控制器(Controller)\"></a>控制器(Controller)</h1><pre><code>控制器的作用是请求二级分发者\n\n控制器目录\n    my_laravel/app/Http/Controllers/目录下\n\n创建控制器\n    手动模式创建:\n        例如新创建: my_laravel/app/Http/Controllers/MyController1.php 内容如下\n            &lt;?php namespace App\\Http\\Controllers;\n            class MyController1 extends Controller {\n                public function getAbout(){\n                return &apos;MyController1@ABOUT gogogo&apos;;\n\n                //到视图\n                //return view(&apos;my_welcome&apos;);//跳转到my_welcome.blade.php视图View中.\n                //传参数方式1 //跳转到my_welcome.blade.php视图View中并带一个参数$name = &apos;comtu&apos;.\n                //return view(&apos;my_welcome&apos;)-&gt;with(&apos;name&apos;,&apos;comtu&apos;);\n                //传参数方式2 //跳转到my_welcome.blade.php视图View中并带一个参数$name = &apos;name&apos;.\n                //$name = &apos;lala&apos;;\n                //return view(&apos;my_welcome&apos;,compact(&apos;name&apos;/*[&apos;name&apos;-&gt;&apos;lala&apos;]*/);\n                //传参数方式3\n                //$data=[\n                //    &apos;name&apos; =&gt; &apos;comtu&apos;,\n                //    &apos;age&apos; =&gt; 128\n                //];\n                //return view(&apos;my_welcome&apos;,$data);//传多参数.视图View中直接使用$name , $age即可.\n                }\n            }\n        配置路由\n            //http://localhost/myController1\n            Route::get(&apos;myController1&apos;,&apos;MyController1@getAbout&apos;);\n\n    命令模型创建(推荐,更准确):\n\n        使用Terminal定位(cmd)目录文件到 my_laravel 目录下 使用artisan命令\n        使用命令:\n            E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel&gt;\n            php artisan make:controller MyController\n\n        提示:Controller created successfully. 创建成功.\n        查看my_laravel/app/Http/Controllers/MyController.php\n        发现会生成生成MyController.php文件 文件里会自动生成类,以及一些方法:\n        如:index() , create() , store() , show($id) , edit($id) , update($id) , destroy($id)\n        但都是空实现.\n</code></pre><h1 id=\"视图-Views\"><a href=\"#视图-Views\" class=\"headerlink\" title=\"视图(Views)\"></a><a id=\"视图(Views)\"></a>视图(Views)</h1><pre><code>MVC显示层\n\nmy_laravel/resources/views/xxxx.blade.php\n\n创建View视图\n    一般流程为: 创建控制器--&gt;配置路由--&gt;创建视图.\n\n    1.在创建的控制器 MyController.php 中增加如下方法:\n        &lt;?php namespace App\\Http\\Controllers;\n        class MyController1 extends Controller {\n            public function index(){\n                //到视图\n                return view(&apos;my_welcome&apos;);//跳转到my_welcome.blade.php视图View中.\n            }\n\n            //传参数方式1\n            public function parameter(){\n                $data=[\n                    &apos;name&apos; =&gt; &apos;comtu&apos;,\n                    &apos;age&apos; =&gt; 128,\n                        &apos;people&apos;=&gt;[&apos;张三&apos;,&apos;李四&apos;,&apos;王五&apos;]\n                ];\n                return view(&apos;my_welcome&apos;,$data);//传多参数.视图View中直接使用$name , $age即可.\n            }\n            //传参数方式2\n            public function parameter1(){\n                $name = &apos;lala&apos;;\n                //跳转到my_welcome.blade.php视图View中并带一个参数$name = &apos;lala&apos;.\n                return view(&apos;my_welcome&apos;,compact(&apos;name&apos;)/*等同于[&apos;name&apos;-&gt;&apos;lala&apos;]*/);\n            }\n            //传参数方式3\n            public function parameter2(){\n                //跳转到my_welcome.blade.php视图View中并带一个参数$name = &apos;comtu&apos;.\n                return view(&apos;my_welcome&apos;)-&gt;with(&apos;name&apos;,&apos;comtu&apos;);\n            }\n        }\n\n    2.配置路由:\n        //http://localhost/my_home\n        Route::get(&apos;my_home&apos;,&apos;MyController@index&apos;);\n        Route::get(&apos;my_home1&apos;,&apos;MyController@parameter&apos;);\n        Route::get(&apos;my_home2&apos;,&apos;MyController@parameter1&apos;);\n        Route::get(&apos;my_home3&apos;,&apos;MyController@parameter2&apos;);\n\n    3.创建视图文件 \n        目录结构为my_laravel/resources/views/my_welcome.blade.php\n        &lt;html&gt;\n            &lt;head&gt;\n                &lt;title&gt;my_welcome&lt;/title&gt;\n            &lt;/head&gt;\n            &lt;body&gt;\n                &lt;div class=&quot;title&quot;&gt;my_welcome--&gt;\n                    &lt;?php if(!empty($name)):?&gt;\n                        &lt;?php echo $name;?&gt;\n                    &lt;?php endif;?&gt;\n                &lt;/div&gt;\n                &lt;?php if(!empty($age)):?&gt;\n                    &lt;div class=&quot;title&quot;&gt;age:&lt;?php echo $age;?&gt;&lt;/div&gt;\n                &lt;?php endif;?&gt;\n            &lt;/body&gt;\n        &lt;/html&gt;\n\nBlade模板\n\n    官方文档: http://laravel.com/docs/5.1/blade\n    中文文档: http://www.golaravel.com/laravel/docs/5.0/templates/\n\n    模板:\n\n        {{ }} \n        {!! !!}\n        {{{ }}}\n        @include\n        @if()\n        @else\n        @endif\n        @foreach\n        @endforeach\n        @for\n        @endfor\n        @while\n        @endwhile\n        等\n\n    案例:\n\n    新创建 my_laravel/resources/views/compontents/myHead.blade.php 文件.(用于演示 @include(&apos;components.myHead&apos;))\n        &lt;html&gt;\n            &lt;body&gt;\n                &lt;!--头部文件使用 include 在其它地方引用 --&gt;\n                &lt;h1&gt;高大上的头Head&lt;/h1&gt;\n                &lt;hr&gt;\n\n            &lt;/body&gt;\n        &lt;/html&gt;\n\n    演示代码 my_laravel/resources/views/my_view.blade.php\n        &lt;html&gt;\n            &lt;head&gt;\n                &lt;meta charset=&quot;utf-8&quot;&gt;\n                &lt;title&gt;MyView&lt;/title&gt;\n            &lt;/head&gt;\n            &lt;body&gt;\n                &lt;!--引用包含其它文件.--&gt;\n                @include(&apos;components.myHead&apos;)\n                MyView--&gt;\n\n                &lt;!--调用函数 跨站点请求伪造保护码--&gt;\n                {{csrf_token()}} 等同于 &lt;?php echo csrf_token();?&gt;\n\n                &lt;h1&gt;{{ $name or 'Default' }}&lt;/h1&gt;\n\n                &lt;h1&gt;{{ $name or '无名英雄1' }}&lt;/h1&gt;\n\n                &lt;h1&gt;{{ $name or '无名英雄2'}} - {{$age or 0}}&lt;/h1&gt;\n\n                以上等同于\n                &lt;h1&gt;&lt;?php echo !empty($name)?$name:&apos;无名英雄3&apos;?&gt;&lt;/h1&gt;\n\n\n                &lt;!--不解析,原样输出--&gt;\n                @{{$name}}\n\n                &lt;!--加载代码--&gt;\n                {!! &apos;&lt;script&gt;var g = &quot;comtu&quot;;document.write(&quot;&lt;br /&gt;加载代码&quot;+g+&quot;&lt;br /&gt;&quot;);&lt;/script&gt;&apos; !!}\n                {!! &apos;&lt;h1&gt;h1&lt;/h1&gt;&apos; !!}\n\n                        &lt;!--代码转义--&gt;\n                {{{'<html lang=\"en\">打印HTML comtu</html>'}}}\n\n\n                &lt;!--Blade的if判断,如果$name未定义会抛错误--&gt;\n                &lt;h1&gt;\n                @if($name)\n                    你好{{$name}}\n                @else\n                    未登录\n                @endif\n                &lt;/h1&gt;\n\n\n                @foreach($people as $person)\n                    &lt;li&gt;{{$person}}&lt;/li&gt;\n                @endforeach\n\n                @for($i = 0 ; $i&lt;3; $i++)\n                xx\n                @endfor\n\n                @while(false)\n                xxx\n                @endwhile\n\n            &lt;/body&gt;\n        &lt;/html&gt;\n\n    以上在浏览器中输出\n        高大上的头Head\n\n        MyView--&gt; YNJhQ4GgCCuZ5qyPNhTwvFvWfYLduxUOFvEz0vnZ 等同于 YNJhQ4GgCCuZ5qyPNhTwvFvWfYLduxUOFvEz0vnZ\n        Default\n\n        无名英雄1\n\n        无名英雄2 - 0\n\n        以上等同于\n        无名英雄3\n\n        {{$name}} \n        加载代码comtu\n        h1\n\n        &lt;html lang=&quot;en&quot;&gt;打印HTML comtu&lt;/html&gt;\n\n        未登录\n\n        张三\n        李四\n        王五\n        xx xx xx\n</code></pre><h1 id=\"模型-model\"><a href=\"#模型-model\" class=\"headerlink\" title=\"模型(model)\"></a><a id=\"模型(model)\"></a>模型(model)</h1><pre><code>模型层\n    一般model在 my_laravel/app/目录下\n    直接或间接继承Model;\n    原代码目录:\n    //my_laravel/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Model.php\n    Laravel的Model比CI的Model内容可多很多.里面包含了查询数据库等等的函数实现.\n    8.Eloguent里面有Demo\n\n\n创建模型\n    手动模式创建:\n        例如新创建: my_laravel/app/Demo.php内容如下:        \n\n        修改Model的文件目录,新创建 my_laravel/app/Model 在Model里面创建Model文件.\n        并在 文件头&lt;?php namespace App\\Model;//指定目录即可            \n\n        &lt;?php namespace App;\n            use Illuminate\\Database\\Eloquent\\Model;\n            class Demo extends Model {\n                use Authenticatable, CanResetPassword;\n                /**使用的数据库表模式。*/\n                protected $table = &apos;demo&apos;;\n\n                /**属性可分配。*/\n                //表示那些字段是可以被laravel填写的.\n                protected $fillable = [&apos;name&apos;, &apos;email&apos;, &apos;password&apos;];\n\n                //表示这些字段是被保护的,存储数据库时不填写此数据\n                protected $guarded = [&apos;demo_id&apos;];\n\n                /** 排除在模型的JSON形式的属性。*/\n                protected $hidden = [&apos;password&apos;, &apos;remember_token&apos;];\n\n                 //修改默认的 id 主键\n                protected $primaryKey = &apos;demo_id&apos;;\n\n                //不使用时间戳_见下面创建模型\n                public $timestamps = false;\n            }\n\n    命令模型创建:\n        使用Terminal定位(cmd)目录文件到 my_laravel 目录下 使用artisan命令\n            php artisan make:model Demo\n            创建在 my_laravel/app/Demo.php 文件如下:\n\n            &lt;?php namespace App;\n            use Illuminate\\Database\\Eloquent\\Model;\n            class Demo extends Model {\n                //....\n            }\n</code></pre><h1 id=\"环境与部署\"><a href=\"#环境与部署\" class=\"headerlink\" title=\"环境与部署\"></a><a id=\"环境与部署\"></a>环境与部署</h1><pre><code>.env 环境配置文件.\n\n    文件目录 my_laravel/.env\n\n    作用到全局的一些参数\n    例如:\n    APP_ENV=local   全称APP_Envirment 程序环境=local表示环境在本地.server表示运行在服务器.debug需要改成0或false\n    APP_DEBUG=true  是否在开发模式下.如果true,则是开发模式,出错时会报错,并会尽量多打印信息.0或false表示正式模式.\n    APP_KEY=asdf    应用的加密key,标记唯一性,例如框架需要加密时,有可能会使用到,当做参数使用.\n\n    DB_HOST=localhost 数据库地址 这些参数会被 database.php 等配置文件调用.\n    DB_DATABASE=my_laravel 数据库名\n    DB_USERNAME=root  数据库用户名\n    DB_PASSWORD=root  数据库密码\n\n    CACHE_DRIVER=file   缓存使用文件形式\n    SESSION_DRIVER=file Session使用文件形式\n    QUEUE_DRIVER=sync   队列使用同步\n\n    MAIL_DRIVER=smtp      邮件配置\n    MAIL_HOST=mailtrap.io\n    MAIL_PORT=2525\n    MAIL_USERNAME=null\n    MAIL_PASSWORD=null\n\n\n    先创建数据库 见下面的&quot;数据库CMD&quot;\n    //路由中,尝试连接数据库\n    Route::get(&apos;myDatabase&apos;,function(){\n        $name = DB::connection()-&gt;getDatabaseName();\n        echo $name; //打印出 数据库名 my_laravel 表示成功 如果遇见PDOException错误见&quot;我遇到的错误&quot;中的解决方法\n    });\n\n数据库\n    my_laravel/config/database.php\n\n    一般不用配置当前文件,配置 my_laravel/.env 文件即可.\n\n    &apos;default&apos; =&gt; &apos;mysql&apos; 默认使用的数据库\n    &apos;connections&apos; =&gt; [\n        &apos;mysql&apos; =&gt; [\n            &apos;driver&apos;    =&gt; &apos;mysql&apos;,\n            //引用my_laravel/.env 环境配置文件的配置,如果没有找到则使用默认的&apos;localhost&apos;.\n            &apos;host&apos;      =&gt; env(&apos;DB_HOST&apos;, &apos;localhost&apos;), \n            &apos;database&apos;  =&gt; env(&apos;DB_DATABASE&apos;, &apos;forge&apos;),\n            &apos;username&apos;  =&gt; env(&apos;DB_USERNAME&apos;, &apos;forge&apos;),\n            &apos;password&apos;  =&gt; env(&apos;DB_PASSWORD&apos;, &apos;&apos;),\n            &apos;charset&apos;   =&gt; &apos;utf8&apos;,\n            &apos;collation&apos; =&gt; &apos;utf8_unicode_ci&apos;,\n            &apos;prefix&apos;    =&gt; &apos;&apos;, //前缀\n            &apos;strict&apos;    =&gt; false,\n        ],\n    ]\n\nSession\n\n    配置文件 my_laravel/config/session.php 一般此文件不需要配置\n\n        //可支持配置 &quot;file&quot;, &quot;cookie&quot;, &quot;database&quot;, &quot;apc&quot;,&quot;memcached&quot;, &quot;redis&quot;, &quot;array&quot;\n        &apos;driver&apos; =&gt; env(&apos;SESSION_DRIVER&apos;, &apos;file&apos;),\n\ndown/up\n    一整个程序停止解析(使用场景如,网站遇到攻击,网站需要维护等)\n    配置后访问网站的所有地址都会被跳转到 my_laravel/resources/views/errors/503.blade.php 网站全部连接转向此文件.\n\n        //停止服务,\n        php artisan down \n\n        //恢复服务\n        pup artisan up \n\n自定义配置属性\n    1.在.env中增加属性\n        MY_DIY_CONFIG=&apos;test_env&apos;\n    2.在config/app.php内容里增加属性(参数1为.env文件下的配置名,如果未配置.则使用参数2默认值)\n        &apos;my_diy_config&apos; =&gt;env(&apos;MY_DIY_CONFIG&apos;,&apos;test_app&apos;),\n    3.使用 例如在Controllers中使用:\n        use Illuminate\\Support\\Facades\\Config;//引入包\n        //code...\n        $diyConfig = Config::get(&apos;app.my_diy_config&apos;);//使用\n        //code...\n\n自动加载类\n    使用场景:当某一个方法函数经常会被多个不同的类调用时.可做成自动加载的类,减少代码编写量\n    1.创建文件 例如:在app/Libraries/function/functions.php (自定义)里面有如下代码:\n        &lt;?php \n        funcion abc(){\n            return &apos;abc&apos;;\n        }\n    2.在工程 /bootstrap/autoload.php 中增加如下代码(对应自定义的文件目录):\n        require __DIR__.&apos;/../app/Libraries/function/functions.php&apos;;\n    3.使用 例如在Controllers中使用\n        直接使用方法名调用: $data = abc();\n</code></pre><h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a><a id=\"数据库\"></a>数据库</h1><pre><code>与数据库交互的机制.\n    http://www.golaravel.com/laravel/docs/5.0/eloquent/\n\n目录my_laravel/vendor/laravel/framework/src/Illuminate/Database/Eloquent/包含多文件,Model属于此包\n\n\nEloguent 使用(增删改查):\n    配置数据库信息\n        my_laravel/.env\n            DB_HOST=localhost\n            DB_DATABASE=my_laravel\n            DB_USERNAME=root\n            DB_PASSWORD=root\n\n    配置路由: \n        //http://localhost:8888/myDatabase 查看连接数据库是否成功\n        Route::get(&apos;myDatabase&apos;,function(){\n            $name = DB::connection()-&gt;getDatabaseName();\n            echo $name;\n        });\n\n        //http://localhost:8888/myDatabase/add 增\n        Route::get(&apos;myDatabase/add&apos;,function(){\n            $user = new App\\User();\n            $user-&gt;userAdd();\n            return $user-&gt;userRead();\n        });\n\n        //http://localhost:8888/myDatabase/delete 删\n        Route::get(&apos;myDatabase/delete&apos;,function(){\n            $user = new App\\User();\n            $user-&gt;userDelete();\n            return $user-&gt;userRead();\n        });\n\n        //http://localhost:8888/myDatabase/update 改\n        Route::get(&apos;myDatabase/update&apos;,function(){\n            $user = new App\\User();\n            $user-&gt;userDelete();\n            return $user-&gt;userRead();\n        });\n\n        //http://localhost:8888/myDatabase/read 查\n        Route::get(&apos;myDatabase/read&apos;,function(){\n            $user = new App\\User();\n            return $user-&gt;userRead();\n        });\n\n        //http://localhost:8888/myDatabase/read_dd 查\n        Route::get(&apos;myDatabase/read_dd&apos;,function(){\n            $user = new App\\User();\n            $users = $user-&gt;all();\n            dd($users); // dd=&gt; var_dump() ; and die(); 打印出数据类型与信息.\n            // $users-&gt;toArray();//转成数组\n            // $users-&gt;all();//返回数据库原型 , 默认调用了tojson();\n            // return $user-&gt;userRead();\n\n            //数组\n            $arr = [&apos;one&apos;,&apos;two&apos;,&apos;three&apos;];\n            $collection = collect($arr);\n            //查找数组是否包含对应的值\n            $bool = $collection-&gt;contains(&apos;one&apos;);\n            //取数组的前2个数据\n            $res = $collection-&gt;take(2);\n            //取后面两个数据\n            $res = $collection-&gt;take(-2);\n\n            //键值对\n            $arr = [&apos;one&apos;=&gt;1,&apos;two&apos;=&gt;2,&apos;three&apos;=&gt;3];\n            $collection = collect($arr);\n            //查找是否有对应的键key\n            $bool = $collection-&gt;has(&apos;one&apos;);\n\n            return $collection-&gt;all();\n        });\n\n    创建模型:\n\n        &lt;?php namespace App;\n\n        use Illuminate\\Auth\\Authenticatable;\n        use Illuminate\\Database\\Eloquent\\Model;\n        use Illuminate\\Auth\\Passwords\\CanResetPassword;\n        use Illuminate\\Contracts\\Auth\\Authenticatable as AuthenticatableContract;\n        use Illuminate\\Contracts\\Auth\\CanResetPassword as CanResetPasswordContract;\n\n        //Laravel的Model已经实现了一些对数据库的操作,如增删改查.\n        class User extends Model implements AuthenticatableContract, CanResetPasswordContract {\n            use Authenticatable, CanResetPassword;\n\n            //数据库名 重写Model的数据库名\n            protected $table = &apos;users&apos;;\n\n            //表示那些数据库字段是可以被laravel填写.\n            protected $fillable = [&apos;username&apos;, &apos;age&apos;];\n\n            //表示这些字段是被保护的,存储数据库时不填写此数据(主键自动增长)\n            protected $guarded = [&apos;demo_id&apos;];\n\n            // 排除在模型的JSON形式的属性。如调用$this-&gt;all()生成的Json不生成在Json中的字段名\n            protected $hidden = [];\n\n            //修改默认的 id 主键名称\n            protected $primaryKey = &apos;user_id&apos;;\n\n            ////model自带的方法 public static function all($columns = array(&apos;*&apos;)) 函数\n            //详情见 my_laravel/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Model.php\n            //查询数据《-----------------------\n            public function userRead(){\n                //查询出所有数据\n                //return $this-&gt;all();\n\n                //查找user_id为1的数据 如果没有打到数据,返回的空数据\n                //return $this-&gt;find(1);\n                //如没有找到数据直接抛异常.查id为4的数据\n                //return $this-&gt;findOrFail(4);\n\n                //返回对应条件的数据 select * from users where username=&apos;comtu&apos;;\n                //return $this-&gt;where(&apos;username&apos;,&apos;comtu&apos;)-&gt;get();\n\n                //返回对应条件的数据 select * from users where user_id&gt;1; \n                // return $this-&gt;where(&apos;user_id&apos;,&apos;&gt;&apos;,1)-&gt;get();\n\n                //查询出所有数据 等同于 $this-&gt;all();\n                return $this-&gt;get();\n            }\n\n            //insert数据时model基类默认数据库中有时间戳字段,更新时间,创建时间\n            //处理方式有两种,一种是为数据库中增加这两个字段`updated_at`, `created_at`\n            //另一种是取消Model中的数据库时间戳字段如下:\n            public $timestamps = false;\n\n            //增加数据《-----------------------\n            public function userAdd(){\n\n                //增加数据方式1 \n                //$this-&gt;username = &apos;user00000&apos;;\n                //$this-&gt;age = 1;\n                //$this-&gt;save();\n                //增加数据后如果表是自动增长的可获取到增加后的id\n                $id = $this-&gt;user_id;//新增加后的id值\n\n                //增加数据方式2  批量赋值 \n                //protected $fillable = [&apos;username&apos;, &apos;age&apos;]; //需要有配置自动填充的字段\n                $user_data = [&apos;username&apos;=&gt;&apos;user111&apos;,&apos;age&apos;=&gt;256];\n                $this-&gt;fill($user_data);\n                $this-&gt;save();\n            }\n\n            //更新数据《-----------------------\n            public function userUpdate(){\n                //修改对应的数据 方式一\n                //$user = $this-&gt;find(1);//查询-》保存\n                //$user-&gt;username = &apos;comtu0000&apos;;\n                //$user-&gt;age = &apos;512&apos;;\n                //$user-&gt;save();\n\n                //修改对应的数据 方式二\n                $users = $this-&gt;where(&apos;user_id&apos;,&apos;&lt;&apos;,&apos;3&apos;); //查询-》更新\n                //更新不需要调用save()\n                $users-&gt;update([&apos;username&apos;=&gt;&apos;comtu1111&apos;,&apos;age&apos;=&gt;1024]);\n            }\n\n            //删除数据《-----------------------\n            public function userDelete(){\n                $user = $this-&gt;find(3);//查询-》删除\n                $user-&gt;dalete();\n            }\n        }\n\n    Demo:\n        模型:\n            &lt;?php namespace App\\Model;\n            use Illuminate\\Database\\Eloquent\\Model;\n\n            class Person extends Model  {\n\n                 //数据库表\n                protected $table = &apos;person&apos;;\n                //修改默认的 id 主键\n                protected $primaryKey = &apos;pid&apos;;\n\n                //表示那些字段是可以被laravel填写的.fill()\n                protected $fillable = [&apos;name&apos;, &apos;sex&apos;,&apos;age&apos;,&apos;salary&apos;,&apos;occ_id&apos;,&apos;dep_id&apos;];\n\n                //表示这些字段是被保护的,存储数据库时不填写此数据\n                protected $guarded = [&apos;pid&apos;];\n\n                //生成JSON时隐藏的字段\n                protected $hidden = [];\n\n                //insert数据时model基类默认数据库中有时间戳字段,更新时间,创建时间\n                //处理方式有两种,一种是为数据库中增加这两个字段`updated_at`, `created_at`\n                //另一种是取消Model中的数据库时间戳字段如下:\n                public $timestamps = false;\n\n                //表结构对应关系 occupation另外一张表app/model/occupation.php\n                public function occupation(){\n                return $this-&gt;hasOne(&apos;App\\Model\\occupation&apos;, &apos;occ_id&apos;, &apos;occ_id&apos;);\n                }\n\n                //表结构对应关系\n                public function department(){\n                return $this-&gt;hasOne(&apos;App\\Model\\department&apos;, &apos;dep_id&apos;, &apos;dep_id&apos;);\n                }\n            }\n\n        控制器:\n            app/Http/Controllers/DemoDataBaseController.php\n                &lt;?php namespace App\\Http\\Controllers;\n                use App\\Http\\Requests;\n                use App\\Http\\Controllers\\Controller;\n\n                use App\\Model\\Occupation;\n                use App\\Model\\Department;\n                use App\\Model\\Person;\n                use Illuminate\\Support\\Facades\\Input;\n                use Illuminate\\Support\\Facades\\Request;\n                use Illuminate\\Support\\Facades\\Session;\n\n\n                class DemoDataBaseController extends Controller{\n\n                    public function index() {\n                    //$data[&apos;person&apos;] = Person::find(array(&apos;1&apos;));//简单条件查询 select * from person where id = 1;\n                    //$data[&apos;person&apos;] = Person::whereRaw(&apos;pid &gt; 1 and salary &gt; 1700&apos;)-&gt;get();//条件查询全部\n\n                    //连表查询~~需要在Person里面配置表的关系\n                    $data[&apos;person&apos;] = Person::with(&apos;occupation&apos;, &apos;department&apos;)-&gt;paginate(10);//连表查询并 paginate分页功能,每页10条.\n                    //$data[&apos;person&apos;] = Person::with(&apos;occupation&apos;,&apos;department&apos;)-&gt;get();//连表查询 //只能使用get,all获取不到数据\n                    //&lt;?php foreach ($person as $v):?&gt;//视图中获取连表的数据\n                    //&lt;?php echo $v[&apos;occupation&apos;]-&gt;name;?&gt; \n                    //&lt;?php endforeach;?&gt;\n                    $data[&apos;count&apos;]  =  Person::all()-&gt;count();\n                    $data[&apos;occupation&apos;] = Occupation::get();//查询全部\n                    $data[&apos;department&apos;] = Department::all();//查询全部\n\n                    return view(&apos;demo.demo_index_database&apos;,$data);\n                    }\n\n                    public function addPerson(){\n                    $data[&apos;occupation&apos;] = Occupation::get();//查询全部\n                    $data[&apos;department&apos;] = Department::all();//查询全部\n                    return view(&apos;demo.demo_add_update_database&apos;,$data);\n                    }\n\n                    public function postAddPerson(){\n                    $person = new Person();\n                    //增加数据方式2\n                    $person-&gt;name = Request::input(&apos;name&apos;, &apos;default&apos;);//获取Post请求的数据\n                    $person-&gt;age = Request::input(&apos;age&apos;, 20);\n                    $person-&gt;sex = Request::input(&apos;sex&apos;, 0);\n                    $person-&gt;salary = Request::input(&apos;salary&apos;, 1800);\n                    $person-&gt;occ_id = Request::input(&apos;occ_id&apos;);\n                    $person-&gt;dep_id = Request::input(&apos;dep_id&apos;);\n                    $person-&gt;save();\n                    //$person-&gt;pid; 可获取到增加后的自动增长id.\n                    return redirect(&apos;myDatabase/Demo&apos;);\n                    }\n\n                    public function deletePerson($rid,$_token = &apos;&apos;){\n                    if(Session::token() !== $_token) {\n                        echo &apos;非法请求&apos;;\n                        return;\n                    }\n\n                    $person = Person::find($rid);\n                    $person-&gt;delete();\n                    return redirect(&apos;myDatabase/Demo&apos;);\n                    }\n\n                    //http://localhost/myDatabase/DemoUpdatePerson?pid=6&amp;_token=7jcZiP2wv0nIpxrA4KUqn9sBRaU7YXpcc8M0zrue\n                    public function updatePerson(){\n                    $_token = Input::get(&apos;_token&apos;);//获取get请求的数据\n                    if(Session::token()!=$_token){\n                        echo &apos;非法请求&apos;;\n                        return ;\n                    }\n                    $pid = Input::get(&apos;pid&apos;);\n\n                    $data[&apos;person&apos;] = Person::find($pid);\n                    $data[&apos;occupation&apos;] = Occupation::all();//查询全部\n                    $data[&apos;department&apos;] = Department::get();//查询全部\n                    return view(&apos;demo.demo_add_update_database&apos;,$data);\n                    }\n\n                    public function postUpdatePerson(){\n                    $person = Person::find(Request::input(&apos;pid&apos;));\n                    if(!$person){\n                        echo &apos;修改错误&apos;;\n                        return;\n                    }\n\n                    //修改数据方式\n                    $person-&gt;name = Request::input(&apos;name&apos;);\n                    $person-&gt;age = Request::input(&apos;age&apos;);\n                    $person-&gt;sex = Request::input(&apos;sex&apos;);\n                    $person-&gt;salary = Request::input(&apos;salary&apos;);\n                    $person-&gt;occ_id = Request::input(&apos;occ_id&apos;);\n                    $person-&gt;dep_id = Request::input(&apos;dep_id&apos;);\n                    $person-&gt;save();\n                    return redirect(&apos;myDatabase/Demo&apos;);\n                    }\n                }\n\n        路由:\n            app/Http/routes.php\n\n                //显示列表 http://localhost/myDatabase/Demo\n                Route::get(&apos;myDatabase/Demo&apos;,&apos;DemoDataBaseController@index&apos;);\n                //增加数据\n                Route::get(&apos;myDatabase/DemoAddPerson&apos;,&apos;DemoDataBaseController@addPerson&apos;);\n                Route::post(&apos;myDatabase/DemoAddPerson&apos;,&apos;DemoDataBaseController@postAddPerson&apos;);\n                //删除数据 使用函数参数方式并参数使用正则匹配.\n                Route::get(&apos;myDatabase/DemoDeletePerson/{pid}/{_token}&apos;,&apos;DemoDataBaseController@deletePerson&apos;)-&gt;where([&apos;pid&apos; =&gt; &apos;[0-9]+&apos;]);\n                //更新数据 此处使用获取get请求的方式获取数据\n                Route::get(&apos;myDatabase/DemoUpdatePerson&apos;,&apos;DemoDataBaseController@updatePerson&apos;);\n                Route::post(&apos;myDatabase/DemoUpdatePerson&apos;,&apos;DemoDataBaseController@postUpdatePerson&apos;);\n\n                //scrf验证\n                Route::filter(&apos;csrf&apos;,function(){\n                    if (Session::token() !== Input::get(&apos;_token&apos;)) {\n                    throw new Illuminate\\Session\\TokenMismatchException;\n                    }\n                });\n\n        视图:\n            resources/views/demo/demo_index_database.blade.php 显示列表\n                &lt;html&gt;\n                &lt;head&gt;\n                    &lt;meta charset=&quot;utf-8&quot;&gt;\n                    &lt;title&gt;MyView&lt;/title&gt;\n                    &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/style.css&quot;&gt;\n                &lt;/head&gt;\n                &lt;body&gt;\n                @include(&apos;components.myHead&apos;)\n\n                &lt;h1&gt;resources/views/demo_database.blade.php&lt;/h1&gt;\n\n                调用函数@{{csrf_token}} 跨站点请求伪造保护码\n                {{csrf_token()}} 等同于 &lt;?php echo csrf_token();?&gt;\n\n                &lt;table   border=&quot;1px&quot; cellpadding=&quot;2px&quot;  cellspacing=&quot;1px&quot; bgcolor=&quot;#FFFFF0&quot;&gt;\n                    &lt;tr align=&quot;center&quot;&gt;\n                    &lt;td&gt;pid(count:{{$count}})&lt;/td&gt;\n                    &lt;td&gt;name&lt;/td&gt;\n                    &lt;td&gt;age&lt;/td&gt;\n                    &lt;td&gt;sex&lt;/td&gt;\n                    &lt;td&gt;salary&lt;/td&gt;\n                    &lt;td&gt;occ_id&lt;/td&gt;\n                    &lt;td&gt;dep_id&lt;/td&gt;\n                    &lt;td&gt;操作&lt;/td&gt;\n                    &lt;/tr&gt;\n                    @foreach($person as $p)\n                    &lt;tr align=&quot;center&quot;&gt;\n                    &lt;td&gt;{{$p->pid}}&lt;/td&gt;\n                    &lt;td&gt;{{$p->name}}&lt;/td&gt;\n                    &lt;td&gt;&lt;?php echo $p-&gt;age?&gt;&lt;/td&gt;\n                    &lt;td&gt;{{$p->sex==0?'男':'女'}}&lt;/td&gt;\n                    &lt;td&gt;{{$p->salary}}&lt;/td&gt;\n                    &lt;td&gt;{{$p->occupation->name}}&lt;/td&gt;&lt;!--连表查询,预载入的关联对象--&gt;\n                    &lt;td&gt;{{$p->department->name}}&lt;/td&gt;\n                    &lt;td&gt;&lt;a href=&quot;{{url('myDatabase/DemoUpdatePerson?pid='.$p->pid.'&_token='.csrf_token())}}&quot;&gt;修改&lt;/a&gt; &amp;nbsp &lt;a href=&quot;{{url('myDatabase/DemoDeletePerson').'/'.$p->pid .'/'.csrf_token()}}&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;\n                    &lt;/tr&gt;\n                    @endforeach\n\n                    @if($person-&gt;render())\n                    &lt;tr &gt;&lt;td colspan=&quot;9&quot; align=&quot;center&quot; width=&quot;100%&quot;&gt;&lt;?php echo $person-&gt;render(); ?&gt;&lt;!--分页--&gt;&lt;/td&gt;&lt;/tr&gt;\n                    @endif\n                &lt;/table&gt;\n\n                &lt;div style=&quot;clear: both&quot;&gt;&lt;/div&gt;\n\n                &lt;a href=&quot;{{url('myDatabase/DemoAddPerson')}}&quot;&gt;增加&lt;/a&gt;\n\n                &lt;hr&gt;\n\n                &lt;/body&gt;\n                &lt;/html&gt;\n\n            resources/views/demo/demo_add_update_database.blade.php 增加/修改页\n                &lt;html&gt;\n                &lt;head&gt;\n                    &lt;meta charset=&quot;utf-8&quot;&gt;\n                    &lt;title&gt;{{empty($person)?'增加':'更新'}}数据&lt;/title&gt;\n                    &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/style.css&quot;&gt;\n                &lt;/head&gt;\n                &lt;body&gt;\n\n                &lt;form action=&quot;{{empty($person)?url('myDatabase/DemoAddPerson'):url('myDatabase/DemoUpdatePerson')}}&quot; method=&quot;post&quot; &gt;\n                    &lt;input type=&quot;hidden&quot; name=&quot;_token&quot; value=&quot;{{csrf_token()}}&quot;&gt;\n                    &lt;?php echo empty($person)?&apos;&apos;:&apos;&lt;input type=&quot;hidden&quot; name=&quot;pid&quot; value=&quot;&apos;.$person-&gt;pid.&apos;&quot;&gt;&apos; ;?&gt;\n                    &lt;table border=&quot;1px&quot; cellpadding=&quot;2px&quot;  cellspacing=&quot;1px&quot; bgcolor=&quot;#FFFFF0&quot;&gt;\n                    &lt;tr&gt;&lt;td&gt;名称&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;{{empty($person)?'':$person->name}}&quot;/&gt;&lt;/td&gt;&lt;/tr&gt;\n                    &lt;tr&gt;&lt;td&gt;年龄&lt;/td&gt;&lt;td&gt;\n                        &lt;select name=&quot;age&quot; &gt;\n                            @for ($i = 1; $i &lt;= 110; $i++)\n                            &lt;option value=&quot;{{ $i }}&quot; &lt;?php echo $i==(empty($person)?24:$person-&gt;age) ?&apos;selected=&quot;selected&quot;&apos;:&apos;&apos;?&gt;&gt;{{ $i }}&lt;/option&gt;\n                            @endfor\n                        &lt;/select&gt;\n                        &lt;/td&gt;&lt;/tr&gt;\n                    &lt;tr&gt;&lt;td&gt;性别&lt;/td&gt;&lt;td&gt;\n                        &lt;select name=&quot;sex&quot;&gt;\n                            &lt;option value=&quot;0&quot; &lt;?php echo empty($person)?&apos;selected=&quot;selected&quot;&apos;:$person-&gt;sex==0?&apos;selected=&quot;selected&quot;&apos;:&apos;&apos;?&gt;&gt;男&lt;/option&gt;\n                            &lt;option value=&quot;1&quot; &lt;?php echo empty($person)?&apos;&apos;:$person-&gt;sex==1?&apos;selected=&quot;selected&quot;&apos;:&apos;&apos;?&gt;&gt;女&lt;/option&gt;\n                        &lt;/select&gt;\n                        &lt;/td&gt;&lt;/tr&gt;\n                    &lt;tr&gt;&lt;td&gt;薪资&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;salary&quot; value=&quot;{{empty($person)?'':$person->salary}}&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;\n                    &lt;tr&gt;&lt;td&gt;职业&lt;/td&gt;&lt;td&gt;\n                        &lt;select name=&quot;occ_id&quot;&gt;\n                            @for($i = 0 ; $i&lt; count($occupation);$i++)\n                            &lt;option value=&quot;{{$occupation[$i]->occ_id}}&quot; &lt;?php echo empty($person)?&apos;&apos;:$occupation[$i]-&gt;occ_id==($person-&gt;occ_id)?&apos;selected=&quot;selected&quot;&apos;:&apos;&apos;?&gt;&gt;{{$occupation[$i]->name}}&lt;/option&gt;\n                            @endfor\n                            {{--@foreach($occupation as $occ)--}}\n                            {{--<option   value=\"{{$occ->occ_id}}&quot; &gt;{{$occ->name}}&lt;/option&gt;--}}\n                            {{--@endforeach--}}\n                        &lt;/select&gt;\n                        &lt;/td&gt;&lt;/tr&gt;\n                    &lt;tr&gt;&lt;td&gt;部门&lt;/td&gt;&lt;td&gt;\n                        &lt;select name=&quot;dep_id&quot; &gt;\n                            @for($i = 0 ; $i&lt; count($department);$i++)\n                            &lt;option value=&quot;{{$department[$i]->dep_id}}&quot; &lt;?php echo empty($person)?&apos;&apos;:$department[$i]-&gt;dep_id==($person-&gt;dep_id)?&apos;selected=&quot;selected&quot;&apos;:&apos;&apos;?&gt;&gt;{{$department[$i]->name}}&lt;/option&gt;\n                            @endfor\n                            {{--@foreach($department as $dep)--}}\n                            {{--<option value=\"{{$dep->dep_id}}&quot; &gt;{{$dep->name}}&lt;/option&gt;--}}\n                            {{--@endforeach--}}\n                        &lt;/select&gt;\n                        &lt;/td&gt;&lt;/tr&gt;\n                    &lt;tr&gt;&lt;td colspan=&quot;2&quot; align=&quot;center&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;{{empty($person)?'增加':'更新'}}&quot;&gt;&amp;nbsp&lt;input type=&quot;reset&quot; value=&quot;重置&quot;&gt;&lt;/td&gt;&lt;/tr&gt;\n                    &lt;/table&gt;\n                &lt;/form&gt;\n\n                &lt;/body&gt;\n                &lt;/html&gt;\n</code></pre><h1 id=\"请求\"><a href=\"#请求\" class=\"headerlink\" title=\"请求\"></a><a id=\"请求\"></a>请求</h1><pre><code>Demo:\n    控制器:\n        app/Http/Controlers/DemoMyRequestController.php \n            &lt;?php namespace App\\Http\\Controllers;\n\n            use App\\Http\\Requests;\n            use App\\Http\\Controllers\\Controller;\n\n            use Illuminate\\Support\\Facades\\Input;\n            use Illuminate\\Support\\Facades\\Request;\n            use Illuminate\\Support\\Facades\\Session;\n\n            class DemoMyRequestController extends Controller{\n\n                //请求\n                public function myrequest(){\n                //获取表单发送过来的所有数据,不管是get,post还是其它请求的数据.\n                $input = Request::all();//返回json数据\n                var_dump($input);\n                echo &apos;&lt;br&gt;&apos;;\n\n                $value = Request::query();//获取get请求?后面的所有参数\n                var_dump($value);\n                echo &apos;&lt;br&gt;&apos;;\n                $value = Request::query(&apos;name&apos;);//获取get请求后面的指定参数\n                var_dump($value);\n                echo &apos;&lt;br&gt;&apos;;\n\n                //get请求方式,如果没有name键则取默认值comtu\n                $value = Request::get(&apos;name&apos;,&apos;comtu&apos;);\n                var_dump($value);\n                echo &apos;&lt;br&gt;&apos;;\n\n                //-----判断-------\n                //判断参数是否存在返回布尔值\n                $bool = Request::has(&apos;name&apos;);\n                var_dump($bool);\n                echo &apos;&lt;br&gt;&apos;;\n\n                //http://localhost/myrequest?name=&amp;age=11\n                //检查是否存在键,有则返回true,不检查键对应的值是否存在.\n                $bool = Request::exists(&apos;name&apos;);\n                var_dump($bool);\n                echo &apos;&lt;br&gt;&apos;;\n\n                //-------请求检索-------\n                //过滤值,只取对应的键值\n                $value = Request::only(&apos;name&apos;);\n                var_dump($value);\n                echo &apos;&lt;br&gt;&apos;;\n                $value = Request::only(&apos;name&apos;,&apos;age&apos;);//如果有多个参数,则只取这两个值\n                var_dump($value);\n                echo &apos;&lt;br&gt;&apos;;\n\n                //过滤值,除了对应的键不取,其它数据获取,用法与only类似\n                $value = Request::except(&apos;name&apos;);\n                var_dump($value);\n                echo &apos;&lt;br&gt;&apos;;\n\n                //-----------url---------\n                //返回请求的url前缀_不包括参数\n                $url = Request::url();\n                var_dump($url);\n                echo &apos;&lt;br&gt;&apos;;\n\n                //返回请求的全部url_包含参数\n                $url = Request::fullUrl();\n                var_dump($url);\n                echo &apos;&lt;br&gt;&apos;;\n\n                //----------请求历史----------\n                //将请求的所有数据存储到session数据中.\n                Request::flash();\n                //Request::flashOnly(&apos;name&apos;);//只存储指定的键值\n                //Request::flashExcept(&apos;name&apos;);//除了指定的键值,其它都存储\n\n                //返回上一次请求的数据,可在不同页面中获取,前提是需要调用了Request::flash()\n                $value = Request::old();//可用于保存用户提交失败时恢复历史数据的功能\n                var_dump($value);\n\n                /*\n                请求: http://localhost/myrequest?name=comtu&amp;age=11\n\n                array(2) { [&quot;name&quot;]=&gt; string(5) &quot;comtu&quot; [&quot;age&quot;]=&gt; string(2) &quot;11&quot; }\n                array(2) { [&quot;name&quot;]=&gt; string(5) &quot;comtu&quot; [&quot;age&quot;]=&gt; string(2) &quot;11&quot; }\n                string(5) &quot;comtu&quot;\n                string(5) &quot;comtu&quot;\n                bool(true)\n                bool(true)\n                array(1) { [&quot;name&quot;]=&gt; string(5) &quot;comtu&quot; }\n                array(2) { [&quot;name&quot;]=&gt; string(5) &quot;comtu&quot; [&quot;age&quot;]=&gt; string(2) &quot;11&quot; }\n                array(1) { [&quot;age&quot;]=&gt; string(2) &quot;11&quot; }\n                string(26) &quot;http://localhost/myrequest&quot;\n                string(44) &quot;http://localhost/myrequest?age=11&amp;name=comtu&quot;\n                array(2) { [&quot;name&quot;]=&gt; string(5) &quot;comtu&quot; [&quot;age&quot;]=&gt; string(2) &quot;11&quot; }\n                */\n\n                /*\n                  请求http://localhost/myrequest?nae=comtu&amp;age=11\n                array(2) { [&quot;nae&quot;]=&gt; string(5) &quot;comtu&quot; [&quot;age&quot;]=&gt; string(2) &quot;11&quot; }\n                array(2) { [&quot;nae&quot;]=&gt; string(5) &quot;comtu&quot; [&quot;age&quot;]=&gt; string(2) &quot;11&quot; }\n                NULL\n                string(5) &quot;comtu&quot;\n                bool(false)\n                bool(false)\n                array(1) { [&quot;name&quot;]=&gt; NULL }\n                array(2) { [&quot;name&quot;]=&gt; NULL [&quot;age&quot;]=&gt; string(2) &quot;11&quot; }\n                array(2) { [&quot;nae&quot;]=&gt; string(5) &quot;comtu&quot; [&quot;age&quot;]=&gt; string(2) &quot;11&quot; }\n                string(26) &quot;http://localhost/myrequest&quot;\n                string(43) &quot;http://localhost/myrequest?age=11&amp;nae=comtu&quot;\n                array(2) { [&quot;name&quot;]=&gt; string(5) &quot;comtu&quot; [&quot;age&quot;]=&gt; string(2) &quot;11&quot; }\n                */\n                }\n\n                //显示上传页面\n                public function uploadFile(){\n                return view(&apos;demo.demo_index_MyRequest&apos;);\n                }\n\n                //提交上传数据\n                public function postUploadFile(){\n                //返回post上来的数据 返回数组\n                var_dump(Request::file());\n                echo &apos;&lt;br&gt;&apos;; echo &apos;&lt;br&gt;&apos;;\n\n                //返回对象\n                var_dump(Request::file(&apos;my_file&apos;));\n                echo &apos;&lt;br&gt;&apos;; echo &apos;&lt;br&gt;&apos;;\n\n                //返回布尔值,是否包含文件\n                $bool = Request::hasFile(&apos;my_file&apos;);\n                var_dump($bool);\n                echo &apos;&lt;br&gt;&apos;; echo &apos;&lt;br&gt;&apos;;\n\n                //返回文件大小\n                $size = Request::file(&apos;my_file&apos;)-&gt;getClientSize();\n                var_dump($size);\n                echo &apos;&lt;br&gt;&apos;; echo &apos;&lt;br&gt;&apos;;\n\n                //返回上传时的文件名\n                $name = Request::file(&apos;my_file&apos;)-&gt;getClientOriginalName();\n                var_dump($name);\n                echo &apos;&lt;br&gt;&apos;; echo &apos;&lt;br&gt;&apos;;\n\n                //返回文件格式\n                $extension = Request::file(&apos;my_file&apos;)-&gt;getClientOriginalExtension();\n                var_dump($extension);\n                echo &apos;&lt;br&gt;&apos;; echo &apos;&lt;br&gt;&apos;;\n\n                //判断上传的文件是否有效\n                if (Request::file(&apos;my_file&apos;)-&gt;isValid()){\n                    //移动上传的文件到指定目录 人在public目录下自动创建uploads目录并把文件存储到当前目录中.\n                    $destinationPath = &apos;uploads/&apos;;\n                    Request::file(&apos;my_file&apos;)-&gt;move($destinationPath, uniqid().&apos;.&apos;.$extension); //md5 uniqid 唯一标识\n                }\n                }\n\n\n            }\n\n    路由:\n        app/Http/routes.php    \n\n            //http://localhost/myrequest\n            //http://localhost/myrequest?name=&amp;age=11\n            //http://localhost/myrequest?name=comtu&amp;age=11\n            //http://localhost/myrequest?na2me=comtu&amp;age=11\n            Route::any(&apos;myrequest&apos;,&apos;DemoMyRequestController@myrequest&apos;);\n\n            //文件上传\n            Route::any(&apos;uploadFile&apos;,&apos;DemoMyRequestController@uploadFile&apos;);\n            Route::post(&apos;uploadFile&apos;,&apos;DemoMyRequestController@postUploadFile&apos;);\n\n    视图:\n        resources/views/demo/demo_index_MyRequest.blade.php\n            &lt;html&gt;\n            &lt;head&gt;\n                &lt;meta charset=&quot;utf-8&quot;&gt;\n                &lt;title&gt;MyView&lt;/title&gt;\n                &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/style.css&quot;&gt;\n            &lt;/head&gt;\n            &lt;body&gt;\n            {{--<form action=\"uploadFile\" method=\"post\" enctype=\"application/x-www-form-urlencoded\">--}}\n                &lt;form action=&quot;uploadFile&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;\n                &lt;input type=&quot;hidden&quot; name=&quot;_token&quot; value=&quot;{{csrf_token()}}&quot;&gt;\n                &lt;fieldset style=&quot;width:230px&quot; &gt;\n                &lt;legend&gt;上传文件&lt;/legend&gt;\n                选择文件:&lt;input type=&quot;file&quot; name=&quot;my_file&quot; multiple /&gt;  &lt;br /&gt;\n                {{--选择文件:<input type=\"file\" name=\"my_file\" />  <br />--}}\n                &lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;\n                &lt;/fieldset&gt;\n            &lt;/form&gt;\n            &lt;/body&gt;\n            &lt;/html&gt;\n</code></pre><h1 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a><a id=\"Session\"></a>Session</h1><pre><code>方式一:使用文件.(默认)\n    .env文件中配置Session存储方式\n        CACHE_DRIVER=file\n        SESSION_DRIVER=file\n        QUEUE_DRIVER=sync\n\n方式二:使用数据库\n    .env文件中配置Session存储方式\n        CACHE_DRIVER=file\n        SESSION_DRIVER=database\n        QUEUE_DRIVER=sync\n    使用PHPStorm自带的lerminal工具或者计算机命令行cmd定位到项目目录下.\n\n    使用命令生成数据库表:\n        php artisan session:table\n\n        E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel&gt;php artisan session:table\n\n        当输出 Migration created successfully!时 \n        可查看到database/migrations目录下会新创建一个PHP文件类名为CreateSessionTable\n\n        再输入 composer dump-autoload\n            当输出 Generating autoload files 表示成功.\n\n        再输入 php artisan migrate    \n            当输出如下表示成功\n            Migrated: 2015_11_02_092311_create_session_table\n\n        查看数据库表多了一个sessions表\n            里面有id , payload , last_activity 三个字段\n        注: 执行php artisan migrate时有异常可查看&quot;我遇到的错误解决问题&quot;\n\n\n        生成表之后就可以使用Session了`~增删改查都无需要人工控制.\n\n控制器\n    app/Http/Controlers/DemoSessionController.php\n        &lt;?php namespace App\\Http\\Controllers;\n        use App\\Http\\Controllers\\Controller;\n        use Illuminate\\Support\\Facades\\Session;\n        class DemoSessionController extends Controller{\n\n            public function session(){\n            //查看全部Session数据\n            var_dump(Session::all());\n\n            /*\n             起初Session就有默认值\n            _previous : 上一次请求的地址\n            flash: 保存的数据\n            old:历史数据\n            new:新数据\n            例:\n             array:3 [▼\n              &quot;_token&quot; =&gt; &quot;7jcZiP2wv0nIpxrA4KUqn9sBRaU7YXpcc8M0zrue&quot;\n              &quot;_previous&quot; =&gt; array:1 [▼\n                &quot;url&quot; =&gt; &quot;http://localhost/uploadFile&quot;\n              ]\n              &quot;flash&quot; =&gt; array:2 [▼\n                &quot;old&quot; =&gt; []\n                &quot;new&quot; =&gt; []\n              ]\n            ]\n             */\n            echo &apos;&lt;br&gt;&apos;; echo &apos;&lt;br&gt;&apos;;\n\n            //增加/修改Session _ 方式一\n            Session::put(&apos;username&apos;,&apos;comtu&apos;);\n\n            //增加Session _ 方式二\n            session([&apos;username&apos;=&gt;&apos;comtu1&apos;]);\n\n            //获取值_不删除\n            $username = Session::get(&apos;username&apos;);\n            //获取值_后删除_只用一次\n            $username = Session::pull(&apos;username&apos;);\n            var_dump($username);\n            echo &apos;&lt;br&gt;&apos;; echo &apos;&lt;br&gt;&apos;;\n\n            //判断是否存在\n            $bool = Session::has(&apos;username&apos;);\n            var_dump($bool);\n\n            //删除Session值\n            $value = Session::forget(&apos;username&apos;);\n            var_dump($value);\n            }\n        }\n\n路由\n    app/Http/routes.php    \n        Route::any(&apos;session&apos;,&apos;DemoSessionController@session&apos;);\n</code></pre><h1 id=\"表单验证\"><a href=\"#表单验证\" class=\"headerlink\" title=\"表单验证\"></a><a id=\"表单验证\"></a>表单验证</h1><pre><code>需要引入use Request,Validator; 包\n$validator = Validator::make(数据,规则,自定义错误信息);\n$validator-&gt;fails();验证表单\n$validator-&gt;errors();//获取错误信息\n\n例:修改8.数据库中的Demo\n    public function postAddPerson(){\n    //存储提交数据到Session\n    Request::flash(); //见9.请求\n\n    //必填 required\n    //长度 between:最小,最大\n    //最小长度 min:4\n    //最大长度 max:16\n    //数字 numeric\n    //唯一性 unique:表名 会自动查询表对应字段是否存在有当前值\n    //检查值是否在table表中column字段中存在 exists:table,column 自动查询table表column字段是否包含值\n    //更多配置 http://laravel-china.org/docs/5.0/validation\n\n    //表单验证请求\n    $rq = Request::all();\n    $rules = [//规则\n        &apos;name&apos; =&gt; &apos;required|between:4,16|unique:person&apos; ,\n        &apos;age&apos; =&gt; &apos;required|numeric&apos;,\n        &apos;sex&apos; =&gt; &apos;required|numeric&apos;,\n        &apos;salary&apos; =&gt; &apos;required|numeric&apos;,\n       &apos;occ_id&apos; =&gt; &apos;required|numeric|exists:occupation,occ_id&apos;,\n        &apos;dep_id&apos; =&gt; &apos;required|numeric|exists:department,dep_id&apos;,\n    ];\n    $messages = [//自定义错误信息\n        &apos;required&apos; =&gt; &apos;The :attribute field is required.&apos;,\n        &apos;between&apos; =&gt; &apos;The :attribute must be between :min - :max.&apos;\n    ];\n    $validator = Validator::make($rq,$rules,$messages);//可三个参数\n    //$validator = Validator::make($rq,$rules);//可两个参数\n\n    if($validator-&gt;fails()){//表单验证\n        $person = new Person();//重新封装历史数据\n        $person-&gt;name = Request::old()[&apos;name&apos;];//表单验证失败,返回用户之前输入的信息\n        $person-&gt;age = Request::old()[&apos;age&apos;];\n        $person-&gt;sex = Request::old()[&apos;sex&apos;];\n        $person-&gt;salary = Request::old()[&apos;salary&apos;];\n        $person-&gt;occ_id = Request::old()[&apos;occ_id&apos;];\n        $person-&gt;dep_id = Request::old()[&apos;dep_id&apos;];\n\n        $data [&apos;person&apos;] = $person;\n        $data[&apos;occupation&apos;] = Occupation::get();\n        $data[&apos;department&apos;] = Department::all();\n        //错误信息 Illuminate\\Support\\MessageBag 对象类型 head($validator-&gt;get(&apos;key&apos;))获取键值\n        $data[&apos;validator&apos;] = $validator-&gt;errors();\n        return view(&apos;demo.demo_add_update_database&apos;,$data);\n    }\n\n    $person = new Person();\n    //增加数据方式2\n    $person-&gt;name = Request::input(&apos;name&apos;, &apos;default&apos;);//获取Post请求的数据\n    $person-&gt;age = Request::input(&apos;age&apos;, 20);\n    $person-&gt;sex = Request::input(&apos;sex&apos;, 0);\n    $person-&gt;salary = Request::input(&apos;salary&apos;, 1800);\n    $person-&gt;occ_id = Request::input(&apos;occ_id&apos;);\n    $person-&gt;dep_id = Request::input(&apos;dep_id&apos;);\n    $person-&gt;save();\n    return redirect(&apos;myDatabase/Demo&apos;);\n    }\n</code></pre><h1 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a><a id=\"中间件\"></a>中间件</h1><pre><code>HTTP 中间件提供一个方便的机制来过滤进入应用程序的 HTTP 请求，\n例如，Laravel 默认包含了一个中间件来检验用户身份验证，如果用户没有经过身份验证，\n中间件会将用户导向登录页面，然而，如果用户通过身份验证，中间件将会允许这个请求进一步继续前进。\n\n当然，除了身份验证之外，中间件也可以被用来执行各式各样的任务，CORS 中间件负责替所\n有即将离开程序的响应加入适当的响应头，一个日志中间件可以记录所有传入应用程序的请求。 \nLaravel 框架已经内置一些中间件，包括维护、身份验证、CSRF 保护，等等。\n所有的中间件都位于 app/Http/Middleware 目录内。\n\n使用步骤\n    1.创建中间件\n        使用命令: php artisan make:middleware AdminPrivilegeMiddleware\n        在app/Http/Middleware文件夹中创建中间件文件\n        如:AdminPrivilegeMiddleware.php\n            &lt;?php\n            namespace App\\Http\\Middleware;\n            use Closure;\n            use Illuminate\\Support\\Facades\\Session;\n            class AdminPrivilegeMiddleware\n            {\n                /**\n                 * Handle an incoming request.\n                 * @param  \\Illuminate\\Http\\Request  $request\n                 * @param  \\Closure  $next\n                 * @return mixed\n                 */\n                public function handle($request, Closure $next)\n                {\n                //权限认证\n                $bool = Session::has(&apos;admin_user&apos;);\n                if(!$bool)\n                    return redirect(&apos;admin/privilege/login&apos;);\n                return $next($request);\n                }\n            }\n    2.注册中间件 \n        在app/Http目录下的Kernel.php增加如下内容\n         protected $routeMiddleware = [\n            //注册中间件\n            &apos;auth.admin&apos; =&gt; \\App\\Http\\Middleware\\AdminPrivilegeMiddleware::class,\n         ];\n    3.使用中间件\n        在app/Http目录下的routes.php使用:\n        //中间件,权限控制\n        Route::group([&apos;middleware&apos; =&gt; &apos;auth.admin&apos;], function() {\n            Route::get(&apos;admin/main/index&apos;,&apos;admin\\MainController@index&apos;);\n            Route::get(&apos;admin/categroy/index&apos;,&apos;admin\\CategroyController@index&apos;);\n        }\n</code></pre><h1 id=\"哈希\"><a href=\"#哈希\" class=\"headerlink\" title=\"哈希\"></a><a id=\"哈希\"></a>哈希</h1><pre><code>可用于加密用户的敏感信息或者密码\n需要导入 use Illuminate\\Support\\Facades\\Hash; 包\n使用方法: \n    $password = &apos;123&apos;;\n    $pass = Hash::make($password);//加密\n    $password2 = &apos;123&apos;;\n    $bool = Hash:check($pass,$password2);检查是否相同\n</code></pre><h1 id=\"辅助函数\"><a href=\"#辅助函数\" class=\"headerlink\" title=\"辅助函数\"></a><a id=\"辅助函数\"></a>辅助函数</h1><pre><code>array 数组相关\n\n    head\n        $arr = [1,2,3];\n        $value = head($arr);//打印1 返回数组第一个元素\n\n    last \n        $arr = [1,2,3];\n        $value = last($arr);//打印3 返回数组第一个元素\n\n    array_only\n        $arr = [&apos;name&apos;=&gt;&apos;comtu&apos;,&apos;age&apos;=&gt;10,&apos;job&apos;=&gt;&apos;manager&apos;];\n        $value = array_only($arr,[&apos;name&apos;,&apos;age&apos;]);//返回数组中指定的数据\n        //打印 array(2) { [&quot;name&quot;]=&gt; string(5) &quot;comtu&quot; [&quot;age&quot;]=&gt; int(10) } \n\n    array_first //返回满足条件的第一条数据\n        $arr = [10,20,30];\n        $value = array_first($arr,function($key,$v){\n            return $v &gt;10; \n        });\n        //打印 20\n\n    array_add\n        $arr = [&apos;name&apos;=&gt;&apos;comtu&apos;,&apos;age&apos;=&gt;10];\n        $value = array_add($arr,&apos;job&apos;,&apos;manager&apos;);//给数组增加字段 \n        // 返回 [&apos;name&apos;=&gt;&apos;comtu&apos;,&apos;age&apos;=&gt;10,&apos;job&apos;=&gt;&apos;manager&apos;]\n\n    array_set //修改数组中对应的值\n        $arr = [&apos;start_time&apos;=&gt;&apos;2009-06-01&apos;,&apos;end_time&apos;=&gt;&apos;2014-11-30&apos;];\n        array_set($rq,&apos;start_time&apos;,strtotime(Request::input(&apos;start_time&apos;)));  //strtotime时间转时间戳\n        //返回 [&apos;start_time&apos;=&gt;1243814400,&apos;end_time&apos;=&gt;&apos;2014-11-30&apos;];;\n\n    array_except\n        $arr = [&apos;name&apos;=&gt;&apos;comtu&apos;,&apos;age&apos;=&gt;10,&apos;job&apos;=&gt;&apos;manager&apos;];\n        $value = array_except($arr,&apos;job&apos;);//返回数组中除指定键后的数据 \n        //返回 [&apos;name&apos;=&gt;&apos;comtu&apos;,&apos;age&apos;=&gt;10]\n\n    array_flatten\n        $arr = [\n            &apos;a&apos; =&gt;1,\n            &apos;b&apos; =&gt;[\n                &apos;a&apos;=&gt;2,\n                &apos;b&apos;=&gt;3\n                ]\n            ];\n        $value = aray_flatten($arr);//返回$arr内的所有值 \n        //返回 array(3) { [0]=&gt; int(1) [1]=&gt; int(2) [2]=&gt; int(3) } \n\n    array_where\n        $arr = [&apos;name&apos; =&gt; &apos;comtu&apos;,&apos;age&apos;=&gt;18,&apos;job&apos;=&gt;&apos;manager&apos;];\n        $value = array_where($arr,function($k,$v){\n            return is_string($v);\n        });//返回满足条件的新数组 返回全是String类型的数据\n        //返回 [&apos;name&apos; =&gt; &apos;comtu&apos;,&apos;job&apos;=&gt;&apos;manager&apos;]\n\nPath 辅助函数\n    echo app_path();// 项目绝对路径 项目绝对路径\n        E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel\\app\n\n    echo config_path(); 项目下的配置目录的绝对路径\n        E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel\\config\n\n    echo public_path(); 项目下的public目录的绝对路径\n        E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel\\public\n\n    echo storage_path(); 项目下的storage目录的绝对路径\n        E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\my_laravel\\storage\n\n\n字符串 辅助函数\n    str_plural 单词单数变复数\n        例如 $value = str_plural(&apos;apple&apos;); //返回apples\n             $value = str_plural(&apos;sheep&apos;);// 返回sheep \n             $value = str_plural(&apos;ability&apos;);// 返回abilities\n\n    starts_with\n        //字符串是否是与指定的内容开头\n        var_dump( starts_with(&apos;abcd&apos;,&apos;ab&apos;));//返回true\n\n    ends_with\n        //字符串是否是与指定的内容结束\n        var_dump( ends_with(&apos;abcd&apos;,&apos;b&apos;));//返回false\n\n    camel_case\n        //将字符串替换成驼峰命名法\n        echo camel_case(&apos;hello_world&apos;);//返回helloWorld\n\n    class_basename\n        //返回 命名空间的类名\n        echo class_basename(&apos;App\\Controller\\DemoDataBaseController&apos;);//返回DemoDataBaseController\n\n    str_limit\n        //限制字符串的长度_返回指定长度的字符串\n        echo str_limit(&apos;abcdefg&apos;,3);//返回abc... 后面有省略号\n\n    str_is\n        //判断字符串是否满足条件 是否是与ab开头e结尾_参数一是条件,参数二是判断的值\n        var_dump(str_is(&apos;ab*e&apos;,&apos;abcde&apos;)); //返回true\n</code></pre><h1 id=\"在-Laravel-中使用图片处理库-Integration-Image\"><a href=\"#在-Laravel-中使用图片处理库-Integration-Image\" class=\"headerlink\" title=\"在 Laravel 中使用图片处理库 Integration/Image\"></a><a id=\"图片处理库Integration/Image\"></a>在 Laravel 中使用图片处理库 Integration/Image</h1><pre><code>系统需求\n\n     PHP &gt;= 5.3\n     Fileinfo Extension\n     GD Library (&gt;=2.0) … or …\n     Imagick PHP extension (&gt;=6.5.7)\n\n安装部署 Integration/image\n\n    在 composer.json [require] 节增加&quot;&quot;intervention/image&quot;: &quot;2.*&quot;&quot;，之后执行 composer update 我当时下载的是2.3.2\n\n    如果出现错误信息: (PHP版本5.5.28)\n            E:\\ComTu_Design\\PHP\\Apache2.2\\htdocs\\firstPHPStorm\\myLaravelShop&gt;composer update\n            &gt; php artisan clear-compiled\n            Loading composer repositories with package information\n            Updating dependencies (including require-dev)\n            Your requirements could not be resolved to an installable set of packages.\n\n              Problem 1\n                - Installation request for intervention/image 2.0.17 -&gt; \n                    satisfiable by intervention/image[2.0.17].\n                - intervention/image 2.0.17 requires ext-fileinfo * -&gt; \n                    the requested PHP extension fileinfo is missing from your system.\n        解决方法:\n            找到PHP环境目录 --&gt; 打开 php.ini 文件 找到 ;extension=php_fileinfo.dll (PHP5.5.28-nts 862行) \n            去除前面的;号~~重新运行即可. 会在后台下载,等待.\n\nLaravel 配置\n\n    安装部署 Integration/image 完成后，打开配置文件 config/app.php 在相应位置添加代码，\n    然后 Image 类就能自动加载并可供使用了。其功能强大到可以处理你的几乎所有图片处理需求。\n        //服务提供器 Laravel 5.1.23     在 providers  中配置\n         Intervention\\Image\\ImageServiceProvider::class,\n\n        //别名配置 Laravel 5.1.23  在 aliases 中配置 \n        &apos;Image&apos;     =&gt; Intervention\\Image\\Facades\\Image::class,\n\n配置设置\n    默认情况下， Integration/Image 使用PHP的GD库扩展。\n    如果你想切换到 imagick，你可以使用 php artisan 创建一个配置文件以添加相应的配置。\n    $ php artisan config:publish intervention/imag\n\n基本使用\n\n    这里列出几个基本功能，更详细使用说明请查看相关接口文档。\n    文档地址: http://image.intervention.io/  墙\n\n        Demo\n        //1、显示一张图片\n        Route::get(&apos;imageRead&apos;,function(){\n            $img = Image::make(public_path().&apos;/uploads/43195301.jpg&apos;);//读取图片\n            return $img-&gt;response();//返回图片资源在浏览器中显示\n        });\n\n        //2、创建缩略图\n        Route::get(&apos;imageThumbnail&apos;,function(){\n            if (!file_exists(public_path().&apos;/uploads/thumbnail&apos;)){ //创建文件夹\n            mkdir (public_path().&quot;/uploads/thumbnail&quot;);\n            }\n\n            $rawFilePath = public_path().&apos;/uploads/43195301.jpg&apos;;\n            $thumbnailFilePath = public_path().&apos;/uploads/thumbnail/&apos;.uniqid().&apos;.jpg&apos;;\n\n            //生成缩略图\n            $img = Image::make($rawFilePath);//读取图片文件\n            $img-&gt;resize(120,120);//缩略图大小 宽/高\n            $img-&gt;save($thumbnailFilePath);//需要保存在已有的目录中\n            echo $rawFilePath.&apos;生成缩略图到&apos;.$thumbnailFilePath;\n        });\n\n        //3、绘制一张图片\n        Route::get(&apos;imageCanvas&apos;,function(){\n            $img = Image::canvas(800, 600, &apos;#ccc&apos;);\n            return $img-&gt;response();\n        });\n\n        //4.插入一个水印\n        Route::get(&apos;imageInsert&apos;,function(){\n            $rawFilePath = public_path().&apos;/uploads/43195301.jpg&apos;;\n            $watermark = public_path().&apos;/uploads/563b24c067472.jpg&apos;;//水印\n            //top-left (default)\n            //top\n            //top-right\n            //left\n            //center\n            //right\n            //bottom-left\n            //bottom\n            //bottom-right\n            // $img-&gt;insert($watermark, &apos;bottom-right&apos;, 10, 10);//其它位置\n            // $img-&gt;insert($watermark, &apos;center&apos;);//中间\n            $img = Image::make($rawFilePath)-&gt;resize(800, 600)-&gt;insert($watermark);//打水印,默认左上角\n\n            return $img-&gt;response();\n        });\n\n\n    如果运行时页面中出现如下错误:\n        NotSupportedException in Driver.php line 18:\n        GD Library extension not available with this PHP installation.\n        in Driver.php line 18\n        at Driver-&gt;__construct() in ImageManager.php line 107\n        at ImageManager-&gt;createDriver() in ImageManager.php line 50\n        at ImageManager-&gt;make(&apos;/public/uploads/43195301.jpg&apos;) in Facade.php line 214\n        ....\n    解决方案\n        开启PHP的GD功能\n        找到PHP环境目录 --&gt; 打开 php.ini (PHP5.5.28-nts 863行) 文件 \n        找到 ;extension=php_gd2.dll 去除前面的;号~~重新启动服务运行即可. \n</code></pre><h1 id=\"我遇到的错误\"><a href=\"#我遇到的错误\" class=\"headerlink\" title=\"我遇到的错误\"></a><a id=\"我遇到的错误\"></a>我遇到的错误</h1><pre><code>链接数据库时异常.\n    //路由中,尝试连接数据库\n    Route::get(&apos;myDatabase&apos;,function(){\n        $name = DB::connection()-&gt;getDatabaseName();\n        echo $name; //打印出 数据库名 my_laravel 表示成功\n    });\n\n    PDOException in Connector.php line 47:\n    could not find driver\n    in Connector.php line 47\n    at PDO-&gt;__construct(&apos;mysql:host=localhost;dbname=my_laravel&apos;,\n    &apos;root&apos;, &apos;root&apos;, array(&apos;0&apos;, &apos;2&apos;, &apos;0&apos;, false, false)) in Connector.php line 47\n    .....\n\n    解决办法:\n    php环境中找到 php.ini文件并找到 ;extension=php_pdo_mysql.dll \n    并去除前面的;号.然后重启服务器.如apache 或者 关闭服务重新启动服务 php -S localhost:80 -t my_laravel\\public\n\nSession生成数据库表异常\n    错误原因1.可能存在冲突的表原因.\n        database/migrations 目录下的文件是需要生成的表.\n        如果出现错误警告,可查看当前目录下的文件是否是自己需求要创建的表.\n        如果里面存在冲突的表,如我当时有两个users表\n        查打开查看文件是否是自己的内容.如果不是.~~可删除文件,需要注意的是\n        删除后需要在    my_laravel/vendor/composer/autoload_classmap.php \n        文件中找到相同的一条记录一并删除重新执行即可.\n\n还有遇到的一些错误见功能模块,有解决方案\n</code></pre><h1 id=\"artisan命令\"><a href=\"#artisan命令\" class=\"headerlink\" title=\"artisan命令\"></a><a id=\"artisan命令\"></a>artisan命令</h1><pre><code>谨慎操作还原回清静 php artisan fresh\n\n创建控制器\n    php artisan make:controller MyController\n\n创建model\n    php artisan make:model User\n\n查看当前所有路由列表\n    php artisan route:list\n\n一整个程序停止解析(使用场景如,网站遇到攻击,网站需要维护等)\n    配置后访问网站的所有地址都会被跳转到Beright back\n    php artisan down \n    php artisan up\n\n生成Session数据库表\n    php artisan session:table  //1\n    composer dump-autoload     //2\n    php artisan migrate        //3\n\n创建中间件\n    php artisan make:middleware MyMiddleware\n</code></pre><p>英文文档<br><a href=\"http://laravel.com/docs/5.1\">http://laravel.com/docs/5.1</a>   </p>\n<p>中文文档:<br><a href=\"http://www.golaravel.com/\">http://www.golaravel.com/</a><br><a href=\"http://laravel-china.org/docs/5.0/middleware\">http://laravel-china.org/docs/5.0/middleware</a><br><a href=\"http://www.golaravel.com/post/install-and-run-laravel-5-x-on-windows/\">http://www.golaravel.com/post/install-and-run-laravel-5-x-on-windows/</a>   </p>\n<h1 id=\"Demo下载\"><a href=\"#Demo下载\" class=\"headerlink\" title=\"Demo下载\"></a><a id=\"Demo\"></a>Demo下载</h1><p>本博文的案例Demo下载地址如下:</p>\n<p><a href=\"/res/file/blog/2015/10/10/PHP_Laravel/laravel-v5.0.22_Demo.rar\">本文案例Demo</a></p>\n<p><a href=\"/res/file/blog/2015/10/10/PHP_Laravel/myLaravelShop_Demo.rar\">本文案例Demo_购物商场</a></p>\n<p>刚学PHP的两个框架Laravel与CI,个人对这两个框架的感觉如下~</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:left\">Laravel</th>\n<th style=\"text-align:right\">Codeigniter</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>开发效率</td>\n<td style=\"text-align:left\">★★★★</td>\n<td style=\"text-align:right\">★★★</td>\n</tr>\n<tr>\n<td>运行效率</td>\n<td style=\"text-align:left\">★★★</td>\n<td style=\"text-align:right\">★★★★</td>\n</tr>\n<tr>\n<td>学习成本</td>\n<td style=\"text-align:left\">★★☆</td>\n<td style=\"text-align:right\">★</td>\n</tr>\n</tbody>\n</table>"},{"layout":"post","title":"Android开源项目分类汇总","duoshuo":true,"date":"2014-10-20T16:00:00.000Z","_content":"\nAndroid开源项目分类汇总\n====================\n \n## 目前包括：  \n>[Android开源项目第一篇——个性化控件(View)篇]  \n*&nbsp;&nbsp;包括[ListView]、[ActionBar]、[Menu]、[ViewPager]、[Gallery]、[GridView]、[ImageView]、[ProgressBar]、[TextView]、[ScrollView]、[TimeView]、[TipView]、[FlipView]、[ColorPickView]、[GraphView]、[UI Style]、[其他]*  \n[Android开源项目第二篇——工具库篇]  \n*&nbsp;&nbsp;包括[依赖注入]、[图片缓存]、[网络相关]、[数据库ORM工具包]、[Android公共库]、[高版本向低版本兼容库]、[多媒体]、[事件总线]、[传感器]、[安全]、[插件化]、[文件]、[其他]*  \n[Android开源项目第三篇——优秀项目篇]  \n*&nbsp;&nbsp;比较有意思的完整的Android项目*  \n[Android开源项目第四篇——开发及测试工具篇]  \n*&nbsp;&nbsp;包括[开发效率工具]、[开发自测相关]、[测试工具]、[开发及编译环境]、[其他]*  \n[Android开源项目第五篇——优秀个人和团体篇]  \n*&nbsp;&nbsp;乐于分享并且有一些很不错的开源项目的[个人]和[组织]，包括JakeWharton、Chris Banes、Koushik Dutta等大牛*  \n\n<!-- more -->\n\n## 第一部分 个性化控件(View)  \n主要介绍那些不错个性化的View，包括ListView、ActionBar、Menu、ViewPager、Gallery、GridView、ImageView、ProgressBar、TextView、ScrollView、TimeView、TipView、FlipView、ColorPickView、GraphView、UI Style等等。  \n\n#### 一、ListView  \n1. android-pulltorefresh  \n一个强大的拉动刷新开源项目，支持各种控件下拉刷新，ListView、ViewPager、WevView、ExpandableListView、GridView、ScrollView、Horizontal  ScrollView、Fragment上下左右拉动刷新，比下面johannilsson那个只支持ListView的强大的多。并且它实现的下拉刷新ListView在item不足一屏情况下也不会显示刷新提示，体验更好。  \n项目地址：https://github.com/chrisbanes/Android-PullToRefresh  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refreshview-demo.apk?raw=true  \nAPP示例：新浪微博各个页面  \n\n1. android-pulltorefresh-listview  \n下拉刷新ListView，这个被很多人使用的项目实际有不少bug，推荐使用上面的android-pulltorefresh  \n项目地址：https://github.com/johannilsson/android-pulltorefresh  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refresh-listview-demo.apk?raw=true  \n\n1. android-Ultra-Pull-to-Refresh  \n下拉刷新，第一个项目已经停止维护了，并且使用起来相对复杂，定制性也差。这个是替代和改良方案。这个继承于ViewGroup可以包含任何View。功能甚至比SwipeRefreshLayout强大。使用起来非常简单。良好的设计，如果你想定制自己的UI样式，非常简单，就像给ListView加一个Header View那么简单。支持 `API LEVEL >= 8`  \n项目地址：https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh  \nDemo地址：https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh/blob/master/ptr-demo/target/ultra-ptr-demo.apk?raw=true  \n效果图：  \n<div>  \n  <img src='http://srain-github.qiniudn.com/ultra-ptr/contains-all-of-views.gif' width=\"150px\"/>  \n  <img src='http://srain-github.qiniudn.com/ultra-ptr/release-to-refresh.gif' width=\"150px\"/>  \n  <img src='http://srain-github.qiniudn.com/ultra-ptr/auto-refresh.gif' width=\"150px\"/>  \n  <img src='http://srain-github.qiniudn.com/ultra-ptr/store-house-string-array.gif' width=\"150px\"/>  \n</div>  \n\n1. DropDownListView  \n下拉刷新及滑动到底部加载更多ListView  \n项目地址：https://github.com/Trinea/AndroidCommon  \nDemo地址：https://play.google.com/store/apps/details?id=cn.trinea.android.demo  \n文档介绍：http://www.trinea.cn/android/dropdown-to-refresh-and-bottom-load-more-listview/  \n\n1. DragSortListView  \n拖动排序的ListView，同时支持ListView滑动item删除，各个Item高度不一、单选、复选、CursorAdapter做为适配器、拖动背景变化等  \n项目地址：https://github.com/bauerca/drag-sort-listview  \nDemo地址：https://play.google.com/store/apps/details?id=com.mobeta.android.demodslv  \nAPP示例：Wordpress Android  \n\n1. SwipeListView  \n支持定义ListView左右滑动事件，支持左右滑动位移，支持定义动画时间  \n项目地址：https://github.com/47deg/android-swipelistview  \nDemo地址：https://play.google.com/store/apps/details?id=com.fortysevendeg.android.swipelistview  \nAPP示例：微信  \n\n1. Android-SwipeToDismiss  \n滑动Item消失ListView，支持3.0以下版本见：https://github.com/JakeWharton/SwipeToDismissNOA  \n项目地址：https://github.com/romannurik/Android-SwipeToDismiss  \nDemo地址：https://github.com/JakeWharton/SwipeToDismissNOA/SwipeToDismissNOA.apk/qr_code  \n\n1. PinnedHeaderExpandableListView  \n首先它是一个ExpandableListView，但是它的头部可以固定，其次，在它的上面还有一个头部可以来回伸缩  \n项目地址：https://github.com/singwhatiwanna/PinnedHeaderExpandableListView  \n效果图：![Renderings](https://camo.githubusercontent.com/fa7f516b0b6e2921007a17cbc359b3f661f32226/687474703a2f2f696d672e626c6f672e6373646e2e6e65742f32303134303531313135313534363834333f77617465726d61726b2f322f746578742f6148523063446f764c324a736232637559334e6b626935755a58517663326c755a33646f5958527064324675626d453d2f666f6e742f3561364c354c32542f666f6e7473697a652f3430302f66696c6c2f49304a42516b46434d413d3d2f646973736f6c76652f37302f677261766974792f536f75746845617374)  \nAPP示例：百度手机卫士垃圾清理界面  \n\n1. StickyListHeaders  \nGroupName滑动到顶端时会固定不动直到另外一个GroupName到达顶端的ExpandListView，支持快速滑动，支持Android2.3及以上  \n项目地址：https://github.com/emilsjolander/StickyListHeaders  \n效果图：![Renderings](https://raw.github.com/emilsjolander/StickyListHeaders/master/demo.gif)  \nAPP示例：Android 4.0联系人  \n\n1. pinned-section-listview  \nGroupName滑动到顶端时会固定不动直到另外一个GroupName到达顶端的ExpandListView  \n项目地址：https://github.com/beworker/pinned-section-listview  \n效果图：![Renderings](https://raw.github.com/beworker/pinned-section-listview/master/screen1.png)  \n\n1. PinnedHeaderListView  \nGroupName滑动到顶端时会固定不动直到另外一个GroupName到达顶端的ExpandListView  \n项目地址：https://github.com/JimiSmith/PinnedHeaderListView  \n\n1. QuickReturn  \nListView/ScrollView的header或footer，当向下滚动时消失，向上滚动时出现  \n项目地址：https://github.com/lawloretienne/QuickReturn  \nDemo地址：https://play.google.com/store/apps/details?id=com.etiennelawlor.quickreturn  \n\n1. QuickReturnHeader  \nListView/ScrollView的header或footer，当向下滚动时消失，向上滚动时出现  \n项目地址：https://github.com/ManuelPeinado/QuickReturnHeader  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/quick-return-header-demo.apk?raw=true  \nAPP示例：google plus  \n\n1. IndexableListView  \nListView右侧会显示item首字母快捷索引，点击可快速滑动到某个item  \n项目地址：https://github.com/woozzu/IndexableListView  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/indexable-listview.apk?raw=true  \nAPP示例：微信通讯录、小米联系人  \n\n1. CustomFastScrollView  \nListView快速滑动，同时屏幕中间PopupWindows显示滑动到的item内容或首字母  \n项目地址：https://github.com/nolanlawson/CustomFastScrollViewDemo  \n效果图：![Renderings](https://raw.github.com/nolanlawson/CustomFastScrollViewDemo/master/example.png)  \n\n1. Android-ScrollBarPanel  \nListView滑动时固定的Panel指示显示在scrollbar旁边  \n项目地址：https://github.com/rno/Android-ScrollBarPanel  \n效果图：![Renderings](https://github.com/rno/Android-ScrollBarPanel/raw/master/demo_capture.png)  \n\n1. SlideExpandableListView  \n用户点击listView item滑出固定区域，其他item的区域收缩  \n项目地址：https://github.com/tjerkw/Android-SlideExpandableListView  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/slide-expandable-listView-demo.apk?raw=true  \n\n1. JazzyListView  \nListView及GridView item以特殊动画效果进入屏幕，效果包括grow、cards、curl、wave、flip、fly等等  \n项目地址：https://github.com/twotoasters/JazzyListView  \nDemo地址：https://play.google.com/store/apps/details?id=com.twotoasters.jazzylistview.sample  \n在线演示：http://lab.hakim.se/scroll-effects/  \n\n1. ListViewAnimations  \n带Item显示动画的ListView，动画包括底部飞入、其他方向斜飞入、下层飞入、渐变消失、滑动删除等  \n项目地址：https://github.com/nhaarman/ListViewAnimations  \nDemo地址：https://play.google.com/store/apps/details?id=com.haarman.listviewanimations  \nAPP示例：Google plus、Google Now卡片式进入、小米系统中应用商店、联系人、游戏中心、音乐、文件管理器的ListView、Ultimate、Light Flow Lite、TreinVerkeer、Running Coach、Pearl Jam Lyrics、Calorie Chart、Car Hire、Super BART、DK FlashCards、Counter Plus、Voorlees Verhaaltjes 2.0  \n\n1. DevsmartLib-Android  \n横向ListView  \n项目地址：https://github.com/dinocore1/DevsmartLib-Android  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/horizontal-listview-demo.apk?raw=true  \n\n1. TwoWayView  \n横向ListView的效果，继承自AdapterView  \n项目地址：https://github.com/lucasr/twoway-view  \n\n1. HorizontalVariableListView  \n支持Item宽度不一致的ListView  \n项目地址：https://github.com/sephiroth74/HorizontalVariableListView  \n\n1. LinearListView  \n用LinearLayout实现的ListView，可解决多个ListView并存等问题。目前自己也有需要，等亲自尝试过后会再具体介绍  \n项目地址：https://github.com/frankiesardo/LinearListView  \n\n1. MultiChoiceAdapter  \n支持多选的ListView Adapter  \n项目地址：https://github.com/ManuelPeinado/MultiChoiceAdapter  \nDemo地址：https://play.google.com/store/apps/details?id=com.manuelpeinado.multichoiceadapter.demo  \n\n1. EnhancedListView  \n支持横向滑动删除列表项以及撤销删除的ListView，该项目的前身是[SwipeToDismissUndoList](https://github.com/timroes/SwipeToDismissUndoList)  \n项目地址：https://github.com/timroes/EnhancedListView  \nDemo地址：https://play.google.com/store/apps/details?id=de.timroes.android.listviewdemo&rdid=de.timroes.android.listviewdemo  \n\n1. ListBuddies  \n自动滚动的双列ListView ，两个ListView滚动速度不一致，有视差效果  \n项目地址：https://github.com/jpardogo/ListBuddies  \nDemo地址：https://play.google.com/store/apps/details?id=com.jpardogo.android.listbuddies  \n效果图：![Renderings](https://raw.github.com/jpardogo/ListBuddies/master/art/screenshot_listbuddies_2.png)  \n\n1. SwipeMenuListView  \n针对ListView item的侧滑菜单  \n项目地址：https://github.com/baoyongzhang/SwipeMenuListView  \n效果图：![Renderings](https://raw.githubusercontent.com/baoyongzhang/SwipeMenuListView/master/demo.gif)  \nAPP示例：手机QQV5.0  \n\n1. PagingListView  \n分页加载的ListView。当滑动到ListView底部最后一个元素时，显示一个进度行，然后加载下一页数据，并显示。  \n项目地址：https://github.com/nicolasjafelle/PagingListView  \n\n1. PullZoomView  \n支持下拉时HeaderView缩放的ListView、ScrollView  \n项目地址：https://github.com/Frank-Zhu/PullZoomView  \n效果图：![Renderings](https://raw.githubusercontent.com/Frank-Zhu/PullZoomView/master/art/pull-to-zoom.gif)  \n\n1. PullToZoomInListView  \n滑动ListView时使其HeaderView跟随滑动缩放  \n项目地址：https://github.com/matrixxun/PullToZoomInListView  \n效果图：![Renderings](https://github.com/matrixxun/PullToZoomInListView/raw/master/art/pull-to-zoom.gif)  \n\n1. CalendarListview  \n实现每个月一行日历效果的ListView  \n项目地址：https://github.com/traex/CalendarListview  \n效果图：![Renderings](https://github.com/traex/CalendarListview/raw/master/demo.gif)  \n\n1. sticky-headers-recyclerview  \nGroupName滑动到顶端时会固定不动直到另外一个GroupName到达顶端的ListView，采用support-v7中的RecyclerView实现  \n项目地址：https://github.com/timehop/sticky-headers-recyclerview  \n\n1. PullSeparateListView  \n到达顶部或底部继续拉动时，实现Item间的相互分离，两种模式：(1) 全部分离的模式，即屏幕内所有Item都会分离 (2)部分分离模式，以点击位置为分界点，部分item分离  \n项目地址：https://github.com/chiemy/PullSeparateListView  \n效果图：![Renderings](https://github.com/chiemy/PullSeparateListView/raw/master/capture.gif)  \n\n1. ExpandableLayout  \nHeader 和 Content Item 都可以展开的 ExpandableListview  \n项目地址：https://github.com/traex/ExpandableLayout  \n\n1. PagedHeadListView  \n支持paginated header以及material page indicator的ListView.  \n项目地址：https://github.com/JorgeCastilloPrz/PagedHeadListView  \n效果图：![Renderings](https://raw.githubusercontent.com/JorgeCastilloPrz/PagedHeadListView/master/app/src/main/res/raw/preview1.gif)  \n  \n\n1. CustomSwipeListView  \n支持左滑弹出自定义菜单，右滑删除且允许撤销，同时可以自定义滑动动画时间和滑动触发事件的时机等。   \n项目地址：https://github.com/xyczero/Android-CustomSwipeListView   \n效果图：![screenshot](http://7u2jsw.com1.z0.glb.clouddn.com/githubCustomSwipeListview_Set.PNG)   \nDemo地址：[Download here](http://7u2jsw.com1.z0.glb.clouddn.com/githubCustomSwipeListView.apk)   \n\n1. Pull-to-Refresh.Rentals-Android  \n提供一个简单可以自定义的下拉刷新实现，[Yalantis](http://yalantis.com/) 出品。  \n项目地址：https://github.com/Yalantis/Pull-to-Refresh.Rentals-Android  \n效果图：![Renderings](https://camo.githubusercontent.com/d406ac5a03a2b1fa5cf41fadc8d2408cb8709bdc/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3132353035362f73637265656e73686f74732f313635303331372f7265616c6573746174652d70756c6c5f312d322d332e676966)  \n\n\n\n#### 二、ActionBar  \n1. ActionBarSherlock  \n为Android所有版本提供统一的ActionBar，解决4.0以下ActionBar的适配问题  \n项目地址：https://github.com/JakeWharton/ActionBarSherlock  \nDemo地址：https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos  \nAPP示例：太多了。。现在连google都在用  \n效果图: ![comtu](https://camo.githubusercontent.com/b21aae46566b05d5adbb1fa71b88708bc659e120/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67)\n\n1. ActionBar-PullToRefresh  \n下拉刷新，ActionBar出现加载中提示  \n项目地址：https://github.com/chrisbanes/ActionBar-PullToRefresh  \nDemo地址：https://play.google.com/store/apps/details?id=uk.co.senab.actionbarpulltorefresh.samples.stock  \nAPP示例：Gmail，Google plus，知乎等  \n\n1. FadingActionBar  \nListView向下滚动逐渐显现的ActionBar  \n项目地址：https://github.com/ManuelPeinado/FadingActionBar  \nDemo地址：https://play.google.com/store/apps/details?id=com.manuelpeinado.fadingactionbar.demo  \nAPP示例：google music，知乎  \n效果图: ![comtu](https://camo.githubusercontent.com/4fb0e40bdb047be104b2cefddee62923b8a2da37/68747470733a2f2f7261772e6769746875622e636f6d2f4d616e75656c5065696e61646f2f466164696e67416374696f6e4261722f6d61737465722f6172742f726561646d655f7069632e706e67)\n\n1. NotBoringActionBar  \ngoogle music下拉收缩的ActionBar  \n项目地址：https://github.com/flavienlaurent/NotBoringActionBar  \nDemo地址：http://flavienlaurent.com/blog/2013/11/20/making-your-action-bar-not-boring/  \nAPP示例：Google音乐  \n效果图: ![comtu](https://camo.githubusercontent.com/65f2d44e0e5064369aec8ee41838bd073e695975/68747470733a2f2f7261772e6769746875622e636f6d2f666c617669656e6c617572656e742f4e6f74426f72696e67416374696f6e4261722f6d61737465722f67726170686963732f6e6f74626f72696e6761622e676966)\n\n1. RefreshActionItem  \n带进度显示和刷新按钮的ActionBar  \n项目地址：https://github.com/ManuelPeinado/RefreshActionItem  \nDemo地址：https://play.google.com/store/apps/details?id=com.manuelpeinado.refreshactionitem.demo  \nAPP示例：The New York Times，DevAppsDirect.  \n效果图: ![comtu](https://camo.githubusercontent.com/46884ee60bb699929890a1a9eed0c2610ca99039/68747470733a2f2f7261772e6769746875622e636f6d2f4d616e75656c5065696e61646f2f52656672657368416374696f6e4974656d2f6d61737465722f6172742f726561646d655f7069632e706e67)\n\n1. GlassActionBar  \n类似玻璃的有一定透明度的ActionBar  \n项目地址：https://github.com/ManuelPeinado/GlassActionBar  \nDemo地址：https://play.google.com/store/apps/details?id=com.manuelpeinado.glassactionbardemo  \nAPP示例：google music  \n效果图: ![comtu](https://camo.githubusercontent.com/01c80fb941f2ba07f6d9d26d80dd4792a79127d4/68747470733a2f2f7261772e6769746875622e636f6d2f4d616e75656c5065696e61646f2f476c617373416374696f6e4261722f6d61737465722f6172742f726561646d655f7069632e706e67)  \n\n#### 三、Menu  \n1. MenuDrawer  \n滑出式菜单，通过拖动屏幕边缘滑出菜单，支持屏幕上下左右划出，支持当前View处于上下层，支持Windows边缘、ListView边缘、ViewPager变化划出菜单等。  \n项目地址：https://github.com/SimonVT/android-menudrawer  \nDemo地址：http://simonvt.github.io/android-menudrawer/  \nAPP示例：Gmail、Google Music等大部分google app  \n\n1. SlidingMenu  \n滑出式菜单，通过拖动屏幕边缘滑出菜单，支持屏幕左右划出，支持菜单zoom、scale、slide up三种动画样式出现。与MenuDrawer相比而言，SlidingMenu支持菜单动画样式出现，MenuDrawer支持菜单view处于内容的上下层  \n项目地址：https://github.com/jfeinstein10/SlidingMenu  \nDemo地址：https://play.google.com/store/apps/details?id=com.slidingmenu.example  \nAPP示例：Foursquare, LinkedIn, Zappos, Rdio, Evernote Food, Plume, VLC for Android, ESPN ScoreCenter, MLS MatchDay, 9GAG, Wunderlist 2, The Verge, MTG Familiar, Mantano Reader, Falcon Pro (BETA), MW3 Barracks  \n\n1. ArcMenu  \n支持类似Path的左下角动画旋转菜单及横向划出菜单、圆心弹出菜单  \n项目地址：https://github.com/daCapricorn/ArcMenu  \n效果图：![Renderings](https://camo.githubusercontent.com/1fcc783d2e784f7db24feb2b6857f4aa43fc685b/68747470733a2f2f646c2e64726f70626f782e636f6d2f752f31313336393638372f70726576696577302e706e67)\n![comtu](https://camo.githubusercontent.com/7c3d707678e6aa187cdf2ee3ac701d77fba92f48/68747470733a2f2f646c2e64726f70626f782e636f6d2f752f31313336393638372f70726576696577312e706e67)\n![comtu](https://camo.githubusercontent.com/a5050578e15ff2e22deb2c0249b50c69f8f1ec1a/68747470733a2f2f646c2e64726f70626f782e636f6d2f752f31313336393638372f7261796d656e752e706e67)  \nAPP示例：Path  \n\n1. android-satellite-menu  \n类似Path的左下角动画旋转菜单  \n项目地址：https://github.com/siyamed/android-satellite-menu  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/satellite-menu-demo.apk?raw=true  \nAPP示例：Path  \n\n1. radial-menu-widget  \n圆形菜单，支持二级菜单  \n项目地址：https://code.google.com/p/radial-menu-widget/  \n效果图：http://farm8.staticflickr.com/7377/11621125154_d1773c2dcc_o.jpg  \n\n1. Android Wheel Menu  \n圆形旋转选取菜单  \n项目地址：https://github.com/anupcowkur/Android-Wheel-Menu  \n效果图：![Renderings](https://raw.github.com/anupcowkur/Android-Wheel-Menu/master/graphics/wheel.gif)  \n\n1. FoldingNavigationDrawer  \n滑动并以折叠方式打开菜单  \n项目地址：https://github.com/tibi1712/FoldingNavigationDrawer-Android  \nDemo地址：https://play.google.com/store/apps/details?id=com.ptr.folding.sample  \n效果图：![Renderings](https://lh6.ggpht.com/VnKUZenAozQ0KFAm5blFTGqMaKFjvX-BK2JH-jrX1sIXVTqciACqRhqFH48hc4pm2Q=h310-rw)  \n\n1. AndroidResideMenu  \n仿 Dribbble 的边栏菜单  \n项目地址：https://github.com/SpecialCyCi/AndroidResideMenu  \n效果图：![Renderings](https://github.com/SpecialCyCi/AndroidResideMenu/raw/master/2.gif)  \n\n1. CircularFloatingActionMenu  \n一个可定制的圆形的浮动菜单控件，类似于Path的圆形菜单。这个控件的可定制性更强，可以很容易的定制菜单出现消失时的动画，起始角度和半径。  \n项目地址：https://github.com/oguzbilgener/CircularFloatingActionMenu  \nDemo地址：https://github.com/oguzbilgener/CircularFloatingActionMenu/tree/master/samples  \n效果图：![Renderings](https://raw.githubusercontent.com/oguzbilgener/CircularFloatingActionMenu/master/assets/circularfab.gif)  \n\n1. NavigationDrawerSI  \nNavigation Drawer的一个简单实现，滑动并以折叠方式打开菜单  \n项目地址：https://github.com/mmBs/NavigationDrawerSI  \nDemo地址：https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi  \n效果图：<img height=\"500px\" src=\"https://raw.githubusercontent.com/mmBs/NavigationDrawerSI/master/images/screens.png\" />  \nAPP示例：https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi  \n\n1. DragLayout  \n使用support.v4包下的ViewDragHelper实现QQ5.0侧滑  \n项目地址：https://github.com/BlueMor/DragLayout  \n效果图：![Renderings](https://github.com/BlueMor/DragLayout/raw/master/screenshots/123.gif)  \n\n1. LDrawer  \nMaterial Design 形式的展开折叠Icon  \n项目地址：https://github.com/ikimuhendis/LDrawer  \n效果图：![Renderings](https://raw.githubusercontent.com/IkiMuhendis/LDrawer/master/images/animated.gif)  \n\n1. Floating Action Button  \n悬浮的圆形菜单栏，支持组建滚动时自动隐藏及其他设置  \n项目地址：https://github.com/shamanland/floating-action-button  \n效果图：![Renderings](https://camo.githubusercontent.com/c679cb23cf62830b0d4037e17cf2d8d4090bc3c8/68747470733a2f2f64726976652e676f6f676c652e636f6d2f75633f69643d3042776830534e4c506d6a5142526b466f5a4530345646393051324d)  \n  \n\n1. Side-Menu.Android  \n分类侧滑菜单，[Yalantis](http://yalantis.com/) 出品。  \n项目地址：https://github.com/Yalantis/Side-Menu.Android  \n效果图：![Renderings](https://camo.githubusercontent.com/cb6caa7a392d01d46bca9d9485c01fc173f55fac/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3132353035362f73637265656e73686f74732f313638393932322f6576656e74732d6d656e755f312d312d362e676966)  \n\n1. Context-Menu.Android  \n可以方便快速集成漂亮带有动画效果的上下文菜单，[Yalantis](http://yalantis.com/)出品。  \n项目地址：https://github.com/Yalantis/Context-Menu.Android  \n效果图：![Renderings](https://camo.githubusercontent.com/46c15734b552ce3afefa7efd1518909046b4677e/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3132353035362f73637265656e73686f74732f313738353237342f39396d696c65732d70726f66696c652d6c696768745f312d312d342e676966)  \n\n#### 四、ViewPager 、Gallery  \n1. Android-ViewPagerIndicator  \n配合ViewPager使用的Indicator，支持各种位置和样式  \n项目地址：https://github.com/JakeWharton/Android-ViewPagerIndicator  \nDemo地址：https://play.google.com/store/apps/details?id=com.viewpagerindicator.sample  \nAPP示例：太多了。。  \n\n1. JazzyViewPager  \n支持Fragment切换动画的ViewPager，动画包括转盘、淡入淡出、翻页、层叠、旋转、方块、翻转、放大缩小等，效果类似桌面左右切换的各种效果，不过桌面并非用ViewPager实现而已  \n项目地址：https://github.com/jfeinstein10/JazzyViewPager  \nDemo地址：https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true  \n\n1. JellyViewPager  \n特殊切换动画的ViewPager  \n项目地址：https://github.com/chiemy/JellyViewPager  \n效果图：![Renderings](https://github.com/chiemy/JellyViewPager/raw/master/capture.gif)  \n\n1. Android-DirectionalViewPager  \n支持横向和纵向(垂直)的ViewPager  \n项目地址：https://github.com/JakeWharton/Android-DirectionalViewPager  \nDemo地址：https://market.android.com/details?id=com.directionalviewpager.sample  \n\n1. android-pulltorefresh  \n支持下拉刷新的ViewPager  \n项目地址：https://github.com/chrisbanes/Android-PullToRefresh  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refreshview-demo.apk?raw=true  \nAPP示例：新浪微博各个页面  \n\n1. FancyCoverFlow  \n支持Item切换动画效果的类似Gallery View  \n项目地址：https://github.com/davidschreiber/FancyCoverFlow  \nDemo地址：https://play.google.com/store/apps/details?id=at.technikum.mti.fancycoverflow.samples  \n效果图：![Renderings](https://github-camo.global.ssl.fastly.net/ef5ced52b7b54652b50499521ed797c0188c7a6b/687474703a2f2f64617669647363687265696265722e6769746875622e696f2f46616e6379436f766572466c6f772f73637265656e73686f74322e706e67)  \n\n1. AndroidTouchGallery  \n支持双击或双指缩放的Gallery(用ViewPager实现)，相比下面的PhotoView，在被放大后依然能滑到下一个item，并且支持直接从url和文件中获取图片，  \n项目地址：https://github.com/Dreddik/AndroidTouchGallery  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/touch-gallery-demo.apk?raw=true  \nAPP示例：类似微信中查看聊天记录图片时可双击放大，并且放大情况下能正常左右滑动到前后图片  \n\n1. Android Auto Scroll ViewPager  \nAndroid自动滚动 轮播循环的ViewPager  \n项目地址：https://github.com/Trinea/android-auto-scroll-view-pager  \nDemo地址：https://play.google.com/store/apps/details?id=cn.trinea.android.demo  \n文档介绍：http://www.trinea.cn/android/auto-scroll-view-pager/  \n\n1. Salvage view  \n带View缓存的Viewpager PagerAdapter，很方便使用  \n项目地址：https://github.com/JakeWharton/salvage  \n\n1. Android PagerSlidingTabStrip  \n配合ViewPager使用的Indicator，支持ViewPager Scroll时Indicator联动  \n项目地址：https://github.com/astuetz/PagerSlidingTabStrip  \nDemo地址：https://play.google.com/store/apps/details?id=com.astuetz.viewpager.extensions.sample  \n\n1. ViewPager3D  \nViewPager3D效果  \n项目地址：https://github.com/inovex/ViewPager3D  \n\n1. AnimaTabsview  \n仿网易云音乐标签切换的动画,带透明小三角  \n项目地址：https://github.com/wuyexiong/transparent-over-animtabsview  \n在线演示：http://v.youku.com/v_show/id_XNzA4MjY5NjA0.html  \n\n1. LoopingViewPager  \n无限循环的ViewPager  \n项目地址：https://github.com/imbryk/LoopingViewPager  \n\n1. android_page_curl  \n翻书卷曲效果  \n项目地址：https://github.com/harism/android_page_curl  \nAPP示例：iReader  \n在线演示：https://www.youtube.com/watch?v=iwu7P5PCpsw  \n\n1. ViewPagerIndicator  \n简化并实现android的TabHost效果，顶部滑动tab，引导页，支持自定义tab样式,自定义滑动块样式和位置,自定义切换tab的过渡动画,子界面的预加载和界面缓存,设置界面是否可滑动  \n项目地址：https://github.com/LuckyJayce/ViewPagerIndicator  \n  \n1. SmartTabLayout  \nA custom ViewPager title strip which gives continuous feedback to the user when scrolling.This library has been added some features and utilities based on android-SlidingTabBasic project of Google Samples.  \n自定义标题:viewpage地带使连续滚动时反馈给用户。这个库添加了一些功能和实用程序基于谷歌android-SlidingTabBasic工程样品。  \n项目地址: https://github.com/ogaclejapan/SmartTabLayout  \nApp示例: https://play.google.com/store/apps/details?id=com.ogaclejapan.smarttablayout.demo  \n效果图: ![Renderings](https://raw.githubusercontent.com/ogaclejapan/SmartTabLayout/master/art/demo1.gif)  \n\n1. AndroidImageSlider  \nAn amazing and convenient Android image slider.  \n一个了不起的滑块和方便Android 图片滑动。\n项目地址: https://github.com/daimajia/AndroidImageSlider  \nApp示例: https://github.com/daimajia/AndroidImageSlider/releases/download/v1.0.8/demo-1.0.8.apk  \nEclipse工程: https://github.com/daimajia/AndroidImageSlider/releases/download/v1.0.9/AndroidImageSlider-Eclipse.zip    \n效果图: ![Renderings](https://camo.githubusercontent.com/f64413139bbaa918131384d3597c33e39333aa7f/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a773165677a6f7236366f6a64673230393530666b6e70652e676966)  \n\n\n#### 五、GridView  \n1. StaggeredGridView  \n允许非对齐行的GridView，类似Pinterest的瀑布流，并且跟ListView一样自带View缓存，继承自ViewGroup  \n项目地址：https://github.com/maurycyw/StaggeredGridView  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/staggered-gridview-demo.apk?raw=true  \nAPP示例：Pinterest等  \n\n1. AndroidStaggeredGrid  \n允许非对齐行的GridView，类似Pinterest的瀑布流，继承自AbsListView  \n项目地址：https://github.com/etsy/AndroidStaggeredGrid  \nAPP示例：Pinterest等  \n\n1. PinterestLikeAdapterView  \n允许非对齐行的GridView，类似Pinterest的瀑布流，允许下拉刷新  \n项目地址：https://github.com/GDG-Korea/PinterestLikeAdapterView  \nAPP示例：Pinterest等  \n\n1. DraggableGridView  \nItem可拖动交换位置的GridView，实际是自己继承ViewGroup实现，类似桌面的单屏效果，可屏幕自动上下滚动进行Item移动交换，多屏效果见下面PagedDragDropGrid  \n项目地址：https://github.com/thquinn/DraggableGridView  \nDemo地址：https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true  \n\n1. StickyGridHeaders  \nGroupName滑动到顶端时会固定不动直到另外一个GroupName到达顶端的GridView  \n项目地址：https://github.com/TonicArtos/StickyGridHeaders  \n效果图：![Renderings](https://github-camo.global.ssl.fastly.net/90b57e9383704c400706545225d439e057c6fcc0/687474703a2f2f342e62702e626c6f6773706f742e636f6d2f2d535f4262685758367754592f55517057306377554745492f41414141414141414776552f7a7a4a586a2d50635662592f73313630302f73637265656e2d6c616e6473636170652d736d616c6c65722e706e67)  \n\n1. PagedDragDropGrid  \nItem可拖动交换位置、拖动删除的自定义控件，实际是自己继承ViewGroup实现，类似桌面的多屏效果，可拖动到屏幕边缘，屏幕自动左右滚动进行Item移动交换，可拖动进行删除，单屏效果见上面DraggableGridView  \n项目地址：https://github.com/mrKlar/PagedDragDropGrid  \n在线演示：http://youtu.be/FYTSRfthSuQ  \n\n1. Android-DraggableGridViewPager  \nItem可拖动交换位置的GridView，实际是自己继承ViewGroup实现，类似桌面的多屏效果，可屏幕自动左右滚动进行Item移动交换，单屏效果见上面DraggableGridView  \n项目地址：https://github.com/zzhouj/Android-DraggableGridViewPager  \nDemo地址：https://github.com/Trinea/trinea-download/blob/master/draggable-grid-viewpager-demo.apk?raw=true  \n\n1. TwoWayGridView  \n可横向滚动的GridView  \n项目地址：https://github.com/jess-anders/two-way-gridview  \n\n1. PagingGridView  \n分页加载的GridView。当滑动到GridView底部最后一个行时，显示一个进度行，然后加载下一页数据，并显示。  \n项目地址：https://github.com/nicolasjafelle/PagingGridView  \n\n1. AsymmetricGridView  \n一个支持跨行和跨列可变Item大小的GridView  \n项目地址：https://github.com/felipecsl/AsymmetricGridView  \nDemo地址：https://play.google.com/store/apps/details?id=com.felipecsl.asymmetricgridview.app  \n效果图：![Renderings](https://raw.githubusercontent.com/felipecsl/AsymmetricGridView/master/screenshots/ss_5_cols.png)  \n\n1. GridView with Header and Footer  \n和`ListView`一样带头部和底部的`GridView`，用法和`ListView`一样  \n项目地址：https://github.com/liaohuqiu/android-GridViewWithHeaderAndFooter  \n效果图：![Screen Shot](https://raw.githubusercontent.com/liaohuqiu/android-GridViewWithHeaderAndFooter/master/screen-shot.png)  \n  \n\n#### 六、ImageView  \n1. PhotoView  \n支持双击或双指缩放的ImageView，在ViewPager等Scrolling view中正常使用，相比上面的AndroidTouchGallery，不仅支持ViewPager，同时支持单个ImageView  \n项目地址：https://github.com/chrisbanes/PhotoView  \nDemo地址：https://play.google.com/store/apps/details?id=uk.co.senab.photoview.sample  \nAPP示例：photup  \n\n1. android-gif-drawable  \n支持gif显示的view，用jni实现的，编译生成so库后直接xml定义view即可，而且本身不依赖于其他开源项目所以相对下面的ImageViewEx简单的多  \n项目地址：https://github.com/koral--/android-gif-drawable  \n\n1. ImageViewEx  \n支持Gif显示的ImageView，依赖很多，编译过程很繁琐  \n项目地址：https://github.com/frapontillo/ImageViewEx  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/imageviewex-demo.apk?raw=true  \n\n1. RoundedImageView  \n带圆角的ImageView  \n项目地址：https://github.com/vinc3m1/RoundedImageView  \n效果图：![Renderings](https://raw.github.com/makeramen/RoundedImageView/master/screenshot.png)  \n\n1. SelectableRoundedImageView  \nImageView允许四个角的每一个有不同的半径值。也允许椭圆形、圆形的形状或者边  \n项目地址：https://github.com/pungrue26/SelectableRoundedImageView  \nDemo地址：https://play.google.com/store/apps/details?id=com.joooonho  \n效果图：![Renderings](https://camo.githubusercontent.com/25d2e5fb8783b5dd09c00b03091172a79c69350e/687474703a2f2f692e696d6775722e636f6d2f55355653376d322e706e673f31)  \n\n1. ColorArt  \n根据图片的均色设置背景色显示文字和图片，类似itune11中效果  \n项目地址：https://github.com/MichaelEvans/ColorArt  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/color-art-demo.apk?raw=true  \n\n1. CircleImageView  \n圆形的ImageView  \n项目地址：https://github.com/hdodenhof/CircleImageView  \n效果图：![Renderings](https://raw.github.com/hdodenhof/CircleImageView/master/screenshot.png)  \n\n1. ImageViewZoom  \n支持放大和平移的ImageView  \n项目地址：https://github.com/sephiroth74/ImageViewZoom  \nAPP示例：https://play.google.com/store/apps/details?id=com.aviary.android.feather  \n\n1. KenBurnsView  \n实现Ken Burns effect效果，达到身临其境效果的ImageView  \n项目地址：https://github.com/flavioarfaria/KenBurnsView  \n\n1. CustomShapeImageView  \n各种形状的ImageView, 相比上面的圆形ImageView，多了更多形状  \n项目地址：https://github.com/MostafaGazar/CustomShapeImageView  \n效果图：![Renderings](https://raw.github.com/MostafaGazar/CustomShapeImageView/master/Screenshot_2013-11-05-23-08-12.png)  \n\n1. Shape Image View  \n可以自定义各种形状的ImageView, 并且支持边框  \n项目地址：https://github.com/siyamed/android-shape-imageview  \n效果图：<img height=\"500px\" src=\"https://github.com/siyamed/android-shape-imageview/raw/master/images/shader-buble.png\" /><img height=\"500px\" src=\"https://github.com/siyamed/android-shape-imageview/raw/master/images/all-samples.png\"/>  \n\n1. TextDrawable  \n一个用于生成带有文本或者字母的图片的轻量级库。扩展自Drawable，因此可用于现有/自定义/网络等ImageView类，并且包含一个流接口用于创建drawables以及一个定制的ColorGenerator  \n项目地址：https://github.com/amulyakhare/TextDrawable  \n效果图：![Renderings](https://raw.githubusercontent.com/amulyakhare/TextDrawable/master/screens/screen7.png)  \n  \n\n#### 七、ProgressBar  \n1. SmoothProgressBar  \n水平进度条  \n项目地址：https://github.com/castorflex/SmoothProgressBar  \nDemo地址：https://play.google.com/store/apps/details?id=fr.castorflex.android.smoothprogressbar.sample  \n\n1. ProgressWheel  \n支持进度显示的圆形ProgressBar  \n项目地址：https://github.com/Todd-Davies/ProgressWheel  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/progress-wheel-demo.apk?raw=true  \n\n1. android-square-progressbar  \n在图片周围显示进度  \n项目地址：https://github.com/mrwonderman/android-square-progressbar  \nDemo地址：https://play.google.com/store/apps/details?id=net.yscs.android.square_progressbar_example  \n效果图：![Renderings](https://googledrive.com/host/0BwESwPCuXtw7eExwSFVLQkR2TTg/newscreen1.png)  \nAPP示例：square  \n\n1. HoloCircularProgressBar  \nAndroid4.1 时钟App样式  \n项目地址：https://github.com/passsy/android-HoloCircularProgressBar  \n效果图：![Renderings](https://raw.github.com/passsy/android-HoloCircularProgressBar/master/raw/screenshot1.png)  \nAPP示例：Android4.1时钟App  \n\n1. ProgressButton  \n通过图钉的不同状态显示进度  \n项目地址：https://github.com/f2prateek/progressbutton  \n效果图：![Renderings](http://f2prateek.com/progressbutton/static/states.png)  \n文档介绍：http://f2prateek.com/progressbutton/  \n\n1. GoogleProgressBar  \n类似google 多个圆形卡片翻转的progressBar  \n项目地址：https://github.com/jpardogo/GoogleProgressBar  \n效果图：![Renderings](https://raw.githubusercontent.com/jpardogo/GoogleProgressBar/master/art/GoogleProgressBar.gif)  \n\n1. TH-ProgressButton  \n带圆形进度显示的按钮  \n项目地址；https://github.com/torryharris/TH-ProgressButton  \n效果图：![Renderings](https://raw.github.com/Vyshakh-K/TH-ProgressButton/master/screenshots/progressshot1.png)  ![Renderings](https://raw.github.com/Vyshakh-K/TH-ProgressButton/master/screenshots/progressshot2.png)  \n\n1. NumberProgressBar  \n带数字进度的进度条  \n项目地址：https://github.com/daimajia/NumberProgressBar  \n效果图：![Renderings](https://camo.githubusercontent.com/0c92568af7ec4e04e2e1503acdd2ca99854ab0b5/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a77316566797264386e376937673230637a30326d7135662e676966)  \n\n1. CircularProgressDrawable  \n带圆形进度显示的进度条  \n项目地址：https://github.com/Sefford/CircularProgressDrawable  \n效果图：![Renderings](https://raw.githubusercontent.com/Sefford/CircularProgressDrawable/master/overshoot.gif)  \n\n1. Android-RoundCornerProgressBar  \nAndroid 圆角 ProgressBar，可自定义圆角颜色和半径，包括带 Icon 和不带 Icon 两种类型。  \n项目地址：https://github.com/akexorcist/Android-RoundCornerProgressBar  \n效果图：![Renderings](https://raw.githubusercontent.com/akexorcist/Android-RoundCornerProgressBar/master/image/screenshot_02.png)  \n\n1. circular-progress-button  \n带进度显示的Button  \n项目地址：https://github.com/dmytrodanylyk/circular-progress-button  \n效果图：![Renderings](https://raw.githubusercontent.com/dmytrodanylyk/circular-progress-button/master/screenshots/intro.gif)  \n\n1. WaveView  \n一个波纹效果的 View，可用来做 ProgressBar  \n项目地址：https://github.com/john990/WaveView  \nDemo地址：https://raw.github.com/john990/WaveView/master/screenshot%26apk/demo.unaligned.apk  \n效果图：![Renderings](https://camo.githubusercontent.com/60722e9d4f2d2daa78a8650cb27a32adea82bdd4/68747470733a2f2f7261772e6769746875622e636f6d2f6a6f686e3939302f57617665566965772f6d61737465722f73637265656e73686f7425323661706b2f73637265656e73686f742e676966)  \n\n1. Android L 效果的ProgressBar  \n项目地址：https://github.com/tigerguixh/ProgressBar  \nDemo地址: https://github.com/tigerguixh/ProgressBar/blob/master/bin/ProgressBar.apk  \n效果图: ![Renderings](https://github.com/cr1944/ProgressBar/raw/master/1.gif)  \n\t\n#### 八、TextView  \n包括TextView及所有继承自TextView控件，如EditText、Button、RadioButton  \n1. android-flowtextview  \n文字自动环绕其他View的Layout  \n项目地址：https://github.com/deano2390/FlowTextView  \n效果图：http://i949.photobucket.com/albums/ad332/vostroman1500/1.png  \n\n1. Android Form EditText  \n验证输入合法性的编辑框，支持输入、英文、ip、url等多种正则验证  \n项目地址：https://github.com/vekexasia/android-edittext-validator  \nDemo地址：https://play.google.com/store/apps/details?id=com.andreabaccega.edittextformexample  \n\n1. Emojicon  \n支持emojis的TextView和EditText  \n项目地址：https://github.com/rockerhieu/emojicon  \n文档介绍：http://rockerhieu.com/emojicon/  \n\n1. android-circlebutton  \nAndroid圆形按钮，实际实现是继承自ImageView  \n项目地址：https://github.com/markushi/android-circlebutton  \nDemo地址：https://github.com/markushi/android-circlebutton/blob/master/example/example.apk  \n\n1. Segmented Radio Buttons for Android  \niOS’s segmented controls的实现  \n项目地址：https://github.com/vinc3m1/android-segmentedradiobutton  \nDemo地址：https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true  \n效果图：![Renderings](https://raw.github.com/vinc3m1/android-segmentedradiobutton/master/screens/segmentedradio.png)  \n\n1. Chips EditText Library  \n支持国家名字联想从而选择显示该国国旗的EditText，实际就是通过SpannableStringBuilder实现  \n项目地址：https://github.com/kpbird/chips-edittext-library  \nDemo地址：https://github.com/kpbird/chips-edittext-library/tree/master/ChipsEditTextDemo/bin  \n\n1. AutoFitTextView  \n可固定边界内容字体大小自适应的TextView  \n项目地址：https://github.com/grantland/android-autofittextview  \n\n1. Shimmer for Android  \n文字发淡光的TextView  \n项目地址：https://github.com/RomainPiel/Shimmer-android  \n\n1. Titanic  \n可以显示水位上升下降(不知道该怎么描述 囧)的TextView  \n项目地址：https://github.com/RomainPiel/Titanic  \n效果图：![Renderings](https://github.com/RomainPiel/Titanic/raw/master/titanic.gif)  \n\n1. android-iconify  \n提供带Icon的TextView,Menu,Button等  \n项目地址：https://github.com/JoanZapata/android-iconify  \n\n1. Calligraphy  \n让我们在android开发中使用自定义字体变得更加简单  \n项目地址 ：https://github.com/chrisjenx/Calligraphy  \n效果图：![Renderings](https://github.com/chrisjenx/Calligraphy/raw/master/screenshot.png)  \n\n1. CreditsRoll  \n类似星球大战字幕效果的TextView  \n项目地址：https://github.com/frakbot/CreditsRoll  \n\n1. android-process-buton  \n带加载或提交进度的Button  \n项目地址：https://github.com/dmytrodanylyk/android-process-buton  \n\n1. FButton  \n扁平化的Button  \n项目地址：https://github.com/hoang8f/android-flat-button  \nDemo地址：https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo  \n\n1. FloatingActionButton  \n一个类似Android版Google+浮动功能按钮的控件，可以响应ListView的滚动事件。当列表向上滚动的时候会自动显示，向下滚动的时候自动隐藏。  \n项目地址：https://github.com/makovkastar/FloatingActionButton  \nDemo地址：https://github.com/makovkastar/FloatingActionButton/tree/master/  \n效果图：![Renderings](https://raw.githubusercontent.com/makovkastar/FloatingActionButton/master/art/demo.gif)  \n\n1. Android Saripaar  \nAndroid表单验证  \n项目地址：https://github.com/ragunathjawahar/android-saripaar/  \n\n1. JumpingBeans  \n文字像 Mexican beans 一样跳动  \n项目地址：https://github.com/frakbot/JumpingBeans  \nDemo地址：http://play.google.com/store/apps/details?id=net.frakbot.jumpingbeans.demo  \n效果图：![Renderings](https://github.com/frakbot/JumpingBeans/blob/master/art/jumpingdots.gif)  \n\n1. FancyButtons  \n一个不用图片就可以帮助我们创建出漂亮按钮的库。  \n项目地址：https://github.com/medyo/fancybuttons  \nDemo地址：https://github.com/medyo/fancybuttons/tree/master/samples  \n效果图：![Renderings](https://camo.githubusercontent.com/8c5800ef180f69d302237132906737bf71a52caf/68747470733a2f2f7261772e6769746875622e636f6d2f6d6564796f2f66616e6379627574746f6e732f6d61737465722f73637265656e73686f74732f66616e63792e706e67)\n![Renderings](https://raw.githubusercontent.com/medyo/fancybuttons/master/screenshots/fancy2.png)  \n\n1. Android-RobotoTextView  \n一个实现了所有Roboto字体的TextView，包括新出的Roboto Slab字体。  \n项目地址：https://github.com/johnkil/Android-RobotoTextView  \nDemo地址：http://play.google.com/store/apps/details?id=com.devspark.robototextview  \nDemo项目：https://github.com/johnkil/Android-RobotoTextView/tree/master/robototextview-sample  \n效果图：<img height=\"400px\" src=\"https://camo.githubusercontent.com/f058c810055e1ff12fa995346059ad399d9c0f95/687474703a2f2f6934362e74696e797069632e636f6d2f6239646736392e706e67\" />>  \n\n1. Android-WizardPager  \n一个表单向导库  \n项目地址：https://github.com/romannurik/android-wizardpager  \nDemo项目：https://github.com/str4d/android-wizardpager/tree/textfield  \n效果图：<img height=\"400px\" src=\"https://camo.githubusercontent.com/685a1eee3b9b7eb6a0409061031654ea7d6b0b17/68747470733a2f2f6c68352e676f6f676c6575736572636f6e74656e742e636f6d2f2d664944555a3074514373632f554a4e4c6a6e504c5447492f41414141414141416f4f382f784b63654f61746c6a50302f773431332d683638392d6e6f2f322e706e67\" />  \n\n1. RippleView  \n一个实现了 Android L 上才引入的点击按钮后出现水波纹效果的按钮  \n项目地址：https://github.com/siriscac/RippleView  \nDemo项目：https://github.com/siriscac/RippleView/tree/master/RippleViewExample  \n效果图：![Renderings](https://camo.githubusercontent.com/eec41193900aad4803dcf18bc9915fafa3f7d1cf/68747470733a2f2f7261772e6769746875622e636f6d2f73697269736361632f526970706c65566965772f6d61737465722f53637265656e732f53637265656e2e676966)  \n\n1. RippleEffect  \n一个实现Material Design Ripple效果的库，支持Android API 9+以上版本。  \n项目地址：https://github.com/traex/RippleEffect  \nDemo项目：https://github.com/traex/RippleEffect/tree/master/sample  \n效果图：![Renderings](https://raw.githubusercontent.com/traex/RippleEffect/master/header.png)  \n\n1. Android Floating Label Widgets  \n包含一系列控件，这些控件特点是：有默认值，当值不为空时默认值浮动到上面变为提示  \n项目地址：https://github.com/marvinlabs/android-floatinglabel-widgets  \nDemo地址：https://play.google.com/store/apps/details?id=com.marvinlabs.widget.floatinglabel.demo  \n在线演示：http://www.youtube.com/watch?v=hpZD9gJcRg0&feature=youtu.be  \n\n1. MaterialEditText  \nEditText 的 Material Design 实现。包含 [Google Material Design Spec](http://www.google.com/design/spec/components/text-fields.html)中的UI效果和一些新增特性。  \n项目地址：https://github.com/rengwuxian/MaterialEditText  \n\n1. MultiActionTextView  \n可以分别给TextView中的某几个字设置点击事件的TextView  \n项目地址：https://github.com/ajaysahani/MultiActionTextView  \n效果图：![Renderings](https://camo.githubusercontent.com/1223e37d084e84ec0e22a1b27e7513661d0e1b39/687474703a2f2f692e696d6775722e636f6d2f773934576f53582e706e67)  \n\n1. ToggleButton  \n状态切换的 Button，类似 iOS，用 View 实现  \n项目地址：https://github.com/zcweng/ToggleButton  \n效果图：![Renderings](https://github.com/zcweng/ToggleButton/raw/master/ToggleButtonSample/21879.gif)  \n  \n1. SlideSwitch  \n状态切换的开关，可以设置为类似IOS的圆形，也可以设置为矩形，用 View 实现  \n项目地址：https://github.com/Leaking/SlideSwitch\n效果图：![Renderings](https://github.com/Leaking/SlideSwitch/blob/master/Example/TestLibs/res/drawable-hdpi/slide_c.gif)  \n\n1. ExpandableTextView  \n可展开和收缩内容的TextView。  \n项目地址：https://github.com/Manabu-GT/ExpandableTextView  \n效果图：<img height=\"500px\" src=\"https://camo.githubusercontent.com/8bf46083b3bd152c2051ae4c234649dbbb975376/68747470733a2f2f7261772e6769746875622e636f6d2f4d616e6162752d47542f457870616e6461626c6554657874566965772f6d61737465722f6172742f726561646d655f64656d6f2e676966\" />\n  \n\n#### 九、ScrollView  \n1. Discrollview  \n支持滚动时Item淡入淡出，平移，缩放效果的ScrollView  \n项目地址：https://github.com/flavienlaurent/discrollview  \nDemo地址：https://github.com/flavienlaurent/discrollview/raw/master/sample.apk  \n\n1. PullScrollView  \n仿照新浪微博Android客户端个人中心的ScrollView，下拉背景伸缩回弹效果。  \n项目地址：https://github.com/MarkMjw/PullScrollView  \n效果图：![Renderings](https://raw.github.com/MarkMjw/PullScrollView/master/Screenshots/1.png)  \n\n1. ArcLayout  \n一个非常简单的弧布局库 \n项目地址: https://github.com/ogaclejapan/ArcLayout  \nDemo地址k: https://play.google.com/store/apps/details?id=com.ogaclejapan.arclayout.demo  \n效果图: ![Renderings](https://raw.githubusercontent.com/ogaclejapan/ArcLayout/master/art/demo1.gif)  \n![renderings](https://raw.githubusercontent.com/ogaclejapan/ArcLayout/master/art/demo2.gif)  \n\n1. ParallaxScrollView  \n支持视差滚动的ScrollView ，背景图片的滚动速度小于ScrollView中子控件的滚动速度  \n项目地址：https://github.com/chrisjenx/ParallaxScrollView  \nDemo地址：http://cloud.github.com/downloads/chrisjenx/ParallaxScrollView/ParallaxScrollViewDemo-v1.0.5.apk  \n\n1. AKParallax-Android  \n支持视差滚动的ScrollView  \n项目地址：https://github.com/ideaismobile/AKParallax-Android  \nDemo地址：https://play.google.com/store/apps/details?id=com.appkraft.parallax_sample  \n   \n\n1. Android-ObservableScrollView   \n监听滚动视图滚动事件的库，帮助与Toolbar的交互动效处理与Material Design的实现   \n项目地址：https://github.com/ksoichiro/Android-ObservableScrollView    \nDemo地址：https://play.google.com/store/apps/details?id=com.github.ksoichiro.android.observablescrollview.samples2  \n\n1. OverScrollView   \n有弹性的ScrollView，实现了当手指滑动到ScrollView的顶部、底部时，可以继续的向上、向下拉伸。当释放手指的时候，向上、下回弹   \n项目地址：https://github.com/EverythingMe/OverScrollView\n\n\n#### 十、TimeView  \n包括TimePicker、DatePicker、CalendarView、Clock等时间相关控件  \n\n1. android-times-square  \nAndroid日历时间部件，支持选取单个日期，多个日期，及日期区间段和对话框形式显示  \n项目地址：https://github.com/square/android-times-square  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/times-square-demo.apk?raw=true  \n\n1. android-calendar-card  \n日历  \n项目地址：https://github.com/kenumir/android-calendar-card  \nDemo地址：https://play.google.com/store/apps/details?id=com.wt.calendarcardsample  \n效果图：![Renderings](https://raw.github.com/kenumir/android-calendar-card/master/calendar-card-sample/_work/device-2013-10-12-151801.png)  \n\n1. AndroidWheel  \nAndroid Wheel支持城市、多种日期时间、密码、图片  \n项目地址：https://code.google.com/p/android-wheel/  \n效果图：![Renderings](http://farm6.staticflickr.com/5532/11621528786_220c040ba5_o.jpg)  \n\n1. GoogleDateTimePickers  \n时间选择部件  \n项目地址：https://github.com/Mirkoddd/GoogleDateTimePickers  \n文档介绍：https://play.google.com/store/apps/details?id=com.mirko.sample&hl=it  \n\n1. DateTimePicker  \n日期选择部件(Google Agenda的样式风格)  \n项目地址：https://github.com/flavienlaurent/datetimepicker  \nDemo地址：https://raw.github.com/biboune/datetimepicker/master/datetimepicker-sample.apk  \n效果图：![Renderings](https://camo.githubusercontent.com/493edeea3eb553ad0d0b121dbead0d7ec6a858f2/68747470733a2f2f7261772e6769746875622e636f6d2f6269626f756e652f6461746574696d657069636b65722f6d61737465722f67726170686963732f696d67312e706e67)  \n\n1. android-betterpickers  \n提供日期、数字、时间（数字方式和钟表方式）、重复周期（闹钟的周期重复）、HMS（时、分、秒）的选择，支持以DialogFragment的弹窗选择  \n项目地址：https://github.com/derekbrameyer/android-betterpickers  \nDemo地址：https://play.google.com/store/apps/details?id=com.doomonafireball.betterpickers.sample\n效果图：![Renderings](https://camo.githubusercontent.com/897ae3c71b49c4366565f3480719647687b1804a/68747470733a2f2f7261772e6769746875622e636f6d2f646572656b6272616d657965722f616e64726f69642d6265747465727069636b6572732f6d61737465722f73616d706c652f696d61676572792f7765625f666561747572655f677261706869632e706e67)  \n\n1. Android Week View  \n日期控件，支持周，天视图，支持自定义样式  \n项目地址：https://github.com/alamkanak/Android-Week-View  \n效果图：![Renderings](https://github.com/alamkanak/Android-Week-View/blob/master/images/screen-shot.png)  \n  \n1. ScrollerCalendar  \n实现每行显示一年的12个月份的RecyclerView年历  \n项目地址：https://github.com/guanchao/ScrollerCalendar  \n效果图：![Renderings](https://raw.githubusercontent.com/guanchao/ScrollerCalendar/master/images/sample2.gif)  \n\n#### 十一、TipView  \n包括Toast、角标、UndoBar等提示性控件  \n\n1. Crouton  \n丰富样式的Toast，允许alert、comfirm、info样式及点击消失样式，允许设置Toast显示时间，允许自定义View。 本文32. SuperToasts为其扩展版  \n项目地址：https://github.com/keyboardsurfer/Crouton  \nDemo地址：http://play.google.com/store/apps/details?id=de.keyboardsurfer.app.demo.crouton  \n\n1. supertooltips  \n带动画效果的Tips显示  \n项目地址：https://github.com/nhaarman/supertooltips  \nDemo地址：https://play.google.com/store/apps/details?id=com.haarman.supertooltips  \n\n1. Android ViewBadger  \n为其他View添加角标等  \n项目地址：https://github.com/jgilfelt/android-viewbadger  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/android-viewbadger.apk?raw=true  \n效果图：![Renderings](https://github-camo.global.ssl.fastly.net/a705a3e88c75ae2394943bd7c56f725697616ea8/687474703a2f2f7777772e6a65666667696c66656c742e636f6d2f766965776261646765722f76622d31612e706e67)  \n\n1. SuperToasts  \n更丰富样式的toast，支持Button、Progress、Horizontal Progress样式、支持进入动画、支持撤销及其动画设置  \n项目地址：https://github.com/JohnPersano/SuperToasts  \nDemo地址：https://play.google.com/store/apps/details?id=com.supertoastsdemo  \n效果图：![SuperButtonToast](http://i1331.photobucket.com/albums/w597/JohnPersano/supertoasts_githubimage_zps8a5ceb7c.png)  \n\n1. UndoBar  \n屏幕底部显示取消或是确认的PopupWindows  \n项目地址：https://github.com/soarcn/UndoBar  \n效果图：![Renderings](https://github.com/soarcn/UndoBar/blob/master/art/redo.png?raw=true)  \n\n1. UndoBar  \n屏幕底部显示取消或是确认某操作  \n项目地址：https://github.com/jenzz/Android-UndoBar  \n效果图：![Renderings](https://raw.github.com/jenzz/Android-UndoBar/master/assets/Screenshot2.png)  \n\n1. Android-ActionItemBadge  \n可以在ActionBar的MenuItem上显示一个小角标  \n项目地址：https://github.com/mikepenz/Android-ActionItemBadge  \n效果图：![Renderings](https://raw.githubusercontent.com/mikepenz/Android-ActionItemBadge/master/DEV/screenshot/screenshot1_small.png)  \n\n1. SnackBar  \nMaterial Design 风格的 Toast，类似 Google inbox 中的提示  \n项目地址：https://github.com/MrEngineer13/SnackBar  \nDemo地址：https://play.google.com/store/apps/details?id=com.mrengineer13.snackbar.sample  \n效果图：![Renderings](https://camo.githubusercontent.com/67a39af16f3d46631567c1f7bd7dcddeb3c4c9e9/687474703a2f2f6d6174657269616c2d64657369676e2e73746f726167652e676f6f676c65617069732e636f6d2f696d616765732f636f6d706f6e656e74732d746f617374732d73706563732d737065635f746f6173745f30335f315f6c617267655f6d6470692e706e67)  \n\n1. HeadsUp  \n在2.3上使用 android  5.0的 HeadsUp 效果  \n项目地址：https://github.com/zzz40500/HeadsUp  \n效果图：![heads-up.gif](http://upload-images.jianshu.io/upload_images/166866-543a5d26ab71d0f6.gif)\n\n1. Droppy  \n项目地址：https://github.com/shehabic/Droppy\n特点：A simple yet-powerful and fully customizable Android drop-down menu. It supports Text with/without Icons, Separators, and even fully customized views.\n效果力: ![Droppy](https://raw.githubusercontent.com/shehabic/Droppy/screenshots/Droppy_Screenshot.png)\n\n#### 十二、FlipView  \n1. android-flip  \n类似Flipboard翻转动画的实现  \n项目地址：https://github.com/openaphid/android-flip  \nDemo地址：https://github.com/openaphid/android-flip/blob/master/FlipView/Demo/APK/Aphid-FlipView-Demo.apk?raw=true  \nAPP示例：flipboard  \n\n1. FlipImageView  \n支持x、y、z及动画选择的翻转动画的实现  \n项目地址：https://github.com/castorflex/FlipImageView  \nDemo地址：https://play.google.com/store/apps/details?id=fr.castorflex.android.flipimageview  \n\n1. FoldableLayout  \nFlip翻转效果的ListView，目前还不支持ListView缓存  \n项目地址：https://github.com/alexvasilkov/FoldableLayout  \nDemo地址：http://play.google.com/store/apps/details?id=com.alexvasilkov.foldablelayout.sample  \n  \n\n#### 十三、ColorPickView  \n1. ColorPickerView  \n颜色选择器，支持PopupWindows或新的Activity中打开  \n项目地址：https://code.google.com/p/color-picker-view/  \n效果图：![Renderings](http://oi41.tinypic.com/33c6mm8.jpg)  \n\n1. HoloColorPicker  \n颜色选择器  \n项目地址：https://github.com/LarsWerkman/HoloColorPicker  \nDemo地址：https://docs.google.com/file/d/0BwclyDTlLrdXRzVnTGJvTlRfU2s/edit  \n\n1. ColorPickerPreference  \n颜色选择器  \n项目地址：https://github.com/attenzione/android-ColorPickerPreference  \n效果图：![Renderings](https://github.com/attenzione/android-ColorPickerPreference/raw/master/screen_2.png)  \n\n1. ColorPicker  \n颜色选择器（Google Agenda中的样式风格）  \n项目地址：https://github.com/flavienlaurent/colorpicker  \nDemo地址：https://raw.github.com/biboune/colorpicker/master/colorpicker-sample.apk  \n效果图：![Renderings](https://camo.githubusercontent.com/a42581e637ca379004855d69e262d85ea966fa35/68747470733a2f2f7261772e6769746875622e636f6d2f6269626f756e652f636f6c6f727069636b65722f6d61737465722f67726170686963732f696d67312e706e67)  \n  \n\n#### 十四、GraphView  \n1. MPAndroidChart  \n强大的图表绘制工具，支持折线图、面积图、散点图、时间图、柱状图、条图、饼图、气泡图、圆环图、范围（高至低）条形图、网状图及各种图的结合；支持图的拖拽缩放；支持 Android 2.2 以上，支持横纵轴缩放，多指缩放，展现动画、高亮、保存到 sdcard、从文件读取图表  \n项目地址：https://github.com/PhilJay/MPAndroidChart  \nDemo地址：https://play.google.com/store/apps/details?id=com.xxmassdeveloper.mpchartexample  \nDemo项目：https://github.com/PhilJay/MPAndroidChart/tree/master/MPChartExample  \n效果图：<img height=\"300px\" src=\"https://camo.githubusercontent.com/a9eaa5fc7fb6c1e70b22acd09385055e0f5c4fe7/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f73696d706c6564657369676e5f6c696e656368617274342e706e67\" /><br/><img height=\"300px\" src=\"https://camo.githubusercontent.com/78b4bc4e50e151970961daf56e81c4c0db72d27c/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f73696d706c6564657369676e5f6261726368617274332e706e67\" /><br/><img  src=\"https://camo.githubusercontent.com/65f51783ec05038730b481ed614b57a94e867d86/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f626172636861727432642e706e67\" /><br/><img src=\"https://camo.githubusercontent.com/f66a35bf430b12480d3e2ed8e3bc8d7a17db950f/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f626172636861727433642e706e67\" /><br/><img height=\"300px\" src=\"https://camo.githubusercontent.com/60bd0d71462ad577df775b956944b191e939728a/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d50416e64726f696443686172742f6d61737465722f73637265656e73686f74732f70696563686172745f686f6c657261646975735f73706163652e706e67\" /><br/><img height=\"300px\" src=\"https://camo.githubusercontent.com/6b254aa699df7f9464967009129c3017de721b77/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d50416e64726f696443686172742f6d61737465722f73637265656e73686f74732f7363617474657263686172742e706e67\" />  \n在线演示：https://www.youtube.com/watch?v=ufaK_Hd6BpI  \n\n1. achartengine  \n强大的图表绘制工具，支持折线图、面积图、散点图、时间图、柱状图、条图、饼图、气泡图、圆环图、范围（高至低）条形图、拨号图/表、立方线图及各种图的结合  \n项目地址：https://code.google.com/p/achartengine/  \n效果图：![Renderings](http://www.achartengine.org/dimages/average_temperature.png)  \nhttp://www.achartengine.org/dimages/sales_line_and_area_chart.png  \nhttp://www.achartengine.org/dimages/temperature_range_chart.png  \nhttp://www.achartengine.org/dimages/combined_chart.png  \nhttp://www.achartengine.org/dimages/budget_chart.png  \n官网网址：http://www.achartengine.org/  \nAPP示例：Wordpress Android，Google Analytics  \n\n1. GraphView  \n绘制图表和曲线图的View，可用于Android上的曲形图、柱状图、波浪图展示  \n项目地址：https://github.com/jjoe64/GraphView  \nDemo项目：https://github.com/jjoe64/GraphView-Demos  \nAPP示例：Wordpress Android，Google Analytics  \n\n1. HoloGraphLibrary  \n绘制现状图、柱状图、饼状图  \n项目地址：https://bitbucket.org/danielnadeau/holographlibrary/src  \n文档介绍：https://bitbucket.org/danielnadeau/holographlibrary/wiki/Home  \n\n1. XCL-Charts  \nXCL-Charts基于原生的Canvas来绘制各种图表,在设计时，尽量在保证开发效率的同时，给使用者提供足够多的定制化能力。因此使用简便,同时具有相当灵活的定制能力。目前支持3D/非3D柱形图(Bar Chart)、3D/非3D饼图(Pie Chart)、堆积图(Stacked Bar Chart)、面积图(Area Chart)、 折线图(Line Chart)、曲线图(Spline Chart)、环形图(Dount Chart)、南丁格尔玫瑰图(Rose Chart)、仪表盘(Dial Chart)、刻度盘(Gauge Chart)、雷达图(Radar Chart)、圆形图(Circle Chart)等图表。其它特性还包括支持图表缩放、手势移动、动画显示效果、高密度柱形显示、图表分界定制线、多图表的混合显示及同数据源不同类型图表切换等。  \n项目地址：https://github.com/xcltapestry/XCL-Charts  \nDemo地址：https://github.com/xcltapestry/XCL-Charts/blob/master/XCL-Charts-demo/bin/XCL-Charts-demo.apk?raw=true  \n\n1. EazeGraph  \nAndroid 图表库，支持柱状图、分层柱状图、饼状图、线性图  \n项目地址：https://github.com/blackfizz/EazeGraph  \nDemo地址：https://play.google.com/store/apps/details?id=org.eazegraph.app  \n\n1. WilliamChart  \n绘制图表的库，支持LineChartView、BarChartView和StackBarChartView三中图表类型，并且支持 Android 2.2及以上的系统。  \n项目地址：https://github.com/diogobernardino/WilliamChart  \nDemo地址：https://play.google.com/store/apps/details?id=com.db.williamchartdemo  \nDemo项目：https://github.com/diogobernardino/WilliamChart/tree/master/sample  \n效果图：![Renderings](https://github.com/diogobernardino/WilliamChart/raw/master/art/linechart.gif)![Renderings](https://github.com/diogobernardino/WilliamChart/raw/master/art/barchart.gif)![Renderings](https://github.com/diogobernardino/WilliamChart/raw/master/art/stackbarchart.gif)  \n\n1. HelloCharts for Android  \n支持折线图、柱状图、饼图、气泡图、组合图；支持预览、放大缩小，滚动，部分图表支持动画；支持 Android 2.2 以上  \n项目地址：https://github.com/lecho/hellocharts-android  \nDemo地址：https://play.google.com/store/apps/details?id=lecho.lib.hellocharts.samples  \n在线演示：https://www.youtube.com/watch?v=xbSBjyjH2SY  \n  \n\n#### 十五、UI Style  \n不同样式的系统UI风格，如IOS、Bootstrap风格\n\n1. UITableView  \nios风格控件，包括Button、ListView、TableView  \n项目地址：https://github.com/thiagolocatelli/android-uitableview  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/ui-tableview-demo.apk?raw=true  \n\n1. ATableView  \nios风格控件  \n项目地址：https://github.com/dmacosta/ATableView  \nDemo地址：https://play.google.com/store/apps/details?id=com.nakardo.atableview.demo  \n\n1. Cards-UI  \n卡片式View，支持单个卡片，item为卡片的ListView  \n项目地址：https://github.com/afollestad/Cards-UI  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/cards-ui-demo.apk?raw=true  \n\n1. cardslib  \n卡片式View，支持单个卡片，item为卡片的ListView和GridView  \n项目地址：https://github.com/gabrielemariotti/cardslib  \nDemo地址：https://play.google.com/store/apps/details?id=it.gmariotti.cardslib.demo  \n\n1. Android-Bootstrap  \nBootstrap 风格的按钮  \n项目地址：https://github.com/Bearded-Hen/Android-Bootstrap  \n效果图：![Renderings](https://raw.github.com/Bearded-Hen/Android-Bootstrap/master/images/device_image.png)  \n\n1. Material Design Android Library  \nAndroid L 中 Material Design 风格的组件适配到 Android 2.2+  \n项目地址：https://github.com/navasmdc/MaterialDesignLibrary  \n\n1. Android FlatUI  \nAndroid 扁平化风格的组件，支持一些自定义样式  \n项目地址：https://github.com/eluleci/FlatUI  \n效果图：![Renderings](https://camo.githubusercontent.com/590d4a2ac322417b71f83223bd58b83903d58343/68747470733a2f2f7261772e6769746875622e636f6d2f656c756c6563692f466c617455492f6d61737465722f73616d706c652d696d616765732f73686f77636173652e706e67)  \n  \n\n#### 十六、其他  \n1. SwipeBackLayout  \n左右或向上滑动返回的Activity  \n项目地址：https://github.com/Issacw0ng/SwipeBackLayout  \nDemo地址：https://play.google.com/store/apps/details?id=me.imid.swipebacklayout.demo  \nAPP示例：知乎  \n\n1. android-styled-dialogs  \n可自定义样式的dialog，默认与Holo主题样式一致，在Android2.2以上同一样式  \n项目地址：https://github.com/inmite/android-styled-dialogs  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/styled-dialogs-demo.apk?raw=true  \n\n1. Android Sliding Up Panel  \n可拖动的View，能在当前Activity上扶起一个可拖动的Panel  \n项目地址：https://github.com/umano/AndroidSlidingUpPanel  \nDemo地址：https://play.google.com/store/apps/details?id=com.sothree.umano  \nAPP示例：Google Music精简播放栏  \n\n1. AndroidWheel  \nAndroid Wheel支持城市、多种日期时间、密码、图片  \n项目地址：https://code.google.com/p/android-wheel/  \n效果图：![Renderings](http://farm6.staticflickr.com/5532/11621528786_220c040ba5_o.jpg)  \n\n1. TableFixHeaders  \n第一列固定的Table  \n项目地址：https://github.com/InQBarna/TableFixHeaders  \nDemo地址：http://bit.ly/13buAIq  \n\n1. Inscription  \n可用于展示应用change和new feature信息  \n项目地址：https://github.com/MartinvanZ/Inscription  \n\n1. ActivityTransition  \nActivity切换动画，包括渐变、flip、某个位置进入等等  \n项目地址：https://github.com/ophilbert/ActivityTransition  \n效果图：类似桌面左右切换的各种效果，不过桌面并非用ViewPager实现而已  \n文档介绍：https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true  \n\n1. EasyAndroidAnimations  \n针对View的各种动画  \n项目地址：https://github.com/2359media/EasyAndroidAnimations  \n\n1. GlowPadBackport  \n将Android4.2的锁屏界面解锁扩展到Android1.6及1.6+  \n项目地址：https://github.com/rock3r/GlowPadBackport  \nDemo地址：https://play.google.com/store/apps/details?id=net.sebastianopoggi.samples.ui.GlowPadSample  \n效果图：![Renderings](https://lh6.ggpht.com/U070b6Lh6cVsVwx4jN-5nq0xqiB1PBzrYABPeJIEe2hZQ5UWOxc-FDUG77wADelToHA=h310-rw)  \n\n1. GlowPadView  \nAndroid4锁屏界面解锁  \n项目地址：https://github.com/nadavfima/GlowPadView  \n效果图：https://raw.github.com/nadavfima/GlowPadView/master/example.png  \n\n1. android-lockpattern  \nAndroid的图案密码解锁  \n项目地址：https://code.google.com/p/android-lockpattern/  \nDemo地址：https://play.google.com/store/apps/details?id=group.pals.android.lib.ui.lockpattern.demo  \n文档介绍：https://code.google.com/p/android-lockpattern/wiki/QuickUse  \nAPP示例：Android开机的图案密码解锁，支付宝的密码解锁  \n\n1. PatternLock  \n另一个 Android 图案解锁库  \n项目地址：https://github.com/DreaminginCodeZH/PatternLock  \nDemo 地址：https://github.com/DreaminginCodeZH/PatternLock/raw/master/dist/sample.apk  \n效果图：![Renderings](https://github.com/DreaminginCodeZH/PatternLock/raw/master/image/sample_small.png)  \nAPP示例：Android开机的图案密码解锁，支付宝的密码解锁  \n\n1. RangeBar  \n类似于SeekBar，不同的是可以选择一个范围内的值而不是单个值  \n项目地址：https://github.com/edmodo/range-bar  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/range-bar-demo.apk?raw=true  \n效果图：![Renderings](http://i.imgur.com/q85GhRjl.png)  \n\n1. ChromeView  \n利用Chromium实现的WebView，解决各个Android版本WebView不同的问题，同时利用最新Chrome代码  \n项目地址：https://github.com/pwnall/chromeview  \n\n1. android-phased-seek-bar  \n支持预先定义状态的SeekBar  \n项目地址：https://github.com/ademar111190/android-phased-seek-bar  \n效果图：![Renderings](https://raw.githubusercontent.com/ademar111190/android-phased-seek-bar/master/images/sample.gif)  \n\n1. Android Slider Preference Library  \n可添加到设置中的基于对话框的RankBar小部件  \n项目地址：https://github.com/jayschwa/AndroidSliderPreference  \n\n1. ShowcaseView library  \n用于高亮显示应用程序的特定部分，从而突出突出重点  \n项目地址：https://github.com/amlcurran/ShowcaseView  \n\n1. android-segmented-control  \nAndroid上的Segmented Controls，相当于RadioButton组  \n项目地址：https://github.com/hoang8f/android-segmented-control  \n\n1. Swipeable Cards  \n类似Tinder的卡片效果，可以加载图片并动画效果展示，向左滑动表示喜欢，向右表示不喜欢  \n项目地址：https://github.com/kikoso/Swipeable-Cards  \nDemo地址：https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo  \n\n1. EdgeEffectOverride  \n改变ScrollView, ListView, ExpandableListView, GridView, ViewPager等滚动控件滚动到边缘的颜色效果  \n项目地址：https://github.com/AndroidAlliance/EdgeEffectOverride  \n\n1. android-pinned-header-listviews  \n使ExpandListView的Group滑动到顶端时会固定不动直到另外一个Group到达顶端  \n项目地址：https://github.com/rtyley/android-pinned-header-listviews  \n\n1. AndroidSwipeLayout  \n滑动Layout，支持单个View，ListView，GridView  \n项目地址：https://github.com/daimajia/AndroidSwipeLayout  \nDemo地址：[Download Demo](https://github.com/daimajia/AndroidSwipeLayout/releases/download/v1.0.0/AndroidSwipeLayout-Demo-1.0.1-snapshot.apk)  \n效果图：![](http://ww2.sinaimg.cn/mw690/610dc034jw1ejoplapwtqg208n0e74dx.gif)  \n\n1. DynamicCardLayout  \n在Android中实现的类似Windows8的瓷片布局  \n项目地址：https://github.com/dodola/DynamicCardLayout  \n效果图：![Renderings](https://github.com/dodola/DynamicCardLayout/blob/master/pic1.png?raw=true)  \n\n1. Emoticons-Keyboard  \n带表情情符号的自定义键盘  \n项目地址：https://github.com/chiragjain/Emoticons-Keyboard  \n效果图：![Renderings](https://github.com/chiragjain/Emoticons-Keyboard/raw/master/s2.png)  \n\n1. Android Typeface Helper  \n可以帮你轻松实现自定义字体的库  \n项目地址：https://github.com/norbsoft/android-typeface-helper  \n效果图：![Renderings](https://camo.githubusercontent.com/b8e7d4f4ab84ff96a3919ea264e2a83aca46e04e/68747470733a2f2f7261772e6769746875622e636f6d2f6e6f7262736f66742f616e64726f69642d74797065666163652d68656c7065722f6d61737465722f726561646d655f73637265656e2e706e67)  \n\n1. Android-Anim-Playground  \n几个动画效果，其中第二个基于android-svg的绘制效果非常好  \n项目地址：https://github.com/Tibolte/Android-Anim-Playground  \n效果图：![Renderings](https://raw.githubusercontent.com/Tibolte/Android-Anim-Playground/master/androiddemosvg.gif)  \n\n1. NiftyDialogEffects  \n支持自定义飞入动画样式的 Dialog  \n项目地址：https://github.com/sd6352051/NiftyDialogEffects  \n效果图：![Renderings](https://camo.githubusercontent.com/456687ac516bb07f1076928d635bfddf6b90d5ec/687474703a2f2f696d67302e70682e3132362e6e65742f69433436653162586b55316631724966555a6f3939773d3d2f363539373632303632313938343031393430382e676966)  \n在线演示：http://tympanus.net/Development/ModalWindowEffects/  \n\n1. PostOffice  \n创建 Holo 及 Material Design 样式的 Dialog  \n项目地址：https://github.com/r0adkll/PostOffice  \n效果图：![Renderings](https://github.com/r0adkll/PostOffice/raw/master/images/po_2.png)  \n\n1. Swipecards  \n类似Tinder的卡片效果，可以加载图片并动画效果展示，向左滑动表示喜欢，向右表示不喜欢，根据 Kikoso's Swipeable-Cards 改造而来  \n项目地址：https://github.com/Diolor/Swipecards  \n\n1. SeekArc  \n圆形的 SeekBar  \n项目地址：https://github.com/TriggerTrap/SeekArc  \n效果图：![Renderings](https://camo.githubusercontent.com/6a5091cb39a50d4c49b8d2f08684cb260db55aa7/68747470733a2f2f7261772e6769746875622e636f6d2f6e65696c643030312f5365656b4172632f6d61737465722f7261772f6172635f7377656570732e706e67)  \n\n1. BlurDialogFragment  \n显示  DialogFragment 时背景模糊效果  \n项目地址：https://github.com/tvbarthel/BlurDialogFragment  \nDemo地址：https://play.google.com/store/apps/details?id=fr.tvbarthel.lib.blurdialogfragment.sample  \n\n1. range-seek-bar  \n随机值选取的 SeekBar  \n项目地址：https://github.com/yahoo/android-range-seek-bar  \n效果图：![Renderings](https://github.com/yahoo/android-range-seek-bar/raw/master/demo_screenshot.png)  \n\n1. MaterialRangeBar  \n可以选择一个范围内的值而不是单个值的 SeekBar，RangeBar 的 Material Design 风格适配  \n项目地址：https://github.com/oli107/material-range-bar  \n效果图：![Renderings](https://github.com/oli107/material-range-bar/raw/master/Screenshots/pin%20expand.gif)  \n\n1. MaterialList  \nMaterial Design 风格的 CardView  \n项目地址：https://github.com/dexafree/MaterialList  \nDemo地址：https://play.google.com/store/apps/details?id=com.dexafree.materiallistviewexample  \n效果图：![Renderings](https://camo.githubusercontent.com/b71bb064807465b7c9132d7f6072e2064f01fb85/687474703a2f2f692e696d6775722e636f6d2f454e78554741772e706e67)  \n \n1. road-trip  \n设置path的各种动画效果，以及如何实现复杂路径动画，类似于ios中的指纹注册界面的指纹动画效果  \n项目地址：https://github.com/romainguy/road-trip  \n效果图：![Renderings](https://github.com/zhangxin1989/RoadTrip/raw/master/screenshot/Road-Trip-200.gif)  \n\n1. dialogplus\n一个简单的Android对话框，支持不同的弹出模式\n项目地址：https://github.com/orhanobut/dialogplus  \n效果图：![Renderings](https://github.com/orhanobut/dialogplus/blob/master/images/d1.png)  \n\n\n## 第二部分 工具库  \n主要包括那些不错的开发库，包括依赖注入框架、图片缓存、网络相关、数据库ORM建模、Android公共库、Android 高版本向低版本兼容、多媒体相关及其他。    \n#### 一、依赖注入DI  \n通过依赖注入减少View、服务、资源简化初始化，事件绑定等重复繁琐工作  \n\n1. AndroidAnnotations(Code Diet)  \nandroid快速开发框架  \n项目地址：https://github.com/excilys/androidannotations  \n文档介绍：https://github.com/excilys/androidannotations/wiki  \n官网网址：http://androidannotations.org/  \n特点：(1) 依赖注入：包括view，extras，系统服务，资源等等  \n(2) 简单的线程模型，通过annotation表示方法运行在ui线程还是后台线程  \n(3) 事件绑定：通过annotation表示view的响应事件，不用在写内部类  \n(4) REST客户端：定义客户端接口，自动生成REST请求的实现  \n(5) 没有你想象的复杂：AndroidAnnotations只是在在编译时生成相应子类  \n(6) 不影响应用性能：仅50kb，在编译时完成，不会对运行时有性能影响。  \nPS：与roboguice的比较：roboguice通过运行时读取annotations进行反射，所以可能影响应用性能，而AndroidAnnotations在编译时生成子类，所以对性能没有影响  \n\n1. roboguice  \n帮你处理了很多代码异常，利用annotation使得更少的代码完成项目  \n项目地址：https://github.com/roboguice/roboguice  \n文档介绍：https://github.com/roboguice/roboguice/wiki  \n\n1. butterknife  \n利用annotation帮你快速完成View的初始化，减少代码  \n项目地址：https://github.com/JakeWharton/butterknife  \n文档介绍：http://jakewharton.github.io/butterknife/  \n\n1. Dagger  \n依赖注入，适用于Android和Java  \n项目地址：https://github.com/square/dagger  \n文档介绍：http://square.github.io/dagger/  \n  \n\n#### 二、图片缓存  \n1. Android-Universal-Image-Loader  \n图片缓存，目前使用最广泛的图片缓存，支持主流图片缓存的绝大多数特性。  \n项目地址：https://github.com/nostra13/Android-Universal-Image-Loader  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/universal-imageloader-demo.apk?raw=true  \n文档介绍：http://www.intexsoft.com/blog/item/74-universal-image-loader-part-3.html  \n\n1. picasso  \nsquare开源的图片缓存  \n项目地址：https://github.com/square/picasso  \n文档介绍：http://square.github.io/picasso/  \n特点：(1)可以自动检测adapter的重用并取消之前的下载  \n(2)图片变换  \n(3)可以加载本地资源  \n(4)可以设置占位资源  \n(5)支持debug模式  \n\n1. ImageCache  \n图片缓存，包含内存和Sdcard缓存  \n项目地址：https://github.com/Trinea/AndroidCommon  \nDemo地址：https://play.google.com/store/apps/details?id=cn.trinea.android.demo  \n文档介绍：http://www.trinea.cn/android/android-imagecache/  \n特点：(1)支持预取新图片，支持等待队列  \n(2)包含二级缓存，可自定义文件名保存规则  \n(3)可选择多种缓存算法(FIFO、LIFO、LRU、MRU、LFU、MFU等13种)或自定义缓存算法  \n(4)可方便的保存及初始化恢复数据  \n(5)支持不同类型网络处理  \n(6)可根据系统配置初始化缓存等  \n\n1. Cube ImageLoader  \n阿里巴巴一淘使用的图片加载，综合了Android-Universal-Image-Loader 和 square 等组件优点，简单易用，良好的中文文档支持  \n项目地址：https://github.com/etao-open-source/cube-sdk  \nDemo地址：https://github.com/liaohuqiu/cube-sdk/raw/master/cube-sdk-sample.apk  \n效果图：![Screen Shot](https://raw.githubusercontent.com/etao-open-source/cube-sdk/dev/screen-shot.png)\n文档介绍：http://cube-sdk.liaohuqiu.net/  \n \n1. fresco  \n一款强大的图片缓存工具，由facebook开发\n项目地址：https://github.com/facebook/fresco\n文档介绍：http://frescolib.org/  \n特点：(1) 两个内存缓存加上磁盘缓存构成了三级缓存  \n(2) 支持流式，可以类似网页上模糊渐进式显示图片  \n(3) 对多帧动画图片支持更好，如 Gif、WebP  \n(4) 更多样的显示，如圆角、进度条、点击重试、自定义对焦点  \n(5) 更多样的加载，如支持 EXIF、全面支持 WebP  \n(6) 支持 Android 2.3+ \n\n#### 三、网络相关  \n1. Asynchronous Http Client for Android  \nAndroid异步Http请求  \n项目地址：https://github.com/loopj/android-async-http  \n文档介绍：http://loopj.com/android-async-http/  \n特点：(1) 在匿名回调中处理请求结果  \n(2) 在UI线程外进行http请求  \n(3) 文件断点上传  \n(4) 智能重试  \n(5) 默认gzip压缩  \n(6) 支持解析成Json格式  \n(7) 可将Cookies持久化到SharedPreferences  \n\n1. android-query  \n异步加载，更少代码完成Android加载  \n项目地址：https://github.com/androidquery/androidquery 或 https://code.google.com/p/android-query/  \nDemo地址：https://play.google.com/store/apps/details?id=com.androidquery  \n文档介绍：https://code.google.com/p/android-query/#Why_AQuery?  \n特点：https://code.google.com/p/android-query/#Why_AQuery?  \n\n1. Async Http Client  \nJava异步Http请求  \n项目地址：https://github.com/AsyncHttpClient/async-http-client  \n文档介绍：http://sonatype.github.io/async-http-client/  \n\n1. Ion  \n支持图片、json、http post等异步请求  \n项目地址：https://github.com/koush/ion  \n文档介绍：https://github.com/koush/ion#more-examples  \n\n1. HttpCache  \nHttp缓存  \n项目地址：https://github.com/Trinea/AndroidCommon  \nDemo地址：https://play.google.com/store/apps/details?id=cn.trinea.android.demo  \n文档介绍：http://www.trinea.cn/android/android-http-cache  \n特点是：(1) 根据cache-control、expires缓存http请求  \n(2) 支持同步、异步Http请求  \n(3) 在匿名回调中处理请求结果  \n(4) 在UI线程外进行http请求  \n(5) 默认gzip压缩  \n\n1. Http Request  \n项目地址：https://github.com/kevinsawicki/http-request  \n文档介绍：https://github.com/kevinsawicki/http-request#examples  \n\n1. okhttp  \nsquare开源的http工具类  \n项目地址：https://github.com/square/okhttp  \n文档介绍：http://square.github.io/okhttp/  \n特点：(1) 支持SPDY( http://zh.wikipedia.org/wiki/SPDY )协议。SPDY协议是Google开发的基于传输控制协议的应用层协议，通过压缩，多路复用(一个TCP链接传送网页和图片等资源)和优先级来缩短加载时间。  \n(2) 如果SPDY不可用，利用连接池减少请求延迟  \n(3) Gzip压缩  \n(4) Response缓存减少不必要的请求  \n\n1. Retrofit  \nRESTFUL API设计  \n项目地址：https://github.com/square/retrofit  \n文档介绍：http://square.github.io/retrofit/  \n\n1. RoboSpice  \nAndroid异步网络请求工具，支持缓存、REST等等  \n项目地址：https://github.com/stephanenicolas/robospice  \nDemo地址：https://github.com/stephanenicolas/RoboDemo/downloads  \n  \n\n\n#### 四、数据库 orm工具包  \norm的db工具类，简化建表、查询、更新、插入、事务、索引的操作  \n\n1. greenDAO  \nAndroid Sqlite orm的db工具类  \n项目地址：https://github.com/greenrobot/greenDAO  \n文档介绍：http://greendao-orm.com/documentation/  \n官网网址：http://greendao-orm.com/  \n特点：(1) 性能佳  \n(2) 简单易用的API  \n(3) 内存小好小  \n(4) 库大小小  \n\n1. ActiveAndroid  \nAndroid Sqlite orm的db工具类  \n项目地址：https://github.com/pardom/ActiveAndroid  \n文档介绍：https://github.com/pardom/ActiveAndroid/wiki/_pages  \n\n1. Sprinkles  \nAndroid Sqlite orm的db工具类，比较显著的特点就是配合 https://github.com/square/retrofit 能保存从服务器获取的数据  \n项目地址：https://github.com/emilsjolander/sprinkles  \n文档介绍：http://emilsjolander.github.io/blog/2013/12/18/android-with-sprinkles/  \n\n1. Realm  \n移动端的数据库，适用于 Phone、Tablet、Wearable，支持 ORM，线程安全、支持连表及数据库加密，比 SQLite 性能更好  \n项目地址：https://github.com/realm/realm-java  \n文档介绍：http://realm.io/docs/java/0.72.0/  \n\n1. ormlite-android  \n项目地址：https://github.com/j256/ormlite-android  \n文档介绍：http://ormlite.com/sqlite_java_android_orm.shtml  \n\n1. Schematic  \n根据SQLite生成ContentProvider  \n项目地址：https://github.com/SimonVT/schematic  \n  \n1. DBFlow  \nAndroid SQLite ORM工具库。综合了 Active Android, Schematic, Ollie,Sprinkles等库的优点；通过注解实现，性能好；能生成ContentProvider。  \n项目地址：https://github.com/Raizlabs/DBFlow    \n文档介绍：https://github.com/Raizlabs/DBFlow#usage-docs    \n\n\n#### 五、Android公共库  \n1. Guava  \nGoogle的基于java1.6的类库集合的扩展项目，包括collections, caching, primitives support, concurrency libraries, common annotations, string processing, I/O等等. 这些高质量的API可以使你的JAVa代码更加优雅，更加简洁  \n项目地址：https://code.google.com/p/guava-libraries/  \n文档介绍：https://code.google.com/p/guava-libraries/wiki/GuavaExplained  \n\n1. Volley  \nGoogle提供的网络通信库，使得网络请求更简单、更快速  \n项目地址：https://android.googlesource.com/platform/frameworks/volley  \n文档介绍：http://commondatastorage.googleapis.com/io-2013/presentations/110%20-%20Volley-%20Easy,%20Fast%20Networking%20for%20Android.pdf  \n\n1. AndroidCommon  \nAndroid公共库  \n项目地址：https://github.com/Trinea/AndroidCommon  \nDemo地址：https://play.google.com/store/apps/details?id=cn.trinea.android.demo  \n文档介绍：http://www.trinea.cn/android/android-common-lib/  \n包括：(1)缓存(图片缓存、预取缓存、网络缓存)  \n(2) 公共View(下拉及底部加载更多ListView、底部加载更多ScrollView、滑动一页Gallery)  \n(3) Android常用工具类(网络、下载、Android资源操作、shell、文件、Json、随机数、Collection等等)  \n\n1. shipfaster  \n整合了Dagger Otto Retrofit Robolectric Picasso OkHttp，方便快速开发  \n项目地址：https://github.com/pyricau/shipfaster  \n\n1. CleanAndroidCode  \n整合了Dagger Otto AndroidAnnotations，方便快速开发  \n项目地址：https://github.com/pyricau/CleanAndroidCode  \n\n1. xUtils  \n基于Afinal，包含DbUtils、ViewUtils、HttpUtils、BitmapUtils四大模块，可用于快速开发  \n项目地址：https://github.com/wyouflf/xUtils  \n\n1. Afinal  \nAfinal是一个android的ioc，orm框架，内置了四大模块功能：FinalAcitivity,FinalBitmap,FinalDb,FinalHttp。通过finalActivity，我们可以通过注解的方式进行绑定ui和事件。通过finalBitmap，我们可以方便的加载bitmap图片，而无需考虑oom等问题。通过finalDB模块，我们一行代码就可以对android的sqlite数据库进行增删改查。通过FinalHttp模块，我们可以以ajax形式请求http数据  \n项目地址：https://github.com/yangfuhai/afinal  \n官网网址：http://www.afinal.org  \n\n1. UltimateAndroid  \nUltimateAndroid是一个快速开发Android应用的框架，框架目前主要包含的功能有View Injection,ORM,异步网络请求和图片加载，自动化脚本测试,磁盘LRU等功能.同时提供了类似于TripleDes、Webview快速设置、Md5处理、String处理,Https处理等常用工具类，还有超过100多种UI控件效果。  \n项目地址：https://github.com/cymcsg/UltimateAndroid  \n官网网址：http://blog.marshalchen.com/UltimateAndroid/  \n \n\n1. SAF  \nSAF(Simple Android Framework)是一个简单的android框架，它为开发Android app提供了基础性组件。  \n项目地址：https://github.com/fengzhizi715/SAF  \n官网网址：http://www.salesuite.cn/  \n包括：(1)Event Bus(事件总线)  \n(2) Rest Client(http的框架)  \n(3) Image Cache(图片缓存)  \n(4) Dependency Injection(依赖注入)  \n(5) Sqlite ORM(sqlite的orm)  \n(6) Router(Activity、Fragment的Router)  \n(7) Utils(各种常用的工具类) \n\n1. Barber\nCustom View 神器。通过简单的注解帮助你大大减少 Custom View 中的代码量。由于和 ButterKnife 一样使用了 Annotation Proccessor ，所以对程序性能没有影响。 \n项目地址：https://github.com/hzsweers/barber\n\n1. device-year-class  \nA library that analyzes an Android device's specifications and calculates which year the device would be considered \"high end”.(facebook开发的检测手机主流配置工具)  \n项目地址：https://github.com/facebook/device-year-class  \n\n\n#### 六、Android 高版本向低版本兼容  \n1. ActionBarSherlock  \n为Android所有版本提供统一的ActionBar，解决4.0以下ActionBar的适配问题  \n项目地址：https://github.com/JakeWharton/ActionBarSherlock  \nDemo地址：https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos  \nAPP示例：太多了。。现在连google都在用  \n\n1. Nine Old Androids  \n将Android 3.0(Honeycomb)所有动画API(ObjectAnimator ValueAnimator等)兼容到Android1.0  \n项目地址：https://github.com/JakeWharton/NineOldAndroids  \nDemo地址：https://play.google.com/store/apps/details?id=com.jakewharton.nineoldandroids.sample  \n文档介绍：http://nineoldandroids.com/  \n\n1. HoloEverywhere  \n将Android 3.0的Holo主题兼容到Android2.1++  \n项目地址：https://github.com/Prototik/HoloEverywhere  \nDemo地址：https://raw.github.com/Prototik/HoloEverywhere/repo/org/holoeverywhere/demo/2.1.0/demo-2.1.0.apk  \n文档介绍：http://android-developers.blogspot.com/2012/01/holo-everywhere.html  \n\n1. SherlockNavigationDrawer  \n将Android NavigationDrawer和ActionbarSherlock结合，解决4.0以下NavigationDrawer的适配问题  \n项目地址：https://github.com/tobykurien/SherlockNavigationDrawer  \n文档介绍：http://developer.android.com/training/implementing-navigation/nav-drawer.html  \n\n1. Notifications4EveryWhere  \n将Android 4.1的Notification兼容到Android2.2++  \n项目地址：https://github.com/youxiachai/Notifications4EveryWhere  \n\n1. Android Switch Widget Backport  \n将Android Switch和SwitchPreference的兼容到Android2.1++  \n项目地址：https://github.com/BoD/android-switch-backport  \nDemo地址：https://play.google.com/store/apps/details?id=org.jraf.android.backport.switchwidget.sample  \n文档介绍：https://github.com/BoD/android-switch-backport#using-the-switch  \n\n1. android-datepicker  \n将Android 4.0的datepicker兼容到Android2.2++  \n项目地址：https://github.com/SimonVT/android-datepicker  \n\n1. GlowPadBackport  \nAndroid 4.2的GlowPadView向后适配到API4以上  \n项目地址：https://github.com/frakbot/GlowPadBackport  \n\n1. Transitions Everywhere  \nAndroid 4.4 的 Transitions API 兼容到 Android 2.2 以上  \n项目地址：https://github.com/andkulikov/transitions-everywhere  \n  \n\n#### 七、多媒体相关  \n1. cocos2d-x  \n跨平台的2d游戏框架，支持Android、IOS、Linux、Windows等众多平台  \n项目地址：https://github.com/cocos2d/cocos2d-x  \n文档介绍：http://www.cocos2d-x.org/wiki  \n官网网址：http://www.cocos2d-x.org/  \n\n1. Vitamio  \n是一款Android与iOS平台上的全能多媒体开发框架  \n项目地址：https://github.com/yixia/VitamioBundle  \n网站介绍：http://www.vitamio.org/docs/  \n特点：(1) 全面支持硬件解码与GPU渲染  \n(2) 能够流畅播放720P甚至1080P高清MKV，FLV，MP4，MOV，TS，RMVB等常见格式的视频  \n(3) 在Android与iOS上跨平台支持 MMS, RTSP, RTMP, HLS(m3u8)等常见的多种视频流媒体协议，包括点播与直播。  \n\n1. PhotoProcessing  \n利用ndk处理图片库，支持Instafix、Ansel、Testino、XPro、Retro、BW、Sepia、Cyano、Georgia、Sahara、HDR、Rotate(旋转)、Flip(翻转)等各种特效  \n项目地址：https://github.com/lightbox/PhotoProcessing  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/photo-processing.apk?raw=true  \n\n1. Android StackBlur  \n图片模糊效果工具类  \n项目地址：https://github.com/kikoso/android-stackblur  \nDemo地址：https://github.com/kikoso/android-stackblur/blob/master/StackBlurDemo/bin/StackBlurDemo.apk?raw=true  \n文档介绍：https://github.com/kikoso/android-stackblur#usage  \n\n1. Bitmap Smart Clipping using OpenCV  \n图片智能裁剪保留重要部分显示  \n项目地址：https://github.com/beartung/tclip-android  \n利用淘宝的 http://code.taobao.org/p/tclip/ 库完成  \n一淘玩客正在使用的图片裁剪，自动识别图片中的重要区域，并且在图片裁剪时保留重要区域  \n特点：(1). 能进行人脸识别。图片中有人脸，将自动视为人脸区域为重要区域，将不会被裁剪掉  \n(2).自动其它重要区域。如果图片中未识别出人脸，则会根据特征分布计算出重区域  \n\n1. Cropper  \n图片局部剪切工具，可触摸控制选择区域或旋转  \n项目地址：https://github.com/edmodo/cropper  \n效果图：![Renderings](https://github-camo.global.ssl.fastly.net/e4fde77bf41d4a60b234b4e268e5cfa8c17d9b6f/687474703a2f2f692e696d6775722e636f6d2f334668735467666c2e6a7067)  \n文档介绍：https://github.com/edmodo/cropper/wiki  \n\n1. android-crop  \n图片裁剪Activity  \n项目地址：https://github.com/jdamcd/android-crop  \n效果图：![Renderings](https://github.com/jdamcd/android-crop/raw/master/screenshot.png)  \n\n1. TileView  \n可分块显示大图，支持2D拖动、双击、双指放大、双指捏合  \n项目地址：https://github.com/moagrius/TileView  \nDemo地址：http://moagrius.github.io/TileView/TileViewDemo.apk  \n\n1. BlurEffectForAndroidDesign  \n图片模糊效果  \n项目地址：https://github.com/PomepuyN/BlurEffectForAndroidDesign  \n\n1. android-eye  \nPC端网页查看同一局域网内的手机摄像头内容，可以用来监控哦  \n项目地址：https://github.com/Teaonly/android-eye  \nDemo地址：https://play.google.com/store/apps/details?id=teaonly.droideye  \n\n1. libpng for Android  \nPNG图片的jni库，支持几乎png的所有特性  \n项目地址：https://github.com/julienr/libpng-android  \n文档介绍：http://www.libpng.org/pub/png/libpng.html  \n\n1. android-gpuimage  \n基于GPU的图片滤镜  \n项目地址：https://github.com/CyberAgent/android-gpuimage  \n\n1. AndroidFaceCropper  \n图片脸部自动识别，将识别后的局部图片返回  \n项目地址：https://github.com/lafosca/AndroidFaceCropper  \n\n1. Android Video Crop  \n利用TextureView播放和剪切视频，类似ImageView.setScaleType  \n项目地址：https://github.com/dmytrodanylyk/android-video-crop  \nDemo地址：https://github.com/lafosca/AndroidFaceCropper/releases/download/1.0/FaceCropper-sample-debug-unaligned.apk  \n\n1. svg-android  \nAndroid Svg矢量图形支持  \n项目地址：https://github.com/japgolly/svg-android https://github.com/japgolly/svg-android  \n\n1. Android Visualizer  \n从Android MediaPlayer获得音频，然后像iTunes及WinAmp一样展示音轨  \n项目地址：https://github.com/felixpalmer/android-visualizer  \n\n1. ExoPlayer  \n包括仪表板和SmoothStreaming自适应回放，缓存持久化和自定义渲染器，方便自定义和扩展，并且可以通过应用商店更新  \n项目地址：https://github.com/google/ExoPlayer  \n\n1. DanmakuFlameMaster  \nandroid上开源弹幕解析绘制引擎项目  \n项目地址：https://github.com/ctiao/DanmakuFlameMaster  \n  \n\n#### 八、事件总线(订阅者模式)  \n通过发布/订阅事件解耦事件发送和接受，从而简化应用程序组件(Activities, Fragments及后台线程)之间的通信  \n\n1. EventBus  \ngreenrobot的开源项目  \n项目地址：https://github.com/greenrobot/EventBus  \n文档介绍：https://github.com/greenrobot/EventBus#general-usage-and-api  \n特点：(1) 支持在不同类型的线程中处理订阅，包括发布所在线程，UI线程、单一后台线程、异步线程  \n(2) 支持事件优先级定义，支持优先级高的订阅者取消事件继续传递，支持粘性事件，是不是跟系统的有序广播、粘性广播很像啊  \n(3) 不是基于annotations  \n(4) 性能更优  \n(5) 体积小  \n(6) 支持单例创建或创建多个对象  \n(7) 支持根据事件类型订阅  \n\n1. Otto  \nSquare的开源项目，基于Guava的Android优化  \n项目地址：https://github.com/square/otto  \n文档介绍：http://square.github.io/otto/  \n[EventBus与Otto的功能及性能对比文档](https://github.com/greenrobot/EventBus#comparison-with-squares-otto)  \n[EventBus与Otto性能对比Demo Apk](https://play.google.com/store/apps/details?id=de.greenrobot.eventperf)  \n  \n\n#### 九、传感器  \n1. Great Android Sensing Toolkit  \nAndroid感应器工具包，包含示例及使用过程中可能需要的算法  \n项目地址：https://github.com/gast-lib/gast-lib  \nDemo地址：https://play.google.com/store/apps/details?id=root.gast.playground  \n文档介绍：https://github.com/gast-lib/gast-lib#documentation  \n\n1. SensorManager  \nAndroid传感器管理  \n项目地址：https://github.com/nlathia/SensorManager  \n文档介绍：https://docs.google.com/document/d/1TqThJULb-4e6TGb1gdkAaPCfyuXStjJpbnt7a0OZ9OE/edit  \n\n1. GPSLogger  \n记录GPS信息  \n项目地址：https://github.com/mendhak/gpslogger  \nDemo地址：https://play.google.com/store/apps/details?id=com.mendhak.gpslogger  \n文档介绍：http://code.mendhak.com/gpslogger/  \n\n1. Pedometer  \n计步器，使用硬件计步感应器  \n项目地址：https://github.com/j4velin/Pedometer  \n\n1. leapcast  \nChromeCast模拟器的App  \n项目地址：https://github.com/dz0ny/leapcast  \n\n1. Arduino-Communicator  \n与Arduino通信的App  \n项目地址：https://github.com/jeppsson/Arduino-Communicator  \n\n1. android-pedometer  \nAndroid计步器  \n项目地址：https://github.com/bagilevi/android-pedometer  \nDemo地址：http://pedometer.googlecode.com/files/Pedometer-1.4.apk  \n\n1. OwnTracks for Android  \n自己的轨迹记录  \n项目地址：https://github.com/owntracks/android  \n\n1. Shake Detector library for Android  \nAndroid手机震动摇晃检测库，提供供UI线程调用的回调接口  \n项目地址：https://github.com/tbouron/ShakeDetector  \nDemo地址：https://play.google.com/store/apps/details?id=com.github.tbouron.shakedetector.example  \n\n1. Android heart rate monitor  \nAndroid心跳检测  \n项目地址：https://github.com/phishman3579/android-heart-rate-monitor  \n\n1. Bluetooth LE Library for Android  \n蓝牙源信息，包括宝库Mac、更新时间、RSSI、UUID、信号源距离、影响范围等信息  \n项目地址：https://github.com/alt236/Bluetooth-LE-Library---Android  \nDemo地址：https://play.google.com/store/apps/details?id=uk.co.alt236.btlescan  \n\n1. farebot  \n通过NFC 从公交卡中读取数据的一个应用  \n项目地址：https://github.com/codebutler/farebot  \n  \n\n#### 十、安全  \n1. SQLCipher  \nSqlite加密工具  \n项目地址：https://github.com/sqlcipher/sqlcipher  \n文档介绍：http://sqlcipher.net/sqlcipher-for-android/  \n\n1. Conceal  \n快速高效的进行文件加密解密  \n项目地址：https://github.com/facebook/conceal  \n文档介绍：https://github.com/facebook/conceal#usage  \n\n1. Android-PasscodeLock  \n应用锁，每次启动或从任何Activity启动应用都需要输入四位数字的密码方可进入  \n项目地址：https://github.com/wordpress-mobile/Android-PasscodeLock  \nDemo地址：https://play.google.com/store/apps/details?id=org.wordpress.android  \nAPP示例：Wordpress Android，支付宝，挖财  \n\n1. GlowPadBackport  \n将Android4.2的锁屏界面解锁扩展到Android1.6及1.6+  \n项目地址：https://github.com/rock3r/GlowPadBackport  \nDemo地址：https://play.google.com/store/apps/details?id=net.sebastianopoggi.samples.ui.GlowPadSample  \n效果图：![Renderings](https://lh6.ggpht.com/U070b6Lh6cVsVwx4jN-5nq0xqiB1PBzrYABPeJIEe2hZQ5UWOxc-FDUG77wADelToHA=h310-rw)  \n\n1. GlowPadView  \nAndroid 4锁屏界面解锁  \n项目地址：https://github.com/nadavfima/GlowPadView  \n效果图：https://raw.github.com/nadavfima/GlowPadView/master/example.png  \n\n1. android-lockpattern  \nAndroid的图案密码解锁  \n项目地址：https://code.google.com/p/android-lockpattern/  \nDemo地址：https://play.google.com/store/apps/details?id=group.pals.android.lib.ui.lockpattern.demo  \n文档介绍：https://code.google.com/p/android-lockpattern/wiki/QuickUse  \n\n1. Android-InsecureBank  \n关于 Android 不安全性的示例  \n项目地址：https://github.com/dineshshetty/Android-InsecureBankv2  \n  \n\n#### 十一、插件化  \n更多见：[Android 插件化作用、概念以及不错的资料(包括开源项目)和解决方案](http://www.trinea.cn/android/android-plugin/) \n\n1. dynamic-load-apk  \nAndroid 动态加载Apk，热部署，利用 ClassLoader 以及 Activity 代理的方式解决  \n项目地址：https://github.com/singwhatiwanna/dynamic-load-apk  \n文档介绍：http://blog.csdn.net/singwhatiwanna/article/details/22597587  \n\n1. Android Dynamic Loader  \n点评的实现方式，和上面不同的是：他不是用代理 Activity 的方式实现而是用 Fragment 以及 Schema 的方式实现  \n项目地址：https://github.com/mmin18/AndroidDynamicLoader  \nDemo地址：https://github.com/mmin18/AndroidDynamicLoader/raw/master/host.apk  \n\n1. xCombine  \nAndroid App插件式插件开发，插件必须先安装，更推荐看上面两个开源项目  \n项目地址：https://github.com/wyouflf/xCombine  \n文档介绍：http://my.oschina.net/u/1171837/blog/155377  \n\n1. Android Plugin Framework  \nAndroid插件式开发，开放的源码目前不完整  \n项目地址：https://github.com/umeng/apf  \n\n1. multidex  \n安装多 dex 的 classloader  \n项目地址：https://github.com/casidiablo/multidex  \n\n1. ANR-WatchDog  \nAndroid ANR 监听，通过监听自己的 UI Thread 是否被执行确定是否发生了 ANR，并可以设置相关事件  \n项目地址：https://github.com/SalomonBrys/ANR-WatchDog  \n  \n\n#### 十二、文件  \n对不同文档类型的处理，包括PDF、Word、EPub、Html、Zip等\n\n1. purePDF  \n允许从任何运行的SWF文件读取和创建PDF文档  \n项目地址：https://github.com/sephiroth74/purePDF  \n\n1. android-pdfview  \n快速解析pdf的view，默认支持手势缩放和相关动画  \n项目地址：https://github.com/JoanZapata/android-pdfview  \n\n1. Office 365 SDK for Android Preview  \n可支持Microsoft SharePoint Lists, Microsoft SharePoint Files, Microsoft Exchange Calendar, Microsoft Exchange Contacts, Microsoft Exchange Mail  \n项目地址：https://github.com/OfficeDev/Office-365-SDK-for-Android  \n\n1. OpenSpritz-Android  \nEPub阅读器  \n项目地址：https://github.com/OnlyInAmerica/OpenSpritz-Android  \n\n1. jsoup  \n一个解析html的java库，可方便的提取和操作数据  \n项目地址：https://github.com/jhy/jsoup  \n官网网址：http://jsoup.org/  \n作用：(1) 从一个url、文件或string获得html并解析  \n(2) 利用dom遍历或css选择器查找、提取数据  \n(3) 操作html元素  \n(4) 根据白名单去除用于提交的非法数据防止xss攻击  \n(5) 输出整齐的html  \n\n1. ZIP  \njava压缩和解压库  \n项目地址：https://github.com/zeroturnaround/zt-zip  \n文档介绍：https://github.com/zeroturnaround/zt-zip#examples  \n作用：(1) 解压和压缩，并支持文件夹内递归操作  \n(2) 支持包含和排除某些元素  \n(3) 支持重命名元素  \n(4) 支持遍历zip包内容  \n(5) 比较两个zip包等功能  \n  \n\n#### 十三、其他  \n1. Salvage view  \n带View缓存的Viewpager PagerAdapter，很方便使用  \n项目地址：https://github.com/JakeWharton/salvage  \n\n1. Android Priority Job Queue  \nAndroid后台任务队列  \n项目地址：https://github.com/path/android-priority-jobqueue  \n文档介绍：https://github.com/path/android-priority-jobqueue#getting-started  \n\n1. Cobub Razor  \n开源的mobile行为分析系统，包括web端、android端，支持ios和window phone  \n项目地址：https://github.com/cobub/razor  \nDemo地址：http://demo.cobub.com/razor  \n官网网址：http://dev.cobub.com/  \n\n1. Countly  \nAndroid移动端数据采集分析系统  \n项目地址：https://github.com/Countly/countly-sdk-android  \n官网网址：https://count.ly/  \n\n1. aFileChooser  \n文件选择器，可内嵌到程序中，而无需使用系统或三方文件选择器。  \n项目地址：https://github.com/iPaulPro/aFileChooser  \n\n1. androidpn  \n基于xmpp协议的消息推送解决方案，包括服务器端和android端。  \n项目地址：https://github.com/dannytiehui/androidpn  \n\n1. Bolts  \nAndroid的异步编程模式  \n项目地址：https://github.com/BoltsFramework/Bolts-Android/  \n与AsyncTask比较：(1) 使用的是无大小限制的线程池  \n(2) 任务可组合可级联，防止了代码耦合  \n\n1. CastCompanionLibrary-android  \n使Android程序中更快的接入Google Cast  \n项目地址：https://github.com/googlecast/CastCompanionLibrary-android  \n文档介绍：https://developers.google.com/cast/  \n\n1. CastVideos-android  \n从Android设备分享Video通过Google Cast  \n项目地址：https://github.com/googlecast/CastVideos-android  \n文档介绍：https://developers.google.com/cast/  \n\n1. Uninstall_Statics  \nAndroid应用自身被卸载监听及打开浏览器等反馈功能实现  \n项目地址：https://github.com/sevenler/Uninstall_Statics  \n文档介绍：http://www.cnblogs.com/zealotrouge/p/3157126.html  http://www.cnblogs.com/zealotrouge/p/3159772.html  \n\n1. Memento  \n保证在系统配置改变时，Activity中的某些数据可以简单安全的保持不变  \n项目地址：https://github.com/mttkay/memento  \n文档介绍：https://github.com/mttkay/memento#usage  \n\n1. FreeFlow  \n布局引擎，更简单的创建自定义布局，并且当数据和布局改变时更美观的过渡动画  \n项目地址：https://github.com/Comcast/FreeFlow  \nDemo地址：https://github.com/Comcast/FreeFlow/releases  \n\n1. Android Gesture Detectors Framework  \nAndroid手势框架，支持双指旋转、移动、平移、缩放等  \n项目地址：https://github.com/Almeros/android-gesture-detectors  \n\n1. Mapbox Android SDK  \nAndroid Map的替代版  \n项目地址：https://github.com/mapbox/mapbox-android-sdk  \n\n1. Activity animation  \nActivity跳转动画，支持各个方向波浪的效果  \n项目地址：https://github.com/flavienlaurent/activityanimation  \n在线演示：https://www.youtube.com/watch?v=-E0sc6w_Jck  \n\n1. KryoNet  \n通过NIO提供客户端和服务器端TCP/UDP网络传输的Java库  \n项目地址：https://github.com/EsotericSoftware/kryonet  \n\n1. Rebound  \n一个模仿弹簧反弹的Java库，可用于创建动画  \n项目地址：https://github.com/facebook/rebound  \n\n1. Android Social Networks  \n社交网络接入统一管理器，可方便的从Twitter, LinkedIn, Facebook, Google Plus登陆、获得个人信息、发送消息、发送专篇、添加或删除好友  \n项目地址：https://github.com/antonkrasov/AndroidSocialNetworks  \nDemo地址：https://play.google.com/store/apps/details?id=com.github.androidsocialnetworks.apidemos  \n\n1. SmartAppUpdates  \nAndroid App 增量升级，包含前后端方案、Demo、以及 so 库，可用于商店或大体积 App 差分升级  \n项目地址：https://github.com/cundong/SmartAppUpdates  \n\n1. Magnet  \n创建类似 Facebook 聊天桌面悬浮窗的效果  \n项目地址：https://github.com/premnirmal/Magnet  \n\n1. Parceler  \n通过注解及工具类自动完成实体类 Parcelable及值传递  \n项目地址：https://github.com/johncarl81/parceler  \n\n1. AcDisplay  \n将 Android 的通知都集中到锁屏显示  \n项目地址：https://github.com/AChep/AcDisplay  \nDemo地址：https://play.google.com/store/apps/details?id=com.achep.acdisplay  \n\n1. QrCodeScan  \nZXing和ZBar结合的二维码扫描项目，提高了扫描效率  \n项目地址：https://github.com/SkillCollege/QrCodeScan  \n效果图：![QrCodeScan](http://www.eoeandroid.com/data/attachment/forum/201405/09/124538vteuz4leptgg1te6.png)  \n\n1. Android-ScreenShot  \n实现android系统截屏功能  \n项目地址：https://github.com/Android-ScreenShot/AndroidScreenShotService  \n文档介绍：http://blog.csdn.net/buptgshengod/article/details/39155979  \n\n1. card.io SDK for Android  \n信用卡扫描 Android SDK  \n项目地址：https://github.com/card-io/card.io-Android-SDK  \nDemo项目：https://github.com/card-io/card.io-Android-SDK/tree/master/SampleApp  \n\n1. ASNE  \nTwitter, Facebook, Google Plus, LinkedIn, Instagram, Vkontakte, Odnoklassniki 的集成库，包括他们的大多数功能  \n项目地址：https://github.com/gorbin/ASNE  \nDemo地址：https://play.google.com/store/apps/details?id=com.gorbin.androidsocialnetworksextended.asne  \n\n1. Android Signature Pad  \nAndroid 自定义的签名 View，可自定义笔颜色和大小  \n项目地址：https://github.com/gcacace/android-signaturepad  \nDemo项目：https://github.com/gcacace/android-signaturepad/tree/master/SignaturePad-Example  \n\n1. Teleport  \nAndroid Wear 数据同步和消息传送库  \n项目地址：https://github.com/Mariuxtheone/Teleport  \n\n1. DebugLog  \n可以帮你创建更简单和更容易理解的调试日志，能够友好的显示调试信息所在类和函数。  \n项目地址：https://github.com/MustafaFerhan/DebugLog  \n效果图：![DebugLog](https://camo.githubusercontent.com/37deffede9f9b185886da48e96a4829ebd407260/68747470733a2f2f7261772e6769746875622e636f6d2f4d75737461666146657268616e2f44656275674c6f672f6d61737465722f44656275674c6f672d44656d6f2f6173736574732f7373322e6a7067) \n  \n1. Logger  \n简单、美观而且十分强大的Android日志工具  \n项目地址：https://github.com/orhanobut/logger  \nDemo地址：https://github.com/orhanobut/logger/tree/master/app  \n效果图：![Renderings](https://github.com/orhanobut/logger/blob/master/images/description.png)  \n\n\n## 第三部分 优秀项目  \n主要介绍那些Android还不错的完整项目，目前包含的项目主要依据是项目有意思或项目分层规范比较好。  \nLinux  \n项目地址：https://github.com/torvalds/linux  \nAndroid  \n项目地址：https://android.googlesource.com/ 或 https://github.com/android  \n以上两个项目，不解释  \n\n(1) ZXing  \n二维码扫描工具  \n项目地址：https://github.com/zxing/zxing 或 https://code.google.com/p/zxing/  \nAPK地址：https://play.google.com/store/apps/details?id=com.google.zxing.client.android  \nPS：现在市面上很多应用的二维码扫描功能都是从这个修改而来  \n\n(2) photup  \n编辑机批量上传照片到facebook上  \n项目地址：https://github.com/chrisbanes/photup  \nAPK地址：https://play.google.com/store/apps/details?id=uk.co.senab.photup  \nPS：代码分包合理，很棒。不过这个项目依赖的开源项目比较多，比较难编译  \n  \n(3) github-android  \nGithub的Android客户端项目  \n项目地址：https://github.com/github/android  \nAPK地址：https://play.google.com/store/apps/details?id=com.github.mobile  \n\n(4) Notes  \nMIUI便签  \n项目地址：https://github.com/MiCode/Notes  \nAPK地址：https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true  \nPS：项目分包比较合理，相比较miui的文件管理器https://github.com/MiCode/FileExplorer 代码规范较好得多  \n\n(5) weicuiyuan  \n四次元-新浪微博客户端  \n项目地址：https://github.com/qii/weiciyuan  \nAPK地址：https://play.google.com/store/apps/details?id=org.qii.weiciyuan  \n\n(6) gnucash-android  \n一个记账理财软件  \n项目地址：https://github.com/codinguser/gnucash-android  \nAPK地址：http://play.google.com/store/apps/details?id=org.gnucash.android  \n\n(7) AntennaPod  \n支持rss订阅、音乐订阅  \n项目地址：https://github.com/danieloeh/AntennaPod  \nAPK地址：https://play.google.com/store/apps/details?id=de.danoeh.antennapod  \n\n(8) ChaseWhisplyProject  \n打鬼游戏  \n项目地址：https://github.com/tvbarthel/ChaseWhisplyProject  \nAPK地址：https://play.google.com/store/apps/details?id=fr.tvbarthel.games.chasewhisply  \n\n(9) Tweet Lanes  \n功能完整的Twitter客户端  \n项目地址：https://github.com/chrislacy/TweetLanes  \nAPK地址：https://play.google.com/store/apps/details?id=com.tweetlanes.android  \n\n(10) Financius  \n简单易用的记账程序  \n项目地址：https://github.com/mvarnagiris/Financius  \nAPK地址：https://play.google.com/store/apps/details?id=com.code44.finance  \n\n(11) todo.txt-android  \ntodo.txt的官方Android应用  \n项目地址：https://github.com/ginatrapani/todo.txt-android  \nAPK地址：https://play.google.com/store/apps/details?id=com.todotxt.todotxttouch  \n\n(12) simpletask  \n基于todo.txt官方应用的另一个客户端  \n项目地址：https://github.com/mpcjanssen/simpletask-android  \nAPK地址：https://play.google.com/store/apps/details?id=nl.mpcjanssen.todotxtholo  \n\n(13) Muzei Live Wallpaper  \n定时更换桌面精美壁纸  \n项目地址：https://github.com/romannurik/muzei  \nAPK地址：https://play.google.com/store/apps/details?id=net.nurik.roman.muzei  \n\n(14) Scanbook  \n扫描搜索查询图书信息  \n项目地址：https://github.com/JayFang1993/ScanBook        \nAPK地址：http://www.wandoujia.com/apps/com.scanbook  \n\n(14) iosched\nThe Google I/O 2014 Android App  \n项目地址：https://github.com/google/iosched  \nAPK地址：https://play.google.com/store/apps/details?id=com.google.samples.apps.iosched\n效果图: ![iosched](https://github.com/google/iosched/raw/master/art/hero.png)\n\n## 第四部分 开发工具及测试工具  \n主要介绍和Android开发工具和测试工具相关的开源项目。    \n#### 一、开发效率工具  \n1. Parceler  \n通过注解及工具类自动完成实体类 Parcelable及值传递  \n项目地址：https://github.com/johncarl81/parceler  \n\n1. Json2Java  \n根据JSon数据自动生成对应的Java实体类，还支持Parcel、Gson Annotations对应代码自动生成。期待后续的提取父类以及多url构建整个工程的功能  \n项目地址：https://github.com/jonfhancock/JsonToJava  \n在线演示：http://jsontojava.appspot.com/  \n\n1. IntelliJ Plugin for Android Parcelable boilerplate code generation  \nAndroid studio插件，生成Parcelable代码  \n项目地址：https://github.com/mcharmas/android-parcelable-intellij-plugin  \n效果图：![Holo Colors Idea](https://github.com/mcharmas/android-parcelable-intellij-plugin/raw/master/screenshot.png)  \n\n1. Android Holo Colors IntelliJ Plugin  \nAndroid studio插件，生成holo样式9 patch图片  \n项目地址：https://github.com/jeromevdl/android-holo-colors-idea-plugin  \n效果图：![Holo Colors Idea](https://raw.github.com/jeromevdl/android-holo-colors-idea-plugin/master/other/holocolorsidea.png)  \n\n1. Android Drawable Factory  \n用于生成各个分辨率的图片  \n项目地址：https://github.com/tizionario/AndroidDrawableFactory  \n效果图：![Android Drawable Factory](https://github-camo.global.ssl.fastly.net/5c3844b345a9779296f996490070dab0bfc9dbf5/68747470733a2f2f646c2e64726f70626f7875736572636f6e74656e742e636f6d2f752f32363636343637352f416e64726f69644472617761626c65466163746f72792f312e706e67)  \n\n1. SelectorChapek for Android  \nAndroid Studio插件，可根据固定文件名格式资源自动生成drawable selectors xml文件。  \n项目地址：https://github.com/inmite/android-selector-chapek  \n\n1. Android Action Bar Style Generator  \nAndroid ActionBar样式生成器，可在线选择ActionBar样式自动生成所需要的图片资源及xml文件  \n项目地址：https://github.com/jgilfelt/android-actionbarstylegenerator  \n在线演示：http://jgilfelt.github.io/android-actionbarstylegenerator/  \n\n1. ButterKnifeZelezny  \n用于快速生成[ButterKnife](https://github.com/JakeWharton/butterknife)View注入代码的Android Studio/IDEA插件  \n项目地址：https://github.com/inmite/android-butterknife-zelezny  \n\n1. RoboCoP  \n利用Gradle task根据固定格式的json文件生成ContentProvider  \n项目地址：https://github.com/mediarain/RoboCoP  \n\n1. appiconsizes  \n用于生成各个分辨率的图片  \n项目地址：http://www.appiconsizes.com/  \n\n1. Gradle Retrolambda Plugin  \n[Retrolambda](https://github.com/orfjackal/retrolambda)是将Java8的Lambdas应用于Java7的工具，本项目是Gradle插件，通过Retrolambda从而使Java或Android项目用Java8的Lambdas编写，将编译后的字节码转换为Java6和7的字节码从而正常运行  \n项目地址：https://github.com/evant/gradle-retrolambda  \n\n1. Dagger IntelliJ Plugin  \ndagger的intellij插件  \n项目地址：https://github.com/square/dagger-intellij-plugin  \n\n1. Android Gen Drawable Maven plugin  \n在编译时根据SVG描述文件生成不同分辨率的jpg、png或点9图片  \n项目地址：https://github.com/avianey/androidgendrawable-maven-plugin  \n\n1. Android Asset Studio  \n各种Android资源自动生成器，包括启动图标、ActionBar图标、通知栏图标、点9等  \n项目地址：https://github.com/romannurik/AndroidAssetStudio  \n在线演示：http://romannurik.github.io/AndroidAssetStudio/  \n\n1. jsonschema2pojo  \n根据Json内容生成java对象，支持jackjson和gson  \n项目地址：https://github.com/joelittlejohn/jsonschema2pojo  \n在线演示：http://www.jsonschema2pojo.org/  \n\n1. 9-Patch-Resizer  \n自动生成 png 及点 9 图片的不同分辨率版本  \n项目地址：https://github.com/redwarp/9-Patch-Resizer  \n\n1. AndroidLocalizationer  \n可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件  \n项目地址：https://github.com/westlinkin/AndroidLocalizationer  \n  \n\n#### 二、开发自测相关  \n1. Quality Tools for Android  \nAndroid测试及自测工具集合和示例  \n项目地址：https://github.com/stephanenicolas/Quality-Tools-for-Android  \n\n1. android-test-kit  \nGoogle的Android测试工具  \n包括GoogleInstrumentationTestRunner(增强版的InstrumentationTestRunner)和Espresso(用于快速写出可靠测试用例的API)  \n项目地址：https://code.google.com/p/android-test-kit/  \n文档介绍：https://code.google.com/p/android-test-kit/w/list  \n\n1. robolectric  \n测试用例编写框架  \n项目地址：https://github.com/robolectric/robolectric  \nDemo地址：https://github.com/robolectric/robolectricsample  \n文档介绍：http://robolectric.org/  \n特点：(1). 不需要模拟器在一般JVM就可以运行测试用例  \n(2). 能完成在真机上的大部分测试包括感应器  \n其他的测试用例及相关模块Mock可见：[android-mock](https://code.google.com/p/android-mock/), [mockito](https://code.google.com/p/mockito/), [easy-mock](https://github.com/easymock/easymock)  \n\n1. Android FEST  \n提供一些列方便的断言，可用于提高编写Android自测代码效率  \n项目地址：https://github.com/square/fest-android  \n\n1. BoundBox  \n可用于测试类各种访问权限的属性、方法。实际是通过BoundBox这个annotation生成一个属性和方法都是public权限的中间类并对此类进行测试完成的  \n项目地址：https://github.com/stephanenicolas/boundbox  \n\n1. Hugo  \n用于打印函数信息及执行时间的工具，仅在debug模式生效  \n项目地址：https://github.com/JakeWharton/hugo  \n\n1. scalpel  \n在应用下面添加一层用于界面调试，待详细补充 // TODO  \n项目地址：https://github.com/JakeWharton/scalpel  \n\n1. Android Screenshot library  \nAndroid截图工具类，用于在持续集成时截图  \n项目地址：https://github.com/rtyley/android-screenshot-lib  \n\n1. sonar-android-lint-plugin  \n将android lint的错误在sonar中展现  \n项目地址：https://github.com/SonarCommunity/sonar-android  \n  \n\n#### 三、测试工具  \n1. Spoon  \n可用于android不同机型设备自动化测试，能将应用apk和测试apk运行在不同机器上并生成相应测试报告。  \n项目地址：https://github.com/square/spoon  \n\n1. Tencent APT  \nAPT是腾讯开源的一个Android平台高效性能测试组件，提供丰富实用的功能，适用于开发自测、定位性能瓶颈；测试人员完成性能基准测试、竞品对比测试  \n项目地址：https://github.com/stormzhang/APT  \n\n1. Emmagee  \n网易开源的性能测试工具，包括CPU、内存、网络流量、启动时间、电池状态等  \n项目地址：https://github.com/NetEase/Emmagee  \n\n1. Android py-uiautomator  \npy-uiautomator是一个对Android uiautomator用python进行封装的测试框架.  \n项目地址：https://github.com/xiaocong/uiautomator  \n \n1. Augmented Traffic Control\nAugmented Traffic Control: A tool to simulate network conditions(模拟网络状况)  \n模拟网络状况，包括带宽、时延抖动、丢包率、错包率、包重排率  \n项目地址：https://github.com/facebook/augmented-traffic-control   \n\n1. stetho  \nStetho is a debug bridge for Android applications, enabling the powerful Chrome Developer Tools and much more. 使用chrome来调试android设备  \n项目地址：https://github.com/facebook/stetho  \n\n#### 四、开发及编译环境  \n1. Buck  \nfacebook开源的Android编译工具，效率是ant的两倍。主要优点在于：  \n(1) 加快编译速度，通过并行利用多核cpu和跟踪不变资源减少增量编译时间实现  \n(2) 可以在编译系统中生成编译规则而无须另外的系统生成编译规则文件  \n(3) 编译同时可生成单元测试结果  \n(4) 既可用于IDE编译也可用于持续集成编译  \n(5) facebook持续优化中  \n项目地址：https://github.com/facebook/buck  \n\n1. Android Maven Plugin  \nAndroid Maven插件，可用于对android三方依赖进行管理。在J2EE开发中，maven是非常成熟的依赖库管理工具，可统一管理依赖库。  \n项目地址：https://github.com/jayway/maven-android-plugin  \n\n1. umeng-muti-channel-build-tool  \n渠道打包工具  \n项目地址：https://github.com/umeng/umeng-muti-channel-build-tool  \n另可参见Google的构建系统Gradle：http://tools.android.com/tech-docs/new-build-system/user-guide  \n\n1. Genymotion  \n目前最好用最快的android模拟器  \n项目地址：http://www.genymotion.com/  \nAndroid studio集成控件： http://plugins.jetbrains.com/plugin/7269?pr=idea  \nCyril Mottier推荐：http://cyrilmottier.com/2013/06/27/a-productive-android-development-environment/  \n\n1. gradle-mvn-push  \n方便的将Gradle的Artifacts上传到Maven仓库  \n项目地址：https://github.com/chrisbanes/gradle-mvn-push  \n文档介绍：https://github.com/chrisbanes/gradle-mvn-push#usage  \n\n1. Android Emulator Plugin for Jenkins  \nAndroid模拟器 jenkins插件，用于Jenkins做持续集成时跑模拟器测试  \n项目地址：https://github.com/jenkinsci/android-emulator-plugin  \n\n1. Android Maven Plugin  \n管理应用所需要的依赖库。包括的构建工具有Maven、Gradle、ant、sbt  \n项目地址：https://github.com/mosabua/maven-android-sdk-deployer  \n\n1. SDK Manager Plugin  \n下载和管理Android SDK的Gradle插件  \n项目地址：https://github.com/JakeWharton/sdk-manager-plugin  \n\n1. Gradle Protobuf Plugin  \n将.proto文件转换成Java文件的gradle插件  \n项目地址：https://github.com/andrewkroh/gradle-protobuf-plugin  \n\n1. ChromeADB  \nChrome 的 Adb 插件，当登录后，能看到所有连接的设备并操作，可以看应用、进程、内存及磁盘使用情况等  \n项目地址：https://github.com/importre/chromeadb  \n  \n\n#### 五、其他  \n1. ViewServer  \n允许app运行在任何手机上都可以用HierarchyViewer查看  \n项目地址：https://github.com/romainguy/ViewServer  \n\n1. GridWichterle for Android  \n在整个系统上显示一个grid，用来帮助查看应用布局及使得布局更美观，可设置grid网格大小和颜色，android推荐48dp和8dp，可见 Android Design Guidelines – Metrics and Grids，比起hierarchyviewer相差甚远，不过偶尔可用来作为布局查看工具。  \n项目地址：https://github.com/inmite/android-grid-wichterle  \nDemo地址：https://play.google.com/store/apps/details?id=eu.inmite.android.gridwichterle  \n\n1. Catlog  \n手机端log查看工具，支持不同颜色显示、关键字过滤、级别过滤、进程id过滤、录制功能等  \n项目地址：https://github.com/nolanlawson/Catlog  \n在线演示：https://play.google.com/store/apps/details?id=com.nolanlawson.logcat  \n\n1. PID Cat  \n根据package查看logcat日志  \n项目地址：https://github.com/JakeWharton/pidcat  \n\n1. ACRA  \n应用崩溃信息日志上报到GoogleDoc工具，网页版展现结果三方开源地址https://github.com/BenoitDuffez/crashreportsviewer  \n项目地址：https://github.com/ACRA/acra  \n文档介绍：https://github.com/ACRA/acra/wiki/BasicSetup  \n\n1. Crashlytics  \n提供丰富的应用崩溃信息日志收集  \n轻量级，丰富，可自定义应用崩溃信息收集器，附有邮件通知  \n项目地址：http://www.crashlytics.com/  \n集成插件：[Android Studio, Eclipse and IntelliJ](http://try.crashlytics.com/sdk-android/?utm_source=blog&utm_medium=blog&utm_campaign=Announcing_android_studio_wp&utm_content=CTA_button)  \n\n1. Android Resource Navigator  \nchrome插件，可以方便的查看github上android源码工程的styles.xml和themes.xml。主要功能：  \n(1) 快速打开android styles.xml themes.xml  \n(2) 方便在资源间跳转。styles.xml themes.xml文件中资源链接跳转，可以方便跳转到某个资源  \n(3) 方便查找某个style和theme。chrome地址栏输入arn+tab+搜索内容回车即可  \n(4) 自动下载不同分辨率下的drawable  \n(5) 通过映射查找那些不是按照固定命名规则命名的style和theme  \n项目地址：https://github.com/jgilfelt/android-resource-navigator  \n在线演示：https://chrome.google.com/webstore/detail/android-resource-navigato/agoomkionjjbejegcejiefodgbckeebo?hl=en&gl=GB  \n\n1. android-resource-remover  \n根据lint的提示删除项目中无用的资源，减少包的大小  \n项目地址：https://github.com/KeepSafe/android-resource-remover  \n\n1. Telescope  \n通过手势截图以特定主题发送到特定邮箱地址报告Bug  \n项目地址：https://github.com/mattprecious/telescope  \n\n1. Complete Android Fragment & Activity Lifecycle  \n完整的Android Fragment/Activity生命周期图  \n项目地址：https://github.com/xxv/android-lifecycle  \n\n1. Bugsnag Notifier for Android  \n通过`Thread.UncaughtExceptionHandler`捕获应用未处理的异常崩溃 Bug 并用 Notification 展示同时上传到后台服务器  \n项目地址：https://github.com/bugsnag/bugsnag-android  \n文档介绍：https://github.com/bugsnag/bugsnag-android#installation--setup  \n\n1. Material Design Icons  \nGoogle Material Design 规范中的 Icon  \n项目地址：https://github.com/google/material-design-icons  \n\n1. scrollscreenshot  \nAndroid 滚动屏幕自动截图 jar 包，支持纵向、横向滚动截屏拼接  \n项目地址：https://github.com/PGSSoft/scrollscreenshot  \n效果图：![Renderings](https://github.com/PGSSoft/scrollscreenshot/raw/master/samplehorizontal.png)  \n   \n\n1. droidicon  \n1600+的海量Icon，包括750+的Material Design icons    \n项目地址：https://github.com/theDazzler/droidicon   \n  \n## 第五部分  \n主要介绍那些乐于分享并且有一些很不错的开源项目的个人和组织。Follow大神，深挖大神的项目和following，你会发现很多。  \n\n#### 一、个人  \n1. JakeWharton  \n就职于Square，绝对牛逼的大神，项目主要集中在Android版本兼容，ViewPager及开发工具上  \nGithub地址：https://github.com/JakeWharton  \n代表作：ActionBarSherlock，Android-ViewPagerIndicator，Nine Old Androids，SwipeToDismissNOA，hugo，butterknife，Android-DirectionalViewPager, scalpel    \npidcat另外对square及其他开源项目有很多贡献  \n主页：http://jakewharton.com/  \n\n1. Chris Banes  \nGithub地址：https://github.com/chrisbanes  \n代表作：ActionBar-PullToRefresh，PhotoView，Android-BitmapCache，Android-PullToRefresh  \n主页：http://chris.banes.me/  \n\n1. Koushik Dutta  \n就职于ClockworkMod  \nGithub地址：https://github.com/koush  \n代表作：Superuser，AndroidAsync，UrlImageViewHelper，ion, 另外对https://github.com/CyanogenMod 的开源项目有很多贡献  \n主页：http://koush.com/  \n\n1. Simon Vig  \nGithub地址：https://github.com/SimonVT  \n代表作：android-menudrawer，MessageBar  \n主页：http://simonvt.net/  \n\n1. Manuel Peinado  \nGithub地址：https://github.com/ManuelPeinado  \n代表作：FadingActionBar，GlassActionBar，RefreshActionItem，QuickReturnHeader  \n\n1. Emil Sj?lander  \nGithub地址：https://github.com/emilsjolander  \n代表作：StickyListHeaders，sprinkles，android-FlipView  \n主页：http://emilsjolander.se/  \n\n1. greenrobot  \nGithub地址：https://github.com/greenrobot  \n代表作：greenDAO，EventBus  \n主页：http://greenrobot.de/  \n\n1. Jeff Gilfelt  \nGithub地址：https://github.com/jgilfelt  \n代表作：android-mapviewballoons，android-viewbadger，android-actionbarstylegenerator，android-sqlite-asset-helper  \n主页：http://jeffgilfelt.com  \n\n1. Romain Guy  \nAndroid team成员(2013.10已离开Android team，仍在Google)  \nGithub地址：https://github.com/romainguy  \n代表作：ViewServer  \n主页：http://www.curious-creature.org/category/android/  \n個人攝影作品：http://www.flickr.com/photos/romainguy  \n\n1. sephiroth74  \n就职于Aviary.com  \nGithub地址：https://github.com/sephiroth74  \n代表作：ImageViewZoom，HorizontalVariableListView，AndroidWheel，purePDF  \n主页：http://www.sephiroth.it/  \n\n1. Cyril Mottier  \nGoogle开发者专家认证，发布一些Android技巧及文章  \nGithub地址：https://github.com/cyrilmottier  \n代表作：GreenDroid，Polaris  \n主页：http://cyrilmottier.com/  \n  \n\n#### 二、组织  \n1. Square  \n有态度有良心的企业，很多不错的分享  \nGithub地址：https://github.com/square  \n代表作：okhttp、fest-android，android-times-square、picasso、dagger、spoon等等  \n主页：http://square.github.io/  \n\n1. Inmite s.r.o.  \nGithub地址：https://github.com/inmite  \n代表作：android-styled-dialogs，android-grid-wichterle，android-selector-chapek  \n主页：http://www.inmite.eu/  \n  \n\n#### 三、博客  \n[部分国外著名 Android 开发者信息](https://github.com/android-cn/android-dev-com)  \n  \n\n----\n\n\n本博客转自[trinea](https://github.com/comtu/android-open-project) 2015年3月31日版本   \n还会陆续更新中...   \n\n\n","source":"_posts/2014-10-21-android_open_project.md","raw":"---\nlayout : post\ntitle : \"Android开源项目分类汇总\"\ncategory : Android\nduoshuo: true\ndate : 2014-10-21\ntags : [Android ,GitHub ]\n---\n\nAndroid开源项目分类汇总\n====================\n \n## 目前包括：  \n>[Android开源项目第一篇——个性化控件(View)篇]  \n*&nbsp;&nbsp;包括[ListView]、[ActionBar]、[Menu]、[ViewPager]、[Gallery]、[GridView]、[ImageView]、[ProgressBar]、[TextView]、[ScrollView]、[TimeView]、[TipView]、[FlipView]、[ColorPickView]、[GraphView]、[UI Style]、[其他]*  \n[Android开源项目第二篇——工具库篇]  \n*&nbsp;&nbsp;包括[依赖注入]、[图片缓存]、[网络相关]、[数据库ORM工具包]、[Android公共库]、[高版本向低版本兼容库]、[多媒体]、[事件总线]、[传感器]、[安全]、[插件化]、[文件]、[其他]*  \n[Android开源项目第三篇——优秀项目篇]  \n*&nbsp;&nbsp;比较有意思的完整的Android项目*  \n[Android开源项目第四篇——开发及测试工具篇]  \n*&nbsp;&nbsp;包括[开发效率工具]、[开发自测相关]、[测试工具]、[开发及编译环境]、[其他]*  \n[Android开源项目第五篇——优秀个人和团体篇]  \n*&nbsp;&nbsp;乐于分享并且有一些很不错的开源项目的[个人]和[组织]，包括JakeWharton、Chris Banes、Koushik Dutta等大牛*  \n\n<!-- more -->\n\n## 第一部分 个性化控件(View)  \n主要介绍那些不错个性化的View，包括ListView、ActionBar、Menu、ViewPager、Gallery、GridView、ImageView、ProgressBar、TextView、ScrollView、TimeView、TipView、FlipView、ColorPickView、GraphView、UI Style等等。  \n\n#### 一、ListView  \n1. android-pulltorefresh  \n一个强大的拉动刷新开源项目，支持各种控件下拉刷新，ListView、ViewPager、WevView、ExpandableListView、GridView、ScrollView、Horizontal  ScrollView、Fragment上下左右拉动刷新，比下面johannilsson那个只支持ListView的强大的多。并且它实现的下拉刷新ListView在item不足一屏情况下也不会显示刷新提示，体验更好。  \n项目地址：https://github.com/chrisbanes/Android-PullToRefresh  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refreshview-demo.apk?raw=true  \nAPP示例：新浪微博各个页面  \n\n1. android-pulltorefresh-listview  \n下拉刷新ListView，这个被很多人使用的项目实际有不少bug，推荐使用上面的android-pulltorefresh  \n项目地址：https://github.com/johannilsson/android-pulltorefresh  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refresh-listview-demo.apk?raw=true  \n\n1. android-Ultra-Pull-to-Refresh  \n下拉刷新，第一个项目已经停止维护了，并且使用起来相对复杂，定制性也差。这个是替代和改良方案。这个继承于ViewGroup可以包含任何View。功能甚至比SwipeRefreshLayout强大。使用起来非常简单。良好的设计，如果你想定制自己的UI样式，非常简单，就像给ListView加一个Header View那么简单。支持 `API LEVEL >= 8`  \n项目地址：https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh  \nDemo地址：https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh/blob/master/ptr-demo/target/ultra-ptr-demo.apk?raw=true  \n效果图：  \n<div>  \n  <img src='http://srain-github.qiniudn.com/ultra-ptr/contains-all-of-views.gif' width=\"150px\"/>  \n  <img src='http://srain-github.qiniudn.com/ultra-ptr/release-to-refresh.gif' width=\"150px\"/>  \n  <img src='http://srain-github.qiniudn.com/ultra-ptr/auto-refresh.gif' width=\"150px\"/>  \n  <img src='http://srain-github.qiniudn.com/ultra-ptr/store-house-string-array.gif' width=\"150px\"/>  \n</div>  \n\n1. DropDownListView  \n下拉刷新及滑动到底部加载更多ListView  \n项目地址：https://github.com/Trinea/AndroidCommon  \nDemo地址：https://play.google.com/store/apps/details?id=cn.trinea.android.demo  \n文档介绍：http://www.trinea.cn/android/dropdown-to-refresh-and-bottom-load-more-listview/  \n\n1. DragSortListView  \n拖动排序的ListView，同时支持ListView滑动item删除，各个Item高度不一、单选、复选、CursorAdapter做为适配器、拖动背景变化等  \n项目地址：https://github.com/bauerca/drag-sort-listview  \nDemo地址：https://play.google.com/store/apps/details?id=com.mobeta.android.demodslv  \nAPP示例：Wordpress Android  \n\n1. SwipeListView  \n支持定义ListView左右滑动事件，支持左右滑动位移，支持定义动画时间  \n项目地址：https://github.com/47deg/android-swipelistview  \nDemo地址：https://play.google.com/store/apps/details?id=com.fortysevendeg.android.swipelistview  \nAPP示例：微信  \n\n1. Android-SwipeToDismiss  \n滑动Item消失ListView，支持3.0以下版本见：https://github.com/JakeWharton/SwipeToDismissNOA  \n项目地址：https://github.com/romannurik/Android-SwipeToDismiss  \nDemo地址：https://github.com/JakeWharton/SwipeToDismissNOA/SwipeToDismissNOA.apk/qr_code  \n\n1. PinnedHeaderExpandableListView  \n首先它是一个ExpandableListView，但是它的头部可以固定，其次，在它的上面还有一个头部可以来回伸缩  \n项目地址：https://github.com/singwhatiwanna/PinnedHeaderExpandableListView  \n效果图：![Renderings](https://camo.githubusercontent.com/fa7f516b0b6e2921007a17cbc359b3f661f32226/687474703a2f2f696d672e626c6f672e6373646e2e6e65742f32303134303531313135313534363834333f77617465726d61726b2f322f746578742f6148523063446f764c324a736232637559334e6b626935755a58517663326c755a33646f5958527064324675626d453d2f666f6e742f3561364c354c32542f666f6e7473697a652f3430302f66696c6c2f49304a42516b46434d413d3d2f646973736f6c76652f37302f677261766974792f536f75746845617374)  \nAPP示例：百度手机卫士垃圾清理界面  \n\n1. StickyListHeaders  \nGroupName滑动到顶端时会固定不动直到另外一个GroupName到达顶端的ExpandListView，支持快速滑动，支持Android2.3及以上  \n项目地址：https://github.com/emilsjolander/StickyListHeaders  \n效果图：![Renderings](https://raw.github.com/emilsjolander/StickyListHeaders/master/demo.gif)  \nAPP示例：Android 4.0联系人  \n\n1. pinned-section-listview  \nGroupName滑动到顶端时会固定不动直到另外一个GroupName到达顶端的ExpandListView  \n项目地址：https://github.com/beworker/pinned-section-listview  \n效果图：![Renderings](https://raw.github.com/beworker/pinned-section-listview/master/screen1.png)  \n\n1. PinnedHeaderListView  \nGroupName滑动到顶端时会固定不动直到另外一个GroupName到达顶端的ExpandListView  \n项目地址：https://github.com/JimiSmith/PinnedHeaderListView  \n\n1. QuickReturn  \nListView/ScrollView的header或footer，当向下滚动时消失，向上滚动时出现  \n项目地址：https://github.com/lawloretienne/QuickReturn  \nDemo地址：https://play.google.com/store/apps/details?id=com.etiennelawlor.quickreturn  \n\n1. QuickReturnHeader  \nListView/ScrollView的header或footer，当向下滚动时消失，向上滚动时出现  \n项目地址：https://github.com/ManuelPeinado/QuickReturnHeader  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/quick-return-header-demo.apk?raw=true  \nAPP示例：google plus  \n\n1. IndexableListView  \nListView右侧会显示item首字母快捷索引，点击可快速滑动到某个item  \n项目地址：https://github.com/woozzu/IndexableListView  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/indexable-listview.apk?raw=true  \nAPP示例：微信通讯录、小米联系人  \n\n1. CustomFastScrollView  \nListView快速滑动，同时屏幕中间PopupWindows显示滑动到的item内容或首字母  \n项目地址：https://github.com/nolanlawson/CustomFastScrollViewDemo  \n效果图：![Renderings](https://raw.github.com/nolanlawson/CustomFastScrollViewDemo/master/example.png)  \n\n1. Android-ScrollBarPanel  \nListView滑动时固定的Panel指示显示在scrollbar旁边  \n项目地址：https://github.com/rno/Android-ScrollBarPanel  \n效果图：![Renderings](https://github.com/rno/Android-ScrollBarPanel/raw/master/demo_capture.png)  \n\n1. SlideExpandableListView  \n用户点击listView item滑出固定区域，其他item的区域收缩  \n项目地址：https://github.com/tjerkw/Android-SlideExpandableListView  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/slide-expandable-listView-demo.apk?raw=true  \n\n1. JazzyListView  \nListView及GridView item以特殊动画效果进入屏幕，效果包括grow、cards、curl、wave、flip、fly等等  \n项目地址：https://github.com/twotoasters/JazzyListView  \nDemo地址：https://play.google.com/store/apps/details?id=com.twotoasters.jazzylistview.sample  \n在线演示：http://lab.hakim.se/scroll-effects/  \n\n1. ListViewAnimations  \n带Item显示动画的ListView，动画包括底部飞入、其他方向斜飞入、下层飞入、渐变消失、滑动删除等  \n项目地址：https://github.com/nhaarman/ListViewAnimations  \nDemo地址：https://play.google.com/store/apps/details?id=com.haarman.listviewanimations  \nAPP示例：Google plus、Google Now卡片式进入、小米系统中应用商店、联系人、游戏中心、音乐、文件管理器的ListView、Ultimate、Light Flow Lite、TreinVerkeer、Running Coach、Pearl Jam Lyrics、Calorie Chart、Car Hire、Super BART、DK FlashCards、Counter Plus、Voorlees Verhaaltjes 2.0  \n\n1. DevsmartLib-Android  \n横向ListView  \n项目地址：https://github.com/dinocore1/DevsmartLib-Android  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/horizontal-listview-demo.apk?raw=true  \n\n1. TwoWayView  \n横向ListView的效果，继承自AdapterView  \n项目地址：https://github.com/lucasr/twoway-view  \n\n1. HorizontalVariableListView  \n支持Item宽度不一致的ListView  \n项目地址：https://github.com/sephiroth74/HorizontalVariableListView  \n\n1. LinearListView  \n用LinearLayout实现的ListView，可解决多个ListView并存等问题。目前自己也有需要，等亲自尝试过后会再具体介绍  \n项目地址：https://github.com/frankiesardo/LinearListView  \n\n1. MultiChoiceAdapter  \n支持多选的ListView Adapter  \n项目地址：https://github.com/ManuelPeinado/MultiChoiceAdapter  \nDemo地址：https://play.google.com/store/apps/details?id=com.manuelpeinado.multichoiceadapter.demo  \n\n1. EnhancedListView  \n支持横向滑动删除列表项以及撤销删除的ListView，该项目的前身是[SwipeToDismissUndoList](https://github.com/timroes/SwipeToDismissUndoList)  \n项目地址：https://github.com/timroes/EnhancedListView  \nDemo地址：https://play.google.com/store/apps/details?id=de.timroes.android.listviewdemo&rdid=de.timroes.android.listviewdemo  \n\n1. ListBuddies  \n自动滚动的双列ListView ，两个ListView滚动速度不一致，有视差效果  \n项目地址：https://github.com/jpardogo/ListBuddies  \nDemo地址：https://play.google.com/store/apps/details?id=com.jpardogo.android.listbuddies  \n效果图：![Renderings](https://raw.github.com/jpardogo/ListBuddies/master/art/screenshot_listbuddies_2.png)  \n\n1. SwipeMenuListView  \n针对ListView item的侧滑菜单  \n项目地址：https://github.com/baoyongzhang/SwipeMenuListView  \n效果图：![Renderings](https://raw.githubusercontent.com/baoyongzhang/SwipeMenuListView/master/demo.gif)  \nAPP示例：手机QQV5.0  \n\n1. PagingListView  \n分页加载的ListView。当滑动到ListView底部最后一个元素时，显示一个进度行，然后加载下一页数据，并显示。  \n项目地址：https://github.com/nicolasjafelle/PagingListView  \n\n1. PullZoomView  \n支持下拉时HeaderView缩放的ListView、ScrollView  \n项目地址：https://github.com/Frank-Zhu/PullZoomView  \n效果图：![Renderings](https://raw.githubusercontent.com/Frank-Zhu/PullZoomView/master/art/pull-to-zoom.gif)  \n\n1. PullToZoomInListView  \n滑动ListView时使其HeaderView跟随滑动缩放  \n项目地址：https://github.com/matrixxun/PullToZoomInListView  \n效果图：![Renderings](https://github.com/matrixxun/PullToZoomInListView/raw/master/art/pull-to-zoom.gif)  \n\n1. CalendarListview  \n实现每个月一行日历效果的ListView  \n项目地址：https://github.com/traex/CalendarListview  \n效果图：![Renderings](https://github.com/traex/CalendarListview/raw/master/demo.gif)  \n\n1. sticky-headers-recyclerview  \nGroupName滑动到顶端时会固定不动直到另外一个GroupName到达顶端的ListView，采用support-v7中的RecyclerView实现  \n项目地址：https://github.com/timehop/sticky-headers-recyclerview  \n\n1. PullSeparateListView  \n到达顶部或底部继续拉动时，实现Item间的相互分离，两种模式：(1) 全部分离的模式，即屏幕内所有Item都会分离 (2)部分分离模式，以点击位置为分界点，部分item分离  \n项目地址：https://github.com/chiemy/PullSeparateListView  \n效果图：![Renderings](https://github.com/chiemy/PullSeparateListView/raw/master/capture.gif)  \n\n1. ExpandableLayout  \nHeader 和 Content Item 都可以展开的 ExpandableListview  \n项目地址：https://github.com/traex/ExpandableLayout  \n\n1. PagedHeadListView  \n支持paginated header以及material page indicator的ListView.  \n项目地址：https://github.com/JorgeCastilloPrz/PagedHeadListView  \n效果图：![Renderings](https://raw.githubusercontent.com/JorgeCastilloPrz/PagedHeadListView/master/app/src/main/res/raw/preview1.gif)  \n  \n\n1. CustomSwipeListView  \n支持左滑弹出自定义菜单，右滑删除且允许撤销，同时可以自定义滑动动画时间和滑动触发事件的时机等。   \n项目地址：https://github.com/xyczero/Android-CustomSwipeListView   \n效果图：![screenshot](http://7u2jsw.com1.z0.glb.clouddn.com/githubCustomSwipeListview_Set.PNG)   \nDemo地址：[Download here](http://7u2jsw.com1.z0.glb.clouddn.com/githubCustomSwipeListView.apk)   \n\n1. Pull-to-Refresh.Rentals-Android  \n提供一个简单可以自定义的下拉刷新实现，[Yalantis](http://yalantis.com/) 出品。  \n项目地址：https://github.com/Yalantis/Pull-to-Refresh.Rentals-Android  \n效果图：![Renderings](https://camo.githubusercontent.com/d406ac5a03a2b1fa5cf41fadc8d2408cb8709bdc/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3132353035362f73637265656e73686f74732f313635303331372f7265616c6573746174652d70756c6c5f312d322d332e676966)  \n\n\n\n#### 二、ActionBar  \n1. ActionBarSherlock  \n为Android所有版本提供统一的ActionBar，解决4.0以下ActionBar的适配问题  \n项目地址：https://github.com/JakeWharton/ActionBarSherlock  \nDemo地址：https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos  \nAPP示例：太多了。。现在连google都在用  \n效果图: ![comtu](https://camo.githubusercontent.com/b21aae46566b05d5adbb1fa71b88708bc659e120/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67)\n\n1. ActionBar-PullToRefresh  \n下拉刷新，ActionBar出现加载中提示  \n项目地址：https://github.com/chrisbanes/ActionBar-PullToRefresh  \nDemo地址：https://play.google.com/store/apps/details?id=uk.co.senab.actionbarpulltorefresh.samples.stock  \nAPP示例：Gmail，Google plus，知乎等  \n\n1. FadingActionBar  \nListView向下滚动逐渐显现的ActionBar  \n项目地址：https://github.com/ManuelPeinado/FadingActionBar  \nDemo地址：https://play.google.com/store/apps/details?id=com.manuelpeinado.fadingactionbar.demo  \nAPP示例：google music，知乎  \n效果图: ![comtu](https://camo.githubusercontent.com/4fb0e40bdb047be104b2cefddee62923b8a2da37/68747470733a2f2f7261772e6769746875622e636f6d2f4d616e75656c5065696e61646f2f466164696e67416374696f6e4261722f6d61737465722f6172742f726561646d655f7069632e706e67)\n\n1. NotBoringActionBar  \ngoogle music下拉收缩的ActionBar  \n项目地址：https://github.com/flavienlaurent/NotBoringActionBar  \nDemo地址：http://flavienlaurent.com/blog/2013/11/20/making-your-action-bar-not-boring/  \nAPP示例：Google音乐  \n效果图: ![comtu](https://camo.githubusercontent.com/65f2d44e0e5064369aec8ee41838bd073e695975/68747470733a2f2f7261772e6769746875622e636f6d2f666c617669656e6c617572656e742f4e6f74426f72696e67416374696f6e4261722f6d61737465722f67726170686963732f6e6f74626f72696e6761622e676966)\n\n1. RefreshActionItem  \n带进度显示和刷新按钮的ActionBar  \n项目地址：https://github.com/ManuelPeinado/RefreshActionItem  \nDemo地址：https://play.google.com/store/apps/details?id=com.manuelpeinado.refreshactionitem.demo  \nAPP示例：The New York Times，DevAppsDirect.  \n效果图: ![comtu](https://camo.githubusercontent.com/46884ee60bb699929890a1a9eed0c2610ca99039/68747470733a2f2f7261772e6769746875622e636f6d2f4d616e75656c5065696e61646f2f52656672657368416374696f6e4974656d2f6d61737465722f6172742f726561646d655f7069632e706e67)\n\n1. GlassActionBar  \n类似玻璃的有一定透明度的ActionBar  \n项目地址：https://github.com/ManuelPeinado/GlassActionBar  \nDemo地址：https://play.google.com/store/apps/details?id=com.manuelpeinado.glassactionbardemo  \nAPP示例：google music  \n效果图: ![comtu](https://camo.githubusercontent.com/01c80fb941f2ba07f6d9d26d80dd4792a79127d4/68747470733a2f2f7261772e6769746875622e636f6d2f4d616e75656c5065696e61646f2f476c617373416374696f6e4261722f6d61737465722f6172742f726561646d655f7069632e706e67)  \n\n#### 三、Menu  \n1. MenuDrawer  \n滑出式菜单，通过拖动屏幕边缘滑出菜单，支持屏幕上下左右划出，支持当前View处于上下层，支持Windows边缘、ListView边缘、ViewPager变化划出菜单等。  \n项目地址：https://github.com/SimonVT/android-menudrawer  \nDemo地址：http://simonvt.github.io/android-menudrawer/  \nAPP示例：Gmail、Google Music等大部分google app  \n\n1. SlidingMenu  \n滑出式菜单，通过拖动屏幕边缘滑出菜单，支持屏幕左右划出，支持菜单zoom、scale、slide up三种动画样式出现。与MenuDrawer相比而言，SlidingMenu支持菜单动画样式出现，MenuDrawer支持菜单view处于内容的上下层  \n项目地址：https://github.com/jfeinstein10/SlidingMenu  \nDemo地址：https://play.google.com/store/apps/details?id=com.slidingmenu.example  \nAPP示例：Foursquare, LinkedIn, Zappos, Rdio, Evernote Food, Plume, VLC for Android, ESPN ScoreCenter, MLS MatchDay, 9GAG, Wunderlist 2, The Verge, MTG Familiar, Mantano Reader, Falcon Pro (BETA), MW3 Barracks  \n\n1. ArcMenu  \n支持类似Path的左下角动画旋转菜单及横向划出菜单、圆心弹出菜单  \n项目地址：https://github.com/daCapricorn/ArcMenu  \n效果图：![Renderings](https://camo.githubusercontent.com/1fcc783d2e784f7db24feb2b6857f4aa43fc685b/68747470733a2f2f646c2e64726f70626f782e636f6d2f752f31313336393638372f70726576696577302e706e67)\n![comtu](https://camo.githubusercontent.com/7c3d707678e6aa187cdf2ee3ac701d77fba92f48/68747470733a2f2f646c2e64726f70626f782e636f6d2f752f31313336393638372f70726576696577312e706e67)\n![comtu](https://camo.githubusercontent.com/a5050578e15ff2e22deb2c0249b50c69f8f1ec1a/68747470733a2f2f646c2e64726f70626f782e636f6d2f752f31313336393638372f7261796d656e752e706e67)  \nAPP示例：Path  \n\n1. android-satellite-menu  \n类似Path的左下角动画旋转菜单  \n项目地址：https://github.com/siyamed/android-satellite-menu  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/satellite-menu-demo.apk?raw=true  \nAPP示例：Path  \n\n1. radial-menu-widget  \n圆形菜单，支持二级菜单  \n项目地址：https://code.google.com/p/radial-menu-widget/  \n效果图：http://farm8.staticflickr.com/7377/11621125154_d1773c2dcc_o.jpg  \n\n1. Android Wheel Menu  \n圆形旋转选取菜单  \n项目地址：https://github.com/anupcowkur/Android-Wheel-Menu  \n效果图：![Renderings](https://raw.github.com/anupcowkur/Android-Wheel-Menu/master/graphics/wheel.gif)  \n\n1. FoldingNavigationDrawer  \n滑动并以折叠方式打开菜单  \n项目地址：https://github.com/tibi1712/FoldingNavigationDrawer-Android  \nDemo地址：https://play.google.com/store/apps/details?id=com.ptr.folding.sample  \n效果图：![Renderings](https://lh6.ggpht.com/VnKUZenAozQ0KFAm5blFTGqMaKFjvX-BK2JH-jrX1sIXVTqciACqRhqFH48hc4pm2Q=h310-rw)  \n\n1. AndroidResideMenu  \n仿 Dribbble 的边栏菜单  \n项目地址：https://github.com/SpecialCyCi/AndroidResideMenu  \n效果图：![Renderings](https://github.com/SpecialCyCi/AndroidResideMenu/raw/master/2.gif)  \n\n1. CircularFloatingActionMenu  \n一个可定制的圆形的浮动菜单控件，类似于Path的圆形菜单。这个控件的可定制性更强，可以很容易的定制菜单出现消失时的动画，起始角度和半径。  \n项目地址：https://github.com/oguzbilgener/CircularFloatingActionMenu  \nDemo地址：https://github.com/oguzbilgener/CircularFloatingActionMenu/tree/master/samples  \n效果图：![Renderings](https://raw.githubusercontent.com/oguzbilgener/CircularFloatingActionMenu/master/assets/circularfab.gif)  \n\n1. NavigationDrawerSI  \nNavigation Drawer的一个简单实现，滑动并以折叠方式打开菜单  \n项目地址：https://github.com/mmBs/NavigationDrawerSI  \nDemo地址：https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi  \n效果图：<img height=\"500px\" src=\"https://raw.githubusercontent.com/mmBs/NavigationDrawerSI/master/images/screens.png\" />  \nAPP示例：https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi  \n\n1. DragLayout  \n使用support.v4包下的ViewDragHelper实现QQ5.0侧滑  \n项目地址：https://github.com/BlueMor/DragLayout  \n效果图：![Renderings](https://github.com/BlueMor/DragLayout/raw/master/screenshots/123.gif)  \n\n1. LDrawer  \nMaterial Design 形式的展开折叠Icon  \n项目地址：https://github.com/ikimuhendis/LDrawer  \n效果图：![Renderings](https://raw.githubusercontent.com/IkiMuhendis/LDrawer/master/images/animated.gif)  \n\n1. Floating Action Button  \n悬浮的圆形菜单栏，支持组建滚动时自动隐藏及其他设置  \n项目地址：https://github.com/shamanland/floating-action-button  \n效果图：![Renderings](https://camo.githubusercontent.com/c679cb23cf62830b0d4037e17cf2d8d4090bc3c8/68747470733a2f2f64726976652e676f6f676c652e636f6d2f75633f69643d3042776830534e4c506d6a5142526b466f5a4530345646393051324d)  \n  \n\n1. Side-Menu.Android  \n分类侧滑菜单，[Yalantis](http://yalantis.com/) 出品。  \n项目地址：https://github.com/Yalantis/Side-Menu.Android  \n效果图：![Renderings](https://camo.githubusercontent.com/cb6caa7a392d01d46bca9d9485c01fc173f55fac/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3132353035362f73637265656e73686f74732f313638393932322f6576656e74732d6d656e755f312d312d362e676966)  \n\n1. Context-Menu.Android  \n可以方便快速集成漂亮带有动画效果的上下文菜单，[Yalantis](http://yalantis.com/)出品。  \n项目地址：https://github.com/Yalantis/Context-Menu.Android  \n效果图：![Renderings](https://camo.githubusercontent.com/46c15734b552ce3afefa7efd1518909046b4677e/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3132353035362f73637265656e73686f74732f313738353237342f39396d696c65732d70726f66696c652d6c696768745f312d312d342e676966)  \n\n#### 四、ViewPager 、Gallery  \n1. Android-ViewPagerIndicator  \n配合ViewPager使用的Indicator，支持各种位置和样式  \n项目地址：https://github.com/JakeWharton/Android-ViewPagerIndicator  \nDemo地址：https://play.google.com/store/apps/details?id=com.viewpagerindicator.sample  \nAPP示例：太多了。。  \n\n1. JazzyViewPager  \n支持Fragment切换动画的ViewPager，动画包括转盘、淡入淡出、翻页、层叠、旋转、方块、翻转、放大缩小等，效果类似桌面左右切换的各种效果，不过桌面并非用ViewPager实现而已  \n项目地址：https://github.com/jfeinstein10/JazzyViewPager  \nDemo地址：https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true  \n\n1. JellyViewPager  \n特殊切换动画的ViewPager  \n项目地址：https://github.com/chiemy/JellyViewPager  \n效果图：![Renderings](https://github.com/chiemy/JellyViewPager/raw/master/capture.gif)  \n\n1. Android-DirectionalViewPager  \n支持横向和纵向(垂直)的ViewPager  \n项目地址：https://github.com/JakeWharton/Android-DirectionalViewPager  \nDemo地址：https://market.android.com/details?id=com.directionalviewpager.sample  \n\n1. android-pulltorefresh  \n支持下拉刷新的ViewPager  \n项目地址：https://github.com/chrisbanes/Android-PullToRefresh  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refreshview-demo.apk?raw=true  \nAPP示例：新浪微博各个页面  \n\n1. FancyCoverFlow  \n支持Item切换动画效果的类似Gallery View  \n项目地址：https://github.com/davidschreiber/FancyCoverFlow  \nDemo地址：https://play.google.com/store/apps/details?id=at.technikum.mti.fancycoverflow.samples  \n效果图：![Renderings](https://github-camo.global.ssl.fastly.net/ef5ced52b7b54652b50499521ed797c0188c7a6b/687474703a2f2f64617669647363687265696265722e6769746875622e696f2f46616e6379436f766572466c6f772f73637265656e73686f74322e706e67)  \n\n1. AndroidTouchGallery  \n支持双击或双指缩放的Gallery(用ViewPager实现)，相比下面的PhotoView，在被放大后依然能滑到下一个item，并且支持直接从url和文件中获取图片，  \n项目地址：https://github.com/Dreddik/AndroidTouchGallery  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/touch-gallery-demo.apk?raw=true  \nAPP示例：类似微信中查看聊天记录图片时可双击放大，并且放大情况下能正常左右滑动到前后图片  \n\n1. Android Auto Scroll ViewPager  \nAndroid自动滚动 轮播循环的ViewPager  \n项目地址：https://github.com/Trinea/android-auto-scroll-view-pager  \nDemo地址：https://play.google.com/store/apps/details?id=cn.trinea.android.demo  \n文档介绍：http://www.trinea.cn/android/auto-scroll-view-pager/  \n\n1. Salvage view  \n带View缓存的Viewpager PagerAdapter，很方便使用  \n项目地址：https://github.com/JakeWharton/salvage  \n\n1. Android PagerSlidingTabStrip  \n配合ViewPager使用的Indicator，支持ViewPager Scroll时Indicator联动  \n项目地址：https://github.com/astuetz/PagerSlidingTabStrip  \nDemo地址：https://play.google.com/store/apps/details?id=com.astuetz.viewpager.extensions.sample  \n\n1. ViewPager3D  \nViewPager3D效果  \n项目地址：https://github.com/inovex/ViewPager3D  \n\n1. AnimaTabsview  \n仿网易云音乐标签切换的动画,带透明小三角  \n项目地址：https://github.com/wuyexiong/transparent-over-animtabsview  \n在线演示：http://v.youku.com/v_show/id_XNzA4MjY5NjA0.html  \n\n1. LoopingViewPager  \n无限循环的ViewPager  \n项目地址：https://github.com/imbryk/LoopingViewPager  \n\n1. android_page_curl  \n翻书卷曲效果  \n项目地址：https://github.com/harism/android_page_curl  \nAPP示例：iReader  \n在线演示：https://www.youtube.com/watch?v=iwu7P5PCpsw  \n\n1. ViewPagerIndicator  \n简化并实现android的TabHost效果，顶部滑动tab，引导页，支持自定义tab样式,自定义滑动块样式和位置,自定义切换tab的过渡动画,子界面的预加载和界面缓存,设置界面是否可滑动  \n项目地址：https://github.com/LuckyJayce/ViewPagerIndicator  \n  \n1. SmartTabLayout  \nA custom ViewPager title strip which gives continuous feedback to the user when scrolling.This library has been added some features and utilities based on android-SlidingTabBasic project of Google Samples.  \n自定义标题:viewpage地带使连续滚动时反馈给用户。这个库添加了一些功能和实用程序基于谷歌android-SlidingTabBasic工程样品。  \n项目地址: https://github.com/ogaclejapan/SmartTabLayout  \nApp示例: https://play.google.com/store/apps/details?id=com.ogaclejapan.smarttablayout.demo  \n效果图: ![Renderings](https://raw.githubusercontent.com/ogaclejapan/SmartTabLayout/master/art/demo1.gif)  \n\n1. AndroidImageSlider  \nAn amazing and convenient Android image slider.  \n一个了不起的滑块和方便Android 图片滑动。\n项目地址: https://github.com/daimajia/AndroidImageSlider  \nApp示例: https://github.com/daimajia/AndroidImageSlider/releases/download/v1.0.8/demo-1.0.8.apk  \nEclipse工程: https://github.com/daimajia/AndroidImageSlider/releases/download/v1.0.9/AndroidImageSlider-Eclipse.zip    \n效果图: ![Renderings](https://camo.githubusercontent.com/f64413139bbaa918131384d3597c33e39333aa7f/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a773165677a6f7236366f6a64673230393530666b6e70652e676966)  \n\n\n#### 五、GridView  \n1. StaggeredGridView  \n允许非对齐行的GridView，类似Pinterest的瀑布流，并且跟ListView一样自带View缓存，继承自ViewGroup  \n项目地址：https://github.com/maurycyw/StaggeredGridView  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/staggered-gridview-demo.apk?raw=true  \nAPP示例：Pinterest等  \n\n1. AndroidStaggeredGrid  \n允许非对齐行的GridView，类似Pinterest的瀑布流，继承自AbsListView  \n项目地址：https://github.com/etsy/AndroidStaggeredGrid  \nAPP示例：Pinterest等  \n\n1. PinterestLikeAdapterView  \n允许非对齐行的GridView，类似Pinterest的瀑布流，允许下拉刷新  \n项目地址：https://github.com/GDG-Korea/PinterestLikeAdapterView  \nAPP示例：Pinterest等  \n\n1. DraggableGridView  \nItem可拖动交换位置的GridView，实际是自己继承ViewGroup实现，类似桌面的单屏效果，可屏幕自动上下滚动进行Item移动交换，多屏效果见下面PagedDragDropGrid  \n项目地址：https://github.com/thquinn/DraggableGridView  \nDemo地址：https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true  \n\n1. StickyGridHeaders  \nGroupName滑动到顶端时会固定不动直到另外一个GroupName到达顶端的GridView  \n项目地址：https://github.com/TonicArtos/StickyGridHeaders  \n效果图：![Renderings](https://github-camo.global.ssl.fastly.net/90b57e9383704c400706545225d439e057c6fcc0/687474703a2f2f342e62702e626c6f6773706f742e636f6d2f2d535f4262685758367754592f55517057306377554745492f41414141414141414776552f7a7a4a586a2d50635662592f73313630302f73637265656e2d6c616e6473636170652d736d616c6c65722e706e67)  \n\n1. PagedDragDropGrid  \nItem可拖动交换位置、拖动删除的自定义控件，实际是自己继承ViewGroup实现，类似桌面的多屏效果，可拖动到屏幕边缘，屏幕自动左右滚动进行Item移动交换，可拖动进行删除，单屏效果见上面DraggableGridView  \n项目地址：https://github.com/mrKlar/PagedDragDropGrid  \n在线演示：http://youtu.be/FYTSRfthSuQ  \n\n1. Android-DraggableGridViewPager  \nItem可拖动交换位置的GridView，实际是自己继承ViewGroup实现，类似桌面的多屏效果，可屏幕自动左右滚动进行Item移动交换，单屏效果见上面DraggableGridView  \n项目地址：https://github.com/zzhouj/Android-DraggableGridViewPager  \nDemo地址：https://github.com/Trinea/trinea-download/blob/master/draggable-grid-viewpager-demo.apk?raw=true  \n\n1. TwoWayGridView  \n可横向滚动的GridView  \n项目地址：https://github.com/jess-anders/two-way-gridview  \n\n1. PagingGridView  \n分页加载的GridView。当滑动到GridView底部最后一个行时，显示一个进度行，然后加载下一页数据，并显示。  \n项目地址：https://github.com/nicolasjafelle/PagingGridView  \n\n1. AsymmetricGridView  \n一个支持跨行和跨列可变Item大小的GridView  \n项目地址：https://github.com/felipecsl/AsymmetricGridView  \nDemo地址：https://play.google.com/store/apps/details?id=com.felipecsl.asymmetricgridview.app  \n效果图：![Renderings](https://raw.githubusercontent.com/felipecsl/AsymmetricGridView/master/screenshots/ss_5_cols.png)  \n\n1. GridView with Header and Footer  \n和`ListView`一样带头部和底部的`GridView`，用法和`ListView`一样  \n项目地址：https://github.com/liaohuqiu/android-GridViewWithHeaderAndFooter  \n效果图：![Screen Shot](https://raw.githubusercontent.com/liaohuqiu/android-GridViewWithHeaderAndFooter/master/screen-shot.png)  \n  \n\n#### 六、ImageView  \n1. PhotoView  \n支持双击或双指缩放的ImageView，在ViewPager等Scrolling view中正常使用，相比上面的AndroidTouchGallery，不仅支持ViewPager，同时支持单个ImageView  \n项目地址：https://github.com/chrisbanes/PhotoView  \nDemo地址：https://play.google.com/store/apps/details?id=uk.co.senab.photoview.sample  \nAPP示例：photup  \n\n1. android-gif-drawable  \n支持gif显示的view，用jni实现的，编译生成so库后直接xml定义view即可，而且本身不依赖于其他开源项目所以相对下面的ImageViewEx简单的多  \n项目地址：https://github.com/koral--/android-gif-drawable  \n\n1. ImageViewEx  \n支持Gif显示的ImageView，依赖很多，编译过程很繁琐  \n项目地址：https://github.com/frapontillo/ImageViewEx  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/imageviewex-demo.apk?raw=true  \n\n1. RoundedImageView  \n带圆角的ImageView  \n项目地址：https://github.com/vinc3m1/RoundedImageView  \n效果图：![Renderings](https://raw.github.com/makeramen/RoundedImageView/master/screenshot.png)  \n\n1. SelectableRoundedImageView  \nImageView允许四个角的每一个有不同的半径值。也允许椭圆形、圆形的形状或者边  \n项目地址：https://github.com/pungrue26/SelectableRoundedImageView  \nDemo地址：https://play.google.com/store/apps/details?id=com.joooonho  \n效果图：![Renderings](https://camo.githubusercontent.com/25d2e5fb8783b5dd09c00b03091172a79c69350e/687474703a2f2f692e696d6775722e636f6d2f55355653376d322e706e673f31)  \n\n1. ColorArt  \n根据图片的均色设置背景色显示文字和图片，类似itune11中效果  \n项目地址：https://github.com/MichaelEvans/ColorArt  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/color-art-demo.apk?raw=true  \n\n1. CircleImageView  \n圆形的ImageView  \n项目地址：https://github.com/hdodenhof/CircleImageView  \n效果图：![Renderings](https://raw.github.com/hdodenhof/CircleImageView/master/screenshot.png)  \n\n1. ImageViewZoom  \n支持放大和平移的ImageView  \n项目地址：https://github.com/sephiroth74/ImageViewZoom  \nAPP示例：https://play.google.com/store/apps/details?id=com.aviary.android.feather  \n\n1. KenBurnsView  \n实现Ken Burns effect效果，达到身临其境效果的ImageView  \n项目地址：https://github.com/flavioarfaria/KenBurnsView  \n\n1. CustomShapeImageView  \n各种形状的ImageView, 相比上面的圆形ImageView，多了更多形状  \n项目地址：https://github.com/MostafaGazar/CustomShapeImageView  \n效果图：![Renderings](https://raw.github.com/MostafaGazar/CustomShapeImageView/master/Screenshot_2013-11-05-23-08-12.png)  \n\n1. Shape Image View  \n可以自定义各种形状的ImageView, 并且支持边框  \n项目地址：https://github.com/siyamed/android-shape-imageview  \n效果图：<img height=\"500px\" src=\"https://github.com/siyamed/android-shape-imageview/raw/master/images/shader-buble.png\" /><img height=\"500px\" src=\"https://github.com/siyamed/android-shape-imageview/raw/master/images/all-samples.png\"/>  \n\n1. TextDrawable  \n一个用于生成带有文本或者字母的图片的轻量级库。扩展自Drawable，因此可用于现有/自定义/网络等ImageView类，并且包含一个流接口用于创建drawables以及一个定制的ColorGenerator  \n项目地址：https://github.com/amulyakhare/TextDrawable  \n效果图：![Renderings](https://raw.githubusercontent.com/amulyakhare/TextDrawable/master/screens/screen7.png)  \n  \n\n#### 七、ProgressBar  \n1. SmoothProgressBar  \n水平进度条  \n项目地址：https://github.com/castorflex/SmoothProgressBar  \nDemo地址：https://play.google.com/store/apps/details?id=fr.castorflex.android.smoothprogressbar.sample  \n\n1. ProgressWheel  \n支持进度显示的圆形ProgressBar  \n项目地址：https://github.com/Todd-Davies/ProgressWheel  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/progress-wheel-demo.apk?raw=true  \n\n1. android-square-progressbar  \n在图片周围显示进度  \n项目地址：https://github.com/mrwonderman/android-square-progressbar  \nDemo地址：https://play.google.com/store/apps/details?id=net.yscs.android.square_progressbar_example  \n效果图：![Renderings](https://googledrive.com/host/0BwESwPCuXtw7eExwSFVLQkR2TTg/newscreen1.png)  \nAPP示例：square  \n\n1. HoloCircularProgressBar  \nAndroid4.1 时钟App样式  \n项目地址：https://github.com/passsy/android-HoloCircularProgressBar  \n效果图：![Renderings](https://raw.github.com/passsy/android-HoloCircularProgressBar/master/raw/screenshot1.png)  \nAPP示例：Android4.1时钟App  \n\n1. ProgressButton  \n通过图钉的不同状态显示进度  \n项目地址：https://github.com/f2prateek/progressbutton  \n效果图：![Renderings](http://f2prateek.com/progressbutton/static/states.png)  \n文档介绍：http://f2prateek.com/progressbutton/  \n\n1. GoogleProgressBar  \n类似google 多个圆形卡片翻转的progressBar  \n项目地址：https://github.com/jpardogo/GoogleProgressBar  \n效果图：![Renderings](https://raw.githubusercontent.com/jpardogo/GoogleProgressBar/master/art/GoogleProgressBar.gif)  \n\n1. TH-ProgressButton  \n带圆形进度显示的按钮  \n项目地址；https://github.com/torryharris/TH-ProgressButton  \n效果图：![Renderings](https://raw.github.com/Vyshakh-K/TH-ProgressButton/master/screenshots/progressshot1.png)  ![Renderings](https://raw.github.com/Vyshakh-K/TH-ProgressButton/master/screenshots/progressshot2.png)  \n\n1. NumberProgressBar  \n带数字进度的进度条  \n项目地址：https://github.com/daimajia/NumberProgressBar  \n效果图：![Renderings](https://camo.githubusercontent.com/0c92568af7ec4e04e2e1503acdd2ca99854ab0b5/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a77316566797264386e376937673230637a30326d7135662e676966)  \n\n1. CircularProgressDrawable  \n带圆形进度显示的进度条  \n项目地址：https://github.com/Sefford/CircularProgressDrawable  \n效果图：![Renderings](https://raw.githubusercontent.com/Sefford/CircularProgressDrawable/master/overshoot.gif)  \n\n1. Android-RoundCornerProgressBar  \nAndroid 圆角 ProgressBar，可自定义圆角颜色和半径，包括带 Icon 和不带 Icon 两种类型。  \n项目地址：https://github.com/akexorcist/Android-RoundCornerProgressBar  \n效果图：![Renderings](https://raw.githubusercontent.com/akexorcist/Android-RoundCornerProgressBar/master/image/screenshot_02.png)  \n\n1. circular-progress-button  \n带进度显示的Button  \n项目地址：https://github.com/dmytrodanylyk/circular-progress-button  \n效果图：![Renderings](https://raw.githubusercontent.com/dmytrodanylyk/circular-progress-button/master/screenshots/intro.gif)  \n\n1. WaveView  \n一个波纹效果的 View，可用来做 ProgressBar  \n项目地址：https://github.com/john990/WaveView  \nDemo地址：https://raw.github.com/john990/WaveView/master/screenshot%26apk/demo.unaligned.apk  \n效果图：![Renderings](https://camo.githubusercontent.com/60722e9d4f2d2daa78a8650cb27a32adea82bdd4/68747470733a2f2f7261772e6769746875622e636f6d2f6a6f686e3939302f57617665566965772f6d61737465722f73637265656e73686f7425323661706b2f73637265656e73686f742e676966)  \n\n1. Android L 效果的ProgressBar  \n项目地址：https://github.com/tigerguixh/ProgressBar  \nDemo地址: https://github.com/tigerguixh/ProgressBar/blob/master/bin/ProgressBar.apk  \n效果图: ![Renderings](https://github.com/cr1944/ProgressBar/raw/master/1.gif)  \n\t\n#### 八、TextView  \n包括TextView及所有继承自TextView控件，如EditText、Button、RadioButton  \n1. android-flowtextview  \n文字自动环绕其他View的Layout  \n项目地址：https://github.com/deano2390/FlowTextView  \n效果图：http://i949.photobucket.com/albums/ad332/vostroman1500/1.png  \n\n1. Android Form EditText  \n验证输入合法性的编辑框，支持输入、英文、ip、url等多种正则验证  \n项目地址：https://github.com/vekexasia/android-edittext-validator  \nDemo地址：https://play.google.com/store/apps/details?id=com.andreabaccega.edittextformexample  \n\n1. Emojicon  \n支持emojis的TextView和EditText  \n项目地址：https://github.com/rockerhieu/emojicon  \n文档介绍：http://rockerhieu.com/emojicon/  \n\n1. android-circlebutton  \nAndroid圆形按钮，实际实现是继承自ImageView  \n项目地址：https://github.com/markushi/android-circlebutton  \nDemo地址：https://github.com/markushi/android-circlebutton/blob/master/example/example.apk  \n\n1. Segmented Radio Buttons for Android  \niOS’s segmented controls的实现  \n项目地址：https://github.com/vinc3m1/android-segmentedradiobutton  \nDemo地址：https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true  \n效果图：![Renderings](https://raw.github.com/vinc3m1/android-segmentedradiobutton/master/screens/segmentedradio.png)  \n\n1. Chips EditText Library  \n支持国家名字联想从而选择显示该国国旗的EditText，实际就是通过SpannableStringBuilder实现  \n项目地址：https://github.com/kpbird/chips-edittext-library  \nDemo地址：https://github.com/kpbird/chips-edittext-library/tree/master/ChipsEditTextDemo/bin  \n\n1. AutoFitTextView  \n可固定边界内容字体大小自适应的TextView  \n项目地址：https://github.com/grantland/android-autofittextview  \n\n1. Shimmer for Android  \n文字发淡光的TextView  \n项目地址：https://github.com/RomainPiel/Shimmer-android  \n\n1. Titanic  \n可以显示水位上升下降(不知道该怎么描述 囧)的TextView  \n项目地址：https://github.com/RomainPiel/Titanic  \n效果图：![Renderings](https://github.com/RomainPiel/Titanic/raw/master/titanic.gif)  \n\n1. android-iconify  \n提供带Icon的TextView,Menu,Button等  \n项目地址：https://github.com/JoanZapata/android-iconify  \n\n1. Calligraphy  \n让我们在android开发中使用自定义字体变得更加简单  \n项目地址 ：https://github.com/chrisjenx/Calligraphy  \n效果图：![Renderings](https://github.com/chrisjenx/Calligraphy/raw/master/screenshot.png)  \n\n1. CreditsRoll  \n类似星球大战字幕效果的TextView  \n项目地址：https://github.com/frakbot/CreditsRoll  \n\n1. android-process-buton  \n带加载或提交进度的Button  \n项目地址：https://github.com/dmytrodanylyk/android-process-buton  \n\n1. FButton  \n扁平化的Button  \n项目地址：https://github.com/hoang8f/android-flat-button  \nDemo地址：https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo  \n\n1. FloatingActionButton  \n一个类似Android版Google+浮动功能按钮的控件，可以响应ListView的滚动事件。当列表向上滚动的时候会自动显示，向下滚动的时候自动隐藏。  \n项目地址：https://github.com/makovkastar/FloatingActionButton  \nDemo地址：https://github.com/makovkastar/FloatingActionButton/tree/master/  \n效果图：![Renderings](https://raw.githubusercontent.com/makovkastar/FloatingActionButton/master/art/demo.gif)  \n\n1. Android Saripaar  \nAndroid表单验证  \n项目地址：https://github.com/ragunathjawahar/android-saripaar/  \n\n1. JumpingBeans  \n文字像 Mexican beans 一样跳动  \n项目地址：https://github.com/frakbot/JumpingBeans  \nDemo地址：http://play.google.com/store/apps/details?id=net.frakbot.jumpingbeans.demo  \n效果图：![Renderings](https://github.com/frakbot/JumpingBeans/blob/master/art/jumpingdots.gif)  \n\n1. FancyButtons  \n一个不用图片就可以帮助我们创建出漂亮按钮的库。  \n项目地址：https://github.com/medyo/fancybuttons  \nDemo地址：https://github.com/medyo/fancybuttons/tree/master/samples  \n效果图：![Renderings](https://camo.githubusercontent.com/8c5800ef180f69d302237132906737bf71a52caf/68747470733a2f2f7261772e6769746875622e636f6d2f6d6564796f2f66616e6379627574746f6e732f6d61737465722f73637265656e73686f74732f66616e63792e706e67)\n![Renderings](https://raw.githubusercontent.com/medyo/fancybuttons/master/screenshots/fancy2.png)  \n\n1. Android-RobotoTextView  \n一个实现了所有Roboto字体的TextView，包括新出的Roboto Slab字体。  \n项目地址：https://github.com/johnkil/Android-RobotoTextView  \nDemo地址：http://play.google.com/store/apps/details?id=com.devspark.robototextview  \nDemo项目：https://github.com/johnkil/Android-RobotoTextView/tree/master/robototextview-sample  \n效果图：<img height=\"400px\" src=\"https://camo.githubusercontent.com/f058c810055e1ff12fa995346059ad399d9c0f95/687474703a2f2f6934362e74696e797069632e636f6d2f6239646736392e706e67\" />>  \n\n1. Android-WizardPager  \n一个表单向导库  \n项目地址：https://github.com/romannurik/android-wizardpager  \nDemo项目：https://github.com/str4d/android-wizardpager/tree/textfield  \n效果图：<img height=\"400px\" src=\"https://camo.githubusercontent.com/685a1eee3b9b7eb6a0409061031654ea7d6b0b17/68747470733a2f2f6c68352e676f6f676c6575736572636f6e74656e742e636f6d2f2d664944555a3074514373632f554a4e4c6a6e504c5447492f41414141414141416f4f382f784b63654f61746c6a50302f773431332d683638392d6e6f2f322e706e67\" />  \n\n1. RippleView  \n一个实现了 Android L 上才引入的点击按钮后出现水波纹效果的按钮  \n项目地址：https://github.com/siriscac/RippleView  \nDemo项目：https://github.com/siriscac/RippleView/tree/master/RippleViewExample  \n效果图：![Renderings](https://camo.githubusercontent.com/eec41193900aad4803dcf18bc9915fafa3f7d1cf/68747470733a2f2f7261772e6769746875622e636f6d2f73697269736361632f526970706c65566965772f6d61737465722f53637265656e732f53637265656e2e676966)  \n\n1. RippleEffect  \n一个实现Material Design Ripple效果的库，支持Android API 9+以上版本。  \n项目地址：https://github.com/traex/RippleEffect  \nDemo项目：https://github.com/traex/RippleEffect/tree/master/sample  \n效果图：![Renderings](https://raw.githubusercontent.com/traex/RippleEffect/master/header.png)  \n\n1. Android Floating Label Widgets  \n包含一系列控件，这些控件特点是：有默认值，当值不为空时默认值浮动到上面变为提示  \n项目地址：https://github.com/marvinlabs/android-floatinglabel-widgets  \nDemo地址：https://play.google.com/store/apps/details?id=com.marvinlabs.widget.floatinglabel.demo  \n在线演示：http://www.youtube.com/watch?v=hpZD9gJcRg0&feature=youtu.be  \n\n1. MaterialEditText  \nEditText 的 Material Design 实现。包含 [Google Material Design Spec](http://www.google.com/design/spec/components/text-fields.html)中的UI效果和一些新增特性。  \n项目地址：https://github.com/rengwuxian/MaterialEditText  \n\n1. MultiActionTextView  \n可以分别给TextView中的某几个字设置点击事件的TextView  \n项目地址：https://github.com/ajaysahani/MultiActionTextView  \n效果图：![Renderings](https://camo.githubusercontent.com/1223e37d084e84ec0e22a1b27e7513661d0e1b39/687474703a2f2f692e696d6775722e636f6d2f773934576f53582e706e67)  \n\n1. ToggleButton  \n状态切换的 Button，类似 iOS，用 View 实现  \n项目地址：https://github.com/zcweng/ToggleButton  \n效果图：![Renderings](https://github.com/zcweng/ToggleButton/raw/master/ToggleButtonSample/21879.gif)  \n  \n1. SlideSwitch  \n状态切换的开关，可以设置为类似IOS的圆形，也可以设置为矩形，用 View 实现  \n项目地址：https://github.com/Leaking/SlideSwitch\n效果图：![Renderings](https://github.com/Leaking/SlideSwitch/blob/master/Example/TestLibs/res/drawable-hdpi/slide_c.gif)  \n\n1. ExpandableTextView  \n可展开和收缩内容的TextView。  \n项目地址：https://github.com/Manabu-GT/ExpandableTextView  \n效果图：<img height=\"500px\" src=\"https://camo.githubusercontent.com/8bf46083b3bd152c2051ae4c234649dbbb975376/68747470733a2f2f7261772e6769746875622e636f6d2f4d616e6162752d47542f457870616e6461626c6554657874566965772f6d61737465722f6172742f726561646d655f64656d6f2e676966\" />\n  \n\n#### 九、ScrollView  \n1. Discrollview  \n支持滚动时Item淡入淡出，平移，缩放效果的ScrollView  \n项目地址：https://github.com/flavienlaurent/discrollview  \nDemo地址：https://github.com/flavienlaurent/discrollview/raw/master/sample.apk  \n\n1. PullScrollView  \n仿照新浪微博Android客户端个人中心的ScrollView，下拉背景伸缩回弹效果。  \n项目地址：https://github.com/MarkMjw/PullScrollView  \n效果图：![Renderings](https://raw.github.com/MarkMjw/PullScrollView/master/Screenshots/1.png)  \n\n1. ArcLayout  \n一个非常简单的弧布局库 \n项目地址: https://github.com/ogaclejapan/ArcLayout  \nDemo地址k: https://play.google.com/store/apps/details?id=com.ogaclejapan.arclayout.demo  \n效果图: ![Renderings](https://raw.githubusercontent.com/ogaclejapan/ArcLayout/master/art/demo1.gif)  \n![renderings](https://raw.githubusercontent.com/ogaclejapan/ArcLayout/master/art/demo2.gif)  \n\n1. ParallaxScrollView  \n支持视差滚动的ScrollView ，背景图片的滚动速度小于ScrollView中子控件的滚动速度  \n项目地址：https://github.com/chrisjenx/ParallaxScrollView  \nDemo地址：http://cloud.github.com/downloads/chrisjenx/ParallaxScrollView/ParallaxScrollViewDemo-v1.0.5.apk  \n\n1. AKParallax-Android  \n支持视差滚动的ScrollView  \n项目地址：https://github.com/ideaismobile/AKParallax-Android  \nDemo地址：https://play.google.com/store/apps/details?id=com.appkraft.parallax_sample  \n   \n\n1. Android-ObservableScrollView   \n监听滚动视图滚动事件的库，帮助与Toolbar的交互动效处理与Material Design的实现   \n项目地址：https://github.com/ksoichiro/Android-ObservableScrollView    \nDemo地址：https://play.google.com/store/apps/details?id=com.github.ksoichiro.android.observablescrollview.samples2  \n\n1. OverScrollView   \n有弹性的ScrollView，实现了当手指滑动到ScrollView的顶部、底部时，可以继续的向上、向下拉伸。当释放手指的时候，向上、下回弹   \n项目地址：https://github.com/EverythingMe/OverScrollView\n\n\n#### 十、TimeView  \n包括TimePicker、DatePicker、CalendarView、Clock等时间相关控件  \n\n1. android-times-square  \nAndroid日历时间部件，支持选取单个日期，多个日期，及日期区间段和对话框形式显示  \n项目地址：https://github.com/square/android-times-square  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/times-square-demo.apk?raw=true  \n\n1. android-calendar-card  \n日历  \n项目地址：https://github.com/kenumir/android-calendar-card  \nDemo地址：https://play.google.com/store/apps/details?id=com.wt.calendarcardsample  \n效果图：![Renderings](https://raw.github.com/kenumir/android-calendar-card/master/calendar-card-sample/_work/device-2013-10-12-151801.png)  \n\n1. AndroidWheel  \nAndroid Wheel支持城市、多种日期时间、密码、图片  \n项目地址：https://code.google.com/p/android-wheel/  \n效果图：![Renderings](http://farm6.staticflickr.com/5532/11621528786_220c040ba5_o.jpg)  \n\n1. GoogleDateTimePickers  \n时间选择部件  \n项目地址：https://github.com/Mirkoddd/GoogleDateTimePickers  \n文档介绍：https://play.google.com/store/apps/details?id=com.mirko.sample&hl=it  \n\n1. DateTimePicker  \n日期选择部件(Google Agenda的样式风格)  \n项目地址：https://github.com/flavienlaurent/datetimepicker  \nDemo地址：https://raw.github.com/biboune/datetimepicker/master/datetimepicker-sample.apk  \n效果图：![Renderings](https://camo.githubusercontent.com/493edeea3eb553ad0d0b121dbead0d7ec6a858f2/68747470733a2f2f7261772e6769746875622e636f6d2f6269626f756e652f6461746574696d657069636b65722f6d61737465722f67726170686963732f696d67312e706e67)  \n\n1. android-betterpickers  \n提供日期、数字、时间（数字方式和钟表方式）、重复周期（闹钟的周期重复）、HMS（时、分、秒）的选择，支持以DialogFragment的弹窗选择  \n项目地址：https://github.com/derekbrameyer/android-betterpickers  \nDemo地址：https://play.google.com/store/apps/details?id=com.doomonafireball.betterpickers.sample\n效果图：![Renderings](https://camo.githubusercontent.com/897ae3c71b49c4366565f3480719647687b1804a/68747470733a2f2f7261772e6769746875622e636f6d2f646572656b6272616d657965722f616e64726f69642d6265747465727069636b6572732f6d61737465722f73616d706c652f696d61676572792f7765625f666561747572655f677261706869632e706e67)  \n\n1. Android Week View  \n日期控件，支持周，天视图，支持自定义样式  \n项目地址：https://github.com/alamkanak/Android-Week-View  \n效果图：![Renderings](https://github.com/alamkanak/Android-Week-View/blob/master/images/screen-shot.png)  \n  \n1. ScrollerCalendar  \n实现每行显示一年的12个月份的RecyclerView年历  \n项目地址：https://github.com/guanchao/ScrollerCalendar  \n效果图：![Renderings](https://raw.githubusercontent.com/guanchao/ScrollerCalendar/master/images/sample2.gif)  \n\n#### 十一、TipView  \n包括Toast、角标、UndoBar等提示性控件  \n\n1. Crouton  \n丰富样式的Toast，允许alert、comfirm、info样式及点击消失样式，允许设置Toast显示时间，允许自定义View。 本文32. SuperToasts为其扩展版  \n项目地址：https://github.com/keyboardsurfer/Crouton  \nDemo地址：http://play.google.com/store/apps/details?id=de.keyboardsurfer.app.demo.crouton  \n\n1. supertooltips  \n带动画效果的Tips显示  \n项目地址：https://github.com/nhaarman/supertooltips  \nDemo地址：https://play.google.com/store/apps/details?id=com.haarman.supertooltips  \n\n1. Android ViewBadger  \n为其他View添加角标等  \n项目地址：https://github.com/jgilfelt/android-viewbadger  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/android-viewbadger.apk?raw=true  \n效果图：![Renderings](https://github-camo.global.ssl.fastly.net/a705a3e88c75ae2394943bd7c56f725697616ea8/687474703a2f2f7777772e6a65666667696c66656c742e636f6d2f766965776261646765722f76622d31612e706e67)  \n\n1. SuperToasts  \n更丰富样式的toast，支持Button、Progress、Horizontal Progress样式、支持进入动画、支持撤销及其动画设置  \n项目地址：https://github.com/JohnPersano/SuperToasts  \nDemo地址：https://play.google.com/store/apps/details?id=com.supertoastsdemo  \n效果图：![SuperButtonToast](http://i1331.photobucket.com/albums/w597/JohnPersano/supertoasts_githubimage_zps8a5ceb7c.png)  \n\n1. UndoBar  \n屏幕底部显示取消或是确认的PopupWindows  \n项目地址：https://github.com/soarcn/UndoBar  \n效果图：![Renderings](https://github.com/soarcn/UndoBar/blob/master/art/redo.png?raw=true)  \n\n1. UndoBar  \n屏幕底部显示取消或是确认某操作  \n项目地址：https://github.com/jenzz/Android-UndoBar  \n效果图：![Renderings](https://raw.github.com/jenzz/Android-UndoBar/master/assets/Screenshot2.png)  \n\n1. Android-ActionItemBadge  \n可以在ActionBar的MenuItem上显示一个小角标  \n项目地址：https://github.com/mikepenz/Android-ActionItemBadge  \n效果图：![Renderings](https://raw.githubusercontent.com/mikepenz/Android-ActionItemBadge/master/DEV/screenshot/screenshot1_small.png)  \n\n1. SnackBar  \nMaterial Design 风格的 Toast，类似 Google inbox 中的提示  \n项目地址：https://github.com/MrEngineer13/SnackBar  \nDemo地址：https://play.google.com/store/apps/details?id=com.mrengineer13.snackbar.sample  \n效果图：![Renderings](https://camo.githubusercontent.com/67a39af16f3d46631567c1f7bd7dcddeb3c4c9e9/687474703a2f2f6d6174657269616c2d64657369676e2e73746f726167652e676f6f676c65617069732e636f6d2f696d616765732f636f6d706f6e656e74732d746f617374732d73706563732d737065635f746f6173745f30335f315f6c617267655f6d6470692e706e67)  \n\n1. HeadsUp  \n在2.3上使用 android  5.0的 HeadsUp 效果  \n项目地址：https://github.com/zzz40500/HeadsUp  \n效果图：![heads-up.gif](http://upload-images.jianshu.io/upload_images/166866-543a5d26ab71d0f6.gif)\n\n1. Droppy  \n项目地址：https://github.com/shehabic/Droppy\n特点：A simple yet-powerful and fully customizable Android drop-down menu. It supports Text with/without Icons, Separators, and even fully customized views.\n效果力: ![Droppy](https://raw.githubusercontent.com/shehabic/Droppy/screenshots/Droppy_Screenshot.png)\n\n#### 十二、FlipView  \n1. android-flip  \n类似Flipboard翻转动画的实现  \n项目地址：https://github.com/openaphid/android-flip  \nDemo地址：https://github.com/openaphid/android-flip/blob/master/FlipView/Demo/APK/Aphid-FlipView-Demo.apk?raw=true  \nAPP示例：flipboard  \n\n1. FlipImageView  \n支持x、y、z及动画选择的翻转动画的实现  \n项目地址：https://github.com/castorflex/FlipImageView  \nDemo地址：https://play.google.com/store/apps/details?id=fr.castorflex.android.flipimageview  \n\n1. FoldableLayout  \nFlip翻转效果的ListView，目前还不支持ListView缓存  \n项目地址：https://github.com/alexvasilkov/FoldableLayout  \nDemo地址：http://play.google.com/store/apps/details?id=com.alexvasilkov.foldablelayout.sample  \n  \n\n#### 十三、ColorPickView  \n1. ColorPickerView  \n颜色选择器，支持PopupWindows或新的Activity中打开  \n项目地址：https://code.google.com/p/color-picker-view/  \n效果图：![Renderings](http://oi41.tinypic.com/33c6mm8.jpg)  \n\n1. HoloColorPicker  \n颜色选择器  \n项目地址：https://github.com/LarsWerkman/HoloColorPicker  \nDemo地址：https://docs.google.com/file/d/0BwclyDTlLrdXRzVnTGJvTlRfU2s/edit  \n\n1. ColorPickerPreference  \n颜色选择器  \n项目地址：https://github.com/attenzione/android-ColorPickerPreference  \n效果图：![Renderings](https://github.com/attenzione/android-ColorPickerPreference/raw/master/screen_2.png)  \n\n1. ColorPicker  \n颜色选择器（Google Agenda中的样式风格）  \n项目地址：https://github.com/flavienlaurent/colorpicker  \nDemo地址：https://raw.github.com/biboune/colorpicker/master/colorpicker-sample.apk  \n效果图：![Renderings](https://camo.githubusercontent.com/a42581e637ca379004855d69e262d85ea966fa35/68747470733a2f2f7261772e6769746875622e636f6d2f6269626f756e652f636f6c6f727069636b65722f6d61737465722f67726170686963732f696d67312e706e67)  \n  \n\n#### 十四、GraphView  \n1. MPAndroidChart  \n强大的图表绘制工具，支持折线图、面积图、散点图、时间图、柱状图、条图、饼图、气泡图、圆环图、范围（高至低）条形图、网状图及各种图的结合；支持图的拖拽缩放；支持 Android 2.2 以上，支持横纵轴缩放，多指缩放，展现动画、高亮、保存到 sdcard、从文件读取图表  \n项目地址：https://github.com/PhilJay/MPAndroidChart  \nDemo地址：https://play.google.com/store/apps/details?id=com.xxmassdeveloper.mpchartexample  \nDemo项目：https://github.com/PhilJay/MPAndroidChart/tree/master/MPChartExample  \n效果图：<img height=\"300px\" src=\"https://camo.githubusercontent.com/a9eaa5fc7fb6c1e70b22acd09385055e0f5c4fe7/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f73696d706c6564657369676e5f6c696e656368617274342e706e67\" /><br/><img height=\"300px\" src=\"https://camo.githubusercontent.com/78b4bc4e50e151970961daf56e81c4c0db72d27c/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f73696d706c6564657369676e5f6261726368617274332e706e67\" /><br/><img  src=\"https://camo.githubusercontent.com/65f51783ec05038730b481ed614b57a94e867d86/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f626172636861727432642e706e67\" /><br/><img src=\"https://camo.githubusercontent.com/f66a35bf430b12480d3e2ed8e3bc8d7a17db950f/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f626172636861727433642e706e67\" /><br/><img height=\"300px\" src=\"https://camo.githubusercontent.com/60bd0d71462ad577df775b956944b191e939728a/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d50416e64726f696443686172742f6d61737465722f73637265656e73686f74732f70696563686172745f686f6c657261646975735f73706163652e706e67\" /><br/><img height=\"300px\" src=\"https://camo.githubusercontent.com/6b254aa699df7f9464967009129c3017de721b77/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d50416e64726f696443686172742f6d61737465722f73637265656e73686f74732f7363617474657263686172742e706e67\" />  \n在线演示：https://www.youtube.com/watch?v=ufaK_Hd6BpI  \n\n1. achartengine  \n强大的图表绘制工具，支持折线图、面积图、散点图、时间图、柱状图、条图、饼图、气泡图、圆环图、范围（高至低）条形图、拨号图/表、立方线图及各种图的结合  \n项目地址：https://code.google.com/p/achartengine/  \n效果图：![Renderings](http://www.achartengine.org/dimages/average_temperature.png)  \nhttp://www.achartengine.org/dimages/sales_line_and_area_chart.png  \nhttp://www.achartengine.org/dimages/temperature_range_chart.png  \nhttp://www.achartengine.org/dimages/combined_chart.png  \nhttp://www.achartengine.org/dimages/budget_chart.png  \n官网网址：http://www.achartengine.org/  \nAPP示例：Wordpress Android，Google Analytics  \n\n1. GraphView  \n绘制图表和曲线图的View，可用于Android上的曲形图、柱状图、波浪图展示  \n项目地址：https://github.com/jjoe64/GraphView  \nDemo项目：https://github.com/jjoe64/GraphView-Demos  \nAPP示例：Wordpress Android，Google Analytics  \n\n1. HoloGraphLibrary  \n绘制现状图、柱状图、饼状图  \n项目地址：https://bitbucket.org/danielnadeau/holographlibrary/src  \n文档介绍：https://bitbucket.org/danielnadeau/holographlibrary/wiki/Home  \n\n1. XCL-Charts  \nXCL-Charts基于原生的Canvas来绘制各种图表,在设计时，尽量在保证开发效率的同时，给使用者提供足够多的定制化能力。因此使用简便,同时具有相当灵活的定制能力。目前支持3D/非3D柱形图(Bar Chart)、3D/非3D饼图(Pie Chart)、堆积图(Stacked Bar Chart)、面积图(Area Chart)、 折线图(Line Chart)、曲线图(Spline Chart)、环形图(Dount Chart)、南丁格尔玫瑰图(Rose Chart)、仪表盘(Dial Chart)、刻度盘(Gauge Chart)、雷达图(Radar Chart)、圆形图(Circle Chart)等图表。其它特性还包括支持图表缩放、手势移动、动画显示效果、高密度柱形显示、图表分界定制线、多图表的混合显示及同数据源不同类型图表切换等。  \n项目地址：https://github.com/xcltapestry/XCL-Charts  \nDemo地址：https://github.com/xcltapestry/XCL-Charts/blob/master/XCL-Charts-demo/bin/XCL-Charts-demo.apk?raw=true  \n\n1. EazeGraph  \nAndroid 图表库，支持柱状图、分层柱状图、饼状图、线性图  \n项目地址：https://github.com/blackfizz/EazeGraph  \nDemo地址：https://play.google.com/store/apps/details?id=org.eazegraph.app  \n\n1. WilliamChart  \n绘制图表的库，支持LineChartView、BarChartView和StackBarChartView三中图表类型，并且支持 Android 2.2及以上的系统。  \n项目地址：https://github.com/diogobernardino/WilliamChart  \nDemo地址：https://play.google.com/store/apps/details?id=com.db.williamchartdemo  \nDemo项目：https://github.com/diogobernardino/WilliamChart/tree/master/sample  \n效果图：![Renderings](https://github.com/diogobernardino/WilliamChart/raw/master/art/linechart.gif)![Renderings](https://github.com/diogobernardino/WilliamChart/raw/master/art/barchart.gif)![Renderings](https://github.com/diogobernardino/WilliamChart/raw/master/art/stackbarchart.gif)  \n\n1. HelloCharts for Android  \n支持折线图、柱状图、饼图、气泡图、组合图；支持预览、放大缩小，滚动，部分图表支持动画；支持 Android 2.2 以上  \n项目地址：https://github.com/lecho/hellocharts-android  \nDemo地址：https://play.google.com/store/apps/details?id=lecho.lib.hellocharts.samples  \n在线演示：https://www.youtube.com/watch?v=xbSBjyjH2SY  \n  \n\n#### 十五、UI Style  \n不同样式的系统UI风格，如IOS、Bootstrap风格\n\n1. UITableView  \nios风格控件，包括Button、ListView、TableView  \n项目地址：https://github.com/thiagolocatelli/android-uitableview  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/ui-tableview-demo.apk?raw=true  \n\n1. ATableView  \nios风格控件  \n项目地址：https://github.com/dmacosta/ATableView  \nDemo地址：https://play.google.com/store/apps/details?id=com.nakardo.atableview.demo  \n\n1. Cards-UI  \n卡片式View，支持单个卡片，item为卡片的ListView  \n项目地址：https://github.com/afollestad/Cards-UI  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/cards-ui-demo.apk?raw=true  \n\n1. cardslib  \n卡片式View，支持单个卡片，item为卡片的ListView和GridView  \n项目地址：https://github.com/gabrielemariotti/cardslib  \nDemo地址：https://play.google.com/store/apps/details?id=it.gmariotti.cardslib.demo  \n\n1. Android-Bootstrap  \nBootstrap 风格的按钮  \n项目地址：https://github.com/Bearded-Hen/Android-Bootstrap  \n效果图：![Renderings](https://raw.github.com/Bearded-Hen/Android-Bootstrap/master/images/device_image.png)  \n\n1. Material Design Android Library  \nAndroid L 中 Material Design 风格的组件适配到 Android 2.2+  \n项目地址：https://github.com/navasmdc/MaterialDesignLibrary  \n\n1. Android FlatUI  \nAndroid 扁平化风格的组件，支持一些自定义样式  \n项目地址：https://github.com/eluleci/FlatUI  \n效果图：![Renderings](https://camo.githubusercontent.com/590d4a2ac322417b71f83223bd58b83903d58343/68747470733a2f2f7261772e6769746875622e636f6d2f656c756c6563692f466c617455492f6d61737465722f73616d706c652d696d616765732f73686f77636173652e706e67)  \n  \n\n#### 十六、其他  \n1. SwipeBackLayout  \n左右或向上滑动返回的Activity  \n项目地址：https://github.com/Issacw0ng/SwipeBackLayout  \nDemo地址：https://play.google.com/store/apps/details?id=me.imid.swipebacklayout.demo  \nAPP示例：知乎  \n\n1. android-styled-dialogs  \n可自定义样式的dialog，默认与Holo主题样式一致，在Android2.2以上同一样式  \n项目地址：https://github.com/inmite/android-styled-dialogs  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/styled-dialogs-demo.apk?raw=true  \n\n1. Android Sliding Up Panel  \n可拖动的View，能在当前Activity上扶起一个可拖动的Panel  \n项目地址：https://github.com/umano/AndroidSlidingUpPanel  \nDemo地址：https://play.google.com/store/apps/details?id=com.sothree.umano  \nAPP示例：Google Music精简播放栏  \n\n1. AndroidWheel  \nAndroid Wheel支持城市、多种日期时间、密码、图片  \n项目地址：https://code.google.com/p/android-wheel/  \n效果图：![Renderings](http://farm6.staticflickr.com/5532/11621528786_220c040ba5_o.jpg)  \n\n1. TableFixHeaders  \n第一列固定的Table  \n项目地址：https://github.com/InQBarna/TableFixHeaders  \nDemo地址：http://bit.ly/13buAIq  \n\n1. Inscription  \n可用于展示应用change和new feature信息  \n项目地址：https://github.com/MartinvanZ/Inscription  \n\n1. ActivityTransition  \nActivity切换动画，包括渐变、flip、某个位置进入等等  \n项目地址：https://github.com/ophilbert/ActivityTransition  \n效果图：类似桌面左右切换的各种效果，不过桌面并非用ViewPager实现而已  \n文档介绍：https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true  \n\n1. EasyAndroidAnimations  \n针对View的各种动画  \n项目地址：https://github.com/2359media/EasyAndroidAnimations  \n\n1. GlowPadBackport  \n将Android4.2的锁屏界面解锁扩展到Android1.6及1.6+  \n项目地址：https://github.com/rock3r/GlowPadBackport  \nDemo地址：https://play.google.com/store/apps/details?id=net.sebastianopoggi.samples.ui.GlowPadSample  \n效果图：![Renderings](https://lh6.ggpht.com/U070b6Lh6cVsVwx4jN-5nq0xqiB1PBzrYABPeJIEe2hZQ5UWOxc-FDUG77wADelToHA=h310-rw)  \n\n1. GlowPadView  \nAndroid4锁屏界面解锁  \n项目地址：https://github.com/nadavfima/GlowPadView  \n效果图：https://raw.github.com/nadavfima/GlowPadView/master/example.png  \n\n1. android-lockpattern  \nAndroid的图案密码解锁  \n项目地址：https://code.google.com/p/android-lockpattern/  \nDemo地址：https://play.google.com/store/apps/details?id=group.pals.android.lib.ui.lockpattern.demo  \n文档介绍：https://code.google.com/p/android-lockpattern/wiki/QuickUse  \nAPP示例：Android开机的图案密码解锁，支付宝的密码解锁  \n\n1. PatternLock  \n另一个 Android 图案解锁库  \n项目地址：https://github.com/DreaminginCodeZH/PatternLock  \nDemo 地址：https://github.com/DreaminginCodeZH/PatternLock/raw/master/dist/sample.apk  \n效果图：![Renderings](https://github.com/DreaminginCodeZH/PatternLock/raw/master/image/sample_small.png)  \nAPP示例：Android开机的图案密码解锁，支付宝的密码解锁  \n\n1. RangeBar  \n类似于SeekBar，不同的是可以选择一个范围内的值而不是单个值  \n项目地址：https://github.com/edmodo/range-bar  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/range-bar-demo.apk?raw=true  \n效果图：![Renderings](http://i.imgur.com/q85GhRjl.png)  \n\n1. ChromeView  \n利用Chromium实现的WebView，解决各个Android版本WebView不同的问题，同时利用最新Chrome代码  \n项目地址：https://github.com/pwnall/chromeview  \n\n1. android-phased-seek-bar  \n支持预先定义状态的SeekBar  \n项目地址：https://github.com/ademar111190/android-phased-seek-bar  \n效果图：![Renderings](https://raw.githubusercontent.com/ademar111190/android-phased-seek-bar/master/images/sample.gif)  \n\n1. Android Slider Preference Library  \n可添加到设置中的基于对话框的RankBar小部件  \n项目地址：https://github.com/jayschwa/AndroidSliderPreference  \n\n1. ShowcaseView library  \n用于高亮显示应用程序的特定部分，从而突出突出重点  \n项目地址：https://github.com/amlcurran/ShowcaseView  \n\n1. android-segmented-control  \nAndroid上的Segmented Controls，相当于RadioButton组  \n项目地址：https://github.com/hoang8f/android-segmented-control  \n\n1. Swipeable Cards  \n类似Tinder的卡片效果，可以加载图片并动画效果展示，向左滑动表示喜欢，向右表示不喜欢  \n项目地址：https://github.com/kikoso/Swipeable-Cards  \nDemo地址：https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo  \n\n1. EdgeEffectOverride  \n改变ScrollView, ListView, ExpandableListView, GridView, ViewPager等滚动控件滚动到边缘的颜色效果  \n项目地址：https://github.com/AndroidAlliance/EdgeEffectOverride  \n\n1. android-pinned-header-listviews  \n使ExpandListView的Group滑动到顶端时会固定不动直到另外一个Group到达顶端  \n项目地址：https://github.com/rtyley/android-pinned-header-listviews  \n\n1. AndroidSwipeLayout  \n滑动Layout，支持单个View，ListView，GridView  \n项目地址：https://github.com/daimajia/AndroidSwipeLayout  \nDemo地址：[Download Demo](https://github.com/daimajia/AndroidSwipeLayout/releases/download/v1.0.0/AndroidSwipeLayout-Demo-1.0.1-snapshot.apk)  \n效果图：![](http://ww2.sinaimg.cn/mw690/610dc034jw1ejoplapwtqg208n0e74dx.gif)  \n\n1. DynamicCardLayout  \n在Android中实现的类似Windows8的瓷片布局  \n项目地址：https://github.com/dodola/DynamicCardLayout  \n效果图：![Renderings](https://github.com/dodola/DynamicCardLayout/blob/master/pic1.png?raw=true)  \n\n1. Emoticons-Keyboard  \n带表情情符号的自定义键盘  \n项目地址：https://github.com/chiragjain/Emoticons-Keyboard  \n效果图：![Renderings](https://github.com/chiragjain/Emoticons-Keyboard/raw/master/s2.png)  \n\n1. Android Typeface Helper  \n可以帮你轻松实现自定义字体的库  \n项目地址：https://github.com/norbsoft/android-typeface-helper  \n效果图：![Renderings](https://camo.githubusercontent.com/b8e7d4f4ab84ff96a3919ea264e2a83aca46e04e/68747470733a2f2f7261772e6769746875622e636f6d2f6e6f7262736f66742f616e64726f69642d74797065666163652d68656c7065722f6d61737465722f726561646d655f73637265656e2e706e67)  \n\n1. Android-Anim-Playground  \n几个动画效果，其中第二个基于android-svg的绘制效果非常好  \n项目地址：https://github.com/Tibolte/Android-Anim-Playground  \n效果图：![Renderings](https://raw.githubusercontent.com/Tibolte/Android-Anim-Playground/master/androiddemosvg.gif)  \n\n1. NiftyDialogEffects  \n支持自定义飞入动画样式的 Dialog  \n项目地址：https://github.com/sd6352051/NiftyDialogEffects  \n效果图：![Renderings](https://camo.githubusercontent.com/456687ac516bb07f1076928d635bfddf6b90d5ec/687474703a2f2f696d67302e70682e3132362e6e65742f69433436653162586b55316631724966555a6f3939773d3d2f363539373632303632313938343031393430382e676966)  \n在线演示：http://tympanus.net/Development/ModalWindowEffects/  \n\n1. PostOffice  \n创建 Holo 及 Material Design 样式的 Dialog  \n项目地址：https://github.com/r0adkll/PostOffice  \n效果图：![Renderings](https://github.com/r0adkll/PostOffice/raw/master/images/po_2.png)  \n\n1. Swipecards  \n类似Tinder的卡片效果，可以加载图片并动画效果展示，向左滑动表示喜欢，向右表示不喜欢，根据 Kikoso's Swipeable-Cards 改造而来  \n项目地址：https://github.com/Diolor/Swipecards  \n\n1. SeekArc  \n圆形的 SeekBar  \n项目地址：https://github.com/TriggerTrap/SeekArc  \n效果图：![Renderings](https://camo.githubusercontent.com/6a5091cb39a50d4c49b8d2f08684cb260db55aa7/68747470733a2f2f7261772e6769746875622e636f6d2f6e65696c643030312f5365656b4172632f6d61737465722f7261772f6172635f7377656570732e706e67)  \n\n1. BlurDialogFragment  \n显示  DialogFragment 时背景模糊效果  \n项目地址：https://github.com/tvbarthel/BlurDialogFragment  \nDemo地址：https://play.google.com/store/apps/details?id=fr.tvbarthel.lib.blurdialogfragment.sample  \n\n1. range-seek-bar  \n随机值选取的 SeekBar  \n项目地址：https://github.com/yahoo/android-range-seek-bar  \n效果图：![Renderings](https://github.com/yahoo/android-range-seek-bar/raw/master/demo_screenshot.png)  \n\n1. MaterialRangeBar  \n可以选择一个范围内的值而不是单个值的 SeekBar，RangeBar 的 Material Design 风格适配  \n项目地址：https://github.com/oli107/material-range-bar  \n效果图：![Renderings](https://github.com/oli107/material-range-bar/raw/master/Screenshots/pin%20expand.gif)  \n\n1. MaterialList  \nMaterial Design 风格的 CardView  \n项目地址：https://github.com/dexafree/MaterialList  \nDemo地址：https://play.google.com/store/apps/details?id=com.dexafree.materiallistviewexample  \n效果图：![Renderings](https://camo.githubusercontent.com/b71bb064807465b7c9132d7f6072e2064f01fb85/687474703a2f2f692e696d6775722e636f6d2f454e78554741772e706e67)  \n \n1. road-trip  \n设置path的各种动画效果，以及如何实现复杂路径动画，类似于ios中的指纹注册界面的指纹动画效果  \n项目地址：https://github.com/romainguy/road-trip  \n效果图：![Renderings](https://github.com/zhangxin1989/RoadTrip/raw/master/screenshot/Road-Trip-200.gif)  \n\n1. dialogplus\n一个简单的Android对话框，支持不同的弹出模式\n项目地址：https://github.com/orhanobut/dialogplus  \n效果图：![Renderings](https://github.com/orhanobut/dialogplus/blob/master/images/d1.png)  \n\n\n## 第二部分 工具库  \n主要包括那些不错的开发库，包括依赖注入框架、图片缓存、网络相关、数据库ORM建模、Android公共库、Android 高版本向低版本兼容、多媒体相关及其他。    \n#### 一、依赖注入DI  \n通过依赖注入减少View、服务、资源简化初始化，事件绑定等重复繁琐工作  \n\n1. AndroidAnnotations(Code Diet)  \nandroid快速开发框架  \n项目地址：https://github.com/excilys/androidannotations  \n文档介绍：https://github.com/excilys/androidannotations/wiki  \n官网网址：http://androidannotations.org/  \n特点：(1) 依赖注入：包括view，extras，系统服务，资源等等  \n(2) 简单的线程模型，通过annotation表示方法运行在ui线程还是后台线程  \n(3) 事件绑定：通过annotation表示view的响应事件，不用在写内部类  \n(4) REST客户端：定义客户端接口，自动生成REST请求的实现  \n(5) 没有你想象的复杂：AndroidAnnotations只是在在编译时生成相应子类  \n(6) 不影响应用性能：仅50kb，在编译时完成，不会对运行时有性能影响。  \nPS：与roboguice的比较：roboguice通过运行时读取annotations进行反射，所以可能影响应用性能，而AndroidAnnotations在编译时生成子类，所以对性能没有影响  \n\n1. roboguice  \n帮你处理了很多代码异常，利用annotation使得更少的代码完成项目  \n项目地址：https://github.com/roboguice/roboguice  \n文档介绍：https://github.com/roboguice/roboguice/wiki  \n\n1. butterknife  \n利用annotation帮你快速完成View的初始化，减少代码  \n项目地址：https://github.com/JakeWharton/butterknife  \n文档介绍：http://jakewharton.github.io/butterknife/  \n\n1. Dagger  \n依赖注入，适用于Android和Java  \n项目地址：https://github.com/square/dagger  \n文档介绍：http://square.github.io/dagger/  \n  \n\n#### 二、图片缓存  \n1. Android-Universal-Image-Loader  \n图片缓存，目前使用最广泛的图片缓存，支持主流图片缓存的绝大多数特性。  \n项目地址：https://github.com/nostra13/Android-Universal-Image-Loader  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/universal-imageloader-demo.apk?raw=true  \n文档介绍：http://www.intexsoft.com/blog/item/74-universal-image-loader-part-3.html  \n\n1. picasso  \nsquare开源的图片缓存  \n项目地址：https://github.com/square/picasso  \n文档介绍：http://square.github.io/picasso/  \n特点：(1)可以自动检测adapter的重用并取消之前的下载  \n(2)图片变换  \n(3)可以加载本地资源  \n(4)可以设置占位资源  \n(5)支持debug模式  \n\n1. ImageCache  \n图片缓存，包含内存和Sdcard缓存  \n项目地址：https://github.com/Trinea/AndroidCommon  \nDemo地址：https://play.google.com/store/apps/details?id=cn.trinea.android.demo  \n文档介绍：http://www.trinea.cn/android/android-imagecache/  \n特点：(1)支持预取新图片，支持等待队列  \n(2)包含二级缓存，可自定义文件名保存规则  \n(3)可选择多种缓存算法(FIFO、LIFO、LRU、MRU、LFU、MFU等13种)或自定义缓存算法  \n(4)可方便的保存及初始化恢复数据  \n(5)支持不同类型网络处理  \n(6)可根据系统配置初始化缓存等  \n\n1. Cube ImageLoader  \n阿里巴巴一淘使用的图片加载，综合了Android-Universal-Image-Loader 和 square 等组件优点，简单易用，良好的中文文档支持  \n项目地址：https://github.com/etao-open-source/cube-sdk  \nDemo地址：https://github.com/liaohuqiu/cube-sdk/raw/master/cube-sdk-sample.apk  \n效果图：![Screen Shot](https://raw.githubusercontent.com/etao-open-source/cube-sdk/dev/screen-shot.png)\n文档介绍：http://cube-sdk.liaohuqiu.net/  \n \n1. fresco  \n一款强大的图片缓存工具，由facebook开发\n项目地址：https://github.com/facebook/fresco\n文档介绍：http://frescolib.org/  \n特点：(1) 两个内存缓存加上磁盘缓存构成了三级缓存  \n(2) 支持流式，可以类似网页上模糊渐进式显示图片  \n(3) 对多帧动画图片支持更好，如 Gif、WebP  \n(4) 更多样的显示，如圆角、进度条、点击重试、自定义对焦点  \n(5) 更多样的加载，如支持 EXIF、全面支持 WebP  \n(6) 支持 Android 2.3+ \n\n#### 三、网络相关  \n1. Asynchronous Http Client for Android  \nAndroid异步Http请求  \n项目地址：https://github.com/loopj/android-async-http  \n文档介绍：http://loopj.com/android-async-http/  \n特点：(1) 在匿名回调中处理请求结果  \n(2) 在UI线程外进行http请求  \n(3) 文件断点上传  \n(4) 智能重试  \n(5) 默认gzip压缩  \n(6) 支持解析成Json格式  \n(7) 可将Cookies持久化到SharedPreferences  \n\n1. android-query  \n异步加载，更少代码完成Android加载  \n项目地址：https://github.com/androidquery/androidquery 或 https://code.google.com/p/android-query/  \nDemo地址：https://play.google.com/store/apps/details?id=com.androidquery  \n文档介绍：https://code.google.com/p/android-query/#Why_AQuery?  \n特点：https://code.google.com/p/android-query/#Why_AQuery?  \n\n1. Async Http Client  \nJava异步Http请求  \n项目地址：https://github.com/AsyncHttpClient/async-http-client  \n文档介绍：http://sonatype.github.io/async-http-client/  \n\n1. Ion  \n支持图片、json、http post等异步请求  \n项目地址：https://github.com/koush/ion  \n文档介绍：https://github.com/koush/ion#more-examples  \n\n1. HttpCache  \nHttp缓存  \n项目地址：https://github.com/Trinea/AndroidCommon  \nDemo地址：https://play.google.com/store/apps/details?id=cn.trinea.android.demo  \n文档介绍：http://www.trinea.cn/android/android-http-cache  \n特点是：(1) 根据cache-control、expires缓存http请求  \n(2) 支持同步、异步Http请求  \n(3) 在匿名回调中处理请求结果  \n(4) 在UI线程外进行http请求  \n(5) 默认gzip压缩  \n\n1. Http Request  \n项目地址：https://github.com/kevinsawicki/http-request  \n文档介绍：https://github.com/kevinsawicki/http-request#examples  \n\n1. okhttp  \nsquare开源的http工具类  \n项目地址：https://github.com/square/okhttp  \n文档介绍：http://square.github.io/okhttp/  \n特点：(1) 支持SPDY( http://zh.wikipedia.org/wiki/SPDY )协议。SPDY协议是Google开发的基于传输控制协议的应用层协议，通过压缩，多路复用(一个TCP链接传送网页和图片等资源)和优先级来缩短加载时间。  \n(2) 如果SPDY不可用，利用连接池减少请求延迟  \n(3) Gzip压缩  \n(4) Response缓存减少不必要的请求  \n\n1. Retrofit  \nRESTFUL API设计  \n项目地址：https://github.com/square/retrofit  \n文档介绍：http://square.github.io/retrofit/  \n\n1. RoboSpice  \nAndroid异步网络请求工具，支持缓存、REST等等  \n项目地址：https://github.com/stephanenicolas/robospice  \nDemo地址：https://github.com/stephanenicolas/RoboDemo/downloads  \n  \n\n\n#### 四、数据库 orm工具包  \norm的db工具类，简化建表、查询、更新、插入、事务、索引的操作  \n\n1. greenDAO  \nAndroid Sqlite orm的db工具类  \n项目地址：https://github.com/greenrobot/greenDAO  \n文档介绍：http://greendao-orm.com/documentation/  \n官网网址：http://greendao-orm.com/  \n特点：(1) 性能佳  \n(2) 简单易用的API  \n(3) 内存小好小  \n(4) 库大小小  \n\n1. ActiveAndroid  \nAndroid Sqlite orm的db工具类  \n项目地址：https://github.com/pardom/ActiveAndroid  \n文档介绍：https://github.com/pardom/ActiveAndroid/wiki/_pages  \n\n1. Sprinkles  \nAndroid Sqlite orm的db工具类，比较显著的特点就是配合 https://github.com/square/retrofit 能保存从服务器获取的数据  \n项目地址：https://github.com/emilsjolander/sprinkles  \n文档介绍：http://emilsjolander.github.io/blog/2013/12/18/android-with-sprinkles/  \n\n1. Realm  \n移动端的数据库，适用于 Phone、Tablet、Wearable，支持 ORM，线程安全、支持连表及数据库加密，比 SQLite 性能更好  \n项目地址：https://github.com/realm/realm-java  \n文档介绍：http://realm.io/docs/java/0.72.0/  \n\n1. ormlite-android  \n项目地址：https://github.com/j256/ormlite-android  \n文档介绍：http://ormlite.com/sqlite_java_android_orm.shtml  \n\n1. Schematic  \n根据SQLite生成ContentProvider  \n项目地址：https://github.com/SimonVT/schematic  \n  \n1. DBFlow  \nAndroid SQLite ORM工具库。综合了 Active Android, Schematic, Ollie,Sprinkles等库的优点；通过注解实现，性能好；能生成ContentProvider。  \n项目地址：https://github.com/Raizlabs/DBFlow    \n文档介绍：https://github.com/Raizlabs/DBFlow#usage-docs    \n\n\n#### 五、Android公共库  \n1. Guava  \nGoogle的基于java1.6的类库集合的扩展项目，包括collections, caching, primitives support, concurrency libraries, common annotations, string processing, I/O等等. 这些高质量的API可以使你的JAVa代码更加优雅，更加简洁  \n项目地址：https://code.google.com/p/guava-libraries/  \n文档介绍：https://code.google.com/p/guava-libraries/wiki/GuavaExplained  \n\n1. Volley  \nGoogle提供的网络通信库，使得网络请求更简单、更快速  \n项目地址：https://android.googlesource.com/platform/frameworks/volley  \n文档介绍：http://commondatastorage.googleapis.com/io-2013/presentations/110%20-%20Volley-%20Easy,%20Fast%20Networking%20for%20Android.pdf  \n\n1. AndroidCommon  \nAndroid公共库  \n项目地址：https://github.com/Trinea/AndroidCommon  \nDemo地址：https://play.google.com/store/apps/details?id=cn.trinea.android.demo  \n文档介绍：http://www.trinea.cn/android/android-common-lib/  \n包括：(1)缓存(图片缓存、预取缓存、网络缓存)  \n(2) 公共View(下拉及底部加载更多ListView、底部加载更多ScrollView、滑动一页Gallery)  \n(3) Android常用工具类(网络、下载、Android资源操作、shell、文件、Json、随机数、Collection等等)  \n\n1. shipfaster  \n整合了Dagger Otto Retrofit Robolectric Picasso OkHttp，方便快速开发  \n项目地址：https://github.com/pyricau/shipfaster  \n\n1. CleanAndroidCode  \n整合了Dagger Otto AndroidAnnotations，方便快速开发  \n项目地址：https://github.com/pyricau/CleanAndroidCode  \n\n1. xUtils  \n基于Afinal，包含DbUtils、ViewUtils、HttpUtils、BitmapUtils四大模块，可用于快速开发  \n项目地址：https://github.com/wyouflf/xUtils  \n\n1. Afinal  \nAfinal是一个android的ioc，orm框架，内置了四大模块功能：FinalAcitivity,FinalBitmap,FinalDb,FinalHttp。通过finalActivity，我们可以通过注解的方式进行绑定ui和事件。通过finalBitmap，我们可以方便的加载bitmap图片，而无需考虑oom等问题。通过finalDB模块，我们一行代码就可以对android的sqlite数据库进行增删改查。通过FinalHttp模块，我们可以以ajax形式请求http数据  \n项目地址：https://github.com/yangfuhai/afinal  \n官网网址：http://www.afinal.org  \n\n1. UltimateAndroid  \nUltimateAndroid是一个快速开发Android应用的框架，框架目前主要包含的功能有View Injection,ORM,异步网络请求和图片加载，自动化脚本测试,磁盘LRU等功能.同时提供了类似于TripleDes、Webview快速设置、Md5处理、String处理,Https处理等常用工具类，还有超过100多种UI控件效果。  \n项目地址：https://github.com/cymcsg/UltimateAndroid  \n官网网址：http://blog.marshalchen.com/UltimateAndroid/  \n \n\n1. SAF  \nSAF(Simple Android Framework)是一个简单的android框架，它为开发Android app提供了基础性组件。  \n项目地址：https://github.com/fengzhizi715/SAF  \n官网网址：http://www.salesuite.cn/  \n包括：(1)Event Bus(事件总线)  \n(2) Rest Client(http的框架)  \n(3) Image Cache(图片缓存)  \n(4) Dependency Injection(依赖注入)  \n(5) Sqlite ORM(sqlite的orm)  \n(6) Router(Activity、Fragment的Router)  \n(7) Utils(各种常用的工具类) \n\n1. Barber\nCustom View 神器。通过简单的注解帮助你大大减少 Custom View 中的代码量。由于和 ButterKnife 一样使用了 Annotation Proccessor ，所以对程序性能没有影响。 \n项目地址：https://github.com/hzsweers/barber\n\n1. device-year-class  \nA library that analyzes an Android device's specifications and calculates which year the device would be considered \"high end”.(facebook开发的检测手机主流配置工具)  \n项目地址：https://github.com/facebook/device-year-class  \n\n\n#### 六、Android 高版本向低版本兼容  \n1. ActionBarSherlock  \n为Android所有版本提供统一的ActionBar，解决4.0以下ActionBar的适配问题  \n项目地址：https://github.com/JakeWharton/ActionBarSherlock  \nDemo地址：https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos  \nAPP示例：太多了。。现在连google都在用  \n\n1. Nine Old Androids  \n将Android 3.0(Honeycomb)所有动画API(ObjectAnimator ValueAnimator等)兼容到Android1.0  \n项目地址：https://github.com/JakeWharton/NineOldAndroids  \nDemo地址：https://play.google.com/store/apps/details?id=com.jakewharton.nineoldandroids.sample  \n文档介绍：http://nineoldandroids.com/  \n\n1. HoloEverywhere  \n将Android 3.0的Holo主题兼容到Android2.1++  \n项目地址：https://github.com/Prototik/HoloEverywhere  \nDemo地址：https://raw.github.com/Prototik/HoloEverywhere/repo/org/holoeverywhere/demo/2.1.0/demo-2.1.0.apk  \n文档介绍：http://android-developers.blogspot.com/2012/01/holo-everywhere.html  \n\n1. SherlockNavigationDrawer  \n将Android NavigationDrawer和ActionbarSherlock结合，解决4.0以下NavigationDrawer的适配问题  \n项目地址：https://github.com/tobykurien/SherlockNavigationDrawer  \n文档介绍：http://developer.android.com/training/implementing-navigation/nav-drawer.html  \n\n1. Notifications4EveryWhere  \n将Android 4.1的Notification兼容到Android2.2++  \n项目地址：https://github.com/youxiachai/Notifications4EveryWhere  \n\n1. Android Switch Widget Backport  \n将Android Switch和SwitchPreference的兼容到Android2.1++  \n项目地址：https://github.com/BoD/android-switch-backport  \nDemo地址：https://play.google.com/store/apps/details?id=org.jraf.android.backport.switchwidget.sample  \n文档介绍：https://github.com/BoD/android-switch-backport#using-the-switch  \n\n1. android-datepicker  \n将Android 4.0的datepicker兼容到Android2.2++  \n项目地址：https://github.com/SimonVT/android-datepicker  \n\n1. GlowPadBackport  \nAndroid 4.2的GlowPadView向后适配到API4以上  \n项目地址：https://github.com/frakbot/GlowPadBackport  \n\n1. Transitions Everywhere  \nAndroid 4.4 的 Transitions API 兼容到 Android 2.2 以上  \n项目地址：https://github.com/andkulikov/transitions-everywhere  \n  \n\n#### 七、多媒体相关  \n1. cocos2d-x  \n跨平台的2d游戏框架，支持Android、IOS、Linux、Windows等众多平台  \n项目地址：https://github.com/cocos2d/cocos2d-x  \n文档介绍：http://www.cocos2d-x.org/wiki  \n官网网址：http://www.cocos2d-x.org/  \n\n1. Vitamio  \n是一款Android与iOS平台上的全能多媒体开发框架  \n项目地址：https://github.com/yixia/VitamioBundle  \n网站介绍：http://www.vitamio.org/docs/  \n特点：(1) 全面支持硬件解码与GPU渲染  \n(2) 能够流畅播放720P甚至1080P高清MKV，FLV，MP4，MOV，TS，RMVB等常见格式的视频  \n(3) 在Android与iOS上跨平台支持 MMS, RTSP, RTMP, HLS(m3u8)等常见的多种视频流媒体协议，包括点播与直播。  \n\n1. PhotoProcessing  \n利用ndk处理图片库，支持Instafix、Ansel、Testino、XPro、Retro、BW、Sepia、Cyano、Georgia、Sahara、HDR、Rotate(旋转)、Flip(翻转)等各种特效  \n项目地址：https://github.com/lightbox/PhotoProcessing  \nDemo地址：https://github.com/Trinea/TrineaDownload/blob/master/photo-processing.apk?raw=true  \n\n1. Android StackBlur  \n图片模糊效果工具类  \n项目地址：https://github.com/kikoso/android-stackblur  \nDemo地址：https://github.com/kikoso/android-stackblur/blob/master/StackBlurDemo/bin/StackBlurDemo.apk?raw=true  \n文档介绍：https://github.com/kikoso/android-stackblur#usage  \n\n1. Bitmap Smart Clipping using OpenCV  \n图片智能裁剪保留重要部分显示  \n项目地址：https://github.com/beartung/tclip-android  \n利用淘宝的 http://code.taobao.org/p/tclip/ 库完成  \n一淘玩客正在使用的图片裁剪，自动识别图片中的重要区域，并且在图片裁剪时保留重要区域  \n特点：(1). 能进行人脸识别。图片中有人脸，将自动视为人脸区域为重要区域，将不会被裁剪掉  \n(2).自动其它重要区域。如果图片中未识别出人脸，则会根据特征分布计算出重区域  \n\n1. Cropper  \n图片局部剪切工具，可触摸控制选择区域或旋转  \n项目地址：https://github.com/edmodo/cropper  \n效果图：![Renderings](https://github-camo.global.ssl.fastly.net/e4fde77bf41d4a60b234b4e268e5cfa8c17d9b6f/687474703a2f2f692e696d6775722e636f6d2f334668735467666c2e6a7067)  \n文档介绍：https://github.com/edmodo/cropper/wiki  \n\n1. android-crop  \n图片裁剪Activity  \n项目地址：https://github.com/jdamcd/android-crop  \n效果图：![Renderings](https://github.com/jdamcd/android-crop/raw/master/screenshot.png)  \n\n1. TileView  \n可分块显示大图，支持2D拖动、双击、双指放大、双指捏合  \n项目地址：https://github.com/moagrius/TileView  \nDemo地址：http://moagrius.github.io/TileView/TileViewDemo.apk  \n\n1. BlurEffectForAndroidDesign  \n图片模糊效果  \n项目地址：https://github.com/PomepuyN/BlurEffectForAndroidDesign  \n\n1. android-eye  \nPC端网页查看同一局域网内的手机摄像头内容，可以用来监控哦  \n项目地址：https://github.com/Teaonly/android-eye  \nDemo地址：https://play.google.com/store/apps/details?id=teaonly.droideye  \n\n1. libpng for Android  \nPNG图片的jni库，支持几乎png的所有特性  \n项目地址：https://github.com/julienr/libpng-android  \n文档介绍：http://www.libpng.org/pub/png/libpng.html  \n\n1. android-gpuimage  \n基于GPU的图片滤镜  \n项目地址：https://github.com/CyberAgent/android-gpuimage  \n\n1. AndroidFaceCropper  \n图片脸部自动识别，将识别后的局部图片返回  \n项目地址：https://github.com/lafosca/AndroidFaceCropper  \n\n1. Android Video Crop  \n利用TextureView播放和剪切视频，类似ImageView.setScaleType  \n项目地址：https://github.com/dmytrodanylyk/android-video-crop  \nDemo地址：https://github.com/lafosca/AndroidFaceCropper/releases/download/1.0/FaceCropper-sample-debug-unaligned.apk  \n\n1. svg-android  \nAndroid Svg矢量图形支持  \n项目地址：https://github.com/japgolly/svg-android https://github.com/japgolly/svg-android  \n\n1. Android Visualizer  \n从Android MediaPlayer获得音频，然后像iTunes及WinAmp一样展示音轨  \n项目地址：https://github.com/felixpalmer/android-visualizer  \n\n1. ExoPlayer  \n包括仪表板和SmoothStreaming自适应回放，缓存持久化和自定义渲染器，方便自定义和扩展，并且可以通过应用商店更新  \n项目地址：https://github.com/google/ExoPlayer  \n\n1. DanmakuFlameMaster  \nandroid上开源弹幕解析绘制引擎项目  \n项目地址：https://github.com/ctiao/DanmakuFlameMaster  \n  \n\n#### 八、事件总线(订阅者模式)  \n通过发布/订阅事件解耦事件发送和接受，从而简化应用程序组件(Activities, Fragments及后台线程)之间的通信  \n\n1. EventBus  \ngreenrobot的开源项目  \n项目地址：https://github.com/greenrobot/EventBus  \n文档介绍：https://github.com/greenrobot/EventBus#general-usage-and-api  \n特点：(1) 支持在不同类型的线程中处理订阅，包括发布所在线程，UI线程、单一后台线程、异步线程  \n(2) 支持事件优先级定义，支持优先级高的订阅者取消事件继续传递，支持粘性事件，是不是跟系统的有序广播、粘性广播很像啊  \n(3) 不是基于annotations  \n(4) 性能更优  \n(5) 体积小  \n(6) 支持单例创建或创建多个对象  \n(7) 支持根据事件类型订阅  \n\n1. Otto  \nSquare的开源项目，基于Guava的Android优化  \n项目地址：https://github.com/square/otto  \n文档介绍：http://square.github.io/otto/  \n[EventBus与Otto的功能及性能对比文档](https://github.com/greenrobot/EventBus#comparison-with-squares-otto)  \n[EventBus与Otto性能对比Demo Apk](https://play.google.com/store/apps/details?id=de.greenrobot.eventperf)  \n  \n\n#### 九、传感器  \n1. Great Android Sensing Toolkit  \nAndroid感应器工具包，包含示例及使用过程中可能需要的算法  \n项目地址：https://github.com/gast-lib/gast-lib  \nDemo地址：https://play.google.com/store/apps/details?id=root.gast.playground  \n文档介绍：https://github.com/gast-lib/gast-lib#documentation  \n\n1. SensorManager  \nAndroid传感器管理  \n项目地址：https://github.com/nlathia/SensorManager  \n文档介绍：https://docs.google.com/document/d/1TqThJULb-4e6TGb1gdkAaPCfyuXStjJpbnt7a0OZ9OE/edit  \n\n1. GPSLogger  \n记录GPS信息  \n项目地址：https://github.com/mendhak/gpslogger  \nDemo地址：https://play.google.com/store/apps/details?id=com.mendhak.gpslogger  \n文档介绍：http://code.mendhak.com/gpslogger/  \n\n1. Pedometer  \n计步器，使用硬件计步感应器  \n项目地址：https://github.com/j4velin/Pedometer  \n\n1. leapcast  \nChromeCast模拟器的App  \n项目地址：https://github.com/dz0ny/leapcast  \n\n1. Arduino-Communicator  \n与Arduino通信的App  \n项目地址：https://github.com/jeppsson/Arduino-Communicator  \n\n1. android-pedometer  \nAndroid计步器  \n项目地址：https://github.com/bagilevi/android-pedometer  \nDemo地址：http://pedometer.googlecode.com/files/Pedometer-1.4.apk  \n\n1. OwnTracks for Android  \n自己的轨迹记录  \n项目地址：https://github.com/owntracks/android  \n\n1. Shake Detector library for Android  \nAndroid手机震动摇晃检测库，提供供UI线程调用的回调接口  \n项目地址：https://github.com/tbouron/ShakeDetector  \nDemo地址：https://play.google.com/store/apps/details?id=com.github.tbouron.shakedetector.example  \n\n1. Android heart rate monitor  \nAndroid心跳检测  \n项目地址：https://github.com/phishman3579/android-heart-rate-monitor  \n\n1. Bluetooth LE Library for Android  \n蓝牙源信息，包括宝库Mac、更新时间、RSSI、UUID、信号源距离、影响范围等信息  \n项目地址：https://github.com/alt236/Bluetooth-LE-Library---Android  \nDemo地址：https://play.google.com/store/apps/details?id=uk.co.alt236.btlescan  \n\n1. farebot  \n通过NFC 从公交卡中读取数据的一个应用  \n项目地址：https://github.com/codebutler/farebot  \n  \n\n#### 十、安全  \n1. SQLCipher  \nSqlite加密工具  \n项目地址：https://github.com/sqlcipher/sqlcipher  \n文档介绍：http://sqlcipher.net/sqlcipher-for-android/  \n\n1. Conceal  \n快速高效的进行文件加密解密  \n项目地址：https://github.com/facebook/conceal  \n文档介绍：https://github.com/facebook/conceal#usage  \n\n1. Android-PasscodeLock  \n应用锁，每次启动或从任何Activity启动应用都需要输入四位数字的密码方可进入  \n项目地址：https://github.com/wordpress-mobile/Android-PasscodeLock  \nDemo地址：https://play.google.com/store/apps/details?id=org.wordpress.android  \nAPP示例：Wordpress Android，支付宝，挖财  \n\n1. GlowPadBackport  \n将Android4.2的锁屏界面解锁扩展到Android1.6及1.6+  \n项目地址：https://github.com/rock3r/GlowPadBackport  \nDemo地址：https://play.google.com/store/apps/details?id=net.sebastianopoggi.samples.ui.GlowPadSample  \n效果图：![Renderings](https://lh6.ggpht.com/U070b6Lh6cVsVwx4jN-5nq0xqiB1PBzrYABPeJIEe2hZQ5UWOxc-FDUG77wADelToHA=h310-rw)  \n\n1. GlowPadView  \nAndroid 4锁屏界面解锁  \n项目地址：https://github.com/nadavfima/GlowPadView  \n效果图：https://raw.github.com/nadavfima/GlowPadView/master/example.png  \n\n1. android-lockpattern  \nAndroid的图案密码解锁  \n项目地址：https://code.google.com/p/android-lockpattern/  \nDemo地址：https://play.google.com/store/apps/details?id=group.pals.android.lib.ui.lockpattern.demo  \n文档介绍：https://code.google.com/p/android-lockpattern/wiki/QuickUse  \n\n1. Android-InsecureBank  \n关于 Android 不安全性的示例  \n项目地址：https://github.com/dineshshetty/Android-InsecureBankv2  \n  \n\n#### 十一、插件化  \n更多见：[Android 插件化作用、概念以及不错的资料(包括开源项目)和解决方案](http://www.trinea.cn/android/android-plugin/) \n\n1. dynamic-load-apk  \nAndroid 动态加载Apk，热部署，利用 ClassLoader 以及 Activity 代理的方式解决  \n项目地址：https://github.com/singwhatiwanna/dynamic-load-apk  \n文档介绍：http://blog.csdn.net/singwhatiwanna/article/details/22597587  \n\n1. Android Dynamic Loader  \n点评的实现方式，和上面不同的是：他不是用代理 Activity 的方式实现而是用 Fragment 以及 Schema 的方式实现  \n项目地址：https://github.com/mmin18/AndroidDynamicLoader  \nDemo地址：https://github.com/mmin18/AndroidDynamicLoader/raw/master/host.apk  \n\n1. xCombine  \nAndroid App插件式插件开发，插件必须先安装，更推荐看上面两个开源项目  \n项目地址：https://github.com/wyouflf/xCombine  \n文档介绍：http://my.oschina.net/u/1171837/blog/155377  \n\n1. Android Plugin Framework  \nAndroid插件式开发，开放的源码目前不完整  \n项目地址：https://github.com/umeng/apf  \n\n1. multidex  \n安装多 dex 的 classloader  \n项目地址：https://github.com/casidiablo/multidex  \n\n1. ANR-WatchDog  \nAndroid ANR 监听，通过监听自己的 UI Thread 是否被执行确定是否发生了 ANR，并可以设置相关事件  \n项目地址：https://github.com/SalomonBrys/ANR-WatchDog  \n  \n\n#### 十二、文件  \n对不同文档类型的处理，包括PDF、Word、EPub、Html、Zip等\n\n1. purePDF  \n允许从任何运行的SWF文件读取和创建PDF文档  \n项目地址：https://github.com/sephiroth74/purePDF  \n\n1. android-pdfview  \n快速解析pdf的view，默认支持手势缩放和相关动画  \n项目地址：https://github.com/JoanZapata/android-pdfview  \n\n1. Office 365 SDK for Android Preview  \n可支持Microsoft SharePoint Lists, Microsoft SharePoint Files, Microsoft Exchange Calendar, Microsoft Exchange Contacts, Microsoft Exchange Mail  \n项目地址：https://github.com/OfficeDev/Office-365-SDK-for-Android  \n\n1. OpenSpritz-Android  \nEPub阅读器  \n项目地址：https://github.com/OnlyInAmerica/OpenSpritz-Android  \n\n1. jsoup  \n一个解析html的java库，可方便的提取和操作数据  \n项目地址：https://github.com/jhy/jsoup  \n官网网址：http://jsoup.org/  \n作用：(1) 从一个url、文件或string获得html并解析  \n(2) 利用dom遍历或css选择器查找、提取数据  \n(3) 操作html元素  \n(4) 根据白名单去除用于提交的非法数据防止xss攻击  \n(5) 输出整齐的html  \n\n1. ZIP  \njava压缩和解压库  \n项目地址：https://github.com/zeroturnaround/zt-zip  \n文档介绍：https://github.com/zeroturnaround/zt-zip#examples  \n作用：(1) 解压和压缩，并支持文件夹内递归操作  \n(2) 支持包含和排除某些元素  \n(3) 支持重命名元素  \n(4) 支持遍历zip包内容  \n(5) 比较两个zip包等功能  \n  \n\n#### 十三、其他  \n1. Salvage view  \n带View缓存的Viewpager PagerAdapter，很方便使用  \n项目地址：https://github.com/JakeWharton/salvage  \n\n1. Android Priority Job Queue  \nAndroid后台任务队列  \n项目地址：https://github.com/path/android-priority-jobqueue  \n文档介绍：https://github.com/path/android-priority-jobqueue#getting-started  \n\n1. Cobub Razor  \n开源的mobile行为分析系统，包括web端、android端，支持ios和window phone  \n项目地址：https://github.com/cobub/razor  \nDemo地址：http://demo.cobub.com/razor  \n官网网址：http://dev.cobub.com/  \n\n1. Countly  \nAndroid移动端数据采集分析系统  \n项目地址：https://github.com/Countly/countly-sdk-android  \n官网网址：https://count.ly/  \n\n1. aFileChooser  \n文件选择器，可内嵌到程序中，而无需使用系统或三方文件选择器。  \n项目地址：https://github.com/iPaulPro/aFileChooser  \n\n1. androidpn  \n基于xmpp协议的消息推送解决方案，包括服务器端和android端。  \n项目地址：https://github.com/dannytiehui/androidpn  \n\n1. Bolts  \nAndroid的异步编程模式  \n项目地址：https://github.com/BoltsFramework/Bolts-Android/  \n与AsyncTask比较：(1) 使用的是无大小限制的线程池  \n(2) 任务可组合可级联，防止了代码耦合  \n\n1. CastCompanionLibrary-android  \n使Android程序中更快的接入Google Cast  \n项目地址：https://github.com/googlecast/CastCompanionLibrary-android  \n文档介绍：https://developers.google.com/cast/  \n\n1. CastVideos-android  \n从Android设备分享Video通过Google Cast  \n项目地址：https://github.com/googlecast/CastVideos-android  \n文档介绍：https://developers.google.com/cast/  \n\n1. Uninstall_Statics  \nAndroid应用自身被卸载监听及打开浏览器等反馈功能实现  \n项目地址：https://github.com/sevenler/Uninstall_Statics  \n文档介绍：http://www.cnblogs.com/zealotrouge/p/3157126.html  http://www.cnblogs.com/zealotrouge/p/3159772.html  \n\n1. Memento  \n保证在系统配置改变时，Activity中的某些数据可以简单安全的保持不变  \n项目地址：https://github.com/mttkay/memento  \n文档介绍：https://github.com/mttkay/memento#usage  \n\n1. FreeFlow  \n布局引擎，更简单的创建自定义布局，并且当数据和布局改变时更美观的过渡动画  \n项目地址：https://github.com/Comcast/FreeFlow  \nDemo地址：https://github.com/Comcast/FreeFlow/releases  \n\n1. Android Gesture Detectors Framework  \nAndroid手势框架，支持双指旋转、移动、平移、缩放等  \n项目地址：https://github.com/Almeros/android-gesture-detectors  \n\n1. Mapbox Android SDK  \nAndroid Map的替代版  \n项目地址：https://github.com/mapbox/mapbox-android-sdk  \n\n1. Activity animation  \nActivity跳转动画，支持各个方向波浪的效果  \n项目地址：https://github.com/flavienlaurent/activityanimation  \n在线演示：https://www.youtube.com/watch?v=-E0sc6w_Jck  \n\n1. KryoNet  \n通过NIO提供客户端和服务器端TCP/UDP网络传输的Java库  \n项目地址：https://github.com/EsotericSoftware/kryonet  \n\n1. Rebound  \n一个模仿弹簧反弹的Java库，可用于创建动画  \n项目地址：https://github.com/facebook/rebound  \n\n1. Android Social Networks  \n社交网络接入统一管理器，可方便的从Twitter, LinkedIn, Facebook, Google Plus登陆、获得个人信息、发送消息、发送专篇、添加或删除好友  \n项目地址：https://github.com/antonkrasov/AndroidSocialNetworks  \nDemo地址：https://play.google.com/store/apps/details?id=com.github.androidsocialnetworks.apidemos  \n\n1. SmartAppUpdates  \nAndroid App 增量升级，包含前后端方案、Demo、以及 so 库，可用于商店或大体积 App 差分升级  \n项目地址：https://github.com/cundong/SmartAppUpdates  \n\n1. Magnet  \n创建类似 Facebook 聊天桌面悬浮窗的效果  \n项目地址：https://github.com/premnirmal/Magnet  \n\n1. Parceler  \n通过注解及工具类自动完成实体类 Parcelable及值传递  \n项目地址：https://github.com/johncarl81/parceler  \n\n1. AcDisplay  \n将 Android 的通知都集中到锁屏显示  \n项目地址：https://github.com/AChep/AcDisplay  \nDemo地址：https://play.google.com/store/apps/details?id=com.achep.acdisplay  \n\n1. QrCodeScan  \nZXing和ZBar结合的二维码扫描项目，提高了扫描效率  \n项目地址：https://github.com/SkillCollege/QrCodeScan  \n效果图：![QrCodeScan](http://www.eoeandroid.com/data/attachment/forum/201405/09/124538vteuz4leptgg1te6.png)  \n\n1. Android-ScreenShot  \n实现android系统截屏功能  \n项目地址：https://github.com/Android-ScreenShot/AndroidScreenShotService  \n文档介绍：http://blog.csdn.net/buptgshengod/article/details/39155979  \n\n1. card.io SDK for Android  \n信用卡扫描 Android SDK  \n项目地址：https://github.com/card-io/card.io-Android-SDK  \nDemo项目：https://github.com/card-io/card.io-Android-SDK/tree/master/SampleApp  \n\n1. ASNE  \nTwitter, Facebook, Google Plus, LinkedIn, Instagram, Vkontakte, Odnoklassniki 的集成库，包括他们的大多数功能  \n项目地址：https://github.com/gorbin/ASNE  \nDemo地址：https://play.google.com/store/apps/details?id=com.gorbin.androidsocialnetworksextended.asne  \n\n1. Android Signature Pad  \nAndroid 自定义的签名 View，可自定义笔颜色和大小  \n项目地址：https://github.com/gcacace/android-signaturepad  \nDemo项目：https://github.com/gcacace/android-signaturepad/tree/master/SignaturePad-Example  \n\n1. Teleport  \nAndroid Wear 数据同步和消息传送库  \n项目地址：https://github.com/Mariuxtheone/Teleport  \n\n1. DebugLog  \n可以帮你创建更简单和更容易理解的调试日志，能够友好的显示调试信息所在类和函数。  \n项目地址：https://github.com/MustafaFerhan/DebugLog  \n效果图：![DebugLog](https://camo.githubusercontent.com/37deffede9f9b185886da48e96a4829ebd407260/68747470733a2f2f7261772e6769746875622e636f6d2f4d75737461666146657268616e2f44656275674c6f672f6d61737465722f44656275674c6f672d44656d6f2f6173736574732f7373322e6a7067) \n  \n1. Logger  \n简单、美观而且十分强大的Android日志工具  \n项目地址：https://github.com/orhanobut/logger  \nDemo地址：https://github.com/orhanobut/logger/tree/master/app  \n效果图：![Renderings](https://github.com/orhanobut/logger/blob/master/images/description.png)  \n\n\n## 第三部分 优秀项目  \n主要介绍那些Android还不错的完整项目，目前包含的项目主要依据是项目有意思或项目分层规范比较好。  \nLinux  \n项目地址：https://github.com/torvalds/linux  \nAndroid  \n项目地址：https://android.googlesource.com/ 或 https://github.com/android  \n以上两个项目，不解释  \n\n(1) ZXing  \n二维码扫描工具  \n项目地址：https://github.com/zxing/zxing 或 https://code.google.com/p/zxing/  \nAPK地址：https://play.google.com/store/apps/details?id=com.google.zxing.client.android  \nPS：现在市面上很多应用的二维码扫描功能都是从这个修改而来  \n\n(2) photup  \n编辑机批量上传照片到facebook上  \n项目地址：https://github.com/chrisbanes/photup  \nAPK地址：https://play.google.com/store/apps/details?id=uk.co.senab.photup  \nPS：代码分包合理，很棒。不过这个项目依赖的开源项目比较多，比较难编译  \n  \n(3) github-android  \nGithub的Android客户端项目  \n项目地址：https://github.com/github/android  \nAPK地址：https://play.google.com/store/apps/details?id=com.github.mobile  \n\n(4) Notes  \nMIUI便签  \n项目地址：https://github.com/MiCode/Notes  \nAPK地址：https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true  \nPS：项目分包比较合理，相比较miui的文件管理器https://github.com/MiCode/FileExplorer 代码规范较好得多  \n\n(5) weicuiyuan  \n四次元-新浪微博客户端  \n项目地址：https://github.com/qii/weiciyuan  \nAPK地址：https://play.google.com/store/apps/details?id=org.qii.weiciyuan  \n\n(6) gnucash-android  \n一个记账理财软件  \n项目地址：https://github.com/codinguser/gnucash-android  \nAPK地址：http://play.google.com/store/apps/details?id=org.gnucash.android  \n\n(7) AntennaPod  \n支持rss订阅、音乐订阅  \n项目地址：https://github.com/danieloeh/AntennaPod  \nAPK地址：https://play.google.com/store/apps/details?id=de.danoeh.antennapod  \n\n(8) ChaseWhisplyProject  \n打鬼游戏  \n项目地址：https://github.com/tvbarthel/ChaseWhisplyProject  \nAPK地址：https://play.google.com/store/apps/details?id=fr.tvbarthel.games.chasewhisply  \n\n(9) Tweet Lanes  \n功能完整的Twitter客户端  \n项目地址：https://github.com/chrislacy/TweetLanes  \nAPK地址：https://play.google.com/store/apps/details?id=com.tweetlanes.android  \n\n(10) Financius  \n简单易用的记账程序  \n项目地址：https://github.com/mvarnagiris/Financius  \nAPK地址：https://play.google.com/store/apps/details?id=com.code44.finance  \n\n(11) todo.txt-android  \ntodo.txt的官方Android应用  \n项目地址：https://github.com/ginatrapani/todo.txt-android  \nAPK地址：https://play.google.com/store/apps/details?id=com.todotxt.todotxttouch  \n\n(12) simpletask  \n基于todo.txt官方应用的另一个客户端  \n项目地址：https://github.com/mpcjanssen/simpletask-android  \nAPK地址：https://play.google.com/store/apps/details?id=nl.mpcjanssen.todotxtholo  \n\n(13) Muzei Live Wallpaper  \n定时更换桌面精美壁纸  \n项目地址：https://github.com/romannurik/muzei  \nAPK地址：https://play.google.com/store/apps/details?id=net.nurik.roman.muzei  \n\n(14) Scanbook  \n扫描搜索查询图书信息  \n项目地址：https://github.com/JayFang1993/ScanBook        \nAPK地址：http://www.wandoujia.com/apps/com.scanbook  \n\n(14) iosched\nThe Google I/O 2014 Android App  \n项目地址：https://github.com/google/iosched  \nAPK地址：https://play.google.com/store/apps/details?id=com.google.samples.apps.iosched\n效果图: ![iosched](https://github.com/google/iosched/raw/master/art/hero.png)\n\n## 第四部分 开发工具及测试工具  \n主要介绍和Android开发工具和测试工具相关的开源项目。    \n#### 一、开发效率工具  \n1. Parceler  \n通过注解及工具类自动完成实体类 Parcelable及值传递  \n项目地址：https://github.com/johncarl81/parceler  \n\n1. Json2Java  \n根据JSon数据自动生成对应的Java实体类，还支持Parcel、Gson Annotations对应代码自动生成。期待后续的提取父类以及多url构建整个工程的功能  \n项目地址：https://github.com/jonfhancock/JsonToJava  \n在线演示：http://jsontojava.appspot.com/  \n\n1. IntelliJ Plugin for Android Parcelable boilerplate code generation  \nAndroid studio插件，生成Parcelable代码  \n项目地址：https://github.com/mcharmas/android-parcelable-intellij-plugin  \n效果图：![Holo Colors Idea](https://github.com/mcharmas/android-parcelable-intellij-plugin/raw/master/screenshot.png)  \n\n1. Android Holo Colors IntelliJ Plugin  \nAndroid studio插件，生成holo样式9 patch图片  \n项目地址：https://github.com/jeromevdl/android-holo-colors-idea-plugin  \n效果图：![Holo Colors Idea](https://raw.github.com/jeromevdl/android-holo-colors-idea-plugin/master/other/holocolorsidea.png)  \n\n1. Android Drawable Factory  \n用于生成各个分辨率的图片  \n项目地址：https://github.com/tizionario/AndroidDrawableFactory  \n效果图：![Android Drawable Factory](https://github-camo.global.ssl.fastly.net/5c3844b345a9779296f996490070dab0bfc9dbf5/68747470733a2f2f646c2e64726f70626f7875736572636f6e74656e742e636f6d2f752f32363636343637352f416e64726f69644472617761626c65466163746f72792f312e706e67)  \n\n1. SelectorChapek for Android  \nAndroid Studio插件，可根据固定文件名格式资源自动生成drawable selectors xml文件。  \n项目地址：https://github.com/inmite/android-selector-chapek  \n\n1. Android Action Bar Style Generator  \nAndroid ActionBar样式生成器，可在线选择ActionBar样式自动生成所需要的图片资源及xml文件  \n项目地址：https://github.com/jgilfelt/android-actionbarstylegenerator  \n在线演示：http://jgilfelt.github.io/android-actionbarstylegenerator/  \n\n1. ButterKnifeZelezny  \n用于快速生成[ButterKnife](https://github.com/JakeWharton/butterknife)View注入代码的Android Studio/IDEA插件  \n项目地址：https://github.com/inmite/android-butterknife-zelezny  \n\n1. RoboCoP  \n利用Gradle task根据固定格式的json文件生成ContentProvider  \n项目地址：https://github.com/mediarain/RoboCoP  \n\n1. appiconsizes  \n用于生成各个分辨率的图片  \n项目地址：http://www.appiconsizes.com/  \n\n1. Gradle Retrolambda Plugin  \n[Retrolambda](https://github.com/orfjackal/retrolambda)是将Java8的Lambdas应用于Java7的工具，本项目是Gradle插件，通过Retrolambda从而使Java或Android项目用Java8的Lambdas编写，将编译后的字节码转换为Java6和7的字节码从而正常运行  \n项目地址：https://github.com/evant/gradle-retrolambda  \n\n1. Dagger IntelliJ Plugin  \ndagger的intellij插件  \n项目地址：https://github.com/square/dagger-intellij-plugin  \n\n1. Android Gen Drawable Maven plugin  \n在编译时根据SVG描述文件生成不同分辨率的jpg、png或点9图片  \n项目地址：https://github.com/avianey/androidgendrawable-maven-plugin  \n\n1. Android Asset Studio  \n各种Android资源自动生成器，包括启动图标、ActionBar图标、通知栏图标、点9等  \n项目地址：https://github.com/romannurik/AndroidAssetStudio  \n在线演示：http://romannurik.github.io/AndroidAssetStudio/  \n\n1. jsonschema2pojo  \n根据Json内容生成java对象，支持jackjson和gson  \n项目地址：https://github.com/joelittlejohn/jsonschema2pojo  \n在线演示：http://www.jsonschema2pojo.org/  \n\n1. 9-Patch-Resizer  \n自动生成 png 及点 9 图片的不同分辨率版本  \n项目地址：https://github.com/redwarp/9-Patch-Resizer  \n\n1. AndroidLocalizationer  \n可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件  \n项目地址：https://github.com/westlinkin/AndroidLocalizationer  \n  \n\n#### 二、开发自测相关  \n1. Quality Tools for Android  \nAndroid测试及自测工具集合和示例  \n项目地址：https://github.com/stephanenicolas/Quality-Tools-for-Android  \n\n1. android-test-kit  \nGoogle的Android测试工具  \n包括GoogleInstrumentationTestRunner(增强版的InstrumentationTestRunner)和Espresso(用于快速写出可靠测试用例的API)  \n项目地址：https://code.google.com/p/android-test-kit/  \n文档介绍：https://code.google.com/p/android-test-kit/w/list  \n\n1. robolectric  \n测试用例编写框架  \n项目地址：https://github.com/robolectric/robolectric  \nDemo地址：https://github.com/robolectric/robolectricsample  \n文档介绍：http://robolectric.org/  \n特点：(1). 不需要模拟器在一般JVM就可以运行测试用例  \n(2). 能完成在真机上的大部分测试包括感应器  \n其他的测试用例及相关模块Mock可见：[android-mock](https://code.google.com/p/android-mock/), [mockito](https://code.google.com/p/mockito/), [easy-mock](https://github.com/easymock/easymock)  \n\n1. Android FEST  \n提供一些列方便的断言，可用于提高编写Android自测代码效率  \n项目地址：https://github.com/square/fest-android  \n\n1. BoundBox  \n可用于测试类各种访问权限的属性、方法。实际是通过BoundBox这个annotation生成一个属性和方法都是public权限的中间类并对此类进行测试完成的  \n项目地址：https://github.com/stephanenicolas/boundbox  \n\n1. Hugo  \n用于打印函数信息及执行时间的工具，仅在debug模式生效  \n项目地址：https://github.com/JakeWharton/hugo  \n\n1. scalpel  \n在应用下面添加一层用于界面调试，待详细补充 // TODO  \n项目地址：https://github.com/JakeWharton/scalpel  \n\n1. Android Screenshot library  \nAndroid截图工具类，用于在持续集成时截图  \n项目地址：https://github.com/rtyley/android-screenshot-lib  \n\n1. sonar-android-lint-plugin  \n将android lint的错误在sonar中展现  \n项目地址：https://github.com/SonarCommunity/sonar-android  \n  \n\n#### 三、测试工具  \n1. Spoon  \n可用于android不同机型设备自动化测试，能将应用apk和测试apk运行在不同机器上并生成相应测试报告。  \n项目地址：https://github.com/square/spoon  \n\n1. Tencent APT  \nAPT是腾讯开源的一个Android平台高效性能测试组件，提供丰富实用的功能，适用于开发自测、定位性能瓶颈；测试人员完成性能基准测试、竞品对比测试  \n项目地址：https://github.com/stormzhang/APT  \n\n1. Emmagee  \n网易开源的性能测试工具，包括CPU、内存、网络流量、启动时间、电池状态等  \n项目地址：https://github.com/NetEase/Emmagee  \n\n1. Android py-uiautomator  \npy-uiautomator是一个对Android uiautomator用python进行封装的测试框架.  \n项目地址：https://github.com/xiaocong/uiautomator  \n \n1. Augmented Traffic Control\nAugmented Traffic Control: A tool to simulate network conditions(模拟网络状况)  \n模拟网络状况，包括带宽、时延抖动、丢包率、错包率、包重排率  \n项目地址：https://github.com/facebook/augmented-traffic-control   \n\n1. stetho  \nStetho is a debug bridge for Android applications, enabling the powerful Chrome Developer Tools and much more. 使用chrome来调试android设备  \n项目地址：https://github.com/facebook/stetho  \n\n#### 四、开发及编译环境  \n1. Buck  \nfacebook开源的Android编译工具，效率是ant的两倍。主要优点在于：  \n(1) 加快编译速度，通过并行利用多核cpu和跟踪不变资源减少增量编译时间实现  \n(2) 可以在编译系统中生成编译规则而无须另外的系统生成编译规则文件  \n(3) 编译同时可生成单元测试结果  \n(4) 既可用于IDE编译也可用于持续集成编译  \n(5) facebook持续优化中  \n项目地址：https://github.com/facebook/buck  \n\n1. Android Maven Plugin  \nAndroid Maven插件，可用于对android三方依赖进行管理。在J2EE开发中，maven是非常成熟的依赖库管理工具，可统一管理依赖库。  \n项目地址：https://github.com/jayway/maven-android-plugin  \n\n1. umeng-muti-channel-build-tool  \n渠道打包工具  \n项目地址：https://github.com/umeng/umeng-muti-channel-build-tool  \n另可参见Google的构建系统Gradle：http://tools.android.com/tech-docs/new-build-system/user-guide  \n\n1. Genymotion  \n目前最好用最快的android模拟器  \n项目地址：http://www.genymotion.com/  \nAndroid studio集成控件： http://plugins.jetbrains.com/plugin/7269?pr=idea  \nCyril Mottier推荐：http://cyrilmottier.com/2013/06/27/a-productive-android-development-environment/  \n\n1. gradle-mvn-push  \n方便的将Gradle的Artifacts上传到Maven仓库  \n项目地址：https://github.com/chrisbanes/gradle-mvn-push  \n文档介绍：https://github.com/chrisbanes/gradle-mvn-push#usage  \n\n1. Android Emulator Plugin for Jenkins  \nAndroid模拟器 jenkins插件，用于Jenkins做持续集成时跑模拟器测试  \n项目地址：https://github.com/jenkinsci/android-emulator-plugin  \n\n1. Android Maven Plugin  \n管理应用所需要的依赖库。包括的构建工具有Maven、Gradle、ant、sbt  \n项目地址：https://github.com/mosabua/maven-android-sdk-deployer  \n\n1. SDK Manager Plugin  \n下载和管理Android SDK的Gradle插件  \n项目地址：https://github.com/JakeWharton/sdk-manager-plugin  \n\n1. Gradle Protobuf Plugin  \n将.proto文件转换成Java文件的gradle插件  \n项目地址：https://github.com/andrewkroh/gradle-protobuf-plugin  \n\n1. ChromeADB  \nChrome 的 Adb 插件，当登录后，能看到所有连接的设备并操作，可以看应用、进程、内存及磁盘使用情况等  \n项目地址：https://github.com/importre/chromeadb  \n  \n\n#### 五、其他  \n1. ViewServer  \n允许app运行在任何手机上都可以用HierarchyViewer查看  \n项目地址：https://github.com/romainguy/ViewServer  \n\n1. GridWichterle for Android  \n在整个系统上显示一个grid，用来帮助查看应用布局及使得布局更美观，可设置grid网格大小和颜色，android推荐48dp和8dp，可见 Android Design Guidelines – Metrics and Grids，比起hierarchyviewer相差甚远，不过偶尔可用来作为布局查看工具。  \n项目地址：https://github.com/inmite/android-grid-wichterle  \nDemo地址：https://play.google.com/store/apps/details?id=eu.inmite.android.gridwichterle  \n\n1. Catlog  \n手机端log查看工具，支持不同颜色显示、关键字过滤、级别过滤、进程id过滤、录制功能等  \n项目地址：https://github.com/nolanlawson/Catlog  \n在线演示：https://play.google.com/store/apps/details?id=com.nolanlawson.logcat  \n\n1. PID Cat  \n根据package查看logcat日志  \n项目地址：https://github.com/JakeWharton/pidcat  \n\n1. ACRA  \n应用崩溃信息日志上报到GoogleDoc工具，网页版展现结果三方开源地址https://github.com/BenoitDuffez/crashreportsviewer  \n项目地址：https://github.com/ACRA/acra  \n文档介绍：https://github.com/ACRA/acra/wiki/BasicSetup  \n\n1. Crashlytics  \n提供丰富的应用崩溃信息日志收集  \n轻量级，丰富，可自定义应用崩溃信息收集器，附有邮件通知  \n项目地址：http://www.crashlytics.com/  \n集成插件：[Android Studio, Eclipse and IntelliJ](http://try.crashlytics.com/sdk-android/?utm_source=blog&utm_medium=blog&utm_campaign=Announcing_android_studio_wp&utm_content=CTA_button)  \n\n1. Android Resource Navigator  \nchrome插件，可以方便的查看github上android源码工程的styles.xml和themes.xml。主要功能：  \n(1) 快速打开android styles.xml themes.xml  \n(2) 方便在资源间跳转。styles.xml themes.xml文件中资源链接跳转，可以方便跳转到某个资源  \n(3) 方便查找某个style和theme。chrome地址栏输入arn+tab+搜索内容回车即可  \n(4) 自动下载不同分辨率下的drawable  \n(5) 通过映射查找那些不是按照固定命名规则命名的style和theme  \n项目地址：https://github.com/jgilfelt/android-resource-navigator  \n在线演示：https://chrome.google.com/webstore/detail/android-resource-navigato/agoomkionjjbejegcejiefodgbckeebo?hl=en&gl=GB  \n\n1. android-resource-remover  \n根据lint的提示删除项目中无用的资源，减少包的大小  \n项目地址：https://github.com/KeepSafe/android-resource-remover  \n\n1. Telescope  \n通过手势截图以特定主题发送到特定邮箱地址报告Bug  \n项目地址：https://github.com/mattprecious/telescope  \n\n1. Complete Android Fragment & Activity Lifecycle  \n完整的Android Fragment/Activity生命周期图  \n项目地址：https://github.com/xxv/android-lifecycle  \n\n1. Bugsnag Notifier for Android  \n通过`Thread.UncaughtExceptionHandler`捕获应用未处理的异常崩溃 Bug 并用 Notification 展示同时上传到后台服务器  \n项目地址：https://github.com/bugsnag/bugsnag-android  \n文档介绍：https://github.com/bugsnag/bugsnag-android#installation--setup  \n\n1. Material Design Icons  \nGoogle Material Design 规范中的 Icon  \n项目地址：https://github.com/google/material-design-icons  \n\n1. scrollscreenshot  \nAndroid 滚动屏幕自动截图 jar 包，支持纵向、横向滚动截屏拼接  \n项目地址：https://github.com/PGSSoft/scrollscreenshot  \n效果图：![Renderings](https://github.com/PGSSoft/scrollscreenshot/raw/master/samplehorizontal.png)  \n   \n\n1. droidicon  \n1600+的海量Icon，包括750+的Material Design icons    \n项目地址：https://github.com/theDazzler/droidicon   \n  \n## 第五部分  \n主要介绍那些乐于分享并且有一些很不错的开源项目的个人和组织。Follow大神，深挖大神的项目和following，你会发现很多。  \n\n#### 一、个人  \n1. JakeWharton  \n就职于Square，绝对牛逼的大神，项目主要集中在Android版本兼容，ViewPager及开发工具上  \nGithub地址：https://github.com/JakeWharton  \n代表作：ActionBarSherlock，Android-ViewPagerIndicator，Nine Old Androids，SwipeToDismissNOA，hugo，butterknife，Android-DirectionalViewPager, scalpel    \npidcat另外对square及其他开源项目有很多贡献  \n主页：http://jakewharton.com/  \n\n1. Chris Banes  \nGithub地址：https://github.com/chrisbanes  \n代表作：ActionBar-PullToRefresh，PhotoView，Android-BitmapCache，Android-PullToRefresh  \n主页：http://chris.banes.me/  \n\n1. Koushik Dutta  \n就职于ClockworkMod  \nGithub地址：https://github.com/koush  \n代表作：Superuser，AndroidAsync，UrlImageViewHelper，ion, 另外对https://github.com/CyanogenMod 的开源项目有很多贡献  \n主页：http://koush.com/  \n\n1. Simon Vig  \nGithub地址：https://github.com/SimonVT  \n代表作：android-menudrawer，MessageBar  \n主页：http://simonvt.net/  \n\n1. Manuel Peinado  \nGithub地址：https://github.com/ManuelPeinado  \n代表作：FadingActionBar，GlassActionBar，RefreshActionItem，QuickReturnHeader  \n\n1. Emil Sj?lander  \nGithub地址：https://github.com/emilsjolander  \n代表作：StickyListHeaders，sprinkles，android-FlipView  \n主页：http://emilsjolander.se/  \n\n1. greenrobot  \nGithub地址：https://github.com/greenrobot  \n代表作：greenDAO，EventBus  \n主页：http://greenrobot.de/  \n\n1. Jeff Gilfelt  \nGithub地址：https://github.com/jgilfelt  \n代表作：android-mapviewballoons，android-viewbadger，android-actionbarstylegenerator，android-sqlite-asset-helper  \n主页：http://jeffgilfelt.com  \n\n1. Romain Guy  \nAndroid team成员(2013.10已离开Android team，仍在Google)  \nGithub地址：https://github.com/romainguy  \n代表作：ViewServer  \n主页：http://www.curious-creature.org/category/android/  \n個人攝影作品：http://www.flickr.com/photos/romainguy  \n\n1. sephiroth74  \n就职于Aviary.com  \nGithub地址：https://github.com/sephiroth74  \n代表作：ImageViewZoom，HorizontalVariableListView，AndroidWheel，purePDF  \n主页：http://www.sephiroth.it/  \n\n1. Cyril Mottier  \nGoogle开发者专家认证，发布一些Android技巧及文章  \nGithub地址：https://github.com/cyrilmottier  \n代表作：GreenDroid，Polaris  \n主页：http://cyrilmottier.com/  \n  \n\n#### 二、组织  \n1. Square  \n有态度有良心的企业，很多不错的分享  \nGithub地址：https://github.com/square  \n代表作：okhttp、fest-android，android-times-square、picasso、dagger、spoon等等  \n主页：http://square.github.io/  \n\n1. Inmite s.r.o.  \nGithub地址：https://github.com/inmite  \n代表作：android-styled-dialogs，android-grid-wichterle，android-selector-chapek  \n主页：http://www.inmite.eu/  \n  \n\n#### 三、博客  \n[部分国外著名 Android 开发者信息](https://github.com/android-cn/android-dev-com)  \n  \n\n----\n\n\n本博客转自[trinea](https://github.com/comtu/android-open-project) 2015年3月31日版本   \n还会陆续更新中...   \n\n\n","slug":"android_open_project","published":1,"updated":"2015-05-08T03:35:24.375Z","comments":1,"photos":[],"link":"","_id":"cinu3eu4v0083xoj0qm2xutxz","content":"<h1 id=\"Android开源项目分类汇总\"><a href=\"#Android开源项目分类汇总\" class=\"headerlink\" title=\"Android开源项目分类汇总\"></a>Android开源项目分类汇总</h1><h2 id=\"目前包括：\"><a href=\"#目前包括：\" class=\"headerlink\" title=\"目前包括：\"></a>目前包括：</h2><blockquote>\n<p>[Android开源项目第一篇——个性化控件(View)篇]<br><em>&nbsp;&nbsp;包括[ListView]、[ActionBar]、[Menu]、[ViewPager]、[Gallery]、[GridView]、[ImageView]、[ProgressBar]、[TextView]、[ScrollView]、[TimeView]、[TipView]、[FlipView]、[ColorPickView]、[GraphView]、[UI Style]、[其他]</em><br>[Android开源项目第二篇——工具库篇]<br><em>&nbsp;&nbsp;包括[依赖注入]、[图片缓存]、[网络相关]、[数据库ORM工具包]、[Android公共库]、[高版本向低版本兼容库]、[多媒体]、[事件总线]、[传感器]、[安全]、[插件化]、[文件]、[其他]</em><br>[Android开源项目第三篇——优秀项目篇]<br><em>&nbsp;&nbsp;比较有意思的完整的Android项目</em><br>[Android开源项目第四篇——开发及测试工具篇]<br><em>&nbsp;&nbsp;包括[开发效率工具]、[开发自测相关]、[测试工具]、[开发及编译环境]、[其他]</em><br>[Android开源项目第五篇——优秀个人和团体篇]<br><em>&nbsp;&nbsp;乐于分享并且有一些很不错的开源项目的[个人]和[组织]，包括JakeWharton、Chris Banes、Koushik Dutta等大牛</em>  </p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"第一部分-个性化控件-View\"><a href=\"#第一部分-个性化控件-View\" class=\"headerlink\" title=\"第一部分 个性化控件(View)\"></a>第一部分 个性化控件(View)</h2><p>主要介绍那些不错个性化的View，包括ListView、ActionBar、Menu、ViewPager、Gallery、GridView、ImageView、ProgressBar、TextView、ScrollView、TimeView、TipView、FlipView、ColorPickView、GraphView、UI Style等等。  </p>\n<h4 id=\"一、ListView\"><a href=\"#一、ListView\" class=\"headerlink\" title=\"一、ListView\"></a>一、ListView</h4><ol>\n<li><p>android-pulltorefresh<br>一个强大的拉动刷新开源项目，支持各种控件下拉刷新，ListView、ViewPager、WevView、ExpandableListView、GridView、ScrollView、Horizontal  ScrollView、Fragment上下左右拉动刷新，比下面johannilsson那个只支持ListView的强大的多。并且它实现的下拉刷新ListView在item不足一屏情况下也不会显示刷新提示，体验更好。<br>项目地址：<a href=\"https://github.com/chrisbanes/Android-PullToRefresh\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/Android-PullToRefresh</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refreshview-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refreshview-demo.apk?raw=true</a><br>APP示例：新浪微博各个页面  </p>\n</li>\n<li><p>android-pulltorefresh-listview<br>下拉刷新ListView，这个被很多人使用的项目实际有不少bug，推荐使用上面的android-pulltorefresh<br>项目地址：<a href=\"https://github.com/johannilsson/android-pulltorefresh\" target=\"_blank\" rel=\"external\">https://github.com/johannilsson/android-pulltorefresh</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refresh-listview-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refresh-listview-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>android-Ultra-Pull-to-Refresh<br>下拉刷新，第一个项目已经停止维护了，并且使用起来相对复杂，定制性也差。这个是替代和改良方案。这个继承于ViewGroup可以包含任何View。功能甚至比SwipeRefreshLayout强大。使用起来非常简单。良好的设计，如果你想定制自己的UI样式，非常简单，就像给ListView加一个Header View那么简单。支持 <code>API LEVEL &gt;= 8</code><br>项目地址：<a href=\"https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh\" target=\"_blank\" rel=\"external\">https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh</a><br>Demo地址：<a href=\"https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh/blob/master/ptr-demo/target/ultra-ptr-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh/blob/master/ptr-demo/target/ultra-ptr-demo.apk?raw=true</a><br>效果图：  </p>\n<div><br><img src=\"http://srain-github.qiniudn.com/ultra-ptr/contains-all-of-views.gif\" width=\"150px\"><br><img src=\"http://srain-github.qiniudn.com/ultra-ptr/release-to-refresh.gif\" width=\"150px\"><br><img src=\"http://srain-github.qiniudn.com/ultra-ptr/auto-refresh.gif\" width=\"150px\"><br><img src=\"http://srain-github.qiniudn.com/ultra-ptr/store-house-string-array.gif\" width=\"150px\"><br></div>  \n</li>\n<li><p>DropDownListView<br>下拉刷新及滑动到底部加载更多ListView<br>项目地址：<a href=\"https://github.com/Trinea/AndroidCommon\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/AndroidCommon</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=cn.trinea.android.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=cn.trinea.android.demo</a><br>文档介绍：<a href=\"http://www.trinea.cn/android/dropdown-to-refresh-and-bottom-load-more-listview/\" target=\"_blank\" rel=\"external\">http://www.trinea.cn/android/dropdown-to-refresh-and-bottom-load-more-listview/</a>  </p>\n</li>\n<li><p>DragSortListView<br>拖动排序的ListView，同时支持ListView滑动item删除，各个Item高度不一、单选、复选、CursorAdapter做为适配器、拖动背景变化等<br>项目地址：<a href=\"https://github.com/bauerca/drag-sort-listview\" target=\"_blank\" rel=\"external\">https://github.com/bauerca/drag-sort-listview</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.mobeta.android.demodslv\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.mobeta.android.demodslv</a><br>APP示例：Wordpress Android  </p>\n</li>\n<li><p>SwipeListView<br>支持定义ListView左右滑动事件，支持左右滑动位移，支持定义动画时间<br>项目地址：<a href=\"https://github.com/47deg/android-swipelistview\" target=\"_blank\" rel=\"external\">https://github.com/47deg/android-swipelistview</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.fortysevendeg.android.swipelistview\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.fortysevendeg.android.swipelistview</a><br>APP示例：微信  </p>\n</li>\n<li><p>Android-SwipeToDismiss<br>滑动Item消失ListView，支持3.0以下版本见：<a href=\"https://github.com/JakeWharton/SwipeToDismissNOA\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/SwipeToDismissNOA</a><br>项目地址：<a href=\"https://github.com/romannurik/Android-SwipeToDismiss\" target=\"_blank\" rel=\"external\">https://github.com/romannurik/Android-SwipeToDismiss</a><br>Demo地址：<a href=\"https://github.com/JakeWharton/SwipeToDismissNOA/SwipeToDismissNOA.apk/qr_code\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/SwipeToDismissNOA/SwipeToDismissNOA.apk/qr_code</a>  </p>\n</li>\n<li><p>PinnedHeaderExpandableListView<br>首先它是一个ExpandableListView，但是它的头部可以固定，其次，在它的上面还有一个头部可以来回伸缩<br>项目地址：<a href=\"https://github.com/singwhatiwanna/PinnedHeaderExpandableListView\" target=\"_blank\" rel=\"external\">https://github.com/singwhatiwanna/PinnedHeaderExpandableListView</a><br>效果图：<img src=\"https://camo.githubusercontent.com/fa7f516b0b6e2921007a17cbc359b3f661f32226/687474703a2f2f696d672e626c6f672e6373646e2e6e65742f32303134303531313135313534363834333f77617465726d61726b2f322f746578742f6148523063446f764c324a736232637559334e6b626935755a58517663326c755a33646f5958527064324675626d453d2f666f6e742f3561364c354c32542f666f6e7473697a652f3430302f66696c6c2f49304a42516b46434d413d3d2f646973736f6c76652f37302f677261766974792f536f75746845617374\" alt=\"Renderings\"><br>APP示例：百度手机卫士垃圾清理界面  </p>\n</li>\n<li><p>StickyListHeaders<br>GroupName滑动到顶端时会固定不动直到另外一个GroupName到达顶端的ExpandListView，支持快速滑动，支持Android2.3及以上<br>项目地址：<a href=\"https://github.com/emilsjolander/StickyListHeaders\" target=\"_blank\" rel=\"external\">https://github.com/emilsjolander/StickyListHeaders</a><br>效果图：<img src=\"https://raw.github.com/emilsjolander/StickyListHeaders/master/demo.gif\" alt=\"Renderings\"><br>APP示例：Android 4.0联系人  </p>\n</li>\n<li><p>pinned-section-listview<br>GroupName滑动到顶端时会固定不动直到另外一个GroupName到达顶端的ExpandListView<br>项目地址：<a href=\"https://github.com/beworker/pinned-section-listview\" target=\"_blank\" rel=\"external\">https://github.com/beworker/pinned-section-listview</a><br>效果图：<img src=\"https://raw.github.com/beworker/pinned-section-listview/master/screen1.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>PinnedHeaderListView<br>GroupName滑动到顶端时会固定不动直到另外一个GroupName到达顶端的ExpandListView<br>项目地址：<a href=\"https://github.com/JimiSmith/PinnedHeaderListView\" target=\"_blank\" rel=\"external\">https://github.com/JimiSmith/PinnedHeaderListView</a>  </p>\n</li>\n<li><p>QuickReturn<br>ListView/ScrollView的header或footer，当向下滚动时消失，向上滚动时出现<br>项目地址：<a href=\"https://github.com/lawloretienne/QuickReturn\" target=\"_blank\" rel=\"external\">https://github.com/lawloretienne/QuickReturn</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.etiennelawlor.quickreturn\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.etiennelawlor.quickreturn</a>  </p>\n</li>\n<li><p>QuickReturnHeader<br>ListView/ScrollView的header或footer，当向下滚动时消失，向上滚动时出现<br>项目地址：<a href=\"https://github.com/ManuelPeinado/QuickReturnHeader\" target=\"_blank\" rel=\"external\">https://github.com/ManuelPeinado/QuickReturnHeader</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/quick-return-header-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/quick-return-header-demo.apk?raw=true</a><br>APP示例：google plus  </p>\n</li>\n<li><p>IndexableListView<br>ListView右侧会显示item首字母快捷索引，点击可快速滑动到某个item<br>项目地址：<a href=\"https://github.com/woozzu/IndexableListView\" target=\"_blank\" rel=\"external\">https://github.com/woozzu/IndexableListView</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/indexable-listview.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/indexable-listview.apk?raw=true</a><br>APP示例：微信通讯录、小米联系人  </p>\n</li>\n<li><p>CustomFastScrollView<br>ListView快速滑动，同时屏幕中间PopupWindows显示滑动到的item内容或首字母<br>项目地址：<a href=\"https://github.com/nolanlawson/CustomFastScrollViewDemo\" target=\"_blank\" rel=\"external\">https://github.com/nolanlawson/CustomFastScrollViewDemo</a><br>效果图：<img src=\"https://raw.github.com/nolanlawson/CustomFastScrollViewDemo/master/example.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android-ScrollBarPanel<br>ListView滑动时固定的Panel指示显示在scrollbar旁边<br>项目地址：<a href=\"https://github.com/rno/Android-ScrollBarPanel\" target=\"_blank\" rel=\"external\">https://github.com/rno/Android-ScrollBarPanel</a><br>效果图：<img src=\"https://github.com/rno/Android-ScrollBarPanel/raw/master/demo_capture.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>SlideExpandableListView<br>用户点击listView item滑出固定区域，其他item的区域收缩<br>项目地址：<a href=\"https://github.com/tjerkw/Android-SlideExpandableListView\" target=\"_blank\" rel=\"external\">https://github.com/tjerkw/Android-SlideExpandableListView</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/slide-expandable-listView-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/slide-expandable-listView-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>JazzyListView<br>ListView及GridView item以特殊动画效果进入屏幕，效果包括grow、cards、curl、wave、flip、fly等等<br>项目地址：<a href=\"https://github.com/twotoasters/JazzyListView\" target=\"_blank\" rel=\"external\">https://github.com/twotoasters/JazzyListView</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.twotoasters.jazzylistview.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.twotoasters.jazzylistview.sample</a><br>在线演示：<a href=\"http://lab.hakim.se/scroll-effects/\" target=\"_blank\" rel=\"external\">http://lab.hakim.se/scroll-effects/</a>  </p>\n</li>\n<li><p>ListViewAnimations<br>带Item显示动画的ListView，动画包括底部飞入、其他方向斜飞入、下层飞入、渐变消失、滑动删除等<br>项目地址：<a href=\"https://github.com/nhaarman/ListViewAnimations\" target=\"_blank\" rel=\"external\">https://github.com/nhaarman/ListViewAnimations</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.haarman.listviewanimations\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.haarman.listviewanimations</a><br>APP示例：Google plus、Google Now卡片式进入、小米系统中应用商店、联系人、游戏中心、音乐、文件管理器的ListView、Ultimate、Light Flow Lite、TreinVerkeer、Running Coach、Pearl Jam Lyrics、Calorie Chart、Car Hire、Super BART、DK FlashCards、Counter Plus、Voorlees Verhaaltjes 2.0  </p>\n</li>\n<li><p>DevsmartLib-Android<br>横向ListView<br>项目地址：<a href=\"https://github.com/dinocore1/DevsmartLib-Android\" target=\"_blank\" rel=\"external\">https://github.com/dinocore1/DevsmartLib-Android</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/horizontal-listview-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/horizontal-listview-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>TwoWayView<br>横向ListView的效果，继承自AdapterView<br>项目地址：<a href=\"https://github.com/lucasr/twoway-view\" target=\"_blank\" rel=\"external\">https://github.com/lucasr/twoway-view</a>  </p>\n</li>\n<li><p>HorizontalVariableListView<br>支持Item宽度不一致的ListView<br>项目地址：<a href=\"https://github.com/sephiroth74/HorizontalVariableListView\" target=\"_blank\" rel=\"external\">https://github.com/sephiroth74/HorizontalVariableListView</a>  </p>\n</li>\n<li><p>LinearListView<br>用LinearLayout实现的ListView，可解决多个ListView并存等问题。目前自己也有需要，等亲自尝试过后会再具体介绍<br>项目地址：<a href=\"https://github.com/frankiesardo/LinearListView\" target=\"_blank\" rel=\"external\">https://github.com/frankiesardo/LinearListView</a>  </p>\n</li>\n<li><p>MultiChoiceAdapter<br>支持多选的ListView Adapter<br>项目地址：<a href=\"https://github.com/ManuelPeinado/MultiChoiceAdapter\" target=\"_blank\" rel=\"external\">https://github.com/ManuelPeinado/MultiChoiceAdapter</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.manuelpeinado.multichoiceadapter.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.manuelpeinado.multichoiceadapter.demo</a>  </p>\n</li>\n<li><p>EnhancedListView<br>支持横向滑动删除列表项以及撤销删除的ListView，该项目的前身是<a href=\"https://github.com/timroes/SwipeToDismissUndoList\" target=\"_blank\" rel=\"external\">SwipeToDismissUndoList</a><br>项目地址：<a href=\"https://github.com/timroes/EnhancedListView\" target=\"_blank\" rel=\"external\">https://github.com/timroes/EnhancedListView</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=de.timroes.android.listviewdemo&amp;rdid=de.timroes.android.listviewdemo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=de.timroes.android.listviewdemo&amp;rdid=de.timroes.android.listviewdemo</a>  </p>\n</li>\n<li><p>ListBuddies<br>自动滚动的双列ListView ，两个ListView滚动速度不一致，有视差效果<br>项目地址：<a href=\"https://github.com/jpardogo/ListBuddies\" target=\"_blank\" rel=\"external\">https://github.com/jpardogo/ListBuddies</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.jpardogo.android.listbuddies\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.jpardogo.android.listbuddies</a><br>效果图：<img src=\"https://raw.github.com/jpardogo/ListBuddies/master/art/screenshot_listbuddies_2.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>SwipeMenuListView<br>针对ListView item的侧滑菜单<br>项目地址：<a href=\"https://github.com/baoyongzhang/SwipeMenuListView\" target=\"_blank\" rel=\"external\">https://github.com/baoyongzhang/SwipeMenuListView</a><br>效果图：<img src=\"https://raw.githubusercontent.com/baoyongzhang/SwipeMenuListView/master/demo.gif\" alt=\"Renderings\"><br>APP示例：手机QQV5.0  </p>\n</li>\n<li><p>PagingListView<br>分页加载的ListView。当滑动到ListView底部最后一个元素时，显示一个进度行，然后加载下一页数据，并显示。<br>项目地址：<a href=\"https://github.com/nicolasjafelle/PagingListView\" target=\"_blank\" rel=\"external\">https://github.com/nicolasjafelle/PagingListView</a>  </p>\n</li>\n<li><p>PullZoomView<br>支持下拉时HeaderView缩放的ListView、ScrollView<br>项目地址：<a href=\"https://github.com/Frank-Zhu/PullZoomView\" target=\"_blank\" rel=\"external\">https://github.com/Frank-Zhu/PullZoomView</a><br>效果图：<img src=\"https://raw.githubusercontent.com/Frank-Zhu/PullZoomView/master/art/pull-to-zoom.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>PullToZoomInListView<br>滑动ListView时使其HeaderView跟随滑动缩放<br>项目地址：<a href=\"https://github.com/matrixxun/PullToZoomInListView\" target=\"_blank\" rel=\"external\">https://github.com/matrixxun/PullToZoomInListView</a><br>效果图：<img src=\"https://github.com/matrixxun/PullToZoomInListView/raw/master/art/pull-to-zoom.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>CalendarListview<br>实现每个月一行日历效果的ListView<br>项目地址：<a href=\"https://github.com/traex/CalendarListview\" target=\"_blank\" rel=\"external\">https://github.com/traex/CalendarListview</a><br>效果图：<img src=\"https://github.com/traex/CalendarListview/raw/master/demo.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>sticky-headers-recyclerview<br>GroupName滑动到顶端时会固定不动直到另外一个GroupName到达顶端的ListView，采用support-v7中的RecyclerView实现<br>项目地址：<a href=\"https://github.com/timehop/sticky-headers-recyclerview\" target=\"_blank\" rel=\"external\">https://github.com/timehop/sticky-headers-recyclerview</a>  </p>\n</li>\n<li><p>PullSeparateListView<br>到达顶部或底部继续拉动时，实现Item间的相互分离，两种模式：(1) 全部分离的模式，即屏幕内所有Item都会分离 (2)部分分离模式，以点击位置为分界点，部分item分离<br>项目地址：<a href=\"https://github.com/chiemy/PullSeparateListView\" target=\"_blank\" rel=\"external\">https://github.com/chiemy/PullSeparateListView</a><br>效果图：<img src=\"https://github.com/chiemy/PullSeparateListView/raw/master/capture.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>ExpandableLayout<br>Header 和 Content Item 都可以展开的 ExpandableListview<br>项目地址：<a href=\"https://github.com/traex/ExpandableLayout\" target=\"_blank\" rel=\"external\">https://github.com/traex/ExpandableLayout</a>  </p>\n</li>\n<li><p>PagedHeadListView<br>支持paginated header以及material page indicator的ListView.<br>项目地址：<a href=\"https://github.com/JorgeCastilloPrz/PagedHeadListView\" target=\"_blank\" rel=\"external\">https://github.com/JorgeCastilloPrz/PagedHeadListView</a><br>效果图：<img src=\"https://raw.githubusercontent.com/JorgeCastilloPrz/PagedHeadListView/master/app/src/main/res/raw/preview1.gif\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<ol>\n<li><p>CustomSwipeListView<br>支持左滑弹出自定义菜单，右滑删除且允许撤销，同时可以自定义滑动动画时间和滑动触发事件的时机等。<br>项目地址：<a href=\"https://github.com/xyczero/Android-CustomSwipeListView\" target=\"_blank\" rel=\"external\">https://github.com/xyczero/Android-CustomSwipeListView</a><br>效果图：<img src=\"http://7u2jsw.com1.z0.glb.clouddn.com/githubCustomSwipeListview_Set.PNG\" alt=\"screenshot\"><br>Demo地址：<a href=\"http://7u2jsw.com1.z0.glb.clouddn.com/githubCustomSwipeListView.apk\" target=\"_blank\" rel=\"external\">Download here</a>   </p>\n</li>\n<li><p>Pull-to-Refresh.Rentals-Android<br>提供一个简单可以自定义的下拉刷新实现，<a href=\"http://yalantis.com/\" target=\"_blank\" rel=\"external\">Yalantis</a> 出品。<br>项目地址：<a href=\"https://github.com/Yalantis/Pull-to-Refresh.Rentals-Android\" target=\"_blank\" rel=\"external\">https://github.com/Yalantis/Pull-to-Refresh.Rentals-Android</a><br>效果图：<img src=\"https://camo.githubusercontent.com/d406ac5a03a2b1fa5cf41fadc8d2408cb8709bdc/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3132353035362f73637265656e73686f74732f313635303331372f7265616c6573746174652d70756c6c5f312d322d332e676966\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<h4 id=\"二、ActionBar\"><a href=\"#二、ActionBar\" class=\"headerlink\" title=\"二、ActionBar\"></a>二、ActionBar</h4><ol>\n<li><p>ActionBarSherlock<br>为Android所有版本提供统一的ActionBar，解决4.0以下ActionBar的适配问题<br>项目地址：<a href=\"https://github.com/JakeWharton/ActionBarSherlock\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/ActionBarSherlock</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos</a><br>APP示例：太多了。。现在连google都在用<br>效果图: <img src=\"https://camo.githubusercontent.com/b21aae46566b05d5adbb1fa71b88708bc659e120/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67\" alt=\"comtu\"></p>\n</li>\n<li><p>ActionBar-PullToRefresh<br>下拉刷新，ActionBar出现加载中提示<br>项目地址：<a href=\"https://github.com/chrisbanes/ActionBar-PullToRefresh\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/ActionBar-PullToRefresh</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=uk.co.senab.actionbarpulltorefresh.samples.stock\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=uk.co.senab.actionbarpulltorefresh.samples.stock</a><br>APP示例：Gmail，Google plus，知乎等  </p>\n</li>\n<li><p>FadingActionBar<br>ListView向下滚动逐渐显现的ActionBar<br>项目地址：<a href=\"https://github.com/ManuelPeinado/FadingActionBar\" target=\"_blank\" rel=\"external\">https://github.com/ManuelPeinado/FadingActionBar</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.manuelpeinado.fadingactionbar.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.manuelpeinado.fadingactionbar.demo</a><br>APP示例：google music，知乎<br>效果图: <img src=\"https://camo.githubusercontent.com/4fb0e40bdb047be104b2cefddee62923b8a2da37/68747470733a2f2f7261772e6769746875622e636f6d2f4d616e75656c5065696e61646f2f466164696e67416374696f6e4261722f6d61737465722f6172742f726561646d655f7069632e706e67\" alt=\"comtu\"></p>\n</li>\n<li><p>NotBoringActionBar<br>google music下拉收缩的ActionBar<br>项目地址：<a href=\"https://github.com/flavienlaurent/NotBoringActionBar\" target=\"_blank\" rel=\"external\">https://github.com/flavienlaurent/NotBoringActionBar</a><br>Demo地址：<a href=\"http://flavienlaurent.com/blog/2013/11/20/making-your-action-bar-not-boring/\" target=\"_blank\" rel=\"external\">http://flavienlaurent.com/blog/2013/11/20/making-your-action-bar-not-boring/</a><br>APP示例：Google音乐<br>效果图: <img src=\"https://camo.githubusercontent.com/65f2d44e0e5064369aec8ee41838bd073e695975/68747470733a2f2f7261772e6769746875622e636f6d2f666c617669656e6c617572656e742f4e6f74426f72696e67416374696f6e4261722f6d61737465722f67726170686963732f6e6f74626f72696e6761622e676966\" alt=\"comtu\"></p>\n</li>\n<li><p>RefreshActionItem<br>带进度显示和刷新按钮的ActionBar<br>项目地址：<a href=\"https://github.com/ManuelPeinado/RefreshActionItem\" target=\"_blank\" rel=\"external\">https://github.com/ManuelPeinado/RefreshActionItem</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.manuelpeinado.refreshactionitem.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.manuelpeinado.refreshactionitem.demo</a><br>APP示例：The New York Times，DevAppsDirect.<br>效果图: <img src=\"https://camo.githubusercontent.com/46884ee60bb699929890a1a9eed0c2610ca99039/68747470733a2f2f7261772e6769746875622e636f6d2f4d616e75656c5065696e61646f2f52656672657368416374696f6e4974656d2f6d61737465722f6172742f726561646d655f7069632e706e67\" alt=\"comtu\"></p>\n</li>\n<li><p>GlassActionBar<br>类似玻璃的有一定透明度的ActionBar<br>项目地址：<a href=\"https://github.com/ManuelPeinado/GlassActionBar\" target=\"_blank\" rel=\"external\">https://github.com/ManuelPeinado/GlassActionBar</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.manuelpeinado.glassactionbardemo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.manuelpeinado.glassactionbardemo</a><br>APP示例：google music<br>效果图: <img src=\"https://camo.githubusercontent.com/01c80fb941f2ba07f6d9d26d80dd4792a79127d4/68747470733a2f2f7261772e6769746875622e636f6d2f4d616e75656c5065696e61646f2f476c617373416374696f6e4261722f6d61737465722f6172742f726561646d655f7069632e706e67\" alt=\"comtu\">  </p>\n</li>\n</ol>\n<h4 id=\"三、Menu\"><a href=\"#三、Menu\" class=\"headerlink\" title=\"三、Menu\"></a>三、Menu</h4><ol>\n<li><p>MenuDrawer<br>滑出式菜单，通过拖动屏幕边缘滑出菜单，支持屏幕上下左右划出，支持当前View处于上下层，支持Windows边缘、ListView边缘、ViewPager变化划出菜单等。<br>项目地址：<a href=\"https://github.com/SimonVT/android-menudrawer\" target=\"_blank\" rel=\"external\">https://github.com/SimonVT/android-menudrawer</a><br>Demo地址：<a href=\"http://simonvt.github.io/android-menudrawer/\" target=\"_blank\" rel=\"external\">http://simonvt.github.io/android-menudrawer/</a><br>APP示例：Gmail、Google Music等大部分google app  </p>\n</li>\n<li><p>SlidingMenu<br>滑出式菜单，通过拖动屏幕边缘滑出菜单，支持屏幕左右划出，支持菜单zoom、scale、slide up三种动画样式出现。与MenuDrawer相比而言，SlidingMenu支持菜单动画样式出现，MenuDrawer支持菜单view处于内容的上下层<br>项目地址：<a href=\"https://github.com/jfeinstein10/SlidingMenu\" target=\"_blank\" rel=\"external\">https://github.com/jfeinstein10/SlidingMenu</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.slidingmenu.example\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.slidingmenu.example</a><br>APP示例：Foursquare, LinkedIn, Zappos, Rdio, Evernote Food, Plume, VLC for Android, ESPN ScoreCenter, MLS MatchDay, 9GAG, Wunderlist 2, The Verge, MTG Familiar, Mantano Reader, Falcon Pro (BETA), MW3 Barracks  </p>\n</li>\n<li><p>ArcMenu<br>支持类似Path的左下角动画旋转菜单及横向划出菜单、圆心弹出菜单<br>项目地址：<a href=\"https://github.com/daCapricorn/ArcMenu\" target=\"_blank\" rel=\"external\">https://github.com/daCapricorn/ArcMenu</a><br>效果图：<img src=\"https://camo.githubusercontent.com/1fcc783d2e784f7db24feb2b6857f4aa43fc685b/68747470733a2f2f646c2e64726f70626f782e636f6d2f752f31313336393638372f70726576696577302e706e67\" alt=\"Renderings\"><br><img src=\"https://camo.githubusercontent.com/7c3d707678e6aa187cdf2ee3ac701d77fba92f48/68747470733a2f2f646c2e64726f70626f782e636f6d2f752f31313336393638372f70726576696577312e706e67\" alt=\"comtu\"><br><img src=\"https://camo.githubusercontent.com/a5050578e15ff2e22deb2c0249b50c69f8f1ec1a/68747470733a2f2f646c2e64726f70626f782e636f6d2f752f31313336393638372f7261796d656e752e706e67\" alt=\"comtu\"><br>APP示例：Path  </p>\n</li>\n<li><p>android-satellite-menu<br>类似Path的左下角动画旋转菜单<br>项目地址：<a href=\"https://github.com/siyamed/android-satellite-menu\" target=\"_blank\" rel=\"external\">https://github.com/siyamed/android-satellite-menu</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/satellite-menu-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/satellite-menu-demo.apk?raw=true</a><br>APP示例：Path  </p>\n</li>\n<li><p>radial-menu-widget<br>圆形菜单，支持二级菜单<br>项目地址：<a href=\"https://code.google.com/p/radial-menu-widget/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/radial-menu-widget/</a><br>效果图：<a href=\"http://farm8.staticflickr.com/7377/11621125154_d1773c2dcc_o.jpg\" target=\"_blank\" rel=\"external\">http://farm8.staticflickr.com/7377/11621125154_d1773c2dcc_o.jpg</a>  </p>\n</li>\n<li><p>Android Wheel Menu<br>圆形旋转选取菜单<br>项目地址：<a href=\"https://github.com/anupcowkur/Android-Wheel-Menu\" target=\"_blank\" rel=\"external\">https://github.com/anupcowkur/Android-Wheel-Menu</a><br>效果图：<img src=\"https://raw.github.com/anupcowkur/Android-Wheel-Menu/master/graphics/wheel.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>FoldingNavigationDrawer<br>滑动并以折叠方式打开菜单<br>项目地址：<a href=\"https://github.com/tibi1712/FoldingNavigationDrawer-Android\" target=\"_blank\" rel=\"external\">https://github.com/tibi1712/FoldingNavigationDrawer-Android</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.ptr.folding.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.ptr.folding.sample</a><br>效果图：<img src=\"https://lh6.ggpht.com/VnKUZenAozQ0KFAm5blFTGqMaKFjvX-BK2JH-jrX1sIXVTqciACqRhqFH48hc4pm2Q=h310-rw\" alt=\"Renderings\">  </p>\n</li>\n<li><p>AndroidResideMenu<br>仿 Dribbble 的边栏菜单<br>项目地址：<a href=\"https://github.com/SpecialCyCi/AndroidResideMenu\" target=\"_blank\" rel=\"external\">https://github.com/SpecialCyCi/AndroidResideMenu</a><br>效果图：<img src=\"https://github.com/SpecialCyCi/AndroidResideMenu/raw/master/2.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>CircularFloatingActionMenu<br>一个可定制的圆形的浮动菜单控件，类似于Path的圆形菜单。这个控件的可定制性更强，可以很容易的定制菜单出现消失时的动画，起始角度和半径。<br>项目地址：<a href=\"https://github.com/oguzbilgener/CircularFloatingActionMenu\" target=\"_blank\" rel=\"external\">https://github.com/oguzbilgener/CircularFloatingActionMenu</a><br>Demo地址：<a href=\"https://github.com/oguzbilgener/CircularFloatingActionMenu/tree/master/samples\" target=\"_blank\" rel=\"external\">https://github.com/oguzbilgener/CircularFloatingActionMenu/tree/master/samples</a><br>效果图：<img src=\"https://raw.githubusercontent.com/oguzbilgener/CircularFloatingActionMenu/master/assets/circularfab.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>NavigationDrawerSI<br>Navigation Drawer的一个简单实现，滑动并以折叠方式打开菜单<br>项目地址：<a href=\"https://github.com/mmBs/NavigationDrawerSI\" target=\"_blank\" rel=\"external\">https://github.com/mmBs/NavigationDrawerSI</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi</a><br>效果图：<img height=\"500px\" src=\"https://raw.githubusercontent.com/mmBs/NavigationDrawerSI/master/images/screens.png\"><br>APP示例：<a href=\"https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi</a>  </p>\n</li>\n<li><p>DragLayout<br>使用support.v4包下的ViewDragHelper实现QQ5.0侧滑<br>项目地址：<a href=\"https://github.com/BlueMor/DragLayout\" target=\"_blank\" rel=\"external\">https://github.com/BlueMor/DragLayout</a><br>效果图：<img src=\"https://github.com/BlueMor/DragLayout/raw/master/screenshots/123.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>LDrawer<br>Material Design 形式的展开折叠Icon<br>项目地址：<a href=\"https://github.com/ikimuhendis/LDrawer\" target=\"_blank\" rel=\"external\">https://github.com/ikimuhendis/LDrawer</a><br>效果图：<img src=\"https://raw.githubusercontent.com/IkiMuhendis/LDrawer/master/images/animated.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Floating Action Button<br>悬浮的圆形菜单栏，支持组建滚动时自动隐藏及其他设置<br>项目地址：<a href=\"https://github.com/shamanland/floating-action-button\" target=\"_blank\" rel=\"external\">https://github.com/shamanland/floating-action-button</a><br>效果图：<img src=\"https://camo.githubusercontent.com/c679cb23cf62830b0d4037e17cf2d8d4090bc3c8/68747470733a2f2f64726976652e676f6f676c652e636f6d2f75633f69643d3042776830534e4c506d6a5142526b466f5a4530345646393051324d\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<ol>\n<li><p>Side-Menu.Android<br>分类侧滑菜单，<a href=\"http://yalantis.com/\" target=\"_blank\" rel=\"external\">Yalantis</a> 出品。<br>项目地址：<a href=\"https://github.com/Yalantis/Side-Menu.Android\" target=\"_blank\" rel=\"external\">https://github.com/Yalantis/Side-Menu.Android</a><br>效果图：<img src=\"https://camo.githubusercontent.com/cb6caa7a392d01d46bca9d9485c01fc173f55fac/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3132353035362f73637265656e73686f74732f313638393932322f6576656e74732d6d656e755f312d312d362e676966\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Context-Menu.Android<br>可以方便快速集成漂亮带有动画效果的上下文菜单，<a href=\"http://yalantis.com/\" target=\"_blank\" rel=\"external\">Yalantis</a>出品。<br>项目地址：<a href=\"https://github.com/Yalantis/Context-Menu.Android\" target=\"_blank\" rel=\"external\">https://github.com/Yalantis/Context-Menu.Android</a><br>效果图：<img src=\"https://camo.githubusercontent.com/46c15734b552ce3afefa7efd1518909046b4677e/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3132353035362f73637265656e73686f74732f313738353237342f39396d696c65732d70726f66696c652d6c696768745f312d312d342e676966\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<h4 id=\"四、ViewPager-、Gallery\"><a href=\"#四、ViewPager-、Gallery\" class=\"headerlink\" title=\"四、ViewPager 、Gallery\"></a>四、ViewPager 、Gallery</h4><ol>\n<li><p>Android-ViewPagerIndicator<br>配合ViewPager使用的Indicator，支持各种位置和样式<br>项目地址：<a href=\"https://github.com/JakeWharton/Android-ViewPagerIndicator\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/Android-ViewPagerIndicator</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.viewpagerindicator.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.viewpagerindicator.sample</a><br>APP示例：太多了。。  </p>\n</li>\n<li><p>JazzyViewPager<br>支持Fragment切换动画的ViewPager，动画包括转盘、淡入淡出、翻页、层叠、旋转、方块、翻转、放大缩小等，效果类似桌面左右切换的各种效果，不过桌面并非用ViewPager实现而已<br>项目地址：<a href=\"https://github.com/jfeinstein10/JazzyViewPager\" target=\"_blank\" rel=\"external\">https://github.com/jfeinstein10/JazzyViewPager</a><br>Demo地址：<a href=\"https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true</a>  </p>\n</li>\n<li><p>JellyViewPager<br>特殊切换动画的ViewPager<br>项目地址：<a href=\"https://github.com/chiemy/JellyViewPager\" target=\"_blank\" rel=\"external\">https://github.com/chiemy/JellyViewPager</a><br>效果图：<img src=\"https://github.com/chiemy/JellyViewPager/raw/master/capture.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android-DirectionalViewPager<br>支持横向和纵向(垂直)的ViewPager<br>项目地址：<a href=\"https://github.com/JakeWharton/Android-DirectionalViewPager\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/Android-DirectionalViewPager</a><br>Demo地址：<a href=\"https://market.android.com/details?id=com.directionalviewpager.sample\" target=\"_blank\" rel=\"external\">https://market.android.com/details?id=com.directionalviewpager.sample</a>  </p>\n</li>\n<li><p>android-pulltorefresh<br>支持下拉刷新的ViewPager<br>项目地址：<a href=\"https://github.com/chrisbanes/Android-PullToRefresh\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/Android-PullToRefresh</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refreshview-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refreshview-demo.apk?raw=true</a><br>APP示例：新浪微博各个页面  </p>\n</li>\n<li><p>FancyCoverFlow<br>支持Item切换动画效果的类似Gallery View<br>项目地址：<a href=\"https://github.com/davidschreiber/FancyCoverFlow\" target=\"_blank\" rel=\"external\">https://github.com/davidschreiber/FancyCoverFlow</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=at.technikum.mti.fancycoverflow.samples\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=at.technikum.mti.fancycoverflow.samples</a><br>效果图：<img src=\"https://github-camo.global.ssl.fastly.net/ef5ced52b7b54652b50499521ed797c0188c7a6b/687474703a2f2f64617669647363687265696265722e6769746875622e696f2f46616e6379436f766572466c6f772f73637265656e73686f74322e706e67\" alt=\"Renderings\">  </p>\n</li>\n<li><p>AndroidTouchGallery<br>支持双击或双指缩放的Gallery(用ViewPager实现)，相比下面的PhotoView，在被放大后依然能滑到下一个item，并且支持直接从url和文件中获取图片，<br>项目地址：<a href=\"https://github.com/Dreddik/AndroidTouchGallery\" target=\"_blank\" rel=\"external\">https://github.com/Dreddik/AndroidTouchGallery</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/touch-gallery-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/touch-gallery-demo.apk?raw=true</a><br>APP示例：类似微信中查看聊天记录图片时可双击放大，并且放大情况下能正常左右滑动到前后图片  </p>\n</li>\n<li><p>Android Auto Scroll ViewPager<br>Android自动滚动 轮播循环的ViewPager<br>项目地址：<a href=\"https://github.com/Trinea/android-auto-scroll-view-pager\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/android-auto-scroll-view-pager</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=cn.trinea.android.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=cn.trinea.android.demo</a><br>文档介绍：<a href=\"http://www.trinea.cn/android/auto-scroll-view-pager/\" target=\"_blank\" rel=\"external\">http://www.trinea.cn/android/auto-scroll-view-pager/</a>  </p>\n</li>\n<li><p>Salvage view<br>带View缓存的Viewpager PagerAdapter，很方便使用<br>项目地址：<a href=\"https://github.com/JakeWharton/salvage\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/salvage</a>  </p>\n</li>\n<li><p>Android PagerSlidingTabStrip<br>配合ViewPager使用的Indicator，支持ViewPager Scroll时Indicator联动<br>项目地址：<a href=\"https://github.com/astuetz/PagerSlidingTabStrip\" target=\"_blank\" rel=\"external\">https://github.com/astuetz/PagerSlidingTabStrip</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.astuetz.viewpager.extensions.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.astuetz.viewpager.extensions.sample</a>  </p>\n</li>\n<li><p>ViewPager3D<br>ViewPager3D效果<br>项目地址：<a href=\"https://github.com/inovex/ViewPager3D\" target=\"_blank\" rel=\"external\">https://github.com/inovex/ViewPager3D</a>  </p>\n</li>\n<li><p>AnimaTabsview<br>仿网易云音乐标签切换的动画,带透明小三角<br>项目地址：<a href=\"https://github.com/wuyexiong/transparent-over-animtabsview\" target=\"_blank\" rel=\"external\">https://github.com/wuyexiong/transparent-over-animtabsview</a><br>在线演示：<a href=\"http://v.youku.com/v_show/id_XNzA4MjY5NjA0.html\" target=\"_blank\" rel=\"external\">http://v.youku.com/v_show/id_XNzA4MjY5NjA0.html</a>  </p>\n</li>\n<li><p>LoopingViewPager<br>无限循环的ViewPager<br>项目地址：<a href=\"https://github.com/imbryk/LoopingViewPager\" target=\"_blank\" rel=\"external\">https://github.com/imbryk/LoopingViewPager</a>  </p>\n</li>\n<li><p>android_page_curl<br>翻书卷曲效果<br>项目地址：<a href=\"https://github.com/harism/android_page_curl\" target=\"_blank\" rel=\"external\">https://github.com/harism/android_page_curl</a><br>APP示例：iReader<br>在线演示：<a href=\"https://www.youtube.com/watch?v=iwu7P5PCpsw\" target=\"_blank\" rel=\"external\">https://www.youtube.com/watch?v=iwu7P5PCpsw</a>  </p>\n</li>\n<li><p>ViewPagerIndicator<br>简化并实现android的TabHost效果，顶部滑动tab，引导页，支持自定义tab样式,自定义滑动块样式和位置,自定义切换tab的过渡动画,子界面的预加载和界面缓存,设置界面是否可滑动<br>项目地址：<a href=\"https://github.com/LuckyJayce/ViewPagerIndicator\" target=\"_blank\" rel=\"external\">https://github.com/LuckyJayce/ViewPagerIndicator</a>  </p>\n</li>\n<li><p>SmartTabLayout<br>A custom ViewPager title strip which gives continuous feedback to the user when scrolling.This library has been added some features and utilities based on android-SlidingTabBasic project of Google Samples.<br>自定义标题:viewpage地带使连续滚动时反馈给用户。这个库添加了一些功能和实用程序基于谷歌android-SlidingTabBasic工程样品。<br>项目地址: <a href=\"https://github.com/ogaclejapan/SmartTabLayout\" target=\"_blank\" rel=\"external\">https://github.com/ogaclejapan/SmartTabLayout</a><br>App示例: <a href=\"https://play.google.com/store/apps/details?id=com.ogaclejapan.smarttablayout.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.ogaclejapan.smarttablayout.demo</a><br>效果图: <img src=\"https://raw.githubusercontent.com/ogaclejapan/SmartTabLayout/master/art/demo1.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>AndroidImageSlider<br>An amazing and convenient Android image slider.<br>一个了不起的滑块和方便Android 图片滑动。<br>项目地址: <a href=\"https://github.com/daimajia/AndroidImageSlider\" target=\"_blank\" rel=\"external\">https://github.com/daimajia/AndroidImageSlider</a><br>App示例: <a href=\"https://github.com/daimajia/AndroidImageSlider/releases/download/v1.0.8/demo-1.0.8.apk\" target=\"_blank\" rel=\"external\">https://github.com/daimajia/AndroidImageSlider/releases/download/v1.0.8/demo-1.0.8.apk</a><br>Eclipse工程: <a href=\"https://github.com/daimajia/AndroidImageSlider/releases/download/v1.0.9/AndroidImageSlider-Eclipse.zip\" target=\"_blank\" rel=\"external\">https://github.com/daimajia/AndroidImageSlider/releases/download/v1.0.9/AndroidImageSlider-Eclipse.zip</a><br>效果图: <img src=\"https://camo.githubusercontent.com/f64413139bbaa918131384d3597c33e39333aa7f/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a773165677a6f7236366f6a64673230393530666b6e70652e676966\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<h4 id=\"五、GridView\"><a href=\"#五、GridView\" class=\"headerlink\" title=\"五、GridView\"></a>五、GridView</h4><ol>\n<li><p>StaggeredGridView<br>允许非对齐行的GridView，类似Pinterest的瀑布流，并且跟ListView一样自带View缓存，继承自ViewGroup<br>项目地址：<a href=\"https://github.com/maurycyw/StaggeredGridView\" target=\"_blank\" rel=\"external\">https://github.com/maurycyw/StaggeredGridView</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/staggered-gridview-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/staggered-gridview-demo.apk?raw=true</a><br>APP示例：Pinterest等  </p>\n</li>\n<li><p>AndroidStaggeredGrid<br>允许非对齐行的GridView，类似Pinterest的瀑布流，继承自AbsListView<br>项目地址：<a href=\"https://github.com/etsy/AndroidStaggeredGrid\" target=\"_blank\" rel=\"external\">https://github.com/etsy/AndroidStaggeredGrid</a><br>APP示例：Pinterest等  </p>\n</li>\n<li><p>PinterestLikeAdapterView<br>允许非对齐行的GridView，类似Pinterest的瀑布流，允许下拉刷新<br>项目地址：<a href=\"https://github.com/GDG-Korea/PinterestLikeAdapterView\" target=\"_blank\" rel=\"external\">https://github.com/GDG-Korea/PinterestLikeAdapterView</a><br>APP示例：Pinterest等  </p>\n</li>\n<li><p>DraggableGridView<br>Item可拖动交换位置的GridView，实际是自己继承ViewGroup实现，类似桌面的单屏效果，可屏幕自动上下滚动进行Item移动交换，多屏效果见下面PagedDragDropGrid<br>项目地址：<a href=\"https://github.com/thquinn/DraggableGridView\" target=\"_blank\" rel=\"external\">https://github.com/thquinn/DraggableGridView</a><br>Demo地址：<a href=\"https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true</a>  </p>\n</li>\n<li><p>StickyGridHeaders<br>GroupName滑动到顶端时会固定不动直到另外一个GroupName到达顶端的GridView<br>项目地址：<a href=\"https://github.com/TonicArtos/StickyGridHeaders\" target=\"_blank\" rel=\"external\">https://github.com/TonicArtos/StickyGridHeaders</a><br>效果图：<img src=\"https://github-camo.global.ssl.fastly.net/90b57e9383704c400706545225d439e057c6fcc0/687474703a2f2f342e62702e626c6f6773706f742e636f6d2f2d535f4262685758367754592f55517057306377554745492f41414141414141414776552f7a7a4a586a2d50635662592f73313630302f73637265656e2d6c616e6473636170652d736d616c6c65722e706e67\" alt=\"Renderings\">  </p>\n</li>\n<li><p>PagedDragDropGrid<br>Item可拖动交换位置、拖动删除的自定义控件，实际是自己继承ViewGroup实现，类似桌面的多屏效果，可拖动到屏幕边缘，屏幕自动左右滚动进行Item移动交换，可拖动进行删除，单屏效果见上面DraggableGridView<br>项目地址：<a href=\"https://github.com/mrKlar/PagedDragDropGrid\" target=\"_blank\" rel=\"external\">https://github.com/mrKlar/PagedDragDropGrid</a><br>在线演示：<a href=\"http://youtu.be/FYTSRfthSuQ\" target=\"_blank\" rel=\"external\">http://youtu.be/FYTSRfthSuQ</a>  </p>\n</li>\n<li><p>Android-DraggableGridViewPager<br>Item可拖动交换位置的GridView，实际是自己继承ViewGroup实现，类似桌面的多屏效果，可屏幕自动左右滚动进行Item移动交换，单屏效果见上面DraggableGridView<br>项目地址：<a href=\"https://github.com/zzhouj/Android-DraggableGridViewPager\" target=\"_blank\" rel=\"external\">https://github.com/zzhouj/Android-DraggableGridViewPager</a><br>Demo地址：<a href=\"https://github.com/Trinea/trinea-download/blob/master/draggable-grid-viewpager-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/trinea-download/blob/master/draggable-grid-viewpager-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>TwoWayGridView<br>可横向滚动的GridView<br>项目地址：<a href=\"https://github.com/jess-anders/two-way-gridview\" target=\"_blank\" rel=\"external\">https://github.com/jess-anders/two-way-gridview</a>  </p>\n</li>\n<li><p>PagingGridView<br>分页加载的GridView。当滑动到GridView底部最后一个行时，显示一个进度行，然后加载下一页数据，并显示。<br>项目地址：<a href=\"https://github.com/nicolasjafelle/PagingGridView\" target=\"_blank\" rel=\"external\">https://github.com/nicolasjafelle/PagingGridView</a>  </p>\n</li>\n<li><p>AsymmetricGridView<br>一个支持跨行和跨列可变Item大小的GridView<br>项目地址：<a href=\"https://github.com/felipecsl/AsymmetricGridView\" target=\"_blank\" rel=\"external\">https://github.com/felipecsl/AsymmetricGridView</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.felipecsl.asymmetricgridview.app\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.felipecsl.asymmetricgridview.app</a><br>效果图：<img src=\"https://raw.githubusercontent.com/felipecsl/AsymmetricGridView/master/screenshots/ss_5_cols.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>GridView with Header and Footer<br>和<code>ListView</code>一样带头部和底部的<code>GridView</code>，用法和<code>ListView</code>一样<br>项目地址：<a href=\"https://github.com/liaohuqiu/android-GridViewWithHeaderAndFooter\" target=\"_blank\" rel=\"external\">https://github.com/liaohuqiu/android-GridViewWithHeaderAndFooter</a><br>效果图：<img src=\"https://raw.githubusercontent.com/liaohuqiu/android-GridViewWithHeaderAndFooter/master/screen-shot.png\" alt=\"Screen Shot\">  </p>\n</li>\n</ol>\n<h4 id=\"六、ImageView\"><a href=\"#六、ImageView\" class=\"headerlink\" title=\"六、ImageView\"></a>六、ImageView</h4><ol>\n<li><p>PhotoView<br>支持双击或双指缩放的ImageView，在ViewPager等Scrolling view中正常使用，相比上面的AndroidTouchGallery，不仅支持ViewPager，同时支持单个ImageView<br>项目地址：<a href=\"https://github.com/chrisbanes/PhotoView\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/PhotoView</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=uk.co.senab.photoview.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=uk.co.senab.photoview.sample</a><br>APP示例：photup  </p>\n</li>\n<li><p>android-gif-drawable<br>支持gif显示的view，用jni实现的，编译生成so库后直接xml定义view即可，而且本身不依赖于其他开源项目所以相对下面的ImageViewEx简单的多<br>项目地址：<a href=\"https://github.com/koral--/android-gif-drawable\" target=\"_blank\" rel=\"external\">https://github.com/koral--/android-gif-drawable</a>  </p>\n</li>\n<li><p>ImageViewEx<br>支持Gif显示的ImageView，依赖很多，编译过程很繁琐<br>项目地址：<a href=\"https://github.com/frapontillo/ImageViewEx\" target=\"_blank\" rel=\"external\">https://github.com/frapontillo/ImageViewEx</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/imageviewex-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/imageviewex-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>RoundedImageView<br>带圆角的ImageView<br>项目地址：<a href=\"https://github.com/vinc3m1/RoundedImageView\" target=\"_blank\" rel=\"external\">https://github.com/vinc3m1/RoundedImageView</a><br>效果图：<img src=\"https://raw.github.com/makeramen/RoundedImageView/master/screenshot.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>SelectableRoundedImageView<br>ImageView允许四个角的每一个有不同的半径值。也允许椭圆形、圆形的形状或者边<br>项目地址：<a href=\"https://github.com/pungrue26/SelectableRoundedImageView\" target=\"_blank\" rel=\"external\">https://github.com/pungrue26/SelectableRoundedImageView</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.joooonho\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.joooonho</a><br>效果图：<img src=\"https://camo.githubusercontent.com/25d2e5fb8783b5dd09c00b03091172a79c69350e/687474703a2f2f692e696d6775722e636f6d2f55355653376d322e706e673f31\" alt=\"Renderings\">  </p>\n</li>\n<li><p>ColorArt<br>根据图片的均色设置背景色显示文字和图片，类似itune11中效果<br>项目地址：<a href=\"https://github.com/MichaelEvans/ColorArt\" target=\"_blank\" rel=\"external\">https://github.com/MichaelEvans/ColorArt</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/color-art-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/color-art-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>CircleImageView<br>圆形的ImageView<br>项目地址：<a href=\"https://github.com/hdodenhof/CircleImageView\" target=\"_blank\" rel=\"external\">https://github.com/hdodenhof/CircleImageView</a><br>效果图：<img src=\"https://raw.github.com/hdodenhof/CircleImageView/master/screenshot.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>ImageViewZoom<br>支持放大和平移的ImageView<br>项目地址：<a href=\"https://github.com/sephiroth74/ImageViewZoom\" target=\"_blank\" rel=\"external\">https://github.com/sephiroth74/ImageViewZoom</a><br>APP示例：<a href=\"https://play.google.com/store/apps/details?id=com.aviary.android.feather\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.aviary.android.feather</a>  </p>\n</li>\n<li><p>KenBurnsView<br>实现Ken Burns effect效果，达到身临其境效果的ImageView<br>项目地址：<a href=\"https://github.com/flavioarfaria/KenBurnsView\" target=\"_blank\" rel=\"external\">https://github.com/flavioarfaria/KenBurnsView</a>  </p>\n</li>\n<li><p>CustomShapeImageView<br>各种形状的ImageView, 相比上面的圆形ImageView，多了更多形状<br>项目地址：<a href=\"https://github.com/MostafaGazar/CustomShapeImageView\" target=\"_blank\" rel=\"external\">https://github.com/MostafaGazar/CustomShapeImageView</a><br>效果图：<img src=\"https://raw.github.com/MostafaGazar/CustomShapeImageView/master/Screenshot_2013-11-05-23-08-12.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Shape Image View<br>可以自定义各种形状的ImageView, 并且支持边框<br>项目地址：<a href=\"https://github.com/siyamed/android-shape-imageview\" target=\"_blank\" rel=\"external\">https://github.com/siyamed/android-shape-imageview</a><br>效果图：<img height=\"500px\" src=\"https://github.com/siyamed/android-shape-imageview/raw/master/images/shader-buble.png\"><img height=\"500px\" src=\"https://github.com/siyamed/android-shape-imageview/raw/master/images/all-samples.png\">  </p>\n</li>\n<li><p>TextDrawable<br>一个用于生成带有文本或者字母的图片的轻量级库。扩展自Drawable，因此可用于现有/自定义/网络等ImageView类，并且包含一个流接口用于创建drawables以及一个定制的ColorGenerator<br>项目地址：<a href=\"https://github.com/amulyakhare/TextDrawable\" target=\"_blank\" rel=\"external\">https://github.com/amulyakhare/TextDrawable</a><br>效果图：<img src=\"https://raw.githubusercontent.com/amulyakhare/TextDrawable/master/screens/screen7.png\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<h4 id=\"七、ProgressBar\"><a href=\"#七、ProgressBar\" class=\"headerlink\" title=\"七、ProgressBar\"></a>七、ProgressBar</h4><ol>\n<li><p>SmoothProgressBar<br>水平进度条<br>项目地址：<a href=\"https://github.com/castorflex/SmoothProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/castorflex/SmoothProgressBar</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=fr.castorflex.android.smoothprogressbar.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=fr.castorflex.android.smoothprogressbar.sample</a>  </p>\n</li>\n<li><p>ProgressWheel<br>支持进度显示的圆形ProgressBar<br>项目地址：<a href=\"https://github.com/Todd-Davies/ProgressWheel\" target=\"_blank\" rel=\"external\">https://github.com/Todd-Davies/ProgressWheel</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/progress-wheel-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/progress-wheel-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>android-square-progressbar<br>在图片周围显示进度<br>项目地址：<a href=\"https://github.com/mrwonderman/android-square-progressbar\" target=\"_blank\" rel=\"external\">https://github.com/mrwonderman/android-square-progressbar</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=net.yscs.android.square_progressbar_example\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=net.yscs.android.square_progressbar_example</a><br>效果图：<img src=\"https://googledrive.com/host/0BwESwPCuXtw7eExwSFVLQkR2TTg/newscreen1.png\" alt=\"Renderings\"><br>APP示例：square  </p>\n</li>\n<li><p>HoloCircularProgressBar<br>Android4.1 时钟App样式<br>项目地址：<a href=\"https://github.com/passsy/android-HoloCircularProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/passsy/android-HoloCircularProgressBar</a><br>效果图：<img src=\"https://raw.github.com/passsy/android-HoloCircularProgressBar/master/raw/screenshot1.png\" alt=\"Renderings\"><br>APP示例：Android4.1时钟App  </p>\n</li>\n<li><p>ProgressButton<br>通过图钉的不同状态显示进度<br>项目地址：<a href=\"https://github.com/f2prateek/progressbutton\" target=\"_blank\" rel=\"external\">https://github.com/f2prateek/progressbutton</a><br>效果图：<img src=\"http://f2prateek.com/progressbutton/static/states.png\" alt=\"Renderings\"><br>文档介绍：<a href=\"http://f2prateek.com/progressbutton/\" target=\"_blank\" rel=\"external\">http://f2prateek.com/progressbutton/</a>  </p>\n</li>\n<li><p>GoogleProgressBar<br>类似google 多个圆形卡片翻转的progressBar<br>项目地址：<a href=\"https://github.com/jpardogo/GoogleProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/jpardogo/GoogleProgressBar</a><br>效果图：<img src=\"https://raw.githubusercontent.com/jpardogo/GoogleProgressBar/master/art/GoogleProgressBar.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>TH-ProgressButton<br>带圆形进度显示的按钮<br>项目地址；<a href=\"https://github.com/torryharris/TH-ProgressButton\" target=\"_blank\" rel=\"external\">https://github.com/torryharris/TH-ProgressButton</a><br>效果图：<img src=\"https://raw.github.com/Vyshakh-K/TH-ProgressButton/master/screenshots/progressshot1.png\" alt=\"Renderings\">  <img src=\"https://raw.github.com/Vyshakh-K/TH-ProgressButton/master/screenshots/progressshot2.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>NumberProgressBar<br>带数字进度的进度条<br>项目地址：<a href=\"https://github.com/daimajia/NumberProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/daimajia/NumberProgressBar</a><br>效果图：<img src=\"https://camo.githubusercontent.com/0c92568af7ec4e04e2e1503acdd2ca99854ab0b5/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a77316566797264386e376937673230637a30326d7135662e676966\" alt=\"Renderings\">  </p>\n</li>\n<li><p>CircularProgressDrawable<br>带圆形进度显示的进度条<br>项目地址：<a href=\"https://github.com/Sefford/CircularProgressDrawable\" target=\"_blank\" rel=\"external\">https://github.com/Sefford/CircularProgressDrawable</a><br>效果图：<img src=\"https://raw.githubusercontent.com/Sefford/CircularProgressDrawable/master/overshoot.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android-RoundCornerProgressBar<br>Android 圆角 ProgressBar，可自定义圆角颜色和半径，包括带 Icon 和不带 Icon 两种类型。<br>项目地址：<a href=\"https://github.com/akexorcist/Android-RoundCornerProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/akexorcist/Android-RoundCornerProgressBar</a><br>效果图：<img src=\"https://raw.githubusercontent.com/akexorcist/Android-RoundCornerProgressBar/master/image/screenshot_02.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>circular-progress-button<br>带进度显示的Button<br>项目地址：<a href=\"https://github.com/dmytrodanylyk/circular-progress-button\" target=\"_blank\" rel=\"external\">https://github.com/dmytrodanylyk/circular-progress-button</a><br>效果图：<img src=\"https://raw.githubusercontent.com/dmytrodanylyk/circular-progress-button/master/screenshots/intro.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>WaveView<br>一个波纹效果的 View，可用来做 ProgressBar<br>项目地址：<a href=\"https://github.com/john990/WaveView\" target=\"_blank\" rel=\"external\">https://github.com/john990/WaveView</a><br>Demo地址：<a href=\"https://raw.github.com/john990/WaveView/master/screenshot%26apk/demo.unaligned.apk\" target=\"_blank\" rel=\"external\">https://raw.github.com/john990/WaveView/master/screenshot%26apk/demo.unaligned.apk</a><br>效果图：<img src=\"https://camo.githubusercontent.com/60722e9d4f2d2daa78a8650cb27a32adea82bdd4/68747470733a2f2f7261772e6769746875622e636f6d2f6a6f686e3939302f57617665566965772f6d61737465722f73637265656e73686f7425323661706b2f73637265656e73686f742e676966\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android L 效果的ProgressBar<br>项目地址：<a href=\"https://github.com/tigerguixh/ProgressBar\" target=\"_blank\" rel=\"external\">https://github.com/tigerguixh/ProgressBar</a><br>Demo地址: <a href=\"https://github.com/tigerguixh/ProgressBar/blob/master/bin/ProgressBar.apk\" target=\"_blank\" rel=\"external\">https://github.com/tigerguixh/ProgressBar/blob/master/bin/ProgressBar.apk</a><br>效果图: <img src=\"https://github.com/cr1944/ProgressBar/raw/master/1.gif\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<h4 id=\"八、TextView\"><a href=\"#八、TextView\" class=\"headerlink\" title=\"八、TextView\"></a>八、TextView</h4><p>包括TextView及所有继承自TextView控件，如EditText、Button、RadioButton  </p>\n<ol>\n<li><p>android-flowtextview<br>文字自动环绕其他View的Layout<br>项目地址：<a href=\"https://github.com/deano2390/FlowTextView\" target=\"_blank\" rel=\"external\">https://github.com/deano2390/FlowTextView</a><br>效果图：<a href=\"http://i949.photobucket.com/albums/ad332/vostroman1500/1.png\" target=\"_blank\" rel=\"external\">http://i949.photobucket.com/albums/ad332/vostroman1500/1.png</a>  </p>\n</li>\n<li><p>Android Form EditText<br>验证输入合法性的编辑框，支持输入、英文、ip、url等多种正则验证<br>项目地址：<a href=\"https://github.com/vekexasia/android-edittext-validator\" target=\"_blank\" rel=\"external\">https://github.com/vekexasia/android-edittext-validator</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.andreabaccega.edittextformexample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.andreabaccega.edittextformexample</a>  </p>\n</li>\n<li><p>Emojicon<br>支持emojis的TextView和EditText<br>项目地址：<a href=\"https://github.com/rockerhieu/emojicon\" target=\"_blank\" rel=\"external\">https://github.com/rockerhieu/emojicon</a><br>文档介绍：<a href=\"http://rockerhieu.com/emojicon/\" target=\"_blank\" rel=\"external\">http://rockerhieu.com/emojicon/</a>  </p>\n</li>\n<li><p>android-circlebutton<br>Android圆形按钮，实际实现是继承自ImageView<br>项目地址：<a href=\"https://github.com/markushi/android-circlebutton\" target=\"_blank\" rel=\"external\">https://github.com/markushi/android-circlebutton</a><br>Demo地址：<a href=\"https://github.com/markushi/android-circlebutton/blob/master/example/example.apk\" target=\"_blank\" rel=\"external\">https://github.com/markushi/android-circlebutton/blob/master/example/example.apk</a>  </p>\n</li>\n<li><p>Segmented Radio Buttons for Android<br>iOS’s segmented controls的实现<br>项目地址：<a href=\"https://github.com/vinc3m1/android-segmentedradiobutton\" target=\"_blank\" rel=\"external\">https://github.com/vinc3m1/android-segmentedradiobutton</a><br>Demo地址：<a href=\"https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true</a><br>效果图：<img src=\"https://raw.github.com/vinc3m1/android-segmentedradiobutton/master/screens/segmentedradio.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Chips EditText Library<br>支持国家名字联想从而选择显示该国国旗的EditText，实际就是通过SpannableStringBuilder实现<br>项目地址：<a href=\"https://github.com/kpbird/chips-edittext-library\" target=\"_blank\" rel=\"external\">https://github.com/kpbird/chips-edittext-library</a><br>Demo地址：<a href=\"https://github.com/kpbird/chips-edittext-library/tree/master/ChipsEditTextDemo/bin\" target=\"_blank\" rel=\"external\">https://github.com/kpbird/chips-edittext-library/tree/master/ChipsEditTextDemo/bin</a>  </p>\n</li>\n<li><p>AutoFitTextView<br>可固定边界内容字体大小自适应的TextView<br>项目地址：<a href=\"https://github.com/grantland/android-autofittextview\" target=\"_blank\" rel=\"external\">https://github.com/grantland/android-autofittextview</a>  </p>\n</li>\n<li><p>Shimmer for Android<br>文字发淡光的TextView<br>项目地址：<a href=\"https://github.com/RomainPiel/Shimmer-android\" target=\"_blank\" rel=\"external\">https://github.com/RomainPiel/Shimmer-android</a>  </p>\n</li>\n<li><p>Titanic<br>可以显示水位上升下降(不知道该怎么描述 囧)的TextView<br>项目地址：<a href=\"https://github.com/RomainPiel/Titanic\" target=\"_blank\" rel=\"external\">https://github.com/RomainPiel/Titanic</a><br>效果图：<img src=\"https://github.com/RomainPiel/Titanic/raw/master/titanic.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>android-iconify<br>提供带Icon的TextView,Menu,Button等<br>项目地址：<a href=\"https://github.com/JoanZapata/android-iconify\" target=\"_blank\" rel=\"external\">https://github.com/JoanZapata/android-iconify</a>  </p>\n</li>\n<li><p>Calligraphy<br>让我们在android开发中使用自定义字体变得更加简单<br>项目地址 ：<a href=\"https://github.com/chrisjenx/Calligraphy\" target=\"_blank\" rel=\"external\">https://github.com/chrisjenx/Calligraphy</a><br>效果图：<img src=\"https://github.com/chrisjenx/Calligraphy/raw/master/screenshot.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>CreditsRoll<br>类似星球大战字幕效果的TextView<br>项目地址：<a href=\"https://github.com/frakbot/CreditsRoll\" target=\"_blank\" rel=\"external\">https://github.com/frakbot/CreditsRoll</a>  </p>\n</li>\n<li><p>android-process-buton<br>带加载或提交进度的Button<br>项目地址：<a href=\"https://github.com/dmytrodanylyk/android-process-buton\" target=\"_blank\" rel=\"external\">https://github.com/dmytrodanylyk/android-process-buton</a>  </p>\n</li>\n<li><p>FButton<br>扁平化的Button<br>项目地址：<a href=\"https://github.com/hoang8f/android-flat-button\" target=\"_blank\" rel=\"external\">https://github.com/hoang8f/android-flat-button</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo</a>  </p>\n</li>\n<li><p>FloatingActionButton<br>一个类似Android版Google+浮动功能按钮的控件，可以响应ListView的滚动事件。当列表向上滚动的时候会自动显示，向下滚动的时候自动隐藏。<br>项目地址：<a href=\"https://github.com/makovkastar/FloatingActionButton\" target=\"_blank\" rel=\"external\">https://github.com/makovkastar/FloatingActionButton</a><br>Demo地址：<a href=\"https://github.com/makovkastar/FloatingActionButton/tree/master/\" target=\"_blank\" rel=\"external\">https://github.com/makovkastar/FloatingActionButton/tree/master/</a><br>效果图：<img src=\"https://raw.githubusercontent.com/makovkastar/FloatingActionButton/master/art/demo.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android Saripaar<br>Android表单验证<br>项目地址：<a href=\"https://github.com/ragunathjawahar/android-saripaar/\" target=\"_blank\" rel=\"external\">https://github.com/ragunathjawahar/android-saripaar/</a>  </p>\n</li>\n<li><p>JumpingBeans<br>文字像 Mexican beans 一样跳动<br>项目地址：<a href=\"https://github.com/frakbot/JumpingBeans\" target=\"_blank\" rel=\"external\">https://github.com/frakbot/JumpingBeans</a><br>Demo地址：<a href=\"http://play.google.com/store/apps/details?id=net.frakbot.jumpingbeans.demo\" target=\"_blank\" rel=\"external\">http://play.google.com/store/apps/details?id=net.frakbot.jumpingbeans.demo</a><br>效果图：<img src=\"https://github.com/frakbot/JumpingBeans/blob/master/art/jumpingdots.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>FancyButtons<br>一个不用图片就可以帮助我们创建出漂亮按钮的库。<br>项目地址：<a href=\"https://github.com/medyo/fancybuttons\" target=\"_blank\" rel=\"external\">https://github.com/medyo/fancybuttons</a><br>Demo地址：<a href=\"https://github.com/medyo/fancybuttons/tree/master/samples\" target=\"_blank\" rel=\"external\">https://github.com/medyo/fancybuttons/tree/master/samples</a><br>效果图：<img src=\"https://camo.githubusercontent.com/8c5800ef180f69d302237132906737bf71a52caf/68747470733a2f2f7261772e6769746875622e636f6d2f6d6564796f2f66616e6379627574746f6e732f6d61737465722f73637265656e73686f74732f66616e63792e706e67\" alt=\"Renderings\"><br><img src=\"https://raw.githubusercontent.com/medyo/fancybuttons/master/screenshots/fancy2.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android-RobotoTextView<br>一个实现了所有Roboto字体的TextView，包括新出的Roboto Slab字体。<br>项目地址：<a href=\"https://github.com/johnkil/Android-RobotoTextView\" target=\"_blank\" rel=\"external\">https://github.com/johnkil/Android-RobotoTextView</a><br>Demo地址：<a href=\"http://play.google.com/store/apps/details?id=com.devspark.robototextview\" target=\"_blank\" rel=\"external\">http://play.google.com/store/apps/details?id=com.devspark.robototextview</a><br>Demo项目：<a href=\"https://github.com/johnkil/Android-RobotoTextView/tree/master/robototextview-sample\" target=\"_blank\" rel=\"external\">https://github.com/johnkil/Android-RobotoTextView/tree/master/robototextview-sample</a><br>效果图：<img height=\"400px\" src=\"https://camo.githubusercontent.com/f058c810055e1ff12fa995346059ad399d9c0f95/687474703a2f2f6934362e74696e797069632e636f6d2f6239646736392e706e67\">&gt;  </p>\n</li>\n<li><p>Android-WizardPager<br>一个表单向导库<br>项目地址：<a href=\"https://github.com/romannurik/android-wizardpager\" target=\"_blank\" rel=\"external\">https://github.com/romannurik/android-wizardpager</a><br>Demo项目：<a href=\"https://github.com/str4d/android-wizardpager/tree/textfield\" target=\"_blank\" rel=\"external\">https://github.com/str4d/android-wizardpager/tree/textfield</a><br>效果图：<img height=\"400px\" src=\"https://camo.githubusercontent.com/685a1eee3b9b7eb6a0409061031654ea7d6b0b17/68747470733a2f2f6c68352e676f6f676c6575736572636f6e74656e742e636f6d2f2d664944555a3074514373632f554a4e4c6a6e504c5447492f41414141414141416f4f382f784b63654f61746c6a50302f773431332d683638392d6e6f2f322e706e67\">  </p>\n</li>\n<li><p>RippleView<br>一个实现了 Android L 上才引入的点击按钮后出现水波纹效果的按钮<br>项目地址：<a href=\"https://github.com/siriscac/RippleView\" target=\"_blank\" rel=\"external\">https://github.com/siriscac/RippleView</a><br>Demo项目：<a href=\"https://github.com/siriscac/RippleView/tree/master/RippleViewExample\" target=\"_blank\" rel=\"external\">https://github.com/siriscac/RippleView/tree/master/RippleViewExample</a><br>效果图：<img src=\"https://camo.githubusercontent.com/eec41193900aad4803dcf18bc9915fafa3f7d1cf/68747470733a2f2f7261772e6769746875622e636f6d2f73697269736361632f526970706c65566965772f6d61737465722f53637265656e732f53637265656e2e676966\" alt=\"Renderings\">  </p>\n</li>\n<li><p>RippleEffect<br>一个实现Material Design Ripple效果的库，支持Android API 9+以上版本。<br>项目地址：<a href=\"https://github.com/traex/RippleEffect\" target=\"_blank\" rel=\"external\">https://github.com/traex/RippleEffect</a><br>Demo项目：<a href=\"https://github.com/traex/RippleEffect/tree/master/sample\" target=\"_blank\" rel=\"external\">https://github.com/traex/RippleEffect/tree/master/sample</a><br>效果图：<img src=\"https://raw.githubusercontent.com/traex/RippleEffect/master/header.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android Floating Label Widgets<br>包含一系列控件，这些控件特点是：有默认值，当值不为空时默认值浮动到上面变为提示<br>项目地址：<a href=\"https://github.com/marvinlabs/android-floatinglabel-widgets\" target=\"_blank\" rel=\"external\">https://github.com/marvinlabs/android-floatinglabel-widgets</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.marvinlabs.widget.floatinglabel.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.marvinlabs.widget.floatinglabel.demo</a><br>在线演示：<a href=\"http://www.youtube.com/watch?v=hpZD9gJcRg0&amp;feature=youtu.be\" target=\"_blank\" rel=\"external\">http://www.youtube.com/watch?v=hpZD9gJcRg0&amp;feature=youtu.be</a>  </p>\n</li>\n<li><p>MaterialEditText<br>EditText 的 Material Design 实现。包含 <a href=\"http://www.google.com/design/spec/components/text-fields.html\" target=\"_blank\" rel=\"external\">Google Material Design Spec</a>中的UI效果和一些新增特性。<br>项目地址：<a href=\"https://github.com/rengwuxian/MaterialEditText\" target=\"_blank\" rel=\"external\">https://github.com/rengwuxian/MaterialEditText</a>  </p>\n</li>\n<li><p>MultiActionTextView<br>可以分别给TextView中的某几个字设置点击事件的TextView<br>项目地址：<a href=\"https://github.com/ajaysahani/MultiActionTextView\" target=\"_blank\" rel=\"external\">https://github.com/ajaysahani/MultiActionTextView</a><br>效果图：<img src=\"https://camo.githubusercontent.com/1223e37d084e84ec0e22a1b27e7513661d0e1b39/687474703a2f2f692e696d6775722e636f6d2f773934576f53582e706e67\" alt=\"Renderings\">  </p>\n</li>\n<li><p>ToggleButton<br>状态切换的 Button，类似 iOS，用 View 实现<br>项目地址：<a href=\"https://github.com/zcweng/ToggleButton\" target=\"_blank\" rel=\"external\">https://github.com/zcweng/ToggleButton</a><br>效果图：<img src=\"https://github.com/zcweng/ToggleButton/raw/master/ToggleButtonSample/21879.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>SlideSwitch<br>状态切换的开关，可以设置为类似IOS的圆形，也可以设置为矩形，用 View 实现<br>项目地址：<a href=\"https://github.com/Leaking/SlideSwitch\" target=\"_blank\" rel=\"external\">https://github.com/Leaking/SlideSwitch</a><br>效果图：<img src=\"https://github.com/Leaking/SlideSwitch/blob/master/Example/TestLibs/res/drawable-hdpi/slide_c.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>ExpandableTextView<br>可展开和收缩内容的TextView。<br>项目地址：<a href=\"https://github.com/Manabu-GT/ExpandableTextView\" target=\"_blank\" rel=\"external\">https://github.com/Manabu-GT/ExpandableTextView</a><br>效果图：<img height=\"500px\" src=\"https://camo.githubusercontent.com/8bf46083b3bd152c2051ae4c234649dbbb975376/68747470733a2f2f7261772e6769746875622e636f6d2f4d616e6162752d47542f457870616e6461626c6554657874566965772f6d61737465722f6172742f726561646d655f64656d6f2e676966\"></p>\n</li>\n</ol>\n<h4 id=\"九、ScrollView\"><a href=\"#九、ScrollView\" class=\"headerlink\" title=\"九、ScrollView\"></a>九、ScrollView</h4><ol>\n<li><p>Discrollview<br>支持滚动时Item淡入淡出，平移，缩放效果的ScrollView<br>项目地址：<a href=\"https://github.com/flavienlaurent/discrollview\" target=\"_blank\" rel=\"external\">https://github.com/flavienlaurent/discrollview</a><br>Demo地址：<a href=\"https://github.com/flavienlaurent/discrollview/raw/master/sample.apk\" target=\"_blank\" rel=\"external\">https://github.com/flavienlaurent/discrollview/raw/master/sample.apk</a>  </p>\n</li>\n<li><p>PullScrollView<br>仿照新浪微博Android客户端个人中心的ScrollView，下拉背景伸缩回弹效果。<br>项目地址：<a href=\"https://github.com/MarkMjw/PullScrollView\" target=\"_blank\" rel=\"external\">https://github.com/MarkMjw/PullScrollView</a><br>效果图：<img src=\"https://raw.github.com/MarkMjw/PullScrollView/master/Screenshots/1.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>ArcLayout<br>一个非常简单的弧布局库<br>项目地址: <a href=\"https://github.com/ogaclejapan/ArcLayout\" target=\"_blank\" rel=\"external\">https://github.com/ogaclejapan/ArcLayout</a><br>Demo地址k: <a href=\"https://play.google.com/store/apps/details?id=com.ogaclejapan.arclayout.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.ogaclejapan.arclayout.demo</a><br>效果图: <img src=\"https://raw.githubusercontent.com/ogaclejapan/ArcLayout/master/art/demo1.gif\" alt=\"Renderings\"><br><img src=\"https://raw.githubusercontent.com/ogaclejapan/ArcLayout/master/art/demo2.gif\" alt=\"renderings\">  </p>\n</li>\n<li><p>ParallaxScrollView<br>支持视差滚动的ScrollView ，背景图片的滚动速度小于ScrollView中子控件的滚动速度<br>项目地址：<a href=\"https://github.com/chrisjenx/ParallaxScrollView\" target=\"_blank\" rel=\"external\">https://github.com/chrisjenx/ParallaxScrollView</a><br>Demo地址：<a href=\"http://cloud.github.com/downloads/chrisjenx/ParallaxScrollView/ParallaxScrollViewDemo-v1.0.5.apk\" target=\"_blank\" rel=\"external\">http://cloud.github.com/downloads/chrisjenx/ParallaxScrollView/ParallaxScrollViewDemo-v1.0.5.apk</a>  </p>\n</li>\n<li><p>AKParallax-Android<br>支持视差滚动的ScrollView<br>项目地址：<a href=\"https://github.com/ideaismobile/AKParallax-Android\" target=\"_blank\" rel=\"external\">https://github.com/ideaismobile/AKParallax-Android</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.appkraft.parallax_sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.appkraft.parallax_sample</a>  </p>\n</li>\n</ol>\n<ol>\n<li><p>Android-ObservableScrollView<br>监听滚动视图滚动事件的库，帮助与Toolbar的交互动效处理与Material Design的实现<br>项目地址：<a href=\"https://github.com/ksoichiro/Android-ObservableScrollView\" target=\"_blank\" rel=\"external\">https://github.com/ksoichiro/Android-ObservableScrollView</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.github.ksoichiro.android.observablescrollview.samples2\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.github.ksoichiro.android.observablescrollview.samples2</a>  </p>\n</li>\n<li><p>OverScrollView<br>有弹性的ScrollView，实现了当手指滑动到ScrollView的顶部、底部时，可以继续的向上、向下拉伸。当释放手指的时候，向上、下回弹<br>项目地址：<a href=\"https://github.com/EverythingMe/OverScrollView\" target=\"_blank\" rel=\"external\">https://github.com/EverythingMe/OverScrollView</a></p>\n</li>\n</ol>\n<h4 id=\"十、TimeView\"><a href=\"#十、TimeView\" class=\"headerlink\" title=\"十、TimeView\"></a>十、TimeView</h4><p>包括TimePicker、DatePicker、CalendarView、Clock等时间相关控件  </p>\n<ol>\n<li><p>android-times-square<br>Android日历时间部件，支持选取单个日期，多个日期，及日期区间段和对话框形式显示<br>项目地址：<a href=\"https://github.com/square/android-times-square\" target=\"_blank\" rel=\"external\">https://github.com/square/android-times-square</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/times-square-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/times-square-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>android-calendar-card<br>日历<br>项目地址：<a href=\"https://github.com/kenumir/android-calendar-card\" target=\"_blank\" rel=\"external\">https://github.com/kenumir/android-calendar-card</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.wt.calendarcardsample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.wt.calendarcardsample</a><br>效果图：<img src=\"https://raw.github.com/kenumir/android-calendar-card/master/calendar-card-sample/_work/device-2013-10-12-151801.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>AndroidWheel<br>Android Wheel支持城市、多种日期时间、密码、图片<br>项目地址：<a href=\"https://code.google.com/p/android-wheel/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-wheel/</a><br>效果图：<img src=\"http://farm6.staticflickr.com/5532/11621528786_220c040ba5_o.jpg\" alt=\"Renderings\">  </p>\n</li>\n<li><p>GoogleDateTimePickers<br>时间选择部件<br>项目地址：<a href=\"https://github.com/Mirkoddd/GoogleDateTimePickers\" target=\"_blank\" rel=\"external\">https://github.com/Mirkoddd/GoogleDateTimePickers</a><br>文档介绍：<a href=\"https://play.google.com/store/apps/details?id=com.mirko.sample&amp;hl=it\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.mirko.sample&amp;hl=it</a>  </p>\n</li>\n<li><p>DateTimePicker<br>日期选择部件(Google Agenda的样式风格)<br>项目地址：<a href=\"https://github.com/flavienlaurent/datetimepicker\" target=\"_blank\" rel=\"external\">https://github.com/flavienlaurent/datetimepicker</a><br>Demo地址：<a href=\"https://raw.github.com/biboune/datetimepicker/master/datetimepicker-sample.apk\" target=\"_blank\" rel=\"external\">https://raw.github.com/biboune/datetimepicker/master/datetimepicker-sample.apk</a><br>效果图：<img src=\"https://camo.githubusercontent.com/493edeea3eb553ad0d0b121dbead0d7ec6a858f2/68747470733a2f2f7261772e6769746875622e636f6d2f6269626f756e652f6461746574696d657069636b65722f6d61737465722f67726170686963732f696d67312e706e67\" alt=\"Renderings\">  </p>\n</li>\n<li><p>android-betterpickers<br>提供日期、数字、时间（数字方式和钟表方式）、重复周期（闹钟的周期重复）、HMS（时、分、秒）的选择，支持以DialogFragment的弹窗选择<br>项目地址：<a href=\"https://github.com/derekbrameyer/android-betterpickers\" target=\"_blank\" rel=\"external\">https://github.com/derekbrameyer/android-betterpickers</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.doomonafireball.betterpickers.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.doomonafireball.betterpickers.sample</a><br>效果图：<img src=\"https://camo.githubusercontent.com/897ae3c71b49c4366565f3480719647687b1804a/68747470733a2f2f7261772e6769746875622e636f6d2f646572656b6272616d657965722f616e64726f69642d6265747465727069636b6572732f6d61737465722f73616d706c652f696d61676572792f7765625f666561747572655f677261706869632e706e67\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android Week View<br>日期控件，支持周，天视图，支持自定义样式<br>项目地址：<a href=\"https://github.com/alamkanak/Android-Week-View\" target=\"_blank\" rel=\"external\">https://github.com/alamkanak/Android-Week-View</a><br>效果图：<img src=\"https://github.com/alamkanak/Android-Week-View/blob/master/images/screen-shot.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>ScrollerCalendar<br>实现每行显示一年的12个月份的RecyclerView年历<br>项目地址：<a href=\"https://github.com/guanchao/ScrollerCalendar\" target=\"_blank\" rel=\"external\">https://github.com/guanchao/ScrollerCalendar</a><br>效果图：<img src=\"https://raw.githubusercontent.com/guanchao/ScrollerCalendar/master/images/sample2.gif\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<h4 id=\"十一、TipView\"><a href=\"#十一、TipView\" class=\"headerlink\" title=\"十一、TipView\"></a>十一、TipView</h4><p>包括Toast、角标、UndoBar等提示性控件  </p>\n<ol>\n<li><p>Crouton<br>丰富样式的Toast，允许alert、comfirm、info样式及点击消失样式，允许设置Toast显示时间，允许自定义View。 本文32. SuperToasts为其扩展版<br>项目地址：<a href=\"https://github.com/keyboardsurfer/Crouton\" target=\"_blank\" rel=\"external\">https://github.com/keyboardsurfer/Crouton</a><br>Demo地址：<a href=\"http://play.google.com/store/apps/details?id=de.keyboardsurfer.app.demo.crouton\" target=\"_blank\" rel=\"external\">http://play.google.com/store/apps/details?id=de.keyboardsurfer.app.demo.crouton</a>  </p>\n</li>\n<li><p>supertooltips<br>带动画效果的Tips显示<br>项目地址：<a href=\"https://github.com/nhaarman/supertooltips\" target=\"_blank\" rel=\"external\">https://github.com/nhaarman/supertooltips</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.haarman.supertooltips\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.haarman.supertooltips</a>  </p>\n</li>\n<li><p>Android ViewBadger<br>为其他View添加角标等<br>项目地址：<a href=\"https://github.com/jgilfelt/android-viewbadger\" target=\"_blank\" rel=\"external\">https://github.com/jgilfelt/android-viewbadger</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/android-viewbadger.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/android-viewbadger.apk?raw=true</a><br>效果图：<img src=\"https://github-camo.global.ssl.fastly.net/a705a3e88c75ae2394943bd7c56f725697616ea8/687474703a2f2f7777772e6a65666667696c66656c742e636f6d2f766965776261646765722f76622d31612e706e67\" alt=\"Renderings\">  </p>\n</li>\n<li><p>SuperToasts<br>更丰富样式的toast，支持Button、Progress、Horizontal Progress样式、支持进入动画、支持撤销及其动画设置<br>项目地址：<a href=\"https://github.com/JohnPersano/SuperToasts\" target=\"_blank\" rel=\"external\">https://github.com/JohnPersano/SuperToasts</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.supertoastsdemo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.supertoastsdemo</a><br>效果图：<img src=\"http://i1331.photobucket.com/albums/w597/JohnPersano/supertoasts_githubimage_zps8a5ceb7c.png\" alt=\"SuperButtonToast\">  </p>\n</li>\n<li><p>UndoBar<br>屏幕底部显示取消或是确认的PopupWindows<br>项目地址：<a href=\"https://github.com/soarcn/UndoBar\" target=\"_blank\" rel=\"external\">https://github.com/soarcn/UndoBar</a><br>效果图：<img src=\"https://github.com/soarcn/UndoBar/blob/master/art/redo.png?raw=true\" alt=\"Renderings\">  </p>\n</li>\n<li><p>UndoBar<br>屏幕底部显示取消或是确认某操作<br>项目地址：<a href=\"https://github.com/jenzz/Android-UndoBar\" target=\"_blank\" rel=\"external\">https://github.com/jenzz/Android-UndoBar</a><br>效果图：<img src=\"https://raw.github.com/jenzz/Android-UndoBar/master/assets/Screenshot2.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android-ActionItemBadge<br>可以在ActionBar的MenuItem上显示一个小角标<br>项目地址：<a href=\"https://github.com/mikepenz/Android-ActionItemBadge\" target=\"_blank\" rel=\"external\">https://github.com/mikepenz/Android-ActionItemBadge</a><br>效果图：<img src=\"https://raw.githubusercontent.com/mikepenz/Android-ActionItemBadge/master/DEV/screenshot/screenshot1_small.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>SnackBar<br>Material Design 风格的 Toast，类似 Google inbox 中的提示<br>项目地址：<a href=\"https://github.com/MrEngineer13/SnackBar\" target=\"_blank\" rel=\"external\">https://github.com/MrEngineer13/SnackBar</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.mrengineer13.snackbar.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.mrengineer13.snackbar.sample</a><br>效果图：<img src=\"https://camo.githubusercontent.com/67a39af16f3d46631567c1f7bd7dcddeb3c4c9e9/687474703a2f2f6d6174657269616c2d64657369676e2e73746f726167652e676f6f676c65617069732e636f6d2f696d616765732f636f6d706f6e656e74732d746f617374732d73706563732d737065635f746f6173745f30335f315f6c617267655f6d6470692e706e67\" alt=\"Renderings\">  </p>\n</li>\n<li><p>HeadsUp<br>在2.3上使用 android  5.0的 HeadsUp 效果<br>项目地址：<a href=\"https://github.com/zzz40500/HeadsUp\" target=\"_blank\" rel=\"external\">https://github.com/zzz40500/HeadsUp</a><br>效果图：<img src=\"http://upload-images.jianshu.io/upload_images/166866-543a5d26ab71d0f6.gif\" alt=\"heads-up.gif\"></p>\n</li>\n<li><p>Droppy<br>项目地址：<a href=\"https://github.com/shehabic/Droppy\" target=\"_blank\" rel=\"external\">https://github.com/shehabic/Droppy</a><br>特点：A simple yet-powerful and fully customizable Android drop-down menu. It supports Text with/without Icons, Separators, and even fully customized views.<br>效果力: <img src=\"https://raw.githubusercontent.com/shehabic/Droppy/screenshots/Droppy_Screenshot.png\" alt=\"Droppy\"></p>\n</li>\n</ol>\n<h4 id=\"十二、FlipView\"><a href=\"#十二、FlipView\" class=\"headerlink\" title=\"十二、FlipView\"></a>十二、FlipView</h4><ol>\n<li><p>android-flip<br>类似Flipboard翻转动画的实现<br>项目地址：<a href=\"https://github.com/openaphid/android-flip\" target=\"_blank\" rel=\"external\">https://github.com/openaphid/android-flip</a><br>Demo地址：<a href=\"https://github.com/openaphid/android-flip/blob/master/FlipView/Demo/APK/Aphid-FlipView-Demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/openaphid/android-flip/blob/master/FlipView/Demo/APK/Aphid-FlipView-Demo.apk?raw=true</a><br>APP示例：flipboard  </p>\n</li>\n<li><p>FlipImageView<br>支持x、y、z及动画选择的翻转动画的实现<br>项目地址：<a href=\"https://github.com/castorflex/FlipImageView\" target=\"_blank\" rel=\"external\">https://github.com/castorflex/FlipImageView</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=fr.castorflex.android.flipimageview\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=fr.castorflex.android.flipimageview</a>  </p>\n</li>\n<li><p>FoldableLayout<br>Flip翻转效果的ListView，目前还不支持ListView缓存<br>项目地址：<a href=\"https://github.com/alexvasilkov/FoldableLayout\" target=\"_blank\" rel=\"external\">https://github.com/alexvasilkov/FoldableLayout</a><br>Demo地址：<a href=\"http://play.google.com/store/apps/details?id=com.alexvasilkov.foldablelayout.sample\" target=\"_blank\" rel=\"external\">http://play.google.com/store/apps/details?id=com.alexvasilkov.foldablelayout.sample</a>  </p>\n</li>\n</ol>\n<h4 id=\"十三、ColorPickView\"><a href=\"#十三、ColorPickView\" class=\"headerlink\" title=\"十三、ColorPickView\"></a>十三、ColorPickView</h4><ol>\n<li><p>ColorPickerView<br>颜色选择器，支持PopupWindows或新的Activity中打开<br>项目地址：<a href=\"https://code.google.com/p/color-picker-view/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/color-picker-view/</a><br>效果图：<img src=\"http://oi41.tinypic.com/33c6mm8.jpg\" alt=\"Renderings\">  </p>\n</li>\n<li><p>HoloColorPicker<br>颜色选择器<br>项目地址：<a href=\"https://github.com/LarsWerkman/HoloColorPicker\" target=\"_blank\" rel=\"external\">https://github.com/LarsWerkman/HoloColorPicker</a><br>Demo地址：<a href=\"https://docs.google.com/file/d/0BwclyDTlLrdXRzVnTGJvTlRfU2s/edit\" target=\"_blank\" rel=\"external\">https://docs.google.com/file/d/0BwclyDTlLrdXRzVnTGJvTlRfU2s/edit</a>  </p>\n</li>\n<li><p>ColorPickerPreference<br>颜色选择器<br>项目地址：<a href=\"https://github.com/attenzione/android-ColorPickerPreference\" target=\"_blank\" rel=\"external\">https://github.com/attenzione/android-ColorPickerPreference</a><br>效果图：<img src=\"https://github.com/attenzione/android-ColorPickerPreference/raw/master/screen_2.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>ColorPicker<br>颜色选择器（Google Agenda中的样式风格）<br>项目地址：<a href=\"https://github.com/flavienlaurent/colorpicker\" target=\"_blank\" rel=\"external\">https://github.com/flavienlaurent/colorpicker</a><br>Demo地址：<a href=\"https://raw.github.com/biboune/colorpicker/master/colorpicker-sample.apk\" target=\"_blank\" rel=\"external\">https://raw.github.com/biboune/colorpicker/master/colorpicker-sample.apk</a><br>效果图：<img src=\"https://camo.githubusercontent.com/a42581e637ca379004855d69e262d85ea966fa35/68747470733a2f2f7261772e6769746875622e636f6d2f6269626f756e652f636f6c6f727069636b65722f6d61737465722f67726170686963732f696d67312e706e67\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<h4 id=\"十四、GraphView\"><a href=\"#十四、GraphView\" class=\"headerlink\" title=\"十四、GraphView\"></a>十四、GraphView</h4><ol>\n<li><p>MPAndroidChart<br>强大的图表绘制工具，支持折线图、面积图、散点图、时间图、柱状图、条图、饼图、气泡图、圆环图、范围（高至低）条形图、网状图及各种图的结合；支持图的拖拽缩放；支持 Android 2.2 以上，支持横纵轴缩放，多指缩放，展现动画、高亮、保存到 sdcard、从文件读取图表<br>项目地址：<a href=\"https://github.com/PhilJay/MPAndroidChart\" target=\"_blank\" rel=\"external\">https://github.com/PhilJay/MPAndroidChart</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.xxmassdeveloper.mpchartexample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.xxmassdeveloper.mpchartexample</a><br>Demo项目：<a href=\"https://github.com/PhilJay/MPAndroidChart/tree/master/MPChartExample\" target=\"_blank\" rel=\"external\">https://github.com/PhilJay/MPAndroidChart/tree/master/MPChartExample</a><br>效果图：<img height=\"300px\" src=\"https://camo.githubusercontent.com/a9eaa5fc7fb6c1e70b22acd09385055e0f5c4fe7/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f73696d706c6564657369676e5f6c696e656368617274342e706e67\"><br><img height=\"300px\" src=\"https://camo.githubusercontent.com/78b4bc4e50e151970961daf56e81c4c0db72d27c/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f73696d706c6564657369676e5f6261726368617274332e706e67\"><br><img src=\"https://camo.githubusercontent.com/65f51783ec05038730b481ed614b57a94e867d86/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f626172636861727432642e706e67\"><br><img src=\"https://camo.githubusercontent.com/f66a35bf430b12480d3e2ed8e3bc8d7a17db950f/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f626172636861727433642e706e67\"><br><img height=\"300px\" src=\"https://camo.githubusercontent.com/60bd0d71462ad577df775b956944b191e939728a/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d50416e64726f696443686172742f6d61737465722f73637265656e73686f74732f70696563686172745f686f6c657261646975735f73706163652e706e67\"><br><img height=\"300px\" src=\"https://camo.githubusercontent.com/6b254aa699df7f9464967009129c3017de721b77/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d50416e64726f696443686172742f6d61737465722f73637265656e73686f74732f7363617474657263686172742e706e67\"><br>在线演示：<a href=\"https://www.youtube.com/watch?v=ufaK_Hd6BpI\" target=\"_blank\" rel=\"external\">https://www.youtube.com/watch?v=ufaK_Hd6BpI</a>  </p>\n</li>\n<li><p>achartengine<br>强大的图表绘制工具，支持折线图、面积图、散点图、时间图、柱状图、条图、饼图、气泡图、圆环图、范围（高至低）条形图、拨号图/表、立方线图及各种图的结合<br>项目地址：<a href=\"https://code.google.com/p/achartengine/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/achartengine/</a><br>效果图：<img src=\"http://www.achartengine.org/dimages/average_temperature.png\" alt=\"Renderings\"><br><a href=\"http://www.achartengine.org/dimages/sales_line_and_area_chart.png\" target=\"_blank\" rel=\"external\">http://www.achartengine.org/dimages/sales_line_and_area_chart.png</a><br><a href=\"http://www.achartengine.org/dimages/temperature_range_chart.png\" target=\"_blank\" rel=\"external\">http://www.achartengine.org/dimages/temperature_range_chart.png</a><br><a href=\"http://www.achartengine.org/dimages/combined_chart.png\" target=\"_blank\" rel=\"external\">http://www.achartengine.org/dimages/combined_chart.png</a><br><a href=\"http://www.achartengine.org/dimages/budget_chart.png\" target=\"_blank\" rel=\"external\">http://www.achartengine.org/dimages/budget_chart.png</a><br>官网网址：<a href=\"http://www.achartengine.org/\" target=\"_blank\" rel=\"external\">http://www.achartengine.org/</a><br>APP示例：Wordpress Android，Google Analytics  </p>\n</li>\n<li><p>GraphView<br>绘制图表和曲线图的View，可用于Android上的曲形图、柱状图、波浪图展示<br>项目地址：<a href=\"https://github.com/jjoe64/GraphView\" target=\"_blank\" rel=\"external\">https://github.com/jjoe64/GraphView</a><br>Demo项目：<a href=\"https://github.com/jjoe64/GraphView-Demos\" target=\"_blank\" rel=\"external\">https://github.com/jjoe64/GraphView-Demos</a><br>APP示例：Wordpress Android，Google Analytics  </p>\n</li>\n<li><p>HoloGraphLibrary<br>绘制现状图、柱状图、饼状图<br>项目地址：<a href=\"https://bitbucket.org/danielnadeau/holographlibrary/src\" target=\"_blank\" rel=\"external\">https://bitbucket.org/danielnadeau/holographlibrary/src</a><br>文档介绍：<a href=\"https://bitbucket.org/danielnadeau/holographlibrary/wiki/Home\" target=\"_blank\" rel=\"external\">https://bitbucket.org/danielnadeau/holographlibrary/wiki/Home</a>  </p>\n</li>\n<li><p>XCL-Charts<br>XCL-Charts基于原生的Canvas来绘制各种图表,在设计时，尽量在保证开发效率的同时，给使用者提供足够多的定制化能力。因此使用简便,同时具有相当灵活的定制能力。目前支持3D/非3D柱形图(Bar Chart)、3D/非3D饼图(Pie Chart)、堆积图(Stacked Bar Chart)、面积图(Area Chart)、 折线图(Line Chart)、曲线图(Spline Chart)、环形图(Dount Chart)、南丁格尔玫瑰图(Rose Chart)、仪表盘(Dial Chart)、刻度盘(Gauge Chart)、雷达图(Radar Chart)、圆形图(Circle Chart)等图表。其它特性还包括支持图表缩放、手势移动、动画显示效果、高密度柱形显示、图表分界定制线、多图表的混合显示及同数据源不同类型图表切换等。<br>项目地址：<a href=\"https://github.com/xcltapestry/XCL-Charts\" target=\"_blank\" rel=\"external\">https://github.com/xcltapestry/XCL-Charts</a><br>Demo地址：<a href=\"https://github.com/xcltapestry/XCL-Charts/blob/master/XCL-Charts-demo/bin/XCL-Charts-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/xcltapestry/XCL-Charts/blob/master/XCL-Charts-demo/bin/XCL-Charts-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>EazeGraph<br>Android 图表库，支持柱状图、分层柱状图、饼状图、线性图<br>项目地址：<a href=\"https://github.com/blackfizz/EazeGraph\" target=\"_blank\" rel=\"external\">https://github.com/blackfizz/EazeGraph</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=org.eazegraph.app\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=org.eazegraph.app</a>  </p>\n</li>\n<li><p>WilliamChart<br>绘制图表的库，支持LineChartView、BarChartView和StackBarChartView三中图表类型，并且支持 Android 2.2及以上的系统。<br>项目地址：<a href=\"https://github.com/diogobernardino/WilliamChart\" target=\"_blank\" rel=\"external\">https://github.com/diogobernardino/WilliamChart</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.db.williamchartdemo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.db.williamchartdemo</a><br>Demo项目：<a href=\"https://github.com/diogobernardino/WilliamChart/tree/master/sample\" target=\"_blank\" rel=\"external\">https://github.com/diogobernardino/WilliamChart/tree/master/sample</a><br>效果图：<img src=\"https://github.com/diogobernardino/WilliamChart/raw/master/art/linechart.gif\" alt=\"Renderings\"><img src=\"https://github.com/diogobernardino/WilliamChart/raw/master/art/barchart.gif\" alt=\"Renderings\"><img src=\"https://github.com/diogobernardino/WilliamChart/raw/master/art/stackbarchart.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>HelloCharts for Android<br>支持折线图、柱状图、饼图、气泡图、组合图；支持预览、放大缩小，滚动，部分图表支持动画；支持 Android 2.2 以上<br>项目地址：<a href=\"https://github.com/lecho/hellocharts-android\" target=\"_blank\" rel=\"external\">https://github.com/lecho/hellocharts-android</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=lecho.lib.hellocharts.samples\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=lecho.lib.hellocharts.samples</a><br>在线演示：<a href=\"https://www.youtube.com/watch?v=xbSBjyjH2SY\" target=\"_blank\" rel=\"external\">https://www.youtube.com/watch?v=xbSBjyjH2SY</a>  </p>\n</li>\n</ol>\n<h4 id=\"十五、UI-Style\"><a href=\"#十五、UI-Style\" class=\"headerlink\" title=\"十五、UI Style\"></a>十五、UI Style</h4><p>不同样式的系统UI风格，如IOS、Bootstrap风格</p>\n<ol>\n<li><p>UITableView<br>ios风格控件，包括Button、ListView、TableView<br>项目地址：<a href=\"https://github.com/thiagolocatelli/android-uitableview\" target=\"_blank\" rel=\"external\">https://github.com/thiagolocatelli/android-uitableview</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/ui-tableview-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/ui-tableview-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>ATableView<br>ios风格控件<br>项目地址：<a href=\"https://github.com/dmacosta/ATableView\" target=\"_blank\" rel=\"external\">https://github.com/dmacosta/ATableView</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.nakardo.atableview.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.nakardo.atableview.demo</a>  </p>\n</li>\n<li><p>Cards-UI<br>卡片式View，支持单个卡片，item为卡片的ListView<br>项目地址：<a href=\"https://github.com/afollestad/Cards-UI\" target=\"_blank\" rel=\"external\">https://github.com/afollestad/Cards-UI</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/cards-ui-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/cards-ui-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>cardslib<br>卡片式View，支持单个卡片，item为卡片的ListView和GridView<br>项目地址：<a href=\"https://github.com/gabrielemariotti/cardslib\" target=\"_blank\" rel=\"external\">https://github.com/gabrielemariotti/cardslib</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=it.gmariotti.cardslib.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=it.gmariotti.cardslib.demo</a>  </p>\n</li>\n<li><p>Android-Bootstrap<br>Bootstrap 风格的按钮<br>项目地址：<a href=\"https://github.com/Bearded-Hen/Android-Bootstrap\" target=\"_blank\" rel=\"external\">https://github.com/Bearded-Hen/Android-Bootstrap</a><br>效果图：<img src=\"https://raw.github.com/Bearded-Hen/Android-Bootstrap/master/images/device_image.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Material Design Android Library<br>Android L 中 Material Design 风格的组件适配到 Android 2.2+<br>项目地址：<a href=\"https://github.com/navasmdc/MaterialDesignLibrary\" target=\"_blank\" rel=\"external\">https://github.com/navasmdc/MaterialDesignLibrary</a>  </p>\n</li>\n<li><p>Android FlatUI<br>Android 扁平化风格的组件，支持一些自定义样式<br>项目地址：<a href=\"https://github.com/eluleci/FlatUI\" target=\"_blank\" rel=\"external\">https://github.com/eluleci/FlatUI</a><br>效果图：<img src=\"https://camo.githubusercontent.com/590d4a2ac322417b71f83223bd58b83903d58343/68747470733a2f2f7261772e6769746875622e636f6d2f656c756c6563692f466c617455492f6d61737465722f73616d706c652d696d616765732f73686f77636173652e706e67\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<h4 id=\"十六、其他\"><a href=\"#十六、其他\" class=\"headerlink\" title=\"十六、其他\"></a>十六、其他</h4><ol>\n<li><p>SwipeBackLayout<br>左右或向上滑动返回的Activity<br>项目地址：<a href=\"https://github.com/Issacw0ng/SwipeBackLayout\" target=\"_blank\" rel=\"external\">https://github.com/Issacw0ng/SwipeBackLayout</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=me.imid.swipebacklayout.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=me.imid.swipebacklayout.demo</a><br>APP示例：知乎  </p>\n</li>\n<li><p>android-styled-dialogs<br>可自定义样式的dialog，默认与Holo主题样式一致，在Android2.2以上同一样式<br>项目地址：<a href=\"https://github.com/inmite/android-styled-dialogs\" target=\"_blank\" rel=\"external\">https://github.com/inmite/android-styled-dialogs</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/styled-dialogs-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/styled-dialogs-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>Android Sliding Up Panel<br>可拖动的View，能在当前Activity上扶起一个可拖动的Panel<br>项目地址：<a href=\"https://github.com/umano/AndroidSlidingUpPanel\" target=\"_blank\" rel=\"external\">https://github.com/umano/AndroidSlidingUpPanel</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.sothree.umano\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.sothree.umano</a><br>APP示例：Google Music精简播放栏  </p>\n</li>\n<li><p>AndroidWheel<br>Android Wheel支持城市、多种日期时间、密码、图片<br>项目地址：<a href=\"https://code.google.com/p/android-wheel/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-wheel/</a><br>效果图：<img src=\"http://farm6.staticflickr.com/5532/11621528786_220c040ba5_o.jpg\" alt=\"Renderings\">  </p>\n</li>\n<li><p>TableFixHeaders<br>第一列固定的Table<br>项目地址：<a href=\"https://github.com/InQBarna/TableFixHeaders\" target=\"_blank\" rel=\"external\">https://github.com/InQBarna/TableFixHeaders</a><br>Demo地址：<a href=\"http://bit.ly/13buAIq\" target=\"_blank\" rel=\"external\">http://bit.ly/13buAIq</a>  </p>\n</li>\n<li><p>Inscription<br>可用于展示应用change和new feature信息<br>项目地址：<a href=\"https://github.com/MartinvanZ/Inscription\" target=\"_blank\" rel=\"external\">https://github.com/MartinvanZ/Inscription</a>  </p>\n</li>\n<li><p>ActivityTransition<br>Activity切换动画，包括渐变、flip、某个位置进入等等<br>项目地址：<a href=\"https://github.com/ophilbert/ActivityTransition\" target=\"_blank\" rel=\"external\">https://github.com/ophilbert/ActivityTransition</a><br>效果图：类似桌面左右切换的各种效果，不过桌面并非用ViewPager实现而已<br>文档介绍：<a href=\"https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true</a>  </p>\n</li>\n<li><p>EasyAndroidAnimations<br>针对View的各种动画<br>项目地址：<a href=\"https://github.com/2359media/EasyAndroidAnimations\" target=\"_blank\" rel=\"external\">https://github.com/2359media/EasyAndroidAnimations</a>  </p>\n</li>\n<li><p>GlowPadBackport<br>将Android4.2的锁屏界面解锁扩展到Android1.6及1.6+<br>项目地址：<a href=\"https://github.com/rock3r/GlowPadBackport\" target=\"_blank\" rel=\"external\">https://github.com/rock3r/GlowPadBackport</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=net.sebastianopoggi.samples.ui.GlowPadSample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=net.sebastianopoggi.samples.ui.GlowPadSample</a><br>效果图：<img src=\"https://lh6.ggpht.com/U070b6Lh6cVsVwx4jN-5nq0xqiB1PBzrYABPeJIEe2hZQ5UWOxc-FDUG77wADelToHA=h310-rw\" alt=\"Renderings\">  </p>\n</li>\n<li><p>GlowPadView<br>Android4锁屏界面解锁<br>项目地址：<a href=\"https://github.com/nadavfima/GlowPadView\" target=\"_blank\" rel=\"external\">https://github.com/nadavfima/GlowPadView</a><br>效果图：<a href=\"https://raw.github.com/nadavfima/GlowPadView/master/example.png\" target=\"_blank\" rel=\"external\">https://raw.github.com/nadavfima/GlowPadView/master/example.png</a>  </p>\n</li>\n<li><p>android-lockpattern<br>Android的图案密码解锁<br>项目地址：<a href=\"https://code.google.com/p/android-lockpattern/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-lockpattern/</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=group.pals.android.lib.ui.lockpattern.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=group.pals.android.lib.ui.lockpattern.demo</a><br>文档介绍：<a href=\"https://code.google.com/p/android-lockpattern/wiki/QuickUse\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-lockpattern/wiki/QuickUse</a><br>APP示例：Android开机的图案密码解锁，支付宝的密码解锁  </p>\n</li>\n<li><p>PatternLock<br>另一个 Android 图案解锁库<br>项目地址：<a href=\"https://github.com/DreaminginCodeZH/PatternLock\" target=\"_blank\" rel=\"external\">https://github.com/DreaminginCodeZH/PatternLock</a><br>Demo 地址：<a href=\"https://github.com/DreaminginCodeZH/PatternLock/raw/master/dist/sample.apk\" target=\"_blank\" rel=\"external\">https://github.com/DreaminginCodeZH/PatternLock/raw/master/dist/sample.apk</a><br>效果图：<img src=\"https://github.com/DreaminginCodeZH/PatternLock/raw/master/image/sample_small.png\" alt=\"Renderings\"><br>APP示例：Android开机的图案密码解锁，支付宝的密码解锁  </p>\n</li>\n<li><p>RangeBar<br>类似于SeekBar，不同的是可以选择一个范围内的值而不是单个值<br>项目地址：<a href=\"https://github.com/edmodo/range-bar\" target=\"_blank\" rel=\"external\">https://github.com/edmodo/range-bar</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/range-bar-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/range-bar-demo.apk?raw=true</a><br>效果图：<img src=\"http://i.imgur.com/q85GhRjl.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>ChromeView<br>利用Chromium实现的WebView，解决各个Android版本WebView不同的问题，同时利用最新Chrome代码<br>项目地址：<a href=\"https://github.com/pwnall/chromeview\" target=\"_blank\" rel=\"external\">https://github.com/pwnall/chromeview</a>  </p>\n</li>\n<li><p>android-phased-seek-bar<br>支持预先定义状态的SeekBar<br>项目地址：<a href=\"https://github.com/ademar111190/android-phased-seek-bar\" target=\"_blank\" rel=\"external\">https://github.com/ademar111190/android-phased-seek-bar</a><br>效果图：<img src=\"https://raw.githubusercontent.com/ademar111190/android-phased-seek-bar/master/images/sample.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android Slider Preference Library<br>可添加到设置中的基于对话框的RankBar小部件<br>项目地址：<a href=\"https://github.com/jayschwa/AndroidSliderPreference\" target=\"_blank\" rel=\"external\">https://github.com/jayschwa/AndroidSliderPreference</a>  </p>\n</li>\n<li><p>ShowcaseView library<br>用于高亮显示应用程序的特定部分，从而突出突出重点<br>项目地址：<a href=\"https://github.com/amlcurran/ShowcaseView\" target=\"_blank\" rel=\"external\">https://github.com/amlcurran/ShowcaseView</a>  </p>\n</li>\n<li><p>android-segmented-control<br>Android上的Segmented Controls，相当于RadioButton组<br>项目地址：<a href=\"https://github.com/hoang8f/android-segmented-control\" target=\"_blank\" rel=\"external\">https://github.com/hoang8f/android-segmented-control</a>  </p>\n</li>\n<li><p>Swipeable Cards<br>类似Tinder的卡片效果，可以加载图片并动画效果展示，向左滑动表示喜欢，向右表示不喜欢<br>项目地址：<a href=\"https://github.com/kikoso/Swipeable-Cards\" target=\"_blank\" rel=\"external\">https://github.com/kikoso/Swipeable-Cards</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo</a>  </p>\n</li>\n<li><p>EdgeEffectOverride<br>改变ScrollView, ListView, ExpandableListView, GridView, ViewPager等滚动控件滚动到边缘的颜色效果<br>项目地址：<a href=\"https://github.com/AndroidAlliance/EdgeEffectOverride\" target=\"_blank\" rel=\"external\">https://github.com/AndroidAlliance/EdgeEffectOverride</a>  </p>\n</li>\n<li><p>android-pinned-header-listviews<br>使ExpandListView的Group滑动到顶端时会固定不动直到另外一个Group到达顶端<br>项目地址：<a href=\"https://github.com/rtyley/android-pinned-header-listviews\" target=\"_blank\" rel=\"external\">https://github.com/rtyley/android-pinned-header-listviews</a>  </p>\n</li>\n<li><p>AndroidSwipeLayout<br>滑动Layout，支持单个View，ListView，GridView<br>项目地址：<a href=\"https://github.com/daimajia/AndroidSwipeLayout\" target=\"_blank\" rel=\"external\">https://github.com/daimajia/AndroidSwipeLayout</a><br>Demo地址：<a href=\"https://github.com/daimajia/AndroidSwipeLayout/releases/download/v1.0.0/AndroidSwipeLayout-Demo-1.0.1-snapshot.apk\" target=\"_blank\" rel=\"external\">Download Demo</a><br>效果图：<img src=\"http://ww2.sinaimg.cn/mw690/610dc034jw1ejoplapwtqg208n0e74dx.gif\" alt=\"\">  </p>\n</li>\n<li><p>DynamicCardLayout<br>在Android中实现的类似Windows8的瓷片布局<br>项目地址：<a href=\"https://github.com/dodola/DynamicCardLayout\" target=\"_blank\" rel=\"external\">https://github.com/dodola/DynamicCardLayout</a><br>效果图：<img src=\"https://github.com/dodola/DynamicCardLayout/blob/master/pic1.png?raw=true\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Emoticons-Keyboard<br>带表情情符号的自定义键盘<br>项目地址：<a href=\"https://github.com/chiragjain/Emoticons-Keyboard\" target=\"_blank\" rel=\"external\">https://github.com/chiragjain/Emoticons-Keyboard</a><br>效果图：<img src=\"https://github.com/chiragjain/Emoticons-Keyboard/raw/master/s2.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android Typeface Helper<br>可以帮你轻松实现自定义字体的库<br>项目地址：<a href=\"https://github.com/norbsoft/android-typeface-helper\" target=\"_blank\" rel=\"external\">https://github.com/norbsoft/android-typeface-helper</a><br>效果图：<img src=\"https://camo.githubusercontent.com/b8e7d4f4ab84ff96a3919ea264e2a83aca46e04e/68747470733a2f2f7261772e6769746875622e636f6d2f6e6f7262736f66742f616e64726f69642d74797065666163652d68656c7065722f6d61737465722f726561646d655f73637265656e2e706e67\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android-Anim-Playground<br>几个动画效果，其中第二个基于android-svg的绘制效果非常好<br>项目地址：<a href=\"https://github.com/Tibolte/Android-Anim-Playground\" target=\"_blank\" rel=\"external\">https://github.com/Tibolte/Android-Anim-Playground</a><br>效果图：<img src=\"https://raw.githubusercontent.com/Tibolte/Android-Anim-Playground/master/androiddemosvg.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>NiftyDialogEffects<br>支持自定义飞入动画样式的 Dialog<br>项目地址：<a href=\"https://github.com/sd6352051/NiftyDialogEffects\" target=\"_blank\" rel=\"external\">https://github.com/sd6352051/NiftyDialogEffects</a><br>效果图：<img src=\"https://camo.githubusercontent.com/456687ac516bb07f1076928d635bfddf6b90d5ec/687474703a2f2f696d67302e70682e3132362e6e65742f69433436653162586b55316631724966555a6f3939773d3d2f363539373632303632313938343031393430382e676966\" alt=\"Renderings\"><br>在线演示：<a href=\"http://tympanus.net/Development/ModalWindowEffects/\" target=\"_blank\" rel=\"external\">http://tympanus.net/Development/ModalWindowEffects/</a>  </p>\n</li>\n<li><p>PostOffice<br>创建 Holo 及 Material Design 样式的 Dialog<br>项目地址：<a href=\"https://github.com/r0adkll/PostOffice\" target=\"_blank\" rel=\"external\">https://github.com/r0adkll/PostOffice</a><br>效果图：<img src=\"https://github.com/r0adkll/PostOffice/raw/master/images/po_2.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Swipecards<br>类似Tinder的卡片效果，可以加载图片并动画效果展示，向左滑动表示喜欢，向右表示不喜欢，根据 Kikoso’s Swipeable-Cards 改造而来<br>项目地址：<a href=\"https://github.com/Diolor/Swipecards\" target=\"_blank\" rel=\"external\">https://github.com/Diolor/Swipecards</a>  </p>\n</li>\n<li><p>SeekArc<br>圆形的 SeekBar<br>项目地址：<a href=\"https://github.com/TriggerTrap/SeekArc\" target=\"_blank\" rel=\"external\">https://github.com/TriggerTrap/SeekArc</a><br>效果图：<img src=\"https://camo.githubusercontent.com/6a5091cb39a50d4c49b8d2f08684cb260db55aa7/68747470733a2f2f7261772e6769746875622e636f6d2f6e65696c643030312f5365656b4172632f6d61737465722f7261772f6172635f7377656570732e706e67\" alt=\"Renderings\">  </p>\n</li>\n<li><p>BlurDialogFragment<br>显示  DialogFragment 时背景模糊效果<br>项目地址：<a href=\"https://github.com/tvbarthel/BlurDialogFragment\" target=\"_blank\" rel=\"external\">https://github.com/tvbarthel/BlurDialogFragment</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=fr.tvbarthel.lib.blurdialogfragment.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=fr.tvbarthel.lib.blurdialogfragment.sample</a>  </p>\n</li>\n<li><p>range-seek-bar<br>随机值选取的 SeekBar<br>项目地址：<a href=\"https://github.com/yahoo/android-range-seek-bar\" target=\"_blank\" rel=\"external\">https://github.com/yahoo/android-range-seek-bar</a><br>效果图：<img src=\"https://github.com/yahoo/android-range-seek-bar/raw/master/demo_screenshot.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>MaterialRangeBar<br>可以选择一个范围内的值而不是单个值的 SeekBar，RangeBar 的 Material Design 风格适配<br>项目地址：<a href=\"https://github.com/oli107/material-range-bar\" target=\"_blank\" rel=\"external\">https://github.com/oli107/material-range-bar</a><br>效果图：<img src=\"https://github.com/oli107/material-range-bar/raw/master/Screenshots/pin%20expand.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>MaterialList<br>Material Design 风格的 CardView<br>项目地址：<a href=\"https://github.com/dexafree/MaterialList\" target=\"_blank\" rel=\"external\">https://github.com/dexafree/MaterialList</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.dexafree.materiallistviewexample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.dexafree.materiallistviewexample</a><br>效果图：<img src=\"https://camo.githubusercontent.com/b71bb064807465b7c9132d7f6072e2064f01fb85/687474703a2f2f692e696d6775722e636f6d2f454e78554741772e706e67\" alt=\"Renderings\">  </p>\n</li>\n<li><p>road-trip<br>设置path的各种动画效果，以及如何实现复杂路径动画，类似于ios中的指纹注册界面的指纹动画效果<br>项目地址：<a href=\"https://github.com/romainguy/road-trip\" target=\"_blank\" rel=\"external\">https://github.com/romainguy/road-trip</a><br>效果图：<img src=\"https://github.com/zhangxin1989/RoadTrip/raw/master/screenshot/Road-Trip-200.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>dialogplus<br>一个简单的Android对话框，支持不同的弹出模式<br>项目地址：<a href=\"https://github.com/orhanobut/dialogplus\" target=\"_blank\" rel=\"external\">https://github.com/orhanobut/dialogplus</a><br>效果图：<img src=\"https://github.com/orhanobut/dialogplus/blob/master/images/d1.png\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<h2 id=\"第二部分-工具库\"><a href=\"#第二部分-工具库\" class=\"headerlink\" title=\"第二部分 工具库\"></a>第二部分 工具库</h2><p>主要包括那些不错的开发库，包括依赖注入框架、图片缓存、网络相关、数据库ORM建模、Android公共库、Android 高版本向低版本兼容、多媒体相关及其他。    </p>\n<h4 id=\"一、依赖注入DI\"><a href=\"#一、依赖注入DI\" class=\"headerlink\" title=\"一、依赖注入DI\"></a>一、依赖注入DI</h4><p>通过依赖注入减少View、服务、资源简化初始化，事件绑定等重复繁琐工作  </p>\n<ol>\n<li><p>AndroidAnnotations(Code Diet)<br>android快速开发框架<br>项目地址：<a href=\"https://github.com/excilys/androidannotations\" target=\"_blank\" rel=\"external\">https://github.com/excilys/androidannotations</a><br>文档介绍：<a href=\"https://github.com/excilys/androidannotations/wiki\" target=\"_blank\" rel=\"external\">https://github.com/excilys/androidannotations/wiki</a><br>官网网址：<a href=\"http://androidannotations.org/\" target=\"_blank\" rel=\"external\">http://androidannotations.org/</a><br>特点：(1) 依赖注入：包括view，extras，系统服务，资源等等<br>(2) 简单的线程模型，通过annotation表示方法运行在ui线程还是后台线程<br>(3) 事件绑定：通过annotation表示view的响应事件，不用在写内部类<br>(4) REST客户端：定义客户端接口，自动生成REST请求的实现<br>(5) 没有你想象的复杂：AndroidAnnotations只是在在编译时生成相应子类<br>(6) 不影响应用性能：仅50kb，在编译时完成，不会对运行时有性能影响。<br>PS：与roboguice的比较：roboguice通过运行时读取annotations进行反射，所以可能影响应用性能，而AndroidAnnotations在编译时生成子类，所以对性能没有影响  </p>\n</li>\n<li><p>roboguice<br>帮你处理了很多代码异常，利用annotation使得更少的代码完成项目<br>项目地址：<a href=\"https://github.com/roboguice/roboguice\" target=\"_blank\" rel=\"external\">https://github.com/roboguice/roboguice</a><br>文档介绍：<a href=\"https://github.com/roboguice/roboguice/wiki\" target=\"_blank\" rel=\"external\">https://github.com/roboguice/roboguice/wiki</a>  </p>\n</li>\n<li><p>butterknife<br>利用annotation帮你快速完成View的初始化，减少代码<br>项目地址：<a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/butterknife</a><br>文档介绍：<a href=\"http://jakewharton.github.io/butterknife/\" target=\"_blank\" rel=\"external\">http://jakewharton.github.io/butterknife/</a>  </p>\n</li>\n<li><p>Dagger<br>依赖注入，适用于Android和Java<br>项目地址：<a href=\"https://github.com/square/dagger\" target=\"_blank\" rel=\"external\">https://github.com/square/dagger</a><br>文档介绍：<a href=\"http://square.github.io/dagger/\" target=\"_blank\" rel=\"external\">http://square.github.io/dagger/</a>  </p>\n</li>\n</ol>\n<h4 id=\"二、图片缓存\"><a href=\"#二、图片缓存\" class=\"headerlink\" title=\"二、图片缓存\"></a>二、图片缓存</h4><ol>\n<li><p>Android-Universal-Image-Loader<br>图片缓存，目前使用最广泛的图片缓存，支持主流图片缓存的绝大多数特性。<br>项目地址：<a href=\"https://github.com/nostra13/Android-Universal-Image-Loader\" target=\"_blank\" rel=\"external\">https://github.com/nostra13/Android-Universal-Image-Loader</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/universal-imageloader-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/universal-imageloader-demo.apk?raw=true</a><br>文档介绍：<a href=\"http://www.intexsoft.com/blog/item/74-universal-image-loader-part-3.html\" target=\"_blank\" rel=\"external\">http://www.intexsoft.com/blog/item/74-universal-image-loader-part-3.html</a>  </p>\n</li>\n<li><p>picasso<br>square开源的图片缓存<br>项目地址：<a href=\"https://github.com/square/picasso\" target=\"_blank\" rel=\"external\">https://github.com/square/picasso</a><br>文档介绍：<a href=\"http://square.github.io/picasso/\" target=\"_blank\" rel=\"external\">http://square.github.io/picasso/</a><br>特点：(1)可以自动检测adapter的重用并取消之前的下载<br>(2)图片变换<br>(3)可以加载本地资源<br>(4)可以设置占位资源<br>(5)支持debug模式  </p>\n</li>\n<li><p>ImageCache<br>图片缓存，包含内存和Sdcard缓存<br>项目地址：<a href=\"https://github.com/Trinea/AndroidCommon\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/AndroidCommon</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=cn.trinea.android.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=cn.trinea.android.demo</a><br>文档介绍：<a href=\"http://www.trinea.cn/android/android-imagecache/\" target=\"_blank\" rel=\"external\">http://www.trinea.cn/android/android-imagecache/</a><br>特点：(1)支持预取新图片，支持等待队列<br>(2)包含二级缓存，可自定义文件名保存规则<br>(3)可选择多种缓存算法(FIFO、LIFO、LRU、MRU、LFU、MFU等13种)或自定义缓存算法<br>(4)可方便的保存及初始化恢复数据<br>(5)支持不同类型网络处理<br>(6)可根据系统配置初始化缓存等  </p>\n</li>\n<li><p>Cube ImageLoader<br>阿里巴巴一淘使用的图片加载，综合了Android-Universal-Image-Loader 和 square 等组件优点，简单易用，良好的中文文档支持<br>项目地址：<a href=\"https://github.com/etao-open-source/cube-sdk\" target=\"_blank\" rel=\"external\">https://github.com/etao-open-source/cube-sdk</a><br>Demo地址：<a href=\"https://github.com/liaohuqiu/cube-sdk/raw/master/cube-sdk-sample.apk\" target=\"_blank\" rel=\"external\">https://github.com/liaohuqiu/cube-sdk/raw/master/cube-sdk-sample.apk</a><br>效果图：<img src=\"https://raw.githubusercontent.com/etao-open-source/cube-sdk/dev/screen-shot.png\" alt=\"Screen Shot\"><br>文档介绍：<a href=\"http://cube-sdk.liaohuqiu.net/\" target=\"_blank\" rel=\"external\">http://cube-sdk.liaohuqiu.net/</a>  </p>\n</li>\n<li><p>fresco<br>一款强大的图片缓存工具，由facebook开发<br>项目地址：<a href=\"https://github.com/facebook/fresco\" target=\"_blank\" rel=\"external\">https://github.com/facebook/fresco</a><br>文档介绍：<a href=\"http://frescolib.org/\" target=\"_blank\" rel=\"external\">http://frescolib.org/</a><br>特点：(1) 两个内存缓存加上磁盘缓存构成了三级缓存<br>(2) 支持流式，可以类似网页上模糊渐进式显示图片<br>(3) 对多帧动画图片支持更好，如 Gif、WebP<br>(4) 更多样的显示，如圆角、进度条、点击重试、自定义对焦点<br>(5) 更多样的加载，如支持 EXIF、全面支持 WebP<br>(6) 支持 Android 2.3+ </p>\n</li>\n</ol>\n<h4 id=\"三、网络相关\"><a href=\"#三、网络相关\" class=\"headerlink\" title=\"三、网络相关\"></a>三、网络相关</h4><ol>\n<li><p>Asynchronous Http Client for Android<br>Android异步Http请求<br>项目地址：<a href=\"https://github.com/loopj/android-async-http\" target=\"_blank\" rel=\"external\">https://github.com/loopj/android-async-http</a><br>文档介绍：<a href=\"http://loopj.com/android-async-http/\" target=\"_blank\" rel=\"external\">http://loopj.com/android-async-http/</a><br>特点：(1) 在匿名回调中处理请求结果<br>(2) 在UI线程外进行http请求<br>(3) 文件断点上传<br>(4) 智能重试<br>(5) 默认gzip压缩<br>(6) 支持解析成Json格式<br>(7) 可将Cookies持久化到SharedPreferences  </p>\n</li>\n<li><p>android-query<br>异步加载，更少代码完成Android加载<br>项目地址：<a href=\"https://github.com/androidquery/androidquery\" target=\"_blank\" rel=\"external\">https://github.com/androidquery/androidquery</a> 或 <a href=\"https://code.google.com/p/android-query/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-query/</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.androidquery\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.androidquery</a><br>文档介绍：<a href=\"https://code.google.com/p/android-query/#Why_AQuery?\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-query/#Why_AQuery?</a><br>特点：<a href=\"https://code.google.com/p/android-query/#Why_AQuery?\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-query/#Why_AQuery?</a>  </p>\n</li>\n<li><p>Async Http Client<br>Java异步Http请求<br>项目地址：<a href=\"https://github.com/AsyncHttpClient/async-http-client\" target=\"_blank\" rel=\"external\">https://github.com/AsyncHttpClient/async-http-client</a><br>文档介绍：<a href=\"http://sonatype.github.io/async-http-client/\" target=\"_blank\" rel=\"external\">http://sonatype.github.io/async-http-client/</a>  </p>\n</li>\n<li><p>Ion<br>支持图片、json、http post等异步请求<br>项目地址：<a href=\"https://github.com/koush/ion\" target=\"_blank\" rel=\"external\">https://github.com/koush/ion</a><br>文档介绍：<a href=\"https://github.com/koush/ion#more-examples\" target=\"_blank\" rel=\"external\">https://github.com/koush/ion#more-examples</a>  </p>\n</li>\n<li><p>HttpCache<br>Http缓存<br>项目地址：<a href=\"https://github.com/Trinea/AndroidCommon\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/AndroidCommon</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=cn.trinea.android.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=cn.trinea.android.demo</a><br>文档介绍：<a href=\"http://www.trinea.cn/android/android-http-cache\" target=\"_blank\" rel=\"external\">http://www.trinea.cn/android/android-http-cache</a><br>特点是：(1) 根据cache-control、expires缓存http请求<br>(2) 支持同步、异步Http请求<br>(3) 在匿名回调中处理请求结果<br>(4) 在UI线程外进行http请求<br>(5) 默认gzip压缩  </p>\n</li>\n<li><p>Http Request<br>项目地址：<a href=\"https://github.com/kevinsawicki/http-request\" target=\"_blank\" rel=\"external\">https://github.com/kevinsawicki/http-request</a><br>文档介绍：<a href=\"https://github.com/kevinsawicki/http-request#examples\" target=\"_blank\" rel=\"external\">https://github.com/kevinsawicki/http-request#examples</a>  </p>\n</li>\n<li><p>okhttp<br>square开源的http工具类<br>项目地址：<a href=\"https://github.com/square/okhttp\" target=\"_blank\" rel=\"external\">https://github.com/square/okhttp</a><br>文档介绍：<a href=\"http://square.github.io/okhttp/\" target=\"_blank\" rel=\"external\">http://square.github.io/okhttp/</a><br>特点：(1) 支持SPDY( <a href=\"http://zh.wikipedia.org/wiki/SPDY\" target=\"_blank\" rel=\"external\">http://zh.wikipedia.org/wiki/SPDY</a> )协议。SPDY协议是Google开发的基于传输控制协议的应用层协议，通过压缩，多路复用(一个TCP链接传送网页和图片等资源)和优先级来缩短加载时间。<br>(2) 如果SPDY不可用，利用连接池减少请求延迟<br>(3) Gzip压缩<br>(4) Response缓存减少不必要的请求  </p>\n</li>\n<li><p>Retrofit<br>RESTFUL API设计<br>项目地址：<a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"external\">https://github.com/square/retrofit</a><br>文档介绍：<a href=\"http://square.github.io/retrofit/\" target=\"_blank\" rel=\"external\">http://square.github.io/retrofit/</a>  </p>\n</li>\n<li><p>RoboSpice<br>Android异步网络请求工具，支持缓存、REST等等<br>项目地址：<a href=\"https://github.com/stephanenicolas/robospice\" target=\"_blank\" rel=\"external\">https://github.com/stephanenicolas/robospice</a><br>Demo地址：<a href=\"https://github.com/stephanenicolas/RoboDemo/downloads\" target=\"_blank\" rel=\"external\">https://github.com/stephanenicolas/RoboDemo/downloads</a>  </p>\n</li>\n</ol>\n<h4 id=\"四、数据库-orm工具包\"><a href=\"#四、数据库-orm工具包\" class=\"headerlink\" title=\"四、数据库 orm工具包\"></a>四、数据库 orm工具包</h4><p>orm的db工具类，简化建表、查询、更新、插入、事务、索引的操作  </p>\n<ol>\n<li><p>greenDAO<br>Android Sqlite orm的db工具类<br>项目地址：<a href=\"https://github.com/greenrobot/greenDAO\" target=\"_blank\" rel=\"external\">https://github.com/greenrobot/greenDAO</a><br>文档介绍：<a href=\"http://greendao-orm.com/documentation/\" target=\"_blank\" rel=\"external\">http://greendao-orm.com/documentation/</a><br>官网网址：<a href=\"http://greendao-orm.com/\" target=\"_blank\" rel=\"external\">http://greendao-orm.com/</a><br>特点：(1) 性能佳<br>(2) 简单易用的API<br>(3) 内存小好小<br>(4) 库大小小  </p>\n</li>\n<li><p>ActiveAndroid<br>Android Sqlite orm的db工具类<br>项目地址：<a href=\"https://github.com/pardom/ActiveAndroid\" target=\"_blank\" rel=\"external\">https://github.com/pardom/ActiveAndroid</a><br>文档介绍：<a href=\"https://github.com/pardom/ActiveAndroid/wiki/_pages\" target=\"_blank\" rel=\"external\">https://github.com/pardom/ActiveAndroid/wiki/_pages</a>  </p>\n</li>\n<li><p>Sprinkles<br>Android Sqlite orm的db工具类，比较显著的特点就是配合 <a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"external\">https://github.com/square/retrofit</a> 能保存从服务器获取的数据<br>项目地址：<a href=\"https://github.com/emilsjolander/sprinkles\" target=\"_blank\" rel=\"external\">https://github.com/emilsjolander/sprinkles</a><br>文档介绍：<a href=\"http://emilsjolander.github.io/blog/2013/12/18/android-with-sprinkles/\" target=\"_blank\" rel=\"external\">http://emilsjolander.github.io/blog/2013/12/18/android-with-sprinkles/</a>  </p>\n</li>\n<li><p>Realm<br>移动端的数据库，适用于 Phone、Tablet、Wearable，支持 ORM，线程安全、支持连表及数据库加密，比 SQLite 性能更好<br>项目地址：<a href=\"https://github.com/realm/realm-java\" target=\"_blank\" rel=\"external\">https://github.com/realm/realm-java</a><br>文档介绍：<a href=\"http://realm.io/docs/java/0.72.0/\" target=\"_blank\" rel=\"external\">http://realm.io/docs/java/0.72.0/</a>  </p>\n</li>\n<li><p>ormlite-android<br>项目地址：<a href=\"https://github.com/j256/ormlite-android\" target=\"_blank\" rel=\"external\">https://github.com/j256/ormlite-android</a><br>文档介绍：<a href=\"http://ormlite.com/sqlite_java_android_orm.shtml\" target=\"_blank\" rel=\"external\">http://ormlite.com/sqlite_java_android_orm.shtml</a>  </p>\n</li>\n<li><p>Schematic<br>根据SQLite生成ContentProvider<br>项目地址：<a href=\"https://github.com/SimonVT/schematic\" target=\"_blank\" rel=\"external\">https://github.com/SimonVT/schematic</a>  </p>\n</li>\n<li><p>DBFlow<br>Android SQLite ORM工具库。综合了 Active Android, Schematic, Ollie,Sprinkles等库的优点；通过注解实现，性能好；能生成ContentProvider。<br>项目地址：<a href=\"https://github.com/Raizlabs/DBFlow\" target=\"_blank\" rel=\"external\">https://github.com/Raizlabs/DBFlow</a><br>文档介绍：<a href=\"https://github.com/Raizlabs/DBFlow#usage-docs\" target=\"_blank\" rel=\"external\">https://github.com/Raizlabs/DBFlow#usage-docs</a>    </p>\n</li>\n</ol>\n<h4 id=\"五、Android公共库\"><a href=\"#五、Android公共库\" class=\"headerlink\" title=\"五、Android公共库\"></a>五、Android公共库</h4><ol>\n<li><p>Guava<br>Google的基于java1.6的类库集合的扩展项目，包括collections, caching, primitives support, concurrency libraries, common annotations, string processing, I/O等等. 这些高质量的API可以使你的JAVa代码更加优雅，更加简洁<br>项目地址：<a href=\"https://code.google.com/p/guava-libraries/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/guava-libraries/</a><br>文档介绍：<a href=\"https://code.google.com/p/guava-libraries/wiki/GuavaExplained\" target=\"_blank\" rel=\"external\">https://code.google.com/p/guava-libraries/wiki/GuavaExplained</a>  </p>\n</li>\n<li><p>Volley<br>Google提供的网络通信库，使得网络请求更简单、更快速<br>项目地址：<a href=\"https://android.googlesource.com/platform/frameworks/volley\" target=\"_blank\" rel=\"external\">https://android.googlesource.com/platform/frameworks/volley</a><br>文档介绍：<a href=\"http://commondatastorage.googleapis.com/io-2013/presentations/110%20-%20Volley-%20Easy,%20Fast%20Networking%20for%20Android.pdf\" target=\"_blank\" rel=\"external\">http://commondatastorage.googleapis.com/io-2013/presentations/110%20-%20Volley-%20Easy,%20Fast%20Networking%20for%20Android.pdf</a>  </p>\n</li>\n<li><p>AndroidCommon<br>Android公共库<br>项目地址：<a href=\"https://github.com/Trinea/AndroidCommon\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/AndroidCommon</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=cn.trinea.android.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=cn.trinea.android.demo</a><br>文档介绍：<a href=\"http://www.trinea.cn/android/android-common-lib/\" target=\"_blank\" rel=\"external\">http://www.trinea.cn/android/android-common-lib/</a><br>包括：(1)缓存(图片缓存、预取缓存、网络缓存)<br>(2) 公共View(下拉及底部加载更多ListView、底部加载更多ScrollView、滑动一页Gallery)<br>(3) Android常用工具类(网络、下载、Android资源操作、shell、文件、Json、随机数、Collection等等)  </p>\n</li>\n<li><p>shipfaster<br>整合了Dagger Otto Retrofit Robolectric Picasso OkHttp，方便快速开发<br>项目地址：<a href=\"https://github.com/pyricau/shipfaster\" target=\"_blank\" rel=\"external\">https://github.com/pyricau/shipfaster</a>  </p>\n</li>\n<li><p>CleanAndroidCode<br>整合了Dagger Otto AndroidAnnotations，方便快速开发<br>项目地址：<a href=\"https://github.com/pyricau/CleanAndroidCode\" target=\"_blank\" rel=\"external\">https://github.com/pyricau/CleanAndroidCode</a>  </p>\n</li>\n<li><p>xUtils<br>基于Afinal，包含DbUtils、ViewUtils、HttpUtils、BitmapUtils四大模块，可用于快速开发<br>项目地址：<a href=\"https://github.com/wyouflf/xUtils\" target=\"_blank\" rel=\"external\">https://github.com/wyouflf/xUtils</a>  </p>\n</li>\n<li><p>Afinal<br>Afinal是一个android的ioc，orm框架，内置了四大模块功能：FinalAcitivity,FinalBitmap,FinalDb,FinalHttp。通过finalActivity，我们可以通过注解的方式进行绑定ui和事件。通过finalBitmap，我们可以方便的加载bitmap图片，而无需考虑oom等问题。通过finalDB模块，我们一行代码就可以对android的sqlite数据库进行增删改查。通过FinalHttp模块，我们可以以ajax形式请求http数据<br>项目地址：<a href=\"https://github.com/yangfuhai/afinal\" target=\"_blank\" rel=\"external\">https://github.com/yangfuhai/afinal</a><br>官网网址：<a href=\"http://www.afinal.org\" target=\"_blank\" rel=\"external\">http://www.afinal.org</a>  </p>\n</li>\n<li><p>UltimateAndroid<br>UltimateAndroid是一个快速开发Android应用的框架，框架目前主要包含的功能有View Injection,ORM,异步网络请求和图片加载，自动化脚本测试,磁盘LRU等功能.同时提供了类似于TripleDes、Webview快速设置、Md5处理、String处理,Https处理等常用工具类，还有超过100多种UI控件效果。<br>项目地址：<a href=\"https://github.com/cymcsg/UltimateAndroid\" target=\"_blank\" rel=\"external\">https://github.com/cymcsg/UltimateAndroid</a><br>官网网址：<a href=\"http://blog.marshalchen.com/UltimateAndroid/\" target=\"_blank\" rel=\"external\">http://blog.marshalchen.com/UltimateAndroid/</a>  </p>\n</li>\n</ol>\n<ol>\n<li><p>SAF<br>SAF(Simple Android Framework)是一个简单的android框架，它为开发Android app提供了基础性组件。<br>项目地址：<a href=\"https://github.com/fengzhizi715/SAF\" target=\"_blank\" rel=\"external\">https://github.com/fengzhizi715/SAF</a><br>官网网址：<a href=\"http://www.salesuite.cn/\" target=\"_blank\" rel=\"external\">http://www.salesuite.cn/</a><br>包括：(1)Event Bus(事件总线)<br>(2) Rest Client(http的框架)<br>(3) Image Cache(图片缓存)<br>(4) Dependency Injection(依赖注入)<br>(5) Sqlite ORM(sqlite的orm)<br>(6) Router(Activity、Fragment的Router)<br>(7) Utils(各种常用的工具类) </p>\n</li>\n<li><p>Barber<br>Custom View 神器。通过简单的注解帮助你大大减少 Custom View 中的代码量。由于和 ButterKnife 一样使用了 Annotation Proccessor ，所以对程序性能没有影响。<br>项目地址：<a href=\"https://github.com/hzsweers/barber\" target=\"_blank\" rel=\"external\">https://github.com/hzsweers/barber</a></p>\n</li>\n<li><p>device-year-class<br>A library that analyzes an Android device’s specifications and calculates which year the device would be considered “high end”.(facebook开发的检测手机主流配置工具)<br>项目地址：<a href=\"https://github.com/facebook/device-year-class\" target=\"_blank\" rel=\"external\">https://github.com/facebook/device-year-class</a>  </p>\n</li>\n</ol>\n<h4 id=\"六、Android-高版本向低版本兼容\"><a href=\"#六、Android-高版本向低版本兼容\" class=\"headerlink\" title=\"六、Android 高版本向低版本兼容\"></a>六、Android 高版本向低版本兼容</h4><ol>\n<li><p>ActionBarSherlock<br>为Android所有版本提供统一的ActionBar，解决4.0以下ActionBar的适配问题<br>项目地址：<a href=\"https://github.com/JakeWharton/ActionBarSherlock\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/ActionBarSherlock</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos</a><br>APP示例：太多了。。现在连google都在用  </p>\n</li>\n<li><p>Nine Old Androids<br>将Android 3.0(Honeycomb)所有动画API(ObjectAnimator ValueAnimator等)兼容到Android1.0<br>项目地址：<a href=\"https://github.com/JakeWharton/NineOldAndroids\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/NineOldAndroids</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.jakewharton.nineoldandroids.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.jakewharton.nineoldandroids.sample</a><br>文档介绍：<a href=\"http://nineoldandroids.com/\" target=\"_blank\" rel=\"external\">http://nineoldandroids.com/</a>  </p>\n</li>\n<li><p>HoloEverywhere<br>将Android 3.0的Holo主题兼容到Android2.1++<br>项目地址：<a href=\"https://github.com/Prototik/HoloEverywhere\" target=\"_blank\" rel=\"external\">https://github.com/Prototik/HoloEverywhere</a><br>Demo地址：<a href=\"https://raw.github.com/Prototik/HoloEverywhere/repo/org/holoeverywhere/demo/2.1.0/demo-2.1.0.apk\" target=\"_blank\" rel=\"external\">https://raw.github.com/Prototik/HoloEverywhere/repo/org/holoeverywhere/demo/2.1.0/demo-2.1.0.apk</a><br>文档介绍：<a href=\"http://android-developers.blogspot.com/2012/01/holo-everywhere.html\" target=\"_blank\" rel=\"external\">http://android-developers.blogspot.com/2012/01/holo-everywhere.html</a>  </p>\n</li>\n<li><p>SherlockNavigationDrawer<br>将Android NavigationDrawer和ActionbarSherlock结合，解决4.0以下NavigationDrawer的适配问题<br>项目地址：<a href=\"https://github.com/tobykurien/SherlockNavigationDrawer\" target=\"_blank\" rel=\"external\">https://github.com/tobykurien/SherlockNavigationDrawer</a><br>文档介绍：<a href=\"http://developer.android.com/training/implementing-navigation/nav-drawer.html\" target=\"_blank\" rel=\"external\">http://developer.android.com/training/implementing-navigation/nav-drawer.html</a>  </p>\n</li>\n<li><p>Notifications4EveryWhere<br>将Android 4.1的Notification兼容到Android2.2++<br>项目地址：<a href=\"https://github.com/youxiachai/Notifications4EveryWhere\" target=\"_blank\" rel=\"external\">https://github.com/youxiachai/Notifications4EveryWhere</a>  </p>\n</li>\n<li><p>Android Switch Widget Backport<br>将Android Switch和SwitchPreference的兼容到Android2.1++<br>项目地址：<a href=\"https://github.com/BoD/android-switch-backport\" target=\"_blank\" rel=\"external\">https://github.com/BoD/android-switch-backport</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=org.jraf.android.backport.switchwidget.sample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=org.jraf.android.backport.switchwidget.sample</a><br>文档介绍：<a href=\"https://github.com/BoD/android-switch-backport#using-the-switch\" target=\"_blank\" rel=\"external\">https://github.com/BoD/android-switch-backport#using-the-switch</a>  </p>\n</li>\n<li><p>android-datepicker<br>将Android 4.0的datepicker兼容到Android2.2++<br>项目地址：<a href=\"https://github.com/SimonVT/android-datepicker\" target=\"_blank\" rel=\"external\">https://github.com/SimonVT/android-datepicker</a>  </p>\n</li>\n<li><p>GlowPadBackport<br>Android 4.2的GlowPadView向后适配到API4以上<br>项目地址：<a href=\"https://github.com/frakbot/GlowPadBackport\" target=\"_blank\" rel=\"external\">https://github.com/frakbot/GlowPadBackport</a>  </p>\n</li>\n<li><p>Transitions Everywhere<br>Android 4.4 的 Transitions API 兼容到 Android 2.2 以上<br>项目地址：<a href=\"https://github.com/andkulikov/transitions-everywhere\" target=\"_blank\" rel=\"external\">https://github.com/andkulikov/transitions-everywhere</a>  </p>\n</li>\n</ol>\n<h4 id=\"七、多媒体相关\"><a href=\"#七、多媒体相关\" class=\"headerlink\" title=\"七、多媒体相关\"></a>七、多媒体相关</h4><ol>\n<li><p>cocos2d-x<br>跨平台的2d游戏框架，支持Android、IOS、Linux、Windows等众多平台<br>项目地址：<a href=\"https://github.com/cocos2d/cocos2d-x\" target=\"_blank\" rel=\"external\">https://github.com/cocos2d/cocos2d-x</a><br>文档介绍：<a href=\"http://www.cocos2d-x.org/wiki\" target=\"_blank\" rel=\"external\">http://www.cocos2d-x.org/wiki</a><br>官网网址：<a href=\"http://www.cocos2d-x.org/\" target=\"_blank\" rel=\"external\">http://www.cocos2d-x.org/</a>  </p>\n</li>\n<li><p>Vitamio<br>是一款Android与iOS平台上的全能多媒体开发框架<br>项目地址：<a href=\"https://github.com/yixia/VitamioBundle\" target=\"_blank\" rel=\"external\">https://github.com/yixia/VitamioBundle</a><br>网站介绍：<a href=\"http://www.vitamio.org/docs/\" target=\"_blank\" rel=\"external\">http://www.vitamio.org/docs/</a><br>特点：(1) 全面支持硬件解码与GPU渲染<br>(2) 能够流畅播放720P甚至1080P高清MKV，FLV，MP4，MOV，TS，RMVB等常见格式的视频<br>(3) 在Android与iOS上跨平台支持 MMS, RTSP, RTMP, HLS(m3u8)等常见的多种视频流媒体协议，包括点播与直播。  </p>\n</li>\n<li><p>PhotoProcessing<br>利用ndk处理图片库，支持Instafix、Ansel、Testino、XPro、Retro、BW、Sepia、Cyano、Georgia、Sahara、HDR、Rotate(旋转)、Flip(翻转)等各种特效<br>项目地址：<a href=\"https://github.com/lightbox/PhotoProcessing\" target=\"_blank\" rel=\"external\">https://github.com/lightbox/PhotoProcessing</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/photo-processing.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/photo-processing.apk?raw=true</a>  </p>\n</li>\n<li><p>Android StackBlur<br>图片模糊效果工具类<br>项目地址：<a href=\"https://github.com/kikoso/android-stackblur\" target=\"_blank\" rel=\"external\">https://github.com/kikoso/android-stackblur</a><br>Demo地址：<a href=\"https://github.com/kikoso/android-stackblur/blob/master/StackBlurDemo/bin/StackBlurDemo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/kikoso/android-stackblur/blob/master/StackBlurDemo/bin/StackBlurDemo.apk?raw=true</a><br>文档介绍：<a href=\"https://github.com/kikoso/android-stackblur#usage\" target=\"_blank\" rel=\"external\">https://github.com/kikoso/android-stackblur#usage</a>  </p>\n</li>\n<li><p>Bitmap Smart Clipping using OpenCV<br>图片智能裁剪保留重要部分显示<br>项目地址：<a href=\"https://github.com/beartung/tclip-android\" target=\"_blank\" rel=\"external\">https://github.com/beartung/tclip-android</a><br>利用淘宝的 <a href=\"http://code.taobao.org/p/tclip/\" target=\"_blank\" rel=\"external\">http://code.taobao.org/p/tclip/</a> 库完成<br>一淘玩客正在使用的图片裁剪，自动识别图片中的重要区域，并且在图片裁剪时保留重要区域<br>特点：(1). 能进行人脸识别。图片中有人脸，将自动视为人脸区域为重要区域，将不会被裁剪掉<br>(2).自动其它重要区域。如果图片中未识别出人脸，则会根据特征分布计算出重区域  </p>\n</li>\n<li><p>Cropper<br>图片局部剪切工具，可触摸控制选择区域或旋转<br>项目地址：<a href=\"https://github.com/edmodo/cropper\" target=\"_blank\" rel=\"external\">https://github.com/edmodo/cropper</a><br>效果图：<img src=\"https://github-camo.global.ssl.fastly.net/e4fde77bf41d4a60b234b4e268e5cfa8c17d9b6f/687474703a2f2f692e696d6775722e636f6d2f334668735467666c2e6a7067\" alt=\"Renderings\"><br>文档介绍：<a href=\"https://github.com/edmodo/cropper/wiki\" target=\"_blank\" rel=\"external\">https://github.com/edmodo/cropper/wiki</a>  </p>\n</li>\n<li><p>android-crop<br>图片裁剪Activity<br>项目地址：<a href=\"https://github.com/jdamcd/android-crop\" target=\"_blank\" rel=\"external\">https://github.com/jdamcd/android-crop</a><br>效果图：<img src=\"https://github.com/jdamcd/android-crop/raw/master/screenshot.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>TileView<br>可分块显示大图，支持2D拖动、双击、双指放大、双指捏合<br>项目地址：<a href=\"https://github.com/moagrius/TileView\" target=\"_blank\" rel=\"external\">https://github.com/moagrius/TileView</a><br>Demo地址：<a href=\"http://moagrius.github.io/TileView/TileViewDemo.apk\" target=\"_blank\" rel=\"external\">http://moagrius.github.io/TileView/TileViewDemo.apk</a>  </p>\n</li>\n<li><p>BlurEffectForAndroidDesign<br>图片模糊效果<br>项目地址：<a href=\"https://github.com/PomepuyN/BlurEffectForAndroidDesign\" target=\"_blank\" rel=\"external\">https://github.com/PomepuyN/BlurEffectForAndroidDesign</a>  </p>\n</li>\n<li><p>android-eye<br>PC端网页查看同一局域网内的手机摄像头内容，可以用来监控哦<br>项目地址：<a href=\"https://github.com/Teaonly/android-eye\" target=\"_blank\" rel=\"external\">https://github.com/Teaonly/android-eye</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=teaonly.droideye\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=teaonly.droideye</a>  </p>\n</li>\n<li><p>libpng for Android<br>PNG图片的jni库，支持几乎png的所有特性<br>项目地址：<a href=\"https://github.com/julienr/libpng-android\" target=\"_blank\" rel=\"external\">https://github.com/julienr/libpng-android</a><br>文档介绍：<a href=\"http://www.libpng.org/pub/png/libpng.html\" target=\"_blank\" rel=\"external\">http://www.libpng.org/pub/png/libpng.html</a>  </p>\n</li>\n<li><p>android-gpuimage<br>基于GPU的图片滤镜<br>项目地址：<a href=\"https://github.com/CyberAgent/android-gpuimage\" target=\"_blank\" rel=\"external\">https://github.com/CyberAgent/android-gpuimage</a>  </p>\n</li>\n<li><p>AndroidFaceCropper<br>图片脸部自动识别，将识别后的局部图片返回<br>项目地址：<a href=\"https://github.com/lafosca/AndroidFaceCropper\" target=\"_blank\" rel=\"external\">https://github.com/lafosca/AndroidFaceCropper</a>  </p>\n</li>\n<li><p>Android Video Crop<br>利用TextureView播放和剪切视频，类似ImageView.setScaleType<br>项目地址：<a href=\"https://github.com/dmytrodanylyk/android-video-crop\" target=\"_blank\" rel=\"external\">https://github.com/dmytrodanylyk/android-video-crop</a><br>Demo地址：<a href=\"https://github.com/lafosca/AndroidFaceCropper/releases/download/1.0/FaceCropper-sample-debug-unaligned.apk\" target=\"_blank\" rel=\"external\">https://github.com/lafosca/AndroidFaceCropper/releases/download/1.0/FaceCropper-sample-debug-unaligned.apk</a>  </p>\n</li>\n<li><p>svg-android<br>Android Svg矢量图形支持<br>项目地址：<a href=\"https://github.com/japgolly/svg-android\" target=\"_blank\" rel=\"external\">https://github.com/japgolly/svg-android</a> <a href=\"https://github.com/japgolly/svg-android\" target=\"_blank\" rel=\"external\">https://github.com/japgolly/svg-android</a>  </p>\n</li>\n<li><p>Android Visualizer<br>从Android MediaPlayer获得音频，然后像iTunes及WinAmp一样展示音轨<br>项目地址：<a href=\"https://github.com/felixpalmer/android-visualizer\" target=\"_blank\" rel=\"external\">https://github.com/felixpalmer/android-visualizer</a>  </p>\n</li>\n<li><p>ExoPlayer<br>包括仪表板和SmoothStreaming自适应回放，缓存持久化和自定义渲染器，方便自定义和扩展，并且可以通过应用商店更新<br>项目地址：<a href=\"https://github.com/google/ExoPlayer\" target=\"_blank\" rel=\"external\">https://github.com/google/ExoPlayer</a>  </p>\n</li>\n<li><p>DanmakuFlameMaster<br>android上开源弹幕解析绘制引擎项目<br>项目地址：<a href=\"https://github.com/ctiao/DanmakuFlameMaster\" target=\"_blank\" rel=\"external\">https://github.com/ctiao/DanmakuFlameMaster</a>  </p>\n</li>\n</ol>\n<h4 id=\"八、事件总线-订阅者模式\"><a href=\"#八、事件总线-订阅者模式\" class=\"headerlink\" title=\"八、事件总线(订阅者模式)\"></a>八、事件总线(订阅者模式)</h4><p>通过发布/订阅事件解耦事件发送和接受，从而简化应用程序组件(Activities, Fragments及后台线程)之间的通信  </p>\n<ol>\n<li><p>EventBus<br>greenrobot的开源项目<br>项目地址：<a href=\"https://github.com/greenrobot/EventBus\" target=\"_blank\" rel=\"external\">https://github.com/greenrobot/EventBus</a><br>文档介绍：<a href=\"https://github.com/greenrobot/EventBus#general-usage-and-api\" target=\"_blank\" rel=\"external\">https://github.com/greenrobot/EventBus#general-usage-and-api</a><br>特点：(1) 支持在不同类型的线程中处理订阅，包括发布所在线程，UI线程、单一后台线程、异步线程<br>(2) 支持事件优先级定义，支持优先级高的订阅者取消事件继续传递，支持粘性事件，是不是跟系统的有序广播、粘性广播很像啊<br>(3) 不是基于annotations<br>(4) 性能更优<br>(5) 体积小<br>(6) 支持单例创建或创建多个对象<br>(7) 支持根据事件类型订阅  </p>\n</li>\n<li><p>Otto<br>Square的开源项目，基于Guava的Android优化<br>项目地址：<a href=\"https://github.com/square/otto\" target=\"_blank\" rel=\"external\">https://github.com/square/otto</a><br>文档介绍：<a href=\"http://square.github.io/otto/\" target=\"_blank\" rel=\"external\">http://square.github.io/otto/</a><br><a href=\"https://github.com/greenrobot/EventBus#comparison-with-squares-otto\" target=\"_blank\" rel=\"external\">EventBus与Otto的功能及性能对比文档</a><br><a href=\"https://play.google.com/store/apps/details?id=de.greenrobot.eventperf\" target=\"_blank\" rel=\"external\">EventBus与Otto性能对比Demo Apk</a>  </p>\n</li>\n</ol>\n<h4 id=\"九、传感器\"><a href=\"#九、传感器\" class=\"headerlink\" title=\"九、传感器\"></a>九、传感器</h4><ol>\n<li><p>Great Android Sensing Toolkit<br>Android感应器工具包，包含示例及使用过程中可能需要的算法<br>项目地址：<a href=\"https://github.com/gast-lib/gast-lib\" target=\"_blank\" rel=\"external\">https://github.com/gast-lib/gast-lib</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=root.gast.playground\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=root.gast.playground</a><br>文档介绍：<a href=\"https://github.com/gast-lib/gast-lib#documentation\" target=\"_blank\" rel=\"external\">https://github.com/gast-lib/gast-lib#documentation</a>  </p>\n</li>\n<li><p>SensorManager<br>Android传感器管理<br>项目地址：<a href=\"https://github.com/nlathia/SensorManager\" target=\"_blank\" rel=\"external\">https://github.com/nlathia/SensorManager</a><br>文档介绍：<a href=\"https://docs.google.com/document/d/1TqThJULb-4e6TGb1gdkAaPCfyuXStjJpbnt7a0OZ9OE/edit\" target=\"_blank\" rel=\"external\">https://docs.google.com/document/d/1TqThJULb-4e6TGb1gdkAaPCfyuXStjJpbnt7a0OZ9OE/edit</a>  </p>\n</li>\n<li><p>GPSLogger<br>记录GPS信息<br>项目地址：<a href=\"https://github.com/mendhak/gpslogger\" target=\"_blank\" rel=\"external\">https://github.com/mendhak/gpslogger</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.mendhak.gpslogger\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.mendhak.gpslogger</a><br>文档介绍：<a href=\"http://code.mendhak.com/gpslogger/\" target=\"_blank\" rel=\"external\">http://code.mendhak.com/gpslogger/</a>  </p>\n</li>\n<li><p>Pedometer<br>计步器，使用硬件计步感应器<br>项目地址：<a href=\"https://github.com/j4velin/Pedometer\" target=\"_blank\" rel=\"external\">https://github.com/j4velin/Pedometer</a>  </p>\n</li>\n<li><p>leapcast<br>ChromeCast模拟器的App<br>项目地址：<a href=\"https://github.com/dz0ny/leapcast\" target=\"_blank\" rel=\"external\">https://github.com/dz0ny/leapcast</a>  </p>\n</li>\n<li><p>Arduino-Communicator<br>与Arduino通信的App<br>项目地址：<a href=\"https://github.com/jeppsson/Arduino-Communicator\" target=\"_blank\" rel=\"external\">https://github.com/jeppsson/Arduino-Communicator</a>  </p>\n</li>\n<li><p>android-pedometer<br>Android计步器<br>项目地址：<a href=\"https://github.com/bagilevi/android-pedometer\" target=\"_blank\" rel=\"external\">https://github.com/bagilevi/android-pedometer</a><br>Demo地址：<a href=\"http://pedometer.googlecode.com/files/Pedometer-1.4.apk\" target=\"_blank\" rel=\"external\">http://pedometer.googlecode.com/files/Pedometer-1.4.apk</a>  </p>\n</li>\n<li><p>OwnTracks for Android<br>自己的轨迹记录<br>项目地址：<a href=\"https://github.com/owntracks/android\" target=\"_blank\" rel=\"external\">https://github.com/owntracks/android</a>  </p>\n</li>\n<li><p>Shake Detector library for Android<br>Android手机震动摇晃检测库，提供供UI线程调用的回调接口<br>项目地址：<a href=\"https://github.com/tbouron/ShakeDetector\" target=\"_blank\" rel=\"external\">https://github.com/tbouron/ShakeDetector</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.github.tbouron.shakedetector.example\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.github.tbouron.shakedetector.example</a>  </p>\n</li>\n<li><p>Android heart rate monitor<br>Android心跳检测<br>项目地址：<a href=\"https://github.com/phishman3579/android-heart-rate-monitor\" target=\"_blank\" rel=\"external\">https://github.com/phishman3579/android-heart-rate-monitor</a>  </p>\n</li>\n<li><p>Bluetooth LE Library for Android<br>蓝牙源信息，包括宝库Mac、更新时间、RSSI、UUID、信号源距离、影响范围等信息<br>项目地址：<a href=\"https://github.com/alt236/Bluetooth-LE-Library---Android\" target=\"_blank\" rel=\"external\">https://github.com/alt236/Bluetooth-LE-Library---Android</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=uk.co.alt236.btlescan\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=uk.co.alt236.btlescan</a>  </p>\n</li>\n<li><p>farebot<br>通过NFC 从公交卡中读取数据的一个应用<br>项目地址：<a href=\"https://github.com/codebutler/farebot\" target=\"_blank\" rel=\"external\">https://github.com/codebutler/farebot</a>  </p>\n</li>\n</ol>\n<h4 id=\"十、安全\"><a href=\"#十、安全\" class=\"headerlink\" title=\"十、安全\"></a>十、安全</h4><ol>\n<li><p>SQLCipher<br>Sqlite加密工具<br>项目地址：<a href=\"https://github.com/sqlcipher/sqlcipher\" target=\"_blank\" rel=\"external\">https://github.com/sqlcipher/sqlcipher</a><br>文档介绍：<a href=\"http://sqlcipher.net/sqlcipher-for-android/\" target=\"_blank\" rel=\"external\">http://sqlcipher.net/sqlcipher-for-android/</a>  </p>\n</li>\n<li><p>Conceal<br>快速高效的进行文件加密解密<br>项目地址：<a href=\"https://github.com/facebook/conceal\" target=\"_blank\" rel=\"external\">https://github.com/facebook/conceal</a><br>文档介绍：<a href=\"https://github.com/facebook/conceal#usage\" target=\"_blank\" rel=\"external\">https://github.com/facebook/conceal#usage</a>  </p>\n</li>\n<li><p>Android-PasscodeLock<br>应用锁，每次启动或从任何Activity启动应用都需要输入四位数字的密码方可进入<br>项目地址：<a href=\"https://github.com/wordpress-mobile/Android-PasscodeLock\" target=\"_blank\" rel=\"external\">https://github.com/wordpress-mobile/Android-PasscodeLock</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=org.wordpress.android\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=org.wordpress.android</a><br>APP示例：Wordpress Android，支付宝，挖财  </p>\n</li>\n<li><p>GlowPadBackport<br>将Android4.2的锁屏界面解锁扩展到Android1.6及1.6+<br>项目地址：<a href=\"https://github.com/rock3r/GlowPadBackport\" target=\"_blank\" rel=\"external\">https://github.com/rock3r/GlowPadBackport</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=net.sebastianopoggi.samples.ui.GlowPadSample\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=net.sebastianopoggi.samples.ui.GlowPadSample</a><br>效果图：<img src=\"https://lh6.ggpht.com/U070b6Lh6cVsVwx4jN-5nq0xqiB1PBzrYABPeJIEe2hZQ5UWOxc-FDUG77wADelToHA=h310-rw\" alt=\"Renderings\">  </p>\n</li>\n<li><p>GlowPadView<br>Android 4锁屏界面解锁<br>项目地址：<a href=\"https://github.com/nadavfima/GlowPadView\" target=\"_blank\" rel=\"external\">https://github.com/nadavfima/GlowPadView</a><br>效果图：<a href=\"https://raw.github.com/nadavfima/GlowPadView/master/example.png\" target=\"_blank\" rel=\"external\">https://raw.github.com/nadavfima/GlowPadView/master/example.png</a>  </p>\n</li>\n<li><p>android-lockpattern<br>Android的图案密码解锁<br>项目地址：<a href=\"https://code.google.com/p/android-lockpattern/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-lockpattern/</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=group.pals.android.lib.ui.lockpattern.demo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=group.pals.android.lib.ui.lockpattern.demo</a><br>文档介绍：<a href=\"https://code.google.com/p/android-lockpattern/wiki/QuickUse\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-lockpattern/wiki/QuickUse</a>  </p>\n</li>\n<li><p>Android-InsecureBank<br>关于 Android 不安全性的示例<br>项目地址：<a href=\"https://github.com/dineshshetty/Android-InsecureBankv2\" target=\"_blank\" rel=\"external\">https://github.com/dineshshetty/Android-InsecureBankv2</a>  </p>\n</li>\n</ol>\n<h4 id=\"十一、插件化\"><a href=\"#十一、插件化\" class=\"headerlink\" title=\"十一、插件化\"></a>十一、插件化</h4><p>更多见：<a href=\"http://www.trinea.cn/android/android-plugin/\" target=\"_blank\" rel=\"external\">Android 插件化作用、概念以及不错的资料(包括开源项目)和解决方案</a> </p>\n<ol>\n<li><p>dynamic-load-apk<br>Android 动态加载Apk，热部署，利用 ClassLoader 以及 Activity 代理的方式解决<br>项目地址：<a href=\"https://github.com/singwhatiwanna/dynamic-load-apk\" target=\"_blank\" rel=\"external\">https://github.com/singwhatiwanna/dynamic-load-apk</a><br>文档介绍：<a href=\"http://blog.csdn.net/singwhatiwanna/article/details/22597587\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/singwhatiwanna/article/details/22597587</a>  </p>\n</li>\n<li><p>Android Dynamic Loader<br>点评的实现方式，和上面不同的是：他不是用代理 Activity 的方式实现而是用 Fragment 以及 Schema 的方式实现<br>项目地址：<a href=\"https://github.com/mmin18/AndroidDynamicLoader\" target=\"_blank\" rel=\"external\">https://github.com/mmin18/AndroidDynamicLoader</a><br>Demo地址：<a href=\"https://github.com/mmin18/AndroidDynamicLoader/raw/master/host.apk\" target=\"_blank\" rel=\"external\">https://github.com/mmin18/AndroidDynamicLoader/raw/master/host.apk</a>  </p>\n</li>\n<li><p>xCombine<br>Android App插件式插件开发，插件必须先安装，更推荐看上面两个开源项目<br>项目地址：<a href=\"https://github.com/wyouflf/xCombine\" target=\"_blank\" rel=\"external\">https://github.com/wyouflf/xCombine</a><br>文档介绍：<a href=\"http://my.oschina.net/u/1171837/blog/155377\" target=\"_blank\" rel=\"external\">http://my.oschina.net/u/1171837/blog/155377</a>  </p>\n</li>\n<li><p>Android Plugin Framework<br>Android插件式开发，开放的源码目前不完整<br>项目地址：<a href=\"https://github.com/umeng/apf\" target=\"_blank\" rel=\"external\">https://github.com/umeng/apf</a>  </p>\n</li>\n<li><p>multidex<br>安装多 dex 的 classloader<br>项目地址：<a href=\"https://github.com/casidiablo/multidex\" target=\"_blank\" rel=\"external\">https://github.com/casidiablo/multidex</a>  </p>\n</li>\n<li><p>ANR-WatchDog<br>Android ANR 监听，通过监听自己的 UI Thread 是否被执行确定是否发生了 ANR，并可以设置相关事件<br>项目地址：<a href=\"https://github.com/SalomonBrys/ANR-WatchDog\" target=\"_blank\" rel=\"external\">https://github.com/SalomonBrys/ANR-WatchDog</a>  </p>\n</li>\n</ol>\n<h4 id=\"十二、文件\"><a href=\"#十二、文件\" class=\"headerlink\" title=\"十二、文件\"></a>十二、文件</h4><p>对不同文档类型的处理，包括PDF、Word、EPub、Html、Zip等</p>\n<ol>\n<li><p>purePDF<br>允许从任何运行的SWF文件读取和创建PDF文档<br>项目地址：<a href=\"https://github.com/sephiroth74/purePDF\" target=\"_blank\" rel=\"external\">https://github.com/sephiroth74/purePDF</a>  </p>\n</li>\n<li><p>android-pdfview<br>快速解析pdf的view，默认支持手势缩放和相关动画<br>项目地址：<a href=\"https://github.com/JoanZapata/android-pdfview\" target=\"_blank\" rel=\"external\">https://github.com/JoanZapata/android-pdfview</a>  </p>\n</li>\n<li><p>Office 365 SDK for Android Preview<br>可支持Microsoft SharePoint Lists, Microsoft SharePoint Files, Microsoft Exchange Calendar, Microsoft Exchange Contacts, Microsoft Exchange Mail<br>项目地址：<a href=\"https://github.com/OfficeDev/Office-365-SDK-for-Android\" target=\"_blank\" rel=\"external\">https://github.com/OfficeDev/Office-365-SDK-for-Android</a>  </p>\n</li>\n<li><p>OpenSpritz-Android<br>EPub阅读器<br>项目地址：<a href=\"https://github.com/OnlyInAmerica/OpenSpritz-Android\" target=\"_blank\" rel=\"external\">https://github.com/OnlyInAmerica/OpenSpritz-Android</a>  </p>\n</li>\n<li><p>jsoup<br>一个解析html的java库，可方便的提取和操作数据<br>项目地址：<a href=\"https://github.com/jhy/jsoup\" target=\"_blank\" rel=\"external\">https://github.com/jhy/jsoup</a><br>官网网址：<a href=\"http://jsoup.org/\" target=\"_blank\" rel=\"external\">http://jsoup.org/</a><br>作用：(1) 从一个url、文件或string获得html并解析<br>(2) 利用dom遍历或css选择器查找、提取数据<br>(3) 操作html元素<br>(4) 根据白名单去除用于提交的非法数据防止xss攻击<br>(5) 输出整齐的html  </p>\n</li>\n<li><p>ZIP<br>java压缩和解压库<br>项目地址：<a href=\"https://github.com/zeroturnaround/zt-zip\" target=\"_blank\" rel=\"external\">https://github.com/zeroturnaround/zt-zip</a><br>文档介绍：<a href=\"https://github.com/zeroturnaround/zt-zip#examples\" target=\"_blank\" rel=\"external\">https://github.com/zeroturnaround/zt-zip#examples</a><br>作用：(1) 解压和压缩，并支持文件夹内递归操作<br>(2) 支持包含和排除某些元素<br>(3) 支持重命名元素<br>(4) 支持遍历zip包内容<br>(5) 比较两个zip包等功能  </p>\n</li>\n</ol>\n<h4 id=\"十三、其他\"><a href=\"#十三、其他\" class=\"headerlink\" title=\"十三、其他\"></a>十三、其他</h4><ol>\n<li><p>Salvage view<br>带View缓存的Viewpager PagerAdapter，很方便使用<br>项目地址：<a href=\"https://github.com/JakeWharton/salvage\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/salvage</a>  </p>\n</li>\n<li><p>Android Priority Job Queue<br>Android后台任务队列<br>项目地址：<a href=\"https://github.com/path/android-priority-jobqueue\" target=\"_blank\" rel=\"external\">https://github.com/path/android-priority-jobqueue</a><br>文档介绍：<a href=\"https://github.com/path/android-priority-jobqueue#getting-started\" target=\"_blank\" rel=\"external\">https://github.com/path/android-priority-jobqueue#getting-started</a>  </p>\n</li>\n<li><p>Cobub Razor<br>开源的mobile行为分析系统，包括web端、android端，支持ios和window phone<br>项目地址：<a href=\"https://github.com/cobub/razor\" target=\"_blank\" rel=\"external\">https://github.com/cobub/razor</a><br>Demo地址：<a href=\"http://demo.cobub.com/razor\" target=\"_blank\" rel=\"external\">http://demo.cobub.com/razor</a><br>官网网址：<a href=\"http://dev.cobub.com/\" target=\"_blank\" rel=\"external\">http://dev.cobub.com/</a>  </p>\n</li>\n<li><p>Countly<br>Android移动端数据采集分析系统<br>项目地址：<a href=\"https://github.com/Countly/countly-sdk-android\" target=\"_blank\" rel=\"external\">https://github.com/Countly/countly-sdk-android</a><br>官网网址：<a href=\"https://count.ly/\" target=\"_blank\" rel=\"external\">https://count.ly/</a>  </p>\n</li>\n<li><p>aFileChooser<br>文件选择器，可内嵌到程序中，而无需使用系统或三方文件选择器。<br>项目地址：<a href=\"https://github.com/iPaulPro/aFileChooser\" target=\"_blank\" rel=\"external\">https://github.com/iPaulPro/aFileChooser</a>  </p>\n</li>\n<li><p>androidpn<br>基于xmpp协议的消息推送解决方案，包括服务器端和android端。<br>项目地址：<a href=\"https://github.com/dannytiehui/androidpn\" target=\"_blank\" rel=\"external\">https://github.com/dannytiehui/androidpn</a>  </p>\n</li>\n<li><p>Bolts<br>Android的异步编程模式<br>项目地址：<a href=\"https://github.com/BoltsFramework/Bolts-Android/\" target=\"_blank\" rel=\"external\">https://github.com/BoltsFramework/Bolts-Android/</a><br>与AsyncTask比较：(1) 使用的是无大小限制的线程池<br>(2) 任务可组合可级联，防止了代码耦合  </p>\n</li>\n<li><p>CastCompanionLibrary-android<br>使Android程序中更快的接入Google Cast<br>项目地址：<a href=\"https://github.com/googlecast/CastCompanionLibrary-android\" target=\"_blank\" rel=\"external\">https://github.com/googlecast/CastCompanionLibrary-android</a><br>文档介绍：<a href=\"https://developers.google.com/cast/\" target=\"_blank\" rel=\"external\">https://developers.google.com/cast/</a>  </p>\n</li>\n<li><p>CastVideos-android<br>从Android设备分享Video通过Google Cast<br>项目地址：<a href=\"https://github.com/googlecast/CastVideos-android\" target=\"_blank\" rel=\"external\">https://github.com/googlecast/CastVideos-android</a><br>文档介绍：<a href=\"https://developers.google.com/cast/\" target=\"_blank\" rel=\"external\">https://developers.google.com/cast/</a>  </p>\n</li>\n<li><p>Uninstall_Statics<br>Android应用自身被卸载监听及打开浏览器等反馈功能实现<br>项目地址：<a href=\"https://github.com/sevenler/Uninstall_Statics\" target=\"_blank\" rel=\"external\">https://github.com/sevenler/Uninstall_Statics</a><br>文档介绍：<a href=\"http://www.cnblogs.com/zealotrouge/p/3157126.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/zealotrouge/p/3157126.html</a>  <a href=\"http://www.cnblogs.com/zealotrouge/p/3159772.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/zealotrouge/p/3159772.html</a>  </p>\n</li>\n<li><p>Memento<br>保证在系统配置改变时，Activity中的某些数据可以简单安全的保持不变<br>项目地址：<a href=\"https://github.com/mttkay/memento\" target=\"_blank\" rel=\"external\">https://github.com/mttkay/memento</a><br>文档介绍：<a href=\"https://github.com/mttkay/memento#usage\" target=\"_blank\" rel=\"external\">https://github.com/mttkay/memento#usage</a>  </p>\n</li>\n<li><p>FreeFlow<br>布局引擎，更简单的创建自定义布局，并且当数据和布局改变时更美观的过渡动画<br>项目地址：<a href=\"https://github.com/Comcast/FreeFlow\" target=\"_blank\" rel=\"external\">https://github.com/Comcast/FreeFlow</a><br>Demo地址：<a href=\"https://github.com/Comcast/FreeFlow/releases\" target=\"_blank\" rel=\"external\">https://github.com/Comcast/FreeFlow/releases</a>  </p>\n</li>\n<li><p>Android Gesture Detectors Framework<br>Android手势框架，支持双指旋转、移动、平移、缩放等<br>项目地址：<a href=\"https://github.com/Almeros/android-gesture-detectors\" target=\"_blank\" rel=\"external\">https://github.com/Almeros/android-gesture-detectors</a>  </p>\n</li>\n<li><p>Mapbox Android SDK<br>Android Map的替代版<br>项目地址：<a href=\"https://github.com/mapbox/mapbox-android-sdk\" target=\"_blank\" rel=\"external\">https://github.com/mapbox/mapbox-android-sdk</a>  </p>\n</li>\n<li><p>Activity animation<br>Activity跳转动画，支持各个方向波浪的效果<br>项目地址：<a href=\"https://github.com/flavienlaurent/activityanimation\" target=\"_blank\" rel=\"external\">https://github.com/flavienlaurent/activityanimation</a><br>在线演示：<a href=\"https://www.youtube.com/watch?v=-E0sc6w_Jck\" target=\"_blank\" rel=\"external\">https://www.youtube.com/watch?v=-E0sc6w_Jck</a>  </p>\n</li>\n<li><p>KryoNet<br>通过NIO提供客户端和服务器端TCP/UDP网络传输的Java库<br>项目地址：<a href=\"https://github.com/EsotericSoftware/kryonet\" target=\"_blank\" rel=\"external\">https://github.com/EsotericSoftware/kryonet</a>  </p>\n</li>\n<li><p>Rebound<br>一个模仿弹簧反弹的Java库，可用于创建动画<br>项目地址：<a href=\"https://github.com/facebook/rebound\" target=\"_blank\" rel=\"external\">https://github.com/facebook/rebound</a>  </p>\n</li>\n<li><p>Android Social Networks<br>社交网络接入统一管理器，可方便的从Twitter, LinkedIn, Facebook, Google Plus登陆、获得个人信息、发送消息、发送专篇、添加或删除好友<br>项目地址：<a href=\"https://github.com/antonkrasov/AndroidSocialNetworks\" target=\"_blank\" rel=\"external\">https://github.com/antonkrasov/AndroidSocialNetworks</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.github.androidsocialnetworks.apidemos\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.github.androidsocialnetworks.apidemos</a>  </p>\n</li>\n<li><p>SmartAppUpdates<br>Android App 增量升级，包含前后端方案、Demo、以及 so 库，可用于商店或大体积 App 差分升级<br>项目地址：<a href=\"https://github.com/cundong/SmartAppUpdates\" target=\"_blank\" rel=\"external\">https://github.com/cundong/SmartAppUpdates</a>  </p>\n</li>\n<li><p>Magnet<br>创建类似 Facebook 聊天桌面悬浮窗的效果<br>项目地址：<a href=\"https://github.com/premnirmal/Magnet\" target=\"_blank\" rel=\"external\">https://github.com/premnirmal/Magnet</a>  </p>\n</li>\n<li><p>Parceler<br>通过注解及工具类自动完成实体类 Parcelable及值传递<br>项目地址：<a href=\"https://github.com/johncarl81/parceler\" target=\"_blank\" rel=\"external\">https://github.com/johncarl81/parceler</a>  </p>\n</li>\n<li><p>AcDisplay<br>将 Android 的通知都集中到锁屏显示<br>项目地址：<a href=\"https://github.com/AChep/AcDisplay\" target=\"_blank\" rel=\"external\">https://github.com/AChep/AcDisplay</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.achep.acdisplay\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.achep.acdisplay</a>  </p>\n</li>\n<li><p>QrCodeScan<br>ZXing和ZBar结合的二维码扫描项目，提高了扫描效率<br>项目地址：<a href=\"https://github.com/SkillCollege/QrCodeScan\" target=\"_blank\" rel=\"external\">https://github.com/SkillCollege/QrCodeScan</a><br>效果图：<img src=\"http://www.eoeandroid.com/data/attachment/forum/201405/09/124538vteuz4leptgg1te6.png\" alt=\"QrCodeScan\">  </p>\n</li>\n<li><p>Android-ScreenShot<br>实现android系统截屏功能<br>项目地址：<a href=\"https://github.com/Android-ScreenShot/AndroidScreenShotService\" target=\"_blank\" rel=\"external\">https://github.com/Android-ScreenShot/AndroidScreenShotService</a><br>文档介绍：<a href=\"http://blog.csdn.net/buptgshengod/article/details/39155979\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/buptgshengod/article/details/39155979</a>  </p>\n</li>\n<li><p>card.io SDK for Android<br>信用卡扫描 Android SDK<br>项目地址：<a href=\"https://github.com/card-io/card.io-Android-SDK\" target=\"_blank\" rel=\"external\">https://github.com/card-io/card.io-Android-SDK</a><br>Demo项目：<a href=\"https://github.com/card-io/card.io-Android-SDK/tree/master/SampleApp\" target=\"_blank\" rel=\"external\">https://github.com/card-io/card.io-Android-SDK/tree/master/SampleApp</a>  </p>\n</li>\n<li><p>ASNE<br>Twitter, Facebook, Google Plus, LinkedIn, Instagram, Vkontakte, Odnoklassniki 的集成库，包括他们的大多数功能<br>项目地址：<a href=\"https://github.com/gorbin/ASNE\" target=\"_blank\" rel=\"external\">https://github.com/gorbin/ASNE</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.gorbin.androidsocialnetworksextended.asne\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.gorbin.androidsocialnetworksextended.asne</a>  </p>\n</li>\n<li><p>Android Signature Pad<br>Android 自定义的签名 View，可自定义笔颜色和大小<br>项目地址：<a href=\"https://github.com/gcacace/android-signaturepad\" target=\"_blank\" rel=\"external\">https://github.com/gcacace/android-signaturepad</a><br>Demo项目：<a href=\"https://github.com/gcacace/android-signaturepad/tree/master/SignaturePad-Example\" target=\"_blank\" rel=\"external\">https://github.com/gcacace/android-signaturepad/tree/master/SignaturePad-Example</a>  </p>\n</li>\n<li><p>Teleport<br>Android Wear 数据同步和消息传送库<br>项目地址：<a href=\"https://github.com/Mariuxtheone/Teleport\" target=\"_blank\" rel=\"external\">https://github.com/Mariuxtheone/Teleport</a>  </p>\n</li>\n<li><p>DebugLog<br>可以帮你创建更简单和更容易理解的调试日志，能够友好的显示调试信息所在类和函数。<br>项目地址：<a href=\"https://github.com/MustafaFerhan/DebugLog\" target=\"_blank\" rel=\"external\">https://github.com/MustafaFerhan/DebugLog</a><br>效果图：<img src=\"https://camo.githubusercontent.com/37deffede9f9b185886da48e96a4829ebd407260/68747470733a2f2f7261772e6769746875622e636f6d2f4d75737461666146657268616e2f44656275674c6f672f6d61737465722f44656275674c6f672d44656d6f2f6173736574732f7373322e6a7067\" alt=\"DebugLog\"> </p>\n</li>\n<li><p>Logger<br>简单、美观而且十分强大的Android日志工具<br>项目地址：<a href=\"https://github.com/orhanobut/logger\" target=\"_blank\" rel=\"external\">https://github.com/orhanobut/logger</a><br>Demo地址：<a href=\"https://github.com/orhanobut/logger/tree/master/app\" target=\"_blank\" rel=\"external\">https://github.com/orhanobut/logger/tree/master/app</a><br>效果图：<img src=\"https://github.com/orhanobut/logger/blob/master/images/description.png\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<h2 id=\"第三部分-优秀项目\"><a href=\"#第三部分-优秀项目\" class=\"headerlink\" title=\"第三部分 优秀项目\"></a>第三部分 优秀项目</h2><p>主要介绍那些Android还不错的完整项目，目前包含的项目主要依据是项目有意思或项目分层规范比较好。<br>Linux<br>项目地址：<a href=\"https://github.com/torvalds/linux\" target=\"_blank\" rel=\"external\">https://github.com/torvalds/linux</a><br>Android<br>项目地址：<a href=\"https://android.googlesource.com/\" target=\"_blank\" rel=\"external\">https://android.googlesource.com/</a> 或 <a href=\"https://github.com/android\" target=\"_blank\" rel=\"external\">https://github.com/android</a><br>以上两个项目，不解释  </p>\n<p>(1) ZXing<br>二维码扫描工具<br>项目地址：<a href=\"https://github.com/zxing/zxing\" target=\"_blank\" rel=\"external\">https://github.com/zxing/zxing</a> 或 <a href=\"https://code.google.com/p/zxing/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/zxing/</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=com.google.zxing.client.android\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.google.zxing.client.android</a><br>PS：现在市面上很多应用的二维码扫描功能都是从这个修改而来  </p>\n<p>(2) photup<br>编辑机批量上传照片到facebook上<br>项目地址：<a href=\"https://github.com/chrisbanes/photup\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/photup</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=uk.co.senab.photup\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=uk.co.senab.photup</a><br>PS：代码分包合理，很棒。不过这个项目依赖的开源项目比较多，比较难编译  </p>\n<p>(3) github-android<br>Github的Android客户端项目<br>项目地址：<a href=\"https://github.com/github/android\" target=\"_blank\" rel=\"external\">https://github.com/github/android</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=com.github.mobile\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.github.mobile</a>  </p>\n<p>(4) Notes<br>MIUI便签<br>项目地址：<a href=\"https://github.com/MiCode/Notes\" target=\"_blank\" rel=\"external\">https://github.com/MiCode/Notes</a><br>APK地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true\" target=\"_blank\" rel=\"external\">https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true</a><br>PS：项目分包比较合理，相比较miui的文件管理器<a href=\"https://github.com/MiCode/FileExplorer\" target=\"_blank\" rel=\"external\">https://github.com/MiCode/FileExplorer</a> 代码规范较好得多  </p>\n<p>(5) weicuiyuan<br>四次元-新浪微博客户端<br>项目地址：<a href=\"https://github.com/qii/weiciyuan\" target=\"_blank\" rel=\"external\">https://github.com/qii/weiciyuan</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=org.qii.weiciyuan\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=org.qii.weiciyuan</a>  </p>\n<p>(6) gnucash-android<br>一个记账理财软件<br>项目地址：<a href=\"https://github.com/codinguser/gnucash-android\" target=\"_blank\" rel=\"external\">https://github.com/codinguser/gnucash-android</a><br>APK地址：<a href=\"http://play.google.com/store/apps/details?id=org.gnucash.android\" target=\"_blank\" rel=\"external\">http://play.google.com/store/apps/details?id=org.gnucash.android</a>  </p>\n<p>(7) AntennaPod<br>支持rss订阅、音乐订阅<br>项目地址：<a href=\"https://github.com/danieloeh/AntennaPod\" target=\"_blank\" rel=\"external\">https://github.com/danieloeh/AntennaPod</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=de.danoeh.antennapod\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=de.danoeh.antennapod</a>  </p>\n<p>(8) ChaseWhisplyProject<br>打鬼游戏<br>项目地址：<a href=\"https://github.com/tvbarthel/ChaseWhisplyProject\" target=\"_blank\" rel=\"external\">https://github.com/tvbarthel/ChaseWhisplyProject</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=fr.tvbarthel.games.chasewhisply\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=fr.tvbarthel.games.chasewhisply</a>  </p>\n<p>(9) Tweet Lanes<br>功能完整的Twitter客户端<br>项目地址：<a href=\"https://github.com/chrislacy/TweetLanes\" target=\"_blank\" rel=\"external\">https://github.com/chrislacy/TweetLanes</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=com.tweetlanes.android\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.tweetlanes.android</a>  </p>\n<p>(10) Financius<br>简单易用的记账程序<br>项目地址：<a href=\"https://github.com/mvarnagiris/Financius\" target=\"_blank\" rel=\"external\">https://github.com/mvarnagiris/Financius</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=com.code44.finance\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.code44.finance</a>  </p>\n<p>(11) todo.txt-android<br>todo.txt的官方Android应用<br>项目地址：<a href=\"https://github.com/ginatrapani/todo.txt-android\" target=\"_blank\" rel=\"external\">https://github.com/ginatrapani/todo.txt-android</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=com.todotxt.todotxttouch\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.todotxt.todotxttouch</a>  </p>\n<p>(12) simpletask<br>基于todo.txt官方应用的另一个客户端<br>项目地址：<a href=\"https://github.com/mpcjanssen/simpletask-android\" target=\"_blank\" rel=\"external\">https://github.com/mpcjanssen/simpletask-android</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=nl.mpcjanssen.todotxtholo\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=nl.mpcjanssen.todotxtholo</a>  </p>\n<p>(13) Muzei Live Wallpaper<br>定时更换桌面精美壁纸<br>项目地址：<a href=\"https://github.com/romannurik/muzei\" target=\"_blank\" rel=\"external\">https://github.com/romannurik/muzei</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=net.nurik.roman.muzei\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=net.nurik.roman.muzei</a>  </p>\n<p>(14) Scanbook<br>扫描搜索查询图书信息<br>项目地址：<a href=\"https://github.com/JayFang1993/ScanBook\" target=\"_blank\" rel=\"external\">https://github.com/JayFang1993/ScanBook</a><br>APK地址：<a href=\"http://www.wandoujia.com/apps/com.scanbook\" target=\"_blank\" rel=\"external\">http://www.wandoujia.com/apps/com.scanbook</a>  </p>\n<p>(14) iosched<br>The Google I/O 2014 Android App<br>项目地址：<a href=\"https://github.com/google/iosched\" target=\"_blank\" rel=\"external\">https://github.com/google/iosched</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=com.google.samples.apps.iosched\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.google.samples.apps.iosched</a><br>效果图: <img src=\"https://github.com/google/iosched/raw/master/art/hero.png\" alt=\"iosched\"></p>\n<h2 id=\"第四部分-开发工具及测试工具\"><a href=\"#第四部分-开发工具及测试工具\" class=\"headerlink\" title=\"第四部分 开发工具及测试工具\"></a>第四部分 开发工具及测试工具</h2><p>主要介绍和Android开发工具和测试工具相关的开源项目。    </p>\n<h4 id=\"一、开发效率工具\"><a href=\"#一、开发效率工具\" class=\"headerlink\" title=\"一、开发效率工具\"></a>一、开发效率工具</h4><ol>\n<li><p>Parceler<br>通过注解及工具类自动完成实体类 Parcelable及值传递<br>项目地址：<a href=\"https://github.com/johncarl81/parceler\" target=\"_blank\" rel=\"external\">https://github.com/johncarl81/parceler</a>  </p>\n</li>\n<li><p>Json2Java<br>根据JSon数据自动生成对应的Java实体类，还支持Parcel、Gson Annotations对应代码自动生成。期待后续的提取父类以及多url构建整个工程的功能<br>项目地址：<a href=\"https://github.com/jonfhancock/JsonToJava\" target=\"_blank\" rel=\"external\">https://github.com/jonfhancock/JsonToJava</a><br>在线演示：<a href=\"http://jsontojava.appspot.com/\" target=\"_blank\" rel=\"external\">http://jsontojava.appspot.com/</a>  </p>\n</li>\n<li><p>IntelliJ Plugin for Android Parcelable boilerplate code generation<br>Android studio插件，生成Parcelable代码<br>项目地址：<a href=\"https://github.com/mcharmas/android-parcelable-intellij-plugin\" target=\"_blank\" rel=\"external\">https://github.com/mcharmas/android-parcelable-intellij-plugin</a><br>效果图：<img src=\"https://github.com/mcharmas/android-parcelable-intellij-plugin/raw/master/screenshot.png\" alt=\"Holo Colors Idea\">  </p>\n</li>\n<li><p>Android Holo Colors IntelliJ Plugin<br>Android studio插件，生成holo样式9 patch图片<br>项目地址：<a href=\"https://github.com/jeromevdl/android-holo-colors-idea-plugin\" target=\"_blank\" rel=\"external\">https://github.com/jeromevdl/android-holo-colors-idea-plugin</a><br>效果图：<img src=\"https://raw.github.com/jeromevdl/android-holo-colors-idea-plugin/master/other/holocolorsidea.png\" alt=\"Holo Colors Idea\">  </p>\n</li>\n<li><p>Android Drawable Factory<br>用于生成各个分辨率的图片<br>项目地址：<a href=\"https://github.com/tizionario/AndroidDrawableFactory\" target=\"_blank\" rel=\"external\">https://github.com/tizionario/AndroidDrawableFactory</a><br>效果图：<img src=\"https://github-camo.global.ssl.fastly.net/5c3844b345a9779296f996490070dab0bfc9dbf5/68747470733a2f2f646c2e64726f70626f7875736572636f6e74656e742e636f6d2f752f32363636343637352f416e64726f69644472617761626c65466163746f72792f312e706e67\" alt=\"Android Drawable Factory\">  </p>\n</li>\n<li><p>SelectorChapek for Android<br>Android Studio插件，可根据固定文件名格式资源自动生成drawable selectors xml文件。<br>项目地址：<a href=\"https://github.com/inmite/android-selector-chapek\" target=\"_blank\" rel=\"external\">https://github.com/inmite/android-selector-chapek</a>  </p>\n</li>\n<li><p>Android Action Bar Style Generator<br>Android ActionBar样式生成器，可在线选择ActionBar样式自动生成所需要的图片资源及xml文件<br>项目地址：<a href=\"https://github.com/jgilfelt/android-actionbarstylegenerator\" target=\"_blank\" rel=\"external\">https://github.com/jgilfelt/android-actionbarstylegenerator</a><br>在线演示：<a href=\"http://jgilfelt.github.io/android-actionbarstylegenerator/\" target=\"_blank\" rel=\"external\">http://jgilfelt.github.io/android-actionbarstylegenerator/</a>  </p>\n</li>\n<li><p>ButterKnifeZelezny<br>用于快速生成<a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">ButterKnife</a>View注入代码的Android Studio/IDEA插件<br>项目地址：<a href=\"https://github.com/inmite/android-butterknife-zelezny\" target=\"_blank\" rel=\"external\">https://github.com/inmite/android-butterknife-zelezny</a>  </p>\n</li>\n<li><p>RoboCoP<br>利用Gradle task根据固定格式的json文件生成ContentProvider<br>项目地址：<a href=\"https://github.com/mediarain/RoboCoP\" target=\"_blank\" rel=\"external\">https://github.com/mediarain/RoboCoP</a>  </p>\n</li>\n<li><p>appiconsizes<br>用于生成各个分辨率的图片<br>项目地址：<a href=\"http://www.appiconsizes.com/\" target=\"_blank\" rel=\"external\">http://www.appiconsizes.com/</a>  </p>\n</li>\n<li><p>Gradle Retrolambda Plugin<br><a href=\"https://github.com/orfjackal/retrolambda\" target=\"_blank\" rel=\"external\">Retrolambda</a>是将Java8的Lambdas应用于Java7的工具，本项目是Gradle插件，通过Retrolambda从而使Java或Android项目用Java8的Lambdas编写，将编译后的字节码转换为Java6和7的字节码从而正常运行<br>项目地址：<a href=\"https://github.com/evant/gradle-retrolambda\" target=\"_blank\" rel=\"external\">https://github.com/evant/gradle-retrolambda</a>  </p>\n</li>\n<li><p>Dagger IntelliJ Plugin<br>dagger的intellij插件<br>项目地址：<a href=\"https://github.com/square/dagger-intellij-plugin\" target=\"_blank\" rel=\"external\">https://github.com/square/dagger-intellij-plugin</a>  </p>\n</li>\n<li><p>Android Gen Drawable Maven plugin<br>在编译时根据SVG描述文件生成不同分辨率的jpg、png或点9图片<br>项目地址：<a href=\"https://github.com/avianey/androidgendrawable-maven-plugin\" target=\"_blank\" rel=\"external\">https://github.com/avianey/androidgendrawable-maven-plugin</a>  </p>\n</li>\n<li><p>Android Asset Studio<br>各种Android资源自动生成器，包括启动图标、ActionBar图标、通知栏图标、点9等<br>项目地址：<a href=\"https://github.com/romannurik/AndroidAssetStudio\" target=\"_blank\" rel=\"external\">https://github.com/romannurik/AndroidAssetStudio</a><br>在线演示：<a href=\"http://romannurik.github.io/AndroidAssetStudio/\" target=\"_blank\" rel=\"external\">http://romannurik.github.io/AndroidAssetStudio/</a>  </p>\n</li>\n<li><p>jsonschema2pojo<br>根据Json内容生成java对象，支持jackjson和gson<br>项目地址：<a href=\"https://github.com/joelittlejohn/jsonschema2pojo\" target=\"_blank\" rel=\"external\">https://github.com/joelittlejohn/jsonschema2pojo</a><br>在线演示：<a href=\"http://www.jsonschema2pojo.org/\" target=\"_blank\" rel=\"external\">http://www.jsonschema2pojo.org/</a>  </p>\n</li>\n<li><p>9-Patch-Resizer<br>自动生成 png 及点 9 图片的不同分辨率版本<br>项目地址：<a href=\"https://github.com/redwarp/9-Patch-Resizer\" target=\"_blank\" rel=\"external\">https://github.com/redwarp/9-Patch-Resizer</a>  </p>\n</li>\n<li><p>AndroidLocalizationer<br>可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件<br>项目地址：<a href=\"https://github.com/westlinkin/AndroidLocalizationer\" target=\"_blank\" rel=\"external\">https://github.com/westlinkin/AndroidLocalizationer</a>  </p>\n</li>\n</ol>\n<h4 id=\"二、开发自测相关\"><a href=\"#二、开发自测相关\" class=\"headerlink\" title=\"二、开发自测相关\"></a>二、开发自测相关</h4><ol>\n<li><p>Quality Tools for Android<br>Android测试及自测工具集合和示例<br>项目地址：<a href=\"https://github.com/stephanenicolas/Quality-Tools-for-Android\" target=\"_blank\" rel=\"external\">https://github.com/stephanenicolas/Quality-Tools-for-Android</a>  </p>\n</li>\n<li><p>android-test-kit<br>Google的Android测试工具<br>包括GoogleInstrumentationTestRunner(增强版的InstrumentationTestRunner)和Espresso(用于快速写出可靠测试用例的API)<br>项目地址：<a href=\"https://code.google.com/p/android-test-kit/\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-test-kit/</a><br>文档介绍：<a href=\"https://code.google.com/p/android-test-kit/w/list\" target=\"_blank\" rel=\"external\">https://code.google.com/p/android-test-kit/w/list</a>  </p>\n</li>\n<li><p>robolectric<br>测试用例编写框架<br>项目地址：<a href=\"https://github.com/robolectric/robolectric\" target=\"_blank\" rel=\"external\">https://github.com/robolectric/robolectric</a><br>Demo地址：<a href=\"https://github.com/robolectric/robolectricsample\" target=\"_blank\" rel=\"external\">https://github.com/robolectric/robolectricsample</a><br>文档介绍：<a href=\"http://robolectric.org/\" target=\"_blank\" rel=\"external\">http://robolectric.org/</a><br>特点：(1). 不需要模拟器在一般JVM就可以运行测试用例<br>(2). 能完成在真机上的大部分测试包括感应器<br>其他的测试用例及相关模块Mock可见：<a href=\"https://code.google.com/p/android-mock/\" target=\"_blank\" rel=\"external\">android-mock</a>, <a href=\"https://code.google.com/p/mockito/\" target=\"_blank\" rel=\"external\">mockito</a>, <a href=\"https://github.com/easymock/easymock\" target=\"_blank\" rel=\"external\">easy-mock</a>  </p>\n</li>\n<li><p>Android FEST<br>提供一些列方便的断言，可用于提高编写Android自测代码效率<br>项目地址：<a href=\"https://github.com/square/fest-android\" target=\"_blank\" rel=\"external\">https://github.com/square/fest-android</a>  </p>\n</li>\n<li><p>BoundBox<br>可用于测试类各种访问权限的属性、方法。实际是通过BoundBox这个annotation生成一个属性和方法都是public权限的中间类并对此类进行测试完成的<br>项目地址：<a href=\"https://github.com/stephanenicolas/boundbox\" target=\"_blank\" rel=\"external\">https://github.com/stephanenicolas/boundbox</a>  </p>\n</li>\n<li><p>Hugo<br>用于打印函数信息及执行时间的工具，仅在debug模式生效<br>项目地址：<a href=\"https://github.com/JakeWharton/hugo\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/hugo</a>  </p>\n</li>\n<li><p>scalpel<br>在应用下面添加一层用于界面调试，待详细补充 // TODO<br>项目地址：<a href=\"https://github.com/JakeWharton/scalpel\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/scalpel</a>  </p>\n</li>\n<li><p>Android Screenshot library<br>Android截图工具类，用于在持续集成时截图<br>项目地址：<a href=\"https://github.com/rtyley/android-screenshot-lib\" target=\"_blank\" rel=\"external\">https://github.com/rtyley/android-screenshot-lib</a>  </p>\n</li>\n<li><p>sonar-android-lint-plugin<br>将android lint的错误在sonar中展现<br>项目地址：<a href=\"https://github.com/SonarCommunity/sonar-android\" target=\"_blank\" rel=\"external\">https://github.com/SonarCommunity/sonar-android</a>  </p>\n</li>\n</ol>\n<h4 id=\"三、测试工具\"><a href=\"#三、测试工具\" class=\"headerlink\" title=\"三、测试工具\"></a>三、测试工具</h4><ol>\n<li><p>Spoon<br>可用于android不同机型设备自动化测试，能将应用apk和测试apk运行在不同机器上并生成相应测试报告。<br>项目地址：<a href=\"https://github.com/square/spoon\" target=\"_blank\" rel=\"external\">https://github.com/square/spoon</a>  </p>\n</li>\n<li><p>Tencent APT<br>APT是腾讯开源的一个Android平台高效性能测试组件，提供丰富实用的功能，适用于开发自测、定位性能瓶颈；测试人员完成性能基准测试、竞品对比测试<br>项目地址：<a href=\"https://github.com/stormzhang/APT\" target=\"_blank\" rel=\"external\">https://github.com/stormzhang/APT</a>  </p>\n</li>\n<li><p>Emmagee<br>网易开源的性能测试工具，包括CPU、内存、网络流量、启动时间、电池状态等<br>项目地址：<a href=\"https://github.com/NetEase/Emmagee\" target=\"_blank\" rel=\"external\">https://github.com/NetEase/Emmagee</a>  </p>\n</li>\n<li><p>Android py-uiautomator<br>py-uiautomator是一个对Android uiautomator用python进行封装的测试框架.<br>项目地址：<a href=\"https://github.com/xiaocong/uiautomator\" target=\"_blank\" rel=\"external\">https://github.com/xiaocong/uiautomator</a>  </p>\n</li>\n<li><p>Augmented Traffic Control<br>Augmented Traffic Control: A tool to simulate network conditions(模拟网络状况)<br>模拟网络状况，包括带宽、时延抖动、丢包率、错包率、包重排率<br>项目地址：<a href=\"https://github.com/facebook/augmented-traffic-control\" target=\"_blank\" rel=\"external\">https://github.com/facebook/augmented-traffic-control</a>   </p>\n</li>\n<li><p>stetho<br>Stetho is a debug bridge for Android applications, enabling the powerful Chrome Developer Tools and much more. 使用chrome来调试android设备<br>项目地址：<a href=\"https://github.com/facebook/stetho\" target=\"_blank\" rel=\"external\">https://github.com/facebook/stetho</a>  </p>\n</li>\n</ol>\n<h4 id=\"四、开发及编译环境\"><a href=\"#四、开发及编译环境\" class=\"headerlink\" title=\"四、开发及编译环境\"></a>四、开发及编译环境</h4><ol>\n<li><p>Buck<br>facebook开源的Android编译工具，效率是ant的两倍。主要优点在于：<br>(1) 加快编译速度，通过并行利用多核cpu和跟踪不变资源减少增量编译时间实现<br>(2) 可以在编译系统中生成编译规则而无须另外的系统生成编译规则文件<br>(3) 编译同时可生成单元测试结果<br>(4) 既可用于IDE编译也可用于持续集成编译<br>(5) facebook持续优化中<br>项目地址：<a href=\"https://github.com/facebook/buck\" target=\"_blank\" rel=\"external\">https://github.com/facebook/buck</a>  </p>\n</li>\n<li><p>Android Maven Plugin<br>Android Maven插件，可用于对android三方依赖进行管理。在J2EE开发中，maven是非常成熟的依赖库管理工具，可统一管理依赖库。<br>项目地址：<a href=\"https://github.com/jayway/maven-android-plugin\" target=\"_blank\" rel=\"external\">https://github.com/jayway/maven-android-plugin</a>  </p>\n</li>\n<li><p>umeng-muti-channel-build-tool<br>渠道打包工具<br>项目地址：<a href=\"https://github.com/umeng/umeng-muti-channel-build-tool\" target=\"_blank\" rel=\"external\">https://github.com/umeng/umeng-muti-channel-build-tool</a><br>另可参见Google的构建系统Gradle：<a href=\"http://tools.android.com/tech-docs/new-build-system/user-guide\" target=\"_blank\" rel=\"external\">http://tools.android.com/tech-docs/new-build-system/user-guide</a>  </p>\n</li>\n<li><p>Genymotion<br>目前最好用最快的android模拟器<br>项目地址：<a href=\"http://www.genymotion.com/\" target=\"_blank\" rel=\"external\">http://www.genymotion.com/</a><br>Android studio集成控件： <a href=\"http://plugins.jetbrains.com/plugin/7269?pr=idea\" target=\"_blank\" rel=\"external\">http://plugins.jetbrains.com/plugin/7269?pr=idea</a><br>Cyril Mottier推荐：<a href=\"http://cyrilmottier.com/2013/06/27/a-productive-android-development-environment/\" target=\"_blank\" rel=\"external\">http://cyrilmottier.com/2013/06/27/a-productive-android-development-environment/</a>  </p>\n</li>\n<li><p>gradle-mvn-push<br>方便的将Gradle的Artifacts上传到Maven仓库<br>项目地址：<a href=\"https://github.com/chrisbanes/gradle-mvn-push\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/gradle-mvn-push</a><br>文档介绍：<a href=\"https://github.com/chrisbanes/gradle-mvn-push#usage\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/gradle-mvn-push#usage</a>  </p>\n</li>\n<li><p>Android Emulator Plugin for Jenkins<br>Android模拟器 jenkins插件，用于Jenkins做持续集成时跑模拟器测试<br>项目地址：<a href=\"https://github.com/jenkinsci/android-emulator-plugin\" target=\"_blank\" rel=\"external\">https://github.com/jenkinsci/android-emulator-plugin</a>  </p>\n</li>\n<li><p>Android Maven Plugin<br>管理应用所需要的依赖库。包括的构建工具有Maven、Gradle、ant、sbt<br>项目地址：<a href=\"https://github.com/mosabua/maven-android-sdk-deployer\" target=\"_blank\" rel=\"external\">https://github.com/mosabua/maven-android-sdk-deployer</a>  </p>\n</li>\n<li><p>SDK Manager Plugin<br>下载和管理Android SDK的Gradle插件<br>项目地址：<a href=\"https://github.com/JakeWharton/sdk-manager-plugin\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/sdk-manager-plugin</a>  </p>\n</li>\n<li><p>Gradle Protobuf Plugin<br>将.proto文件转换成Java文件的gradle插件<br>项目地址：<a href=\"https://github.com/andrewkroh/gradle-protobuf-plugin\" target=\"_blank\" rel=\"external\">https://github.com/andrewkroh/gradle-protobuf-plugin</a>  </p>\n</li>\n<li><p>ChromeADB<br>Chrome 的 Adb 插件，当登录后，能看到所有连接的设备并操作，可以看应用、进程、内存及磁盘使用情况等<br>项目地址：<a href=\"https://github.com/importre/chromeadb\" target=\"_blank\" rel=\"external\">https://github.com/importre/chromeadb</a>  </p>\n</li>\n</ol>\n<h4 id=\"五、其他\"><a href=\"#五、其他\" class=\"headerlink\" title=\"五、其他\"></a>五、其他</h4><ol>\n<li><p>ViewServer<br>允许app运行在任何手机上都可以用HierarchyViewer查看<br>项目地址：<a href=\"https://github.com/romainguy/ViewServer\" target=\"_blank\" rel=\"external\">https://github.com/romainguy/ViewServer</a>  </p>\n</li>\n<li><p>GridWichterle for Android<br>在整个系统上显示一个grid，用来帮助查看应用布局及使得布局更美观，可设置grid网格大小和颜色，android推荐48dp和8dp，可见 Android Design Guidelines – Metrics and Grids，比起hierarchyviewer相差甚远，不过偶尔可用来作为布局查看工具。<br>项目地址：<a href=\"https://github.com/inmite/android-grid-wichterle\" target=\"_blank\" rel=\"external\">https://github.com/inmite/android-grid-wichterle</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=eu.inmite.android.gridwichterle\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=eu.inmite.android.gridwichterle</a>  </p>\n</li>\n<li><p>Catlog<br>手机端log查看工具，支持不同颜色显示、关键字过滤、级别过滤、进程id过滤、录制功能等<br>项目地址：<a href=\"https://github.com/nolanlawson/Catlog\" target=\"_blank\" rel=\"external\">https://github.com/nolanlawson/Catlog</a><br>在线演示：<a href=\"https://play.google.com/store/apps/details?id=com.nolanlawson.logcat\" target=\"_blank\" rel=\"external\">https://play.google.com/store/apps/details?id=com.nolanlawson.logcat</a>  </p>\n</li>\n<li><p>PID Cat<br>根据package查看logcat日志<br>项目地址：<a href=\"https://github.com/JakeWharton/pidcat\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/pidcat</a>  </p>\n</li>\n<li><p>ACRA<br>应用崩溃信息日志上报到GoogleDoc工具，网页版展现结果三方开源地址<a href=\"https://github.com/BenoitDuffez/crashreportsviewer\" target=\"_blank\" rel=\"external\">https://github.com/BenoitDuffez/crashreportsviewer</a><br>项目地址：<a href=\"https://github.com/ACRA/acra\" target=\"_blank\" rel=\"external\">https://github.com/ACRA/acra</a><br>文档介绍：<a href=\"https://github.com/ACRA/acra/wiki/BasicSetup\" target=\"_blank\" rel=\"external\">https://github.com/ACRA/acra/wiki/BasicSetup</a>  </p>\n</li>\n<li><p>Crashlytics<br>提供丰富的应用崩溃信息日志收集<br>轻量级，丰富，可自定义应用崩溃信息收集器，附有邮件通知<br>项目地址：<a href=\"http://www.crashlytics.com/\" target=\"_blank\" rel=\"external\">http://www.crashlytics.com/</a><br>集成插件：<a href=\"http://try.crashlytics.com/sdk-android/?utm_source=blog&amp;utm_medium=blog&amp;utm_campaign=Announcing_android_studio_wp&amp;utm_content=CTA_button\" target=\"_blank\" rel=\"external\">Android Studio, Eclipse and IntelliJ</a>  </p>\n</li>\n<li><p>Android Resource Navigator<br>chrome插件，可以方便的查看github上android源码工程的styles.xml和themes.xml。主要功能：<br>(1) 快速打开android styles.xml themes.xml<br>(2) 方便在资源间跳转。styles.xml themes.xml文件中资源链接跳转，可以方便跳转到某个资源<br>(3) 方便查找某个style和theme。chrome地址栏输入arn+tab+搜索内容回车即可<br>(4) 自动下载不同分辨率下的drawable<br>(5) 通过映射查找那些不是按照固定命名规则命名的style和theme<br>项目地址：<a href=\"https://github.com/jgilfelt/android-resource-navigator\" target=\"_blank\" rel=\"external\">https://github.com/jgilfelt/android-resource-navigator</a><br>在线演示：<a href=\"https://chrome.google.com/webstore/detail/android-resource-navigato/agoomkionjjbejegcejiefodgbckeebo?hl=en&amp;gl=GB\" target=\"_blank\" rel=\"external\">https://chrome.google.com/webstore/detail/android-resource-navigato/agoomkionjjbejegcejiefodgbckeebo?hl=en&amp;gl=GB</a>  </p>\n</li>\n<li><p>android-resource-remover<br>根据lint的提示删除项目中无用的资源，减少包的大小<br>项目地址：<a href=\"https://github.com/KeepSafe/android-resource-remover\" target=\"_blank\" rel=\"external\">https://github.com/KeepSafe/android-resource-remover</a>  </p>\n</li>\n<li><p>Telescope<br>通过手势截图以特定主题发送到特定邮箱地址报告Bug<br>项目地址：<a href=\"https://github.com/mattprecious/telescope\" target=\"_blank\" rel=\"external\">https://github.com/mattprecious/telescope</a>  </p>\n</li>\n<li><p>Complete Android Fragment &amp; Activity Lifecycle<br>完整的Android Fragment/Activity生命周期图<br>项目地址：<a href=\"https://github.com/xxv/android-lifecycle\" target=\"_blank\" rel=\"external\">https://github.com/xxv/android-lifecycle</a>  </p>\n</li>\n<li><p>Bugsnag Notifier for Android<br>通过<code>Thread.UncaughtExceptionHandler</code>捕获应用未处理的异常崩溃 Bug 并用 Notification 展示同时上传到后台服务器<br>项目地址：<a href=\"https://github.com/bugsnag/bugsnag-android\" target=\"_blank\" rel=\"external\">https://github.com/bugsnag/bugsnag-android</a><br>文档介绍：<a href=\"https://github.com/bugsnag/bugsnag-android#installation--setup\" target=\"_blank\" rel=\"external\">https://github.com/bugsnag/bugsnag-android#installation--setup</a>  </p>\n</li>\n<li><p>Material Design Icons<br>Google Material Design 规范中的 Icon<br>项目地址：<a href=\"https://github.com/google/material-design-icons\" target=\"_blank\" rel=\"external\">https://github.com/google/material-design-icons</a>  </p>\n</li>\n<li><p>scrollscreenshot<br>Android 滚动屏幕自动截图 jar 包，支持纵向、横向滚动截屏拼接<br>项目地址：<a href=\"https://github.com/PGSSoft/scrollscreenshot\" target=\"_blank\" rel=\"external\">https://github.com/PGSSoft/scrollscreenshot</a><br>效果图：<img src=\"https://github.com/PGSSoft/scrollscreenshot/raw/master/samplehorizontal.png\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<ol>\n<li>droidicon<br>1600+的海量Icon，包括750+的Material Design icons<br>项目地址：<a href=\"https://github.com/theDazzler/droidicon\" target=\"_blank\" rel=\"external\">https://github.com/theDazzler/droidicon</a>   </li>\n</ol>\n<h2 id=\"第五部分\"><a href=\"#第五部分\" class=\"headerlink\" title=\"第五部分\"></a>第五部分</h2><p>主要介绍那些乐于分享并且有一些很不错的开源项目的个人和组织。Follow大神，深挖大神的项目和following，你会发现很多。  </p>\n<h4 id=\"一、个人\"><a href=\"#一、个人\" class=\"headerlink\" title=\"一、个人\"></a>一、个人</h4><ol>\n<li><p>JakeWharton<br>就职于Square，绝对牛逼的大神，项目主要集中在Android版本兼容，ViewPager及开发工具上<br>Github地址：<a href=\"https://github.com/JakeWharton\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton</a><br>代表作：ActionBarSherlock，Android-ViewPagerIndicator，Nine Old Androids，SwipeToDismissNOA，hugo，butterknife，Android-DirectionalViewPager, scalpel<br>pidcat另外对square及其他开源项目有很多贡献<br>主页：<a href=\"http://jakewharton.com/\" target=\"_blank\" rel=\"external\">http://jakewharton.com/</a>  </p>\n</li>\n<li><p>Chris Banes<br>Github地址：<a href=\"https://github.com/chrisbanes\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes</a><br>代表作：ActionBar-PullToRefresh，PhotoView，Android-BitmapCache，Android-PullToRefresh<br>主页：<a href=\"http://chris.banes.me/\" target=\"_blank\" rel=\"external\">http://chris.banes.me/</a>  </p>\n</li>\n<li><p>Koushik Dutta<br>就职于ClockworkMod<br>Github地址：<a href=\"https://github.com/koush\" target=\"_blank\" rel=\"external\">https://github.com/koush</a><br>代表作：Superuser，AndroidAsync，UrlImageViewHelper，ion, 另外对<a href=\"https://github.com/CyanogenMod\" target=\"_blank\" rel=\"external\">https://github.com/CyanogenMod</a> 的开源项目有很多贡献<br>主页：<a href=\"http://koush.com/\" target=\"_blank\" rel=\"external\">http://koush.com/</a>  </p>\n</li>\n<li><p>Simon Vig<br>Github地址：<a href=\"https://github.com/SimonVT\" target=\"_blank\" rel=\"external\">https://github.com/SimonVT</a><br>代表作：android-menudrawer，MessageBar<br>主页：<a href=\"http://simonvt.net/\" target=\"_blank\" rel=\"external\">http://simonvt.net/</a>  </p>\n</li>\n<li><p>Manuel Peinado<br>Github地址：<a href=\"https://github.com/ManuelPeinado\" target=\"_blank\" rel=\"external\">https://github.com/ManuelPeinado</a><br>代表作：FadingActionBar，GlassActionBar，RefreshActionItem，QuickReturnHeader  </p>\n</li>\n<li><p>Emil Sj?lander<br>Github地址：<a href=\"https://github.com/emilsjolander\" target=\"_blank\" rel=\"external\">https://github.com/emilsjolander</a><br>代表作：StickyListHeaders，sprinkles，android-FlipView<br>主页：<a href=\"http://emilsjolander.se/\" target=\"_blank\" rel=\"external\">http://emilsjolander.se/</a>  </p>\n</li>\n<li><p>greenrobot<br>Github地址：<a href=\"https://github.com/greenrobot\" target=\"_blank\" rel=\"external\">https://github.com/greenrobot</a><br>代表作：greenDAO，EventBus<br>主页：<a href=\"http://greenrobot.de/\" target=\"_blank\" rel=\"external\">http://greenrobot.de/</a>  </p>\n</li>\n<li><p>Jeff Gilfelt<br>Github地址：<a href=\"https://github.com/jgilfelt\" target=\"_blank\" rel=\"external\">https://github.com/jgilfelt</a><br>代表作：android-mapviewballoons，android-viewbadger，android-actionbarstylegenerator，android-sqlite-asset-helper<br>主页：<a href=\"http://jeffgilfelt.com\" target=\"_blank\" rel=\"external\">http://jeffgilfelt.com</a>  </p>\n</li>\n<li><p>Romain Guy<br>Android team成员(2013.10已离开Android team，仍在Google)<br>Github地址：<a href=\"https://github.com/romainguy\" target=\"_blank\" rel=\"external\">https://github.com/romainguy</a><br>代表作：ViewServer<br>主页：<a href=\"http://www.curious-creature.org/category/android/\" target=\"_blank\" rel=\"external\">http://www.curious-creature.org/category/android/</a><br>個人攝影作品：<a href=\"http://www.flickr.com/photos/romainguy\" target=\"_blank\" rel=\"external\">http://www.flickr.com/photos/romainguy</a>  </p>\n</li>\n<li><p>sephiroth74<br>就职于Aviary.com<br>Github地址：<a href=\"https://github.com/sephiroth74\" target=\"_blank\" rel=\"external\">https://github.com/sephiroth74</a><br>代表作：ImageViewZoom，HorizontalVariableListView，AndroidWheel，purePDF<br>主页：<a href=\"http://www.sephiroth.it/\" target=\"_blank\" rel=\"external\">http://www.sephiroth.it/</a>  </p>\n</li>\n<li><p>Cyril Mottier<br>Google开发者专家认证，发布一些Android技巧及文章<br>Github地址：<a href=\"https://github.com/cyrilmottier\" target=\"_blank\" rel=\"external\">https://github.com/cyrilmottier</a><br>代表作：GreenDroid，Polaris<br>主页：<a href=\"http://cyrilmottier.com/\" target=\"_blank\" rel=\"external\">http://cyrilmottier.com/</a>  </p>\n</li>\n</ol>\n<h4 id=\"二、组织\"><a href=\"#二、组织\" class=\"headerlink\" title=\"二、组织\"></a>二、组织</h4><ol>\n<li><p>Square<br>有态度有良心的企业，很多不错的分享<br>Github地址：<a href=\"https://github.com/square\" target=\"_blank\" rel=\"external\">https://github.com/square</a><br>代表作：okhttp、fest-android，android-times-square、picasso、dagger、spoon等等<br>主页：<a href=\"http://square.github.io/\" target=\"_blank\" rel=\"external\">http://square.github.io/</a>  </p>\n</li>\n<li><p>Inmite s.r.o.<br>Github地址：<a href=\"https://github.com/inmite\" target=\"_blank\" rel=\"external\">https://github.com/inmite</a><br>代表作：android-styled-dialogs，android-grid-wichterle，android-selector-chapek<br>主页：<a href=\"http://www.inmite.eu/\" target=\"_blank\" rel=\"external\">http://www.inmite.eu/</a>  </p>\n</li>\n</ol>\n<h4 id=\"三、博客\"><a href=\"#三、博客\" class=\"headerlink\" title=\"三、博客\"></a>三、博客</h4><p><a href=\"https://github.com/android-cn/android-dev-com\" target=\"_blank\" rel=\"external\">部分国外著名 Android 开发者信息</a>  </p>\n<hr>\n<p>本博客转自<a href=\"https://github.com/comtu/android-open-project\" target=\"_blank\" rel=\"external\">trinea</a> 2015年3月31日版本<br>还会陆续更新中…   </p>\n","excerpt":"<h1 id=\"Android开源项目分类汇总\"><a href=\"#Android开源项目分类汇总\" class=\"headerlink\" title=\"Android开源项目分类汇总\"></a>Android开源项目分类汇总</h1><h2 id=\"目前包括：\"><a href=\"#目前包括：\" class=\"headerlink\" title=\"目前包括：\"></a>目前包括：</h2><blockquote>\n<p>[Android开源项目第一篇——个性化控件(View)篇]<br><em>&nbsp;&nbsp;包括[ListView]、[ActionBar]、[Menu]、[ViewPager]、[Gallery]、[GridView]、[ImageView]、[ProgressBar]、[TextView]、[ScrollView]、[TimeView]、[TipView]、[FlipView]、[ColorPickView]、[GraphView]、[UI Style]、[其他]</em><br>[Android开源项目第二篇——工具库篇]<br><em>&nbsp;&nbsp;包括[依赖注入]、[图片缓存]、[网络相关]、[数据库ORM工具包]、[Android公共库]、[高版本向低版本兼容库]、[多媒体]、[事件总线]、[传感器]、[安全]、[插件化]、[文件]、[其他]</em><br>[Android开源项目第三篇——优秀项目篇]<br><em>&nbsp;&nbsp;比较有意思的完整的Android项目</em><br>[Android开源项目第四篇——开发及测试工具篇]<br><em>&nbsp;&nbsp;包括[开发效率工具]、[开发自测相关]、[测试工具]、[开发及编译环境]、[其他]</em><br>[Android开源项目第五篇——优秀个人和团体篇]<br><em>&nbsp;&nbsp;乐于分享并且有一些很不错的开源项目的[个人]和[组织]，包括JakeWharton、Chris Banes、Koushik Dutta等大牛</em>  </p>\n</blockquote>","more":"<h2 id=\"第一部分-个性化控件-View\"><a href=\"#第一部分-个性化控件-View\" class=\"headerlink\" title=\"第一部分 个性化控件(View)\"></a>第一部分 个性化控件(View)</h2><p>主要介绍那些不错个性化的View，包括ListView、ActionBar、Menu、ViewPager、Gallery、GridView、ImageView、ProgressBar、TextView、ScrollView、TimeView、TipView、FlipView、ColorPickView、GraphView、UI Style等等。  </p>\n<h4 id=\"一、ListView\"><a href=\"#一、ListView\" class=\"headerlink\" title=\"一、ListView\"></a>一、ListView</h4><ol>\n<li><p>android-pulltorefresh<br>一个强大的拉动刷新开源项目，支持各种控件下拉刷新，ListView、ViewPager、WevView、ExpandableListView、GridView、ScrollView、Horizontal  ScrollView、Fragment上下左右拉动刷新，比下面johannilsson那个只支持ListView的强大的多。并且它实现的下拉刷新ListView在item不足一屏情况下也不会显示刷新提示，体验更好。<br>项目地址：<a href=\"https://github.com/chrisbanes/Android-PullToRefresh\">https://github.com/chrisbanes/Android-PullToRefresh</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refreshview-demo.apk?raw=true\">https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refreshview-demo.apk?raw=true</a><br>APP示例：新浪微博各个页面  </p>\n</li>\n<li><p>android-pulltorefresh-listview<br>下拉刷新ListView，这个被很多人使用的项目实际有不少bug，推荐使用上面的android-pulltorefresh<br>项目地址：<a href=\"https://github.com/johannilsson/android-pulltorefresh\">https://github.com/johannilsson/android-pulltorefresh</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refresh-listview-demo.apk?raw=true\">https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refresh-listview-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>android-Ultra-Pull-to-Refresh<br>下拉刷新，第一个项目已经停止维护了，并且使用起来相对复杂，定制性也差。这个是替代和改良方案。这个继承于ViewGroup可以包含任何View。功能甚至比SwipeRefreshLayout强大。使用起来非常简单。良好的设计，如果你想定制自己的UI样式，非常简单，就像给ListView加一个Header View那么简单。支持 <code>API LEVEL &gt;= 8</code><br>项目地址：<a href=\"https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh\">https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh</a><br>Demo地址：<a href=\"https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh/blob/master/ptr-demo/target/ultra-ptr-demo.apk?raw=true\">https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh/blob/master/ptr-demo/target/ultra-ptr-demo.apk?raw=true</a><br>效果图：  </p>\n<div><br><img src='http://srain-github.qiniudn.com/ultra-ptr/contains-all-of-views.gif' width=\"150px\"/><br><img src='http://srain-github.qiniudn.com/ultra-ptr/release-to-refresh.gif' width=\"150px\"/><br><img src='http://srain-github.qiniudn.com/ultra-ptr/auto-refresh.gif' width=\"150px\"/><br><img src='http://srain-github.qiniudn.com/ultra-ptr/store-house-string-array.gif' width=\"150px\"/><br></div>  \n</li>\n<li><p>DropDownListView<br>下拉刷新及滑动到底部加载更多ListView<br>项目地址：<a href=\"https://github.com/Trinea/AndroidCommon\">https://github.com/Trinea/AndroidCommon</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=cn.trinea.android.demo\">https://play.google.com/store/apps/details?id=cn.trinea.android.demo</a><br>文档介绍：<a href=\"http://www.trinea.cn/android/dropdown-to-refresh-and-bottom-load-more-listview/\">http://www.trinea.cn/android/dropdown-to-refresh-and-bottom-load-more-listview/</a>  </p>\n</li>\n<li><p>DragSortListView<br>拖动排序的ListView，同时支持ListView滑动item删除，各个Item高度不一、单选、复选、CursorAdapter做为适配器、拖动背景变化等<br>项目地址：<a href=\"https://github.com/bauerca/drag-sort-listview\">https://github.com/bauerca/drag-sort-listview</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.mobeta.android.demodslv\">https://play.google.com/store/apps/details?id=com.mobeta.android.demodslv</a><br>APP示例：Wordpress Android  </p>\n</li>\n<li><p>SwipeListView<br>支持定义ListView左右滑动事件，支持左右滑动位移，支持定义动画时间<br>项目地址：<a href=\"https://github.com/47deg/android-swipelistview\">https://github.com/47deg/android-swipelistview</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.fortysevendeg.android.swipelistview\">https://play.google.com/store/apps/details?id=com.fortysevendeg.android.swipelistview</a><br>APP示例：微信  </p>\n</li>\n<li><p>Android-SwipeToDismiss<br>滑动Item消失ListView，支持3.0以下版本见：<a href=\"https://github.com/JakeWharton/SwipeToDismissNOA\">https://github.com/JakeWharton/SwipeToDismissNOA</a><br>项目地址：<a href=\"https://github.com/romannurik/Android-SwipeToDismiss\">https://github.com/romannurik/Android-SwipeToDismiss</a><br>Demo地址：<a href=\"https://github.com/JakeWharton/SwipeToDismissNOA/SwipeToDismissNOA.apk/qr_code\">https://github.com/JakeWharton/SwipeToDismissNOA/SwipeToDismissNOA.apk/qr_code</a>  </p>\n</li>\n<li><p>PinnedHeaderExpandableListView<br>首先它是一个ExpandableListView，但是它的头部可以固定，其次，在它的上面还有一个头部可以来回伸缩<br>项目地址：<a href=\"https://github.com/singwhatiwanna/PinnedHeaderExpandableListView\">https://github.com/singwhatiwanna/PinnedHeaderExpandableListView</a><br>效果图：<img src=\"https://camo.githubusercontent.com/fa7f516b0b6e2921007a17cbc359b3f661f32226/687474703a2f2f696d672e626c6f672e6373646e2e6e65742f32303134303531313135313534363834333f77617465726d61726b2f322f746578742f6148523063446f764c324a736232637559334e6b626935755a58517663326c755a33646f5958527064324675626d453d2f666f6e742f3561364c354c32542f666f6e7473697a652f3430302f66696c6c2f49304a42516b46434d413d3d2f646973736f6c76652f37302f677261766974792f536f75746845617374\" alt=\"Renderings\"><br>APP示例：百度手机卫士垃圾清理界面  </p>\n</li>\n<li><p>StickyListHeaders<br>GroupName滑动到顶端时会固定不动直到另外一个GroupName到达顶端的ExpandListView，支持快速滑动，支持Android2.3及以上<br>项目地址：<a href=\"https://github.com/emilsjolander/StickyListHeaders\">https://github.com/emilsjolander/StickyListHeaders</a><br>效果图：<img src=\"https://raw.github.com/emilsjolander/StickyListHeaders/master/demo.gif\" alt=\"Renderings\"><br>APP示例：Android 4.0联系人  </p>\n</li>\n<li><p>pinned-section-listview<br>GroupName滑动到顶端时会固定不动直到另外一个GroupName到达顶端的ExpandListView<br>项目地址：<a href=\"https://github.com/beworker/pinned-section-listview\">https://github.com/beworker/pinned-section-listview</a><br>效果图：<img src=\"https://raw.github.com/beworker/pinned-section-listview/master/screen1.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>PinnedHeaderListView<br>GroupName滑动到顶端时会固定不动直到另外一个GroupName到达顶端的ExpandListView<br>项目地址：<a href=\"https://github.com/JimiSmith/PinnedHeaderListView\">https://github.com/JimiSmith/PinnedHeaderListView</a>  </p>\n</li>\n<li><p>QuickReturn<br>ListView/ScrollView的header或footer，当向下滚动时消失，向上滚动时出现<br>项目地址：<a href=\"https://github.com/lawloretienne/QuickReturn\">https://github.com/lawloretienne/QuickReturn</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.etiennelawlor.quickreturn\">https://play.google.com/store/apps/details?id=com.etiennelawlor.quickreturn</a>  </p>\n</li>\n<li><p>QuickReturnHeader<br>ListView/ScrollView的header或footer，当向下滚动时消失，向上滚动时出现<br>项目地址：<a href=\"https://github.com/ManuelPeinado/QuickReturnHeader\">https://github.com/ManuelPeinado/QuickReturnHeader</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/quick-return-header-demo.apk?raw=true\">https://github.com/Trinea/TrineaDownload/blob/master/quick-return-header-demo.apk?raw=true</a><br>APP示例：google plus  </p>\n</li>\n<li><p>IndexableListView<br>ListView右侧会显示item首字母快捷索引，点击可快速滑动到某个item<br>项目地址：<a href=\"https://github.com/woozzu/IndexableListView\">https://github.com/woozzu/IndexableListView</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/indexable-listview.apk?raw=true\">https://github.com/Trinea/TrineaDownload/blob/master/indexable-listview.apk?raw=true</a><br>APP示例：微信通讯录、小米联系人  </p>\n</li>\n<li><p>CustomFastScrollView<br>ListView快速滑动，同时屏幕中间PopupWindows显示滑动到的item内容或首字母<br>项目地址：<a href=\"https://github.com/nolanlawson/CustomFastScrollViewDemo\">https://github.com/nolanlawson/CustomFastScrollViewDemo</a><br>效果图：<img src=\"https://raw.github.com/nolanlawson/CustomFastScrollViewDemo/master/example.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android-ScrollBarPanel<br>ListView滑动时固定的Panel指示显示在scrollbar旁边<br>项目地址：<a href=\"https://github.com/rno/Android-ScrollBarPanel\">https://github.com/rno/Android-ScrollBarPanel</a><br>效果图：<img src=\"https://github.com/rno/Android-ScrollBarPanel/raw/master/demo_capture.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>SlideExpandableListView<br>用户点击listView item滑出固定区域，其他item的区域收缩<br>项目地址：<a href=\"https://github.com/tjerkw/Android-SlideExpandableListView\">https://github.com/tjerkw/Android-SlideExpandableListView</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/slide-expandable-listView-demo.apk?raw=true\">https://github.com/Trinea/TrineaDownload/blob/master/slide-expandable-listView-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>JazzyListView<br>ListView及GridView item以特殊动画效果进入屏幕，效果包括grow、cards、curl、wave、flip、fly等等<br>项目地址：<a href=\"https://github.com/twotoasters/JazzyListView\">https://github.com/twotoasters/JazzyListView</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.twotoasters.jazzylistview.sample\">https://play.google.com/store/apps/details?id=com.twotoasters.jazzylistview.sample</a><br>在线演示：<a href=\"http://lab.hakim.se/scroll-effects/\">http://lab.hakim.se/scroll-effects/</a>  </p>\n</li>\n<li><p>ListViewAnimations<br>带Item显示动画的ListView，动画包括底部飞入、其他方向斜飞入、下层飞入、渐变消失、滑动删除等<br>项目地址：<a href=\"https://github.com/nhaarman/ListViewAnimations\">https://github.com/nhaarman/ListViewAnimations</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.haarman.listviewanimations\">https://play.google.com/store/apps/details?id=com.haarman.listviewanimations</a><br>APP示例：Google plus、Google Now卡片式进入、小米系统中应用商店、联系人、游戏中心、音乐、文件管理器的ListView、Ultimate、Light Flow Lite、TreinVerkeer、Running Coach、Pearl Jam Lyrics、Calorie Chart、Car Hire、Super BART、DK FlashCards、Counter Plus、Voorlees Verhaaltjes 2.0  </p>\n</li>\n<li><p>DevsmartLib-Android<br>横向ListView<br>项目地址：<a href=\"https://github.com/dinocore1/DevsmartLib-Android\">https://github.com/dinocore1/DevsmartLib-Android</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/horizontal-listview-demo.apk?raw=true\">https://github.com/Trinea/TrineaDownload/blob/master/horizontal-listview-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>TwoWayView<br>横向ListView的效果，继承自AdapterView<br>项目地址：<a href=\"https://github.com/lucasr/twoway-view\">https://github.com/lucasr/twoway-view</a>  </p>\n</li>\n<li><p>HorizontalVariableListView<br>支持Item宽度不一致的ListView<br>项目地址：<a href=\"https://github.com/sephiroth74/HorizontalVariableListView\">https://github.com/sephiroth74/HorizontalVariableListView</a>  </p>\n</li>\n<li><p>LinearListView<br>用LinearLayout实现的ListView，可解决多个ListView并存等问题。目前自己也有需要，等亲自尝试过后会再具体介绍<br>项目地址：<a href=\"https://github.com/frankiesardo/LinearListView\">https://github.com/frankiesardo/LinearListView</a>  </p>\n</li>\n<li><p>MultiChoiceAdapter<br>支持多选的ListView Adapter<br>项目地址：<a href=\"https://github.com/ManuelPeinado/MultiChoiceAdapter\">https://github.com/ManuelPeinado/MultiChoiceAdapter</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.manuelpeinado.multichoiceadapter.demo\">https://play.google.com/store/apps/details?id=com.manuelpeinado.multichoiceadapter.demo</a>  </p>\n</li>\n<li><p>EnhancedListView<br>支持横向滑动删除列表项以及撤销删除的ListView，该项目的前身是<a href=\"https://github.com/timroes/SwipeToDismissUndoList\">SwipeToDismissUndoList</a><br>项目地址：<a href=\"https://github.com/timroes/EnhancedListView\">https://github.com/timroes/EnhancedListView</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=de.timroes.android.listviewdemo&amp;rdid=de.timroes.android.listviewdemo\">https://play.google.com/store/apps/details?id=de.timroes.android.listviewdemo&amp;rdid=de.timroes.android.listviewdemo</a>  </p>\n</li>\n<li><p>ListBuddies<br>自动滚动的双列ListView ，两个ListView滚动速度不一致，有视差效果<br>项目地址：<a href=\"https://github.com/jpardogo/ListBuddies\">https://github.com/jpardogo/ListBuddies</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.jpardogo.android.listbuddies\">https://play.google.com/store/apps/details?id=com.jpardogo.android.listbuddies</a><br>效果图：<img src=\"https://raw.github.com/jpardogo/ListBuddies/master/art/screenshot_listbuddies_2.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>SwipeMenuListView<br>针对ListView item的侧滑菜单<br>项目地址：<a href=\"https://github.com/baoyongzhang/SwipeMenuListView\">https://github.com/baoyongzhang/SwipeMenuListView</a><br>效果图：<img src=\"https://raw.githubusercontent.com/baoyongzhang/SwipeMenuListView/master/demo.gif\" alt=\"Renderings\"><br>APP示例：手机QQV5.0  </p>\n</li>\n<li><p>PagingListView<br>分页加载的ListView。当滑动到ListView底部最后一个元素时，显示一个进度行，然后加载下一页数据，并显示。<br>项目地址：<a href=\"https://github.com/nicolasjafelle/PagingListView\">https://github.com/nicolasjafelle/PagingListView</a>  </p>\n</li>\n<li><p>PullZoomView<br>支持下拉时HeaderView缩放的ListView、ScrollView<br>项目地址：<a href=\"https://github.com/Frank-Zhu/PullZoomView\">https://github.com/Frank-Zhu/PullZoomView</a><br>效果图：<img src=\"https://raw.githubusercontent.com/Frank-Zhu/PullZoomView/master/art/pull-to-zoom.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>PullToZoomInListView<br>滑动ListView时使其HeaderView跟随滑动缩放<br>项目地址：<a href=\"https://github.com/matrixxun/PullToZoomInListView\">https://github.com/matrixxun/PullToZoomInListView</a><br>效果图：<img src=\"https://github.com/matrixxun/PullToZoomInListView/raw/master/art/pull-to-zoom.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>CalendarListview<br>实现每个月一行日历效果的ListView<br>项目地址：<a href=\"https://github.com/traex/CalendarListview\">https://github.com/traex/CalendarListview</a><br>效果图：<img src=\"https://github.com/traex/CalendarListview/raw/master/demo.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>sticky-headers-recyclerview<br>GroupName滑动到顶端时会固定不动直到另外一个GroupName到达顶端的ListView，采用support-v7中的RecyclerView实现<br>项目地址：<a href=\"https://github.com/timehop/sticky-headers-recyclerview\">https://github.com/timehop/sticky-headers-recyclerview</a>  </p>\n</li>\n<li><p>PullSeparateListView<br>到达顶部或底部继续拉动时，实现Item间的相互分离，两种模式：(1) 全部分离的模式，即屏幕内所有Item都会分离 (2)部分分离模式，以点击位置为分界点，部分item分离<br>项目地址：<a href=\"https://github.com/chiemy/PullSeparateListView\">https://github.com/chiemy/PullSeparateListView</a><br>效果图：<img src=\"https://github.com/chiemy/PullSeparateListView/raw/master/capture.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>ExpandableLayout<br>Header 和 Content Item 都可以展开的 ExpandableListview<br>项目地址：<a href=\"https://github.com/traex/ExpandableLayout\">https://github.com/traex/ExpandableLayout</a>  </p>\n</li>\n<li><p>PagedHeadListView<br>支持paginated header以及material page indicator的ListView.<br>项目地址：<a href=\"https://github.com/JorgeCastilloPrz/PagedHeadListView\">https://github.com/JorgeCastilloPrz/PagedHeadListView</a><br>效果图：<img src=\"https://raw.githubusercontent.com/JorgeCastilloPrz/PagedHeadListView/master/app/src/main/res/raw/preview1.gif\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<ol>\n<li><p>CustomSwipeListView<br>支持左滑弹出自定义菜单，右滑删除且允许撤销，同时可以自定义滑动动画时间和滑动触发事件的时机等。<br>项目地址：<a href=\"https://github.com/xyczero/Android-CustomSwipeListView\">https://github.com/xyczero/Android-CustomSwipeListView</a><br>效果图：<img src=\"http://7u2jsw.com1.z0.glb.clouddn.com/githubCustomSwipeListview_Set.PNG\" alt=\"screenshot\"><br>Demo地址：<a href=\"http://7u2jsw.com1.z0.glb.clouddn.com/githubCustomSwipeListView.apk\">Download here</a>   </p>\n</li>\n<li><p>Pull-to-Refresh.Rentals-Android<br>提供一个简单可以自定义的下拉刷新实现，<a href=\"http://yalantis.com/\">Yalantis</a> 出品。<br>项目地址：<a href=\"https://github.com/Yalantis/Pull-to-Refresh.Rentals-Android\">https://github.com/Yalantis/Pull-to-Refresh.Rentals-Android</a><br>效果图：<img src=\"https://camo.githubusercontent.com/d406ac5a03a2b1fa5cf41fadc8d2408cb8709bdc/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3132353035362f73637265656e73686f74732f313635303331372f7265616c6573746174652d70756c6c5f312d322d332e676966\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<h4 id=\"二、ActionBar\"><a href=\"#二、ActionBar\" class=\"headerlink\" title=\"二、ActionBar\"></a>二、ActionBar</h4><ol>\n<li><p>ActionBarSherlock<br>为Android所有版本提供统一的ActionBar，解决4.0以下ActionBar的适配问题<br>项目地址：<a href=\"https://github.com/JakeWharton/ActionBarSherlock\">https://github.com/JakeWharton/ActionBarSherlock</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos\">https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos</a><br>APP示例：太多了。。现在连google都在用<br>效果图: <img src=\"https://camo.githubusercontent.com/b21aae46566b05d5adbb1fa71b88708bc659e120/687474703a2f2f616374696f6e626172736865726c6f636b2e636f6d2f7374617469632f666561747572652e706e67\" alt=\"comtu\"></p>\n</li>\n<li><p>ActionBar-PullToRefresh<br>下拉刷新，ActionBar出现加载中提示<br>项目地址：<a href=\"https://github.com/chrisbanes/ActionBar-PullToRefresh\">https://github.com/chrisbanes/ActionBar-PullToRefresh</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=uk.co.senab.actionbarpulltorefresh.samples.stock\">https://play.google.com/store/apps/details?id=uk.co.senab.actionbarpulltorefresh.samples.stock</a><br>APP示例：Gmail，Google plus，知乎等  </p>\n</li>\n<li><p>FadingActionBar<br>ListView向下滚动逐渐显现的ActionBar<br>项目地址：<a href=\"https://github.com/ManuelPeinado/FadingActionBar\">https://github.com/ManuelPeinado/FadingActionBar</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.manuelpeinado.fadingactionbar.demo\">https://play.google.com/store/apps/details?id=com.manuelpeinado.fadingactionbar.demo</a><br>APP示例：google music，知乎<br>效果图: <img src=\"https://camo.githubusercontent.com/4fb0e40bdb047be104b2cefddee62923b8a2da37/68747470733a2f2f7261772e6769746875622e636f6d2f4d616e75656c5065696e61646f2f466164696e67416374696f6e4261722f6d61737465722f6172742f726561646d655f7069632e706e67\" alt=\"comtu\"></p>\n</li>\n<li><p>NotBoringActionBar<br>google music下拉收缩的ActionBar<br>项目地址：<a href=\"https://github.com/flavienlaurent/NotBoringActionBar\">https://github.com/flavienlaurent/NotBoringActionBar</a><br>Demo地址：<a href=\"http://flavienlaurent.com/blog/2013/11/20/making-your-action-bar-not-boring/\">http://flavienlaurent.com/blog/2013/11/20/making-your-action-bar-not-boring/</a><br>APP示例：Google音乐<br>效果图: <img src=\"https://camo.githubusercontent.com/65f2d44e0e5064369aec8ee41838bd073e695975/68747470733a2f2f7261772e6769746875622e636f6d2f666c617669656e6c617572656e742f4e6f74426f72696e67416374696f6e4261722f6d61737465722f67726170686963732f6e6f74626f72696e6761622e676966\" alt=\"comtu\"></p>\n</li>\n<li><p>RefreshActionItem<br>带进度显示和刷新按钮的ActionBar<br>项目地址：<a href=\"https://github.com/ManuelPeinado/RefreshActionItem\">https://github.com/ManuelPeinado/RefreshActionItem</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.manuelpeinado.refreshactionitem.demo\">https://play.google.com/store/apps/details?id=com.manuelpeinado.refreshactionitem.demo</a><br>APP示例：The New York Times，DevAppsDirect.<br>效果图: <img src=\"https://camo.githubusercontent.com/46884ee60bb699929890a1a9eed0c2610ca99039/68747470733a2f2f7261772e6769746875622e636f6d2f4d616e75656c5065696e61646f2f52656672657368416374696f6e4974656d2f6d61737465722f6172742f726561646d655f7069632e706e67\" alt=\"comtu\"></p>\n</li>\n<li><p>GlassActionBar<br>类似玻璃的有一定透明度的ActionBar<br>项目地址：<a href=\"https://github.com/ManuelPeinado/GlassActionBar\">https://github.com/ManuelPeinado/GlassActionBar</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.manuelpeinado.glassactionbardemo\">https://play.google.com/store/apps/details?id=com.manuelpeinado.glassactionbardemo</a><br>APP示例：google music<br>效果图: <img src=\"https://camo.githubusercontent.com/01c80fb941f2ba07f6d9d26d80dd4792a79127d4/68747470733a2f2f7261772e6769746875622e636f6d2f4d616e75656c5065696e61646f2f476c617373416374696f6e4261722f6d61737465722f6172742f726561646d655f7069632e706e67\" alt=\"comtu\">  </p>\n</li>\n</ol>\n<h4 id=\"三、Menu\"><a href=\"#三、Menu\" class=\"headerlink\" title=\"三、Menu\"></a>三、Menu</h4><ol>\n<li><p>MenuDrawer<br>滑出式菜单，通过拖动屏幕边缘滑出菜单，支持屏幕上下左右划出，支持当前View处于上下层，支持Windows边缘、ListView边缘、ViewPager变化划出菜单等。<br>项目地址：<a href=\"https://github.com/SimonVT/android-menudrawer\">https://github.com/SimonVT/android-menudrawer</a><br>Demo地址：<a href=\"http://simonvt.github.io/android-menudrawer/\">http://simonvt.github.io/android-menudrawer/</a><br>APP示例：Gmail、Google Music等大部分google app  </p>\n</li>\n<li><p>SlidingMenu<br>滑出式菜单，通过拖动屏幕边缘滑出菜单，支持屏幕左右划出，支持菜单zoom、scale、slide up三种动画样式出现。与MenuDrawer相比而言，SlidingMenu支持菜单动画样式出现，MenuDrawer支持菜单view处于内容的上下层<br>项目地址：<a href=\"https://github.com/jfeinstein10/SlidingMenu\">https://github.com/jfeinstein10/SlidingMenu</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.slidingmenu.example\">https://play.google.com/store/apps/details?id=com.slidingmenu.example</a><br>APP示例：Foursquare, LinkedIn, Zappos, Rdio, Evernote Food, Plume, VLC for Android, ESPN ScoreCenter, MLS MatchDay, 9GAG, Wunderlist 2, The Verge, MTG Familiar, Mantano Reader, Falcon Pro (BETA), MW3 Barracks  </p>\n</li>\n<li><p>ArcMenu<br>支持类似Path的左下角动画旋转菜单及横向划出菜单、圆心弹出菜单<br>项目地址：<a href=\"https://github.com/daCapricorn/ArcMenu\">https://github.com/daCapricorn/ArcMenu</a><br>效果图：<img src=\"https://camo.githubusercontent.com/1fcc783d2e784f7db24feb2b6857f4aa43fc685b/68747470733a2f2f646c2e64726f70626f782e636f6d2f752f31313336393638372f70726576696577302e706e67\" alt=\"Renderings\"><br><img src=\"https://camo.githubusercontent.com/7c3d707678e6aa187cdf2ee3ac701d77fba92f48/68747470733a2f2f646c2e64726f70626f782e636f6d2f752f31313336393638372f70726576696577312e706e67\" alt=\"comtu\"><br><img src=\"https://camo.githubusercontent.com/a5050578e15ff2e22deb2c0249b50c69f8f1ec1a/68747470733a2f2f646c2e64726f70626f782e636f6d2f752f31313336393638372f7261796d656e752e706e67\" alt=\"comtu\"><br>APP示例：Path  </p>\n</li>\n<li><p>android-satellite-menu<br>类似Path的左下角动画旋转菜单<br>项目地址：<a href=\"https://github.com/siyamed/android-satellite-menu\">https://github.com/siyamed/android-satellite-menu</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/satellite-menu-demo.apk?raw=true\">https://github.com/Trinea/TrineaDownload/blob/master/satellite-menu-demo.apk?raw=true</a><br>APP示例：Path  </p>\n</li>\n<li><p>radial-menu-widget<br>圆形菜单，支持二级菜单<br>项目地址：<a href=\"https://code.google.com/p/radial-menu-widget/\">https://code.google.com/p/radial-menu-widget/</a><br>效果图：<a href=\"http://farm8.staticflickr.com/7377/11621125154_d1773c2dcc_o.jpg\">http://farm8.staticflickr.com/7377/11621125154_d1773c2dcc_o.jpg</a>  </p>\n</li>\n<li><p>Android Wheel Menu<br>圆形旋转选取菜单<br>项目地址：<a href=\"https://github.com/anupcowkur/Android-Wheel-Menu\">https://github.com/anupcowkur/Android-Wheel-Menu</a><br>效果图：<img src=\"https://raw.github.com/anupcowkur/Android-Wheel-Menu/master/graphics/wheel.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>FoldingNavigationDrawer<br>滑动并以折叠方式打开菜单<br>项目地址：<a href=\"https://github.com/tibi1712/FoldingNavigationDrawer-Android\">https://github.com/tibi1712/FoldingNavigationDrawer-Android</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.ptr.folding.sample\">https://play.google.com/store/apps/details?id=com.ptr.folding.sample</a><br>效果图：<img src=\"https://lh6.ggpht.com/VnKUZenAozQ0KFAm5blFTGqMaKFjvX-BK2JH-jrX1sIXVTqciACqRhqFH48hc4pm2Q=h310-rw\" alt=\"Renderings\">  </p>\n</li>\n<li><p>AndroidResideMenu<br>仿 Dribbble 的边栏菜单<br>项目地址：<a href=\"https://github.com/SpecialCyCi/AndroidResideMenu\">https://github.com/SpecialCyCi/AndroidResideMenu</a><br>效果图：<img src=\"https://github.com/SpecialCyCi/AndroidResideMenu/raw/master/2.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>CircularFloatingActionMenu<br>一个可定制的圆形的浮动菜单控件，类似于Path的圆形菜单。这个控件的可定制性更强，可以很容易的定制菜单出现消失时的动画，起始角度和半径。<br>项目地址：<a href=\"https://github.com/oguzbilgener/CircularFloatingActionMenu\">https://github.com/oguzbilgener/CircularFloatingActionMenu</a><br>Demo地址：<a href=\"https://github.com/oguzbilgener/CircularFloatingActionMenu/tree/master/samples\">https://github.com/oguzbilgener/CircularFloatingActionMenu/tree/master/samples</a><br>效果图：<img src=\"https://raw.githubusercontent.com/oguzbilgener/CircularFloatingActionMenu/master/assets/circularfab.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>NavigationDrawerSI<br>Navigation Drawer的一个简单实现，滑动并以折叠方式打开菜单<br>项目地址：<a href=\"https://github.com/mmBs/NavigationDrawerSI\">https://github.com/mmBs/NavigationDrawerSI</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi\">https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi</a><br>效果图：<img height=\"500px\" src=\"https://raw.githubusercontent.com/mmBs/NavigationDrawerSI/master/images/screens.png\" /><br>APP示例：<a href=\"https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi\">https://play.google.com/store/apps/details?id=mmbialas.pl.navigationdrawersi</a>  </p>\n</li>\n<li><p>DragLayout<br>使用support.v4包下的ViewDragHelper实现QQ5.0侧滑<br>项目地址：<a href=\"https://github.com/BlueMor/DragLayout\">https://github.com/BlueMor/DragLayout</a><br>效果图：<img src=\"https://github.com/BlueMor/DragLayout/raw/master/screenshots/123.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>LDrawer<br>Material Design 形式的展开折叠Icon<br>项目地址：<a href=\"https://github.com/ikimuhendis/LDrawer\">https://github.com/ikimuhendis/LDrawer</a><br>效果图：<img src=\"https://raw.githubusercontent.com/IkiMuhendis/LDrawer/master/images/animated.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Floating Action Button<br>悬浮的圆形菜单栏，支持组建滚动时自动隐藏及其他设置<br>项目地址：<a href=\"https://github.com/shamanland/floating-action-button\">https://github.com/shamanland/floating-action-button</a><br>效果图：<img src=\"https://camo.githubusercontent.com/c679cb23cf62830b0d4037e17cf2d8d4090bc3c8/68747470733a2f2f64726976652e676f6f676c652e636f6d2f75633f69643d3042776830534e4c506d6a5142526b466f5a4530345646393051324d\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<ol>\n<li><p>Side-Menu.Android<br>分类侧滑菜单，<a href=\"http://yalantis.com/\">Yalantis</a> 出品。<br>项目地址：<a href=\"https://github.com/Yalantis/Side-Menu.Android\">https://github.com/Yalantis/Side-Menu.Android</a><br>效果图：<img src=\"https://camo.githubusercontent.com/cb6caa7a392d01d46bca9d9485c01fc173f55fac/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3132353035362f73637265656e73686f74732f313638393932322f6576656e74732d6d656e755f312d312d362e676966\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Context-Menu.Android<br>可以方便快速集成漂亮带有动画效果的上下文菜单，<a href=\"http://yalantis.com/\">Yalantis</a>出品。<br>项目地址：<a href=\"https://github.com/Yalantis/Context-Menu.Android\">https://github.com/Yalantis/Context-Menu.Android</a><br>效果图：<img src=\"https://camo.githubusercontent.com/46c15734b552ce3afefa7efd1518909046b4677e/68747470733a2f2f6431337961637572716a676172612e636c6f756466726f6e742e6e65742f75736572732f3132353035362f73637265656e73686f74732f313738353237342f39396d696c65732d70726f66696c652d6c696768745f312d312d342e676966\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<h4 id=\"四、ViewPager-、Gallery\"><a href=\"#四、ViewPager-、Gallery\" class=\"headerlink\" title=\"四、ViewPager 、Gallery\"></a>四、ViewPager 、Gallery</h4><ol>\n<li><p>Android-ViewPagerIndicator<br>配合ViewPager使用的Indicator，支持各种位置和样式<br>项目地址：<a href=\"https://github.com/JakeWharton/Android-ViewPagerIndicator\">https://github.com/JakeWharton/Android-ViewPagerIndicator</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.viewpagerindicator.sample\">https://play.google.com/store/apps/details?id=com.viewpagerindicator.sample</a><br>APP示例：太多了。。  </p>\n</li>\n<li><p>JazzyViewPager<br>支持Fragment切换动画的ViewPager，动画包括转盘、淡入淡出、翻页、层叠、旋转、方块、翻转、放大缩小等，效果类似桌面左右切换的各种效果，不过桌面并非用ViewPager实现而已<br>项目地址：<a href=\"https://github.com/jfeinstein10/JazzyViewPager\">https://github.com/jfeinstein10/JazzyViewPager</a><br>Demo地址：<a href=\"https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true\">https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true</a>  </p>\n</li>\n<li><p>JellyViewPager<br>特殊切换动画的ViewPager<br>项目地址：<a href=\"https://github.com/chiemy/JellyViewPager\">https://github.com/chiemy/JellyViewPager</a><br>效果图：<img src=\"https://github.com/chiemy/JellyViewPager/raw/master/capture.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android-DirectionalViewPager<br>支持横向和纵向(垂直)的ViewPager<br>项目地址：<a href=\"https://github.com/JakeWharton/Android-DirectionalViewPager\">https://github.com/JakeWharton/Android-DirectionalViewPager</a><br>Demo地址：<a href=\"https://market.android.com/details?id=com.directionalviewpager.sample\">https://market.android.com/details?id=com.directionalviewpager.sample</a>  </p>\n</li>\n<li><p>android-pulltorefresh<br>支持下拉刷新的ViewPager<br>项目地址：<a href=\"https://github.com/chrisbanes/Android-PullToRefresh\">https://github.com/chrisbanes/Android-PullToRefresh</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refreshview-demo.apk?raw=true\">https://github.com/Trinea/TrineaDownload/blob/master/pull-to-refreshview-demo.apk?raw=true</a><br>APP示例：新浪微博各个页面  </p>\n</li>\n<li><p>FancyCoverFlow<br>支持Item切换动画效果的类似Gallery View<br>项目地址：<a href=\"https://github.com/davidschreiber/FancyCoverFlow\">https://github.com/davidschreiber/FancyCoverFlow</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=at.technikum.mti.fancycoverflow.samples\">https://play.google.com/store/apps/details?id=at.technikum.mti.fancycoverflow.samples</a><br>效果图：<img src=\"https://github-camo.global.ssl.fastly.net/ef5ced52b7b54652b50499521ed797c0188c7a6b/687474703a2f2f64617669647363687265696265722e6769746875622e696f2f46616e6379436f766572466c6f772f73637265656e73686f74322e706e67\" alt=\"Renderings\">  </p>\n</li>\n<li><p>AndroidTouchGallery<br>支持双击或双指缩放的Gallery(用ViewPager实现)，相比下面的PhotoView，在被放大后依然能滑到下一个item，并且支持直接从url和文件中获取图片，<br>项目地址：<a href=\"https://github.com/Dreddik/AndroidTouchGallery\">https://github.com/Dreddik/AndroidTouchGallery</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/touch-gallery-demo.apk?raw=true\">https://github.com/Trinea/TrineaDownload/blob/master/touch-gallery-demo.apk?raw=true</a><br>APP示例：类似微信中查看聊天记录图片时可双击放大，并且放大情况下能正常左右滑动到前后图片  </p>\n</li>\n<li><p>Android Auto Scroll ViewPager<br>Android自动滚动 轮播循环的ViewPager<br>项目地址：<a href=\"https://github.com/Trinea/android-auto-scroll-view-pager\">https://github.com/Trinea/android-auto-scroll-view-pager</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=cn.trinea.android.demo\">https://play.google.com/store/apps/details?id=cn.trinea.android.demo</a><br>文档介绍：<a href=\"http://www.trinea.cn/android/auto-scroll-view-pager/\">http://www.trinea.cn/android/auto-scroll-view-pager/</a>  </p>\n</li>\n<li><p>Salvage view<br>带View缓存的Viewpager PagerAdapter，很方便使用<br>项目地址：<a href=\"https://github.com/JakeWharton/salvage\">https://github.com/JakeWharton/salvage</a>  </p>\n</li>\n<li><p>Android PagerSlidingTabStrip<br>配合ViewPager使用的Indicator，支持ViewPager Scroll时Indicator联动<br>项目地址：<a href=\"https://github.com/astuetz/PagerSlidingTabStrip\">https://github.com/astuetz/PagerSlidingTabStrip</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.astuetz.viewpager.extensions.sample\">https://play.google.com/store/apps/details?id=com.astuetz.viewpager.extensions.sample</a>  </p>\n</li>\n<li><p>ViewPager3D<br>ViewPager3D效果<br>项目地址：<a href=\"https://github.com/inovex/ViewPager3D\">https://github.com/inovex/ViewPager3D</a>  </p>\n</li>\n<li><p>AnimaTabsview<br>仿网易云音乐标签切换的动画,带透明小三角<br>项目地址：<a href=\"https://github.com/wuyexiong/transparent-over-animtabsview\">https://github.com/wuyexiong/transparent-over-animtabsview</a><br>在线演示：<a href=\"http://v.youku.com/v_show/id_XNzA4MjY5NjA0.html\">http://v.youku.com/v_show/id_XNzA4MjY5NjA0.html</a>  </p>\n</li>\n<li><p>LoopingViewPager<br>无限循环的ViewPager<br>项目地址：<a href=\"https://github.com/imbryk/LoopingViewPager\">https://github.com/imbryk/LoopingViewPager</a>  </p>\n</li>\n<li><p>android_page_curl<br>翻书卷曲效果<br>项目地址：<a href=\"https://github.com/harism/android_page_curl\">https://github.com/harism/android_page_curl</a><br>APP示例：iReader<br>在线演示：<a href=\"https://www.youtube.com/watch?v=iwu7P5PCpsw\">https://www.youtube.com/watch?v=iwu7P5PCpsw</a>  </p>\n</li>\n<li><p>ViewPagerIndicator<br>简化并实现android的TabHost效果，顶部滑动tab，引导页，支持自定义tab样式,自定义滑动块样式和位置,自定义切换tab的过渡动画,子界面的预加载和界面缓存,设置界面是否可滑动<br>项目地址：<a href=\"https://github.com/LuckyJayce/ViewPagerIndicator\">https://github.com/LuckyJayce/ViewPagerIndicator</a>  </p>\n</li>\n<li><p>SmartTabLayout<br>A custom ViewPager title strip which gives continuous feedback to the user when scrolling.This library has been added some features and utilities based on android-SlidingTabBasic project of Google Samples.<br>自定义标题:viewpage地带使连续滚动时反馈给用户。这个库添加了一些功能和实用程序基于谷歌android-SlidingTabBasic工程样品。<br>项目地址: <a href=\"https://github.com/ogaclejapan/SmartTabLayout\">https://github.com/ogaclejapan/SmartTabLayout</a><br>App示例: <a href=\"https://play.google.com/store/apps/details?id=com.ogaclejapan.smarttablayout.demo\">https://play.google.com/store/apps/details?id=com.ogaclejapan.smarttablayout.demo</a><br>效果图: <img src=\"https://raw.githubusercontent.com/ogaclejapan/SmartTabLayout/master/art/demo1.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>AndroidImageSlider<br>An amazing and convenient Android image slider.<br>一个了不起的滑块和方便Android 图片滑动。<br>项目地址: <a href=\"https://github.com/daimajia/AndroidImageSlider\">https://github.com/daimajia/AndroidImageSlider</a><br>App示例: <a href=\"https://github.com/daimajia/AndroidImageSlider/releases/download/v1.0.8/demo-1.0.8.apk\">https://github.com/daimajia/AndroidImageSlider/releases/download/v1.0.8/demo-1.0.8.apk</a><br>Eclipse工程: <a href=\"https://github.com/daimajia/AndroidImageSlider/releases/download/v1.0.9/AndroidImageSlider-Eclipse.zip\">https://github.com/daimajia/AndroidImageSlider/releases/download/v1.0.9/AndroidImageSlider-Eclipse.zip</a><br>效果图: <img src=\"https://camo.githubusercontent.com/f64413139bbaa918131384d3597c33e39333aa7f/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a773165677a6f7236366f6a64673230393530666b6e70652e676966\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<h4 id=\"五、GridView\"><a href=\"#五、GridView\" class=\"headerlink\" title=\"五、GridView\"></a>五、GridView</h4><ol>\n<li><p>StaggeredGridView<br>允许非对齐行的GridView，类似Pinterest的瀑布流，并且跟ListView一样自带View缓存，继承自ViewGroup<br>项目地址：<a href=\"https://github.com/maurycyw/StaggeredGridView\">https://github.com/maurycyw/StaggeredGridView</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/staggered-gridview-demo.apk?raw=true\">https://github.com/Trinea/TrineaDownload/blob/master/staggered-gridview-demo.apk?raw=true</a><br>APP示例：Pinterest等  </p>\n</li>\n<li><p>AndroidStaggeredGrid<br>允许非对齐行的GridView，类似Pinterest的瀑布流，继承自AbsListView<br>项目地址：<a href=\"https://github.com/etsy/AndroidStaggeredGrid\">https://github.com/etsy/AndroidStaggeredGrid</a><br>APP示例：Pinterest等  </p>\n</li>\n<li><p>PinterestLikeAdapterView<br>允许非对齐行的GridView，类似Pinterest的瀑布流，允许下拉刷新<br>项目地址：<a href=\"https://github.com/GDG-Korea/PinterestLikeAdapterView\">https://github.com/GDG-Korea/PinterestLikeAdapterView</a><br>APP示例：Pinterest等  </p>\n</li>\n<li><p>DraggableGridView<br>Item可拖动交换位置的GridView，实际是自己继承ViewGroup实现，类似桌面的单屏效果，可屏幕自动上下滚动进行Item移动交换，多屏效果见下面PagedDragDropGrid<br>项目地址：<a href=\"https://github.com/thquinn/DraggableGridView\">https://github.com/thquinn/DraggableGridView</a><br>Demo地址：<a href=\"https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true\">https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true</a>  </p>\n</li>\n<li><p>StickyGridHeaders<br>GroupName滑动到顶端时会固定不动直到另外一个GroupName到达顶端的GridView<br>项目地址：<a href=\"https://github.com/TonicArtos/StickyGridHeaders\">https://github.com/TonicArtos/StickyGridHeaders</a><br>效果图：<img src=\"https://github-camo.global.ssl.fastly.net/90b57e9383704c400706545225d439e057c6fcc0/687474703a2f2f342e62702e626c6f6773706f742e636f6d2f2d535f4262685758367754592f55517057306377554745492f41414141414141414776552f7a7a4a586a2d50635662592f73313630302f73637265656e2d6c616e6473636170652d736d616c6c65722e706e67\" alt=\"Renderings\">  </p>\n</li>\n<li><p>PagedDragDropGrid<br>Item可拖动交换位置、拖动删除的自定义控件，实际是自己继承ViewGroup实现，类似桌面的多屏效果，可拖动到屏幕边缘，屏幕自动左右滚动进行Item移动交换，可拖动进行删除，单屏效果见上面DraggableGridView<br>项目地址：<a href=\"https://github.com/mrKlar/PagedDragDropGrid\">https://github.com/mrKlar/PagedDragDropGrid</a><br>在线演示：<a href=\"http://youtu.be/FYTSRfthSuQ\">http://youtu.be/FYTSRfthSuQ</a>  </p>\n</li>\n<li><p>Android-DraggableGridViewPager<br>Item可拖动交换位置的GridView，实际是自己继承ViewGroup实现，类似桌面的多屏效果，可屏幕自动左右滚动进行Item移动交换，单屏效果见上面DraggableGridView<br>项目地址：<a href=\"https://github.com/zzhouj/Android-DraggableGridViewPager\">https://github.com/zzhouj/Android-DraggableGridViewPager</a><br>Demo地址：<a href=\"https://github.com/Trinea/trinea-download/blob/master/draggable-grid-viewpager-demo.apk?raw=true\">https://github.com/Trinea/trinea-download/blob/master/draggable-grid-viewpager-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>TwoWayGridView<br>可横向滚动的GridView<br>项目地址：<a href=\"https://github.com/jess-anders/two-way-gridview\">https://github.com/jess-anders/two-way-gridview</a>  </p>\n</li>\n<li><p>PagingGridView<br>分页加载的GridView。当滑动到GridView底部最后一个行时，显示一个进度行，然后加载下一页数据，并显示。<br>项目地址：<a href=\"https://github.com/nicolasjafelle/PagingGridView\">https://github.com/nicolasjafelle/PagingGridView</a>  </p>\n</li>\n<li><p>AsymmetricGridView<br>一个支持跨行和跨列可变Item大小的GridView<br>项目地址：<a href=\"https://github.com/felipecsl/AsymmetricGridView\">https://github.com/felipecsl/AsymmetricGridView</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.felipecsl.asymmetricgridview.app\">https://play.google.com/store/apps/details?id=com.felipecsl.asymmetricgridview.app</a><br>效果图：<img src=\"https://raw.githubusercontent.com/felipecsl/AsymmetricGridView/master/screenshots/ss_5_cols.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>GridView with Header and Footer<br>和<code>ListView</code>一样带头部和底部的<code>GridView</code>，用法和<code>ListView</code>一样<br>项目地址：<a href=\"https://github.com/liaohuqiu/android-GridViewWithHeaderAndFooter\">https://github.com/liaohuqiu/android-GridViewWithHeaderAndFooter</a><br>效果图：<img src=\"https://raw.githubusercontent.com/liaohuqiu/android-GridViewWithHeaderAndFooter/master/screen-shot.png\" alt=\"Screen Shot\">  </p>\n</li>\n</ol>\n<h4 id=\"六、ImageView\"><a href=\"#六、ImageView\" class=\"headerlink\" title=\"六、ImageView\"></a>六、ImageView</h4><ol>\n<li><p>PhotoView<br>支持双击或双指缩放的ImageView，在ViewPager等Scrolling view中正常使用，相比上面的AndroidTouchGallery，不仅支持ViewPager，同时支持单个ImageView<br>项目地址：<a href=\"https://github.com/chrisbanes/PhotoView\">https://github.com/chrisbanes/PhotoView</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=uk.co.senab.photoview.sample\">https://play.google.com/store/apps/details?id=uk.co.senab.photoview.sample</a><br>APP示例：photup  </p>\n</li>\n<li><p>android-gif-drawable<br>支持gif显示的view，用jni实现的，编译生成so库后直接xml定义view即可，而且本身不依赖于其他开源项目所以相对下面的ImageViewEx简单的多<br>项目地址：<a href=\"https://github.com/koral--/android-gif-drawable\">https://github.com/koral--/android-gif-drawable</a>  </p>\n</li>\n<li><p>ImageViewEx<br>支持Gif显示的ImageView，依赖很多，编译过程很繁琐<br>项目地址：<a href=\"https://github.com/frapontillo/ImageViewEx\">https://github.com/frapontillo/ImageViewEx</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/imageviewex-demo.apk?raw=true\">https://github.com/Trinea/TrineaDownload/blob/master/imageviewex-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>RoundedImageView<br>带圆角的ImageView<br>项目地址：<a href=\"https://github.com/vinc3m1/RoundedImageView\">https://github.com/vinc3m1/RoundedImageView</a><br>效果图：<img src=\"https://raw.github.com/makeramen/RoundedImageView/master/screenshot.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>SelectableRoundedImageView<br>ImageView允许四个角的每一个有不同的半径值。也允许椭圆形、圆形的形状或者边<br>项目地址：<a href=\"https://github.com/pungrue26/SelectableRoundedImageView\">https://github.com/pungrue26/SelectableRoundedImageView</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.joooonho\">https://play.google.com/store/apps/details?id=com.joooonho</a><br>效果图：<img src=\"https://camo.githubusercontent.com/25d2e5fb8783b5dd09c00b03091172a79c69350e/687474703a2f2f692e696d6775722e636f6d2f55355653376d322e706e673f31\" alt=\"Renderings\">  </p>\n</li>\n<li><p>ColorArt<br>根据图片的均色设置背景色显示文字和图片，类似itune11中效果<br>项目地址：<a href=\"https://github.com/MichaelEvans/ColorArt\">https://github.com/MichaelEvans/ColorArt</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/color-art-demo.apk?raw=true\">https://github.com/Trinea/TrineaDownload/blob/master/color-art-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>CircleImageView<br>圆形的ImageView<br>项目地址：<a href=\"https://github.com/hdodenhof/CircleImageView\">https://github.com/hdodenhof/CircleImageView</a><br>效果图：<img src=\"https://raw.github.com/hdodenhof/CircleImageView/master/screenshot.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>ImageViewZoom<br>支持放大和平移的ImageView<br>项目地址：<a href=\"https://github.com/sephiroth74/ImageViewZoom\">https://github.com/sephiroth74/ImageViewZoom</a><br>APP示例：<a href=\"https://play.google.com/store/apps/details?id=com.aviary.android.feather\">https://play.google.com/store/apps/details?id=com.aviary.android.feather</a>  </p>\n</li>\n<li><p>KenBurnsView<br>实现Ken Burns effect效果，达到身临其境效果的ImageView<br>项目地址：<a href=\"https://github.com/flavioarfaria/KenBurnsView\">https://github.com/flavioarfaria/KenBurnsView</a>  </p>\n</li>\n<li><p>CustomShapeImageView<br>各种形状的ImageView, 相比上面的圆形ImageView，多了更多形状<br>项目地址：<a href=\"https://github.com/MostafaGazar/CustomShapeImageView\">https://github.com/MostafaGazar/CustomShapeImageView</a><br>效果图：<img src=\"https://raw.github.com/MostafaGazar/CustomShapeImageView/master/Screenshot_2013-11-05-23-08-12.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Shape Image View<br>可以自定义各种形状的ImageView, 并且支持边框<br>项目地址：<a href=\"https://github.com/siyamed/android-shape-imageview\">https://github.com/siyamed/android-shape-imageview</a><br>效果图：<img height=\"500px\" src=\"https://github.com/siyamed/android-shape-imageview/raw/master/images/shader-buble.png\" /><img height=\"500px\" src=\"https://github.com/siyamed/android-shape-imageview/raw/master/images/all-samples.png\"/>  </p>\n</li>\n<li><p>TextDrawable<br>一个用于生成带有文本或者字母的图片的轻量级库。扩展自Drawable，因此可用于现有/自定义/网络等ImageView类，并且包含一个流接口用于创建drawables以及一个定制的ColorGenerator<br>项目地址：<a href=\"https://github.com/amulyakhare/TextDrawable\">https://github.com/amulyakhare/TextDrawable</a><br>效果图：<img src=\"https://raw.githubusercontent.com/amulyakhare/TextDrawable/master/screens/screen7.png\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<h4 id=\"七、ProgressBar\"><a href=\"#七、ProgressBar\" class=\"headerlink\" title=\"七、ProgressBar\"></a>七、ProgressBar</h4><ol>\n<li><p>SmoothProgressBar<br>水平进度条<br>项目地址：<a href=\"https://github.com/castorflex/SmoothProgressBar\">https://github.com/castorflex/SmoothProgressBar</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=fr.castorflex.android.smoothprogressbar.sample\">https://play.google.com/store/apps/details?id=fr.castorflex.android.smoothprogressbar.sample</a>  </p>\n</li>\n<li><p>ProgressWheel<br>支持进度显示的圆形ProgressBar<br>项目地址：<a href=\"https://github.com/Todd-Davies/ProgressWheel\">https://github.com/Todd-Davies/ProgressWheel</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/progress-wheel-demo.apk?raw=true\">https://github.com/Trinea/TrineaDownload/blob/master/progress-wheel-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>android-square-progressbar<br>在图片周围显示进度<br>项目地址：<a href=\"https://github.com/mrwonderman/android-square-progressbar\">https://github.com/mrwonderman/android-square-progressbar</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=net.yscs.android.square_progressbar_example\">https://play.google.com/store/apps/details?id=net.yscs.android.square_progressbar_example</a><br>效果图：<img src=\"https://googledrive.com/host/0BwESwPCuXtw7eExwSFVLQkR2TTg/newscreen1.png\" alt=\"Renderings\"><br>APP示例：square  </p>\n</li>\n<li><p>HoloCircularProgressBar<br>Android4.1 时钟App样式<br>项目地址：<a href=\"https://github.com/passsy/android-HoloCircularProgressBar\">https://github.com/passsy/android-HoloCircularProgressBar</a><br>效果图：<img src=\"https://raw.github.com/passsy/android-HoloCircularProgressBar/master/raw/screenshot1.png\" alt=\"Renderings\"><br>APP示例：Android4.1时钟App  </p>\n</li>\n<li><p>ProgressButton<br>通过图钉的不同状态显示进度<br>项目地址：<a href=\"https://github.com/f2prateek/progressbutton\">https://github.com/f2prateek/progressbutton</a><br>效果图：<img src=\"http://f2prateek.com/progressbutton/static/states.png\" alt=\"Renderings\"><br>文档介绍：<a href=\"http://f2prateek.com/progressbutton/\">http://f2prateek.com/progressbutton/</a>  </p>\n</li>\n<li><p>GoogleProgressBar<br>类似google 多个圆形卡片翻转的progressBar<br>项目地址：<a href=\"https://github.com/jpardogo/GoogleProgressBar\">https://github.com/jpardogo/GoogleProgressBar</a><br>效果图：<img src=\"https://raw.githubusercontent.com/jpardogo/GoogleProgressBar/master/art/GoogleProgressBar.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>TH-ProgressButton<br>带圆形进度显示的按钮<br>项目地址；<a href=\"https://github.com/torryharris/TH-ProgressButton\">https://github.com/torryharris/TH-ProgressButton</a><br>效果图：<img src=\"https://raw.github.com/Vyshakh-K/TH-ProgressButton/master/screenshots/progressshot1.png\" alt=\"Renderings\">  <img src=\"https://raw.github.com/Vyshakh-K/TH-ProgressButton/master/screenshots/progressshot2.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>NumberProgressBar<br>带数字进度的进度条<br>项目地址：<a href=\"https://github.com/daimajia/NumberProgressBar\">https://github.com/daimajia/NumberProgressBar</a><br>效果图：<img src=\"https://camo.githubusercontent.com/0c92568af7ec4e04e2e1503acdd2ca99854ab0b5/687474703a2f2f7777332e73696e61696d672e636e2f6d773639302f36313064633033346a77316566797264386e376937673230637a30326d7135662e676966\" alt=\"Renderings\">  </p>\n</li>\n<li><p>CircularProgressDrawable<br>带圆形进度显示的进度条<br>项目地址：<a href=\"https://github.com/Sefford/CircularProgressDrawable\">https://github.com/Sefford/CircularProgressDrawable</a><br>效果图：<img src=\"https://raw.githubusercontent.com/Sefford/CircularProgressDrawable/master/overshoot.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android-RoundCornerProgressBar<br>Android 圆角 ProgressBar，可自定义圆角颜色和半径，包括带 Icon 和不带 Icon 两种类型。<br>项目地址：<a href=\"https://github.com/akexorcist/Android-RoundCornerProgressBar\">https://github.com/akexorcist/Android-RoundCornerProgressBar</a><br>效果图：<img src=\"https://raw.githubusercontent.com/akexorcist/Android-RoundCornerProgressBar/master/image/screenshot_02.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>circular-progress-button<br>带进度显示的Button<br>项目地址：<a href=\"https://github.com/dmytrodanylyk/circular-progress-button\">https://github.com/dmytrodanylyk/circular-progress-button</a><br>效果图：<img src=\"https://raw.githubusercontent.com/dmytrodanylyk/circular-progress-button/master/screenshots/intro.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>WaveView<br>一个波纹效果的 View，可用来做 ProgressBar<br>项目地址：<a href=\"https://github.com/john990/WaveView\">https://github.com/john990/WaveView</a><br>Demo地址：<a href=\"https://raw.github.com/john990/WaveView/master/screenshot%26apk/demo.unaligned.apk\">https://raw.github.com/john990/WaveView/master/screenshot%26apk/demo.unaligned.apk</a><br>效果图：<img src=\"https://camo.githubusercontent.com/60722e9d4f2d2daa78a8650cb27a32adea82bdd4/68747470733a2f2f7261772e6769746875622e636f6d2f6a6f686e3939302f57617665566965772f6d61737465722f73637265656e73686f7425323661706b2f73637265656e73686f742e676966\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android L 效果的ProgressBar<br>项目地址：<a href=\"https://github.com/tigerguixh/ProgressBar\">https://github.com/tigerguixh/ProgressBar</a><br>Demo地址: <a href=\"https://github.com/tigerguixh/ProgressBar/blob/master/bin/ProgressBar.apk\">https://github.com/tigerguixh/ProgressBar/blob/master/bin/ProgressBar.apk</a><br>效果图: <img src=\"https://github.com/cr1944/ProgressBar/raw/master/1.gif\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<h4 id=\"八、TextView\"><a href=\"#八、TextView\" class=\"headerlink\" title=\"八、TextView\"></a>八、TextView</h4><p>包括TextView及所有继承自TextView控件，如EditText、Button、RadioButton  </p>\n<ol>\n<li><p>android-flowtextview<br>文字自动环绕其他View的Layout<br>项目地址：<a href=\"https://github.com/deano2390/FlowTextView\">https://github.com/deano2390/FlowTextView</a><br>效果图：<a href=\"http://i949.photobucket.com/albums/ad332/vostroman1500/1.png\">http://i949.photobucket.com/albums/ad332/vostroman1500/1.png</a>  </p>\n</li>\n<li><p>Android Form EditText<br>验证输入合法性的编辑框，支持输入、英文、ip、url等多种正则验证<br>项目地址：<a href=\"https://github.com/vekexasia/android-edittext-validator\">https://github.com/vekexasia/android-edittext-validator</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.andreabaccega.edittextformexample\">https://play.google.com/store/apps/details?id=com.andreabaccega.edittextformexample</a>  </p>\n</li>\n<li><p>Emojicon<br>支持emojis的TextView和EditText<br>项目地址：<a href=\"https://github.com/rockerhieu/emojicon\">https://github.com/rockerhieu/emojicon</a><br>文档介绍：<a href=\"http://rockerhieu.com/emojicon/\">http://rockerhieu.com/emojicon/</a>  </p>\n</li>\n<li><p>android-circlebutton<br>Android圆形按钮，实际实现是继承自ImageView<br>项目地址：<a href=\"https://github.com/markushi/android-circlebutton\">https://github.com/markushi/android-circlebutton</a><br>Demo地址：<a href=\"https://github.com/markushi/android-circlebutton/blob/master/example/example.apk\">https://github.com/markushi/android-circlebutton/blob/master/example/example.apk</a>  </p>\n</li>\n<li><p>Segmented Radio Buttons for Android<br>iOS’s segmented controls的实现<br>项目地址：<a href=\"https://github.com/vinc3m1/android-segmentedradiobutton\">https://github.com/vinc3m1/android-segmentedradiobutton</a><br>Demo地址：<a href=\"https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true\">https://github.com/thquinn/DraggableGridView/blob/master/bin/DraggableGridViewSample.apk?raw=true</a><br>效果图：<img src=\"https://raw.github.com/vinc3m1/android-segmentedradiobutton/master/screens/segmentedradio.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Chips EditText Library<br>支持国家名字联想从而选择显示该国国旗的EditText，实际就是通过SpannableStringBuilder实现<br>项目地址：<a href=\"https://github.com/kpbird/chips-edittext-library\">https://github.com/kpbird/chips-edittext-library</a><br>Demo地址：<a href=\"https://github.com/kpbird/chips-edittext-library/tree/master/ChipsEditTextDemo/bin\">https://github.com/kpbird/chips-edittext-library/tree/master/ChipsEditTextDemo/bin</a>  </p>\n</li>\n<li><p>AutoFitTextView<br>可固定边界内容字体大小自适应的TextView<br>项目地址：<a href=\"https://github.com/grantland/android-autofittextview\">https://github.com/grantland/android-autofittextview</a>  </p>\n</li>\n<li><p>Shimmer for Android<br>文字发淡光的TextView<br>项目地址：<a href=\"https://github.com/RomainPiel/Shimmer-android\">https://github.com/RomainPiel/Shimmer-android</a>  </p>\n</li>\n<li><p>Titanic<br>可以显示水位上升下降(不知道该怎么描述 囧)的TextView<br>项目地址：<a href=\"https://github.com/RomainPiel/Titanic\">https://github.com/RomainPiel/Titanic</a><br>效果图：<img src=\"https://github.com/RomainPiel/Titanic/raw/master/titanic.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>android-iconify<br>提供带Icon的TextView,Menu,Button等<br>项目地址：<a href=\"https://github.com/JoanZapata/android-iconify\">https://github.com/JoanZapata/android-iconify</a>  </p>\n</li>\n<li><p>Calligraphy<br>让我们在android开发中使用自定义字体变得更加简单<br>项目地址 ：<a href=\"https://github.com/chrisjenx/Calligraphy\">https://github.com/chrisjenx/Calligraphy</a><br>效果图：<img src=\"https://github.com/chrisjenx/Calligraphy/raw/master/screenshot.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>CreditsRoll<br>类似星球大战字幕效果的TextView<br>项目地址：<a href=\"https://github.com/frakbot/CreditsRoll\">https://github.com/frakbot/CreditsRoll</a>  </p>\n</li>\n<li><p>android-process-buton<br>带加载或提交进度的Button<br>项目地址：<a href=\"https://github.com/dmytrodanylyk/android-process-buton\">https://github.com/dmytrodanylyk/android-process-buton</a>  </p>\n</li>\n<li><p>FButton<br>扁平化的Button<br>项目地址：<a href=\"https://github.com/hoang8f/android-flat-button\">https://github.com/hoang8f/android-flat-button</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo\">https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo</a>  </p>\n</li>\n<li><p>FloatingActionButton<br>一个类似Android版Google+浮动功能按钮的控件，可以响应ListView的滚动事件。当列表向上滚动的时候会自动显示，向下滚动的时候自动隐藏。<br>项目地址：<a href=\"https://github.com/makovkastar/FloatingActionButton\">https://github.com/makovkastar/FloatingActionButton</a><br>Demo地址：<a href=\"https://github.com/makovkastar/FloatingActionButton/tree/master/\">https://github.com/makovkastar/FloatingActionButton/tree/master/</a><br>效果图：<img src=\"https://raw.githubusercontent.com/makovkastar/FloatingActionButton/master/art/demo.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android Saripaar<br>Android表单验证<br>项目地址：<a href=\"https://github.com/ragunathjawahar/android-saripaar/\">https://github.com/ragunathjawahar/android-saripaar/</a>  </p>\n</li>\n<li><p>JumpingBeans<br>文字像 Mexican beans 一样跳动<br>项目地址：<a href=\"https://github.com/frakbot/JumpingBeans\">https://github.com/frakbot/JumpingBeans</a><br>Demo地址：<a href=\"http://play.google.com/store/apps/details?id=net.frakbot.jumpingbeans.demo\">http://play.google.com/store/apps/details?id=net.frakbot.jumpingbeans.demo</a><br>效果图：<img src=\"https://github.com/frakbot/JumpingBeans/blob/master/art/jumpingdots.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>FancyButtons<br>一个不用图片就可以帮助我们创建出漂亮按钮的库。<br>项目地址：<a href=\"https://github.com/medyo/fancybuttons\">https://github.com/medyo/fancybuttons</a><br>Demo地址：<a href=\"https://github.com/medyo/fancybuttons/tree/master/samples\">https://github.com/medyo/fancybuttons/tree/master/samples</a><br>效果图：<img src=\"https://camo.githubusercontent.com/8c5800ef180f69d302237132906737bf71a52caf/68747470733a2f2f7261772e6769746875622e636f6d2f6d6564796f2f66616e6379627574746f6e732f6d61737465722f73637265656e73686f74732f66616e63792e706e67\" alt=\"Renderings\"><br><img src=\"https://raw.githubusercontent.com/medyo/fancybuttons/master/screenshots/fancy2.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android-RobotoTextView<br>一个实现了所有Roboto字体的TextView，包括新出的Roboto Slab字体。<br>项目地址：<a href=\"https://github.com/johnkil/Android-RobotoTextView\">https://github.com/johnkil/Android-RobotoTextView</a><br>Demo地址：<a href=\"http://play.google.com/store/apps/details?id=com.devspark.robototextview\">http://play.google.com/store/apps/details?id=com.devspark.robototextview</a><br>Demo项目：<a href=\"https://github.com/johnkil/Android-RobotoTextView/tree/master/robototextview-sample\">https://github.com/johnkil/Android-RobotoTextView/tree/master/robototextview-sample</a><br>效果图：<img height=\"400px\" src=\"https://camo.githubusercontent.com/f058c810055e1ff12fa995346059ad399d9c0f95/687474703a2f2f6934362e74696e797069632e636f6d2f6239646736392e706e67\" />&gt;  </p>\n</li>\n<li><p>Android-WizardPager<br>一个表单向导库<br>项目地址：<a href=\"https://github.com/romannurik/android-wizardpager\">https://github.com/romannurik/android-wizardpager</a><br>Demo项目：<a href=\"https://github.com/str4d/android-wizardpager/tree/textfield\">https://github.com/str4d/android-wizardpager/tree/textfield</a><br>效果图：<img height=\"400px\" src=\"https://camo.githubusercontent.com/685a1eee3b9b7eb6a0409061031654ea7d6b0b17/68747470733a2f2f6c68352e676f6f676c6575736572636f6e74656e742e636f6d2f2d664944555a3074514373632f554a4e4c6a6e504c5447492f41414141414141416f4f382f784b63654f61746c6a50302f773431332d683638392d6e6f2f322e706e67\" />  </p>\n</li>\n<li><p>RippleView<br>一个实现了 Android L 上才引入的点击按钮后出现水波纹效果的按钮<br>项目地址：<a href=\"https://github.com/siriscac/RippleView\">https://github.com/siriscac/RippleView</a><br>Demo项目：<a href=\"https://github.com/siriscac/RippleView/tree/master/RippleViewExample\">https://github.com/siriscac/RippleView/tree/master/RippleViewExample</a><br>效果图：<img src=\"https://camo.githubusercontent.com/eec41193900aad4803dcf18bc9915fafa3f7d1cf/68747470733a2f2f7261772e6769746875622e636f6d2f73697269736361632f526970706c65566965772f6d61737465722f53637265656e732f53637265656e2e676966\" alt=\"Renderings\">  </p>\n</li>\n<li><p>RippleEffect<br>一个实现Material Design Ripple效果的库，支持Android API 9+以上版本。<br>项目地址：<a href=\"https://github.com/traex/RippleEffect\">https://github.com/traex/RippleEffect</a><br>Demo项目：<a href=\"https://github.com/traex/RippleEffect/tree/master/sample\">https://github.com/traex/RippleEffect/tree/master/sample</a><br>效果图：<img src=\"https://raw.githubusercontent.com/traex/RippleEffect/master/header.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android Floating Label Widgets<br>包含一系列控件，这些控件特点是：有默认值，当值不为空时默认值浮动到上面变为提示<br>项目地址：<a href=\"https://github.com/marvinlabs/android-floatinglabel-widgets\">https://github.com/marvinlabs/android-floatinglabel-widgets</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.marvinlabs.widget.floatinglabel.demo\">https://play.google.com/store/apps/details?id=com.marvinlabs.widget.floatinglabel.demo</a><br>在线演示：<a href=\"http://www.youtube.com/watch?v=hpZD9gJcRg0&amp;feature=youtu.be\">http://www.youtube.com/watch?v=hpZD9gJcRg0&amp;feature=youtu.be</a>  </p>\n</li>\n<li><p>MaterialEditText<br>EditText 的 Material Design 实现。包含 <a href=\"http://www.google.com/design/spec/components/text-fields.html\">Google Material Design Spec</a>中的UI效果和一些新增特性。<br>项目地址：<a href=\"https://github.com/rengwuxian/MaterialEditText\">https://github.com/rengwuxian/MaterialEditText</a>  </p>\n</li>\n<li><p>MultiActionTextView<br>可以分别给TextView中的某几个字设置点击事件的TextView<br>项目地址：<a href=\"https://github.com/ajaysahani/MultiActionTextView\">https://github.com/ajaysahani/MultiActionTextView</a><br>效果图：<img src=\"https://camo.githubusercontent.com/1223e37d084e84ec0e22a1b27e7513661d0e1b39/687474703a2f2f692e696d6775722e636f6d2f773934576f53582e706e67\" alt=\"Renderings\">  </p>\n</li>\n<li><p>ToggleButton<br>状态切换的 Button，类似 iOS，用 View 实现<br>项目地址：<a href=\"https://github.com/zcweng/ToggleButton\">https://github.com/zcweng/ToggleButton</a><br>效果图：<img src=\"https://github.com/zcweng/ToggleButton/raw/master/ToggleButtonSample/21879.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>SlideSwitch<br>状态切换的开关，可以设置为类似IOS的圆形，也可以设置为矩形，用 View 实现<br>项目地址：<a href=\"https://github.com/Leaking/SlideSwitch\">https://github.com/Leaking/SlideSwitch</a><br>效果图：<img src=\"https://github.com/Leaking/SlideSwitch/blob/master/Example/TestLibs/res/drawable-hdpi/slide_c.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>ExpandableTextView<br>可展开和收缩内容的TextView。<br>项目地址：<a href=\"https://github.com/Manabu-GT/ExpandableTextView\">https://github.com/Manabu-GT/ExpandableTextView</a><br>效果图：<img height=\"500px\" src=\"https://camo.githubusercontent.com/8bf46083b3bd152c2051ae4c234649dbbb975376/68747470733a2f2f7261772e6769746875622e636f6d2f4d616e6162752d47542f457870616e6461626c6554657874566965772f6d61737465722f6172742f726561646d655f64656d6f2e676966\" /></p>\n</li>\n</ol>\n<h4 id=\"九、ScrollView\"><a href=\"#九、ScrollView\" class=\"headerlink\" title=\"九、ScrollView\"></a>九、ScrollView</h4><ol>\n<li><p>Discrollview<br>支持滚动时Item淡入淡出，平移，缩放效果的ScrollView<br>项目地址：<a href=\"https://github.com/flavienlaurent/discrollview\">https://github.com/flavienlaurent/discrollview</a><br>Demo地址：<a href=\"https://github.com/flavienlaurent/discrollview/raw/master/sample.apk\">https://github.com/flavienlaurent/discrollview/raw/master/sample.apk</a>  </p>\n</li>\n<li><p>PullScrollView<br>仿照新浪微博Android客户端个人中心的ScrollView，下拉背景伸缩回弹效果。<br>项目地址：<a href=\"https://github.com/MarkMjw/PullScrollView\">https://github.com/MarkMjw/PullScrollView</a><br>效果图：<img src=\"https://raw.github.com/MarkMjw/PullScrollView/master/Screenshots/1.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>ArcLayout<br>一个非常简单的弧布局库<br>项目地址: <a href=\"https://github.com/ogaclejapan/ArcLayout\">https://github.com/ogaclejapan/ArcLayout</a><br>Demo地址k: <a href=\"https://play.google.com/store/apps/details?id=com.ogaclejapan.arclayout.demo\">https://play.google.com/store/apps/details?id=com.ogaclejapan.arclayout.demo</a><br>效果图: <img src=\"https://raw.githubusercontent.com/ogaclejapan/ArcLayout/master/art/demo1.gif\" alt=\"Renderings\"><br><img src=\"https://raw.githubusercontent.com/ogaclejapan/ArcLayout/master/art/demo2.gif\" alt=\"renderings\">  </p>\n</li>\n<li><p>ParallaxScrollView<br>支持视差滚动的ScrollView ，背景图片的滚动速度小于ScrollView中子控件的滚动速度<br>项目地址：<a href=\"https://github.com/chrisjenx/ParallaxScrollView\">https://github.com/chrisjenx/ParallaxScrollView</a><br>Demo地址：<a href=\"http://cloud.github.com/downloads/chrisjenx/ParallaxScrollView/ParallaxScrollViewDemo-v1.0.5.apk\">http://cloud.github.com/downloads/chrisjenx/ParallaxScrollView/ParallaxScrollViewDemo-v1.0.5.apk</a>  </p>\n</li>\n<li><p>AKParallax-Android<br>支持视差滚动的ScrollView<br>项目地址：<a href=\"https://github.com/ideaismobile/AKParallax-Android\">https://github.com/ideaismobile/AKParallax-Android</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.appkraft.parallax_sample\">https://play.google.com/store/apps/details?id=com.appkraft.parallax_sample</a>  </p>\n</li>\n</ol>\n<ol>\n<li><p>Android-ObservableScrollView<br>监听滚动视图滚动事件的库，帮助与Toolbar的交互动效处理与Material Design的实现<br>项目地址：<a href=\"https://github.com/ksoichiro/Android-ObservableScrollView\">https://github.com/ksoichiro/Android-ObservableScrollView</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.github.ksoichiro.android.observablescrollview.samples2\">https://play.google.com/store/apps/details?id=com.github.ksoichiro.android.observablescrollview.samples2</a>  </p>\n</li>\n<li><p>OverScrollView<br>有弹性的ScrollView，实现了当手指滑动到ScrollView的顶部、底部时，可以继续的向上、向下拉伸。当释放手指的时候，向上、下回弹<br>项目地址：<a href=\"https://github.com/EverythingMe/OverScrollView\">https://github.com/EverythingMe/OverScrollView</a></p>\n</li>\n</ol>\n<h4 id=\"十、TimeView\"><a href=\"#十、TimeView\" class=\"headerlink\" title=\"十、TimeView\"></a>十、TimeView</h4><p>包括TimePicker、DatePicker、CalendarView、Clock等时间相关控件  </p>\n<ol>\n<li><p>android-times-square<br>Android日历时间部件，支持选取单个日期，多个日期，及日期区间段和对话框形式显示<br>项目地址：<a href=\"https://github.com/square/android-times-square\">https://github.com/square/android-times-square</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/times-square-demo.apk?raw=true\">https://github.com/Trinea/TrineaDownload/blob/master/times-square-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>android-calendar-card<br>日历<br>项目地址：<a href=\"https://github.com/kenumir/android-calendar-card\">https://github.com/kenumir/android-calendar-card</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.wt.calendarcardsample\">https://play.google.com/store/apps/details?id=com.wt.calendarcardsample</a><br>效果图：<img src=\"https://raw.github.com/kenumir/android-calendar-card/master/calendar-card-sample/_work/device-2013-10-12-151801.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>AndroidWheel<br>Android Wheel支持城市、多种日期时间、密码、图片<br>项目地址：<a href=\"https://code.google.com/p/android-wheel/\">https://code.google.com/p/android-wheel/</a><br>效果图：<img src=\"http://farm6.staticflickr.com/5532/11621528786_220c040ba5_o.jpg\" alt=\"Renderings\">  </p>\n</li>\n<li><p>GoogleDateTimePickers<br>时间选择部件<br>项目地址：<a href=\"https://github.com/Mirkoddd/GoogleDateTimePickers\">https://github.com/Mirkoddd/GoogleDateTimePickers</a><br>文档介绍：<a href=\"https://play.google.com/store/apps/details?id=com.mirko.sample&amp;hl=it\">https://play.google.com/store/apps/details?id=com.mirko.sample&amp;hl=it</a>  </p>\n</li>\n<li><p>DateTimePicker<br>日期选择部件(Google Agenda的样式风格)<br>项目地址：<a href=\"https://github.com/flavienlaurent/datetimepicker\">https://github.com/flavienlaurent/datetimepicker</a><br>Demo地址：<a href=\"https://raw.github.com/biboune/datetimepicker/master/datetimepicker-sample.apk\">https://raw.github.com/biboune/datetimepicker/master/datetimepicker-sample.apk</a><br>效果图：<img src=\"https://camo.githubusercontent.com/493edeea3eb553ad0d0b121dbead0d7ec6a858f2/68747470733a2f2f7261772e6769746875622e636f6d2f6269626f756e652f6461746574696d657069636b65722f6d61737465722f67726170686963732f696d67312e706e67\" alt=\"Renderings\">  </p>\n</li>\n<li><p>android-betterpickers<br>提供日期、数字、时间（数字方式和钟表方式）、重复周期（闹钟的周期重复）、HMS（时、分、秒）的选择，支持以DialogFragment的弹窗选择<br>项目地址：<a href=\"https://github.com/derekbrameyer/android-betterpickers\">https://github.com/derekbrameyer/android-betterpickers</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.doomonafireball.betterpickers.sample\">https://play.google.com/store/apps/details?id=com.doomonafireball.betterpickers.sample</a><br>效果图：<img src=\"https://camo.githubusercontent.com/897ae3c71b49c4366565f3480719647687b1804a/68747470733a2f2f7261772e6769746875622e636f6d2f646572656b6272616d657965722f616e64726f69642d6265747465727069636b6572732f6d61737465722f73616d706c652f696d61676572792f7765625f666561747572655f677261706869632e706e67\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android Week View<br>日期控件，支持周，天视图，支持自定义样式<br>项目地址：<a href=\"https://github.com/alamkanak/Android-Week-View\">https://github.com/alamkanak/Android-Week-View</a><br>效果图：<img src=\"https://github.com/alamkanak/Android-Week-View/blob/master/images/screen-shot.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>ScrollerCalendar<br>实现每行显示一年的12个月份的RecyclerView年历<br>项目地址：<a href=\"https://github.com/guanchao/ScrollerCalendar\">https://github.com/guanchao/ScrollerCalendar</a><br>效果图：<img src=\"https://raw.githubusercontent.com/guanchao/ScrollerCalendar/master/images/sample2.gif\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<h4 id=\"十一、TipView\"><a href=\"#十一、TipView\" class=\"headerlink\" title=\"十一、TipView\"></a>十一、TipView</h4><p>包括Toast、角标、UndoBar等提示性控件  </p>\n<ol>\n<li><p>Crouton<br>丰富样式的Toast，允许alert、comfirm、info样式及点击消失样式，允许设置Toast显示时间，允许自定义View。 本文32. SuperToasts为其扩展版<br>项目地址：<a href=\"https://github.com/keyboardsurfer/Crouton\">https://github.com/keyboardsurfer/Crouton</a><br>Demo地址：<a href=\"http://play.google.com/store/apps/details?id=de.keyboardsurfer.app.demo.crouton\">http://play.google.com/store/apps/details?id=de.keyboardsurfer.app.demo.crouton</a>  </p>\n</li>\n<li><p>supertooltips<br>带动画效果的Tips显示<br>项目地址：<a href=\"https://github.com/nhaarman/supertooltips\">https://github.com/nhaarman/supertooltips</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.haarman.supertooltips\">https://play.google.com/store/apps/details?id=com.haarman.supertooltips</a>  </p>\n</li>\n<li><p>Android ViewBadger<br>为其他View添加角标等<br>项目地址：<a href=\"https://github.com/jgilfelt/android-viewbadger\">https://github.com/jgilfelt/android-viewbadger</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/android-viewbadger.apk?raw=true\">https://github.com/Trinea/TrineaDownload/blob/master/android-viewbadger.apk?raw=true</a><br>效果图：<img src=\"https://github-camo.global.ssl.fastly.net/a705a3e88c75ae2394943bd7c56f725697616ea8/687474703a2f2f7777772e6a65666667696c66656c742e636f6d2f766965776261646765722f76622d31612e706e67\" alt=\"Renderings\">  </p>\n</li>\n<li><p>SuperToasts<br>更丰富样式的toast，支持Button、Progress、Horizontal Progress样式、支持进入动画、支持撤销及其动画设置<br>项目地址：<a href=\"https://github.com/JohnPersano/SuperToasts\">https://github.com/JohnPersano/SuperToasts</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.supertoastsdemo\">https://play.google.com/store/apps/details?id=com.supertoastsdemo</a><br>效果图：<img src=\"http://i1331.photobucket.com/albums/w597/JohnPersano/supertoasts_githubimage_zps8a5ceb7c.png\" alt=\"SuperButtonToast\">  </p>\n</li>\n<li><p>UndoBar<br>屏幕底部显示取消或是确认的PopupWindows<br>项目地址：<a href=\"https://github.com/soarcn/UndoBar\">https://github.com/soarcn/UndoBar</a><br>效果图：<img src=\"https://github.com/soarcn/UndoBar/blob/master/art/redo.png?raw=true\" alt=\"Renderings\">  </p>\n</li>\n<li><p>UndoBar<br>屏幕底部显示取消或是确认某操作<br>项目地址：<a href=\"https://github.com/jenzz/Android-UndoBar\">https://github.com/jenzz/Android-UndoBar</a><br>效果图：<img src=\"https://raw.github.com/jenzz/Android-UndoBar/master/assets/Screenshot2.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android-ActionItemBadge<br>可以在ActionBar的MenuItem上显示一个小角标<br>项目地址：<a href=\"https://github.com/mikepenz/Android-ActionItemBadge\">https://github.com/mikepenz/Android-ActionItemBadge</a><br>效果图：<img src=\"https://raw.githubusercontent.com/mikepenz/Android-ActionItemBadge/master/DEV/screenshot/screenshot1_small.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>SnackBar<br>Material Design 风格的 Toast，类似 Google inbox 中的提示<br>项目地址：<a href=\"https://github.com/MrEngineer13/SnackBar\">https://github.com/MrEngineer13/SnackBar</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.mrengineer13.snackbar.sample\">https://play.google.com/store/apps/details?id=com.mrengineer13.snackbar.sample</a><br>效果图：<img src=\"https://camo.githubusercontent.com/67a39af16f3d46631567c1f7bd7dcddeb3c4c9e9/687474703a2f2f6d6174657269616c2d64657369676e2e73746f726167652e676f6f676c65617069732e636f6d2f696d616765732f636f6d706f6e656e74732d746f617374732d73706563732d737065635f746f6173745f30335f315f6c617267655f6d6470692e706e67\" alt=\"Renderings\">  </p>\n</li>\n<li><p>HeadsUp<br>在2.3上使用 android  5.0的 HeadsUp 效果<br>项目地址：<a href=\"https://github.com/zzz40500/HeadsUp\">https://github.com/zzz40500/HeadsUp</a><br>效果图：<img src=\"http://upload-images.jianshu.io/upload_images/166866-543a5d26ab71d0f6.gif\" alt=\"heads-up.gif\"></p>\n</li>\n<li><p>Droppy<br>项目地址：<a href=\"https://github.com/shehabic/Droppy\">https://github.com/shehabic/Droppy</a><br>特点：A simple yet-powerful and fully customizable Android drop-down menu. It supports Text with/without Icons, Separators, and even fully customized views.<br>效果力: <img src=\"https://raw.githubusercontent.com/shehabic/Droppy/screenshots/Droppy_Screenshot.png\" alt=\"Droppy\"></p>\n</li>\n</ol>\n<h4 id=\"十二、FlipView\"><a href=\"#十二、FlipView\" class=\"headerlink\" title=\"十二、FlipView\"></a>十二、FlipView</h4><ol>\n<li><p>android-flip<br>类似Flipboard翻转动画的实现<br>项目地址：<a href=\"https://github.com/openaphid/android-flip\">https://github.com/openaphid/android-flip</a><br>Demo地址：<a href=\"https://github.com/openaphid/android-flip/blob/master/FlipView/Demo/APK/Aphid-FlipView-Demo.apk?raw=true\">https://github.com/openaphid/android-flip/blob/master/FlipView/Demo/APK/Aphid-FlipView-Demo.apk?raw=true</a><br>APP示例：flipboard  </p>\n</li>\n<li><p>FlipImageView<br>支持x、y、z及动画选择的翻转动画的实现<br>项目地址：<a href=\"https://github.com/castorflex/FlipImageView\">https://github.com/castorflex/FlipImageView</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=fr.castorflex.android.flipimageview\">https://play.google.com/store/apps/details?id=fr.castorflex.android.flipimageview</a>  </p>\n</li>\n<li><p>FoldableLayout<br>Flip翻转效果的ListView，目前还不支持ListView缓存<br>项目地址：<a href=\"https://github.com/alexvasilkov/FoldableLayout\">https://github.com/alexvasilkov/FoldableLayout</a><br>Demo地址：<a href=\"http://play.google.com/store/apps/details?id=com.alexvasilkov.foldablelayout.sample\">http://play.google.com/store/apps/details?id=com.alexvasilkov.foldablelayout.sample</a>  </p>\n</li>\n</ol>\n<h4 id=\"十三、ColorPickView\"><a href=\"#十三、ColorPickView\" class=\"headerlink\" title=\"十三、ColorPickView\"></a>十三、ColorPickView</h4><ol>\n<li><p>ColorPickerView<br>颜色选择器，支持PopupWindows或新的Activity中打开<br>项目地址：<a href=\"https://code.google.com/p/color-picker-view/\">https://code.google.com/p/color-picker-view/</a><br>效果图：<img src=\"http://oi41.tinypic.com/33c6mm8.jpg\" alt=\"Renderings\">  </p>\n</li>\n<li><p>HoloColorPicker<br>颜色选择器<br>项目地址：<a href=\"https://github.com/LarsWerkman/HoloColorPicker\">https://github.com/LarsWerkman/HoloColorPicker</a><br>Demo地址：<a href=\"https://docs.google.com/file/d/0BwclyDTlLrdXRzVnTGJvTlRfU2s/edit\">https://docs.google.com/file/d/0BwclyDTlLrdXRzVnTGJvTlRfU2s/edit</a>  </p>\n</li>\n<li><p>ColorPickerPreference<br>颜色选择器<br>项目地址：<a href=\"https://github.com/attenzione/android-ColorPickerPreference\">https://github.com/attenzione/android-ColorPickerPreference</a><br>效果图：<img src=\"https://github.com/attenzione/android-ColorPickerPreference/raw/master/screen_2.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>ColorPicker<br>颜色选择器（Google Agenda中的样式风格）<br>项目地址：<a href=\"https://github.com/flavienlaurent/colorpicker\">https://github.com/flavienlaurent/colorpicker</a><br>Demo地址：<a href=\"https://raw.github.com/biboune/colorpicker/master/colorpicker-sample.apk\">https://raw.github.com/biboune/colorpicker/master/colorpicker-sample.apk</a><br>效果图：<img src=\"https://camo.githubusercontent.com/a42581e637ca379004855d69e262d85ea966fa35/68747470733a2f2f7261772e6769746875622e636f6d2f6269626f756e652f636f6c6f727069636b65722f6d61737465722f67726170686963732f696d67312e706e67\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<h4 id=\"十四、GraphView\"><a href=\"#十四、GraphView\" class=\"headerlink\" title=\"十四、GraphView\"></a>十四、GraphView</h4><ol>\n<li><p>MPAndroidChart<br>强大的图表绘制工具，支持折线图、面积图、散点图、时间图、柱状图、条图、饼图、气泡图、圆环图、范围（高至低）条形图、网状图及各种图的结合；支持图的拖拽缩放；支持 Android 2.2 以上，支持横纵轴缩放，多指缩放，展现动画、高亮、保存到 sdcard、从文件读取图表<br>项目地址：<a href=\"https://github.com/PhilJay/MPAndroidChart\">https://github.com/PhilJay/MPAndroidChart</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.xxmassdeveloper.mpchartexample\">https://play.google.com/store/apps/details?id=com.xxmassdeveloper.mpchartexample</a><br>Demo项目：<a href=\"https://github.com/PhilJay/MPAndroidChart/tree/master/MPChartExample\">https://github.com/PhilJay/MPAndroidChart/tree/master/MPChartExample</a><br>效果图：<img height=\"300px\" src=\"https://camo.githubusercontent.com/a9eaa5fc7fb6c1e70b22acd09385055e0f5c4fe7/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f73696d706c6564657369676e5f6c696e656368617274342e706e67\" /><br/><img height=\"300px\" src=\"https://camo.githubusercontent.com/78b4bc4e50e151970961daf56e81c4c0db72d27c/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f73696d706c6564657369676e5f6261726368617274332e706e67\" /><br/><img  src=\"https://camo.githubusercontent.com/65f51783ec05038730b481ed614b57a94e867d86/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f626172636861727432642e706e67\" /><br/><img src=\"https://camo.githubusercontent.com/f66a35bf430b12480d3e2ed8e3bc8d7a17db950f/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d5043686172742f6d61737465722f73637265656e73686f74732f626172636861727433642e706e67\" /><br/><img height=\"300px\" src=\"https://camo.githubusercontent.com/60bd0d71462ad577df775b956944b191e939728a/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d50416e64726f696443686172742f6d61737465722f73637265656e73686f74732f70696563686172745f686f6c657261646975735f73706163652e706e67\" /><br/><img height=\"300px\" src=\"https://camo.githubusercontent.com/6b254aa699df7f9464967009129c3017de721b77/68747470733a2f2f7261772e6769746875622e636f6d2f5068696c4a61792f4d50416e64726f696443686172742f6d61737465722f73637265656e73686f74732f7363617474657263686172742e706e67\" /><br>在线演示：<a href=\"https://www.youtube.com/watch?v=ufaK_Hd6BpI\">https://www.youtube.com/watch?v=ufaK_Hd6BpI</a>  </p>\n</li>\n<li><p>achartengine<br>强大的图表绘制工具，支持折线图、面积图、散点图、时间图、柱状图、条图、饼图、气泡图、圆环图、范围（高至低）条形图、拨号图/表、立方线图及各种图的结合<br>项目地址：<a href=\"https://code.google.com/p/achartengine/\">https://code.google.com/p/achartengine/</a><br>效果图：<img src=\"http://www.achartengine.org/dimages/average_temperature.png\" alt=\"Renderings\"><br><a href=\"http://www.achartengine.org/dimages/sales_line_and_area_chart.png\">http://www.achartengine.org/dimages/sales_line_and_area_chart.png</a><br><a href=\"http://www.achartengine.org/dimages/temperature_range_chart.png\">http://www.achartengine.org/dimages/temperature_range_chart.png</a><br><a href=\"http://www.achartengine.org/dimages/combined_chart.png\">http://www.achartengine.org/dimages/combined_chart.png</a><br><a href=\"http://www.achartengine.org/dimages/budget_chart.png\">http://www.achartengine.org/dimages/budget_chart.png</a><br>官网网址：<a href=\"http://www.achartengine.org/\">http://www.achartengine.org/</a><br>APP示例：Wordpress Android，Google Analytics  </p>\n</li>\n<li><p>GraphView<br>绘制图表和曲线图的View，可用于Android上的曲形图、柱状图、波浪图展示<br>项目地址：<a href=\"https://github.com/jjoe64/GraphView\">https://github.com/jjoe64/GraphView</a><br>Demo项目：<a href=\"https://github.com/jjoe64/GraphView-Demos\">https://github.com/jjoe64/GraphView-Demos</a><br>APP示例：Wordpress Android，Google Analytics  </p>\n</li>\n<li><p>HoloGraphLibrary<br>绘制现状图、柱状图、饼状图<br>项目地址：<a href=\"https://bitbucket.org/danielnadeau/holographlibrary/src\">https://bitbucket.org/danielnadeau/holographlibrary/src</a><br>文档介绍：<a href=\"https://bitbucket.org/danielnadeau/holographlibrary/wiki/Home\">https://bitbucket.org/danielnadeau/holographlibrary/wiki/Home</a>  </p>\n</li>\n<li><p>XCL-Charts<br>XCL-Charts基于原生的Canvas来绘制各种图表,在设计时，尽量在保证开发效率的同时，给使用者提供足够多的定制化能力。因此使用简便,同时具有相当灵活的定制能力。目前支持3D/非3D柱形图(Bar Chart)、3D/非3D饼图(Pie Chart)、堆积图(Stacked Bar Chart)、面积图(Area Chart)、 折线图(Line Chart)、曲线图(Spline Chart)、环形图(Dount Chart)、南丁格尔玫瑰图(Rose Chart)、仪表盘(Dial Chart)、刻度盘(Gauge Chart)、雷达图(Radar Chart)、圆形图(Circle Chart)等图表。其它特性还包括支持图表缩放、手势移动、动画显示效果、高密度柱形显示、图表分界定制线、多图表的混合显示及同数据源不同类型图表切换等。<br>项目地址：<a href=\"https://github.com/xcltapestry/XCL-Charts\">https://github.com/xcltapestry/XCL-Charts</a><br>Demo地址：<a href=\"https://github.com/xcltapestry/XCL-Charts/blob/master/XCL-Charts-demo/bin/XCL-Charts-demo.apk?raw=true\">https://github.com/xcltapestry/XCL-Charts/blob/master/XCL-Charts-demo/bin/XCL-Charts-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>EazeGraph<br>Android 图表库，支持柱状图、分层柱状图、饼状图、线性图<br>项目地址：<a href=\"https://github.com/blackfizz/EazeGraph\">https://github.com/blackfizz/EazeGraph</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=org.eazegraph.app\">https://play.google.com/store/apps/details?id=org.eazegraph.app</a>  </p>\n</li>\n<li><p>WilliamChart<br>绘制图表的库，支持LineChartView、BarChartView和StackBarChartView三中图表类型，并且支持 Android 2.2及以上的系统。<br>项目地址：<a href=\"https://github.com/diogobernardino/WilliamChart\">https://github.com/diogobernardino/WilliamChart</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.db.williamchartdemo\">https://play.google.com/store/apps/details?id=com.db.williamchartdemo</a><br>Demo项目：<a href=\"https://github.com/diogobernardino/WilliamChart/tree/master/sample\">https://github.com/diogobernardino/WilliamChart/tree/master/sample</a><br>效果图：<img src=\"https://github.com/diogobernardino/WilliamChart/raw/master/art/linechart.gif\" alt=\"Renderings\"><img src=\"https://github.com/diogobernardino/WilliamChart/raw/master/art/barchart.gif\" alt=\"Renderings\"><img src=\"https://github.com/diogobernardino/WilliamChart/raw/master/art/stackbarchart.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>HelloCharts for Android<br>支持折线图、柱状图、饼图、气泡图、组合图；支持预览、放大缩小，滚动，部分图表支持动画；支持 Android 2.2 以上<br>项目地址：<a href=\"https://github.com/lecho/hellocharts-android\">https://github.com/lecho/hellocharts-android</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=lecho.lib.hellocharts.samples\">https://play.google.com/store/apps/details?id=lecho.lib.hellocharts.samples</a><br>在线演示：<a href=\"https://www.youtube.com/watch?v=xbSBjyjH2SY\">https://www.youtube.com/watch?v=xbSBjyjH2SY</a>  </p>\n</li>\n</ol>\n<h4 id=\"十五、UI-Style\"><a href=\"#十五、UI-Style\" class=\"headerlink\" title=\"十五、UI Style\"></a>十五、UI Style</h4><p>不同样式的系统UI风格，如IOS、Bootstrap风格</p>\n<ol>\n<li><p>UITableView<br>ios风格控件，包括Button、ListView、TableView<br>项目地址：<a href=\"https://github.com/thiagolocatelli/android-uitableview\">https://github.com/thiagolocatelli/android-uitableview</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/ui-tableview-demo.apk?raw=true\">https://github.com/Trinea/TrineaDownload/blob/master/ui-tableview-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>ATableView<br>ios风格控件<br>项目地址：<a href=\"https://github.com/dmacosta/ATableView\">https://github.com/dmacosta/ATableView</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.nakardo.atableview.demo\">https://play.google.com/store/apps/details?id=com.nakardo.atableview.demo</a>  </p>\n</li>\n<li><p>Cards-UI<br>卡片式View，支持单个卡片，item为卡片的ListView<br>项目地址：<a href=\"https://github.com/afollestad/Cards-UI\">https://github.com/afollestad/Cards-UI</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/cards-ui-demo.apk?raw=true\">https://github.com/Trinea/TrineaDownload/blob/master/cards-ui-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>cardslib<br>卡片式View，支持单个卡片，item为卡片的ListView和GridView<br>项目地址：<a href=\"https://github.com/gabrielemariotti/cardslib\">https://github.com/gabrielemariotti/cardslib</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=it.gmariotti.cardslib.demo\">https://play.google.com/store/apps/details?id=it.gmariotti.cardslib.demo</a>  </p>\n</li>\n<li><p>Android-Bootstrap<br>Bootstrap 风格的按钮<br>项目地址：<a href=\"https://github.com/Bearded-Hen/Android-Bootstrap\">https://github.com/Bearded-Hen/Android-Bootstrap</a><br>效果图：<img src=\"https://raw.github.com/Bearded-Hen/Android-Bootstrap/master/images/device_image.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Material Design Android Library<br>Android L 中 Material Design 风格的组件适配到 Android 2.2+<br>项目地址：<a href=\"https://github.com/navasmdc/MaterialDesignLibrary\">https://github.com/navasmdc/MaterialDesignLibrary</a>  </p>\n</li>\n<li><p>Android FlatUI<br>Android 扁平化风格的组件，支持一些自定义样式<br>项目地址：<a href=\"https://github.com/eluleci/FlatUI\">https://github.com/eluleci/FlatUI</a><br>效果图：<img src=\"https://camo.githubusercontent.com/590d4a2ac322417b71f83223bd58b83903d58343/68747470733a2f2f7261772e6769746875622e636f6d2f656c756c6563692f466c617455492f6d61737465722f73616d706c652d696d616765732f73686f77636173652e706e67\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<h4 id=\"十六、其他\"><a href=\"#十六、其他\" class=\"headerlink\" title=\"十六、其他\"></a>十六、其他</h4><ol>\n<li><p>SwipeBackLayout<br>左右或向上滑动返回的Activity<br>项目地址：<a href=\"https://github.com/Issacw0ng/SwipeBackLayout\">https://github.com/Issacw0ng/SwipeBackLayout</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=me.imid.swipebacklayout.demo\">https://play.google.com/store/apps/details?id=me.imid.swipebacklayout.demo</a><br>APP示例：知乎  </p>\n</li>\n<li><p>android-styled-dialogs<br>可自定义样式的dialog，默认与Holo主题样式一致，在Android2.2以上同一样式<br>项目地址：<a href=\"https://github.com/inmite/android-styled-dialogs\">https://github.com/inmite/android-styled-dialogs</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/styled-dialogs-demo.apk?raw=true\">https://github.com/Trinea/TrineaDownload/blob/master/styled-dialogs-demo.apk?raw=true</a>  </p>\n</li>\n<li><p>Android Sliding Up Panel<br>可拖动的View，能在当前Activity上扶起一个可拖动的Panel<br>项目地址：<a href=\"https://github.com/umano/AndroidSlidingUpPanel\">https://github.com/umano/AndroidSlidingUpPanel</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.sothree.umano\">https://play.google.com/store/apps/details?id=com.sothree.umano</a><br>APP示例：Google Music精简播放栏  </p>\n</li>\n<li><p>AndroidWheel<br>Android Wheel支持城市、多种日期时间、密码、图片<br>项目地址：<a href=\"https://code.google.com/p/android-wheel/\">https://code.google.com/p/android-wheel/</a><br>效果图：<img src=\"http://farm6.staticflickr.com/5532/11621528786_220c040ba5_o.jpg\" alt=\"Renderings\">  </p>\n</li>\n<li><p>TableFixHeaders<br>第一列固定的Table<br>项目地址：<a href=\"https://github.com/InQBarna/TableFixHeaders\">https://github.com/InQBarna/TableFixHeaders</a><br>Demo地址：<a href=\"http://bit.ly/13buAIq\">http://bit.ly/13buAIq</a>  </p>\n</li>\n<li><p>Inscription<br>可用于展示应用change和new feature信息<br>项目地址：<a href=\"https://github.com/MartinvanZ/Inscription\">https://github.com/MartinvanZ/Inscription</a>  </p>\n</li>\n<li><p>ActivityTransition<br>Activity切换动画，包括渐变、flip、某个位置进入等等<br>项目地址：<a href=\"https://github.com/ophilbert/ActivityTransition\">https://github.com/ophilbert/ActivityTransition</a><br>效果图：类似桌面左右切换的各种效果，不过桌面并非用ViewPager实现而已<br>文档介绍：<a href=\"https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true\">https://github.com/jfeinstein10/JazzyViewPager/blob/master/JazzyViewPager.apk?raw=true</a>  </p>\n</li>\n<li><p>EasyAndroidAnimations<br>针对View的各种动画<br>项目地址：<a href=\"https://github.com/2359media/EasyAndroidAnimations\">https://github.com/2359media/EasyAndroidAnimations</a>  </p>\n</li>\n<li><p>GlowPadBackport<br>将Android4.2的锁屏界面解锁扩展到Android1.6及1.6+<br>项目地址：<a href=\"https://github.com/rock3r/GlowPadBackport\">https://github.com/rock3r/GlowPadBackport</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=net.sebastianopoggi.samples.ui.GlowPadSample\">https://play.google.com/store/apps/details?id=net.sebastianopoggi.samples.ui.GlowPadSample</a><br>效果图：<img src=\"https://lh6.ggpht.com/U070b6Lh6cVsVwx4jN-5nq0xqiB1PBzrYABPeJIEe2hZQ5UWOxc-FDUG77wADelToHA=h310-rw\" alt=\"Renderings\">  </p>\n</li>\n<li><p>GlowPadView<br>Android4锁屏界面解锁<br>项目地址：<a href=\"https://github.com/nadavfima/GlowPadView\">https://github.com/nadavfima/GlowPadView</a><br>效果图：<a href=\"https://raw.github.com/nadavfima/GlowPadView/master/example.png\">https://raw.github.com/nadavfima/GlowPadView/master/example.png</a>  </p>\n</li>\n<li><p>android-lockpattern<br>Android的图案密码解锁<br>项目地址：<a href=\"https://code.google.com/p/android-lockpattern/\">https://code.google.com/p/android-lockpattern/</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=group.pals.android.lib.ui.lockpattern.demo\">https://play.google.com/store/apps/details?id=group.pals.android.lib.ui.lockpattern.demo</a><br>文档介绍：<a href=\"https://code.google.com/p/android-lockpattern/wiki/QuickUse\">https://code.google.com/p/android-lockpattern/wiki/QuickUse</a><br>APP示例：Android开机的图案密码解锁，支付宝的密码解锁  </p>\n</li>\n<li><p>PatternLock<br>另一个 Android 图案解锁库<br>项目地址：<a href=\"https://github.com/DreaminginCodeZH/PatternLock\">https://github.com/DreaminginCodeZH/PatternLock</a><br>Demo 地址：<a href=\"https://github.com/DreaminginCodeZH/PatternLock/raw/master/dist/sample.apk\">https://github.com/DreaminginCodeZH/PatternLock/raw/master/dist/sample.apk</a><br>效果图：<img src=\"https://github.com/DreaminginCodeZH/PatternLock/raw/master/image/sample_small.png\" alt=\"Renderings\"><br>APP示例：Android开机的图案密码解锁，支付宝的密码解锁  </p>\n</li>\n<li><p>RangeBar<br>类似于SeekBar，不同的是可以选择一个范围内的值而不是单个值<br>项目地址：<a href=\"https://github.com/edmodo/range-bar\">https://github.com/edmodo/range-bar</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/range-bar-demo.apk?raw=true\">https://github.com/Trinea/TrineaDownload/blob/master/range-bar-demo.apk?raw=true</a><br>效果图：<img src=\"http://i.imgur.com/q85GhRjl.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>ChromeView<br>利用Chromium实现的WebView，解决各个Android版本WebView不同的问题，同时利用最新Chrome代码<br>项目地址：<a href=\"https://github.com/pwnall/chromeview\">https://github.com/pwnall/chromeview</a>  </p>\n</li>\n<li><p>android-phased-seek-bar<br>支持预先定义状态的SeekBar<br>项目地址：<a href=\"https://github.com/ademar111190/android-phased-seek-bar\">https://github.com/ademar111190/android-phased-seek-bar</a><br>效果图：<img src=\"https://raw.githubusercontent.com/ademar111190/android-phased-seek-bar/master/images/sample.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android Slider Preference Library<br>可添加到设置中的基于对话框的RankBar小部件<br>项目地址：<a href=\"https://github.com/jayschwa/AndroidSliderPreference\">https://github.com/jayschwa/AndroidSliderPreference</a>  </p>\n</li>\n<li><p>ShowcaseView library<br>用于高亮显示应用程序的特定部分，从而突出突出重点<br>项目地址：<a href=\"https://github.com/amlcurran/ShowcaseView\">https://github.com/amlcurran/ShowcaseView</a>  </p>\n</li>\n<li><p>android-segmented-control<br>Android上的Segmented Controls，相当于RadioButton组<br>项目地址：<a href=\"https://github.com/hoang8f/android-segmented-control\">https://github.com/hoang8f/android-segmented-control</a>  </p>\n</li>\n<li><p>Swipeable Cards<br>类似Tinder的卡片效果，可以加载图片并动画效果展示，向左滑动表示喜欢，向右表示不喜欢<br>项目地址：<a href=\"https://github.com/kikoso/Swipeable-Cards\">https://github.com/kikoso/Swipeable-Cards</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo\">https://play.google.com/store/apps/details?id=info.hoang8f.fbutton.demo</a>  </p>\n</li>\n<li><p>EdgeEffectOverride<br>改变ScrollView, ListView, ExpandableListView, GridView, ViewPager等滚动控件滚动到边缘的颜色效果<br>项目地址：<a href=\"https://github.com/AndroidAlliance/EdgeEffectOverride\">https://github.com/AndroidAlliance/EdgeEffectOverride</a>  </p>\n</li>\n<li><p>android-pinned-header-listviews<br>使ExpandListView的Group滑动到顶端时会固定不动直到另外一个Group到达顶端<br>项目地址：<a href=\"https://github.com/rtyley/android-pinned-header-listviews\">https://github.com/rtyley/android-pinned-header-listviews</a>  </p>\n</li>\n<li><p>AndroidSwipeLayout<br>滑动Layout，支持单个View，ListView，GridView<br>项目地址：<a href=\"https://github.com/daimajia/AndroidSwipeLayout\">https://github.com/daimajia/AndroidSwipeLayout</a><br>Demo地址：<a href=\"https://github.com/daimajia/AndroidSwipeLayout/releases/download/v1.0.0/AndroidSwipeLayout-Demo-1.0.1-snapshot.apk\">Download Demo</a><br>效果图：<img src=\"http://ww2.sinaimg.cn/mw690/610dc034jw1ejoplapwtqg208n0e74dx.gif\" alt=\"\">  </p>\n</li>\n<li><p>DynamicCardLayout<br>在Android中实现的类似Windows8的瓷片布局<br>项目地址：<a href=\"https://github.com/dodola/DynamicCardLayout\">https://github.com/dodola/DynamicCardLayout</a><br>效果图：<img src=\"https://github.com/dodola/DynamicCardLayout/blob/master/pic1.png?raw=true\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Emoticons-Keyboard<br>带表情情符号的自定义键盘<br>项目地址：<a href=\"https://github.com/chiragjain/Emoticons-Keyboard\">https://github.com/chiragjain/Emoticons-Keyboard</a><br>效果图：<img src=\"https://github.com/chiragjain/Emoticons-Keyboard/raw/master/s2.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android Typeface Helper<br>可以帮你轻松实现自定义字体的库<br>项目地址：<a href=\"https://github.com/norbsoft/android-typeface-helper\">https://github.com/norbsoft/android-typeface-helper</a><br>效果图：<img src=\"https://camo.githubusercontent.com/b8e7d4f4ab84ff96a3919ea264e2a83aca46e04e/68747470733a2f2f7261772e6769746875622e636f6d2f6e6f7262736f66742f616e64726f69642d74797065666163652d68656c7065722f6d61737465722f726561646d655f73637265656e2e706e67\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Android-Anim-Playground<br>几个动画效果，其中第二个基于android-svg的绘制效果非常好<br>项目地址：<a href=\"https://github.com/Tibolte/Android-Anim-Playground\">https://github.com/Tibolte/Android-Anim-Playground</a><br>效果图：<img src=\"https://raw.githubusercontent.com/Tibolte/Android-Anim-Playground/master/androiddemosvg.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>NiftyDialogEffects<br>支持自定义飞入动画样式的 Dialog<br>项目地址：<a href=\"https://github.com/sd6352051/NiftyDialogEffects\">https://github.com/sd6352051/NiftyDialogEffects</a><br>效果图：<img src=\"https://camo.githubusercontent.com/456687ac516bb07f1076928d635bfddf6b90d5ec/687474703a2f2f696d67302e70682e3132362e6e65742f69433436653162586b55316631724966555a6f3939773d3d2f363539373632303632313938343031393430382e676966\" alt=\"Renderings\"><br>在线演示：<a href=\"http://tympanus.net/Development/ModalWindowEffects/\">http://tympanus.net/Development/ModalWindowEffects/</a>  </p>\n</li>\n<li><p>PostOffice<br>创建 Holo 及 Material Design 样式的 Dialog<br>项目地址：<a href=\"https://github.com/r0adkll/PostOffice\">https://github.com/r0adkll/PostOffice</a><br>效果图：<img src=\"https://github.com/r0adkll/PostOffice/raw/master/images/po_2.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>Swipecards<br>类似Tinder的卡片效果，可以加载图片并动画效果展示，向左滑动表示喜欢，向右表示不喜欢，根据 Kikoso’s Swipeable-Cards 改造而来<br>项目地址：<a href=\"https://github.com/Diolor/Swipecards\">https://github.com/Diolor/Swipecards</a>  </p>\n</li>\n<li><p>SeekArc<br>圆形的 SeekBar<br>项目地址：<a href=\"https://github.com/TriggerTrap/SeekArc\">https://github.com/TriggerTrap/SeekArc</a><br>效果图：<img src=\"https://camo.githubusercontent.com/6a5091cb39a50d4c49b8d2f08684cb260db55aa7/68747470733a2f2f7261772e6769746875622e636f6d2f6e65696c643030312f5365656b4172632f6d61737465722f7261772f6172635f7377656570732e706e67\" alt=\"Renderings\">  </p>\n</li>\n<li><p>BlurDialogFragment<br>显示  DialogFragment 时背景模糊效果<br>项目地址：<a href=\"https://github.com/tvbarthel/BlurDialogFragment\">https://github.com/tvbarthel/BlurDialogFragment</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=fr.tvbarthel.lib.blurdialogfragment.sample\">https://play.google.com/store/apps/details?id=fr.tvbarthel.lib.blurdialogfragment.sample</a>  </p>\n</li>\n<li><p>range-seek-bar<br>随机值选取的 SeekBar<br>项目地址：<a href=\"https://github.com/yahoo/android-range-seek-bar\">https://github.com/yahoo/android-range-seek-bar</a><br>效果图：<img src=\"https://github.com/yahoo/android-range-seek-bar/raw/master/demo_screenshot.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>MaterialRangeBar<br>可以选择一个范围内的值而不是单个值的 SeekBar，RangeBar 的 Material Design 风格适配<br>项目地址：<a href=\"https://github.com/oli107/material-range-bar\">https://github.com/oli107/material-range-bar</a><br>效果图：<img src=\"https://github.com/oli107/material-range-bar/raw/master/Screenshots/pin%20expand.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>MaterialList<br>Material Design 风格的 CardView<br>项目地址：<a href=\"https://github.com/dexafree/MaterialList\">https://github.com/dexafree/MaterialList</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.dexafree.materiallistviewexample\">https://play.google.com/store/apps/details?id=com.dexafree.materiallistviewexample</a><br>效果图：<img src=\"https://camo.githubusercontent.com/b71bb064807465b7c9132d7f6072e2064f01fb85/687474703a2f2f692e696d6775722e636f6d2f454e78554741772e706e67\" alt=\"Renderings\">  </p>\n</li>\n<li><p>road-trip<br>设置path的各种动画效果，以及如何实现复杂路径动画，类似于ios中的指纹注册界面的指纹动画效果<br>项目地址：<a href=\"https://github.com/romainguy/road-trip\">https://github.com/romainguy/road-trip</a><br>效果图：<img src=\"https://github.com/zhangxin1989/RoadTrip/raw/master/screenshot/Road-Trip-200.gif\" alt=\"Renderings\">  </p>\n</li>\n<li><p>dialogplus<br>一个简单的Android对话框，支持不同的弹出模式<br>项目地址：<a href=\"https://github.com/orhanobut/dialogplus\">https://github.com/orhanobut/dialogplus</a><br>效果图：<img src=\"https://github.com/orhanobut/dialogplus/blob/master/images/d1.png\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<h2 id=\"第二部分-工具库\"><a href=\"#第二部分-工具库\" class=\"headerlink\" title=\"第二部分 工具库\"></a>第二部分 工具库</h2><p>主要包括那些不错的开发库，包括依赖注入框架、图片缓存、网络相关、数据库ORM建模、Android公共库、Android 高版本向低版本兼容、多媒体相关及其他。    </p>\n<h4 id=\"一、依赖注入DI\"><a href=\"#一、依赖注入DI\" class=\"headerlink\" title=\"一、依赖注入DI\"></a>一、依赖注入DI</h4><p>通过依赖注入减少View、服务、资源简化初始化，事件绑定等重复繁琐工作  </p>\n<ol>\n<li><p>AndroidAnnotations(Code Diet)<br>android快速开发框架<br>项目地址：<a href=\"https://github.com/excilys/androidannotations\">https://github.com/excilys/androidannotations</a><br>文档介绍：<a href=\"https://github.com/excilys/androidannotations/wiki\">https://github.com/excilys/androidannotations/wiki</a><br>官网网址：<a href=\"http://androidannotations.org/\">http://androidannotations.org/</a><br>特点：(1) 依赖注入：包括view，extras，系统服务，资源等等<br>(2) 简单的线程模型，通过annotation表示方法运行在ui线程还是后台线程<br>(3) 事件绑定：通过annotation表示view的响应事件，不用在写内部类<br>(4) REST客户端：定义客户端接口，自动生成REST请求的实现<br>(5) 没有你想象的复杂：AndroidAnnotations只是在在编译时生成相应子类<br>(6) 不影响应用性能：仅50kb，在编译时完成，不会对运行时有性能影响。<br>PS：与roboguice的比较：roboguice通过运行时读取annotations进行反射，所以可能影响应用性能，而AndroidAnnotations在编译时生成子类，所以对性能没有影响  </p>\n</li>\n<li><p>roboguice<br>帮你处理了很多代码异常，利用annotation使得更少的代码完成项目<br>项目地址：<a href=\"https://github.com/roboguice/roboguice\">https://github.com/roboguice/roboguice</a><br>文档介绍：<a href=\"https://github.com/roboguice/roboguice/wiki\">https://github.com/roboguice/roboguice/wiki</a>  </p>\n</li>\n<li><p>butterknife<br>利用annotation帮你快速完成View的初始化，减少代码<br>项目地址：<a href=\"https://github.com/JakeWharton/butterknife\">https://github.com/JakeWharton/butterknife</a><br>文档介绍：<a href=\"http://jakewharton.github.io/butterknife/\">http://jakewharton.github.io/butterknife/</a>  </p>\n</li>\n<li><p>Dagger<br>依赖注入，适用于Android和Java<br>项目地址：<a href=\"https://github.com/square/dagger\">https://github.com/square/dagger</a><br>文档介绍：<a href=\"http://square.github.io/dagger/\">http://square.github.io/dagger/</a>  </p>\n</li>\n</ol>\n<h4 id=\"二、图片缓存\"><a href=\"#二、图片缓存\" class=\"headerlink\" title=\"二、图片缓存\"></a>二、图片缓存</h4><ol>\n<li><p>Android-Universal-Image-Loader<br>图片缓存，目前使用最广泛的图片缓存，支持主流图片缓存的绝大多数特性。<br>项目地址：<a href=\"https://github.com/nostra13/Android-Universal-Image-Loader\">https://github.com/nostra13/Android-Universal-Image-Loader</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/universal-imageloader-demo.apk?raw=true\">https://github.com/Trinea/TrineaDownload/blob/master/universal-imageloader-demo.apk?raw=true</a><br>文档介绍：<a href=\"http://www.intexsoft.com/blog/item/74-universal-image-loader-part-3.html\">http://www.intexsoft.com/blog/item/74-universal-image-loader-part-3.html</a>  </p>\n</li>\n<li><p>picasso<br>square开源的图片缓存<br>项目地址：<a href=\"https://github.com/square/picasso\">https://github.com/square/picasso</a><br>文档介绍：<a href=\"http://square.github.io/picasso/\">http://square.github.io/picasso/</a><br>特点：(1)可以自动检测adapter的重用并取消之前的下载<br>(2)图片变换<br>(3)可以加载本地资源<br>(4)可以设置占位资源<br>(5)支持debug模式  </p>\n</li>\n<li><p>ImageCache<br>图片缓存，包含内存和Sdcard缓存<br>项目地址：<a href=\"https://github.com/Trinea/AndroidCommon\">https://github.com/Trinea/AndroidCommon</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=cn.trinea.android.demo\">https://play.google.com/store/apps/details?id=cn.trinea.android.demo</a><br>文档介绍：<a href=\"http://www.trinea.cn/android/android-imagecache/\">http://www.trinea.cn/android/android-imagecache/</a><br>特点：(1)支持预取新图片，支持等待队列<br>(2)包含二级缓存，可自定义文件名保存规则<br>(3)可选择多种缓存算法(FIFO、LIFO、LRU、MRU、LFU、MFU等13种)或自定义缓存算法<br>(4)可方便的保存及初始化恢复数据<br>(5)支持不同类型网络处理<br>(6)可根据系统配置初始化缓存等  </p>\n</li>\n<li><p>Cube ImageLoader<br>阿里巴巴一淘使用的图片加载，综合了Android-Universal-Image-Loader 和 square 等组件优点，简单易用，良好的中文文档支持<br>项目地址：<a href=\"https://github.com/etao-open-source/cube-sdk\">https://github.com/etao-open-source/cube-sdk</a><br>Demo地址：<a href=\"https://github.com/liaohuqiu/cube-sdk/raw/master/cube-sdk-sample.apk\">https://github.com/liaohuqiu/cube-sdk/raw/master/cube-sdk-sample.apk</a><br>效果图：<img src=\"https://raw.githubusercontent.com/etao-open-source/cube-sdk/dev/screen-shot.png\" alt=\"Screen Shot\"><br>文档介绍：<a href=\"http://cube-sdk.liaohuqiu.net/\">http://cube-sdk.liaohuqiu.net/</a>  </p>\n</li>\n<li><p>fresco<br>一款强大的图片缓存工具，由facebook开发<br>项目地址：<a href=\"https://github.com/facebook/fresco\">https://github.com/facebook/fresco</a><br>文档介绍：<a href=\"http://frescolib.org/\">http://frescolib.org/</a><br>特点：(1) 两个内存缓存加上磁盘缓存构成了三级缓存<br>(2) 支持流式，可以类似网页上模糊渐进式显示图片<br>(3) 对多帧动画图片支持更好，如 Gif、WebP<br>(4) 更多样的显示，如圆角、进度条、点击重试、自定义对焦点<br>(5) 更多样的加载，如支持 EXIF、全面支持 WebP<br>(6) 支持 Android 2.3+ </p>\n</li>\n</ol>\n<h4 id=\"三、网络相关\"><a href=\"#三、网络相关\" class=\"headerlink\" title=\"三、网络相关\"></a>三、网络相关</h4><ol>\n<li><p>Asynchronous Http Client for Android<br>Android异步Http请求<br>项目地址：<a href=\"https://github.com/loopj/android-async-http\">https://github.com/loopj/android-async-http</a><br>文档介绍：<a href=\"http://loopj.com/android-async-http/\">http://loopj.com/android-async-http/</a><br>特点：(1) 在匿名回调中处理请求结果<br>(2) 在UI线程外进行http请求<br>(3) 文件断点上传<br>(4) 智能重试<br>(5) 默认gzip压缩<br>(6) 支持解析成Json格式<br>(7) 可将Cookies持久化到SharedPreferences  </p>\n</li>\n<li><p>android-query<br>异步加载，更少代码完成Android加载<br>项目地址：<a href=\"https://github.com/androidquery/androidquery\">https://github.com/androidquery/androidquery</a> 或 <a href=\"https://code.google.com/p/android-query/\">https://code.google.com/p/android-query/</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.androidquery\">https://play.google.com/store/apps/details?id=com.androidquery</a><br>文档介绍：<a href=\"https://code.google.com/p/android-query/#Why_AQuery?\">https://code.google.com/p/android-query/#Why_AQuery?</a><br>特点：<a href=\"https://code.google.com/p/android-query/#Why_AQuery?\">https://code.google.com/p/android-query/#Why_AQuery?</a>  </p>\n</li>\n<li><p>Async Http Client<br>Java异步Http请求<br>项目地址：<a href=\"https://github.com/AsyncHttpClient/async-http-client\">https://github.com/AsyncHttpClient/async-http-client</a><br>文档介绍：<a href=\"http://sonatype.github.io/async-http-client/\">http://sonatype.github.io/async-http-client/</a>  </p>\n</li>\n<li><p>Ion<br>支持图片、json、http post等异步请求<br>项目地址：<a href=\"https://github.com/koush/ion\">https://github.com/koush/ion</a><br>文档介绍：<a href=\"https://github.com/koush/ion#more-examples\">https://github.com/koush/ion#more-examples</a>  </p>\n</li>\n<li><p>HttpCache<br>Http缓存<br>项目地址：<a href=\"https://github.com/Trinea/AndroidCommon\">https://github.com/Trinea/AndroidCommon</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=cn.trinea.android.demo\">https://play.google.com/store/apps/details?id=cn.trinea.android.demo</a><br>文档介绍：<a href=\"http://www.trinea.cn/android/android-http-cache\">http://www.trinea.cn/android/android-http-cache</a><br>特点是：(1) 根据cache-control、expires缓存http请求<br>(2) 支持同步、异步Http请求<br>(3) 在匿名回调中处理请求结果<br>(4) 在UI线程外进行http请求<br>(5) 默认gzip压缩  </p>\n</li>\n<li><p>Http Request<br>项目地址：<a href=\"https://github.com/kevinsawicki/http-request\">https://github.com/kevinsawicki/http-request</a><br>文档介绍：<a href=\"https://github.com/kevinsawicki/http-request#examples\">https://github.com/kevinsawicki/http-request#examples</a>  </p>\n</li>\n<li><p>okhttp<br>square开源的http工具类<br>项目地址：<a href=\"https://github.com/square/okhttp\">https://github.com/square/okhttp</a><br>文档介绍：<a href=\"http://square.github.io/okhttp/\">http://square.github.io/okhttp/</a><br>特点：(1) 支持SPDY( <a href=\"http://zh.wikipedia.org/wiki/SPDY\">http://zh.wikipedia.org/wiki/SPDY</a> )协议。SPDY协议是Google开发的基于传输控制协议的应用层协议，通过压缩，多路复用(一个TCP链接传送网页和图片等资源)和优先级来缩短加载时间。<br>(2) 如果SPDY不可用，利用连接池减少请求延迟<br>(3) Gzip压缩<br>(4) Response缓存减少不必要的请求  </p>\n</li>\n<li><p>Retrofit<br>RESTFUL API设计<br>项目地址：<a href=\"https://github.com/square/retrofit\">https://github.com/square/retrofit</a><br>文档介绍：<a href=\"http://square.github.io/retrofit/\">http://square.github.io/retrofit/</a>  </p>\n</li>\n<li><p>RoboSpice<br>Android异步网络请求工具，支持缓存、REST等等<br>项目地址：<a href=\"https://github.com/stephanenicolas/robospice\">https://github.com/stephanenicolas/robospice</a><br>Demo地址：<a href=\"https://github.com/stephanenicolas/RoboDemo/downloads\">https://github.com/stephanenicolas/RoboDemo/downloads</a>  </p>\n</li>\n</ol>\n<h4 id=\"四、数据库-orm工具包\"><a href=\"#四、数据库-orm工具包\" class=\"headerlink\" title=\"四、数据库 orm工具包\"></a>四、数据库 orm工具包</h4><p>orm的db工具类，简化建表、查询、更新、插入、事务、索引的操作  </p>\n<ol>\n<li><p>greenDAO<br>Android Sqlite orm的db工具类<br>项目地址：<a href=\"https://github.com/greenrobot/greenDAO\">https://github.com/greenrobot/greenDAO</a><br>文档介绍：<a href=\"http://greendao-orm.com/documentation/\">http://greendao-orm.com/documentation/</a><br>官网网址：<a href=\"http://greendao-orm.com/\">http://greendao-orm.com/</a><br>特点：(1) 性能佳<br>(2) 简单易用的API<br>(3) 内存小好小<br>(4) 库大小小  </p>\n</li>\n<li><p>ActiveAndroid<br>Android Sqlite orm的db工具类<br>项目地址：<a href=\"https://github.com/pardom/ActiveAndroid\">https://github.com/pardom/ActiveAndroid</a><br>文档介绍：<a href=\"https://github.com/pardom/ActiveAndroid/wiki/_pages\">https://github.com/pardom/ActiveAndroid/wiki/_pages</a>  </p>\n</li>\n<li><p>Sprinkles<br>Android Sqlite orm的db工具类，比较显著的特点就是配合 <a href=\"https://github.com/square/retrofit\">https://github.com/square/retrofit</a> 能保存从服务器获取的数据<br>项目地址：<a href=\"https://github.com/emilsjolander/sprinkles\">https://github.com/emilsjolander/sprinkles</a><br>文档介绍：<a href=\"http://emilsjolander.github.io/blog/2013/12/18/android-with-sprinkles/\">http://emilsjolander.github.io/blog/2013/12/18/android-with-sprinkles/</a>  </p>\n</li>\n<li><p>Realm<br>移动端的数据库，适用于 Phone、Tablet、Wearable，支持 ORM，线程安全、支持连表及数据库加密，比 SQLite 性能更好<br>项目地址：<a href=\"https://github.com/realm/realm-java\">https://github.com/realm/realm-java</a><br>文档介绍：<a href=\"http://realm.io/docs/java/0.72.0/\">http://realm.io/docs/java/0.72.0/</a>  </p>\n</li>\n<li><p>ormlite-android<br>项目地址：<a href=\"https://github.com/j256/ormlite-android\">https://github.com/j256/ormlite-android</a><br>文档介绍：<a href=\"http://ormlite.com/sqlite_java_android_orm.shtml\">http://ormlite.com/sqlite_java_android_orm.shtml</a>  </p>\n</li>\n<li><p>Schematic<br>根据SQLite生成ContentProvider<br>项目地址：<a href=\"https://github.com/SimonVT/schematic\">https://github.com/SimonVT/schematic</a>  </p>\n</li>\n<li><p>DBFlow<br>Android SQLite ORM工具库。综合了 Active Android, Schematic, Ollie,Sprinkles等库的优点；通过注解实现，性能好；能生成ContentProvider。<br>项目地址：<a href=\"https://github.com/Raizlabs/DBFlow\">https://github.com/Raizlabs/DBFlow</a><br>文档介绍：<a href=\"https://github.com/Raizlabs/DBFlow#usage-docs\">https://github.com/Raizlabs/DBFlow#usage-docs</a>    </p>\n</li>\n</ol>\n<h4 id=\"五、Android公共库\"><a href=\"#五、Android公共库\" class=\"headerlink\" title=\"五、Android公共库\"></a>五、Android公共库</h4><ol>\n<li><p>Guava<br>Google的基于java1.6的类库集合的扩展项目，包括collections, caching, primitives support, concurrency libraries, common annotations, string processing, I/O等等. 这些高质量的API可以使你的JAVa代码更加优雅，更加简洁<br>项目地址：<a href=\"https://code.google.com/p/guava-libraries/\">https://code.google.com/p/guava-libraries/</a><br>文档介绍：<a href=\"https://code.google.com/p/guava-libraries/wiki/GuavaExplained\">https://code.google.com/p/guava-libraries/wiki/GuavaExplained</a>  </p>\n</li>\n<li><p>Volley<br>Google提供的网络通信库，使得网络请求更简单、更快速<br>项目地址：<a href=\"https://android.googlesource.com/platform/frameworks/volley\">https://android.googlesource.com/platform/frameworks/volley</a><br>文档介绍：<a href=\"http://commondatastorage.googleapis.com/io-2013/presentations/110%20-%20Volley-%20Easy,%20Fast%20Networking%20for%20Android.pdf\">http://commondatastorage.googleapis.com/io-2013/presentations/110%20-%20Volley-%20Easy,%20Fast%20Networking%20for%20Android.pdf</a>  </p>\n</li>\n<li><p>AndroidCommon<br>Android公共库<br>项目地址：<a href=\"https://github.com/Trinea/AndroidCommon\">https://github.com/Trinea/AndroidCommon</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=cn.trinea.android.demo\">https://play.google.com/store/apps/details?id=cn.trinea.android.demo</a><br>文档介绍：<a href=\"http://www.trinea.cn/android/android-common-lib/\">http://www.trinea.cn/android/android-common-lib/</a><br>包括：(1)缓存(图片缓存、预取缓存、网络缓存)<br>(2) 公共View(下拉及底部加载更多ListView、底部加载更多ScrollView、滑动一页Gallery)<br>(3) Android常用工具类(网络、下载、Android资源操作、shell、文件、Json、随机数、Collection等等)  </p>\n</li>\n<li><p>shipfaster<br>整合了Dagger Otto Retrofit Robolectric Picasso OkHttp，方便快速开发<br>项目地址：<a href=\"https://github.com/pyricau/shipfaster\">https://github.com/pyricau/shipfaster</a>  </p>\n</li>\n<li><p>CleanAndroidCode<br>整合了Dagger Otto AndroidAnnotations，方便快速开发<br>项目地址：<a href=\"https://github.com/pyricau/CleanAndroidCode\">https://github.com/pyricau/CleanAndroidCode</a>  </p>\n</li>\n<li><p>xUtils<br>基于Afinal，包含DbUtils、ViewUtils、HttpUtils、BitmapUtils四大模块，可用于快速开发<br>项目地址：<a href=\"https://github.com/wyouflf/xUtils\">https://github.com/wyouflf/xUtils</a>  </p>\n</li>\n<li><p>Afinal<br>Afinal是一个android的ioc，orm框架，内置了四大模块功能：FinalAcitivity,FinalBitmap,FinalDb,FinalHttp。通过finalActivity，我们可以通过注解的方式进行绑定ui和事件。通过finalBitmap，我们可以方便的加载bitmap图片，而无需考虑oom等问题。通过finalDB模块，我们一行代码就可以对android的sqlite数据库进行增删改查。通过FinalHttp模块，我们可以以ajax形式请求http数据<br>项目地址：<a href=\"https://github.com/yangfuhai/afinal\">https://github.com/yangfuhai/afinal</a><br>官网网址：<a href=\"http://www.afinal.org\">http://www.afinal.org</a>  </p>\n</li>\n<li><p>UltimateAndroid<br>UltimateAndroid是一个快速开发Android应用的框架，框架目前主要包含的功能有View Injection,ORM,异步网络请求和图片加载，自动化脚本测试,磁盘LRU等功能.同时提供了类似于TripleDes、Webview快速设置、Md5处理、String处理,Https处理等常用工具类，还有超过100多种UI控件效果。<br>项目地址：<a href=\"https://github.com/cymcsg/UltimateAndroid\">https://github.com/cymcsg/UltimateAndroid</a><br>官网网址：<a href=\"http://blog.marshalchen.com/UltimateAndroid/\">http://blog.marshalchen.com/UltimateAndroid/</a>  </p>\n</li>\n</ol>\n<ol>\n<li><p>SAF<br>SAF(Simple Android Framework)是一个简单的android框架，它为开发Android app提供了基础性组件。<br>项目地址：<a href=\"https://github.com/fengzhizi715/SAF\">https://github.com/fengzhizi715/SAF</a><br>官网网址：<a href=\"http://www.salesuite.cn/\">http://www.salesuite.cn/</a><br>包括：(1)Event Bus(事件总线)<br>(2) Rest Client(http的框架)<br>(3) Image Cache(图片缓存)<br>(4) Dependency Injection(依赖注入)<br>(5) Sqlite ORM(sqlite的orm)<br>(6) Router(Activity、Fragment的Router)<br>(7) Utils(各种常用的工具类) </p>\n</li>\n<li><p>Barber<br>Custom View 神器。通过简单的注解帮助你大大减少 Custom View 中的代码量。由于和 ButterKnife 一样使用了 Annotation Proccessor ，所以对程序性能没有影响。<br>项目地址：<a href=\"https://github.com/hzsweers/barber\">https://github.com/hzsweers/barber</a></p>\n</li>\n<li><p>device-year-class<br>A library that analyzes an Android device’s specifications and calculates which year the device would be considered “high end”.(facebook开发的检测手机主流配置工具)<br>项目地址：<a href=\"https://github.com/facebook/device-year-class\">https://github.com/facebook/device-year-class</a>  </p>\n</li>\n</ol>\n<h4 id=\"六、Android-高版本向低版本兼容\"><a href=\"#六、Android-高版本向低版本兼容\" class=\"headerlink\" title=\"六、Android 高版本向低版本兼容\"></a>六、Android 高版本向低版本兼容</h4><ol>\n<li><p>ActionBarSherlock<br>为Android所有版本提供统一的ActionBar，解决4.0以下ActionBar的适配问题<br>项目地址：<a href=\"https://github.com/JakeWharton/ActionBarSherlock\">https://github.com/JakeWharton/ActionBarSherlock</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos\">https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos</a><br>APP示例：太多了。。现在连google都在用  </p>\n</li>\n<li><p>Nine Old Androids<br>将Android 3.0(Honeycomb)所有动画API(ObjectAnimator ValueAnimator等)兼容到Android1.0<br>项目地址：<a href=\"https://github.com/JakeWharton/NineOldAndroids\">https://github.com/JakeWharton/NineOldAndroids</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.jakewharton.nineoldandroids.sample\">https://play.google.com/store/apps/details?id=com.jakewharton.nineoldandroids.sample</a><br>文档介绍：<a href=\"http://nineoldandroids.com/\">http://nineoldandroids.com/</a>  </p>\n</li>\n<li><p>HoloEverywhere<br>将Android 3.0的Holo主题兼容到Android2.1++<br>项目地址：<a href=\"https://github.com/Prototik/HoloEverywhere\">https://github.com/Prototik/HoloEverywhere</a><br>Demo地址：<a href=\"https://raw.github.com/Prototik/HoloEverywhere/repo/org/holoeverywhere/demo/2.1.0/demo-2.1.0.apk\">https://raw.github.com/Prototik/HoloEverywhere/repo/org/holoeverywhere/demo/2.1.0/demo-2.1.0.apk</a><br>文档介绍：<a href=\"http://android-developers.blogspot.com/2012/01/holo-everywhere.html\">http://android-developers.blogspot.com/2012/01/holo-everywhere.html</a>  </p>\n</li>\n<li><p>SherlockNavigationDrawer<br>将Android NavigationDrawer和ActionbarSherlock结合，解决4.0以下NavigationDrawer的适配问题<br>项目地址：<a href=\"https://github.com/tobykurien/SherlockNavigationDrawer\">https://github.com/tobykurien/SherlockNavigationDrawer</a><br>文档介绍：<a href=\"http://developer.android.com/training/implementing-navigation/nav-drawer.html\">http://developer.android.com/training/implementing-navigation/nav-drawer.html</a>  </p>\n</li>\n<li><p>Notifications4EveryWhere<br>将Android 4.1的Notification兼容到Android2.2++<br>项目地址：<a href=\"https://github.com/youxiachai/Notifications4EveryWhere\">https://github.com/youxiachai/Notifications4EveryWhere</a>  </p>\n</li>\n<li><p>Android Switch Widget Backport<br>将Android Switch和SwitchPreference的兼容到Android2.1++<br>项目地址：<a href=\"https://github.com/BoD/android-switch-backport\">https://github.com/BoD/android-switch-backport</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=org.jraf.android.backport.switchwidget.sample\">https://play.google.com/store/apps/details?id=org.jraf.android.backport.switchwidget.sample</a><br>文档介绍：<a href=\"https://github.com/BoD/android-switch-backport#using-the-switch\">https://github.com/BoD/android-switch-backport#using-the-switch</a>  </p>\n</li>\n<li><p>android-datepicker<br>将Android 4.0的datepicker兼容到Android2.2++<br>项目地址：<a href=\"https://github.com/SimonVT/android-datepicker\">https://github.com/SimonVT/android-datepicker</a>  </p>\n</li>\n<li><p>GlowPadBackport<br>Android 4.2的GlowPadView向后适配到API4以上<br>项目地址：<a href=\"https://github.com/frakbot/GlowPadBackport\">https://github.com/frakbot/GlowPadBackport</a>  </p>\n</li>\n<li><p>Transitions Everywhere<br>Android 4.4 的 Transitions API 兼容到 Android 2.2 以上<br>项目地址：<a href=\"https://github.com/andkulikov/transitions-everywhere\">https://github.com/andkulikov/transitions-everywhere</a>  </p>\n</li>\n</ol>\n<h4 id=\"七、多媒体相关\"><a href=\"#七、多媒体相关\" class=\"headerlink\" title=\"七、多媒体相关\"></a>七、多媒体相关</h4><ol>\n<li><p>cocos2d-x<br>跨平台的2d游戏框架，支持Android、IOS、Linux、Windows等众多平台<br>项目地址：<a href=\"https://github.com/cocos2d/cocos2d-x\">https://github.com/cocos2d/cocos2d-x</a><br>文档介绍：<a href=\"http://www.cocos2d-x.org/wiki\">http://www.cocos2d-x.org/wiki</a><br>官网网址：<a href=\"http://www.cocos2d-x.org/\">http://www.cocos2d-x.org/</a>  </p>\n</li>\n<li><p>Vitamio<br>是一款Android与iOS平台上的全能多媒体开发框架<br>项目地址：<a href=\"https://github.com/yixia/VitamioBundle\">https://github.com/yixia/VitamioBundle</a><br>网站介绍：<a href=\"http://www.vitamio.org/docs/\">http://www.vitamio.org/docs/</a><br>特点：(1) 全面支持硬件解码与GPU渲染<br>(2) 能够流畅播放720P甚至1080P高清MKV，FLV，MP4，MOV，TS，RMVB等常见格式的视频<br>(3) 在Android与iOS上跨平台支持 MMS, RTSP, RTMP, HLS(m3u8)等常见的多种视频流媒体协议，包括点播与直播。  </p>\n</li>\n<li><p>PhotoProcessing<br>利用ndk处理图片库，支持Instafix、Ansel、Testino、XPro、Retro、BW、Sepia、Cyano、Georgia、Sahara、HDR、Rotate(旋转)、Flip(翻转)等各种特效<br>项目地址：<a href=\"https://github.com/lightbox/PhotoProcessing\">https://github.com/lightbox/PhotoProcessing</a><br>Demo地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/photo-processing.apk?raw=true\">https://github.com/Trinea/TrineaDownload/blob/master/photo-processing.apk?raw=true</a>  </p>\n</li>\n<li><p>Android StackBlur<br>图片模糊效果工具类<br>项目地址：<a href=\"https://github.com/kikoso/android-stackblur\">https://github.com/kikoso/android-stackblur</a><br>Demo地址：<a href=\"https://github.com/kikoso/android-stackblur/blob/master/StackBlurDemo/bin/StackBlurDemo.apk?raw=true\">https://github.com/kikoso/android-stackblur/blob/master/StackBlurDemo/bin/StackBlurDemo.apk?raw=true</a><br>文档介绍：<a href=\"https://github.com/kikoso/android-stackblur#usage\">https://github.com/kikoso/android-stackblur#usage</a>  </p>\n</li>\n<li><p>Bitmap Smart Clipping using OpenCV<br>图片智能裁剪保留重要部分显示<br>项目地址：<a href=\"https://github.com/beartung/tclip-android\">https://github.com/beartung/tclip-android</a><br>利用淘宝的 <a href=\"http://code.taobao.org/p/tclip/\">http://code.taobao.org/p/tclip/</a> 库完成<br>一淘玩客正在使用的图片裁剪，自动识别图片中的重要区域，并且在图片裁剪时保留重要区域<br>特点：(1). 能进行人脸识别。图片中有人脸，将自动视为人脸区域为重要区域，将不会被裁剪掉<br>(2).自动其它重要区域。如果图片中未识别出人脸，则会根据特征分布计算出重区域  </p>\n</li>\n<li><p>Cropper<br>图片局部剪切工具，可触摸控制选择区域或旋转<br>项目地址：<a href=\"https://github.com/edmodo/cropper\">https://github.com/edmodo/cropper</a><br>效果图：<img src=\"https://github-camo.global.ssl.fastly.net/e4fde77bf41d4a60b234b4e268e5cfa8c17d9b6f/687474703a2f2f692e696d6775722e636f6d2f334668735467666c2e6a7067\" alt=\"Renderings\"><br>文档介绍：<a href=\"https://github.com/edmodo/cropper/wiki\">https://github.com/edmodo/cropper/wiki</a>  </p>\n</li>\n<li><p>android-crop<br>图片裁剪Activity<br>项目地址：<a href=\"https://github.com/jdamcd/android-crop\">https://github.com/jdamcd/android-crop</a><br>效果图：<img src=\"https://github.com/jdamcd/android-crop/raw/master/screenshot.png\" alt=\"Renderings\">  </p>\n</li>\n<li><p>TileView<br>可分块显示大图，支持2D拖动、双击、双指放大、双指捏合<br>项目地址：<a href=\"https://github.com/moagrius/TileView\">https://github.com/moagrius/TileView</a><br>Demo地址：<a href=\"http://moagrius.github.io/TileView/TileViewDemo.apk\">http://moagrius.github.io/TileView/TileViewDemo.apk</a>  </p>\n</li>\n<li><p>BlurEffectForAndroidDesign<br>图片模糊效果<br>项目地址：<a href=\"https://github.com/PomepuyN/BlurEffectForAndroidDesign\">https://github.com/PomepuyN/BlurEffectForAndroidDesign</a>  </p>\n</li>\n<li><p>android-eye<br>PC端网页查看同一局域网内的手机摄像头内容，可以用来监控哦<br>项目地址：<a href=\"https://github.com/Teaonly/android-eye\">https://github.com/Teaonly/android-eye</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=teaonly.droideye\">https://play.google.com/store/apps/details?id=teaonly.droideye</a>  </p>\n</li>\n<li><p>libpng for Android<br>PNG图片的jni库，支持几乎png的所有特性<br>项目地址：<a href=\"https://github.com/julienr/libpng-android\">https://github.com/julienr/libpng-android</a><br>文档介绍：<a href=\"http://www.libpng.org/pub/png/libpng.html\">http://www.libpng.org/pub/png/libpng.html</a>  </p>\n</li>\n<li><p>android-gpuimage<br>基于GPU的图片滤镜<br>项目地址：<a href=\"https://github.com/CyberAgent/android-gpuimage\">https://github.com/CyberAgent/android-gpuimage</a>  </p>\n</li>\n<li><p>AndroidFaceCropper<br>图片脸部自动识别，将识别后的局部图片返回<br>项目地址：<a href=\"https://github.com/lafosca/AndroidFaceCropper\">https://github.com/lafosca/AndroidFaceCropper</a>  </p>\n</li>\n<li><p>Android Video Crop<br>利用TextureView播放和剪切视频，类似ImageView.setScaleType<br>项目地址：<a href=\"https://github.com/dmytrodanylyk/android-video-crop\">https://github.com/dmytrodanylyk/android-video-crop</a><br>Demo地址：<a href=\"https://github.com/lafosca/AndroidFaceCropper/releases/download/1.0/FaceCropper-sample-debug-unaligned.apk\">https://github.com/lafosca/AndroidFaceCropper/releases/download/1.0/FaceCropper-sample-debug-unaligned.apk</a>  </p>\n</li>\n<li><p>svg-android<br>Android Svg矢量图形支持<br>项目地址：<a href=\"https://github.com/japgolly/svg-android\">https://github.com/japgolly/svg-android</a> <a href=\"https://github.com/japgolly/svg-android\">https://github.com/japgolly/svg-android</a>  </p>\n</li>\n<li><p>Android Visualizer<br>从Android MediaPlayer获得音频，然后像iTunes及WinAmp一样展示音轨<br>项目地址：<a href=\"https://github.com/felixpalmer/android-visualizer\">https://github.com/felixpalmer/android-visualizer</a>  </p>\n</li>\n<li><p>ExoPlayer<br>包括仪表板和SmoothStreaming自适应回放，缓存持久化和自定义渲染器，方便自定义和扩展，并且可以通过应用商店更新<br>项目地址：<a href=\"https://github.com/google/ExoPlayer\">https://github.com/google/ExoPlayer</a>  </p>\n</li>\n<li><p>DanmakuFlameMaster<br>android上开源弹幕解析绘制引擎项目<br>项目地址：<a href=\"https://github.com/ctiao/DanmakuFlameMaster\">https://github.com/ctiao/DanmakuFlameMaster</a>  </p>\n</li>\n</ol>\n<h4 id=\"八、事件总线-订阅者模式\"><a href=\"#八、事件总线-订阅者模式\" class=\"headerlink\" title=\"八、事件总线(订阅者模式)\"></a>八、事件总线(订阅者模式)</h4><p>通过发布/订阅事件解耦事件发送和接受，从而简化应用程序组件(Activities, Fragments及后台线程)之间的通信  </p>\n<ol>\n<li><p>EventBus<br>greenrobot的开源项目<br>项目地址：<a href=\"https://github.com/greenrobot/EventBus\">https://github.com/greenrobot/EventBus</a><br>文档介绍：<a href=\"https://github.com/greenrobot/EventBus#general-usage-and-api\">https://github.com/greenrobot/EventBus#general-usage-and-api</a><br>特点：(1) 支持在不同类型的线程中处理订阅，包括发布所在线程，UI线程、单一后台线程、异步线程<br>(2) 支持事件优先级定义，支持优先级高的订阅者取消事件继续传递，支持粘性事件，是不是跟系统的有序广播、粘性广播很像啊<br>(3) 不是基于annotations<br>(4) 性能更优<br>(5) 体积小<br>(6) 支持单例创建或创建多个对象<br>(7) 支持根据事件类型订阅  </p>\n</li>\n<li><p>Otto<br>Square的开源项目，基于Guava的Android优化<br>项目地址：<a href=\"https://github.com/square/otto\">https://github.com/square/otto</a><br>文档介绍：<a href=\"http://square.github.io/otto/\">http://square.github.io/otto/</a><br><a href=\"https://github.com/greenrobot/EventBus#comparison-with-squares-otto\">EventBus与Otto的功能及性能对比文档</a><br><a href=\"https://play.google.com/store/apps/details?id=de.greenrobot.eventperf\">EventBus与Otto性能对比Demo Apk</a>  </p>\n</li>\n</ol>\n<h4 id=\"九、传感器\"><a href=\"#九、传感器\" class=\"headerlink\" title=\"九、传感器\"></a>九、传感器</h4><ol>\n<li><p>Great Android Sensing Toolkit<br>Android感应器工具包，包含示例及使用过程中可能需要的算法<br>项目地址：<a href=\"https://github.com/gast-lib/gast-lib\">https://github.com/gast-lib/gast-lib</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=root.gast.playground\">https://play.google.com/store/apps/details?id=root.gast.playground</a><br>文档介绍：<a href=\"https://github.com/gast-lib/gast-lib#documentation\">https://github.com/gast-lib/gast-lib#documentation</a>  </p>\n</li>\n<li><p>SensorManager<br>Android传感器管理<br>项目地址：<a href=\"https://github.com/nlathia/SensorManager\">https://github.com/nlathia/SensorManager</a><br>文档介绍：<a href=\"https://docs.google.com/document/d/1TqThJULb-4e6TGb1gdkAaPCfyuXStjJpbnt7a0OZ9OE/edit\">https://docs.google.com/document/d/1TqThJULb-4e6TGb1gdkAaPCfyuXStjJpbnt7a0OZ9OE/edit</a>  </p>\n</li>\n<li><p>GPSLogger<br>记录GPS信息<br>项目地址：<a href=\"https://github.com/mendhak/gpslogger\">https://github.com/mendhak/gpslogger</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.mendhak.gpslogger\">https://play.google.com/store/apps/details?id=com.mendhak.gpslogger</a><br>文档介绍：<a href=\"http://code.mendhak.com/gpslogger/\">http://code.mendhak.com/gpslogger/</a>  </p>\n</li>\n<li><p>Pedometer<br>计步器，使用硬件计步感应器<br>项目地址：<a href=\"https://github.com/j4velin/Pedometer\">https://github.com/j4velin/Pedometer</a>  </p>\n</li>\n<li><p>leapcast<br>ChromeCast模拟器的App<br>项目地址：<a href=\"https://github.com/dz0ny/leapcast\">https://github.com/dz0ny/leapcast</a>  </p>\n</li>\n<li><p>Arduino-Communicator<br>与Arduino通信的App<br>项目地址：<a href=\"https://github.com/jeppsson/Arduino-Communicator\">https://github.com/jeppsson/Arduino-Communicator</a>  </p>\n</li>\n<li><p>android-pedometer<br>Android计步器<br>项目地址：<a href=\"https://github.com/bagilevi/android-pedometer\">https://github.com/bagilevi/android-pedometer</a><br>Demo地址：<a href=\"http://pedometer.googlecode.com/files/Pedometer-1.4.apk\">http://pedometer.googlecode.com/files/Pedometer-1.4.apk</a>  </p>\n</li>\n<li><p>OwnTracks for Android<br>自己的轨迹记录<br>项目地址：<a href=\"https://github.com/owntracks/android\">https://github.com/owntracks/android</a>  </p>\n</li>\n<li><p>Shake Detector library for Android<br>Android手机震动摇晃检测库，提供供UI线程调用的回调接口<br>项目地址：<a href=\"https://github.com/tbouron/ShakeDetector\">https://github.com/tbouron/ShakeDetector</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.github.tbouron.shakedetector.example\">https://play.google.com/store/apps/details?id=com.github.tbouron.shakedetector.example</a>  </p>\n</li>\n<li><p>Android heart rate monitor<br>Android心跳检测<br>项目地址：<a href=\"https://github.com/phishman3579/android-heart-rate-monitor\">https://github.com/phishman3579/android-heart-rate-monitor</a>  </p>\n</li>\n<li><p>Bluetooth LE Library for Android<br>蓝牙源信息，包括宝库Mac、更新时间、RSSI、UUID、信号源距离、影响范围等信息<br>项目地址：<a href=\"https://github.com/alt236/Bluetooth-LE-Library---Android\">https://github.com/alt236/Bluetooth-LE-Library---Android</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=uk.co.alt236.btlescan\">https://play.google.com/store/apps/details?id=uk.co.alt236.btlescan</a>  </p>\n</li>\n<li><p>farebot<br>通过NFC 从公交卡中读取数据的一个应用<br>项目地址：<a href=\"https://github.com/codebutler/farebot\">https://github.com/codebutler/farebot</a>  </p>\n</li>\n</ol>\n<h4 id=\"十、安全\"><a href=\"#十、安全\" class=\"headerlink\" title=\"十、安全\"></a>十、安全</h4><ol>\n<li><p>SQLCipher<br>Sqlite加密工具<br>项目地址：<a href=\"https://github.com/sqlcipher/sqlcipher\">https://github.com/sqlcipher/sqlcipher</a><br>文档介绍：<a href=\"http://sqlcipher.net/sqlcipher-for-android/\">http://sqlcipher.net/sqlcipher-for-android/</a>  </p>\n</li>\n<li><p>Conceal<br>快速高效的进行文件加密解密<br>项目地址：<a href=\"https://github.com/facebook/conceal\">https://github.com/facebook/conceal</a><br>文档介绍：<a href=\"https://github.com/facebook/conceal#usage\">https://github.com/facebook/conceal#usage</a>  </p>\n</li>\n<li><p>Android-PasscodeLock<br>应用锁，每次启动或从任何Activity启动应用都需要输入四位数字的密码方可进入<br>项目地址：<a href=\"https://github.com/wordpress-mobile/Android-PasscodeLock\">https://github.com/wordpress-mobile/Android-PasscodeLock</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=org.wordpress.android\">https://play.google.com/store/apps/details?id=org.wordpress.android</a><br>APP示例：Wordpress Android，支付宝，挖财  </p>\n</li>\n<li><p>GlowPadBackport<br>将Android4.2的锁屏界面解锁扩展到Android1.6及1.6+<br>项目地址：<a href=\"https://github.com/rock3r/GlowPadBackport\">https://github.com/rock3r/GlowPadBackport</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=net.sebastianopoggi.samples.ui.GlowPadSample\">https://play.google.com/store/apps/details?id=net.sebastianopoggi.samples.ui.GlowPadSample</a><br>效果图：<img src=\"https://lh6.ggpht.com/U070b6Lh6cVsVwx4jN-5nq0xqiB1PBzrYABPeJIEe2hZQ5UWOxc-FDUG77wADelToHA=h310-rw\" alt=\"Renderings\">  </p>\n</li>\n<li><p>GlowPadView<br>Android 4锁屏界面解锁<br>项目地址：<a href=\"https://github.com/nadavfima/GlowPadView\">https://github.com/nadavfima/GlowPadView</a><br>效果图：<a href=\"https://raw.github.com/nadavfima/GlowPadView/master/example.png\">https://raw.github.com/nadavfima/GlowPadView/master/example.png</a>  </p>\n</li>\n<li><p>android-lockpattern<br>Android的图案密码解锁<br>项目地址：<a href=\"https://code.google.com/p/android-lockpattern/\">https://code.google.com/p/android-lockpattern/</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=group.pals.android.lib.ui.lockpattern.demo\">https://play.google.com/store/apps/details?id=group.pals.android.lib.ui.lockpattern.demo</a><br>文档介绍：<a href=\"https://code.google.com/p/android-lockpattern/wiki/QuickUse\">https://code.google.com/p/android-lockpattern/wiki/QuickUse</a>  </p>\n</li>\n<li><p>Android-InsecureBank<br>关于 Android 不安全性的示例<br>项目地址：<a href=\"https://github.com/dineshshetty/Android-InsecureBankv2\">https://github.com/dineshshetty/Android-InsecureBankv2</a>  </p>\n</li>\n</ol>\n<h4 id=\"十一、插件化\"><a href=\"#十一、插件化\" class=\"headerlink\" title=\"十一、插件化\"></a>十一、插件化</h4><p>更多见：<a href=\"http://www.trinea.cn/android/android-plugin/\">Android 插件化作用、概念以及不错的资料(包括开源项目)和解决方案</a> </p>\n<ol>\n<li><p>dynamic-load-apk<br>Android 动态加载Apk，热部署，利用 ClassLoader 以及 Activity 代理的方式解决<br>项目地址：<a href=\"https://github.com/singwhatiwanna/dynamic-load-apk\">https://github.com/singwhatiwanna/dynamic-load-apk</a><br>文档介绍：<a href=\"http://blog.csdn.net/singwhatiwanna/article/details/22597587\">http://blog.csdn.net/singwhatiwanna/article/details/22597587</a>  </p>\n</li>\n<li><p>Android Dynamic Loader<br>点评的实现方式，和上面不同的是：他不是用代理 Activity 的方式实现而是用 Fragment 以及 Schema 的方式实现<br>项目地址：<a href=\"https://github.com/mmin18/AndroidDynamicLoader\">https://github.com/mmin18/AndroidDynamicLoader</a><br>Demo地址：<a href=\"https://github.com/mmin18/AndroidDynamicLoader/raw/master/host.apk\">https://github.com/mmin18/AndroidDynamicLoader/raw/master/host.apk</a>  </p>\n</li>\n<li><p>xCombine<br>Android App插件式插件开发，插件必须先安装，更推荐看上面两个开源项目<br>项目地址：<a href=\"https://github.com/wyouflf/xCombine\">https://github.com/wyouflf/xCombine</a><br>文档介绍：<a href=\"http://my.oschina.net/u/1171837/blog/155377\">http://my.oschina.net/u/1171837/blog/155377</a>  </p>\n</li>\n<li><p>Android Plugin Framework<br>Android插件式开发，开放的源码目前不完整<br>项目地址：<a href=\"https://github.com/umeng/apf\">https://github.com/umeng/apf</a>  </p>\n</li>\n<li><p>multidex<br>安装多 dex 的 classloader<br>项目地址：<a href=\"https://github.com/casidiablo/multidex\">https://github.com/casidiablo/multidex</a>  </p>\n</li>\n<li><p>ANR-WatchDog<br>Android ANR 监听，通过监听自己的 UI Thread 是否被执行确定是否发生了 ANR，并可以设置相关事件<br>项目地址：<a href=\"https://github.com/SalomonBrys/ANR-WatchDog\">https://github.com/SalomonBrys/ANR-WatchDog</a>  </p>\n</li>\n</ol>\n<h4 id=\"十二、文件\"><a href=\"#十二、文件\" class=\"headerlink\" title=\"十二、文件\"></a>十二、文件</h4><p>对不同文档类型的处理，包括PDF、Word、EPub、Html、Zip等</p>\n<ol>\n<li><p>purePDF<br>允许从任何运行的SWF文件读取和创建PDF文档<br>项目地址：<a href=\"https://github.com/sephiroth74/purePDF\">https://github.com/sephiroth74/purePDF</a>  </p>\n</li>\n<li><p>android-pdfview<br>快速解析pdf的view，默认支持手势缩放和相关动画<br>项目地址：<a href=\"https://github.com/JoanZapata/android-pdfview\">https://github.com/JoanZapata/android-pdfview</a>  </p>\n</li>\n<li><p>Office 365 SDK for Android Preview<br>可支持Microsoft SharePoint Lists, Microsoft SharePoint Files, Microsoft Exchange Calendar, Microsoft Exchange Contacts, Microsoft Exchange Mail<br>项目地址：<a href=\"https://github.com/OfficeDev/Office-365-SDK-for-Android\">https://github.com/OfficeDev/Office-365-SDK-for-Android</a>  </p>\n</li>\n<li><p>OpenSpritz-Android<br>EPub阅读器<br>项目地址：<a href=\"https://github.com/OnlyInAmerica/OpenSpritz-Android\">https://github.com/OnlyInAmerica/OpenSpritz-Android</a>  </p>\n</li>\n<li><p>jsoup<br>一个解析html的java库，可方便的提取和操作数据<br>项目地址：<a href=\"https://github.com/jhy/jsoup\">https://github.com/jhy/jsoup</a><br>官网网址：<a href=\"http://jsoup.org/\">http://jsoup.org/</a><br>作用：(1) 从一个url、文件或string获得html并解析<br>(2) 利用dom遍历或css选择器查找、提取数据<br>(3) 操作html元素<br>(4) 根据白名单去除用于提交的非法数据防止xss攻击<br>(5) 输出整齐的html  </p>\n</li>\n<li><p>ZIP<br>java压缩和解压库<br>项目地址：<a href=\"https://github.com/zeroturnaround/zt-zip\">https://github.com/zeroturnaround/zt-zip</a><br>文档介绍：<a href=\"https://github.com/zeroturnaround/zt-zip#examples\">https://github.com/zeroturnaround/zt-zip#examples</a><br>作用：(1) 解压和压缩，并支持文件夹内递归操作<br>(2) 支持包含和排除某些元素<br>(3) 支持重命名元素<br>(4) 支持遍历zip包内容<br>(5) 比较两个zip包等功能  </p>\n</li>\n</ol>\n<h4 id=\"十三、其他\"><a href=\"#十三、其他\" class=\"headerlink\" title=\"十三、其他\"></a>十三、其他</h4><ol>\n<li><p>Salvage view<br>带View缓存的Viewpager PagerAdapter，很方便使用<br>项目地址：<a href=\"https://github.com/JakeWharton/salvage\">https://github.com/JakeWharton/salvage</a>  </p>\n</li>\n<li><p>Android Priority Job Queue<br>Android后台任务队列<br>项目地址：<a href=\"https://github.com/path/android-priority-jobqueue\">https://github.com/path/android-priority-jobqueue</a><br>文档介绍：<a href=\"https://github.com/path/android-priority-jobqueue#getting-started\">https://github.com/path/android-priority-jobqueue#getting-started</a>  </p>\n</li>\n<li><p>Cobub Razor<br>开源的mobile行为分析系统，包括web端、android端，支持ios和window phone<br>项目地址：<a href=\"https://github.com/cobub/razor\">https://github.com/cobub/razor</a><br>Demo地址：<a href=\"http://demo.cobub.com/razor\">http://demo.cobub.com/razor</a><br>官网网址：<a href=\"http://dev.cobub.com/\">http://dev.cobub.com/</a>  </p>\n</li>\n<li><p>Countly<br>Android移动端数据采集分析系统<br>项目地址：<a href=\"https://github.com/Countly/countly-sdk-android\">https://github.com/Countly/countly-sdk-android</a><br>官网网址：<a href=\"https://count.ly/\">https://count.ly/</a>  </p>\n</li>\n<li><p>aFileChooser<br>文件选择器，可内嵌到程序中，而无需使用系统或三方文件选择器。<br>项目地址：<a href=\"https://github.com/iPaulPro/aFileChooser\">https://github.com/iPaulPro/aFileChooser</a>  </p>\n</li>\n<li><p>androidpn<br>基于xmpp协议的消息推送解决方案，包括服务器端和android端。<br>项目地址：<a href=\"https://github.com/dannytiehui/androidpn\">https://github.com/dannytiehui/androidpn</a>  </p>\n</li>\n<li><p>Bolts<br>Android的异步编程模式<br>项目地址：<a href=\"https://github.com/BoltsFramework/Bolts-Android/\">https://github.com/BoltsFramework/Bolts-Android/</a><br>与AsyncTask比较：(1) 使用的是无大小限制的线程池<br>(2) 任务可组合可级联，防止了代码耦合  </p>\n</li>\n<li><p>CastCompanionLibrary-android<br>使Android程序中更快的接入Google Cast<br>项目地址：<a href=\"https://github.com/googlecast/CastCompanionLibrary-android\">https://github.com/googlecast/CastCompanionLibrary-android</a><br>文档介绍：<a href=\"https://developers.google.com/cast/\">https://developers.google.com/cast/</a>  </p>\n</li>\n<li><p>CastVideos-android<br>从Android设备分享Video通过Google Cast<br>项目地址：<a href=\"https://github.com/googlecast/CastVideos-android\">https://github.com/googlecast/CastVideos-android</a><br>文档介绍：<a href=\"https://developers.google.com/cast/\">https://developers.google.com/cast/</a>  </p>\n</li>\n<li><p>Uninstall_Statics<br>Android应用自身被卸载监听及打开浏览器等反馈功能实现<br>项目地址：<a href=\"https://github.com/sevenler/Uninstall_Statics\">https://github.com/sevenler/Uninstall_Statics</a><br>文档介绍：<a href=\"http://www.cnblogs.com/zealotrouge/p/3157126.html\">http://www.cnblogs.com/zealotrouge/p/3157126.html</a>  <a href=\"http://www.cnblogs.com/zealotrouge/p/3159772.html\">http://www.cnblogs.com/zealotrouge/p/3159772.html</a>  </p>\n</li>\n<li><p>Memento<br>保证在系统配置改变时，Activity中的某些数据可以简单安全的保持不变<br>项目地址：<a href=\"https://github.com/mttkay/memento\">https://github.com/mttkay/memento</a><br>文档介绍：<a href=\"https://github.com/mttkay/memento#usage\">https://github.com/mttkay/memento#usage</a>  </p>\n</li>\n<li><p>FreeFlow<br>布局引擎，更简单的创建自定义布局，并且当数据和布局改变时更美观的过渡动画<br>项目地址：<a href=\"https://github.com/Comcast/FreeFlow\">https://github.com/Comcast/FreeFlow</a><br>Demo地址：<a href=\"https://github.com/Comcast/FreeFlow/releases\">https://github.com/Comcast/FreeFlow/releases</a>  </p>\n</li>\n<li><p>Android Gesture Detectors Framework<br>Android手势框架，支持双指旋转、移动、平移、缩放等<br>项目地址：<a href=\"https://github.com/Almeros/android-gesture-detectors\">https://github.com/Almeros/android-gesture-detectors</a>  </p>\n</li>\n<li><p>Mapbox Android SDK<br>Android Map的替代版<br>项目地址：<a href=\"https://github.com/mapbox/mapbox-android-sdk\">https://github.com/mapbox/mapbox-android-sdk</a>  </p>\n</li>\n<li><p>Activity animation<br>Activity跳转动画，支持各个方向波浪的效果<br>项目地址：<a href=\"https://github.com/flavienlaurent/activityanimation\">https://github.com/flavienlaurent/activityanimation</a><br>在线演示：<a href=\"https://www.youtube.com/watch?v=-E0sc6w_Jck\">https://www.youtube.com/watch?v=-E0sc6w_Jck</a>  </p>\n</li>\n<li><p>KryoNet<br>通过NIO提供客户端和服务器端TCP/UDP网络传输的Java库<br>项目地址：<a href=\"https://github.com/EsotericSoftware/kryonet\">https://github.com/EsotericSoftware/kryonet</a>  </p>\n</li>\n<li><p>Rebound<br>一个模仿弹簧反弹的Java库，可用于创建动画<br>项目地址：<a href=\"https://github.com/facebook/rebound\">https://github.com/facebook/rebound</a>  </p>\n</li>\n<li><p>Android Social Networks<br>社交网络接入统一管理器，可方便的从Twitter, LinkedIn, Facebook, Google Plus登陆、获得个人信息、发送消息、发送专篇、添加或删除好友<br>项目地址：<a href=\"https://github.com/antonkrasov/AndroidSocialNetworks\">https://github.com/antonkrasov/AndroidSocialNetworks</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.github.androidsocialnetworks.apidemos\">https://play.google.com/store/apps/details?id=com.github.androidsocialnetworks.apidemos</a>  </p>\n</li>\n<li><p>SmartAppUpdates<br>Android App 增量升级，包含前后端方案、Demo、以及 so 库，可用于商店或大体积 App 差分升级<br>项目地址：<a href=\"https://github.com/cundong/SmartAppUpdates\">https://github.com/cundong/SmartAppUpdates</a>  </p>\n</li>\n<li><p>Magnet<br>创建类似 Facebook 聊天桌面悬浮窗的效果<br>项目地址：<a href=\"https://github.com/premnirmal/Magnet\">https://github.com/premnirmal/Magnet</a>  </p>\n</li>\n<li><p>Parceler<br>通过注解及工具类自动完成实体类 Parcelable及值传递<br>项目地址：<a href=\"https://github.com/johncarl81/parceler\">https://github.com/johncarl81/parceler</a>  </p>\n</li>\n<li><p>AcDisplay<br>将 Android 的通知都集中到锁屏显示<br>项目地址：<a href=\"https://github.com/AChep/AcDisplay\">https://github.com/AChep/AcDisplay</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.achep.acdisplay\">https://play.google.com/store/apps/details?id=com.achep.acdisplay</a>  </p>\n</li>\n<li><p>QrCodeScan<br>ZXing和ZBar结合的二维码扫描项目，提高了扫描效率<br>项目地址：<a href=\"https://github.com/SkillCollege/QrCodeScan\">https://github.com/SkillCollege/QrCodeScan</a><br>效果图：<img src=\"http://www.eoeandroid.com/data/attachment/forum/201405/09/124538vteuz4leptgg1te6.png\" alt=\"QrCodeScan\">  </p>\n</li>\n<li><p>Android-ScreenShot<br>实现android系统截屏功能<br>项目地址：<a href=\"https://github.com/Android-ScreenShot/AndroidScreenShotService\">https://github.com/Android-ScreenShot/AndroidScreenShotService</a><br>文档介绍：<a href=\"http://blog.csdn.net/buptgshengod/article/details/39155979\">http://blog.csdn.net/buptgshengod/article/details/39155979</a>  </p>\n</li>\n<li><p>card.io SDK for Android<br>信用卡扫描 Android SDK<br>项目地址：<a href=\"https://github.com/card-io/card.io-Android-SDK\">https://github.com/card-io/card.io-Android-SDK</a><br>Demo项目：<a href=\"https://github.com/card-io/card.io-Android-SDK/tree/master/SampleApp\">https://github.com/card-io/card.io-Android-SDK/tree/master/SampleApp</a>  </p>\n</li>\n<li><p>ASNE<br>Twitter, Facebook, Google Plus, LinkedIn, Instagram, Vkontakte, Odnoklassniki 的集成库，包括他们的大多数功能<br>项目地址：<a href=\"https://github.com/gorbin/ASNE\">https://github.com/gorbin/ASNE</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=com.gorbin.androidsocialnetworksextended.asne\">https://play.google.com/store/apps/details?id=com.gorbin.androidsocialnetworksextended.asne</a>  </p>\n</li>\n<li><p>Android Signature Pad<br>Android 自定义的签名 View，可自定义笔颜色和大小<br>项目地址：<a href=\"https://github.com/gcacace/android-signaturepad\">https://github.com/gcacace/android-signaturepad</a><br>Demo项目：<a href=\"https://github.com/gcacace/android-signaturepad/tree/master/SignaturePad-Example\">https://github.com/gcacace/android-signaturepad/tree/master/SignaturePad-Example</a>  </p>\n</li>\n<li><p>Teleport<br>Android Wear 数据同步和消息传送库<br>项目地址：<a href=\"https://github.com/Mariuxtheone/Teleport\">https://github.com/Mariuxtheone/Teleport</a>  </p>\n</li>\n<li><p>DebugLog<br>可以帮你创建更简单和更容易理解的调试日志，能够友好的显示调试信息所在类和函数。<br>项目地址：<a href=\"https://github.com/MustafaFerhan/DebugLog\">https://github.com/MustafaFerhan/DebugLog</a><br>效果图：<img src=\"https://camo.githubusercontent.com/37deffede9f9b185886da48e96a4829ebd407260/68747470733a2f2f7261772e6769746875622e636f6d2f4d75737461666146657268616e2f44656275674c6f672f6d61737465722f44656275674c6f672d44656d6f2f6173736574732f7373322e6a7067\" alt=\"DebugLog\"> </p>\n</li>\n<li><p>Logger<br>简单、美观而且十分强大的Android日志工具<br>项目地址：<a href=\"https://github.com/orhanobut/logger\">https://github.com/orhanobut/logger</a><br>Demo地址：<a href=\"https://github.com/orhanobut/logger/tree/master/app\">https://github.com/orhanobut/logger/tree/master/app</a><br>效果图：<img src=\"https://github.com/orhanobut/logger/blob/master/images/description.png\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<h2 id=\"第三部分-优秀项目\"><a href=\"#第三部分-优秀项目\" class=\"headerlink\" title=\"第三部分 优秀项目\"></a>第三部分 优秀项目</h2><p>主要介绍那些Android还不错的完整项目，目前包含的项目主要依据是项目有意思或项目分层规范比较好。<br>Linux<br>项目地址：<a href=\"https://github.com/torvalds/linux\">https://github.com/torvalds/linux</a><br>Android<br>项目地址：<a href=\"https://android.googlesource.com/\">https://android.googlesource.com/</a> 或 <a href=\"https://github.com/android\">https://github.com/android</a><br>以上两个项目，不解释  </p>\n<p>(1) ZXing<br>二维码扫描工具<br>项目地址：<a href=\"https://github.com/zxing/zxing\">https://github.com/zxing/zxing</a> 或 <a href=\"https://code.google.com/p/zxing/\">https://code.google.com/p/zxing/</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=com.google.zxing.client.android\">https://play.google.com/store/apps/details?id=com.google.zxing.client.android</a><br>PS：现在市面上很多应用的二维码扫描功能都是从这个修改而来  </p>\n<p>(2) photup<br>编辑机批量上传照片到facebook上<br>项目地址：<a href=\"https://github.com/chrisbanes/photup\">https://github.com/chrisbanes/photup</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=uk.co.senab.photup\">https://play.google.com/store/apps/details?id=uk.co.senab.photup</a><br>PS：代码分包合理，很棒。不过这个项目依赖的开源项目比较多，比较难编译  </p>\n<p>(3) github-android<br>Github的Android客户端项目<br>项目地址：<a href=\"https://github.com/github/android\">https://github.com/github/android</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=com.github.mobile\">https://play.google.com/store/apps/details?id=com.github.mobile</a>  </p>\n<p>(4) Notes<br>MIUI便签<br>项目地址：<a href=\"https://github.com/MiCode/Notes\">https://github.com/MiCode/Notes</a><br>APK地址：<a href=\"https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true\">https://github.com/Trinea/TrineaDownload/blob/master/miui-note-demo.apk?raw=true</a><br>PS：项目分包比较合理，相比较miui的文件管理器<a href=\"https://github.com/MiCode/FileExplorer\">https://github.com/MiCode/FileExplorer</a> 代码规范较好得多  </p>\n<p>(5) weicuiyuan<br>四次元-新浪微博客户端<br>项目地址：<a href=\"https://github.com/qii/weiciyuan\">https://github.com/qii/weiciyuan</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=org.qii.weiciyuan\">https://play.google.com/store/apps/details?id=org.qii.weiciyuan</a>  </p>\n<p>(6) gnucash-android<br>一个记账理财软件<br>项目地址：<a href=\"https://github.com/codinguser/gnucash-android\">https://github.com/codinguser/gnucash-android</a><br>APK地址：<a href=\"http://play.google.com/store/apps/details?id=org.gnucash.android\">http://play.google.com/store/apps/details?id=org.gnucash.android</a>  </p>\n<p>(7) AntennaPod<br>支持rss订阅、音乐订阅<br>项目地址：<a href=\"https://github.com/danieloeh/AntennaPod\">https://github.com/danieloeh/AntennaPod</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=de.danoeh.antennapod\">https://play.google.com/store/apps/details?id=de.danoeh.antennapod</a>  </p>\n<p>(8) ChaseWhisplyProject<br>打鬼游戏<br>项目地址：<a href=\"https://github.com/tvbarthel/ChaseWhisplyProject\">https://github.com/tvbarthel/ChaseWhisplyProject</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=fr.tvbarthel.games.chasewhisply\">https://play.google.com/store/apps/details?id=fr.tvbarthel.games.chasewhisply</a>  </p>\n<p>(9) Tweet Lanes<br>功能完整的Twitter客户端<br>项目地址：<a href=\"https://github.com/chrislacy/TweetLanes\">https://github.com/chrislacy/TweetLanes</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=com.tweetlanes.android\">https://play.google.com/store/apps/details?id=com.tweetlanes.android</a>  </p>\n<p>(10) Financius<br>简单易用的记账程序<br>项目地址：<a href=\"https://github.com/mvarnagiris/Financius\">https://github.com/mvarnagiris/Financius</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=com.code44.finance\">https://play.google.com/store/apps/details?id=com.code44.finance</a>  </p>\n<p>(11) todo.txt-android<br>todo.txt的官方Android应用<br>项目地址：<a href=\"https://github.com/ginatrapani/todo.txt-android\">https://github.com/ginatrapani/todo.txt-android</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=com.todotxt.todotxttouch\">https://play.google.com/store/apps/details?id=com.todotxt.todotxttouch</a>  </p>\n<p>(12) simpletask<br>基于todo.txt官方应用的另一个客户端<br>项目地址：<a href=\"https://github.com/mpcjanssen/simpletask-android\">https://github.com/mpcjanssen/simpletask-android</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=nl.mpcjanssen.todotxtholo\">https://play.google.com/store/apps/details?id=nl.mpcjanssen.todotxtholo</a>  </p>\n<p>(13) Muzei Live Wallpaper<br>定时更换桌面精美壁纸<br>项目地址：<a href=\"https://github.com/romannurik/muzei\">https://github.com/romannurik/muzei</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=net.nurik.roman.muzei\">https://play.google.com/store/apps/details?id=net.nurik.roman.muzei</a>  </p>\n<p>(14) Scanbook<br>扫描搜索查询图书信息<br>项目地址：<a href=\"https://github.com/JayFang1993/ScanBook\">https://github.com/JayFang1993/ScanBook</a><br>APK地址：<a href=\"http://www.wandoujia.com/apps/com.scanbook\">http://www.wandoujia.com/apps/com.scanbook</a>  </p>\n<p>(14) iosched<br>The Google I/O 2014 Android App<br>项目地址：<a href=\"https://github.com/google/iosched\">https://github.com/google/iosched</a><br>APK地址：<a href=\"https://play.google.com/store/apps/details?id=com.google.samples.apps.iosched\">https://play.google.com/store/apps/details?id=com.google.samples.apps.iosched</a><br>效果图: <img src=\"https://github.com/google/iosched/raw/master/art/hero.png\" alt=\"iosched\"></p>\n<h2 id=\"第四部分-开发工具及测试工具\"><a href=\"#第四部分-开发工具及测试工具\" class=\"headerlink\" title=\"第四部分 开发工具及测试工具\"></a>第四部分 开发工具及测试工具</h2><p>主要介绍和Android开发工具和测试工具相关的开源项目。    </p>\n<h4 id=\"一、开发效率工具\"><a href=\"#一、开发效率工具\" class=\"headerlink\" title=\"一、开发效率工具\"></a>一、开发效率工具</h4><ol>\n<li><p>Parceler<br>通过注解及工具类自动完成实体类 Parcelable及值传递<br>项目地址：<a href=\"https://github.com/johncarl81/parceler\">https://github.com/johncarl81/parceler</a>  </p>\n</li>\n<li><p>Json2Java<br>根据JSon数据自动生成对应的Java实体类，还支持Parcel、Gson Annotations对应代码自动生成。期待后续的提取父类以及多url构建整个工程的功能<br>项目地址：<a href=\"https://github.com/jonfhancock/JsonToJava\">https://github.com/jonfhancock/JsonToJava</a><br>在线演示：<a href=\"http://jsontojava.appspot.com/\">http://jsontojava.appspot.com/</a>  </p>\n</li>\n<li><p>IntelliJ Plugin for Android Parcelable boilerplate code generation<br>Android studio插件，生成Parcelable代码<br>项目地址：<a href=\"https://github.com/mcharmas/android-parcelable-intellij-plugin\">https://github.com/mcharmas/android-parcelable-intellij-plugin</a><br>效果图：<img src=\"https://github.com/mcharmas/android-parcelable-intellij-plugin/raw/master/screenshot.png\" alt=\"Holo Colors Idea\">  </p>\n</li>\n<li><p>Android Holo Colors IntelliJ Plugin<br>Android studio插件，生成holo样式9 patch图片<br>项目地址：<a href=\"https://github.com/jeromevdl/android-holo-colors-idea-plugin\">https://github.com/jeromevdl/android-holo-colors-idea-plugin</a><br>效果图：<img src=\"https://raw.github.com/jeromevdl/android-holo-colors-idea-plugin/master/other/holocolorsidea.png\" alt=\"Holo Colors Idea\">  </p>\n</li>\n<li><p>Android Drawable Factory<br>用于生成各个分辨率的图片<br>项目地址：<a href=\"https://github.com/tizionario/AndroidDrawableFactory\">https://github.com/tizionario/AndroidDrawableFactory</a><br>效果图：<img src=\"https://github-camo.global.ssl.fastly.net/5c3844b345a9779296f996490070dab0bfc9dbf5/68747470733a2f2f646c2e64726f70626f7875736572636f6e74656e742e636f6d2f752f32363636343637352f416e64726f69644472617761626c65466163746f72792f312e706e67\" alt=\"Android Drawable Factory\">  </p>\n</li>\n<li><p>SelectorChapek for Android<br>Android Studio插件，可根据固定文件名格式资源自动生成drawable selectors xml文件。<br>项目地址：<a href=\"https://github.com/inmite/android-selector-chapek\">https://github.com/inmite/android-selector-chapek</a>  </p>\n</li>\n<li><p>Android Action Bar Style Generator<br>Android ActionBar样式生成器，可在线选择ActionBar样式自动生成所需要的图片资源及xml文件<br>项目地址：<a href=\"https://github.com/jgilfelt/android-actionbarstylegenerator\">https://github.com/jgilfelt/android-actionbarstylegenerator</a><br>在线演示：<a href=\"http://jgilfelt.github.io/android-actionbarstylegenerator/\">http://jgilfelt.github.io/android-actionbarstylegenerator/</a>  </p>\n</li>\n<li><p>ButterKnifeZelezny<br>用于快速生成<a href=\"https://github.com/JakeWharton/butterknife\">ButterKnife</a>View注入代码的Android Studio/IDEA插件<br>项目地址：<a href=\"https://github.com/inmite/android-butterknife-zelezny\">https://github.com/inmite/android-butterknife-zelezny</a>  </p>\n</li>\n<li><p>RoboCoP<br>利用Gradle task根据固定格式的json文件生成ContentProvider<br>项目地址：<a href=\"https://github.com/mediarain/RoboCoP\">https://github.com/mediarain/RoboCoP</a>  </p>\n</li>\n<li><p>appiconsizes<br>用于生成各个分辨率的图片<br>项目地址：<a href=\"http://www.appiconsizes.com/\">http://www.appiconsizes.com/</a>  </p>\n</li>\n<li><p>Gradle Retrolambda Plugin<br><a href=\"https://github.com/orfjackal/retrolambda\">Retrolambda</a>是将Java8的Lambdas应用于Java7的工具，本项目是Gradle插件，通过Retrolambda从而使Java或Android项目用Java8的Lambdas编写，将编译后的字节码转换为Java6和7的字节码从而正常运行<br>项目地址：<a href=\"https://github.com/evant/gradle-retrolambda\">https://github.com/evant/gradle-retrolambda</a>  </p>\n</li>\n<li><p>Dagger IntelliJ Plugin<br>dagger的intellij插件<br>项目地址：<a href=\"https://github.com/square/dagger-intellij-plugin\">https://github.com/square/dagger-intellij-plugin</a>  </p>\n</li>\n<li><p>Android Gen Drawable Maven plugin<br>在编译时根据SVG描述文件生成不同分辨率的jpg、png或点9图片<br>项目地址：<a href=\"https://github.com/avianey/androidgendrawable-maven-plugin\">https://github.com/avianey/androidgendrawable-maven-plugin</a>  </p>\n</li>\n<li><p>Android Asset Studio<br>各种Android资源自动生成器，包括启动图标、ActionBar图标、通知栏图标、点9等<br>项目地址：<a href=\"https://github.com/romannurik/AndroidAssetStudio\">https://github.com/romannurik/AndroidAssetStudio</a><br>在线演示：<a href=\"http://romannurik.github.io/AndroidAssetStudio/\">http://romannurik.github.io/AndroidAssetStudio/</a>  </p>\n</li>\n<li><p>jsonschema2pojo<br>根据Json内容生成java对象，支持jackjson和gson<br>项目地址：<a href=\"https://github.com/joelittlejohn/jsonschema2pojo\">https://github.com/joelittlejohn/jsonschema2pojo</a><br>在线演示：<a href=\"http://www.jsonschema2pojo.org/\">http://www.jsonschema2pojo.org/</a>  </p>\n</li>\n<li><p>9-Patch-Resizer<br>自动生成 png 及点 9 图片的不同分辨率版本<br>项目地址：<a href=\"https://github.com/redwarp/9-Patch-Resizer\">https://github.com/redwarp/9-Patch-Resizer</a>  </p>\n</li>\n<li><p>AndroidLocalizationer<br>可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件<br>项目地址：<a href=\"https://github.com/westlinkin/AndroidLocalizationer\">https://github.com/westlinkin/AndroidLocalizationer</a>  </p>\n</li>\n</ol>\n<h4 id=\"二、开发自测相关\"><a href=\"#二、开发自测相关\" class=\"headerlink\" title=\"二、开发自测相关\"></a>二、开发自测相关</h4><ol>\n<li><p>Quality Tools for Android<br>Android测试及自测工具集合和示例<br>项目地址：<a href=\"https://github.com/stephanenicolas/Quality-Tools-for-Android\">https://github.com/stephanenicolas/Quality-Tools-for-Android</a>  </p>\n</li>\n<li><p>android-test-kit<br>Google的Android测试工具<br>包括GoogleInstrumentationTestRunner(增强版的InstrumentationTestRunner)和Espresso(用于快速写出可靠测试用例的API)<br>项目地址：<a href=\"https://code.google.com/p/android-test-kit/\">https://code.google.com/p/android-test-kit/</a><br>文档介绍：<a href=\"https://code.google.com/p/android-test-kit/w/list\">https://code.google.com/p/android-test-kit/w/list</a>  </p>\n</li>\n<li><p>robolectric<br>测试用例编写框架<br>项目地址：<a href=\"https://github.com/robolectric/robolectric\">https://github.com/robolectric/robolectric</a><br>Demo地址：<a href=\"https://github.com/robolectric/robolectricsample\">https://github.com/robolectric/robolectricsample</a><br>文档介绍：<a href=\"http://robolectric.org/\">http://robolectric.org/</a><br>特点：(1). 不需要模拟器在一般JVM就可以运行测试用例<br>(2). 能完成在真机上的大部分测试包括感应器<br>其他的测试用例及相关模块Mock可见：<a href=\"https://code.google.com/p/android-mock/\">android-mock</a>, <a href=\"https://code.google.com/p/mockito/\">mockito</a>, <a href=\"https://github.com/easymock/easymock\">easy-mock</a>  </p>\n</li>\n<li><p>Android FEST<br>提供一些列方便的断言，可用于提高编写Android自测代码效率<br>项目地址：<a href=\"https://github.com/square/fest-android\">https://github.com/square/fest-android</a>  </p>\n</li>\n<li><p>BoundBox<br>可用于测试类各种访问权限的属性、方法。实际是通过BoundBox这个annotation生成一个属性和方法都是public权限的中间类并对此类进行测试完成的<br>项目地址：<a href=\"https://github.com/stephanenicolas/boundbox\">https://github.com/stephanenicolas/boundbox</a>  </p>\n</li>\n<li><p>Hugo<br>用于打印函数信息及执行时间的工具，仅在debug模式生效<br>项目地址：<a href=\"https://github.com/JakeWharton/hugo\">https://github.com/JakeWharton/hugo</a>  </p>\n</li>\n<li><p>scalpel<br>在应用下面添加一层用于界面调试，待详细补充 // TODO<br>项目地址：<a href=\"https://github.com/JakeWharton/scalpel\">https://github.com/JakeWharton/scalpel</a>  </p>\n</li>\n<li><p>Android Screenshot library<br>Android截图工具类，用于在持续集成时截图<br>项目地址：<a href=\"https://github.com/rtyley/android-screenshot-lib\">https://github.com/rtyley/android-screenshot-lib</a>  </p>\n</li>\n<li><p>sonar-android-lint-plugin<br>将android lint的错误在sonar中展现<br>项目地址：<a href=\"https://github.com/SonarCommunity/sonar-android\">https://github.com/SonarCommunity/sonar-android</a>  </p>\n</li>\n</ol>\n<h4 id=\"三、测试工具\"><a href=\"#三、测试工具\" class=\"headerlink\" title=\"三、测试工具\"></a>三、测试工具</h4><ol>\n<li><p>Spoon<br>可用于android不同机型设备自动化测试，能将应用apk和测试apk运行在不同机器上并生成相应测试报告。<br>项目地址：<a href=\"https://github.com/square/spoon\">https://github.com/square/spoon</a>  </p>\n</li>\n<li><p>Tencent APT<br>APT是腾讯开源的一个Android平台高效性能测试组件，提供丰富实用的功能，适用于开发自测、定位性能瓶颈；测试人员完成性能基准测试、竞品对比测试<br>项目地址：<a href=\"https://github.com/stormzhang/APT\">https://github.com/stormzhang/APT</a>  </p>\n</li>\n<li><p>Emmagee<br>网易开源的性能测试工具，包括CPU、内存、网络流量、启动时间、电池状态等<br>项目地址：<a href=\"https://github.com/NetEase/Emmagee\">https://github.com/NetEase/Emmagee</a>  </p>\n</li>\n<li><p>Android py-uiautomator<br>py-uiautomator是一个对Android uiautomator用python进行封装的测试框架.<br>项目地址：<a href=\"https://github.com/xiaocong/uiautomator\">https://github.com/xiaocong/uiautomator</a>  </p>\n</li>\n<li><p>Augmented Traffic Control<br>Augmented Traffic Control: A tool to simulate network conditions(模拟网络状况)<br>模拟网络状况，包括带宽、时延抖动、丢包率、错包率、包重排率<br>项目地址：<a href=\"https://github.com/facebook/augmented-traffic-control\">https://github.com/facebook/augmented-traffic-control</a>   </p>\n</li>\n<li><p>stetho<br>Stetho is a debug bridge for Android applications, enabling the powerful Chrome Developer Tools and much more. 使用chrome来调试android设备<br>项目地址：<a href=\"https://github.com/facebook/stetho\">https://github.com/facebook/stetho</a>  </p>\n</li>\n</ol>\n<h4 id=\"四、开发及编译环境\"><a href=\"#四、开发及编译环境\" class=\"headerlink\" title=\"四、开发及编译环境\"></a>四、开发及编译环境</h4><ol>\n<li><p>Buck<br>facebook开源的Android编译工具，效率是ant的两倍。主要优点在于：<br>(1) 加快编译速度，通过并行利用多核cpu和跟踪不变资源减少增量编译时间实现<br>(2) 可以在编译系统中生成编译规则而无须另外的系统生成编译规则文件<br>(3) 编译同时可生成单元测试结果<br>(4) 既可用于IDE编译也可用于持续集成编译<br>(5) facebook持续优化中<br>项目地址：<a href=\"https://github.com/facebook/buck\">https://github.com/facebook/buck</a>  </p>\n</li>\n<li><p>Android Maven Plugin<br>Android Maven插件，可用于对android三方依赖进行管理。在J2EE开发中，maven是非常成熟的依赖库管理工具，可统一管理依赖库。<br>项目地址：<a href=\"https://github.com/jayway/maven-android-plugin\">https://github.com/jayway/maven-android-plugin</a>  </p>\n</li>\n<li><p>umeng-muti-channel-build-tool<br>渠道打包工具<br>项目地址：<a href=\"https://github.com/umeng/umeng-muti-channel-build-tool\">https://github.com/umeng/umeng-muti-channel-build-tool</a><br>另可参见Google的构建系统Gradle：<a href=\"http://tools.android.com/tech-docs/new-build-system/user-guide\">http://tools.android.com/tech-docs/new-build-system/user-guide</a>  </p>\n</li>\n<li><p>Genymotion<br>目前最好用最快的android模拟器<br>项目地址：<a href=\"http://www.genymotion.com/\">http://www.genymotion.com/</a><br>Android studio集成控件： <a href=\"http://plugins.jetbrains.com/plugin/7269?pr=idea\">http://plugins.jetbrains.com/plugin/7269?pr=idea</a><br>Cyril Mottier推荐：<a href=\"http://cyrilmottier.com/2013/06/27/a-productive-android-development-environment/\">http://cyrilmottier.com/2013/06/27/a-productive-android-development-environment/</a>  </p>\n</li>\n<li><p>gradle-mvn-push<br>方便的将Gradle的Artifacts上传到Maven仓库<br>项目地址：<a href=\"https://github.com/chrisbanes/gradle-mvn-push\">https://github.com/chrisbanes/gradle-mvn-push</a><br>文档介绍：<a href=\"https://github.com/chrisbanes/gradle-mvn-push#usage\">https://github.com/chrisbanes/gradle-mvn-push#usage</a>  </p>\n</li>\n<li><p>Android Emulator Plugin for Jenkins<br>Android模拟器 jenkins插件，用于Jenkins做持续集成时跑模拟器测试<br>项目地址：<a href=\"https://github.com/jenkinsci/android-emulator-plugin\">https://github.com/jenkinsci/android-emulator-plugin</a>  </p>\n</li>\n<li><p>Android Maven Plugin<br>管理应用所需要的依赖库。包括的构建工具有Maven、Gradle、ant、sbt<br>项目地址：<a href=\"https://github.com/mosabua/maven-android-sdk-deployer\">https://github.com/mosabua/maven-android-sdk-deployer</a>  </p>\n</li>\n<li><p>SDK Manager Plugin<br>下载和管理Android SDK的Gradle插件<br>项目地址：<a href=\"https://github.com/JakeWharton/sdk-manager-plugin\">https://github.com/JakeWharton/sdk-manager-plugin</a>  </p>\n</li>\n<li><p>Gradle Protobuf Plugin<br>将.proto文件转换成Java文件的gradle插件<br>项目地址：<a href=\"https://github.com/andrewkroh/gradle-protobuf-plugin\">https://github.com/andrewkroh/gradle-protobuf-plugin</a>  </p>\n</li>\n<li><p>ChromeADB<br>Chrome 的 Adb 插件，当登录后，能看到所有连接的设备并操作，可以看应用、进程、内存及磁盘使用情况等<br>项目地址：<a href=\"https://github.com/importre/chromeadb\">https://github.com/importre/chromeadb</a>  </p>\n</li>\n</ol>\n<h4 id=\"五、其他\"><a href=\"#五、其他\" class=\"headerlink\" title=\"五、其他\"></a>五、其他</h4><ol>\n<li><p>ViewServer<br>允许app运行在任何手机上都可以用HierarchyViewer查看<br>项目地址：<a href=\"https://github.com/romainguy/ViewServer\">https://github.com/romainguy/ViewServer</a>  </p>\n</li>\n<li><p>GridWichterle for Android<br>在整个系统上显示一个grid，用来帮助查看应用布局及使得布局更美观，可设置grid网格大小和颜色，android推荐48dp和8dp，可见 Android Design Guidelines – Metrics and Grids，比起hierarchyviewer相差甚远，不过偶尔可用来作为布局查看工具。<br>项目地址：<a href=\"https://github.com/inmite/android-grid-wichterle\">https://github.com/inmite/android-grid-wichterle</a><br>Demo地址：<a href=\"https://play.google.com/store/apps/details?id=eu.inmite.android.gridwichterle\">https://play.google.com/store/apps/details?id=eu.inmite.android.gridwichterle</a>  </p>\n</li>\n<li><p>Catlog<br>手机端log查看工具，支持不同颜色显示、关键字过滤、级别过滤、进程id过滤、录制功能等<br>项目地址：<a href=\"https://github.com/nolanlawson/Catlog\">https://github.com/nolanlawson/Catlog</a><br>在线演示：<a href=\"https://play.google.com/store/apps/details?id=com.nolanlawson.logcat\">https://play.google.com/store/apps/details?id=com.nolanlawson.logcat</a>  </p>\n</li>\n<li><p>PID Cat<br>根据package查看logcat日志<br>项目地址：<a href=\"https://github.com/JakeWharton/pidcat\">https://github.com/JakeWharton/pidcat</a>  </p>\n</li>\n<li><p>ACRA<br>应用崩溃信息日志上报到GoogleDoc工具，网页版展现结果三方开源地址<a href=\"https://github.com/BenoitDuffez/crashreportsviewer\">https://github.com/BenoitDuffez/crashreportsviewer</a><br>项目地址：<a href=\"https://github.com/ACRA/acra\">https://github.com/ACRA/acra</a><br>文档介绍：<a href=\"https://github.com/ACRA/acra/wiki/BasicSetup\">https://github.com/ACRA/acra/wiki/BasicSetup</a>  </p>\n</li>\n<li><p>Crashlytics<br>提供丰富的应用崩溃信息日志收集<br>轻量级，丰富，可自定义应用崩溃信息收集器，附有邮件通知<br>项目地址：<a href=\"http://www.crashlytics.com/\">http://www.crashlytics.com/</a><br>集成插件：<a href=\"http://try.crashlytics.com/sdk-android/?utm_source=blog&amp;utm_medium=blog&amp;utm_campaign=Announcing_android_studio_wp&amp;utm_content=CTA_button\">Android Studio, Eclipse and IntelliJ</a>  </p>\n</li>\n<li><p>Android Resource Navigator<br>chrome插件，可以方便的查看github上android源码工程的styles.xml和themes.xml。主要功能：<br>(1) 快速打开android styles.xml themes.xml<br>(2) 方便在资源间跳转。styles.xml themes.xml文件中资源链接跳转，可以方便跳转到某个资源<br>(3) 方便查找某个style和theme。chrome地址栏输入arn+tab+搜索内容回车即可<br>(4) 自动下载不同分辨率下的drawable<br>(5) 通过映射查找那些不是按照固定命名规则命名的style和theme<br>项目地址：<a href=\"https://github.com/jgilfelt/android-resource-navigator\">https://github.com/jgilfelt/android-resource-navigator</a><br>在线演示：<a href=\"https://chrome.google.com/webstore/detail/android-resource-navigato/agoomkionjjbejegcejiefodgbckeebo?hl=en&amp;gl=GB\">https://chrome.google.com/webstore/detail/android-resource-navigato/agoomkionjjbejegcejiefodgbckeebo?hl=en&amp;gl=GB</a>  </p>\n</li>\n<li><p>android-resource-remover<br>根据lint的提示删除项目中无用的资源，减少包的大小<br>项目地址：<a href=\"https://github.com/KeepSafe/android-resource-remover\">https://github.com/KeepSafe/android-resource-remover</a>  </p>\n</li>\n<li><p>Telescope<br>通过手势截图以特定主题发送到特定邮箱地址报告Bug<br>项目地址：<a href=\"https://github.com/mattprecious/telescope\">https://github.com/mattprecious/telescope</a>  </p>\n</li>\n<li><p>Complete Android Fragment &amp; Activity Lifecycle<br>完整的Android Fragment/Activity生命周期图<br>项目地址：<a href=\"https://github.com/xxv/android-lifecycle\">https://github.com/xxv/android-lifecycle</a>  </p>\n</li>\n<li><p>Bugsnag Notifier for Android<br>通过<code>Thread.UncaughtExceptionHandler</code>捕获应用未处理的异常崩溃 Bug 并用 Notification 展示同时上传到后台服务器<br>项目地址：<a href=\"https://github.com/bugsnag/bugsnag-android\">https://github.com/bugsnag/bugsnag-android</a><br>文档介绍：<a href=\"https://github.com/bugsnag/bugsnag-android#installation--setup\">https://github.com/bugsnag/bugsnag-android#installation--setup</a>  </p>\n</li>\n<li><p>Material Design Icons<br>Google Material Design 规范中的 Icon<br>项目地址：<a href=\"https://github.com/google/material-design-icons\">https://github.com/google/material-design-icons</a>  </p>\n</li>\n<li><p>scrollscreenshot<br>Android 滚动屏幕自动截图 jar 包，支持纵向、横向滚动截屏拼接<br>项目地址：<a href=\"https://github.com/PGSSoft/scrollscreenshot\">https://github.com/PGSSoft/scrollscreenshot</a><br>效果图：<img src=\"https://github.com/PGSSoft/scrollscreenshot/raw/master/samplehorizontal.png\" alt=\"Renderings\">  </p>\n</li>\n</ol>\n<ol>\n<li>droidicon<br>1600+的海量Icon，包括750+的Material Design icons<br>项目地址：<a href=\"https://github.com/theDazzler/droidicon\">https://github.com/theDazzler/droidicon</a>   </li>\n</ol>\n<h2 id=\"第五部分\"><a href=\"#第五部分\" class=\"headerlink\" title=\"第五部分\"></a>第五部分</h2><p>主要介绍那些乐于分享并且有一些很不错的开源项目的个人和组织。Follow大神，深挖大神的项目和following，你会发现很多。  </p>\n<h4 id=\"一、个人\"><a href=\"#一、个人\" class=\"headerlink\" title=\"一、个人\"></a>一、个人</h4><ol>\n<li><p>JakeWharton<br>就职于Square，绝对牛逼的大神，项目主要集中在Android版本兼容，ViewPager及开发工具上<br>Github地址：<a href=\"https://github.com/JakeWharton\">https://github.com/JakeWharton</a><br>代表作：ActionBarSherlock，Android-ViewPagerIndicator，Nine Old Androids，SwipeToDismissNOA，hugo，butterknife，Android-DirectionalViewPager, scalpel<br>pidcat另外对square及其他开源项目有很多贡献<br>主页：<a href=\"http://jakewharton.com/\">http://jakewharton.com/</a>  </p>\n</li>\n<li><p>Chris Banes<br>Github地址：<a href=\"https://github.com/chrisbanes\">https://github.com/chrisbanes</a><br>代表作：ActionBar-PullToRefresh，PhotoView，Android-BitmapCache，Android-PullToRefresh<br>主页：<a href=\"http://chris.banes.me/\">http://chris.banes.me/</a>  </p>\n</li>\n<li><p>Koushik Dutta<br>就职于ClockworkMod<br>Github地址：<a href=\"https://github.com/koush\">https://github.com/koush</a><br>代表作：Superuser，AndroidAsync，UrlImageViewHelper，ion, 另外对<a href=\"https://github.com/CyanogenMod\">https://github.com/CyanogenMod</a> 的开源项目有很多贡献<br>主页：<a href=\"http://koush.com/\">http://koush.com/</a>  </p>\n</li>\n<li><p>Simon Vig<br>Github地址：<a href=\"https://github.com/SimonVT\">https://github.com/SimonVT</a><br>代表作：android-menudrawer，MessageBar<br>主页：<a href=\"http://simonvt.net/\">http://simonvt.net/</a>  </p>\n</li>\n<li><p>Manuel Peinado<br>Github地址：<a href=\"https://github.com/ManuelPeinado\">https://github.com/ManuelPeinado</a><br>代表作：FadingActionBar，GlassActionBar，RefreshActionItem，QuickReturnHeader  </p>\n</li>\n<li><p>Emil Sj?lander<br>Github地址：<a href=\"https://github.com/emilsjolander\">https://github.com/emilsjolander</a><br>代表作：StickyListHeaders，sprinkles，android-FlipView<br>主页：<a href=\"http://emilsjolander.se/\">http://emilsjolander.se/</a>  </p>\n</li>\n<li><p>greenrobot<br>Github地址：<a href=\"https://github.com/greenrobot\">https://github.com/greenrobot</a><br>代表作：greenDAO，EventBus<br>主页：<a href=\"http://greenrobot.de/\">http://greenrobot.de/</a>  </p>\n</li>\n<li><p>Jeff Gilfelt<br>Github地址：<a href=\"https://github.com/jgilfelt\">https://github.com/jgilfelt</a><br>代表作：android-mapviewballoons，android-viewbadger，android-actionbarstylegenerator，android-sqlite-asset-helper<br>主页：<a href=\"http://jeffgilfelt.com\">http://jeffgilfelt.com</a>  </p>\n</li>\n<li><p>Romain Guy<br>Android team成员(2013.10已离开Android team，仍在Google)<br>Github地址：<a href=\"https://github.com/romainguy\">https://github.com/romainguy</a><br>代表作：ViewServer<br>主页：<a href=\"http://www.curious-creature.org/category/android/\">http://www.curious-creature.org/category/android/</a><br>個人攝影作品：<a href=\"http://www.flickr.com/photos/romainguy\">http://www.flickr.com/photos/romainguy</a>  </p>\n</li>\n<li><p>sephiroth74<br>就职于Aviary.com<br>Github地址：<a href=\"https://github.com/sephiroth74\">https://github.com/sephiroth74</a><br>代表作：ImageViewZoom，HorizontalVariableListView，AndroidWheel，purePDF<br>主页：<a href=\"http://www.sephiroth.it/\">http://www.sephiroth.it/</a>  </p>\n</li>\n<li><p>Cyril Mottier<br>Google开发者专家认证，发布一些Android技巧及文章<br>Github地址：<a href=\"https://github.com/cyrilmottier\">https://github.com/cyrilmottier</a><br>代表作：GreenDroid，Polaris<br>主页：<a href=\"http://cyrilmottier.com/\">http://cyrilmottier.com/</a>  </p>\n</li>\n</ol>\n<h4 id=\"二、组织\"><a href=\"#二、组织\" class=\"headerlink\" title=\"二、组织\"></a>二、组织</h4><ol>\n<li><p>Square<br>有态度有良心的企业，很多不错的分享<br>Github地址：<a href=\"https://github.com/square\">https://github.com/square</a><br>代表作：okhttp、fest-android，android-times-square、picasso、dagger、spoon等等<br>主页：<a href=\"http://square.github.io/\">http://square.github.io/</a>  </p>\n</li>\n<li><p>Inmite s.r.o.<br>Github地址：<a href=\"https://github.com/inmite\">https://github.com/inmite</a><br>代表作：android-styled-dialogs，android-grid-wichterle，android-selector-chapek<br>主页：<a href=\"http://www.inmite.eu/\">http://www.inmite.eu/</a>  </p>\n</li>\n</ol>\n<h4 id=\"三、博客\"><a href=\"#三、博客\" class=\"headerlink\" title=\"三、博客\"></a>三、博客</h4><p><a href=\"https://github.com/android-cn/android-dev-com\">部分国外著名 Android 开发者信息</a>  </p>\n<hr>\n<p>本博客转自<a href=\"https://github.com/comtu/android-open-project\">trinea</a> 2015年3月31日版本<br>还会陆续更新中…   </p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cinu3etww0008xoj05hvkuwy3","category_id":"cinu3etwr0005xoj0lmgavs7j","_id":"cinu3etx9000exoj0mb0qna8v"},{"post_id":"cinu3etwa0000xoj0ygc1o09t","category_id":"cinu3etwr0005xoj0lmgavs7j","_id":"cinu3etxe000ixoj0hijgc1cg"},{"post_id":"cinu3etwj0002xoj0rbw5w9po","category_id":"cinu3etwr0005xoj0lmgavs7j","_id":"cinu3etxg000kxoj0ac5tg2og"},{"post_id":"cinu3etws0006xoj0di3vv9ju","category_id":"cinu3etwr0005xoj0lmgavs7j","_id":"cinu3etxl000pxoj0qzuxjqjf"},{"post_id":"cinu3etwy000axoj07o5x7w2b","category_id":"cinu3etxi000mxoj0ky88pz8r","_id":"cinu3etxs000vxoj05ntxmisx"},{"post_id":"cinu3etx6000dxoj0p8nd1nzr","category_id":"cinu3etxn000rxoj0248vqe5q","_id":"cinu3ety20010xoj0f3m4umjd"},{"post_id":"cinu3etxb000fxoj0saqpryyl","category_id":"cinu3etxi000mxoj0ky88pz8r","_id":"cinu3ety90016xoj03wwwa4tx"},{"post_id":"cinu3ety30012xoj0cphahduo","category_id":"cinu3ety30011xoj0nm1bth4h","_id":"cinu3etyc001bxoj0gdg0d4ib"},{"post_id":"cinu3etxe000jxoj0r01p54ba","category_id":"cinu3ety30011xoj0nm1bth4h","_id":"cinu3etyf001exoj0954jxw2s"},{"post_id":"cinu3ety70015xoj0c33lahyi","category_id":"cinu3ety30011xoj0nm1bth4h","_id":"cinu3etyj001jxoj0s09mzqs2"},{"post_id":"cinu3etxh000lxoj0it1y9nkv","category_id":"cinu3ety30011xoj0nm1bth4h","_id":"cinu3etyl001mxoj0i0jcjal8"},{"post_id":"cinu3etyk001lxoj0wcu2e3v6","category_id":"cinu3etyf001fxoj0mhesr752","_id":"cinu3etyv001txoj0q82w6f4o"},{"post_id":"cinu3etxj000oxoj0ih94wlv1","category_id":"cinu3etyf001fxoj0mhesr752","_id":"cinu3etyz001yxoj07kentgzc"},{"post_id":"cinu3etym001oxoj0hbsgzkrh","category_id":"cinu3etyf001fxoj0mhesr752","_id":"cinu3etz10021xoj0a6zqpj85"},{"post_id":"cinu3etyt001rxoj0i2xpqi15","category_id":"cinu3ety30011xoj0nm1bth4h","_id":"cinu3etz30023xoj0e0mdd8u0"},{"post_id":"cinu3etxm000qxoj04fenl2uf","category_id":"cinu3etyp001pxoj00nbymt68","_id":"cinu3etz40026xoj0x1kydrgk"},{"post_id":"cinu3etxp000txoj0qiqf38si","category_id":"cinu3ety30011xoj0nm1bth4h","_id":"cinu3etz50029xoj067cr9ttf"},{"post_id":"cinu3etxr000uxoj0rg5m0p5o","category_id":"cinu3ety30011xoj0nm1bth4h","_id":"cinu3etz6002bxoj0ymlkn3ju"},{"post_id":"cinu3etxu000yxoj0czmzrwrt","category_id":"cinu3ety30011xoj0nm1bth4h","_id":"cinu3etz7002exoj0zbv772er"},{"post_id":"cinu3ety0000zxoj0gshool86","category_id":"cinu3ety30011xoj0nm1bth4h","_id":"cinu3etz9002hxoj0s4kavq6g"},{"post_id":"cinu3etya0019xoj0wt8bdpwy","category_id":"cinu3etyf001fxoj0mhesr752","_id":"cinu3etzb002kxoj0s0zp2pwu"},{"post_id":"cinu3etyd001dxoj0qw1uodyj","category_id":"cinu3etyf001fxoj0mhesr752","_id":"cinu3etzd002mxoj0sj8n1kx6"},{"post_id":"cinu3etyg001hxoj0oxnd30hv","category_id":"cinu3etyf001fxoj0mhesr752","_id":"cinu3etze002pxoj0tbihj2i2"},{"post_id":"cinu3etyw001uxoj0hb0uaw0n","category_id":"cinu3etzd002oxoj0ggjxs4pd","_id":"cinu3etzg002sxoj0fhkmxiye"},{"post_id":"cinu3etyz001zxoj0ayp39j74","category_id":"cinu3etzd002oxoj0ggjxs4pd","_id":"cinu3etzh002vxoj0j22dgnhh"},{"post_id":"cinu3eu4v0083xoj0qm2xutxz","category_id":"cinu3ety30011xoj0nm1bth4h","_id":"cinu3eu4y0086xoj02wqd36c2"}],"PostTag":[{"post_id":"cinu3etww0008xoj05hvkuwy3","tag_id":"cinu3etwo0004xoj03umosis3","_id":"cinu3etx5000cxoj0nypo2c2x"},{"post_id":"cinu3etwa0000xoj0ygc1o09t","tag_id":"cinu3etwo0004xoj03umosis3","_id":"cinu3ety60014xoj07ni9ovnm"},{"post_id":"cinu3etwa0000xoj0ygc1o09t","tag_id":"cinu3etwy0009xoj0akdatej4","_id":"cinu3etya0018xoj0n69pk6c0"},{"post_id":"cinu3etwa0000xoj0ygc1o09t","tag_id":"cinu3etxd000hxoj0ahsyy959","_id":"cinu3etyc001cxoj0gybpq94l"},{"post_id":"cinu3etwa0000xoj0ygc1o09t","tag_id":"cinu3etxj000nxoj07wi40ltx","_id":"cinu3etyf001gxoj0zlbv2l25"},{"post_id":"cinu3etwa0000xoj0ygc1o09t","tag_id":"cinu3etxo000sxoj0igw85fcr","_id":"cinu3etyj001kxoj0qgdxuw4f"},{"post_id":"cinu3etwa0000xoj0ygc1o09t","tag_id":"cinu3etxt000xxoj0a1nke4v3","_id":"cinu3etyl001nxoj01adb0ozj"},{"post_id":"cinu3etwj0002xoj0rbw5w9po","tag_id":"cinu3etwo0004xoj03umosis3","_id":"cinu3etyu001sxoj0k2v4ilbz"},{"post_id":"cinu3etwj0002xoj0rbw5w9po","tag_id":"cinu3etyc001axoj0jp3kxrqq","_id":"cinu3etyy001wxoj0qtv65rlu"},{"post_id":"cinu3etwj0002xoj0rbw5w9po","tag_id":"cinu3etyj001ixoj0h5vaqv7f","_id":"cinu3etz10020xoj0g2dte0tz"},{"post_id":"cinu3etws0006xoj0di3vv9ju","tag_id":"cinu3etwo0004xoj03umosis3","_id":"cinu3etz40025xoj0xv8g7dvg"},{"post_id":"cinu3etws0006xoj0di3vv9ju","tag_id":"cinu3etyy001xxoj0depncl7n","_id":"cinu3etz50028xoj0z4jgetkt"},{"post_id":"cinu3etwy000axoj07o5x7w2b","tag_id":"cinu3etz30024xoj0pbhxqv9z","_id":"cinu3etzh002uxoj00atvi8vq"},{"post_id":"cinu3etwy000axoj07o5x7w2b","tag_id":"cinu3etz5002axoj05aqwkgx4","_id":"cinu3etzi002wxoj00ebfb7cd"},{"post_id":"cinu3etwy000axoj07o5x7w2b","tag_id":"cinu3etz7002dxoj01n63eru9","_id":"cinu3etzj002yxoj0gs95aiir"},{"post_id":"cinu3etwy000axoj07o5x7w2b","tag_id":"cinu3etz9002gxoj0152sfi2n","_id":"cinu3etzj002zxoj04febijin"},{"post_id":"cinu3etwy000axoj07o5x7w2b","tag_id":"cinu3etza002jxoj0q9yve81x","_id":"cinu3etzk0031xoj0yytntymd"},{"post_id":"cinu3etwy000axoj07o5x7w2b","tag_id":"cinu3etzd002nxoj002cwr15q","_id":"cinu3etzk0032xoj0x0xzr1g5"},{"post_id":"cinu3etwy000axoj07o5x7w2b","tag_id":"cinu3etzf002qxoj0ll93axl0","_id":"cinu3etzl0034xoj0ncw6md26"},{"post_id":"cinu3etx6000dxoj0p8nd1nzr","tag_id":"cinu3etzg002txoj09rf32ern","_id":"cinu3etzl0035xoj05drnr99q"},{"post_id":"cinu3etx6000dxoj0p8nd1nzr","tag_id":"cinu3etzi002xxoj09npyg6rw","_id":"cinu3etzm0037xoj0t7hwijqx"},{"post_id":"cinu3etxb000fxoj0saqpryyl","tag_id":"cinu3etz30024xoj0pbhxqv9z","_id":"cinu3etzn003axoj0qjkpz7hq"},{"post_id":"cinu3etxb000fxoj0saqpryyl","tag_id":"cinu3etzl0033xoj0u39fibqv","_id":"cinu3etzo003bxoj0hhd9u1s6"},{"post_id":"cinu3etxb000fxoj0saqpryyl","tag_id":"cinu3etzm0036xoj0amui6f3c","_id":"cinu3etzo003dxoj0bmors7a3"},{"post_id":"cinu3etxb000fxoj0saqpryyl","tag_id":"cinu3etzn0038xoj0sehfqk1t","_id":"cinu3etzo003exoj0jj82c7qh"},{"post_id":"cinu3etxe000jxoj0r01p54ba","tag_id":"cinu3etzn0039xoj0p57ld04g","_id":"cinu3etzp003gxoj0nyff6u1o"},{"post_id":"cinu3etxe000jxoj0r01p54ba","tag_id":"cinu3etyy001xxoj0depncl7n","_id":"cinu3etzq003hxoj06c1150ko"},{"post_id":"cinu3etxh000lxoj0it1y9nkv","tag_id":"cinu3etzn0039xoj0p57ld04g","_id":"cinu3etzr003kxoj0amo6qhyw"},{"post_id":"cinu3etxh000lxoj0it1y9nkv","tag_id":"cinu3etyy001xxoj0depncl7n","_id":"cinu3etzs003lxoj0obesre9w"},{"post_id":"cinu3etxj000oxoj0ih94wlv1","tag_id":"cinu3etzr003jxoj0khf3volz","_id":"cinu3etzz003rxoj0z5zohnpv"},{"post_id":"cinu3etxj000oxoj0ih94wlv1","tag_id":"cinu3etzs003mxoj01llrchsx","_id":"cinu3etzz003sxoj05a08g64l"},{"post_id":"cinu3etxj000oxoj0ih94wlv1","tag_id":"cinu3etzx003nxoj0iw9jt5a5","_id":"cinu3eu00003uxoj0q97xu6nu"},{"post_id":"cinu3etxj000oxoj0ih94wlv1","tag_id":"cinu3etzy003oxoj0it4xgv8u","_id":"cinu3eu00003vxoj0tmn45s3q"},{"post_id":"cinu3etxj000oxoj0ih94wlv1","tag_id":"cinu3etzy003pxoj04o5b5xnk","_id":"cinu3eu00003xxoj0ahnt1tbg"},{"post_id":"cinu3etxm000qxoj04fenl2uf","tag_id":"cinu3etzy003qxoj0dzmcf93p","_id":"cinu3eu00003yxoj0sditejw4"},{"post_id":"cinu3etxm000qxoj04fenl2uf","tag_id":"cinu3etzz003txoj0cqp8fs70","_id":"cinu3eu010040xoj08zugeut9"},{"post_id":"cinu3etxp000txoj0qiqf38si","tag_id":"cinu3eu00003wxoj09s6xl1fk","_id":"cinu3eu010042xoj0gkpjflp7"},{"post_id":"cinu3etxp000txoj0qiqf38si","tag_id":"cinu3eu00003zxoj0l7efev3i","_id":"cinu3eu010043xoj08u4xwr3l"},{"post_id":"cinu3etxr000uxoj0rg5m0p5o","tag_id":"cinu3eu010041xoj0az7mb0qv","_id":"cinu3eu05004exoj0uawdjpky"},{"post_id":"cinu3etxr000uxoj0rg5m0p5o","tag_id":"cinu3eu010044xoj0ky6iciwk","_id":"cinu3eu05004fxoj0xxqgtcbj"},{"post_id":"cinu3etxr000uxoj0rg5m0p5o","tag_id":"cinu3eu020045xoj02upv1qae","_id":"cinu3eu06004hxoj095mmpheh"},{"post_id":"cinu3etxr000uxoj0rg5m0p5o","tag_id":"cinu3eu020046xoj0d14xl7qi","_id":"cinu3eu06004ixoj0z3bwfer6"},{"post_id":"cinu3etxr000uxoj0rg5m0p5o","tag_id":"cinu3eu030047xoj02tdfemx0","_id":"cinu3eu06004kxoj0jw7s2a0a"},{"post_id":"cinu3etxr000uxoj0rg5m0p5o","tag_id":"cinu3eu030048xoj0hig9t4ak","_id":"cinu3eu06004lxoj0s6kakes6"},{"post_id":"cinu3etxr000uxoj0rg5m0p5o","tag_id":"cinu3eu040049xoj014h43ybm","_id":"cinu3eu07004nxoj0j9t0fa3i"},{"post_id":"cinu3etxr000uxoj0rg5m0p5o","tag_id":"cinu3eu04004axoj0qr26whve","_id":"cinu3eu07004oxoj01qdetyz0"},{"post_id":"cinu3etxr000uxoj0rg5m0p5o","tag_id":"cinu3eu04004bxoj08mmqhtaw","_id":"cinu3eu07004qxoj0sh0z8urf"},{"post_id":"cinu3etxr000uxoj0rg5m0p5o","tag_id":"cinu3eu04004cxoj0suwrcq2n","_id":"cinu3eu07004rxoj0t86bvykm"},{"post_id":"cinu3etxu000yxoj0czmzrwrt","tag_id":"cinu3eu010041xoj0az7mb0qv","_id":"cinu3eu09004vxoj03001g6lr"},{"post_id":"cinu3etxu000yxoj0czmzrwrt","tag_id":"cinu3eu05004gxoj0ku099t10","_id":"cinu3eu09004wxoj07pvw1x06"},{"post_id":"cinu3etxu000yxoj0czmzrwrt","tag_id":"cinu3eu06004jxoj0tkdlon1j","_id":"cinu3eu09004yxoj0dyowpigs"},{"post_id":"cinu3etxu000yxoj0czmzrwrt","tag_id":"cinu3eu06004mxoj0f9sqxhep","_id":"cinu3eu09004zxoj0lc3rz2lu"},{"post_id":"cinu3etxu000yxoj0czmzrwrt","tag_id":"cinu3eu07004pxoj0m5oyky09","_id":"cinu3eu0a0051xoj0ob3ugv6j"},{"post_id":"cinu3etxu000yxoj0czmzrwrt","tag_id":"cinu3eu07004sxoj00qlv9wp9","_id":"cinu3eu0a0052xoj02kebgy0t"},{"post_id":"cinu3etxu000yxoj0czmzrwrt","tag_id":"cinu3eu08004txoj09sylcfro","_id":"cinu3eu0a0054xoj0ku7a0wg7"},{"post_id":"cinu3ety0000zxoj0gshool86","tag_id":"cinu3eu010041xoj0az7mb0qv","_id":"cinu3eu0b0055xoj0ckvyfr6p"},{"post_id":"cinu3ety30012xoj0cphahduo","tag_id":"cinu3eu09004xxoj0xsfiy4lk","_id":"cinu3eu0b0057xoj0q4byt6nf"},{"post_id":"cinu3ety30012xoj0cphahduo","tag_id":"cinu3eu0a0050xoj0hpvg4t2k","_id":"cinu3eu0b0058xoj0u37mp7ch"},{"post_id":"cinu3ety30012xoj0cphahduo","tag_id":"cinu3eu0a0053xoj0isb4tjar","_id":"cinu3eu0d005axoj0z2qsbhik"},{"post_id":"cinu3ety70015xoj0c33lahyi","tag_id":"cinu3eu09004xxoj0xsfiy4lk","_id":"cinu3eu0e005dxoj0a3eipnqh"},{"post_id":"cinu3ety70015xoj0c33lahyi","tag_id":"cinu3eu0a0050xoj0hpvg4t2k","_id":"cinu3eu0f005exoj00opltdga"},{"post_id":"cinu3ety70015xoj0c33lahyi","tag_id":"cinu3eu0a0053xoj0isb4tjar","_id":"cinu3eu0f005gxoj04yl2g0ti"},{"post_id":"cinu3etya0019xoj0wt8bdpwy","tag_id":"cinu3eu09004xxoj0xsfiy4lk","_id":"cinu3eu0g005jxoj0yhnv4wcw"},{"post_id":"cinu3etya0019xoj0wt8bdpwy","tag_id":"cinu3eu0a0050xoj0hpvg4t2k","_id":"cinu3eu0g005kxoj0qx42dc6o"},{"post_id":"cinu3etya0019xoj0wt8bdpwy","tag_id":"cinu3eu0a0053xoj0isb4tjar","_id":"cinu3eu0h005mxoj0v1x1cjgx"},{"post_id":"cinu3etyd001dxoj0qw1uodyj","tag_id":"cinu3eu0f005ixoj0xq3ek92d","_id":"cinu3eu0m0063xoj0xz2jg2pa"},{"post_id":"cinu3etyd001dxoj0qw1uodyj","tag_id":"cinu3eu0g005lxoj0aoae5lel","_id":"cinu3eu0n0064xoj0z7pnfjqk"},{"post_id":"cinu3etyd001dxoj0qw1uodyj","tag_id":"cinu3eu0h005nxoj0uy72ogsv","_id":"cinu3eu0n0066xoj09xyap84c"},{"post_id":"cinu3etyd001dxoj0qw1uodyj","tag_id":"cinu3eu0h005oxoj0wgkmc887","_id":"cinu3eu0n0067xoj0och5lvdh"},{"post_id":"cinu3etyd001dxoj0qw1uodyj","tag_id":"cinu3eu0h005pxoj0lrkn0hdd","_id":"cinu3eu0o0069xoj0482ovhrc"},{"post_id":"cinu3etyd001dxoj0qw1uodyj","tag_id":"cinu3eu0i005qxoj0puqoc4b3","_id":"cinu3eu0o006axoj0peoi6glu"},{"post_id":"cinu3etyd001dxoj0qw1uodyj","tag_id":"cinu3eu0i005rxoj02x6a5qhv","_id":"cinu3eu0p006cxoj0t9irmfu2"},{"post_id":"cinu3etyd001dxoj0qw1uodyj","tag_id":"cinu3eu0i005sxoj0s73o0rw8","_id":"cinu3eu0p006dxoj0plav9vat"},{"post_id":"cinu3etyd001dxoj0qw1uodyj","tag_id":"cinu3eu0j005txoj04n6zu3v5","_id":"cinu3eu0p006exoj0xg19iec0"},{"post_id":"cinu3etyd001dxoj0qw1uodyj","tag_id":"cinu3eu0j005uxoj0lag7wdwa","_id":"cinu3eu0q006gxoj0gtxyv4am"},{"post_id":"cinu3etyd001dxoj0qw1uodyj","tag_id":"cinu3eu0j005vxoj0wdxkj8x5","_id":"cinu3eu0q006hxoj0g4sp49ru"},{"post_id":"cinu3etyd001dxoj0qw1uodyj","tag_id":"cinu3eu0j005wxoj01ahbo3tu","_id":"cinu3eu0r006jxoj00ip42mw9"},{"post_id":"cinu3etyd001dxoj0qw1uodyj","tag_id":"cinu3eu0k005xxoj075uj59h6","_id":"cinu3eu0r006kxoj00dgp3kay"},{"post_id":"cinu3etyd001dxoj0qw1uodyj","tag_id":"cinu3eu0k005yxoj0xvaiv5j7","_id":"cinu3eu0r006mxoj09j26gtwz"},{"post_id":"cinu3etyd001dxoj0qw1uodyj","tag_id":"cinu3eu0k005zxoj0ws715q17","_id":"cinu3eu0r006nxoj0cmsw8uc8"},{"post_id":"cinu3etyd001dxoj0qw1uodyj","tag_id":"cinu3eu0l0060xoj0epnkh36m","_id":"cinu3eu0s006pxoj0450k8szt"},{"post_id":"cinu3etyd001dxoj0qw1uodyj","tag_id":"cinu3eu0l0061xoj0f48gblb9","_id":"cinu3eu0s006qxoj0v5nmdb9q"},{"post_id":"cinu3etyg001hxoj0oxnd30hv","tag_id":"cinu3eu0l0062xoj0m20n9pml","_id":"cinu3eu0s006sxoj0kg05c9c3"},{"post_id":"cinu3etyg001hxoj0oxnd30hv","tag_id":"cinu3eu0n0065xoj05g9qdb48","_id":"cinu3eu0t006txoj0x3digdsw"},{"post_id":"cinu3etyg001hxoj0oxnd30hv","tag_id":"cinu3eu0n0068xoj0xf1xuhon","_id":"cinu3eu0t006uxoj0l48yolq5"},{"post_id":"cinu3etyg001hxoj0oxnd30hv","tag_id":"cinu3eu0p006bxoj03w77ch0v","_id":"cinu3eu0t006wxoj0iiuqc48j"},{"post_id":"cinu3etyg001hxoj0oxnd30hv","tag_id":"cinu3eu0p006fxoj0ftnq4py9","_id":"cinu3eu0t006xxoj0xadhuf7i"},{"post_id":"cinu3etyk001lxoj0wcu2e3v6","tag_id":"cinu3eu0q006ixoj05ebjblhv","_id":"cinu3eu0v0071xoj0nrgpcfk4"},{"post_id":"cinu3etyk001lxoj0wcu2e3v6","tag_id":"cinu3eu0l0062xoj0m20n9pml","_id":"cinu3eu0w0072xoj0ltl02ric"},{"post_id":"cinu3etyk001lxoj0wcu2e3v6","tag_id":"cinu3eu0s006oxoj0mz79w5se","_id":"cinu3eu0w0074xoj0sptsj86m"},{"post_id":"cinu3etyk001lxoj0wcu2e3v6","tag_id":"cinu3eu0s006rxoj0o8xv9qw5","_id":"cinu3eu0w0075xoj0ttrte68d"},{"post_id":"cinu3etyk001lxoj0wcu2e3v6","tag_id":"cinu3eu0t006vxoj0bw8bjrqe","_id":"cinu3eu0x0077xoj03lw078n0"},{"post_id":"cinu3etyk001lxoj0wcu2e3v6","tag_id":"cinu3eu0t006yxoj0q60gdqip","_id":"cinu3eu0x0078xoj0s42bny1e"},{"post_id":"cinu3etyk001lxoj0wcu2e3v6","tag_id":"cinu3eu0u006zxoj0qzsbktzr","_id":"cinu3eu0y007axoj0az735xs3"},{"post_id":"cinu3etym001oxoj0hbsgzkrh","tag_id":"cinu3eu0p006fxoj0ftnq4py9","_id":"cinu3eu0z007exoj0nvrk373s"},{"post_id":"cinu3etym001oxoj0hbsgzkrh","tag_id":"cinu3eu0w0073xoj0jt7d2tox","_id":"cinu3eu10007fxoj0cv8ym6ag"},{"post_id":"cinu3etym001oxoj0hbsgzkrh","tag_id":"cinu3eu0w0076xoj0htijvbvv","_id":"cinu3eu10007hxoj07mqxaemf"},{"post_id":"cinu3etym001oxoj0hbsgzkrh","tag_id":"cinu3eu0x0079xoj0sm8owdrf","_id":"cinu3eu10007ixoj0kvsivyzj"},{"post_id":"cinu3etym001oxoj0hbsgzkrh","tag_id":"cinu3eu0y007bxoj035emk67k","_id":"cinu3eu11007kxoj07eoc4yx5"},{"post_id":"cinu3etym001oxoj0hbsgzkrh","tag_id":"cinu3eu0y007cxoj0tz1zuuie","_id":"cinu3eu11007lxoj013vco6m4"},{"post_id":"cinu3etyt001rxoj0i2xpqi15","tag_id":"cinu3etzn0039xoj0p57ld04g","_id":"cinu3eu12007nxoj01fq4oc1x"},{"post_id":"cinu3etyt001rxoj0i2xpqi15","tag_id":"cinu3eu10007gxoj0pd40dgug","_id":"cinu3eu12007oxoj0nc7m1dau"},{"post_id":"cinu3etyt001rxoj0i2xpqi15","tag_id":"cinu3eu10007jxoj0qfimq2jk","_id":"cinu3eu13007qxoj0ewklwhs9"},{"post_id":"cinu3etyw001uxoj0hb0uaw0n","tag_id":"cinu3eu11007mxoj0zllzwew6","_id":"cinu3eu14007txoj0pmjb96j0"},{"post_id":"cinu3etyw001uxoj0hb0uaw0n","tag_id":"cinu3eu12007pxoj01j1bnp1l","_id":"cinu3eu14007uxoj0hfemedjf"},{"post_id":"cinu3etyw001uxoj0hb0uaw0n","tag_id":"cinu3eu13007rxoj01r3ov99z","_id":"cinu3eu14007wxoj0lirwjm05"},{"post_id":"cinu3etyz001zxoj0ayp39j74","tag_id":"cinu3eu11007mxoj0zllzwew6","_id":"cinu3eu17007zxoj0o1ukows9"},{"post_id":"cinu3etyz001zxoj0ayp39j74","tag_id":"cinu3eu14007vxoj0x1rv6q79","_id":"cinu3eu170080xoj054vz8zf4"},{"post_id":"cinu3etyz001zxoj0ayp39j74","tag_id":"cinu3eu14007xxoj02v5y5kkr","_id":"cinu3eu170081xoj0aadcfuv0"},{"post_id":"cinu3etyz001zxoj0ayp39j74","tag_id":"cinu3eu15007yxoj08xge1w6r","_id":"cinu3eu170082xoj0un75qnoi"},{"post_id":"cinu3eu4v0083xoj0qm2xutxz","tag_id":"cinu3etzn0039xoj0p57ld04g","_id":"cinu3eu4y0084xoj0mxv9mmp7"},{"post_id":"cinu3eu4v0083xoj0qm2xutxz","tag_id":"cinu3etyy001xxoj0depncl7n","_id":"cinu3eu4y0085xoj04lmy9oul"}],"Tag":[{"name":"Jekyll","_id":"cinu3etwo0004xoj03umosis3"},{"name":"Demo","_id":"cinu3etwy0009xoj0akdatej4"},{"name":"Test","_id":"cinu3etxd000hxoj0ahsyy959"},{"name":"SyntaxHihglighter","_id":"cinu3etxj000nxoj07wi40ltx"},{"name":"pygments","_id":"cinu3etxo000sxoj0igw85fcr"},{"name":"Markdown","_id":"cinu3etxt000xxoj0a1nke4v3"},{"name":"Pygments","_id":"cinu3etyc001axoj0jp3kxrqq"},{"name":"语法高亮","_id":"cinu3etyj001ixoj0h5vaqv7f"},{"name":"GitHub","_id":"cinu3etyy001xxoj0depncl7n"},{"name":"设计模式","_id":"cinu3etz30024xoj0pbhxqv9z"},{"name":"单例设计模式","_id":"cinu3etz5002axoj05aqwkgx4"},{"name":"Singleton","_id":"cinu3etz7002dxoj01n63eru9"},{"name":"饿汉式","_id":"cinu3etz9002gxoj0152sfi2n"},{"name":"懒汉式","_id":"cinu3etza002jxoj0q9yve81x"},{"name":"Double-checked locking","_id":"cinu3etzd002nxoj002cwr15q"},{"name":"双重检查锁定","_id":"cinu3etzf002qxoj0ll93axl0"},{"name":"Git","_id":"cinu3etzg002txoj09rf32ern"},{"name":"版本控制","_id":"cinu3etzi002xxoj09npyg6rw"},{"name":"模板模式","_id":"cinu3etzl0033xoj0u39fibqv"},{"name":"模板方法模式","_id":"cinu3etzm0036xoj0amui6f3c"},{"name":"Template","_id":"cinu3etzn0038xoj0sehfqk1t"},{"name":"Android","_id":"cinu3etzn0039xoj0p57ld04g"},{"name":"java","_id":"cinu3etzr003jxoj0khf3volz"},{"name":"lambda","_id":"cinu3etzs003mxoj01llrchsx"},{"name":"stream","_id":"cinu3etzx003nxoj0iw9jt5a5"},{"name":"java8","_id":"cinu3etzy003oxoj0it4xgv8u"},{"name":"接口的默认方法和静态方法","_id":"cinu3etzy003pxoj04o5b5xnk"},{"name":"HTML5","_id":"cinu3etzy003qxoj0dzmcf93p"},{"name":"HTML","_id":"cinu3etzz003txoj0cqp8fs70"},{"name":"windows环境下搭建Android开发环境","_id":"cinu3eu00003wxoj09s6xl1fk"},{"name":"Android程序自动化打包","_id":"cinu3eu00003zxoj0l7efev3i"},{"name":"Android安全模式机制","_id":"cinu3eu010041xoj0az7mb0qv"},{"name":"进程和进程边界","_id":"cinu3eu010044xoj0ky6iciwk"},{"name":"多用户和多用户边界","_id":"cinu3eu020045xoj02upv1qae"},{"name":"进程和文件的UID/GID","_id":"cinu3eu020046xoj0d14xl7qi"},{"name":"Chmod和chown命令介绍","_id":"cinu3eu030047xoj02tdfemx0"},{"name":"linux","_id":"cinu3eu030048xoj0hig9t4ak"},{"name":"UID/GID的衔接","_id":"cinu3eu040049xoj014h43ybm"},{"name":"进程的RealUID和EffectiveUID","_id":"cinu3eu04004axoj0qr26whve"},{"name":"setUID","_id":"cinu3eu04004bxoj08mmqhtaw"},{"name":"Capability","_id":"cinu3eu04004cxoj0suwrcq2n"},{"name":"对称加密","_id":"cinu3eu05004gxoj0ku099t10"},{"name":"非对称加密","_id":"cinu3eu06004jxoj0tkdlon1j"},{"name":"密钥交换","_id":"cinu3eu06004mxoj0f9sqxhep"},{"name":"消息摘要","_id":"cinu3eu07004pxoj0m5oyky09"},{"name":"电子签名","_id":"cinu3eu07004sxoj00qlv9wp9"},{"name":"证书与PKI","_id":"cinu3eu08004txoj09sylcfro"},{"name":"AndroidNDK","_id":"cinu3eu09004xxoj0xsfiy4lk"},{"name":"NDK","_id":"cinu3eu0a0050xoj0hpvg4t2k"},{"name":"JNI","_id":"cinu3eu0a0053xoj0isb4tjar"},{"name":"Java","_id":"cinu3eu0f005ixoj0xq3ek92d"},{"name":"Base64","_id":"cinu3eu0g005lxoj0aoae5lel"},{"name":"AES","_id":"cinu3eu0h005nxoj0uy72ogsv"},{"name":"CRC","_id":"cinu3eu0h005oxoj0wgkmc887"},{"name":"DES","_id":"cinu3eu0h005pxoj0lrkn0hdd"},{"name":"DH","_id":"cinu3eu0i005qxoj0puqoc4b3"},{"name":"DSA","_id":"cinu3eu0i005rxoj02x6a5qhv"},{"name":"ECDSA","_id":"cinu3eu0i005sxoj0s73o0rw8"},{"name":"ElGamal","_id":"cinu3eu0j005txoj04n6zu3v5"},{"name":"HMAC","_id":"cinu3eu0j005uxoj0lag7wdwa"},{"name":"IDEA","_id":"cinu3eu0j005vxoj0wdxkj8x5"},{"name":"MD","_id":"cinu3eu0j005wxoj01ahbo3tu"},{"name":"PBE","_id":"cinu3eu0k005xxoj075uj59h6"},{"name":"RSA","_id":"cinu3eu0k005yxoj0xvaiv5j7"},{"name":"SHA","_id":"cinu3eu0k005zxoj0ws715q17"},{"name":"加密","_id":"cinu3eu0l0060xoj0epnkh36m"},{"name":"解密","_id":"cinu3eu0l0061xoj0f48gblb9"},{"name":"Thread","_id":"cinu3eu0l0062xoj0m20n9pml"},{"name":"Runnable","_id":"cinu3eu0n0065xoj05g9qdb48"},{"name":"多线程","_id":"cinu3eu0n0068xoj0xf1xuhon"},{"name":"死锁","_id":"cinu3eu0p006bxoj03w77ch0v"},{"name":"synchronized","_id":"cinu3eu0p006fxoj0ftnq4py9"},{"name":"ThreadPoolExecutor","_id":"cinu3eu0q006ixoj05ebjblhv"},{"name":"ScheduledThreadPoolExecutor","_id":"cinu3eu0s006oxoj0mz79w5se"},{"name":"newCachedThreadPool","_id":"cinu3eu0s006rxoj0o8xv9qw5"},{"name":"newSingleThreadExecutor","_id":"cinu3eu0t006vxoj0bw8bjrqe"},{"name":"newFixedThreadPool","_id":"cinu3eu0t006yxoj0q60gdqip"},{"name":"ExecutorService","_id":"cinu3eu0u006zxoj0qzsbktzr"},{"name":"volatile","_id":"cinu3eu0w0073xoj0jt7d2tox"},{"name":"ReentrantLock","_id":"cinu3eu0w0076xoj0htijvbvv"},{"name":"原子性","_id":"cinu3eu0x0079xoj0sm8owdrf"},{"name":"可见性","_id":"cinu3eu0y007bxoj035emk67k"},{"name":"重排序","_id":"cinu3eu0y007cxoj0tz1zuuie"},{"name":"Android studio","_id":"cinu3eu10007gxoj0pd40dgug"},{"name":"IDE","_id":"cinu3eu10007jxoj0qfimq2jk"},{"name":"PHP","_id":"cinu3eu11007mxoj0zllzwew6"},{"name":"CI","_id":"cinu3eu12007pxoj01j1bnp1l"},{"name":"CodeIgniter","_id":"cinu3eu13007rxoj01r3ov99z"},{"name":"Laravel","_id":"cinu3eu14007vxoj0x1rv6q79"},{"name":"artisan","_id":"cinu3eu14007xxoj02v5y5kkr"},{"name":"Integration/Image","_id":"cinu3eu15007yxoj08xge1w6r"}]}}